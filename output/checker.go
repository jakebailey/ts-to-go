// Code generated by ts-to-go at 52c59dbcbee274e523ef39e6c8be1bd5e110c2f1. DO NOT EDIT.

package output

type Checker struct {
	deferredDiagnosticsCallbacks []func()
	addLazyDiagnostic/* TODO(TS-TO-GO) inferred type (arg: () => void) => void */ any
	cancellationToken CancellationToken
	scanner           *Scanner
	Symbol/* TODO(TS-TO-GO) inferred type new (flags: SymbolFlags, name: __String) => Symbol */ any
	Type/* TODO(TS-TO-GO) inferred type new (checker: TypeChecker, flags: TypeFlags) => Type */ any
	Signature/* TODO(TS-TO-GO) inferred type new (checker: TypeChecker, flags: SignatureFlags) => Signature */ any
	typeCount                    number
	symbolCount                  number
	totalInstantiationCount      number
	instantiationCount           number
	instantiationDepth           number
	inlineLevel                  number
	currentNode                  *ast.Node
	varianceTypeParameter        *TypeParameter
	isInferencePartiallyBlocked  bool
	emptySymbols                 SymbolTable
	arrayVariances               []VarianceFlags
	compilerOptions              CompilerOptions
	languageVersion              ScriptTarget
	moduleKind                   ModuleKind
	legacyDecorators             bool
	useDefineForClassFields      bool
	emitStandardClassFields      bool
	allowSyntheticDefaultImports bool
	strictNullChecks             bool
	strictFunctionTypes          bool
	strictBindCallApply          bool
	strictPropertyInitialization bool
	strictBuiltinIteratorReturn  bool
	noImplicitAny                bool
	noImplicitThis               bool
	useUnknownInCatchVariables   bool
	exactOptionalPropertyTypes   *bool
	noUncheckedSideEffectImports bool
	checkBinaryExpression/* TODO(TS-TO-GO) inferred type (node: BinaryExpression, checkMode: CheckMode | undefined) => Type */ any
	emitResolver EmitResolver
	nodeBuilder/* TODO(TS-TO-GO) inferred type { typeToTypeNode: (type: Type, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => TypeNode | undefined; typePredicateToTypePredicateNode: (typePredicate: TypePredicate, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => TypePredicateNode | undefined; expressionOrTypeToTypeNode: (expr: Expression | JsxAttributeValue | undefined, type: Type, addUndefined?: boolean, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => TypeNode | undefined; serializeTypeForDeclaration: (declaration: Declaration, type: Type, symbol: Symbol, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => TypeNode | undefined; serializeReturnTypeForSignature: (signature: Signature, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => TypeNode | undefined; indexInfoToIndexSignatureDeclaration: (indexInfo: IndexInfo, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => IndexSignatureDeclaration | undefined; signatureToSignatureDeclaration: (signature: Signature, kind: SignatureDeclaration["kind"], enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => SignatureDeclaration | undefined; symbolToEntityName: (symbol: Symbol, meaning: SymbolFlags, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => EntityName | undefined; symbolToExpression: (symbol: Symbol, meaning: SymbolFlags, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => Expression | undefined; symbolToTypeParameterDeclarations: (symbol: Symbol, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => NodeArray<TypeParameterDeclaration> | undefined; symbolToParameterDeclaration: (symbol: Symbol, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => ParameterDeclaration | undefined; typeParameterToDeclaration: (parameter: TypeParameter, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => TypeParameterDeclaration | undefined; symbolTableToDeclarationStatements: (symbolTable: SymbolTable, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => Statement[] | undefined; symbolToNode: (symbol: Symbol, meaning: SymbolFlags, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => Expression | ComputedPropertyName | undefined; } */ any
	syntacticNodeBuilder SyntacticNodeBuilder
	evaluate/* TODO(TS-TO-GO) inferred type { (expr: TemplateExpression, location?: Declaration): EvaluatorResult<string | undefined>; (expr: Expression, location?: Declaration): EvaluatorResult; } */ any
	globals                                         SymbolTable
	undefinedSymbol                                 TransientSymbol
	globalThisSymbol                                TransientSymbol
	argumentsSymbol                                 TransientSymbol
	requireSymbol                                   TransientSymbol
	isolatedModulesLikeFlagName                     string
	canCollectSymbolAliasAccessabilityData          bool
	apparentArgumentCount                           *number
	lastGetCombinedNodeFlagsNode                    *ast.Node
	lastGetCombinedNodeFlagsResult                  NodeFlags
	lastGetCombinedModifierFlagsNode                Declaration
	lastGetCombinedModifierFlagsResult              ModifierFlags
	resolveName                                     NameResolver
	resolveNameForSymbolSuggestion                  NameResolver
	checker                                         TypeChecker
	tupleTypes                                      Map[string, GenericType]
	unionTypes                                      Map[string, UnionType]
	unionOfUnionTypes                               Map[string, *Type]
	intersectionTypes                               Map[string, *Type]
	stringLiteralTypes                              Map[string, StringLiteralType]
	numberLiteralTypes                              Map[number, NumberLiteralType]
	bigIntLiteralTypes                              Map[string, BigIntLiteralType]
	enumLiteralTypes                                Map[string, LiteralType]
	indexedAccessTypes                              Map[string, IndexedAccessType]
	templateLiteralTypes                            Map[string, TemplateLiteralType]
	stringMappingTypes                              Map[string, StringMappingType]
	substitutionTypes                               Map[string, SubstitutionType]
	subtypeReductionCache                           Map[string, []*Type]
	decoratorContextOverrideTypeCache               Map[string, *Type]
	cachedTypes                                     Map[string, *Type]
	evolvingArrayTypes                              []EvolvingArrayType
	undefinedProperties                             SymbolTable
	markerTypes                                     Set[number]
	unknownSymbol                                   TransientSymbol
	resolvingSymbol                                 TransientSymbol
	unresolvedSymbols                               Map[string, TransientSymbol]
	errorTypes                                      Map[string, *Type]
	seenIntrinsicNames                              Set[string]
	anyType                                         IntrinsicType
	autoType                                        IntrinsicType
	wildcardType                                    IntrinsicType
	blockedStringType                               IntrinsicType
	errorType                                       IntrinsicType
	unresolvedType                                  IntrinsicType
	nonInferrableAnyType                            IntrinsicType
	intrinsicMarkerType                             IntrinsicType
	unknownType                                     IntrinsicType
	undefinedType                                   IntrinsicType
	undefinedWideningType                           IntrinsicType
	missingType                                     IntrinsicType
	undefinedOrMissingType                          IntrinsicType
	optionalType                                    IntrinsicType
	nullType                                        IntrinsicType
	nullWideningType                                IntrinsicType
	stringType                                      IntrinsicType
	numberType                                      IntrinsicType
	bigintType                                      IntrinsicType
	falseType                                       FreshableIntrinsicType
	regularFalseType                                FreshableIntrinsicType
	trueType                                        FreshableIntrinsicType
	regularTrueType                                 FreshableIntrinsicType
	booleanType                                     *Type
	esSymbolType                                    IntrinsicType
	voidType                                        IntrinsicType
	neverType                                       IntrinsicType
	silentNeverType                                 IntrinsicType
	implicitNeverType                               IntrinsicType
	unreachableNeverType                            IntrinsicType
	nonPrimitiveType                                IntrinsicType
	stringOrNumberType                              *Type
	stringNumberSymbolType                          *Type
	numberOrBigIntType                              *Type
	templateConstraintType                          UnionType
	numericStringType                               *Type
	restrictiveMapper                               TypeMapper
	permissiveMapper                                TypeMapper
	uniqueLiteralType                               IntrinsicType
	uniqueLiteralMapper                             TypeMapper
	outofbandVarianceMarkerHandler                  *func(onlyUnreliable bool)
	reportUnreliableMapper                          TypeMapper
	reportUnmeasurableMapper                        TypeMapper
	emptyObjectType                                 ResolvedType
	emptyJsxObjectType                              ResolvedType
	emptyTypeLiteralSymbol                          TransientSymbol
	emptyTypeLiteralType                            ResolvedType
	unknownEmptyObjectType                          ResolvedType
	unknownUnionType                                *Type
	emptyGenericType                                GenericType
	anyFunctionType                                 ResolvedType
	noConstraintType                                ResolvedType
	circularConstraintType                          ResolvedType
	resolvingDefaultType                            ResolvedType
	markerSuperType                                 TypeParameter
	markerSubType                                   TypeParameter
	markerOtherType                                 TypeParameter
	markerSuperTypeForCheck                         TypeParameter
	markerSubTypeForCheck                           TypeParameter
	noTypePredicate                                 TypePredicate
	anySignature                                    Signature
	unknownSignature                                Signature
	resolvingSignature                              Signature
	silentNeverSignature                            Signature
	enumNumberIndexInfo                             IndexInfo
	iterationTypesCache                             Map[string, IterationTypes]
	noIterationTypes                                IterationTypes
	anyIterationTypes                               IterationTypes
	asyncIterationTypesResolver                     IterationTypesResolver
	syncIterationTypesResolver                      IterationTypesResolver
	amalgamatedDuplicates                           *Map[string, DuplicateInfoForFiles]
	reverseMappedCache                              Map[string, *Type]
	reverseHomomorphicMappedCache                   Map[string, *Type]
	ambientModulesCache                             *[]*ast.Symbol
	patternAmbientModules                           []PatternAmbientModule
	patternAmbientModuleAugmentations               *Map[string, *ast.Symbol]
	globalObjectType                                ObjectType
	globalFunctionType                              ObjectType
	globalCallableFunctionType                      ObjectType
	globalNewableFunctionType                       ObjectType
	globalArrayType                                 GenericType
	globalReadonlyArrayType                         GenericType
	globalStringType                                ObjectType
	globalNumberType                                ObjectType
	globalBooleanType                               ObjectType
	globalRegExpType                                ObjectType
	globalThisType                                  GenericType
	anyArrayType                                    *Type
	autoArrayType                                   *Type
	anyReadonlyArrayType                            *Type
	deferredGlobalNonNullableTypeAlias              *ast.Symbol
	deferredGlobalESSymbolConstructorSymbol         *ast.Symbol
	deferredGlobalESSymbolConstructorTypeSymbol     *ast.Symbol
	deferredGlobalESSymbolType                      *ObjectType
	deferredGlobalTypedPropertyDescriptorType       GenericType
	deferredGlobalPromiseType                       *GenericType
	deferredGlobalPromiseLikeType                   *GenericType
	deferredGlobalPromiseConstructorSymbol          *ast.Symbol
	deferredGlobalPromiseConstructorLikeType        *ObjectType
	deferredGlobalIterableType                      *GenericType
	deferredGlobalIteratorType                      *GenericType
	deferredGlobalIterableIteratorType              *GenericType
	deferredGlobalIteratorObjectType                *GenericType
	deferredGlobalGeneratorType                     *GenericType
	deferredGlobalIteratorYieldResultType           *GenericType
	deferredGlobalIteratorReturnResultType          *GenericType
	deferredGlobalAsyncIterableType                 *GenericType
	deferredGlobalAsyncIteratorType                 *GenericType
	deferredGlobalAsyncIterableIteratorType         *GenericType
	deferredGlobalBuiltinIteratorTypes              *[]GenericType
	deferredGlobalBuiltinAsyncIteratorTypes         *[]GenericType
	deferredGlobalAsyncIteratorObjectType           *GenericType
	deferredGlobalAsyncGeneratorType                *GenericType
	deferredGlobalTemplateStringsArrayType          *ObjectType
	deferredGlobalImportMetaType                    ObjectType
	deferredGlobalImportMetaExpressionType          ObjectType
	deferredGlobalImportCallOptionsType             *ObjectType
	deferredGlobalImportAttributesType              *ObjectType
	deferredGlobalDisposableType                    *ObjectType
	deferredGlobalAsyncDisposableType               *ObjectType
	deferredGlobalExtractSymbol                     *ast.Symbol
	deferredGlobalOmitSymbol                        *ast.Symbol
	deferredGlobalAwaitedSymbol                     *ast.Symbol
	deferredGlobalBigIntType                        *ObjectType
	deferredGlobalNaNSymbol                         *ast.Symbol
	deferredGlobalRecordSymbol                      *ast.Symbol
	deferredGlobalClassDecoratorContextType         *GenericType
	deferredGlobalClassMethodDecoratorContextType   *GenericType
	deferredGlobalClassGetterDecoratorContextType   *GenericType
	deferredGlobalClassSetterDecoratorContextType   *GenericType
	deferredGlobalClassAccessorDecoratorContextType *GenericType
	deferredGlobalClassAccessorDecoratorTargetType  *GenericType
	deferredGlobalClassAccessorDecoratorResultType  *GenericType
	deferredGlobalClassFieldDecoratorContextType    *GenericType
	allPotentiallyUnusedIdentifiers                 Map[Path, [] /* TODO(TS-TO-GO) inferred type (SourceFile | CallSignatureDeclaration | ConstructSignatureDeclaration | MethodSignature | FunctionTypeNode | ConstructorTypeNode | FunctionDeclaration | MethodDeclaration | ConstructorDeclaration | AccessorDeclaration | FunctionExpression | ArrowFunction | ForStatement | ForOfStatement | ForInStatement | InterfaceDeclaration | ClassLikeDeclaration | Block | ModuleDeclaration | TypeAliasDeclaration | CaseBlock | InferTypeNode) */ any]
	flowLoopStart                                   number
	flowLoopCount                                   number
	sharedFlowCount                                 number
	flowAnalysisDisabled                            bool
	flowInvocationCount                             number
	lastFlowNode                                    *FlowNode
	lastFlowNodeReachable                           bool
	flowTypeCache                                   *[]*Type
	contextualTypeNodes                             []*ast.Node
	contextualTypes                                 []*Type
	contextualIsCache                               []bool
	contextualTypeCount                             number
	contextualBindingPatterns                       []BindingPattern
	inferenceContextNodes                           []*ast.Node
	inferenceContexts                               []*InferenceContext
	inferenceContextCount                           number
	emptyStringType                                 StringLiteralType
	zeroType                                        NumberLiteralType
	zeroBigIntType                                  BigIntLiteralType
	resolutionTargets                               []TypeSystemEntity
	resolutionResults                               []bool
	resolutionPropertyNames                         []TypeSystemPropertyName
	resolutionStart                                 number
	inVarianceComputation                           bool
	suggestionCount                                 number
	maximumSuggestionCount                          number
	mergedSymbols                                   []*ast.Symbol
	symbolLinks                                     []SymbolLinks
	nodeLinks                                       []NodeLinks
	flowLoopCaches                                  []Map[string, *Type]
	flowLoopNodes                                   []FlowNode
	flowLoopKeys                                    []string
	flowLoopTypes                                   [][]*Type
	sharedFlowNodes                                 []FlowNode
	sharedFlowTypes                                 []FlowType
	flowNodeReachable                               []*bool
	flowNodePostSuper                               []*bool
	potentialThisCollisions                         []*ast.Node
	potentialNewTargetCollisions                    []*ast.Node
	potentialWeakMapSetCollisions                   []*ast.Node
	potentialReflectCollisions                      []*ast.Node
	potentialUnusedRenamedBindingElementsInTypes    []BindingElement
	awaitedTypeStack                                []number
	reverseMappedSourceStack                        []*Type
	reverseMappedTargetStack                        []*Type
	reverseExpandingFlags                           ExpandingFlags
	diagnostics                                     DiagnosticCollection
	suggestionDiagnostics                           DiagnosticCollection
	typeofType                                      *Type
	_jsxNamespace                                   string
	_jsxFactoryEntity                               *EntityName
	subtypeRelation                                 Map[string, RelationComparisonResult]
	strictSubtypeRelation                           Map[string, RelationComparisonResult]
	assignableRelation                              Map[string, RelationComparisonResult]
	comparableRelation                              Map[string, RelationComparisonResult]
	identityRelation                                Map[string, RelationComparisonResult]
	enumRelation                                    Map[string, RelationComparisonResult]
	suggestedExtensions                             [] /* TODO(TS-TO-GO) TypeNode TupleType: [string, string] */ any
}

var ambientModuleSymbolRegex = regexp.MustParse(`^".+"$`)
var anon = "(anonymous)" /* as __String & string */

type ReferenceHint int32

const (
	ReferenceHintUnspecified ReferenceHint = iota
	ReferenceHintIdentifier
	ReferenceHintProperty
	ReferenceHintExportAssignment
	ReferenceHintJsx
	ReferenceHintAsyncFunction
	ReferenceHintExportImportEquals
	ReferenceHintExportSpecifier
	ReferenceHintDecorator
)

var nextSymbolId = 1
var nextNodeId = 1
var nextMergeId = 1
var nextFlowId = 1

type IterationUse int32

const (
	IterationUseAllowsSyncIterablesFlag  IterationUse = 1 << 0
	IterationUseAllowsAsyncIterablesFlag IterationUse = 1 << 1
	IterationUseAllowsStringInputFlag    IterationUse = 1 << 2
	IterationUseForOfFlag                IterationUse = 1 << 3
	IterationUseYieldStarFlag            IterationUse = 1 << 4
	IterationUseSpreadFlag               IterationUse = 1 << 5
	IterationUseDestructuringFlag        IterationUse = 1 << 6
	IterationUsePossiblyOutOfBounds      IterationUse = 1 << 7
	// Spread, Destructuring, Array element assignment
	IterationUseElement                  IterationUse = IterationUseAllowsSyncIterablesFlag
	IterationUseSpread                   IterationUse = IterationUseAllowsSyncIterablesFlag | IterationUseIterationUseSpreadFlag
	IterationUseDestructuring            IterationUse = IterationUseAllowsSyncIterablesFlag | IterationUseIterationUseDestructuringFlag
	IterationUseForOf                    IterationUse = IterationUseAllowsSyncIterablesFlag | IterationUseAllowsStringInputFlag | IterationUseIterationUseForOfFlag
	IterationUseForAwaitOf               IterationUse = IterationUseAllowsSyncIterablesFlag | IterationUseAllowsAsyncIterablesFlag | IterationUseAllowsStringInputFlag | IterationUseIterationUseForOfFlag
	IterationUseYieldStar                IterationUse = IterationUseAllowsSyncIterablesFlag | IterationUseIterationUseYieldStarFlag
	IterationUseAsyncYieldStar           IterationUse = IterationUseAllowsSyncIterablesFlag | IterationUseAllowsAsyncIterablesFlag | IterationUseIterationUseYieldStarFlag
	IterationUseGeneratorReturnType      IterationUse = IterationUseAllowsSyncIterablesFlag
	IterationUseAsyncGeneratorReturnType IterationUse = IterationUseAllowsAsyncIterablesFlag
)

type IterationTypeKind int32

const (
	IterationTypeKindYield IterationTypeKind = iota
	IterationTypeKindReturn
	IterationTypeKindNext
)

type IterationTypesResolver struct {
	iterableCacheKey              Union[ /* TODO(TS-TO-GO) TypeNode LiteralType: "iterationTypesOfAsyncIterable" */ any /* TODO(TS-TO-GO) TypeNode LiteralType: "iterationTypesOfIterable" */, any]
	iteratorCacheKey              Union[ /* TODO(TS-TO-GO) TypeNode LiteralType: "iterationTypesOfAsyncIterator" */ any /* TODO(TS-TO-GO) TypeNode LiteralType: "iterationTypesOfIterator" */, any]
	iteratorSymbolName            Union[ /* TODO(TS-TO-GO) TypeNode LiteralType: "asyncIterator" */ any /* TODO(TS-TO-GO) TypeNode LiteralType: "iterator" */, any]
	getGlobalIteratorType         func(reportErrors bool) GenericType
	getGlobalIterableType         func(reportErrors bool) GenericType
	getGlobalIterableIteratorType func(reportErrors bool) GenericType
	getGlobalIteratorObjectType   func(reportErrors bool) GenericType
	getGlobalGeneratorType        func(reportErrors bool) GenericType
	getGlobalBuiltinIteratorTypes func() []GenericType
	resolveIterationType          func(t *Type, errorNode *ast.Node) *Type
	mustHaveANextMethodDiagnostic DiagnosticMessage
	mustBeAMethodDiagnostic       DiagnosticMessage
	mustHaveAValueDiagnostic      DiagnosticMessage
}

type WideningKind int32

const (
	WideningKindNormal WideningKind = iota
	WideningKindFunctionReturn
	WideningKindGeneratorNext
	WideningKindGeneratorYield
)

// dprint-ignore

type TypeFacts int32

const (
	TypeFactsNone               TypeFacts = 0
	TypeFactsTypeofEQString     TypeFacts = 1 << 0
	TypeFactsTypeofEQNumber     TypeFacts = 1 << 1
	TypeFactsTypeofEQBigInt     TypeFacts = 1 << 2
	TypeFactsTypeofEQBoolean    TypeFacts = 1 << 3
	TypeFactsTypeofEQSymbol     TypeFacts = 1 << 4
	TypeFactsTypeofEQObject     TypeFacts = 1 << 5
	TypeFactsTypeofEQFunction   TypeFacts = 1 << 6
	TypeFactsTypeofEQHostObject TypeFacts = 1 << 7
	TypeFactsTypeofNEString     TypeFacts = 1 << 8
	TypeFactsTypeofNENumber     TypeFacts = 1 << 9
	TypeFactsTypeofNEBigInt     TypeFacts = 1 << 10
	TypeFactsTypeofNEBoolean    TypeFacts = 1 << 11
	TypeFactsTypeofNESymbol     TypeFacts = 1 << 12
	TypeFactsTypeofNEObject     TypeFacts = 1 << 13
	TypeFactsTypeofNEFunction   TypeFacts = 1 << 14
	TypeFactsTypeofNEHostObject TypeFacts = 1 << 15
	TypeFactsEQUndefined        TypeFacts = 1 << 16
	TypeFactsEQNull             TypeFacts = 1 << 17
	TypeFactsEQUndefinedOrNull  TypeFacts = 1 << 18
	TypeFactsNEUndefined        TypeFacts = 1 << 19
	TypeFactsNENull             TypeFacts = 1 << 20
	TypeFactsNEUndefinedOrNull  TypeFacts = 1 << 21
	TypeFactsTruthy             TypeFacts = 1 << 22
	TypeFactsFalsy              TypeFacts = 1 << 23
	TypeFactsIsUndefined        TypeFacts = 1 << 24
	TypeFactsIsNull             TypeFacts = 1 << 25
	TypeFactsIsUndefinedOrNull  TypeFacts = TypeFactsIsUndefined | TypeFactsIsNull
	TypeFactsAll                TypeFacts = (1 << 27) - 1
	// The following members encode facts about particular kinds of types for use in the getTypeFacts function.
	// The presence of a particular fact means that the given test is true for some (and possibly all) values
	// of that kind of type.
	TypeFactsBaseStringStrictFacts     TypeFacts = TypeFactsTypeofEQString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull
	TypeFactsBaseStringFacts           TypeFacts = TypeFactsBaseTypeFactsStringStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsStringStrictFacts         TypeFacts = TypeFactsBaseTypeFactsStringStrictFacts | TypeFactsTruthy | TypeFactsFalsy
	TypeFactsStringFacts               TypeFacts = TypeFactsBaseTypeFactsStringFacts | TypeFactsTruthy
	TypeFactsEmptyStringStrictFacts    TypeFacts = TypeFactsBaseTypeFactsStringStrictFacts | TypeFactsFalsy
	TypeFactsEmptyStringFacts          TypeFacts = TypeFactsBaseTypeFactsStringFacts
	TypeFactsNonEmptyStringStrictFacts TypeFacts = TypeFactsBaseTypeFactsStringStrictFacts | TypeFactsTruthy
	TypeFactsNonEmptyStringFacts       TypeFacts = TypeFactsBaseTypeFactsStringFacts | TypeFactsTruthy
	TypeFactsBaseNumberStrictFacts     TypeFacts = TypeFactsTypeofEQNumber | TypeFactsTypeofNEString | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull
	TypeFactsBaseNumberFacts           TypeFacts = TypeFactsBaseTypeFactsNumberStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsNumberStrictFacts         TypeFacts = TypeFactsBaseTypeFactsNumberStrictFacts | TypeFactsTruthy | TypeFactsFalsy
	TypeFactsNumberFacts               TypeFacts = TypeFactsBaseTypeFactsNumberFacts | TypeFactsTruthy
	TypeFactsZeroNumberStrictFacts     TypeFacts = TypeFactsBaseTypeFactsNumberStrictFacts | TypeFactsFalsy
	TypeFactsZeroNumberFacts           TypeFacts = TypeFactsBaseTypeFactsNumberFacts
	TypeFactsNonZeroNumberStrictFacts  TypeFacts = TypeFactsBaseTypeFactsNumberStrictFacts | TypeFactsTruthy
	TypeFactsNonZeroNumberFacts        TypeFacts = TypeFactsBaseTypeFactsNumberFacts | TypeFactsTruthy
	TypeFactsBaseBigIntStrictFacts     TypeFacts = TypeFactsTypeofEQBigInt | TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull
	TypeFactsBaseBigIntFacts           TypeFacts = TypeFactsBaseTypeFactsBigIntStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsBigIntStrictFacts         TypeFacts = TypeFactsBaseTypeFactsBigIntStrictFacts | TypeFactsTruthy | TypeFactsFalsy
	TypeFactsBigIntFacts               TypeFacts = TypeFactsBaseTypeFactsBigIntFacts | TypeFactsTruthy
	TypeFactsZeroBigIntStrictFacts     TypeFacts = TypeFactsBaseTypeFactsBigIntStrictFacts | TypeFactsFalsy
	TypeFactsZeroBigIntFacts           TypeFacts = TypeFactsBaseTypeFactsBigIntFacts
	TypeFactsNonZeroBigIntStrictFacts  TypeFacts = TypeFactsBaseTypeFactsBigIntStrictFacts | TypeFactsTruthy
	TypeFactsNonZeroBigIntFacts        TypeFacts = TypeFactsBaseTypeFactsBigIntFacts | TypeFactsTruthy
	TypeFactsBaseBooleanStrictFacts    TypeFacts = TypeFactsTypeofEQBoolean | TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull
	TypeFactsBaseBooleanFacts          TypeFacts = TypeFactsBaseTypeFactsBooleanStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsBooleanStrictFacts        TypeFacts = TypeFactsBaseTypeFactsBooleanStrictFacts | TypeFactsTruthy | TypeFactsFalsy
	TypeFactsBooleanFacts              TypeFacts = TypeFactsBaseTypeFactsBooleanFacts | TypeFactsTruthy
	TypeFactsFalseStrictFacts          TypeFacts = TypeFactsBaseTypeFactsBooleanStrictFacts | TypeFactsFalsy
	TypeFactsFalseFacts                TypeFacts = TypeFactsBaseTypeFactsBooleanFacts
	TypeFactsTrueStrictFacts           TypeFacts = TypeFactsBaseTypeFactsBooleanStrictFacts | TypeFactsTruthy
	TypeFactsTrueFacts                 TypeFacts = TypeFactsBaseTypeFactsBooleanFacts | TypeFactsTruthy
	TypeFactsSymbolStrictFacts         TypeFacts = TypeFactsTypeofEQSymbol | TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull | TypeFactsTruthy
	TypeFactsSymbolFacts               TypeFacts = TypeFactsSymbolStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsObjectStrictFacts         TypeFacts = TypeFactsTypeofEQObject | TypeFactsTypeofEQHostObject | TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEFunction | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull | TypeFactsTruthy
	TypeFactsObjectFacts               TypeFacts = TypeFactsObjectStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsFunctionStrictFacts       TypeFacts = TypeFactsTypeofEQFunction | TypeFactsTypeofEQHostObject | TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull | TypeFactsTruthy
	TypeFactsFunctionFacts             TypeFacts = TypeFactsFunctionStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsVoidFacts                 TypeFacts = TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsEQUndefined | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsNENull | TypeFactsFalsy
	TypeFactsUndefinedFacts            TypeFacts = TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsEQUndefined | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsNENull | TypeFactsFalsy | TypeFactsIsUndefined
	TypeFactsNullFacts                 TypeFacts = TypeFactsTypeofEQObject | TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsNEUndefined | TypeFactsFalsy | TypeFactsIsNull
	TypeFactsEmptyObjectStrictFacts    TypeFacts = TypeFactsAll & ^(TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsTypeFactsIsUndefinedOrNull)
	TypeFactsEmptyObjectFacts          TypeFacts = TypeFactsAll & ^TypeFactsTypeFactsIsUndefinedOrNull
	TypeFactsUnknownFacts              TypeFacts = TypeFactsAll & ^TypeFactsTypeFactsIsUndefinedOrNull
	TypeFactsAllTypeofNE               TypeFacts = TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsNEUndefined
	// Masks
	TypeFactsOrFactsMask  TypeFacts = TypeFactsTypeofEQFunction | TypeFactsTypeofNEObject
	TypeFactsAndFactsMask TypeFacts = TypeFactsAll & ^TypeFactsOrFactsMask
)

var typeofNEFacts ReadonlyMap[string, TypeFacts] = NewMap(Object.entries(map[any]any{ /* TODO(TS-TO-GO): was object literal */
	"string":    TypeFactsTypeofNEString,
	"number":    TypeFactsTypeofNENumber,
	"bigint":    TypeFactsTypeofNEBigInt,
	"boolean":   TypeFactsTypeofNEBoolean,
	"symbol":    TypeFactsTypeofNESymbol,
	"undefined": TypeFactsNEUndefined,
	"object":    TypeFactsTypeofNEObject,
	"function":  TypeFactsTypeofNEFunction,
}))

type TypeSystemEntity Union[*ast.Node, *ast.Symbol, *Type, Signature]

type TypeSystemPropertyName int32

const (
	TypeSystemPropertyNameType TypeSystemPropertyName = iota
	TypeSystemPropertyNameResolvedBaseConstructorType
	TypeSystemPropertyNameDeclaredType
	TypeSystemPropertyNameResolvedReturnType
	TypeSystemPropertyNameImmediateBaseConstraint
	TypeSystemPropertyNameResolvedTypeArguments
	TypeSystemPropertyNameResolvedBaseTypes
	TypeSystemPropertyNameWriteType
	TypeSystemPropertyNameParameterInitializerContainsUndefined
)

// dprint-ignore

type CheckMode int32

const (
	CheckModeNormal               CheckMode = 0
	CheckModeContextual           CheckMode = 1 << 0
	CheckModeInferential          CheckMode = 1 << 1
	CheckModeSkipContextSensitive CheckMode = 1 << 2
	CheckModeSkipGenericFunctions CheckMode = 1 << 3
	CheckModeIsForSignatureHelp   CheckMode = 1 << 4
	CheckModeRestBindingElement   CheckMode = 1 << 5
	//   e.g. in `const { a, ...rest } = foo`, when checking the type of `foo` to determine the type of `rest`,
	//   we need to preserve generic types instead of substituting them for constraints
	CheckModeTypeOnly CheckMode = 1 << 6
)

/** @internal */

type SignatureCheckMode int32

const (
	SignatureCheckModeNone               SignatureCheckMode = 0
	SignatureCheckModeBivariantCallback  SignatureCheckMode = 1 << 0
	SignatureCheckModeStrictCallback     SignatureCheckMode = 1 << 1
	SignatureCheckModeIgnoreReturnTypes  SignatureCheckMode = 1 << 2
	SignatureCheckModeStrictArity        SignatureCheckMode = 1 << 3
	SignatureCheckModeStrictTopSignature SignatureCheckMode = 1 << 4
	SignatureCheckModeCallback           SignatureCheckMode = SignatureCheckModeBivariantSignatureCheckModeCallback | SignatureCheckModeStrictSignatureCheckModeCallback
)

type IntersectionState int32

const (
	IntersectionStateNone   IntersectionState = 0
	IntersectionStateSource IntersectionState = 1 << 0
	IntersectionStateTarget IntersectionState = 1 << 1
)

type RecursionFlags int32

const (
	RecursionFlagsNone   RecursionFlags = 0
	RecursionFlagsSource RecursionFlags = 1 << 0
	RecursionFlagsTarget RecursionFlags = 1 << 1
	RecursionFlagsBoth   RecursionFlags = RecursionFlagsSource | RecursionFlagsTarget
)

type MappedTypeModifiers int32

const (
	MappedTypeModifiersIncludeReadonly MappedTypeModifiers = 1 << 0
	MappedTypeModifiersExcludeReadonly MappedTypeModifiers = 1 << 1
	MappedTypeModifiersIncludeOptional MappedTypeModifiers = 1 << 2
	MappedTypeModifiersExcludeOptional MappedTypeModifiers = 1 << 3
)

type MappedTypeNameTypeKind int32

const (
	MappedTypeNameTypeKindNone MappedTypeNameTypeKind = iota
	MappedTypeNameTypeKindFiltering
	MappedTypeNameTypeKindRemapping
)

type ExpandingFlags int32

const (
	ExpandingFlagsNone   ExpandingFlags = 0
	ExpandingFlagsSource ExpandingFlags = 1
	ExpandingFlagsTarget ExpandingFlags = 1 << 1
	ExpandingFlagsBoth   ExpandingFlags = ExpandingFlagsSource | ExpandingFlagsTarget
)

type MembersOrExportsResolutionKind string

const (
	MembersOrExportsResolutionKindresolvedExports MembersOrExportsResolutionKind = "MembersOrExportsResolutionKindresolvedExports"
	MembersOrExportsResolutionKindresolvedMembers MembersOrExportsResolutionKind = "MembersOrExportsResolutionKindresolvedMembers"
)

type UnusedKind int32

const (
	UnusedKindLocal UnusedKind = iota
	UnusedKindParameter
)

/** @param containingNode Node to check for parse error */

type AddUnusedDiagnostic func(containingNode *ast.Node, t UnusedKind, diagnostic DiagnosticWithLocation)

var isNotOverloadAndNotAccessor = and(isNotOverload, isNotAccessor)

type DeclarationMeaning int32

const (
	DeclarationMeaningGetAccessor                DeclarationMeaning = 1
	DeclarationMeaningSetAccessor                DeclarationMeaning = 2
	DeclarationMeaningPropertyAssignment         DeclarationMeaning = 4
	DeclarationMeaningMethod                     DeclarationMeaning = 8
	DeclarationMeaningPrivateStatic              DeclarationMeaning = 16
	DeclarationMeaningGetOrSetAccessor           DeclarationMeaning = DeclarationMeaningGetAccessor | DeclarationMeaningSetAccessor
	DeclarationMeaningPropertyAssignmentOrMethod DeclarationMeaning = DeclarationMeaningPropertyAssignment | DeclarationMeaningMethod
)

type DeclarationSpaces int32

const (
	DeclarationSpacesNone            DeclarationSpaces = 0
	DeclarationSpacesExportValue     DeclarationSpaces = 1 << 0
	DeclarationSpacesExportType      DeclarationSpaces = 1 << 1
	DeclarationSpacesExportNamespace DeclarationSpaces = 1 << 2
)

type MinArgumentCountFlags int32

const (
	MinArgumentCountFlagsNone                    MinArgumentCountFlags = 0
	MinArgumentCountFlagsStrongArityForUntypedJS MinArgumentCountFlags = 1 << 0
	MinArgumentCountFlagsVoidIsNonOptional       MinArgumentCountFlags = 1 << 1
)

type IntrinsicTypeKind int32

const (
	IntrinsicTypeKindUppercase IntrinsicTypeKind = iota
	IntrinsicTypeKindLowercase
	IntrinsicTypeKindCapitalize
	IntrinsicTypeKindUncapitalize
	IntrinsicTypeKindNoInfer
)

var intrinsicTypeKinds ReadonlyMap[string, IntrinsicTypeKind] = NewMap(Object.entries(map[any]any{ /* TODO(TS-TO-GO): was object literal */
	"Uppercase":    IntrinsicTypeKindUppercase,
	"Lowercase":    IntrinsicTypeKindLowercase,
	"Capitalize":   IntrinsicTypeKindCapitalize,
	"Uncapitalize": IntrinsicTypeKindUncapitalize,
	"NoInfer":      IntrinsicTypeKindNoInfer,
}))

var SymbolLinks = /* TODO(TS-TO-GO) Expression ClassExpression: class implements SymbolLinks { declare _symbolLinksBrand: any; } */ TODO

func NodeLinks(this NodeLinks) {
	this.flags = NodeCheckFlagsNone
}

/** @internal */

func getNodeId(node *ast.Node) number {
	if !node.Id {
		node.Id = nextNodeId
		nextNodeId++
	}
	return node.Id
}

/** @internal */

func getSymbolId(symbol *ast.Symbol) SymbolId {
	if symbol.Id == 0 {
		symbol.Id = nextSymbolId
		nextSymbolId++
	}

	return symbol.Id
}

/** @internal */

func isInstantiatedModule(node ModuleDeclaration, preserveConstEnums bool) bool {
	moduleState := getModuleInstanceState(node)
	return moduleState == ModuleInstanceStateInstantiated || (preserveConstEnums && moduleState == ModuleInstanceStateConstEnumOnly)
}

/** @internal */

func createTypeChecker(host TypeCheckerHost) TypeChecker {
	// Why var? It avoids TDZ checks in the runtime which can be costly.
	// See: https://github.com/microsoft/TypeScript/issues/52924
	/* eslint-disable no-var */
	tc.deferredDiagnosticsCallbacks = []never{}

	tc.addLazyDiagnostic = func(arg func()) {
		c.deferredDiagnosticsCallbacks.push(arg)
	}

	// Cancellation that controls whether or not we can cancel in the middle of type checking.
	// In general cancelling is *not* safe for the type checker.  We might be in the middle of
	// computing something, and we will leave our internals in an inconsistent state.  Callers
	// who set the cancellation token should catch if a cancellation exception occurs, and
	// should throw away and create a new TypeChecker.
	//
	// Currently we only support setting the cancellation token when getting diagnostics.  This
	// is because diagnostics can be quite expensive, and we want to allow hosts to bail out if
	// they no longer need the information (for example, if the user started editing again).

	tc.Symbol = objectAllocator.getSymbolConstructor()
	tc.Type = objectAllocator.getTypeConstructor()
	tc.Signature = objectAllocator.getSignatureConstructor()

	tc.typeCount = 0
	tc.symbolCount = 0
	tc.totalInstantiationCount = 0
	tc.instantiationCount = 0
	tc.instantiationDepth = 0
	tc.inlineLevel = 0
	tc.isInferencePartiallyBlocked = false

	tc.emptySymbols = createSymbolTable()
	tc.arrayVariances = []VarianceFlags{VarianceFlagsCovariant}

	tc.compilerOptions = host.getCompilerOptions()
	tc.languageVersion = getEmitScriptTarget(c.compilerOptions)
	tc.moduleKind = getEmitModuleKind(c.compilerOptions)
	tc.legacyDecorators = c.compilerOptions.experimentalDecorators
	tc.useDefineForClassFields = getUseDefineForClassFields(c.compilerOptions)
	tc.emitStandardClassFields = getEmitStandardClassFields(c.compilerOptions)
	tc.allowSyntheticDefaultImports = getAllowSyntheticDefaultImports(c.compilerOptions)
	tc.strictNullChecks = getStrictOptionValue(c.compilerOptions, "strictNullChecks")
	tc.strictFunctionTypes = getStrictOptionValue(c.compilerOptions, "strictFunctionTypes")
	tc.strictBindCallApply = getStrictOptionValue(c.compilerOptions, "strictBindCallApply")
	tc.strictPropertyInitialization = getStrictOptionValue(c.compilerOptions, "strictPropertyInitialization")
	tc.strictBuiltinIteratorReturn = getStrictOptionValue(c.compilerOptions, "strictBuiltinIteratorReturn")
	tc.noImplicitAny = getStrictOptionValue(c.compilerOptions, "noImplicitAny")
	tc.noImplicitThis = getStrictOptionValue(c.compilerOptions, "noImplicitThis")
	tc.useUnknownInCatchVariables = getStrictOptionValue(c.compilerOptions, "useUnknownInCatchVariables")
	tc.exactOptionalPropertyTypes = c.compilerOptions.exactOptionalPropertyTypes
	tc.noUncheckedSideEffectImports = c.compilerOptions.noUncheckedSideEffectImports

	tc.checkBinaryExpression = c.createCheckBinaryExpression()
	tc.emitResolver = c.createResolver()
	tc.nodeBuilder = c.createNodeBuilder()
	tc.syntacticNodeBuilder = createSyntacticTypeNodeBuilder(c.compilerOptions, SyntacticTypeNodeBuilderResolver{
		isEntityNameVisible:             isEntityNameVisible,
		isExpandoFunctionDeclaration:    isExpandoFunctionDeclaration,
		getAllAccessorDeclarations:      c.getAllAccessorDeclarationsForDeclaration,
		requiresAddingImplicitUndefined: requiresAddingImplicitUndefined,
		isUndefinedIdentifierExpression: func(node Identifier) bool {
			Debug.assert(isExpressionNode(node))
			return c.getSymbolAtLocation(node) == c.undefinedSymbol
		},
		isDefinitelyReferenceToGlobalSymbolObject: isDefinitelyReferenceToGlobalSymbolObject,
	})
	tc.evaluate = createEvaluator(EvaluationResolver{
		evaluateElementAccessExpression: evaluateElementAccessExpression,
		evaluateEntityNameExpression:    evaluateEntityNameExpression,
	})

	tc.globals = createSymbolTable()
	tc.undefinedSymbol = c.createSymbol(ast.SymbolFlagsProperty, "undefined" /* as __String */)
	c.undefinedSymbol.Declarations = []never{}

	tc.globalThisSymbol = c.createSymbol(ast.SymbolFlagsModule, "globalThis" /* as __String */, ast.CheckFlagsReadonly)
	c.globalThisSymbol.Exports = c.globals
	c.globalThisSymbol.Declarations = []never{}
	c.globals.set(c.globalThisSymbol.EscapedName, c.globalThisSymbol)

	tc.argumentsSymbol = c.createSymbol(ast.SymbolFlagsProperty, "arguments" /* as __String */)
	tc.requireSymbol = c.createSymbol(ast.SymbolFlagsProperty, "require" /* as __String */)
	tc.isolatedModulesLikeFlagName = ifElse(c.compilerOptions.verbatimModuleSyntax, "verbatimModuleSyntax", "isolatedModules")
	tc.canCollectSymbolAliasAccessabilityData = !c.compilerOptions.verbatimModuleSyntax
	/** This will be set during calls to `getResolvedSignature` where services determines an apparent number of arguments greater than what is actually provided. */

	tc.lastGetCombinedNodeFlagsResult = ast.NodeFlagsNone
	tc.lastGetCombinedModifierFlagsResult = ast.ModifierFlagsNone
	tc.resolveName = createNameResolver(NameResolverOptions{
		compilerOptions:                  compilerOptions,
		requireSymbol:                    requireSymbol,
		argumentsSymbol:                  argumentsSymbol,
		globals:                          globals,
		getSymbolOfDeclaration:           getSymbolOfDeclaration,
		error:                            error,
		getRequiresScopeChangeCache:      getRequiresScopeChangeCache,
		setRequiresScopeChangeCache:      setRequiresScopeChangeCache,
		lookup:                           c.getSymbol,
		onPropertyWithInvalidInitializer: c.checkAndReportErrorForInvalidInitializer,
		onFailedToResolveSymbol:          onFailedToResolveSymbol,
		onSuccessfullyResolvedSymbol:     onSuccessfullyResolvedSymbol,
	})

	tc.resolveNameForSymbolSuggestion = createNameResolver(NameResolverOptions{
		compilerOptions:             compilerOptions,
		requireSymbol:               requireSymbol,
		argumentsSymbol:             argumentsSymbol,
		globals:                     globals,
		getSymbolOfDeclaration:      getSymbolOfDeclaration,
		error:                       error,
		getRequiresScopeChangeCache: getRequiresScopeChangeCache,
		setRequiresScopeChangeCache: setRequiresScopeChangeCache,
		lookup:                      c.getSuggestionForSymbolNameLookup,
	})
	// for public members that accept a Node or one of its subtypes, we must guard against
	// synthetic nodes created during transformations by calling `getParseTreeNode`.
	// for most of these, we perform the guard only on `checker` to avoid any possible
	// extra cost of calling `getParseTreeNode` when calling these functions from inside the
	// checker.
	tc.checker = TypeChecker{
		getNodeCount: func() number {
			return reduceLeft(host.getSourceFiles(), func(n number, s SourceFile) number {
				return n + s.NodeCount
			}, 0)
		},
		getIdentifierCount: func() number {
			return reduceLeft(host.getSourceFiles(), func(n number, s SourceFile) number {
				return n + s.IdentifierCount
			}, 0)
		},
		getSymbolCount: func() number {
			return reduceLeft(host.getSourceFiles(), func(n number, s SourceFile) number {
				return n + s.SymbolCount
			}, c.symbolCount)
		},
		getTypeCount: func() number {
			return c.typeCount
		},
		getInstantiationCount: func() number {
			return c.totalInstantiationCount
		},
		getRelationCacheSizes: func() /* TODO(TS-TO-GO) inferred type { assignable: number; identity: number; subtype: number; strictSubtype: number; } */ any {
			return (map[any]any{ /* TODO(TS-TO-GO): was object literal */
				"assignable":    c.assignableRelation.size,
				"identity":      c.identityRelation.size,
				"subtype":       c.subtypeRelation.size,
				"strictSubtype": c.strictSubtypeRelation.size,
			})
		},
		isUndefinedSymbol: func(symbol *ast.Symbol) bool {
			return symbol == c.undefinedSymbol
		},
		isArgumentsSymbol: func(symbol *ast.Symbol) bool {
			return symbol == c.argumentsSymbol
		},
		isUnknownSymbol: func(symbol *ast.Symbol) bool {
			return symbol == c.unknownSymbol
		},
		getMergedSymbol:        getMergedSymbol,
		symbolIsValue:          symbolIsValue,
		getDiagnostics:         getDiagnostics,
		getGlobalDiagnostics:   getGlobalDiagnostics,
		getRecursionIdentity:   getRecursionIdentity,
		getUnmatchedProperties: getUnmatchedProperties,
		getTypeOfSymbolAtLocation: func(symbol *ast.Symbol, locationIn *ast.Node) *Type {
			location := getParseTreeNode(locationIn)
			if location != nil {
				return c.getTypeOfSymbolAtLocation(symbol, location)
			} else {
				return c.errorType
			}
		},
		getTypeOfSymbol: getTypeOfSymbol,
		getSymbolsOfParameterPropertyDeclaration: func(parameterIn ParameterDeclaration, parameterName string) /* TODO(TS-TO-GO) inferred type [Symbol, Symbol] */ any {
			parameter := getParseTreeNode(parameterIn, isParameter)
			if parameter == nil {
				return Debug.fail("Cannot get symbols of a synthetic parameter that cannot be resolved to a parse-tree node.")
			}
			Debug.assert(isParameterPropertyDeclaration(parameter, parameter.Parent))
			return c.getSymbolsOfParameterPropertyDeclaration(parameter, escapeLeadingUnderscores(parameterName))
		},
		getDeclaredTypeOfSymbol: getDeclaredTypeOfSymbol,
		getPropertiesOfType:     getPropertiesOfType,
		getPropertyOfType: func(t *Type, name string) *ast.Symbol {
			return c.getPropertyOfType(t, escapeLeadingUnderscores(name))
		},
		getPrivateIdentifierPropertyOfType: func(leftType *Type, name string, location *ast.Node) *ast.Symbol {
			node := getParseTreeNode(location)
			if node == nil {
				return nil
			}
			propName := escapeLeadingUnderscores(name)
			lexicallyScopedIdentifier := c.lookupSymbolForPrivateIdentifierDeclaration(propName, node)
			if lexicallyScopedIdentifier != nil {
				return c.getPrivateIdentifierPropertyOfType(leftType, lexicallyScopedIdentifier)
			} else {
				return nil
			}
		},
		getTypeOfPropertyOfType: func(t *Type, name string) *Type {
			return c.getTypeOfPropertyOfType(t, escapeLeadingUnderscores(name))
		},
		getIndexInfoOfType: func(t *Type, kind IndexKind) *IndexInfo {
			return c.getIndexInfoOfType(t, ifElse(kind == IndexKindString, c.stringType, c.numberType))
		},
		getIndexInfosOfType:        getIndexInfosOfType,
		getIndexInfosOfIndexSymbol: getIndexInfosOfIndexSymbol,
		getSignaturesOfType:        getSignaturesOfType,
		getIndexTypeOfType: func(t *Type, kind IndexKind) *Type {
			return c.getIndexTypeOfType(t, ifElse(kind == IndexKindString, c.stringType, c.numberType))
		},
		getIndexType: func(t *Type) *Type {
			return c.getIndexType(t)
		},
		getBaseTypes:             getBaseTypes,
		getBaseTypeOfLiteralType: getBaseTypeOfLiteralType,
		getWidenedType:           getWidenedType,
		getWidenedLiteralType:    getWidenedLiteralType,
		fillMissingTypeArguments: fillMissingTypeArguments,
		getTypeFromTypeNode: func(nodeIn TypeNode) *Type {
			node := getParseTreeNode(nodeIn, isTypeNode)
			if node != nil {
				return c.getTypeFromTypeNode(node)
			} else {
				return c.errorType
			}
		},
		getParameterType:                     c.getTypeAtPosition,
		getParameterIdentifierInfoAtPosition: getParameterIdentifierInfoAtPosition,
		getPromisedTypeOfPromise:             getPromisedTypeOfPromise,
		getAwaitedType: func(t *Type) *Type {
			return c.getAwaitedType(t)
		},
		getReturnTypeOfSignature:             getReturnTypeOfSignature,
		isNullableType:                       isNullableType,
		getNullableType:                      getNullableType,
		getNonNullableType:                   getNonNullableType,
		getNonOptionalType:                   c.removeOptionalTypeMarker,
		getTypeArguments:                     getTypeArguments,
		typeToTypeNode:                       c.nodeBuilder.typeToTypeNode,
		typePredicateToTypePredicateNode:     c.nodeBuilder.typePredicateToTypePredicateNode,
		indexInfoToIndexSignatureDeclaration: c.nodeBuilder.indexInfoToIndexSignatureDeclaration,
		signatureToSignatureDeclaration:      c.nodeBuilder.signatureToSignatureDeclaration,
		symbolToEntityName:                   c.nodeBuilder.symbolToEntityName,
		symbolToExpression:                   c.nodeBuilder.symbolToExpression,
		symbolToNode:                         c.nodeBuilder.symbolToNode,
		symbolToTypeParameterDeclarations:    c.nodeBuilder.symbolToTypeParameterDeclarations,
		symbolToParameterDeclaration:         c.nodeBuilder.symbolToParameterDeclaration,
		typeParameterToDeclaration:           c.nodeBuilder.typeParameterToDeclaration,
		getSymbolsInScope: func(locationIn *ast.Node, meaning SymbolFlags) []*ast.Symbol {
			location := getParseTreeNode(locationIn)
			if location != nil {
				return c.getSymbolsInScope(location, meaning)
			} else {
				return []never{}
			}
		},
		getSymbolAtLocation: func(nodeIn *ast.Node) *ast.Symbol {
			node := getParseTreeNode(nodeIn)
			// set ignoreErrors: true because any lookups invoked by the API shouldn't cause any new errors
			if node != nil {
				return c.getSymbolAtLocation(node, true /*ignoreErrors*/)
			} else {
				return nil
			}
		},
		getIndexInfosAtLocation: func(nodeIn *ast.Node) *[]IndexInfo {
			node := getParseTreeNode(nodeIn)
			if node != nil {
				return c.getIndexInfosAtLocation(node)
			} else {
				return nil
			}
		},
		getShorthandAssignmentValueSymbol: func(nodeIn *ast.Node) *ast.Symbol {
			node := getParseTreeNode(nodeIn)
			if node != nil {
				return c.getShorthandAssignmentValueSymbol(node)
			} else {
				return nil
			}
		},
		getExportSpecifierLocalTargetSymbol: func(nodeIn /* TODO(TS-TO-GO) inferred type ExportSpecifier | Identifier */ any) *ast.Symbol {
			node := getParseTreeNode(nodeIn, isExportSpecifier)
			if node != nil {
				return c.getExportSpecifierLocalTargetSymbol(node)
			} else {
				return nil
			}
		},
		getExportSymbolOfSymbol: func(symbol *ast.Symbol) *ast.Symbol {
			return c.getMergedSymbol(symbol.ExportSymbol || symbol)
		},
		getTypeAtLocation: func(nodeIn *ast.Node) *Type {
			node := getParseTreeNode(nodeIn)
			if node != nil {
				return c.getTypeOfNode(node)
			} else {
				return c.errorType
			}
		},
		getTypeOfAssignmentPattern: func(nodeIn AssignmentPattern) *Type {
			node := getParseTreeNode(nodeIn, isAssignmentPattern)
			return node && c.getTypeOfAssignmentPattern(node) || c.errorType
		},
		getPropertySymbolOfDestructuringAssignment: func(locationIn Identifier) *ast.Symbol {
			location := getParseTreeNode(locationIn, isIdentifier)
			if location != nil {
				return c.getPropertySymbolOfDestructuringAssignment(location)
			} else {
				return nil
			}
		},
		signatureToString: func(signature Signature, enclosingDeclaration *ast.Node, flags *TypeFormatFlags, kind *SignatureKind) string {
			return c.signatureToString(signature, getParseTreeNode(enclosingDeclaration), flags, kind)
		},
		typeToString: func(t *Type, enclosingDeclaration *ast.Node, flags *TypeFormatFlags) string {
			return c.typeToString(t, getParseTreeNode(enclosingDeclaration), flags)
		},
		symbolToString: func(symbol *ast.Symbol, enclosingDeclaration *ast.Node, meaning *SymbolFlags, flags *SymbolFormatFlags) string {
			return c.symbolToString(symbol, getParseTreeNode(enclosingDeclaration), meaning, flags)
		},
		typePredicateToString: func(predicate TypePredicate, enclosingDeclaration *ast.Node, flags *TypeFormatFlags) string {
			return c.typePredicateToString(predicate, getParseTreeNode(enclosingDeclaration), flags)
		},
		writeSignature: func(signature Signature, enclosingDeclaration *ast.Node, flags *TypeFormatFlags, kind *SignatureKind, writer *EmitTextWriter) string {
			return c.signatureToString(signature, getParseTreeNode(enclosingDeclaration), flags, kind, writer)
		},
		writeType: func(t *Type, enclosingDeclaration *ast.Node, flags *TypeFormatFlags, writer *EmitTextWriter) string {
			return c.typeToString(t, getParseTreeNode(enclosingDeclaration), flags, writer)
		},
		writeSymbol: func(symbol *ast.Symbol, enclosingDeclaration *ast.Node, meaning *SymbolFlags, flags *SymbolFormatFlags, writer *EmitTextWriter) string {
			return c.symbolToString(symbol, getParseTreeNode(enclosingDeclaration), meaning, flags, writer)
		},
		writeTypePredicate: func(predicate TypePredicate, enclosingDeclaration *ast.Node, flags *TypeFormatFlags, writer *EmitTextWriter) string {
			return c.typePredicateToString(predicate, getParseTreeNode(enclosingDeclaration), flags, writer)
		},
		getAugmentedPropertiesOfType: getAugmentedPropertiesOfType,
		getRootSymbols:               getRootSymbols,
		getSymbolOfExpando:           getSymbolOfExpando,
		getContextualType: func(nodeIn Expression, contextFlags ContextFlags) *Type {
			node := getParseTreeNode(nodeIn, isExpression)
			if node == nil {
				return nil
			}
			if contextFlags&ContextFlagsCompletions != 0 {
				return runWithInferenceBlockedFromSourceNode(node, func() *Type {
					return c.getContextualType(node, contextFlags)
				})
			}
			return c.getContextualType(node, contextFlags)
		},
		getContextualTypeForObjectLiteralElement: func(nodeIn ObjectLiteralElementLike) *Type {
			node := getParseTreeNode(nodeIn, isObjectLiteralElementLike)
			if node != nil {
				return c.getContextualTypeForObjectLiteralElement(node, nil /*contextFlags*/)
			} else {
				return nil
			}
		},
		getContextualTypeForArgumentAtIndex: func(nodeIn CallLikeExpression, argIndex number) *Type {
			node := getParseTreeNode(nodeIn, isCallLikeExpression)
			return node && c.getContextualTypeForArgumentAtIndex(node, argIndex)
		},
		getContextualTypeForJsxAttribute: func(nodeIn /* TODO(TS-TO-GO) inferred type JsxAttribute | JsxSpreadAttribute */ any) *Type {
			node := getParseTreeNode(nodeIn, isJsxAttributeLike)
			return node && c.getContextualTypeForJsxAttribute(node, nil /*contextFlags*/)
		},
		isContextSensitive:                isContextSensitive,
		getTypeOfPropertyOfContextualType: getTypeOfPropertyOfContextualType,
		getFullyQualifiedName:             getFullyQualifiedName,
		getResolvedSignature: func(node CallLikeExpression, candidatesOutArray *[]Signature, argumentCount *number) *Signature {
			return getResolvedSignatureWorker(node, candidatesOutArray, argumentCount, CheckModeNormal)
		},
		getCandidateSignaturesForStringLiteralCompletions: getCandidateSignaturesForStringLiteralCompletions,
		getResolvedSignatureForSignatureHelp: func(node CallLikeExpression, candidatesOutArray *[]Signature, argumentCount *number) *Signature {
			return runWithoutResolvedSignatureCaching(node, func() *Signature {
				return getResolvedSignatureWorker(node, candidatesOutArray, argumentCount, CheckModeIsForSignatureHelp)
			})
		},
		getExpandedParameters:      getExpandedParameters,
		hasEffectiveRestParameter:  hasEffectiveRestParameter,
		containsArgumentsReference: containsArgumentsReference,
		getConstantValue: func(nodeIn /* TODO(TS-TO-GO) inferred type PropertyAccessExpression | ElementAccessExpression | EnumMember */ any) * /* TODO(TS-TO-GO) inferred type string | number */ any {
			node := getParseTreeNode(nodeIn, c.canHaveConstantValue)
			if node != nil {
				return c.getConstantValue(node)
			} else {
				return nil
			}
		},
		isValidPropertyAccess: func(nodeIn /* TODO(TS-TO-GO) inferred type PropertyAccessExpression | QualifiedName | ImportTypeNode */ any, propertyName string) bool {
			node := getParseTreeNode(nodeIn, isPropertyAccessOrQualifiedNameOrImportTypeNode)
			return node != nil && c.isValidPropertyAccess(node, escapeLeadingUnderscores(propertyName))
		},
		isValidPropertyAccessForCompletions: func(nodeIn /* TODO(TS-TO-GO) inferred type PropertyAccessExpression | QualifiedName | ImportTypeNode */ any, t *Type, property *ast.Symbol) bool {
			node := getParseTreeNode(nodeIn, isPropertyAccessExpression)
			return node != nil && c.isValidPropertyAccessForCompletions(node, t, property)
		},
		getSignatureFromDeclaration: func(declarationIn SignatureDeclaration) *Signature {
			declaration := getParseTreeNode(declarationIn, isFunctionLike)
			if declaration != nil {
				return c.getSignatureFromDeclaration(declaration)
			} else {
				return nil
			}
		},
		isImplementationOfOverload: func(nodeIn SignatureDeclaration) *bool {
			node := getParseTreeNode(nodeIn, isFunctionLike)
			if node != nil {
				return c.isImplementationOfOverload(node)
			} else {
				return nil
			}
		},
		getImmediateAliasedSymbol:        getImmediateAliasedSymbol,
		getAliasedSymbol:                 c.resolveAlias,
		getEmitResolver:                  getEmitResolver,
		requiresAddingImplicitUndefined:  requiresAddingImplicitUndefined,
		getExportsOfModule:               c.getExportsOfModuleAsArray,
		getExportsAndPropertiesOfModule:  getExportsAndPropertiesOfModule,
		forEachExportAndPropertyOfModule: forEachExportAndPropertyOfModule,
		getSymbolWalker:                  createGetSymbolWalker(c.getRestTypeOfSignature, c.getTypePredicateOfSignature, c.getReturnTypeOfSignature, c.getBaseTypes, c.resolveStructuredTypeMembers, c.getTypeOfSymbol, c.getResolvedSymbol, c.getConstraintOfTypeParameter, getFirstIdentifier, c.getTypeArguments),
		getAmbientModules:                getAmbientModules,
		getJsxIntrinsicTagNamesAt:        getJsxIntrinsicTagNamesAt,
		isOptionalParameter: func(nodeIn ParameterDeclaration) bool {
			node := getParseTreeNode(nodeIn, isParameter)
			if node != nil {
				return c.isOptionalParameter(node)
			} else {
				return false
			}
		},
		tryGetMemberInModuleExports: func(name string, symbol *ast.Symbol) *ast.Symbol {
			return c.tryGetMemberInModuleExports(escapeLeadingUnderscores(name), symbol)
		},
		tryGetMemberInModuleExportsAndProperties: func(name string, symbol *ast.Symbol) *ast.Symbol {
			return c.tryGetMemberInModuleExportsAndProperties(escapeLeadingUnderscores(name), symbol)
		},
		tryFindAmbientModule: func(moduleName string) *ast.Symbol {
			return c.tryFindAmbientModule(moduleName, true /*withAugmentations*/)
		},
		getApparentType:     getApparentType,
		getUnionType:        getUnionType,
		isTypeAssignableTo:  isTypeAssignableTo,
		createAnonymousType: createAnonymousType,
		createSignature:     createSignature,
		createSymbol:        createSymbol,
		createIndexInfo:     createIndexInfo,
		getAnyType: func() IntrinsicType {
			return c.anyType
		},
		getStringType: func() IntrinsicType {
			return c.stringType
		},
		getStringLiteralType: getStringLiteralType,
		getNumberType: func() IntrinsicType {
			return c.numberType
		},
		getNumberLiteralType: getNumberLiteralType,
		getBigIntType: func() IntrinsicType {
			return c.bigintType
		},
		getBigIntLiteralType:      getBigIntLiteralType,
		createPromiseType:         createPromiseType,
		createArrayType:           createArrayType,
		getElementTypeOfArrayType: getElementTypeOfArrayType,
		getBooleanType: func() *Type {
			return c.booleanType
		},
		getFalseType: func(fresh any) FreshableIntrinsicType {
			if fresh {
				return c.falseType
			} else {
				return c.regularFalseType
			}
		},
		getTrueType: func(fresh any) FreshableIntrinsicType {
			if fresh {
				return c.trueType
			} else {
				return c.regularTrueType
			}
		},
		getVoidType: func() IntrinsicType {
			return c.voidType
		},
		getUndefinedType: func() IntrinsicType {
			return c.undefinedType
		},
		getNullType: func() IntrinsicType {
			return c.nullType
		},
		getESSymbolType: func() IntrinsicType {
			return c.esSymbolType
		},
		getNeverType: func() IntrinsicType {
			return c.neverType
		},
		getOptionalType: func() IntrinsicType {
			return c.optionalType
		},
		getPromiseType: func() GenericType {
			return c.getGlobalPromiseType(false)
		},
		getPromiseLikeType: func() GenericType {
			return c.getGlobalPromiseLikeType(false)
		},
		getAnyAsyncIterableType: func() *TypeReference {
			t := c.getGlobalAsyncIterableType(false)
			if t == c.emptyGenericType {
				return nil
			}
			return c.createTypeReference(t, []IntrinsicType{c.anyType, c.anyType, c.anyType})
		},
		isSymbolAccessible:                           isSymbolAccessible,
		isArrayType:                                  isArrayType,
		isTupleType:                                  isTupleType,
		isArrayLikeType:                              isArrayLikeType,
		isEmptyAnonymousObjectType:                   isEmptyAnonymousObjectType,
		isTypeInvalidDueToUnionDiscriminant:          isTypeInvalidDueToUnionDiscriminant,
		getExactOptionalProperties:                   getExactOptionalProperties,
		getAllPossiblePropertiesOfTypes:              getAllPossiblePropertiesOfTypes,
		getSuggestedSymbolForNonexistentProperty:     getSuggestedSymbolForNonexistentProperty,
		getSuggestedSymbolForNonexistentJSXAttribute: getSuggestedSymbolForNonexistentJSXAttribute,
		getSuggestedSymbolForNonexistentSymbol: func(location *ast.Node, name string, meaning SymbolFlags) *ast.Symbol {
			return c.getSuggestedSymbolForNonexistentSymbol(location, escapeLeadingUnderscores(name), meaning)
		},
		getSuggestedSymbolForNonexistentModule:      getSuggestedSymbolForNonexistentModule,
		getSuggestedSymbolForNonexistentClassMember: getSuggestedSymbolForNonexistentClassMember,
		getBaseConstraintOfType:                     getBaseConstraintOfType,
		getDefaultFromTypeParameter: func(t *Type) *Type {
			if t && t.flags&TypeFlagsTypeParameter != 0 {
				return c.getDefaultFromTypeParameter(t.AsTypeParameter())
			} else {
				return nil
			}
		},
		resolveName: func(name string, location *ast.Node, meaning SymbolFlags, excludeGlobals bool) *ast.Symbol {
			return c.resolveName(location, escapeLeadingUnderscores(name), meaning, nil /*nameNotFoundMessage*/, false /*isUse*/, excludeGlobals)
		},
		getJsxNamespace: func(n *ast.Node) string {
			return unescapeLeadingUnderscores(c.getJsxNamespace(n))
		},
		getJsxFragmentFactory: func(n *ast.Node) *string {
			jsxFragmentFactory := c.getJsxFragmentFactoryEntity(n)
			return jsxFragmentFactory && unescapeLeadingUnderscores(getFirstIdentifier(jsxFragmentFactory).EscapedText)
		},
		getAccessibleSymbolChain:    getAccessibleSymbolChain,
		getTypePredicateOfSignature: getTypePredicateOfSignature,
		resolveExternalModuleName: func(moduleSpecifierIn Expression) *ast.Symbol {
			moduleSpecifier := getParseTreeNode(moduleSpecifierIn, isExpression)
			return moduleSpecifier && c.resolveExternalModuleName(moduleSpecifier, moduleSpecifier, true /*ignoreErrors*/)
		},
		resolveExternalModuleSymbol: resolveExternalModuleSymbol,
		tryGetThisTypeAt: func(nodeIn *ast.Node, includeGlobalThis *bool, container *ThisContainer) *Type {
			node := getParseTreeNode(nodeIn)
			return node && c.tryGetThisTypeAt(node, includeGlobalThis, container)
		},
		getTypeArgumentConstraint: func(nodeIn TypeNode) *Type {
			node := getParseTreeNode(nodeIn, isTypeNode)
			return node && c.getTypeArgumentConstraint(node)
		},
		getSuggestionDiagnostics: func(fileIn SourceFile, ct CancellationToken) []DiagnosticWithLocation {
			file := getParseTreeNode(fileIn, isSourceFile) || Debug.fail("Could not determine parsed source file.")
			if skipTypeChecking(file, c.compilerOptions, host) {
				return emptyArray
			}

			var diagnostics *[]DiagnosticWithLocation
			{ // try
				// Record the cancellation token so it can be checked later on during checkSourceElement.
				// Do this in a finally block so we can ensure that it gets reset back to nothing after
				// this call is done.
				c.cancellationToken = ct

				// Ensure file is type checked, with _eager_ diagnostic production, so identifiers are registered as potentially unused
				c.checkSourceFileWithEagerDiagnostics(file)
				Debug.assert(c.getNodeLinks(file).flags&NodeCheckFlagsTypeChecked != 0)

				diagnostics = addRange(diagnostics, c.suggestionDiagnostics.getDiagnostics(file.FileName))
				c.checkUnusedIdentifiers(c.getPotentiallyUnusedIdentifiers(file), func(containingNode *ast.Node, kind UnusedKind, diag DiagnosticWithLocation) {
					if !containsParseError(containingNode) && !c.unusedIsError(kind, containingNode.Flags&ast.NodeFlagsAmbient != 0) {
						(diagnostics || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: diagnostics = [] */ TODO)).push(DiagnosticWithLocation{
							/* TODO(TS-TO-GO) Node SpreadAssignment: ...diag */
							category: DiagnosticCategorySuggestion,
						})
					}
				})

				return diagnostics || emptyArray
			}
			{ // finally
				c.cancellationToken = nil
			}
		},
		runWithCancellationToken: func(token CancellationToken, callback /* TODO(TS-TO-GO) inferred type ((checker: TypeChecker) => T) | ((checker: TypeChecker) => T) */ any) T {
			{ // try
				c.cancellationToken = token
				return callback(c.checker)
			}
			{ // finally
				c.cancellationToken = nil
			}
		},
		getLocalTypeParametersOfClassOrInterfaceOrTypeAlias: getLocalTypeParametersOfClassOrInterfaceOrTypeAlias,
		isDeclarationVisible:              isDeclarationVisible,
		isPropertyAccessible:              isPropertyAccessible,
		getTypeOnlyAliasDeclaration:       getTypeOnlyAliasDeclaration,
		getMemberOverrideModifierStatus:   getMemberOverrideModifierStatus,
		isTypeParameterPossiblyReferenced: isTypeParameterPossiblyReferenced,
		typeHasCallOrConstructSignatures:  typeHasCallOrConstructSignatures,
		getSymbolFlags:                    getSymbolFlags,
	}

	getCandidateSignaturesForStringLiteralCompletions := func(call CallLikeExpression, editingArgument *ast.Node) []Signature {
		candidatesSet := NewSet[Signature]()
		var candidates []Signature = []never{}

		// first, get candidates when inference is blocked from the source node.
		runWithInferenceBlockedFromSourceNode(editingArgument, func() *Signature {
			return getResolvedSignatureWorker(call, candidates, nil /*argumentCount*/, CheckModeNormal)
		})
		for _, candidate := range candidates {
			candidatesSet.add(candidate)
		}

		// reset candidates for second pass
		candidates.length = 0

		// next, get candidates where the source node is considered for inference.
		runWithoutResolvedSignatureCaching(editingArgument, func() *Signature {
			return getResolvedSignatureWorker(call, candidates, nil /*argumentCount*/, CheckModeNormal)
		})
		for _, candidate := range candidates {
			candidatesSet.add(candidate)
		}

		return arrayFrom(candidatesSet)
	}

	runWithoutResolvedSignatureCaching := func(node *ast.Node, fn func() T) T {
		node = findAncestor(node, isCallLikeOrFunctionLikeExpression)
		if node != nil {
			cachedResolvedSignatures := []never{}
			cachedTypes := []never{}
			for node != nil {
				nodeLinks := c.getNodeLinks(node)
				cachedResolvedSignatures.push([]any{nodeLinks, nodeLinks.resolvedSignature})
				nodeLinks.resolvedSignature = nil
				if isFunctionExpressionOrArrowFunction(node) {
					symbolLinks := c.getSymbolLinks(c.getSymbolOfDeclaration(node))
					t := symbolLinks.type_
					cachedTypes.push([]any{symbolLinks, t})
					symbolLinks.type_ = nil
				}
				node = findAncestor(node.Parent, isCallLikeOrFunctionLikeExpression)
			}
			result := fn()
			for _, TODO_IDENTIFIER := range cachedResolvedSignatures {
				nodeLinks.resolvedSignature = resolvedSignature
			}
			for _, TODO_IDENTIFIER := range cachedTypes {
				symbolLinks.type_ = t
			}
			return result
		}
		return fn()
	}

	runWithInferenceBlockedFromSourceNode := func(node *ast.Node, fn func() T) T {
		containingCall := findAncestor(node, isCallLikeExpression)
		if containingCall != nil {
			toMarkSkip := node
			for ok := true; ok; ok = toMarkSkip && toMarkSkip != containingCall { // do-while loop
				c.getNodeLinks(toMarkSkip).skipDirectInference = true
				toMarkSkip = toMarkSkip.Parent
			}
		}

		c.isInferencePartiallyBlocked = true
		result := runWithoutResolvedSignatureCaching(node, fn)
		c.isInferencePartiallyBlocked = false

		if containingCall != nil {
			toMarkSkip := node
			for ok := true; ok; ok = toMarkSkip && toMarkSkip != containingCall { // do-while loop
				c.getNodeLinks(toMarkSkip).skipDirectInference = nil
				toMarkSkip = toMarkSkip.Parent
			}
		}
		return result
	}

	getResolvedSignatureWorker := func(nodeIn CallLikeExpression, candidatesOutArray *[]Signature, argumentCount *number, checkMode CheckMode) *Signature {
		node := getParseTreeNode(nodeIn, isCallLikeExpression)
		c.apparentArgumentCount = argumentCount
		var res *Signature
		if node == nil {
			res = nil
		} else {
			res = c.getResolvedSignature(node, candidatesOutArray, checkMode)
		}
		c.apparentArgumentCount = nil
		return res
	}

	tc.tupleTypes = NewMap[string, GenericType]()
	tc.unionTypes = NewMap[string, UnionType]()
	tc.unionOfUnionTypes = NewMap[string, *Type]()
	tc.intersectionTypes = NewMap[string, *Type]()
	tc.stringLiteralTypes = NewMap[string, StringLiteralType]()
	tc.numberLiteralTypes = NewMap[number, NumberLiteralType]()
	tc.bigIntLiteralTypes = NewMap[string, BigIntLiteralType]()
	tc.enumLiteralTypes = NewMap[string, LiteralType]()
	tc.indexedAccessTypes = NewMap[string, IndexedAccessType]()
	tc.templateLiteralTypes = NewMap[string, TemplateLiteralType]()
	tc.stringMappingTypes = NewMap[string, StringMappingType]()
	tc.substitutionTypes = NewMap[string, SubstitutionType]()
	tc.subtypeReductionCache = NewMap[string, []*Type]()
	tc.decoratorContextOverrideTypeCache = NewMap[string, *Type]()
	tc.cachedTypes = NewMap[string, *Type]()
	tc.evolvingArrayTypes = []never{}
	tc.undefinedProperties = NewMap()
	tc.markerTypes = NewSet[number]()

	tc.unknownSymbol = c.createSymbol(ast.SymbolFlagsProperty, "unknown" /* as __String */)
	tc.resolvingSymbol = c.createSymbol(0, InternalSymbolNameResolving)
	tc.unresolvedSymbols = NewMap[string, TransientSymbol]()
	tc.errorTypes = NewMap[string, *Type]()

	// We specifically create the `undefined` and `null` types before any other types that can occur in
	// unions such that they are given low type IDs and occur first in the sorted list of union constituents.
	// We can then just examine the first constituent(s) of a union to check for their presence.

	tc.seenIntrinsicNames = NewSet[string]()

	tc.anyType = c.createIntrinsicType(TypeFlagsAny, "any")
	tc.autoType = c.createIntrinsicType(TypeFlagsAny, "any", ObjectFlagsNonInferrableType, "auto")
	tc.wildcardType = c.createIntrinsicType(TypeFlagsAny, "any", nil /*objectFlags*/, "wildcard")
	tc.blockedStringType = c.createIntrinsicType(TypeFlagsAny, "any", nil /*objectFlags*/, "blocked string")
	tc.errorType = c.createIntrinsicType(TypeFlagsAny, "error")
	tc.unresolvedType = c.createIntrinsicType(TypeFlagsAny, "unresolved")
	tc.nonInferrableAnyType = c.createIntrinsicType(TypeFlagsAny, "any", ObjectFlagsContainsWideningType, "non-inferrable")
	tc.intrinsicMarkerType = c.createIntrinsicType(TypeFlagsAny, "intrinsic")
	tc.unknownType = c.createIntrinsicType(TypeFlagsUnknown, "unknown")
	tc.undefinedType = c.createIntrinsicType(TypeFlagsUndefined, "undefined")
	tc.undefinedWideningType = ifElse(c.strictNullChecks, c.undefinedType, c.createIntrinsicType(TypeFlagsUndefined, "undefined", ObjectFlagsContainsWideningType, "widening"))
	tc.missingType = c.createIntrinsicType(TypeFlagsUndefined, "undefined", nil /*objectFlags*/, "missing")
	tc.undefinedOrMissingType = ifElse(c.exactOptionalPropertyTypes, c.missingType, c.undefinedType)
	tc.optionalType = c.createIntrinsicType(TypeFlagsUndefined, "undefined", nil /*objectFlags*/, "optional")
	tc.nullType = c.createIntrinsicType(TypeFlagsNull, "null")
	tc.nullWideningType = ifElse(c.strictNullChecks, c.nullType, c.createIntrinsicType(TypeFlagsNull, "null", ObjectFlagsContainsWideningType, "widening"))
	tc.stringType = c.createIntrinsicType(TypeFlagsString, "string")
	tc.numberType = c.createIntrinsicType(TypeFlagsNumber, "number")
	tc.bigintType = c.createIntrinsicType(TypeFlagsBigInt, "bigint")
	tc.falseType = c.createIntrinsicType(TypeFlagsBooleanLiteral, "false", nil /*objectFlags*/, "fresh").AsFreshableIntrinsicType()
	tc.regularFalseType = c.createIntrinsicType(TypeFlagsBooleanLiteral, "false").AsFreshableIntrinsicType()
	tc.trueType = c.createIntrinsicType(TypeFlagsBooleanLiteral, "true", nil /*objectFlags*/, "fresh").AsFreshableIntrinsicType()
	tc.regularTrueType = c.createIntrinsicType(TypeFlagsBooleanLiteral, "true").AsFreshableIntrinsicType()
	c.trueType.regularType = c.regularTrueType
	c.trueType.freshType = c.trueType
	c.regularTrueType.regularType = c.regularTrueType
	c.regularTrueType.freshType = c.trueType
	c.falseType.regularType = c.regularFalseType
	c.falseType.freshType = c.falseType
	c.regularFalseType.regularType = c.regularFalseType
	c.regularFalseType.freshType = c.falseType
	tc.booleanType = c.getUnionType([]FreshableIntrinsicType{c.regularFalseType, c.regularTrueType})
	tc.esSymbolType = c.createIntrinsicType(TypeFlagsESSymbol, "symbol")
	tc.voidType = c.createIntrinsicType(TypeFlagsVoid, "void")
	tc.neverType = c.createIntrinsicType(TypeFlagsNever, "never")
	tc.silentNeverType = c.createIntrinsicType(TypeFlagsNever, "never", ObjectFlagsNonInferrableType, "silent")
	tc.implicitNeverType = c.createIntrinsicType(TypeFlagsNever, "never", nil /*objectFlags*/, "implicit")
	tc.unreachableNeverType = c.createIntrinsicType(TypeFlagsNever, "never", nil /*objectFlags*/, "unreachable")
	tc.nonPrimitiveType = c.createIntrinsicType(TypeFlagsNonPrimitive, "object")
	tc.stringOrNumberType = c.getUnionType([]IntrinsicType{c.stringType, c.numberType})
	tc.stringNumberSymbolType = c.getUnionType([]IntrinsicType{c.stringType, c.numberType, c.esSymbolType})
	tc.numberOrBigIntType = c.getUnionType([]IntrinsicType{c.numberType, c.bigintType})
	tc.templateConstraintType = c.getUnionType([]*Type{c.stringType, c.numberType, c.booleanType, c.bigintType, c.nullType, c.undefinedType}).AsUnionType()
	tc.numericStringType = c.getTemplateLiteralType([]string{"", ""}, []IntrinsicType{c.numberType})
	// The `${number}` type

	tc.restrictiveMapper = c.makeFunctionTypeMapper(func(t *Type) *Type {
		if t.flags&TypeFlagsTypeParameter != 0 {
			return c.getRestrictiveTypeParameter(t.AsTypeParameter())
		} else {
			return t
		}
	}, func() string {
		return "(restrictive mapper)"
	})
	tc.permissiveMapper = c.makeFunctionTypeMapper(func(t *Type) *Type {
		if t.flags&TypeFlagsTypeParameter != 0 {
			return c.wildcardType
		} else {
			return t
		}
	}, func() string {
		return "(permissive mapper)"
	})
	tc.uniqueLiteralType = c.createIntrinsicType(TypeFlagsNever, "never", nil /*objectFlags*/, "unique literal")
	// `uniqueLiteralType` is a special `never` flagged by union reduction to behave as a literal
	tc.uniqueLiteralMapper = c.makeFunctionTypeMapper(func(t *Type) *Type {
		if t.flags&TypeFlagsTypeParameter != 0 {
			return c.uniqueLiteralType
		} else {
			return t
		}
	}, func() string {
		return "(unique literal mapper)"
	})
	// replace all type parameters with the unique literal type (disregarding constraints)
	tc.reportUnreliableMapper = c.makeFunctionTypeMapper(func(t *Type) *Type {
		if c.outofbandVarianceMarkerHandler != nil && (t == c.markerSuperType || t == c.markerSubType || t == c.markerOtherType) {
			c.outofbandVarianceMarkerHandler(true)
		}
		return t
	}, func() string {
		return "(unmeasurable reporter)"
	})
	tc.reportUnmeasurableMapper = c.makeFunctionTypeMapper(func(t *Type) *Type {
		if c.outofbandVarianceMarkerHandler != nil && (t == c.markerSuperType || t == c.markerSubType || t == c.markerOtherType) {
			c.outofbandVarianceMarkerHandler(false)
		}
		return t
	}, func() string {
		return "(unreliable reporter)"
	})

	tc.emptyObjectType = c.createAnonymousType(nil, c.emptySymbols, emptyArray, emptyArray, emptyArray)
	tc.emptyJsxObjectType = c.createAnonymousType(nil, c.emptySymbols, emptyArray, emptyArray, emptyArray)
	c.emptyJsxObjectType.objectFlags |= ObjectFlagsJsxAttributes

	tc.emptyTypeLiteralSymbol = c.createSymbol(ast.SymbolFlagsTypeLiteral, InternalSymbolNameType)
	c.emptyTypeLiteralSymbol.Members = createSymbolTable()
	tc.emptyTypeLiteralType = c.createAnonymousType(c.emptyTypeLiteralSymbol, c.emptySymbols, emptyArray, emptyArray, emptyArray)

	tc.unknownEmptyObjectType = c.createAnonymousType(nil, c.emptySymbols, emptyArray, emptyArray, emptyArray)
	tc.unknownUnionType = ifElse(c.strictNullChecks, c.getUnionType([] /* TODO(TS-TO-GO) inferred type IntrinsicType | ResolvedType */ any{c.undefinedType, c.nullType, c.unknownEmptyObjectType}), c.unknownType)

	tc.emptyGenericType = c.createAnonymousType(nil, c.emptySymbols, emptyArray, emptyArray, emptyArray).AsObjectType().AsGenericType()
	c.emptyGenericType.instantiations = NewMap[string, TypeReference]()

	tc.anyFunctionType = c.createAnonymousType(nil, c.emptySymbols, emptyArray, emptyArray, emptyArray)
	// The anyFunctionType contains the anyFunctionType by definition. The flag is further propagated
	// in getPropagatingFlagsOfTypes, and it is checked in inferFromTypes.
	c.anyFunctionType.objectFlags |= ObjectFlagsNonInferrableType

	tc.noConstraintType = c.createAnonymousType(nil, c.emptySymbols, emptyArray, emptyArray, emptyArray)
	tc.circularConstraintType = c.createAnonymousType(nil, c.emptySymbols, emptyArray, emptyArray, emptyArray)
	tc.resolvingDefaultType = c.createAnonymousType(nil, c.emptySymbols, emptyArray, emptyArray, emptyArray)

	tc.markerSuperType = c.createTypeParameter()
	tc.markerSubType = c.createTypeParameter()
	c.markerSubType.constraint = c.markerSuperType
	tc.markerOtherType = c.createTypeParameter()

	tc.markerSuperTypeForCheck = c.createTypeParameter()
	tc.markerSubTypeForCheck = c.createTypeParameter()
	c.markerSubTypeForCheck.constraint = c.markerSuperTypeForCheck

	tc.noTypePredicate = c.createTypePredicate(TypePredicateKindIdentifier, "<<unresolved>>", 0, c.anyType)

	tc.anySignature = c.createSignature(nil, nil /*typeParameters*/, nil /*thisParameter*/, emptyArray, c.anyType, nil /*resolvedTypePredicate*/, 0, SignatureFlagsNone)
	tc.unknownSignature = c.createSignature(nil, nil /*typeParameters*/, nil /*thisParameter*/, emptyArray, c.errorType, nil /*resolvedTypePredicate*/, 0, SignatureFlagsNone)
	tc.resolvingSignature = c.createSignature(nil, nil /*typeParameters*/, nil /*thisParameter*/, emptyArray, c.anyType, nil /*resolvedTypePredicate*/, 0, SignatureFlagsNone)
	tc.silentNeverSignature = c.createSignature(nil, nil /*typeParameters*/, nil /*thisParameter*/, emptyArray, c.silentNeverType, nil /*resolvedTypePredicate*/, 0, SignatureFlagsNone)

	tc.enumNumberIndexInfo = c.createIndexInfo(c.numberType, c.stringType, true /*isReadonly*/)

	tc.iterationTypesCache = NewMap[string, IterationTypes]()
	// cache for common IterationTypes instances
	tc.noIterationTypes = IterationTypes{
		/* TODO(TS-TO-GO) Node GetAccessor: get yieldType(): Type { return Debug.fail("Not supported"); } */
		/* TODO(TS-TO-GO) Node GetAccessor: get returnType(): Type { return Debug.fail("Not supported"); } */
		/* TODO(TS-TO-GO) Node GetAccessor: get nextType(): Type { return Debug.fail("Not supported"); } */
	}

	tc.anyIterationTypes = c.createIterationTypes(c.anyType, c.anyType, c.anyType)

	tc.asyncIterationTypesResolver = IterationTypesResolver{
		iterableCacheKey:              "iterationTypesOfAsyncIterable",
		iteratorCacheKey:              "iterationTypesOfAsyncIterator",
		iteratorSymbolName:            "asyncIterator",
		getGlobalIteratorType:         c.getGlobalAsyncIteratorType,
		getGlobalIterableType:         c.getGlobalAsyncIterableType,
		getGlobalIterableIteratorType: c.getGlobalAsyncIterableIteratorType,
		getGlobalIteratorObjectType:   c.getGlobalAsyncIteratorObjectType,
		getGlobalGeneratorType:        c.getGlobalAsyncGeneratorType,
		getGlobalBuiltinIteratorTypes: c.getGlobalBuiltinAsyncIteratorTypes,
		resolveIterationType: func(t *Type, errorNode *ast.Node) *Type {
			return c.getAwaitedType(t, errorNode, Diagnostics.Type_of_await_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member)
		},
		mustHaveANextMethodDiagnostic: Diagnostics.An_async_iterator_must_have_a_next_method,
		mustBeAMethodDiagnostic:       Diagnostics.The_0_property_of_an_async_iterator_must_be_a_method,
		mustHaveAValueDiagnostic:      Diagnostics.The_type_returned_by_the_0_method_of_an_async_iterator_must_be_a_promise_for_a_type_with_a_value_property,
	}

	tc.syncIterationTypesResolver = IterationTypesResolver{
		iterableCacheKey:              "iterationTypesOfIterable",
		iteratorCacheKey:              "iterationTypesOfIterator",
		iteratorSymbolName:            "iterator",
		getGlobalIteratorType:         getGlobalIteratorType,
		getGlobalIterableType:         getGlobalIterableType,
		getGlobalIterableIteratorType: getGlobalIterableIteratorType,
		getGlobalIteratorObjectType:   getGlobalIteratorObjectType,
		getGlobalGeneratorType:        getGlobalGeneratorType,
		getGlobalBuiltinIteratorTypes: getGlobalBuiltinIteratorTypes,
		resolveIterationType: func(t *Type, _errorNode *ast.Node) *Type {
			return t
		},
		mustHaveANextMethodDiagnostic: Diagnostics.An_iterator_must_have_a_next_method,
		mustBeAMethodDiagnostic:       Diagnostics.The_0_property_of_an_iterator_must_be_a_method,
		mustHaveAValueDiagnostic:      Diagnostics.The_type_returned_by_the_0_method_of_an_iterator_must_have_a_value_property,
	}

	type DuplicateInfoForSymbol struct {
		firstFileLocations  []Declaration
		secondFileLocations []Declaration
		isBlockScoped       bool
	}
	type DuplicateInfoForFiles struct {
		firstFile          SourceFile
		secondFile         SourceFile
		conflictingSymbols Map[string, DuplicateInfoForSymbol]
	}
	/** Key is "/path/to/a.ts|/path/to/b.ts". */

	tc.reverseMappedCache = NewMap[string, *Type]()
	tc.reverseHomomorphicMappedCache = NewMap[string, *Type]()
	/**
	 * List of every ambient module with a "*" wildcard.
	 * Unlike other ambient modules, these can't be stored in `globals` because symbol tables only deal with exact matches.
	 * This is only used if there is no exact match.
	 */

	// The library files are only loaded when the feature is used.
	// This allows users to just specify library files they want to used through --lib
	// and they will not get an error from not having unrelated library files

	tc.allPotentiallyUnusedIdentifiers = NewMap[Path, []PotentiallyUnusedIdentifier]()
	// key is file name

	tc.flowLoopStart = 0
	tc.flowLoopCount = 0
	tc.sharedFlowCount = 0
	tc.flowAnalysisDisabled = false
	tc.flowInvocationCount = 0

	tc.contextualTypeNodes = []never{}
	tc.contextualTypes = []never{}
	tc.contextualIsCache = []never{}
	tc.contextualTypeCount = 0
	tc.contextualBindingPatterns = []never{}

	tc.inferenceContextNodes = []never{}
	tc.inferenceContexts = []never{}
	tc.inferenceContextCount = 0

	tc.emptyStringType = c.getStringLiteralType("")
	tc.zeroType = c.getNumberLiteralType(0)
	tc.zeroBigIntType = c.getBigIntLiteralType(PseudoBigInt{
		negative:    false,
		base10Value: "0",
	})

	tc.resolutionTargets = []never{}
	tc.resolutionResults = []never{}
	tc.resolutionPropertyNames = []never{}
	tc.resolutionStart = 0
	tc.inVarianceComputation = false

	tc.suggestionCount = 0
	tc.maximumSuggestionCount = 10
	tc.mergedSymbols = []never{}
	tc.symbolLinks = []never{}
	tc.nodeLinks = []never{}
	tc.flowLoopCaches = []never{}
	tc.flowLoopNodes = []never{}
	tc.flowLoopKeys = []never{}
	tc.flowLoopTypes = []never{}
	tc.sharedFlowNodes = []never{}
	tc.sharedFlowTypes = []never{}
	tc.flowNodeReachable = []never{}
	tc.flowNodePostSuper = []never{}
	tc.potentialThisCollisions = []never{}
	tc.potentialNewTargetCollisions = []never{}
	tc.potentialWeakMapSetCollisions = []never{}
	tc.potentialReflectCollisions = []never{}
	tc.potentialUnusedRenamedBindingElementsInTypes = []never{}
	tc.awaitedTypeStack = []never{}
	tc.reverseMappedSourceStack = []never{}
	tc.reverseMappedTargetStack = []never{}
	tc.reverseExpandingFlags = ExpandingFlagsNone

	tc.diagnostics = createDiagnosticCollection()
	tc.suggestionDiagnostics = createDiagnosticCollection()

	tc.typeofType = c.createTypeofType()

	tc.subtypeRelation = NewMap[string, RelationComparisonResult]()
	tc.strictSubtypeRelation = NewMap[string, RelationComparisonResult]()
	tc.assignableRelation = NewMap[string, RelationComparisonResult]()
	tc.comparableRelation = NewMap[string, RelationComparisonResult]()
	tc.identityRelation = NewMap[string, RelationComparisonResult]()
	tc.enumRelation = NewMap[string, RelationComparisonResult]()

	// Extensions suggested for path imports when module resolution is node16 or higher.
	// The first element of each tuple is the extension a file has.
	// The second element of each tuple is the extension that should be used in a path import.
	// e.g. if we want to import file `foo.mts`, we should write `import {} from "./foo.mjs".
	tc.suggestedExtensions = [] /* TODO(TS-TO-GO) inferred type [string, string] */ any{[]any{".mts", ".mjs"}, []any{".ts", ".js"}, []any{".cts", ".cjs"}, []any{".mjs", ".mjs"}, []any{".js", ".js"}, []any{".cjs", ".cjs"}, []any{".tsx", ifElse(c.compilerOptions.jsx == JsxEmitPreserve, ".jsx", ".js")}, []any{".jsx", ".jsx"}, []any{".json", ".json"}}
	/* eslint-enable no-var */

	c.initializeTypeChecker()

	return c.checker

	type ExportCollisionTracker struct {
		specifierText        string
		exportsWithDuplicate []ExportDeclaration
	}

	type ExportCollisionTrackerTable Map[string, ExportCollisionTracker]

	type ReplaceableIndexedAccessType Intersection[IndexedAccessType /* TODO(TS-TO-GO) TypeNode TypeLiteral: { objectType: TypeParameter; indexType: TypeParameter; } */, any]

	type ElaborationIterator IterableIterator[ /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errorNode: Node; innerExpression: Expression | undefined; nameType: Type; errorMessage?: DiagnosticMessage | undefined; } */ any]

	type ErrorReporter func(message DiagnosticMessage, args DiagnosticArguments)

	type AwaitedTypeInstantiation struct {
		_awaitedTypeBrand  never
		aliasSymbol        *ast.Symbol
		aliasTypeArguments []*Type
	}

	type PotentiallyUnusedIdentifier Union[SourceFile, ModuleDeclaration, ClassLikeDeclaration, InterfaceDeclaration, Block, CaseBlock, ForStatement, ForInStatement, ForOfStatement, Exclude[SignatureDeclaration, Union[IndexSignatureDeclaration, JSDocFunctionType]], TypeAliasDeclaration, InferTypeNode]

	type ImportedDeclaration Union[ImportClause, ImportSpecifier, NamespaceImport]

	type DeclarationWithPotentialInnerNodeReuse Union[SignatureDeclaration, JSDocSignature, AccessorDeclaration, VariableLikeDeclaration, PropertyAccessExpression, ExportAssignment]
}

func (c *Checker) isDefinitelyReferenceToGlobalSymbolObject(node *ast.Node) bool {
	if !isPropertyAccessExpression(node) {
		return false
	}
	if !isIdentifier(node.Name) {
		return false
	}
	if !isPropertyAccessExpression(node.Expression) && !isIdentifier(node.Expression) {
		return false
	}
	if isIdentifier(node.Expression) {
		// Exactly `Symbol.something` and `Symbol` either does not resolve or definitely resolves to the global Symbol
		return idText(node.Expression) == "Symbol" && c.getResolvedSymbol(node.Expression) == (c.getGlobalSymbol("Symbol" /* as __String */, ast.SymbolFlagsValue|ast.SymbolFlagsExportValue, nil /*diagnostic*/) || c.unknownSymbol)
	}
	if !isIdentifier(node.Expression.Expression) {
		return false
	}
	// Exactly `globalThis.Symbol.something` and `globalThis` resolves to the global `globalThis`
	return idText(node.Expression.Name) == "Symbol" && idText(node.Expression.Expression) == "globalThis" && c.getResolvedSymbol(node.Expression.Expression) == c.globalThisSymbol
}

func (c *Checker) getCachedType(key *string) *Type {
	if key {
		return c.cachedTypes.get(key)
	} else {
		return nil
	}
}

func (c *Checker) setCachedType(key *string, t *Type) *Type {
	if key {
		c.cachedTypes.set(key, t)
	}
	return t
}

func (c *Checker) getJsxNamespace(location *ast.Node) string {
	if location != nil {
		file := getSourceFileOfNode(location)
		if file {
			if isJsxOpeningFragment(location) {
				if file.LocalJsxFragmentNamespace {
					return file.LocalJsxFragmentNamespace
				}
				jsxFragmentPragma := file.Pragmas.get("jsxfrag")
				if jsxFragmentPragma {
					var chosenPragma /* TODO(TS-TO-GO) inferred type { arguments: { factory: string; }; range: CommentRange; } */ any
					if isArray(jsxFragmentPragma) {
						chosenPragma = jsxFragmentPragma[0]
					} else {
						chosenPragma = jsxFragmentPragma
					}
					file.LocalJsxFragmentFactory = parseIsolatedEntityName(chosenPragma.arguments.factory, c.languageVersion)
					visitNode(file.LocalJsxFragmentFactory, c.markAsSynthetic, isEntityName)
					if file.LocalJsxFragmentFactory != nil {
						file.LocalJsxFragmentNamespace = getFirstIdentifier(file.LocalJsxFragmentFactory).EscapedText
						return file.LocalJsxFragmentNamespace
					}
				}
				entity := c.getJsxFragmentFactoryEntity(location)
				if entity != nil {
					file.LocalJsxFragmentFactory = entity
					file.LocalJsxFragmentNamespace = getFirstIdentifier(entity).EscapedText
					return file.LocalJsxFragmentNamespace
				}
			} else {
				localJsxNamespace := c.getLocalJsxNamespace(file)
				if localJsxNamespace {
					file.LocalJsxNamespace = localJsxNamespace
					return file.LocalJsxNamespace
				}
			}
		}
	}
	if !c._jsxNamespace {
		c._jsxNamespace = "React" /* as __String */
		if c.compilerOptions.jsxFactory {
			c._jsxFactoryEntity = parseIsolatedEntityName(c.compilerOptions.jsxFactory, c.languageVersion)
			visitNode(c._jsxFactoryEntity, c.markAsSynthetic)
			if c._jsxFactoryEntity != nil {
				c._jsxNamespace = getFirstIdentifier(c._jsxFactoryEntity).EscapedText
			}
		} else if c.compilerOptions.reactNamespace {
			c._jsxNamespace = escapeLeadingUnderscores(c.compilerOptions.reactNamespace)
		}
	}
	if c._jsxFactoryEntity == nil {
		c._jsxFactoryEntity = factory.createQualifiedName(factory.createIdentifier(unescapeLeadingUnderscores(c._jsxNamespace)), "createElement")
	}
	return c._jsxNamespace
}

func (c *Checker) getLocalJsxNamespace(file SourceFile) *string {
	if file.LocalJsxNamespace {
		return file.LocalJsxNamespace
	}
	jsxPragma := file.Pragmas.get("jsx")
	if jsxPragma {
		var chosenPragma /* TODO(TS-TO-GO) inferred type { arguments: { factory: string; }; range: CommentRange; } */ any
		if isArray(jsxPragma) {
			chosenPragma = jsxPragma[0]
		} else {
			chosenPragma = jsxPragma
		}
		file.LocalJsxFactory = parseIsolatedEntityName(chosenPragma.arguments.factory, c.languageVersion)
		visitNode(file.LocalJsxFactory, c.markAsSynthetic, isEntityName)
		if file.LocalJsxFactory != nil {
			file.LocalJsxNamespace = getFirstIdentifier(file.LocalJsxFactory).EscapedText
			return file.LocalJsxNamespace
		}
	}
}

func (c *Checker) markAsSynthetic(node T) VisitResult[T] {
	setTextRangePosEnd(node, -1, -1)
	return visitEachChildWorker(node, c.markAsSynthetic, nil /*context*/)
}

func (c *Checker) getEmitResolver(sourceFile SourceFile, cancellationToken CancellationToken, skipDiagnostics bool) EmitResolver {
	// Ensure we have all the type information in place for this file so that all the
	// emitter questions of this resolver will return the right information.
	if !skipDiagnostics {
		c.getDiagnostics(sourceFile, c.cancellationToken)
	}
	return c.emitResolver
}

func (c *Checker) lookupOrIssueError(location *ast.Node, message DiagnosticMessage, args DiagnosticArguments) Diagnostic {
	var diagnostic Diagnostic
	if location != nil {
		diagnostic = createDiagnosticForNode(location, message, args...)
	} else {
		diagnostic = createCompilerDiagnostic(message, args...)
	}
	existing := c.diagnostics.lookup(diagnostic)
	if existing != nil {
		return existing
	} else {
		c.diagnostics.add(diagnostic)
		return diagnostic
	}
}

func (c *Checker) errorSkippedOn(key CompilerOptions, location *ast.Node, message DiagnosticMessage, args DiagnosticArguments) Diagnostic {
	diagnostic := c.error(location, message, args...)
	diagnostic.skippedOn = key
	return diagnostic
}

func (c *Checker) createError(location *ast.Node, message DiagnosticMessage, args DiagnosticArguments) Diagnostic {
	if location != nil {
		return createDiagnosticForNode(location, message, args...)
	} else {
		return createCompilerDiagnostic(message, args...)
	}
}

func (c *Checker) error(location *ast.Node, message DiagnosticMessage, args DiagnosticArguments) Diagnostic {
	diagnostic := c.createError(location, message, args...)
	c.diagnostics.add(diagnostic)
	return diagnostic
}

func (c *Checker) addErrorOrSuggestion(isError bool, diagnostic Diagnostic) {
	if isError {
		c.diagnostics.add(diagnostic)
	} else {
		c.suggestionDiagnostics.add(Diagnostic{
			/* TODO(TS-TO-GO) Node SpreadAssignment: ...diagnostic */
			category: DiagnosticCategorySuggestion,
		})
	}
}

func (c *Checker) errorOrSuggestion(isError bool, location *ast.Node, message Union[DiagnosticMessage, DiagnosticMessageChain], args DiagnosticArguments) {
	// Pseudo-synthesized input node
	if location.Pos < 0 || location.End < 0 {
		if !isError {
			return
			// Drop suggestions (we have no span to suggest on)
		}
		// Issue errors globally
		file := getSourceFileOfNode(location)
		c.addErrorOrSuggestion(isError, ifElse( /* TODO(TS-TO-GO) InKeyword BinaryExpression: "message" in message */ TODO, createFileDiagnostic(file, 0, 0, message, args...), createDiagnosticForFileFromMessageChain(file, message)))
		// eslint-disable-line local/no-in-operator
		return
	}
	c.addErrorOrSuggestion(isError, ifElse( /* TODO(TS-TO-GO) InKeyword BinaryExpression: "message" in message */ TODO, createDiagnosticForNode(location, message, args...), createDiagnosticForNodeFromMessageChain(getSourceFileOfNode(location), location, message)))
	// eslint-disable-line local/no-in-operator
}

func (c *Checker) errorAndMaybeSuggestAwait(location *ast.Node, maybeMissingAwait bool, message DiagnosticMessage, args DiagnosticArguments) Diagnostic {
	diagnostic := c.error(location, message, args...)
	if maybeMissingAwait {
		related := createDiagnosticForNode(location, Diagnostics.Did_you_forget_to_use_await)
		addRelatedInfo(diagnostic, related)
	}
	return diagnostic
}

func (c *Checker) addDeprecatedSuggestionWorker(declarations Union[*ast.Node, []*ast.Node], diagnostic DiagnosticWithLocation) DiagnosticWithLocation {
	var deprecatedTag *JSDocDeprecatedTag
	if Array.isArray(declarations) {
		deprecatedTag = forEach(declarations, getJSDocDeprecatedTag)
	} else {
		deprecatedTag = getJSDocDeprecatedTag(declarations)
	}
	if deprecatedTag != nil {
		addRelatedInfo(diagnostic, createDiagnosticForNode(deprecatedTag, Diagnostics.The_declaration_was_marked_as_deprecated_here))
	}
	// We call `addRelatedInfo()` before adding the diagnostic to prevent duplicates.
	c.suggestionDiagnostics.add(diagnostic)
	return diagnostic
}

func (c *Checker) isDeprecatedSymbol(symbol *ast.Symbol) /* TODO(TS-TO-GO) inferred type boolean | 0 */ any {
	parentSymbol := c.getParentOfSymbol(symbol)
	if parentSymbol != nil && length(symbol.Declarations) > 1 {
		if parentSymbol.Flags&ast.SymbolFlagsInterface != 0 {
			return core.Some(symbol.Declarations, c.isDeprecatedDeclaration)
		} else {
			return core.Every(symbol.Declarations, c.isDeprecatedDeclaration)
		}
	}
	return symbol.ValueDeclaration != nil && c.isDeprecatedDeclaration(symbol.ValueDeclaration) || length(symbol.Declarations) && core.Every(symbol.Declarations, c.isDeprecatedDeclaration)
}

func (c *Checker) isDeprecatedDeclaration(declaration Declaration) bool {
	return c.getCombinedNodeFlagsCached(declaration)&ast.NodeFlagsDeprecated != 0
}

func (c *Checker) addDeprecatedSuggestion(location *ast.Node, declarations []*ast.Node, deprecatedEntity string) DiagnosticWithLocation {
	diagnostic := createDiagnosticForNode(location, Diagnostics._0_is_deprecated, deprecatedEntity)
	return c.addDeprecatedSuggestionWorker(declarations, diagnostic)
}

func (c *Checker) addDeprecatedSuggestionWithSignature(location *ast.Node, declaration *ast.Node, deprecatedEntity *string, signatureString string) DiagnosticWithLocation {
	var diagnostic DiagnosticWithLocation
	if deprecatedEntity {
		diagnostic = createDiagnosticForNode(location, Diagnostics.The_signature_0_of_1_is_deprecated, signatureString, deprecatedEntity)
	} else {
		diagnostic = createDiagnosticForNode(location, Diagnostics._0_is_deprecated, signatureString)
	}
	return c.addDeprecatedSuggestionWorker(declaration, diagnostic)
}

func (c *Checker) createSymbol(flags SymbolFlags, name string, checkFlags CheckFlags) TransientSymbol {
	c.symbolCount++
	symbol := NewSymbol(flags|ast.SymbolFlagsTransient, name).(TransientSymbol)
	symbol.Links = NewSymbolLinks().(TransientSymbolLinks)
	symbol.Links.checkFlags = checkFlags || ast.CheckFlagsNone
	return symbol
}

func (c *Checker) createParameter(name string, t *Type) TransientSymbol {
	symbol := c.createSymbol(ast.SymbolFlagsFunctionScopedVariable, name)
	symbol.Links.type_ = t
	return symbol
}

func (c *Checker) createProperty(name string, t *Type) TransientSymbol {
	symbol := c.createSymbol(ast.SymbolFlagsProperty, name)
	symbol.Links.type_ = t
	return symbol
}

func (c *Checker) getExcludedSymbolFlags(flags SymbolFlags) SymbolFlags {
	var result SymbolFlags = 0
	if flags&ast.SymbolFlagsBlockScopedVariable != 0 {
		result |= ast.SymbolFlagsBlockScopedVariableExcludes
	}
	if flags&ast.SymbolFlagsFunctionScopedVariable != 0 {
		result |= ast.SymbolFlagsFunctionScopedVariableExcludes
	}
	if flags&ast.SymbolFlagsProperty != 0 {
		result |= ast.SymbolFlagsPropertyExcludes
	}
	if flags&ast.SymbolFlagsEnumMember != 0 {
		result |= ast.SymbolFlagsEnumMemberExcludes
	}
	if flags&ast.SymbolFlagsFunction != 0 {
		result |= ast.SymbolFlagsFunctionExcludes
	}
	if flags&ast.SymbolFlagsClass != 0 {
		result |= ast.SymbolFlagsClassExcludes
	}
	if flags&ast.SymbolFlagsInterface != 0 {
		result |= ast.SymbolFlagsInterfaceExcludes
	}
	if flags&ast.SymbolFlagsRegularEnum != 0 {
		result |= ast.SymbolFlagsRegularEnumExcludes
	}
	if flags&ast.SymbolFlagsConstEnum != 0 {
		result |= ast.SymbolFlagsConstEnumExcludes
	}
	if flags&ast.SymbolFlagsValueModule != 0 {
		result |= ast.SymbolFlagsValueModuleExcludes
	}
	if flags&ast.SymbolFlagsMethod != 0 {
		result |= ast.SymbolFlagsMethodExcludes
	}
	if flags&ast.SymbolFlagsGetAccessor != 0 {
		result |= ast.SymbolFlagsGetAccessorExcludes
	}
	if flags&ast.SymbolFlagsSetAccessor != 0 {
		result |= ast.SymbolFlagsSetAccessorExcludes
	}
	if flags&ast.SymbolFlagsTypeParameter != 0 {
		result |= ast.SymbolFlagsTypeParameterExcludes
	}
	if flags&ast.SymbolFlagsTypeAlias != 0 {
		result |= ast.SymbolFlagsTypeAliasExcludes
	}
	if flags&ast.SymbolFlagsAlias != 0 {
		result |= ast.SymbolFlagsAliasExcludes
	}
	return result
}

func (c *Checker) recordMergedSymbol(target *ast.Symbol, source *ast.Symbol) {
	if source.MergeId == 0 {
		source.MergeId = nextMergeId
		nextMergeId++
	}
	c.mergedSymbols[source.MergeId] = target
}

func (c *Checker) cloneSymbol(symbol *ast.Symbol) TransientSymbol {
	result := c.createSymbol(symbol.Flags, symbol.EscapedName)
	if symbol.Declarations != nil {
		result.Declarations = symbol.Declarations.slice()
	} else {
		result.Declarations = []never{}
	}
	result.Parent = symbol.Parent
	if symbol.ValueDeclaration != nil {
		result.ValueDeclaration = symbol.ValueDeclaration
	}
	if symbol.ConstEnumOnlyModule {
		result.ConstEnumOnlyModule = true
	}
	if symbol.Members != nil {
		result.Members = NewMap(symbol.Members)
	}
	if symbol.Exports != nil {
		result.Exports = NewMap(symbol.Exports)
	}
	c.recordMergedSymbol(result, symbol)
	return result
}

/**
 * Note: if target is transient, then it is mutable, and mergeSymbol with both mutate and return it.
 * If target is not transient, mergeSymbol will produce a transient clone, mutate that and return it.
 */

func (c *Checker) mergeSymbol(target *ast.Symbol, source *ast.Symbol, unidirectional bool /*  = false */) *ast.Symbol {
	if target.Flags&c.getExcludedSymbolFlags(source.Flags) == 0 || (source.Flags|target.Flags)&ast.SymbolFlagsAssignment != 0 {
		if source == target {
			// This can happen when an export assigned namespace exports something also erroneously exported at the top level
			// See `declarationFileNoCrashOnExtraExportModifier` for an example
			return target
		}
		if target.Flags&ast.SymbolFlagsTransient == 0 {
			resolvedTarget := c.resolveSymbol(target)
			if resolvedTarget == c.unknownSymbol {
				return source
			}
			if resolvedTarget.Flags&c.getExcludedSymbolFlags(source.Flags) == 0 || (source.Flags|resolvedTarget.Flags)&ast.SymbolFlagsAssignment != 0 {
				target = c.cloneSymbol(resolvedTarget)
			} else {
				reportMergeSymbolError(target, source)
				return source
			}
		}
		// Javascript static-property-assignment declarations always merge, even though they are also values
		if source.Flags&ast.SymbolFlagsValueModule != 0 && target.Flags&ast.SymbolFlagsValueModule != 0 && target.ConstEnumOnlyModule && !source.ConstEnumOnlyModule {
			// reset flag when merging instantiated module into value module that has only const enums
			target.ConstEnumOnlyModule = false
		}
		target.Flags |= source.Flags
		if source.ValueDeclaration != nil {
			setValueDeclaration(target, source.ValueDeclaration)
		}
		addRange(target.Declarations, source.Declarations)
		if source.Members != nil {
			if target.Members == nil {
				target.Members = createSymbolTable()
			}
			c.mergeSymbolTable(target.Members, source.Members, unidirectional)
		}
		if source.Exports != nil {
			if target.Exports == nil {
				target.Exports = createSymbolTable()
			}
			c.mergeSymbolTable(target.Exports, source.Exports, unidirectional, target)
		}
		if !unidirectional {
			c.recordMergedSymbol(target, source)
		}
	} else if target.Flags&ast.SymbolFlagsNamespaceModule != 0 {
		// Do not report an error when merging `var globalThis` with the built-in `globalThis`,
		// as we will already report a "Declaration name conflicts..." error, and this error
		// won't make much sense.
		if target != c.globalThisSymbol {
			c.error(source.Declarations && getNameOfDeclaration(source.Declarations[0]), Diagnostics.Cannot_augment_module_0_with_value_exports_because_it_resolves_to_a_non_module_entity, c.symbolToString(target))
		}
	} else {
		reportMergeSymbolError(target, source)
	}
	return target

	reportMergeSymbolError := func(target *ast.Symbol, source *ast.Symbol) {
		isEitherEnum := target.Flags&ast.SymbolFlagsEnum != 0 || source.Flags&ast.SymbolFlagsEnum != 0
		isEitherBlockScoped := target.Flags&ast.SymbolFlagsBlockScopedVariable != 0 || source.Flags&ast.SymbolFlagsBlockScopedVariable != 0
		var message any
		switch {
		case isEitherEnum:
			message = Diagnostics.Enum_declarations_can_only_merge_with_namespace_or_other_enum_declarations
		case isEitherBlockScoped:
			message = Diagnostics.Cannot_redeclare_block_scoped_variable_0
		default:
			message = Diagnostics.Duplicate_identifier_0
		}
		sourceSymbolFile := source.Declarations && getSourceFileOfNode(source.Declarations[0])
		targetSymbolFile := target.Declarations && getSourceFileOfNode(target.Declarations[0])

		isSourcePlainJs := isPlainJsFile(sourceSymbolFile, c.compilerOptions.checkJs)
		isTargetPlainJs := isPlainJsFile(targetSymbolFile, c.compilerOptions.checkJs)
		symbolName := c.symbolToString(source)

		// Collect top-level duplicate identifier errors into one mapping, so we can then merge their diagnostics if there are a bunch
		if sourceSymbolFile != nil && targetSymbolFile != nil && c.amalgamatedDuplicates != nil && !isEitherEnum && sourceSymbolFile != targetSymbolFile {
			var firstFile SourceFile
			if comparePaths(sourceSymbolFile.Path, targetSymbolFile.Path) == ComparisonLessThan {
				firstFile = sourceSymbolFile
			} else {
				firstFile = targetSymbolFile
			}
			var secondFile SourceFile
			if firstFile == sourceSymbolFile {
				secondFile = targetSymbolFile
			} else {
				secondFile = sourceSymbolFile
			}
			filesDuplicates := getOrUpdate(c.amalgamatedDuplicates, __TEMPLATE__(firstFile.Path, "|", secondFile.Path), func() DuplicateInfoForFiles {
				return (DuplicateInfoForFiles{
					firstFile:          firstFile,
					secondFile:         secondFile,
					conflictingSymbols: NewMap(),
				})
			})
			conflictingSymbolInfo := getOrUpdate(filesDuplicates.conflictingSymbols, symbolName, func() DuplicateInfoForSymbol {
				return (DuplicateInfoForSymbol{
					isBlockScoped:       isEitherBlockScoped,
					firstFileLocations:  []never{},
					secondFileLocations: []never{},
				})
			})
			if !isSourcePlainJs {
				addDuplicateLocations(conflictingSymbolInfo.firstFileLocations, source)
			}
			if !isTargetPlainJs {
				addDuplicateLocations(conflictingSymbolInfo.secondFileLocations, target)
			}
		} else {
			if !isSourcePlainJs {
				c.addDuplicateDeclarationErrorsForSymbols(source, message, symbolName, target)
			}
			if !isTargetPlainJs {
				c.addDuplicateDeclarationErrorsForSymbols(target, message, symbolName, source)
			}
		}
	}

	addDuplicateLocations := func(locs []Declaration, symbol *ast.Symbol) {
		if symbol.Declarations != nil {
			for _, decl := range symbol.Declarations {
				pushIfUnique(locs, decl)
			}
		}
	}

}

func (c *Checker) addDuplicateDeclarationErrorsForSymbols(target *ast.Symbol, message DiagnosticMessage, symbolName string, source *ast.Symbol) {
	forEach(target.Declarations, func(node Declaration) {
		c.addDuplicateDeclarationError(node, message, symbolName, source.Declarations)
	})
}

func (c *Checker) addDuplicateDeclarationError(node Declaration, message DiagnosticMessage, symbolName string, relatedNodes *[]Declaration) {
	errorNode := (ifElse(getExpandoInitializer(node, false /*isPrototypeAssignment*/) != nil, getNameOfExpando(node), getNameOfDeclaration(node))) || node
	err := c.lookupOrIssueError(errorNode, message, symbolName)
	for _, relatedNode := range relatedNodes || emptyArray {
		adjustedNode := (ifElse(getExpandoInitializer(relatedNode, false /*isPrototypeAssignment*/) != nil, getNameOfExpando(relatedNode), getNameOfDeclaration(relatedNode))) || relatedNode
		if adjustedNode == errorNode {
			continue
		}
		err.relatedInformation = err.relatedInformation || []never{}
		leadingMessage := createDiagnosticForNode(adjustedNode, Diagnostics._0_was_also_declared_here, symbolName)
		followOnMessage := createDiagnosticForNode(adjustedNode, Diagnostics.and_here)
		if length(err.relatedInformation) >= 5 || core.Some(err.relatedInformation, func(r DiagnosticRelatedInformation) bool {
			return compareDiagnostics(r, followOnMessage) == ComparisonEqualTo || compareDiagnostics(r, leadingMessage) == ComparisonEqualTo
		}) {
			continue
		}
		addRelatedInfo(err, ifElse(length(err.relatedInformation) == 0, leadingMessage, followOnMessage))
	}
}

func (c *Checker) combineSymbolTables(first *SymbolTable, second *SymbolTable) *SymbolTable {
	if !first. /* ? */ size {
		return second
	}
	if !second. /* ? */ size {
		return first
	}
	combined := createSymbolTable()
	c.mergeSymbolTable(combined, first)
	c.mergeSymbolTable(combined, second)
	return combined
}

func (c *Checker) mergeSymbolTable(target SymbolTable, source SymbolTable, unidirectional bool /*  = false */, mergedParent *ast.Symbol) {
	source.forEach(func(sourceSymbol *ast.Symbol, id string) {
		targetSymbol := target.get(id)
		var merged *ast.Symbol
		if targetSymbol != nil {
			merged = c.mergeSymbol(targetSymbol, sourceSymbol, unidirectional)
		} else {
			merged = c.getMergedSymbol(sourceSymbol)
		}
		if mergedParent != nil && targetSymbol != nil {
			// If a merge was performed on the target symbol, set its parent to the merged parent that initiated the merge
			// of its exports. Otherwise, `merged` came only from `sourceSymbol` and can keep its parent:
			//
			// // a.ts
			// export interface A { x: number; }
			//
			// // b.ts
			// declare module "./a" {
			//   interface A { y: number; }
			//   interface B {}
			// }
			//
			// When merging the module augmentation into a.ts, the symbol for `A` will itself be merged, so its parent
			// should be the merged module symbol. But the symbol for `B` has only one declaration, so its parent should
			// be the module augmentation symbol, which contains its only declaration.
			merged.Parent = mergedParent
		}
		target.set(id, merged)
	})
}

func (c *Checker) mergeModuleAugmentation(moduleName Union[StringLiteral, Identifier]) {
	moduleAugmentation := moduleName.Parent.AsModuleDeclaration()
	if moduleAugmentation.Symbol.Declarations[0] != moduleAugmentation {
		// this is a combined symbol for multiple augmentations within the same file.
		// its symbol already has accumulated information for all declarations
		// so we need to add it just once - do the work only for first declaration
		Debug.assert(moduleAugmentation.Symbol.Declarations.length > 1)
		return
	}

	if isGlobalScopeAugmentation(moduleAugmentation) {
		c.mergeSymbolTable(c.globals, moduleAugmentation.Symbol.Exports)
	} else {
		// find a module that about to be augmented
		// do not validate names of augmentations that are defined in ambient context
		var moduleNotFoundError any
		if moduleName.Parent.Parent.Flags&ast.NodeFlagsAmbient == 0 {
			moduleNotFoundError = Diagnostics.Invalid_module_name_in_augmentation_module_0_cannot_be_found
		} else {
			moduleNotFoundError = nil
		}
		mainModule := c.resolveExternalModuleNameWorker(moduleName, moduleName, moduleNotFoundError, false /*ignoreErrors*/, true /*isForAugmentation*/)
		if mainModule == nil {
			return
		}
		// obtain item referenced by 'export='
		mainModule = c.resolveExternalModuleSymbol(mainModule)
		if mainModule.Flags&ast.SymbolFlagsNamespace != 0 {
			// If we're merging an augmentation to a pattern ambient module, we want to
			// perform the merge unidirectionally from the augmentation ('a.foo') to
			// the pattern ('*.foo'), so that 'getMergedSymbol()' on a.foo gives you
			// all the exports both from the pattern and from the augmentation, but
			// 'getMergedSymbol()' on *.foo only gives you exports from *.foo.
			if core.Some(c.patternAmbientModules, func(module PatternAmbientModule) bool {
				return mainModule == module.symbol
			}) {
				merged := c.mergeSymbol(moduleAugmentation.Symbol, mainModule, true /*unidirectional*/)
				if c.patternAmbientModuleAugmentations == nil {
					c.patternAmbientModuleAugmentations = NewMap()
				}
				// moduleName will be a StringLiteral since this is not `declare global`.
				c.patternAmbientModuleAugmentations.set(moduleName.AsStringLiteral().Text, merged)
			} else {
				if mainModule.Exports. /* ? */ get(InternalSymbolNameExportStar) != nil && moduleAugmentation.Symbol.Exports. /* ? */ size {
					// We may need to merge the module augmentation's exports into the target symbols of the resolved exports
					resolvedExports := c.getResolvedMembersOrExportsOfSymbol(mainModule, MembersOrExportsResolutionKindresolvedExports)
					for _, TODO_IDENTIFIER := range arrayFrom(moduleAugmentation.Symbol.Exports.entries()) {
						if resolvedExports.has(key) && !mainModule.Exports.has(key) {
							c.mergeSymbol(resolvedExports.get(key), value)
						}
					}
				}
				c.mergeSymbol(mainModule, moduleAugmentation.Symbol)
			}
		} else {
			// moduleName will be a StringLiteral since this is not `declare global`.
			c.error(moduleName, Diagnostics.Cannot_augment_module_0_because_it_resolves_to_a_non_module_entity, moduleName.AsStringLiteral().Text)
		}
	}
}

func (c *Checker) addUndefinedToGlobalsOrErrorOnRedeclaration() {
	name := c.undefinedSymbol.EscapedName
	targetSymbol := c.globals.get(name)
	if targetSymbol != nil {
		forEach(targetSymbol.Declarations, func(declaration Declaration) {
			// checkTypeNameIsReserved will have added better diagnostics for type declarations.
			if !isTypeDeclaration(declaration) {
				c.diagnostics.add(createDiagnosticForNode(declaration, Diagnostics.Declaration_name_conflicts_with_built_in_global_identifier_0, unescapeLeadingUnderscores(name)))
			}
		})
	} else {
		c.globals.set(name, c.undefinedSymbol)
	}
}

func (c *Checker) getSymbolLinks(symbol *ast.Symbol) SymbolLinks {
	if symbol.Flags&ast.SymbolFlagsTransient != 0 {
		return (symbol.(TransientSymbol)).Links
	}
	id := getSymbolId(symbol)
	if c.symbolLinks[id] == nil {
		c.symbolLinks[id] = NewSymbolLinks()
	}
	return c.symbolLinks[id]
}

func (c *Checker) getNodeLinks(node *ast.Node) NodeLinks {
	nodeId := getNodeId(node)
	return c.nodeLinks[nodeId] || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: nodeLinks[nodeId] = new (NodeLinks as any)() */ TODO)
}

func (c *Checker) getSymbol(symbols SymbolTable, name string, meaning SymbolFlags) *ast.Symbol {
	if meaning != 0 {
		symbol := c.getMergedSymbol(symbols.get(name))
		if symbol != nil {
			if symbol.Flags&meaning != 0 {
				return symbol
			}
			if symbol.Flags&ast.SymbolFlagsAlias != 0 {
				targetFlags := c.getSymbolFlags(symbol)
				// `targetFlags` will be `SymbolFlags.All` if an error occurred in alias resolution; this avoids cascading errors
				if targetFlags&meaning != 0 {
					return symbol
				}
			}
		}
	}
	// return undefined if we can't find a symbol.
}

/**
 * Get symbols that represent parameter-property-declaration as parameter and as property declaration
 * @param parameter a parameterDeclaration node
 * @param parameterName a name of the parameter to get the symbols for.
 * @return a tuple of two symbols
 */

func (c *Checker) getSymbolsOfParameterPropertyDeclaration(parameter ParameterPropertyDeclaration, parameterName string) /* TODO(TS-TO-GO) TypeNode TupleType: [Symbol, Symbol] */ any {
	constructorDeclaration := parameter.Parent
	classDeclaration := parameter.Parent.Parent

	parameterSymbol := c.getSymbol(constructorDeclaration.Locals, parameterName, ast.SymbolFlagsValue)
	propertySymbol := c.getSymbol(c.getMembersOfSymbol(classDeclaration.Symbol), parameterName, ast.SymbolFlagsValue)

	if parameterSymbol != nil && propertySymbol != nil {
		return []any{parameterSymbol, propertySymbol}
	}

	return Debug.fail("There should exist two symbols, one as property declaration and one as parameter declaration")
}

func (c *Checker) isBlockScopedNameDeclaredBeforeUse(declaration Declaration, usage *ast.Node) bool {
	declarationFile := getSourceFileOfNode(declaration)
	useFile := getSourceFileOfNode(usage)
	declContainer := getEnclosingBlockScopeContainer(declaration)
	if declarationFile != useFile {
		if (c.moduleKind != 0 && (declarationFile.ExternalModuleIndicator || useFile.ExternalModuleIndicator)) || (!c.compilerOptions.outFile) || isInTypeQuery(usage) || declaration.Flags&ast.NodeFlagsAmbient != 0 {
			// nodes are in different files and order cannot be determined
			return true
		}
		// declaration is after usage
		// can be legal if usage is deferred (i.e. inside function or in initializer of instance property)
		if isUsedInFunctionOrInstanceProperty(usage, declaration) {
			return true
		}
		sourceFiles := host.getSourceFiles()
		return sourceFiles.indexOf(declarationFile) <= sourceFiles.indexOf(useFile)
	}

	// deferred usage in a type context is always OK regardless of the usage position:
	if usage.Flags&ast.NodeFlagsJSDoc != 0 || isInTypeQuery(usage) || c.isInAmbientOrTypeNode(usage) {
		return true
	}

	if declaration.Pos <= usage.Pos && !(isPropertyDeclaration(declaration) && isThisProperty(usage.Parent) && declaration.Initializer == nil && declaration.ExclamationToken == nil) {
		// declaration is before usage
		if declaration.Kind == ast.KindBindingElement {
			// still might be illegal if declaration and usage are both binding elements (eg var [a = b, b = b] = [1, 2])
			errorBindingElement := getAncestor(usage, ast.KindBindingElement).AsBindingElement()
			if errorBindingElement {
				return findAncestor(errorBindingElement, isBindingElement) != findAncestor(declaration, isBindingElement) || declaration.Pos < errorBindingElement.Pos
			}
			// or it might be illegal if usage happens before parent variable is declared (eg var [a] = a)
			return c.isBlockScopedNameDeclaredBeforeUse(getAncestor(declaration, ast.KindVariableDeclaration).AsDeclaration(), usage)
		} else if declaration.Kind == ast.KindVariableDeclaration {
			// still might be illegal if usage is in the initializer of the variable declaration (eg var a = a)
			return !isImmediatelyUsedInInitializerOfBlockScopedVariable(declaration.AsVariableDeclaration(), usage)
		} else if isClassLike(declaration) {
			// still might be illegal if the usage is within a computed property name in the class (eg class A { static p = "a"; [A.p]() {} })
			// or when used within a decorator in the class (e.g. `@dec(A.x) class A { static x = "x" }`),
			// except when used in a function that is not an IIFE (e.g., `@dec(() => A.x) class A { ... }`)
			container := findAncestor(usage, func(n *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
				switch {
				case n == declaration:
					return "quit"
				case isComputedPropertyName(n):
					return n.Parent.Parent == declaration
				default:
					return !c.legacyDecorators && isDecorator(n) && (n.Parent == declaration || isMethodDeclaration(n.Parent) && n.Parent.Parent == declaration || isGetOrSetAccessorDeclaration(n.Parent) && n.Parent.Parent == declaration || isPropertyDeclaration(n.Parent) && n.Parent.Parent == declaration || isParameter(n.Parent) && n.Parent.Parent.Parent == declaration)
				}
			})
			if container == nil {
				return true
			}
			if !c.legacyDecorators && isDecorator(container) {
				return findAncestor(usage, func(n *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
					if n == container {
						return "quit"
					} else {
						return isFunctionLike(n) && getImmediatelyInvokedFunctionExpression(n) == nil
					}
				}) != nil
			}
			return false
		} else if isPropertyDeclaration(declaration) {
			// still might be illegal if a self-referencing property initializer (eg private x = this.x)
			return !isPropertyImmediatelyReferencedWithinDeclaration(declaration, usage, false /*stopAtAnyPropertyDeclaration*/)
		} else if isParameterPropertyDeclaration(declaration, declaration.Parent) {
			// foo = this.bar is illegal in emitStandardClassFields when bar is a parameter property
			return !(c.emitStandardClassFields && getContainingClass(declaration) == getContainingClass(usage) && isUsedInFunctionOrInstanceProperty(usage, declaration))
		}
		return true
	}

	// declaration is after usage, but it can still be legal if usage is deferred:
	// 1. inside an export specifier
	// 2. inside a function
	// 3. inside an instance property initializer, a reference to a non-instance property
	//    (except when emitStandardClassFields: true and the reference is to a parameter property)
	// 4. inside a static property initializer, a reference to a static method in the same class
	// 5. inside a TS export= declaration (since we will move the export statement during emit to avoid TDZ)
	if usage.Parent.Kind == ast.KindExportSpecifier || (usage.Parent.Kind == ast.KindExportAssignment && usage.Parent.AsExportAssignment().IsExportEquals) {
		// export specifiers do not use the variable, they only make it available for use
		return true
	}
	// When resolving symbols for exports, the `usage` location passed in can be the export site directly
	if usage.Kind == ast.KindExportAssignment && usage.AsExportAssignment().IsExportEquals {
		return true
	}

	if isUsedInFunctionOrInstanceProperty(usage, declaration) {
		if c.emitStandardClassFields && getContainingClass(declaration) != nil && (isPropertyDeclaration(declaration) || isParameterPropertyDeclaration(declaration, declaration.Parent)) {
			return !isPropertyImmediatelyReferencedWithinDeclaration(declaration, usage, true /*stopAtAnyPropertyDeclaration*/)
		} else {
			return true
		}
	}
	return false

	isImmediatelyUsedInInitializerOfBlockScopedVariable := func(declaration VariableDeclaration, usage *ast.Node) bool {
		switch declaration.Parent.Parent.Kind {
		case ast.KindVariableStatement,
			ast.KindForStatement,
			ast.KindForOfStatement:
			// variable statement/for/for-of statement case,
			// use site should not be inside variable declaration (initializer of declaration or binding element)
			if c.isSameScopeDescendentOf(usage, declaration, declContainer) {
				return true
			}
		}

		// ForIn/ForOf case - use site should not be used in expression part
		grandparent := declaration.Parent.Parent
		return isForInOrOfStatement(grandparent) && c.isSameScopeDescendentOf(usage, grandparent.Expression, declContainer)
	}

	isUsedInFunctionOrInstanceProperty := func(usage *ast.Node, declaration *ast.Node) bool {
		return findAncestor(usage, func(current *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
			if current == declContainer {
				return "quit"
			}
			if isFunctionLike(current) {
				return true
			}
			if isClassStaticBlockDeclaration(current) {
				return declaration.Pos < usage.Pos
			}

			propertyDeclaration := tryCast(current.Parent, isPropertyDeclaration)
			if propertyDeclaration != nil {
				initializerOfProperty := propertyDeclaration.Initializer == current
				if initializerOfProperty {
					if isStatic(current.Parent) {
						if declaration.Kind == ast.KindMethodDeclaration {
							return true
						}
						if isPropertyDeclaration(declaration) && getContainingClass(usage) == getContainingClass(declaration) {
							propName := declaration.Name
							if isIdentifier(propName) || isPrivateIdentifier(propName) {
								t := c.getTypeOfSymbol(c.getSymbolOfDeclaration(declaration))
								staticBlocks := core.Filter(declaration.Parent.Members, isClassStaticBlockDeclaration)
								if c.isPropertyInitializedInStaticBlocks(propName, t, staticBlocks, declaration.Parent.Pos, current.Pos) {
									return true
								}
							}
						}
					} else {
						isDeclarationInstanceProperty := declaration.Kind == ast.KindPropertyDeclaration && !isStatic(declaration)
						if !isDeclarationInstanceProperty || getContainingClass(usage) != getContainingClass(declaration) {
							return true
						}
					}
				}
			}
			return false
		}) != nil
	}

	/** stopAtAnyPropertyDeclaration is used for detecting ES-standard class field use-before-def errors */

	isPropertyImmediatelyReferencedWithinDeclaration := func(declaration Union[PropertyDeclaration, ParameterPropertyDeclaration], usage *ast.Node, stopAtAnyPropertyDeclaration bool) bool {
		// always legal if usage is after declaration
		if usage.End > declaration.End {
			return false
		}

		// still might be legal if usage is deferred (e.g. x: any = () => this.x)
		// otherwise illegal if immediately referenced within the declaration (e.g. x: any = this.x)
		ancestorChangingReferenceScope := findAncestor(usage, func(node *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
			if node == declaration {
				return "quit"
			}

			switch node.Kind {
			case ast.KindArrowFunction:
				return true
			case ast.KindPropertyDeclaration:
				// even when stopping at any property declaration, they need to come from the same class
				if stopAtAnyPropertyDeclaration && (isPropertyDeclaration(declaration) && node.Parent == declaration.Parent || isParameterPropertyDeclaration(declaration, declaration.Parent) && node.Parent == declaration.Parent.Parent) {
					return "quit"
				} else {
					return true
				}
			case ast.KindBlock:
				switch node.Parent.Kind {
				case ast.KindGetAccessor,
					ast.KindMethodDeclaration,
					ast.KindSetAccessor:
					return true
				default:
					return false
				}
				fallthrough
			default:
				return false
			}
		})

		return ancestorChangingReferenceScope == nil
	}

}

func (c *Checker) getRequiresScopeChangeCache(node FunctionLikeDeclaration) *bool {
	return c.getNodeLinks(node).declarationRequiresScopeChange
}

func (c *Checker) setRequiresScopeChangeCache(node FunctionLikeDeclaration, value bool) {
	c.getNodeLinks(node).declarationRequiresScopeChange = value
}

// The invalid initializer error is needed in two situation:
// 1. When result is undefined, after checking for a missing "this."
// 2. When result is defined
func (c *Checker) checkAndReportErrorForInvalidInitializer(errorLocation *ast.Node, name string, propertyWithInvalidInitializer PropertyDeclaration, result *ast.Symbol) bool {
	if !c.emitStandardClassFields {
		if errorLocation != nil && result == nil && c.checkAndReportErrorForMissingPrefix(errorLocation, name, name) {
			return true
		}
		// We have a match, but the reference occurred within a property initializer and the identifier also binds
		// to a local variable in the constructor where the code will be emitted. Note that this is actually allowed
		// with emitStandardClassFields because the scope semantics are different.
		c.error(errorLocation, ifElse(errorLocation != nil && propertyWithInvalidInitializer.Type_ != nil && textRangeContainsPositionInclusive(propertyWithInvalidInitializer.Type_, errorLocation.Pos), Diagnostics.Type_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor, Diagnostics.Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor), declarationNameToString(propertyWithInvalidInitializer.Name), c.diagnosticName(name))
		return true
	}
	return false
}

func (c *Checker) onFailedToResolveSymbol(errorLocation *ast.Node, nameArg Union[string, Identifier], meaning SymbolFlags, nameNotFoundMessage DiagnosticMessage) {
	var name /* TODO(TS-TO-GO) inferred type (string & { __escapedIdentifier: void; }) | (void & { __escapedIdentifier: void; }) | InternalSymbolName */ any
	if isString(nameArg) {
		name = nameArg
	} else {
		name = nameArg.AsIdentifier().EscapedText
	}
	c.addLazyDiagnostic(func() {
		if errorLocation == nil || errorLocation.Parent.Kind != ast.KindJSDocLink && !c.checkAndReportErrorForMissingPrefix(errorLocation, name, nameArg) && !c.checkAndReportErrorForExtendingInterface(errorLocation) && !c.checkAndReportErrorForUsingTypeAsNamespace(errorLocation, name, meaning) && !c.checkAndReportErrorForExportingPrimitiveType(errorLocation, name) && !c.checkAndReportErrorForUsingNamespaceAsTypeOrValue(errorLocation, name, meaning) && !c.checkAndReportErrorForUsingTypeAsValue(errorLocation, name, meaning) && !c.checkAndReportErrorForUsingValueAsType(errorLocation, name, meaning) {
			var suggestion *ast.Symbol
			var suggestedLib *string
			// Report missing lib first
			if nameArg {
				suggestedLib = c.getSuggestedLibForNonExistentName(nameArg)
				if suggestedLib {
					c.error(errorLocation, nameNotFoundMessage, c.diagnosticName(nameArg), suggestedLib)
				}
			}
			// then spelling suggestions
			if !suggestedLib && c.suggestionCount < c.maximumSuggestionCount {
				suggestion = c.getSuggestedSymbolForNonexistentSymbol(errorLocation, name, meaning)
				isGlobalScopeAugmentationDeclaration := suggestion. /* ? */ valueDeclaration && isAmbientModule(suggestion.ValueDeclaration) && isGlobalScopeAugmentation(suggestion.ValueDeclaration)
				if isGlobalScopeAugmentationDeclaration {
					suggestion = nil
				}
				if suggestion != nil {
					suggestionName := c.symbolToString(suggestion)
					isUncheckedJS := c.isUncheckedJSSuggestion(errorLocation, suggestion, false /*excludeClasses*/)
					var message any
					switch {
					case meaning == ast.SymbolFlagsNamespace || nameArg && /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof nameArg */ TODO != "string" && nodeIsSynthesized(nameArg):
						message = Diagnostics.Cannot_find_namespace_0_Did_you_mean_1
					case isUncheckedJS:
						message = Diagnostics.Could_not_find_name_0_Did_you_mean_1
					default:
						message = Diagnostics.Cannot_find_name_0_Did_you_mean_1
					}
					diagnostic := c.createError(errorLocation, message, c.diagnosticName(nameArg), suggestionName)
					diagnostic.canonicalHead = getCanonicalDiagnostic(nameNotFoundMessage, c.diagnosticName(nameArg))
					c.addErrorOrSuggestion(!isUncheckedJS, diagnostic)
					if suggestion.ValueDeclaration != nil {
						addRelatedInfo(diagnostic, createDiagnosticForNode(suggestion.ValueDeclaration, Diagnostics._0_is_declared_here, suggestionName))
					}
				}
			}
			// And then fall back to unspecified "not found"
			if suggestion == nil && !suggestedLib && nameArg {
				c.error(errorLocation, nameNotFoundMessage, c.diagnosticName(nameArg))
			}
			c.suggestionCount++
		}
	})
}

func (c *Checker) onSuccessfullyResolvedSymbol(errorLocation *ast.Node, result *ast.Symbol, meaning SymbolFlags, lastLocation *ast.Node, associatedDeclarationForContainingInitializerOrBindingName Union[ParameterDeclaration, BindingElement, undefined], withinDeferredContext bool) {
	c.addLazyDiagnostic(func() {
		name := result.EscapedName
		isInExternalModule := lastLocation && isSourceFile(lastLocation) && isExternalOrCommonJsModule(lastLocation)
		// Only check for block-scoped variable if we have an error location and are looking for the
		// name with variable meaning
		//      For example,
		//          declare module foo {
		//              interface bar {}
		//          }
		//      const foo/*1*/: foo/*2*/.bar;
		// The foo at /*1*/ and /*2*/ will share same symbol with two meanings:
		// block-scoped variable and namespace module. However, only when we
		// try to resolve name in /*1*/ which is used in variable position,
		// we want to check for block-scoped
		if errorLocation != nil && (meaning&ast.SymbolFlagsBlockScopedVariable != 0 || ((meaning&ast.SymbolFlagsClass != 0 || meaning&ast.SymbolFlagsEnum != 0) && (meaning&ast.SymbolFlagsValue) == ast.SymbolFlagsValue)) {
			exportOrLocalSymbol := c.getExportSymbolOfValueSymbolIfExported(result)
			if exportOrLocalSymbol.Flags&ast.SymbolFlagsBlockScopedVariable != 0 || exportOrLocalSymbol.Flags&ast.SymbolFlagsClass != 0 || exportOrLocalSymbol.Flags&ast.SymbolFlagsEnum != 0 {
				c.checkResolvedBlockScopedVariable(exportOrLocalSymbol, errorLocation)
			}
		}

		// If we're in an external module, we can't reference value symbols created from UMD export declarations
		if isInExternalModule && (meaning&ast.SymbolFlagsValue) == ast.SymbolFlagsValue && errorLocation.Flags&ast.NodeFlagsJSDoc == 0 {
			merged := c.getMergedSymbol(result)
			if length(merged.Declarations) != 0 && core.Every(merged.Declarations, func(d Declaration) bool {
				return isNamespaceExportDeclaration(d) || isSourceFile(d) && d.Symbol.GlobalExports != nil
			}) {
				c.errorOrSuggestion(!c.compilerOptions.allowUmdGlobalAccess, errorLocation, Diagnostics._0_refers_to_a_UMD_global_but_the_current_file_is_a_module_Consider_adding_an_import_instead, unescapeLeadingUnderscores(name))
			}
		}

		// If we're in a parameter initializer or binding name, we can't reference the values of the parameter whose initializer we're within or parameters to the right
		if associatedDeclarationForContainingInitializerOrBindingName != nil && !withinDeferredContext && (meaning&ast.SymbolFlagsValue) == ast.SymbolFlagsValue {
			candidate := c.getMergedSymbol(c.getLateBoundSymbol(result))
			root := getRootDeclaration(associatedDeclarationForContainingInitializerOrBindingName).AsParameterDeclaration()
			// A parameter initializer or binding pattern initializer within a parameter cannot refer to itself
			if candidate == c.getSymbolOfDeclaration(associatedDeclarationForContainingInitializerOrBindingName) {
				c.error(errorLocation, Diagnostics.Parameter_0_cannot_reference_itself, declarationNameToString(associatedDeclarationForContainingInitializerOrBindingName.Name))
			} else if candidate.ValueDeclaration != nil && candidate.ValueDeclaration.Pos > associatedDeclarationForContainingInitializerOrBindingName.Pos && root.Parent.Locals != nil && c.getSymbol(root.Parent.Locals, candidate.EscapedName, meaning) == candidate {
				c.error(errorLocation, Diagnostics.Parameter_0_cannot_reference_identifier_1_declared_after_it, declarationNameToString(associatedDeclarationForContainingInitializerOrBindingName.Name), declarationNameToString(errorLocation.AsIdentifier()))
			}
		}
		if errorLocation != nil && meaning&ast.SymbolFlagsValue != 0 && result.Flags&ast.SymbolFlagsAlias != 0 && result.Flags&ast.SymbolFlagsValue == 0 && !isValidTypeOnlyAliasUseSite(errorLocation) {
			typeOnlyDeclaration := c.getTypeOnlyAliasDeclaration(result, ast.SymbolFlagsValue)
			if typeOnlyDeclaration != nil {
				var message any
				if typeOnlyDeclaration.Kind == ast.KindExportSpecifier || typeOnlyDeclaration.Kind == ast.KindExportDeclaration || typeOnlyDeclaration.Kind == ast.KindNamespaceExport {
					message = Diagnostics._0_cannot_be_used_as_a_value_because_it_was_exported_using_export_type
				} else {
					message = Diagnostics._0_cannot_be_used_as_a_value_because_it_was_imported_using_import_type
				}
				unescapedName := unescapeLeadingUnderscores(name)
				c.addTypeOnlyDeclarationRelatedInfo(c.error(errorLocation, message, unescapedName), typeOnlyDeclaration, unescapedName)
			}
		}

		// Look at 'compilerOptions.isolatedModules' and not 'getIsolatedModules(...)' (which considers 'verbatimModuleSyntax')
		// here because 'verbatimModuleSyntax' will already have an error for importing a type without 'import type'.
		if c.compilerOptions.isolatedModules && result && isInExternalModule && (meaning&ast.SymbolFlagsValue) == ast.SymbolFlagsValue {
			isGlobal := c.getSymbol(c.globals, name, meaning) == result
			nonValueSymbol := isGlobal && isSourceFile(lastLocation) && lastLocation.Locals && c.getSymbol(lastLocation.Locals, name, ^ast.SymbolFlagsValue)
			if nonValueSymbol {
				importDecl := nonValueSymbol.Declarations. /* ? */ find(func(d Declaration) bool {
					return d.Kind == ast.KindImportSpecifier || d.Kind == ast.KindImportClause || d.Kind == ast.KindNamespaceImport || d.Kind == ast.KindImportEqualsDeclaration
				})
				if importDecl != nil && !isTypeOnlyImportDeclaration(importDecl) {
					c.error(importDecl, Diagnostics.Import_0_conflicts_with_global_value_used_in_this_file_so_must_be_declared_with_a_type_only_import_when_isolatedModules_is_enabled, unescapeLeadingUnderscores(name))
				}
			}
		}
	})
}

func (c *Checker) addTypeOnlyDeclarationRelatedInfo(diagnostic Diagnostic, typeOnlyDeclaration *TypeOnlyCompatibleAliasDeclaration, unescapedName string) Diagnostic {
	if typeOnlyDeclaration == nil {
		return diagnostic
	}
	return addRelatedInfo(diagnostic, createDiagnosticForNode(typeOnlyDeclaration, ifElse(typeOnlyDeclaration.Kind == ast.KindExportSpecifier || typeOnlyDeclaration.Kind == ast.KindExportDeclaration || typeOnlyDeclaration.Kind == ast.KindNamespaceExport, Diagnostics._0_was_exported_here, Diagnostics._0_was_imported_here), unescapedName))
}

func (c *Checker) diagnosticName(nameArg Union[string, Identifier, PrivateIdentifier]) string {
	if isString(nameArg) {
		return unescapeLeadingUnderscores(nameArg.(string))
	} else {
		return declarationNameToString(nameArg.AsIdentifier())
	}
}

func (c *Checker) checkAndReportErrorForMissingPrefix(errorLocation *ast.Node, name string, nameArg Union[string, Identifier]) bool {
	if !isIdentifier(errorLocation) || errorLocation.EscapedText != name || c.isTypeReferenceIdentifier(errorLocation) || isInTypeQuery(errorLocation) {
		return false
	}

	container := getThisContainer(errorLocation, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)
	var location *ast.Node = container
	for location {
		if isClassLike(location.Parent) {
			classSymbol := c.getSymbolOfDeclaration(location.Parent)
			if !classSymbol {
				break
			}

			// Check to see if a static member exists.
			constructorType := c.getTypeOfSymbol(classSymbol)
			if c.getPropertyOfType(constructorType, name) != nil {
				c.error(errorLocation, Diagnostics.Cannot_find_name_0_Did_you_mean_the_static_member_1_0, c.diagnosticName(nameArg), c.symbolToString(classSymbol))
				return true
			}

			// No static member is present.
			// Check if we're in an instance method and look for a relevant instance member.
			if location == container && !isStatic(location) {
				instanceType := c.getDeclaredTypeOfSymbol(classSymbol).AsInterfaceType().thisType
				// TODO: GH#18217
				if c.getPropertyOfType(instanceType, name) != nil {
					c.error(errorLocation, Diagnostics.Cannot_find_name_0_Did_you_mean_the_instance_member_this_0, c.diagnosticName(nameArg))
					return true
				}
			}
		}

		location = location.Parent
	}
	return false
}

func (c *Checker) checkAndReportErrorForExtendingInterface(errorLocation *ast.Node) bool {
	expression := c.getEntityNameForExtendingInterface(errorLocation)
	if expression != nil && c.resolveEntityName(expression, ast.SymbolFlagsInterface, true /*ignoreErrors*/) != nil {
		c.error(errorLocation, Diagnostics.Cannot_extend_an_interface_0_Did_you_mean_implements, getTextOfNode(expression))
		return true
	}
	return false
}

/**
 * Climbs up parents to an ExpressionWithTypeArguments, and returns its expression,
 * but returns undefined if that expression is not an EntityNameExpression.
 */

func (c *Checker) getEntityNameForExtendingInterface(node *ast.Node) *EntityNameExpression {
	switch node.Kind {
	case ast.KindIdentifier,
		ast.KindPropertyAccessExpression:
		if node.Parent {
			return c.getEntityNameForExtendingInterface(node.Parent)
		} else {
			return nil
		}
	case ast.KindExpressionWithTypeArguments:
		if isEntityNameExpression(node.AsExpressionWithTypeArguments().Expression) {
			return node.AsExpressionWithTypeArguments().Expression.AsEntityNameExpression()
		}
		fallthrough
	default:
		return nil
	}
}

func (c *Checker) checkAndReportErrorForUsingTypeAsNamespace(errorLocation *ast.Node, name string, meaning SymbolFlags) bool {
	namespaceMeaning := ast.SymbolFlagsNamespace | (ifElse(isInJSFile(errorLocation), ast.SymbolFlagsValue, 0))
	if meaning == namespaceMeaning {
		symbol := c.resolveSymbol(c.resolveName(errorLocation, name, ast.SymbolFlagsType & ^namespaceMeaning, nil /*nameNotFoundMessage*/, false /*isUse*/))
		parent := errorLocation.Parent
		if symbol != nil {
			if isQualifiedName(parent) {
				Debug.assert(parent.Left == errorLocation, "Should only be resolving left side of qualified name as a namespace")
				propName := parent.Right.EscapedText
				propType := c.getPropertyOfType(c.getDeclaredTypeOfSymbol(symbol), propName)
				if propType != nil {
					c.error(parent, Diagnostics.Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_property_1_in_0_with_0_1, unescapeLeadingUnderscores(name), unescapeLeadingUnderscores(propName))
					return true
				}
			}
			c.error(errorLocation, Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_namespace_here, unescapeLeadingUnderscores(name))
			return true
		}
	}

	return false
}

func (c *Checker) checkAndReportErrorForUsingValueAsType(errorLocation *ast.Node, name string, meaning SymbolFlags) bool {
	if meaning&(ast.SymbolFlagsType & ^ast.SymbolFlagsNamespace) != 0 {
		symbol := c.resolveSymbol(c.resolveName(errorLocation, name, ^ast.SymbolFlagsType&ast.SymbolFlagsValue, nil /*nameNotFoundMessage*/, false /*isUse*/))
		if symbol != nil && symbol.Flags&ast.SymbolFlagsNamespace == 0 {
			c.error(errorLocation, Diagnostics._0_refers_to_a_value_but_is_being_used_as_a_type_here_Did_you_mean_typeof_0, unescapeLeadingUnderscores(name))
			return true
		}
	}
	return false
}

func (c *Checker) isPrimitiveTypeName(name string) bool {
	return name == "any" || name == "string" || name == "number" || name == "boolean" || name == "never" || name == "unknown"
}

func (c *Checker) checkAndReportErrorForExportingPrimitiveType(errorLocation *ast.Node, name string) bool {
	if c.isPrimitiveTypeName(name) && errorLocation.Parent.Kind == ast.KindExportSpecifier {
		c.error(errorLocation, Diagnostics.Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module, name /* as string */)
		return true
	}
	return false
}

func (c *Checker) checkAndReportErrorForUsingTypeAsValue(errorLocation *ast.Node, name string, meaning SymbolFlags) bool {
	if meaning&ast.SymbolFlagsValue != 0 {
		if c.isPrimitiveTypeName(name) {
			grandparent := errorLocation.Parent.Parent
			if grandparent && grandparent.Parent && isHeritageClause(grandparent) {
				heritageKind := grandparent.Token
				containerKind := grandparent.Parent.Kind
				if containerKind == ast.KindInterfaceDeclaration && heritageKind == ast.KindExtendsKeyword {
					c.error(errorLocation, Diagnostics.An_interface_cannot_extend_a_primitive_type_like_0_It_can_only_extend_other_named_object_types, unescapeLeadingUnderscores(name))
				} else if containerKind == ast.KindClassDeclaration && heritageKind == ast.KindExtendsKeyword {
					c.error(errorLocation, Diagnostics.A_class_cannot_extend_a_primitive_type_like_0_Classes_can_only_extend_constructable_values, unescapeLeadingUnderscores(name))
				} else if containerKind == ast.KindClassDeclaration && heritageKind == ast.KindImplementsKeyword {
					c.error(errorLocation, Diagnostics.A_class_cannot_implement_a_primitive_type_like_0_It_can_only_implement_other_named_object_types, unescapeLeadingUnderscores(name))
				}
			} else {
				c.error(errorLocation, Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here, unescapeLeadingUnderscores(name))
			}
			return true
		}
		symbol := c.resolveSymbol(c.resolveName(errorLocation, name, ast.SymbolFlagsType & ^ast.SymbolFlagsValue, nil /*nameNotFoundMessage*/, false /*isUse*/))
		allFlags := symbol && c.getSymbolFlags(symbol)
		if symbol != nil && allFlags != nil && allFlags&ast.SymbolFlagsValue == 0 {
			rawName := unescapeLeadingUnderscores(name)
			if c.isES2015OrLaterConstructorName(name) {
				c.error(errorLocation, Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_es2015_or_later, rawName)
			} else if c.maybeMappedType(errorLocation, symbol) {
				c.error(errorLocation, Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Did_you_mean_to_use_1_in_0, rawName, ifElse(rawName == "K", "P", "K"))
			} else {
				c.error(errorLocation, Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here, rawName)
			}
			return true
		}
	}
	return false
}

func (c *Checker) maybeMappedType(node *ast.Node, symbol *ast.Symbol) bool {
	container := findAncestor(node.Parent, func(n *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
		if isComputedPropertyName(n) || isPropertySignature(n) {
			return false
		} else {
			return isTypeLiteralNode(n) || "quit"
		}
	}) /* as TypeLiteralNode | undefined */
	if container != nil && container.Members.length == 1 {
		t := c.getDeclaredTypeOfSymbol(symbol)
		return t.flags&TypeFlagsUnion != 0 && c.allTypesAssignableToKind(t, TypeFlagsStringOrNumberLiteral, true /*strict*/)
	}
	return false
}

func (c *Checker) isES2015OrLaterConstructorName(n string) bool {
	switch n {
	case "Promise",
		"Symbol",
		"Map",
		"WeakMap",
		"Set",
		"WeakSet":
		return true
	}
	return false
}

func (c *Checker) checkAndReportErrorForUsingNamespaceAsTypeOrValue(errorLocation *ast.Node, name string, meaning SymbolFlags) bool {
	if meaning&(ast.SymbolFlagsValue & ^ast.SymbolFlagsType) != 0 {
		symbol := c.resolveSymbol(c.resolveName(errorLocation, name, ast.SymbolFlagsNamespaceModule, nil /*nameNotFoundMessage*/, false /*isUse*/))
		if symbol != nil {
			c.error(errorLocation, Diagnostics.Cannot_use_namespace_0_as_a_value, unescapeLeadingUnderscores(name))
			return true
		}
	} else if meaning&(ast.SymbolFlagsType & ^ast.SymbolFlagsValue) != 0 {
		symbol := c.resolveSymbol(c.resolveName(errorLocation, name, ast.SymbolFlagsModule, nil /*nameNotFoundMessage*/, false /*isUse*/))
		if symbol != nil {
			c.error(errorLocation, Diagnostics.Cannot_use_namespace_0_as_a_type, unescapeLeadingUnderscores(name))
			return true
		}
	}
	return false
}

func (c *Checker) checkResolvedBlockScopedVariable(result *ast.Symbol, errorLocation *ast.Node) {
	Debug.assert(result.Flags&ast.SymbolFlagsBlockScopedVariable != 0 || result.Flags&ast.SymbolFlagsClass != 0 || result.Flags&ast.SymbolFlagsEnum != 0)
	if result.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsFunctionScopedVariable|ast.SymbolFlagsAssignment) != 0 && result.Flags&ast.SymbolFlagsClass != 0 {
		// constructor functions aren't block scoped
		return
	}
	// Block-scoped variables cannot be used before their definition
	declaration := result.Declarations. /* ? */ find(func(d Declaration) bool {
		return isBlockOrCatchScoped(d) || isClassLike(d) || (d.Kind == ast.KindEnumDeclaration)
	})

	if declaration == nil {
		return Debug.fail("checkResolvedBlockScopedVariable could not find block-scoped declaration")
	}

	if declaration.Flags&ast.NodeFlagsAmbient == 0 && !c.isBlockScopedNameDeclaredBeforeUse(declaration, errorLocation) {
		var diagnosticMessage TODO
		declarationName := declarationNameToString(getNameOfDeclaration(declaration))
		if result.Flags&ast.SymbolFlagsBlockScopedVariable != 0 {
			diagnosticMessage = c.error(errorLocation, Diagnostics.Block_scoped_variable_0_used_before_its_declaration, declarationName)
		} else if result.Flags&ast.SymbolFlagsClass != 0 {
			diagnosticMessage = c.error(errorLocation, Diagnostics.Class_0_used_before_its_declaration, declarationName)
		} else if result.Flags&ast.SymbolFlagsRegularEnum != 0 {
			diagnosticMessage = c.error(errorLocation, Diagnostics.Enum_0_used_before_its_declaration, declarationName)
		} else {
			Debug.assert(result.Flags&ast.SymbolFlagsConstEnum != 0)
			if getIsolatedModules(c.compilerOptions) {
				diagnosticMessage = c.error(errorLocation, Diagnostics.Enum_0_used_before_its_declaration, declarationName)
			}
		}

		if diagnosticMessage != nil {
			addRelatedInfo(diagnosticMessage, createDiagnosticForNode(declaration, Diagnostics._0_is_declared_here, declarationName))
		}
	}
}

/* Starting from 'initial' node walk up the parent chain until 'stopAt' node is reached.
 * If at any point current node is equal to 'parent' node - return true.
 * If current node is an IIFE, continue walking up.
 * Return false if 'stopAt' node is reached or isFunctionLike(current) === true.
 */
func (c *Checker) isSameScopeDescendentOf(initial *ast.Node, parent *ast.Node, stopAt *ast.Node) bool {
	return parent != nil && findAncestor(initial, func(n *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
		return n == parent || (ifElse(n == stopAt || isFunctionLike(n) && (getImmediatelyInvokedFunctionExpression(n) == nil || (getFunctionFlags(n)&FunctionFlagsAsyncGenerator != 0)), "quit", false))
	}) != nil
}

func (c *Checker) getAnyImportSyntax(node *ast.Node) *AnyImportOrJsDocImport {
	switch node.Kind {
	case ast.KindImportEqualsDeclaration:
		return node.AsImportEqualsDeclaration()
	case ast.KindImportClause:
		return node.AsImportClause().Parent
	case ast.KindNamespaceImport:
		return node.AsNamespaceImport().Parent.Parent
	case ast.KindImportSpecifier:
		return node.AsImportSpecifier().Parent.Parent.Parent
	default:
		return nil
	}
}

func (c *Checker) getDeclarationOfAliasSymbol(symbol *ast.Symbol) Declaration {
	return symbol.Declarations && core.FindLast(symbol.Declarations, c.isAliasSymbolDeclaration)
}

/**
 * An alias symbol is created by one of the following declarations:
 * import <symbol> = ...
 * import <symbol> from ...
 * import * as <symbol> from ...
 * import { x as <symbol> } from ...
 * export { x as <symbol> } from ...
 * export * as ns <symbol> from ...
 * export = <EntityNameExpression>
 * export default <EntityNameExpression>
 * module.exports = <EntityNameExpression>
 * {<Identifier>}
 * {name: <EntityNameExpression>}
 * const { x } = require ...
 */

func (c *Checker) isAliasSymbolDeclaration(node *ast.Node) bool {
	return node.Kind == ast.KindImportEqualsDeclaration || node.Kind == ast.KindNamespaceExportDeclaration || node.Kind == ast.KindImportClause && node.AsImportClause().Name != nil || node.Kind == ast.KindNamespaceImport || node.Kind == ast.KindNamespaceExport || node.Kind == ast.KindImportSpecifier || node.Kind == ast.KindExportSpecifier || node.Kind == ast.KindExportAssignment && exportAssignmentIsAlias(node.AsExportAssignment()) || isBinaryExpression(node) && getAssignmentDeclarationKind(node) == AssignmentDeclarationKindModuleExports && exportAssignmentIsAlias(node) || isAccessExpression(node) && isBinaryExpression(node.Parent) && node.Parent.Left == node && node.Parent.OperatorToken.Kind == ast.KindEqualsToken && c.isAliasableOrJsExpression(node.Parent.Right) || node.Kind == ast.KindShorthandPropertyAssignment || node.Kind == ast.KindPropertyAssignment && c.isAliasableOrJsExpression(node.AsPropertyAssignment().Initializer) || node.Kind == ast.KindVariableDeclaration && isVariableDeclarationInitializedToBareOrAccessedRequire(node) || node.Kind == ast.KindBindingElement && isVariableDeclarationInitializedToBareOrAccessedRequire(node.Parent.Parent)
}

func (c *Checker) isAliasableOrJsExpression(e Expression) bool {
	return isAliasableExpression(e) || isFunctionExpression(e) && c.isJSConstructor(e)
}

func (c *Checker) getTargetOfImportEqualsDeclaration(node Union[ImportEqualsDeclaration, VariableDeclaration], dontResolveAlias bool) *ast.Symbol {
	commonJSPropertyAccess := c.getCommonJSPropertyAccess(node)
	if commonJSPropertyAccess != nil {
		name := getLeftmostAccessExpression(commonJSPropertyAccess.Expression).AsCallExpression().Arguments[0].AsStringLiteral()
		if isIdentifier(commonJSPropertyAccess.Name) {
			return c.resolveSymbol(c.getPropertyOfType(c.resolveExternalModuleTypeByLiteral(name), commonJSPropertyAccess.Name.EscapedText))
		} else {
			return nil
		}
	}
	if isVariableDeclaration(node) || node.ModuleReference.Kind == ast.KindExternalModuleReference {
		immediate := c.resolveExternalModuleName(node, getExternalModuleRequireArgument(node) || getExternalModuleImportEqualsDeclarationExpression(node))
		resolved := c.resolveExternalModuleSymbol(immediate)
		c.markSymbolOfAliasDeclarationIfTypeOnly(node, immediate, resolved, false /*overwriteEmpty*/)
		return resolved
	}
	resolved := c.getSymbolOfPartOfRightHandSideOfImportEquals(node.ModuleReference, dontResolveAlias)
	c.checkAndReportErrorForResolvingImportAliasToTypeOnlySymbol(node, resolved)
	return resolved
}

func (c *Checker) checkAndReportErrorForResolvingImportAliasToTypeOnlySymbol(node ImportEqualsDeclaration, resolved *ast.Symbol) {
	if c.markSymbolOfAliasDeclarationIfTypeOnly(node, nil /*immediateTarget*/, resolved, false /*overwriteEmpty*/) && !node.IsTypeOnly {
		typeOnlyDeclaration := c.getTypeOnlyAliasDeclaration(c.getSymbolOfDeclaration(node))
		isExport := typeOnlyDeclaration.Kind == ast.KindExportSpecifier || typeOnlyDeclaration.Kind == ast.KindExportDeclaration
		var message any
		if isExport {
			message = Diagnostics.An_import_alias_cannot_reference_a_declaration_that_was_exported_using_export_type
		} else {
			message = Diagnostics.An_import_alias_cannot_reference_a_declaration_that_was_imported_using_import_type
		}
		var relatedMessage any
		if isExport {
			relatedMessage = Diagnostics._0_was_exported_here
		} else {
			relatedMessage = Diagnostics._0_was_imported_here
		}

		// TODO: how to get name for export *?
		var name string
		if typeOnlyDeclaration.Kind == ast.KindExportDeclaration {
			name = "*"
		} else {
			name = moduleExportNameTextUnescaped(typeOnlyDeclaration.Name)
		}
		addRelatedInfo(c.error(node.ModuleReference, message), createDiagnosticForNode(typeOnlyDeclaration, relatedMessage, name))
	}
}

func (c *Checker) resolveExportByName(moduleSymbol *ast.Symbol, name string, sourceNode *TypeOnlyCompatibleAliasDeclaration, dontResolveAlias bool) *ast.Symbol {
	exportValue := moduleSymbol.Exports.get(InternalSymbolNameExportEquals)
	var exportSymbol *ast.Symbol
	if exportValue != nil {
		exportSymbol = c.getPropertyOfType(c.getTypeOfSymbol(exportValue), name, true /*skipObjectFunctionPropertyAugment*/)
	} else {
		exportSymbol = moduleSymbol.Exports.get(name)
	}
	resolved := c.resolveSymbol(exportSymbol, dontResolveAlias)
	c.markSymbolOfAliasDeclarationIfTypeOnly(sourceNode, exportSymbol, resolved, false /*overwriteEmpty*/)
	return resolved
}

func (c *Checker) isSyntacticDefault(node *ast.Node) bool {
	return (isExportAssignment(node) && !node.IsExportEquals) || hasSyntacticModifier(node, ast.ModifierFlagsDefault) || isExportSpecifier(node) || isNamespaceExport(node)
}

func (c *Checker) getEmitSyntaxForModuleSpecifierExpression(usage Expression) ResolutionMode {
	if isStringLiteralLike(usage) {
		return host.getEmitSyntaxForUsageLocation(getSourceFileOfNode(usage), usage)
	} else {
		return nil
	}
}

func (c *Checker) isESMFormatImportImportingCommonjsFormatFile(usageMode ResolutionMode, targetMode ResolutionMode) bool {
	return usageMode == ModuleKindESNext && targetMode == ModuleKindCommonJS
}

func (c *Checker) isOnlyImportableAsDefault(usage Expression, resolvedModule *ast.Symbol) *bool {
	// In Node.js, JSON modules don't get named exports
	if ModuleKindNode16 <= c.moduleKind && c.moduleKind <= ModuleKindNodeNext {
		usageMode := c.getEmitSyntaxForModuleSpecifierExpression(usage)
		if usageMode == ModuleKindESNext {
			if resolvedModule == nil {
				resolvedModule = c.resolveExternalModuleName(usage, usage, true /*ignoreErrors*/)
			}
			targetFile := resolvedModule && getSourceFileOfModule(resolvedModule)
			return targetFile && (isJsonSourceFile(targetFile) || getDeclarationFileExtension(targetFile.FileName) == ".d.json.ts")
		}
	}
	return false
}

func (c *Checker) canHaveSyntheticDefault(file *SourceFile, moduleSymbol *ast.Symbol, dontResolveAlias bool, usage Expression) bool {
	usageMode := file && c.getEmitSyntaxForModuleSpecifierExpression(usage)
	if file != nil && usageMode != nil {
		targetMode := host.getImpliedNodeFormatForEmit(file)
		if usageMode == ModuleKindESNext && targetMode == ModuleKindCommonJS && ModuleKindNode16 <= c.moduleKind && c.moduleKind <= ModuleKindNodeNext {
			// In Node.js, CommonJS modules always have a synthetic default when imported into ESM
			return true
		}
		if usageMode == ModuleKindESNext && targetMode == ModuleKindESNext {
			// No matter what the `module` setting is, if we're confident that both files
			// are ESM, there cannot be a synthetic default.
			return false
		}
	}
	if !c.allowSyntheticDefaultImports {
		return false
	}
	// Declaration files (and ambient modules)
	if file == nil || file.IsDeclarationFile {
		// Definitely cannot have a synthetic default if they have a syntactic default member specified
		defaultExportSymbol := c.resolveExportByName(moduleSymbol, InternalSymbolNameDefault, nil /*sourceNode*/, true /*dontResolveAlias*/)
		// Dont resolve alias because we want the immediately exported symbol's declaration
		if defaultExportSymbol != nil && core.Some(defaultExportSymbol.Declarations, c.isSyntacticDefault) {
			return false
		}
		// It _might_ still be incorrect to assume there is no __esModule marker on the import at runtime, even if there is no `default` member
		// So we check a bit more,
		if c.resolveExportByName(moduleSymbol, escapeLeadingUnderscores("__esModule"), nil /*sourceNode*/, dontResolveAlias) != nil {
			// If there is an `__esModule` specified in the declaration (meaning someone explicitly added it or wrote it in their code),
			// it definitely is a module and does not have a synthetic default
			return false
		}
		// There are _many_ declaration files not written with esmodules in mind that still get compiled into a format with __esModule set
		// Meaning there may be no default at runtime - however to be on the permissive side, we allow access to a synthetic default member
		// as there is no marker to indicate if the accompanying JS has `__esModule` or not, or is even native esm
		return true
	}
	// TypeScript files never have a synthetic default (as they are always emitted with an __esModule marker) _unless_ they contain an export= statement
	if !isSourceFileJS(file) {
		return c.hasExportAssignmentSymbol(moduleSymbol)
	}
	// JS files have a synthetic default if they do not contain ES2015+ module syntax (export = is not valid in js) _and_ do not have an __esModule marker
	return /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof file.externalModuleIndicator */ TODO != "object" && c.resolveExportByName(moduleSymbol, escapeLeadingUnderscores("__esModule"), nil /*sourceNode*/, dontResolveAlias) == nil
}

func (c *Checker) getTargetOfImportClause(node ImportClause, dontResolveAlias bool) *ast.Symbol {
	moduleSymbol := c.resolveExternalModuleName(node, node.Parent.ModuleSpecifier)
	if moduleSymbol != nil {
		return c.getTargetofModuleDefault(moduleSymbol, node, dontResolveAlias)
	}
}

func (c *Checker) getTargetofModuleDefault(moduleSymbol *ast.Symbol, node Union[ImportClause, ImportOrExportSpecifier], dontResolveAlias bool) *ast.Symbol {
	var exportDefaultSymbol *ast.Symbol
	if isShorthandAmbientModuleSymbol(moduleSymbol) {
		exportDefaultSymbol = moduleSymbol
	} else {
		exportDefaultSymbol = c.resolveExportByName(moduleSymbol, InternalSymbolNameDefault, node, dontResolveAlias)
	}

	file := moduleSymbol.Declarations. /* ? */ find(isSourceFile)
	specifier := c.getModuleSpecifierForImportOrExport(node)
	if specifier == nil {
		return exportDefaultSymbol
	}
	hasDefaultOnly := c.isOnlyImportableAsDefault(specifier, moduleSymbol)
	hasSyntheticDefault := c.canHaveSyntheticDefault(file, moduleSymbol, dontResolveAlias, specifier)
	if exportDefaultSymbol == nil && !hasSyntheticDefault && !hasDefaultOnly {
		if c.hasExportAssignmentSymbol(moduleSymbol) && !c.allowSyntheticDefaultImports {
			var compilerOptionName /* TODO(TS-TO-GO) inferred type "allowSyntheticDefaultImports" | "esModuleInterop" */ any
			if c.moduleKind >= ModuleKindES2015 {
				compilerOptionName = "allowSyntheticDefaultImports"
			} else {
				compilerOptionName = "esModuleInterop"
			}
			exportEqualsSymbol := moduleSymbol.Exports.get(InternalSymbolNameExportEquals)
			exportAssignment := exportEqualsSymbol.ValueDeclaration
			err := c.error(node.Name, Diagnostics.Module_0_can_only_be_default_imported_using_the_1_flag, c.symbolToString(moduleSymbol), compilerOptionName)

			if exportAssignment != nil {
				addRelatedInfo(err, createDiagnosticForNode(exportAssignment, Diagnostics.This_module_is_declared_with_export_and_can_only_be_used_with_a_default_import_when_using_the_0_flag, compilerOptionName))
			}
		} else if isImportClause(node) {
			c.reportNonDefaultExport(moduleSymbol, node)
		} else {
			c.errorNoModuleMemberSymbol(moduleSymbol, moduleSymbol, node, isImportOrExportSpecifier(node) && node.PropertyName || node.Name)
		}
	} else if hasSyntheticDefault || hasDefaultOnly {
		// per emit behavior, a synthetic default overrides a "real" .default member if `__esModule` is not present
		resolved := c.resolveExternalModuleSymbol(moduleSymbol, dontResolveAlias) || c.resolveSymbol(moduleSymbol, dontResolveAlias)
		c.markSymbolOfAliasDeclarationIfTypeOnly(node, moduleSymbol, resolved, false /*overwriteEmpty*/)
		return resolved
	}
	c.markSymbolOfAliasDeclarationIfTypeOnly(node, exportDefaultSymbol, nil /*finalTarget*/, false /*overwriteEmpty*/)
	return exportDefaultSymbol
}

func (c *Checker) getModuleSpecifierForImportOrExport(node Union[ImportEqualsDeclaration, ImportClause, NamespaceImport, ImportOrExportSpecifier]) Expression {
	switch node.Kind {
	case ast.KindImportClause:
		return node.Parent.ModuleSpecifier
	case ast.KindImportEqualsDeclaration:
		if isExternalModuleReference(node.ModuleReference) {
			return node.ModuleReference.Expression
		} else {
			return nil
		}
	case ast.KindNamespaceImport:
		return node.Parent.Parent.ModuleSpecifier
	case ast.KindImportSpecifier:
		return node.Parent.Parent.Parent.ModuleSpecifier
	case ast.KindExportSpecifier:
		return node.Parent.Parent.ModuleSpecifier
	default:
		return Debug.assertNever(node)
	}
}

func (c *Checker) reportNonDefaultExport(moduleSymbol *ast.Symbol, node ImportClause) {
	if moduleSymbol.Exports. /* ? */ has(node.Symbol.EscapedName) {
		c.error(node.Name, Diagnostics.Module_0_has_no_default_export_Did_you_mean_to_use_import_1_from_0_instead, c.symbolToString(moduleSymbol), c.symbolToString(node.Symbol))
	} else {
		diagnostic := c.error(node.Name, Diagnostics.Module_0_has_no_default_export, c.symbolToString(moduleSymbol))
		exportStar := moduleSymbol.Exports. /* ? */ get(InternalSymbolNameExportStar)
		if exportStar != nil {
			defaultExport := exportStar.Declarations. /* ? */ find(func(decl Declaration) bool {
				return isExportDeclaration(decl) && decl.ModuleSpecifier != nil && c.resolveExternalModuleName(decl, decl.ModuleSpecifier). /* ? */ exports. /* ? */ has(InternalSymbolNameDefault)
			})
			if defaultExport != nil {
				addRelatedInfo(diagnostic, createDiagnosticForNode(defaultExport, Diagnostics.export_Asterisk_does_not_re_export_a_default))
			}
		}
	}
}

func (c *Checker) getTargetOfNamespaceImport(node NamespaceImport, dontResolveAlias bool) *ast.Symbol {
	moduleSpecifier := node.Parent.Parent.ModuleSpecifier
	immediate := c.resolveExternalModuleName(node, moduleSpecifier)
	resolved := c.resolveESModuleSymbol(immediate, moduleSpecifier, dontResolveAlias, false /*suppressInteropError*/)
	c.markSymbolOfAliasDeclarationIfTypeOnly(node, immediate, resolved, false /*overwriteEmpty*/)
	return resolved
}

func (c *Checker) getTargetOfNamespaceExport(node NamespaceExport, dontResolveAlias bool) *ast.Symbol {
	moduleSpecifier := node.Parent.ModuleSpecifier
	immediate := moduleSpecifier && c.resolveExternalModuleName(node, moduleSpecifier)
	resolved := moduleSpecifier && c.resolveESModuleSymbol(immediate, moduleSpecifier, dontResolveAlias, false /*suppressInteropError*/)
	c.markSymbolOfAliasDeclarationIfTypeOnly(node, immediate, resolved, false /*overwriteEmpty*/)
	return resolved
}

// This function creates a synthetic symbol that combines the value side of one symbol with the
// type/namespace side of another symbol. Consider this example:
//
//	declare module graphics {
//	    interface Point {
//	        x: number;
//	        y: number;
//	    }
//	}
//	declare var graphics: {
//	    Point: new (x: number, y: number) => graphics.Point;
//	}
//	declare module "graphics" {
//	    export = graphics;
//	}
//
// An 'import { Point } from "graphics"' needs to create a symbol that combines the value side 'Point'
// property with the type/namespace side interface 'Point'.
func (c *Checker) combineValueAndTypeSymbols(valueSymbol *ast.Symbol, typeSymbol *ast.Symbol) *ast.Symbol {
	if valueSymbol == c.unknownSymbol && typeSymbol == c.unknownSymbol {
		return c.unknownSymbol
	}
	if valueSymbol.Flags&(ast.SymbolFlagsType|ast.SymbolFlagsNamespace) != 0 {
		return valueSymbol
	}
	result := c.createSymbol(valueSymbol.Flags|typeSymbol.Flags, valueSymbol.EscapedName)
	Debug.assert(valueSymbol.Declarations || typeSymbol.Declarations)
	result.Declarations = deduplicate(core.Concatenate(valueSymbol.Declarations, typeSymbol.Declarations), equateValues)
	result.Parent = valueSymbol.Parent || typeSymbol.Parent
	if valueSymbol.ValueDeclaration != nil {
		result.ValueDeclaration = valueSymbol.ValueDeclaration
	}
	if typeSymbol.Members != nil {
		result.Members = NewMap(typeSymbol.Members)
	}
	if valueSymbol.Exports != nil {
		result.Exports = NewMap(valueSymbol.Exports)
	}
	return result
}

func (c *Checker) getExportOfModule(symbol *ast.Symbol, nameText string, specifier Declaration, dontResolveAlias bool) *ast.Symbol {
	if symbol.Flags&ast.SymbolFlagsModule != 0 {
		exportSymbol := c.getExportsOfSymbol(symbol).get(nameText)
		resolved := c.resolveSymbol(exportSymbol, dontResolveAlias)
		exportStarDeclaration := c.getSymbolLinks(symbol).typeOnlyExportStarMap. /* ? */ get(nameText)
		c.markSymbolOfAliasDeclarationIfTypeOnly(specifier, exportSymbol, resolved, false /*overwriteEmpty*/, exportStarDeclaration, nameText)
		return resolved
	}
}

func (c *Checker) getPropertyOfVariable(symbol *ast.Symbol, name string) *ast.Symbol {
	if symbol.Flags&ast.SymbolFlagsVariable != 0 {
		typeAnnotation := symbol.ValueDeclaration.AsVariableDeclaration().Type_
		if typeAnnotation != nil {
			return c.resolveSymbol(c.getPropertyOfType(c.getTypeFromTypeNode(typeAnnotation), name))
		}
	}
}

func (c *Checker) getExternalModuleMember(node Union[ImportDeclaration, ExportDeclaration, VariableDeclaration, JSDocImportTag], specifier Union[ImportOrExportSpecifier, BindingElement, PropertyAccessExpression], dontResolveAlias bool /*  = false */) *ast.Symbol {
	moduleSpecifier := getExternalModuleRequireArgument(node) || (node /* as ImportDeclaration | ExportDeclaration | JSDocImportTag */).ModuleSpecifier
	moduleSymbol := c.resolveExternalModuleName(node, moduleSpecifier)
	// TODO: GH#18217
	name := !isPropertyAccessExpression(specifier) && specifier.PropertyName || specifier.Name
	if !isIdentifier(name) && name.Kind != ast.KindStringLiteral {
		return nil
	}
	nameText := moduleExportNameTextEscaped(name)
	suppressInteropError := nameText == InternalSymbolNameDefault && c.allowSyntheticDefaultImports
	targetSymbol := c.resolveESModuleSymbol(moduleSymbol, moduleSpecifier, false /*dontResolveAlias*/, suppressInteropError)
	if targetSymbol != nil {
		// Note: The empty string is a valid module export name:
		//
		//   import { "" as foo } from "./foo";
		//   export { foo as "" };
		//
		if nameText || name.Kind == ast.KindStringLiteral {
			if isShorthandAmbientModuleSymbol(moduleSymbol) {
				return moduleSymbol
			}

			var symbolFromVariable *ast.Symbol
			// First check if module was specified with "export=". If so, get the member from the resolved type
			if moduleSymbol && moduleSymbol.Exports != nil && moduleSymbol.Exports.get(InternalSymbolNameExportEquals) != nil {
				symbolFromVariable = c.getPropertyOfType(c.getTypeOfSymbol(targetSymbol), nameText, true /*skipObjectFunctionPropertyAugment*/)
			} else {
				symbolFromVariable = c.getPropertyOfVariable(targetSymbol, nameText)
			}
			// if symbolFromVariable is export - get its final target
			symbolFromVariable = c.resolveSymbol(symbolFromVariable, dontResolveAlias)

			symbolFromModule := c.getExportOfModule(targetSymbol, nameText, specifier, dontResolveAlias)
			if symbolFromModule == nil && nameText == InternalSymbolNameDefault {
				file := moduleSymbol.Declarations. /* ? */ find(isSourceFile)
				if c.isOnlyImportableAsDefault(moduleSpecifier, moduleSymbol) || c.canHaveSyntheticDefault(file, moduleSymbol, dontResolveAlias, moduleSpecifier) {
					symbolFromModule = c.resolveExternalModuleSymbol(moduleSymbol, dontResolveAlias) || c.resolveSymbol(moduleSymbol, dontResolveAlias)
				}
			}

			var symbol *ast.Symbol
			if symbolFromModule != nil && symbolFromVariable != nil && symbolFromModule != symbolFromVariable {
				symbol = c.combineValueAndTypeSymbols(symbolFromVariable, symbolFromModule)
			} else {
				symbol = symbolFromModule || symbolFromVariable
			}

			if isImportOrExportSpecifier(specifier) && c.isOnlyImportableAsDefault(moduleSpecifier, moduleSymbol) && nameText != InternalSymbolNameDefault {
				c.error(name, Diagnostics.Named_imports_from_a_JSON_file_into_an_ECMAScript_module_are_not_allowed_when_module_is_set_to_0, ModuleKind[c.moduleKind])
			} else if symbol == nil {
				c.errorNoModuleMemberSymbol(moduleSymbol, targetSymbol, node, name)
			}
			return symbol
		}
	}
}

func (c *Checker) errorNoModuleMemberSymbol(moduleSymbol *ast.Symbol, targetSymbol *ast.Symbol, node *ast.Node, name ModuleExportName) {
	moduleName := c.getFullyQualifiedName(moduleSymbol, node)
	declarationName := declarationNameToString(name)
	var suggestion *ast.Symbol
	if isIdentifier(name) {
		suggestion = c.getSuggestedSymbolForNonexistentModule(name, targetSymbol)
	} else {
		suggestion = nil
	}
	if suggestion != nil {
		suggestionName := c.symbolToString(suggestion)
		diagnostic := c.error(name, Diagnostics._0_has_no_exported_member_named_1_Did_you_mean_2, moduleName, declarationName, suggestionName)
		if suggestion.ValueDeclaration != nil {
			addRelatedInfo(diagnostic, createDiagnosticForNode(suggestion.ValueDeclaration, Diagnostics._0_is_declared_here, suggestionName))
		}
	} else {
		if moduleSymbol.Exports. /* ? */ has(InternalSymbolNameDefault) {
			c.error(name, Diagnostics.Module_0_has_no_exported_member_1_Did_you_mean_to_use_import_1_from_0_instead, moduleName, declarationName)
		} else {
			c.reportNonExportedMember(node, name, declarationName, moduleSymbol, moduleName)
		}
	}
}

func (c *Checker) reportNonExportedMember(node *ast.Node, name ModuleExportName, declarationName string, moduleSymbol *ast.Symbol, moduleName string) {
	localSymbol := tryCast(moduleSymbol.ValueDeclaration, canHaveLocals). /* ? */ locals. /* ? */ get(moduleExportNameTextEscaped(name))
	exports := moduleSymbol.Exports
	if localSymbol != nil {
		exportedEqualsSymbol := exports. /* ? */ get(InternalSymbolNameExportEquals)
		if exportedEqualsSymbol != nil {
			ifElse(c.getSymbolIfSameReference(exportedEqualsSymbol, localSymbol) != nil, c.reportInvalidImportEqualsExportMember(node, name, declarationName, moduleName), c.error(name, Diagnostics.Module_0_has_no_exported_member_1, moduleName, declarationName))
		} else {
			var exportedSymbol *ast.Symbol
			if exports != nil {
				exportedSymbol = core.Find(c.symbolsToArray(exports), func(symbol *ast.Symbol) bool {
					return c.getSymbolIfSameReference(symbol, localSymbol) != nil
				})
			} else {
				exportedSymbol = nil
			}
			var diagnostic Diagnostic
			if exportedSymbol != nil {
				diagnostic = c.error(name, Diagnostics.Module_0_declares_1_locally_but_it_is_exported_as_2, moduleName, declarationName, c.symbolToString(exportedSymbol))
			} else {
				diagnostic = c.error(name, Diagnostics.Module_0_declares_1_locally_but_it_is_not_exported, moduleName, declarationName)
			}
			if localSymbol.Declarations != nil {
				addRelatedInfo(diagnostic, core.Map(localSymbol.Declarations, func(decl Declaration, index number) DiagnosticWithLocation {
					return createDiagnosticForNode(decl, ifElse(index == 0, Diagnostics._0_is_declared_here, Diagnostics.and_here), declarationName)
				})...)
			}
		}
	} else {
		c.error(name, Diagnostics.Module_0_has_no_exported_member_1, moduleName, declarationName)
	}
}

func (c *Checker) reportInvalidImportEqualsExportMember(node *ast.Node, name ModuleExportName, declarationName string, moduleName string) {
	if c.moduleKind >= ModuleKindES2015 {
		var message any
		if getESModuleInterop(c.compilerOptions) {
			message = Diagnostics._0_can_only_be_imported_by_using_a_default_import
		} else {
			message = Diagnostics._0_can_only_be_imported_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import
		}
		c.error(name, message, declarationName)
	} else {
		if isInJSFile(node) {
			var message any
			if getESModuleInterop(c.compilerOptions) {
				message = Diagnostics._0_can_only_be_imported_by_using_a_require_call_or_by_using_a_default_import
			} else {
				message = Diagnostics._0_can_only_be_imported_by_using_a_require_call_or_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import
			}
			c.error(name, message, declarationName)
		} else {
			var message any
			if getESModuleInterop(c.compilerOptions) {
				message = Diagnostics._0_can_only_be_imported_by_using_import_1_require_2_or_a_default_import
			} else {
				message = Diagnostics._0_can_only_be_imported_by_using_import_1_require_2_or_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import
			}
			c.error(name, message, declarationName, declarationName, moduleName)
		}
	}
}

func (c *Checker) getTargetOfImportSpecifier(node Union[ImportSpecifier, BindingElement], dontResolveAlias bool) *ast.Symbol {
	if isImportSpecifier(node) && moduleExportNameIsDefault(node.PropertyName || node.Name) {
		specifier := c.getModuleSpecifierForImportOrExport(node)
		moduleSymbol := specifier && c.resolveExternalModuleName(node, specifier)
		if moduleSymbol != nil {
			return c.getTargetofModuleDefault(moduleSymbol, node, dontResolveAlias)
		}
	}
	var root /* TODO(TS-TO-GO) inferred type VariableDeclaration | ImportDeclaration | JSDocImportTag */ any
	if isBindingElement(node) {
		root = getRootDeclaration(node).AsVariableDeclaration()
	} else {
		root = node.Parent.Parent.Parent
	}
	commonJSPropertyAccess := c.getCommonJSPropertyAccess(root)
	resolved := c.getExternalModuleMember(root, commonJSPropertyAccess || node, dontResolveAlias)
	name := node.PropertyName || node.Name
	if commonJSPropertyAccess != nil && resolved != nil && isIdentifier(name) {
		return c.resolveSymbol(c.getPropertyOfType(c.getTypeOfSymbol(resolved), name.EscapedText), dontResolveAlias)
	}
	c.markSymbolOfAliasDeclarationIfTypeOnly(node, nil /*immediateTarget*/, resolved, false /*overwriteEmpty*/)
	return resolved
}

func (c *Checker) getCommonJSPropertyAccess(node *ast.Node) *PropertyAccessExpression {
	if isVariableDeclaration(node) && node.Initializer != nil && isPropertyAccessExpression(node.Initializer) {
		return node.Initializer
	}
}

func (c *Checker) getTargetOfNamespaceExportDeclaration(node NamespaceExportDeclaration, dontResolveAlias bool) *ast.Symbol {
	if canHaveSymbol(node.Parent) {
		resolved := c.resolveExternalModuleSymbol(node.Parent.Symbol, dontResolveAlias)
		c.markSymbolOfAliasDeclarationIfTypeOnly(node, nil /*immediateTarget*/, resolved, false /*overwriteEmpty*/)
		return resolved
	}
}

func (c *Checker) getTargetOfExportSpecifier(node ExportSpecifier, meaning SymbolFlags, dontResolveAlias bool) *ast.Symbol {
	name := node.PropertyName || node.Name
	if moduleExportNameIsDefault(name) {
		specifier := c.getModuleSpecifierForImportOrExport(node)
		moduleSymbol := specifier && c.resolveExternalModuleName(node, specifier)
		if moduleSymbol != nil {
			return c.getTargetofModuleDefault(moduleSymbol, node, dontResolveAlias)
		}
	}
	var resolved *ast.Symbol
	switch {
	case node.Parent.Parent.ModuleSpecifier != nil:
		resolved = c.getExternalModuleMember(node.Parent.Parent, node, dontResolveAlias)
	case name.Kind == ast.KindStringLiteral:
		resolved = nil
	default:
		resolved = c.resolveEntityName(name, meaning, false /*ignoreErrors*/, dontResolveAlias)
	}
	c.markSymbolOfAliasDeclarationIfTypeOnly(node, nil /*immediateTarget*/, resolved, false /*overwriteEmpty*/)
	return resolved
}

func (c *Checker) getTargetOfExportAssignment(node Union[ExportAssignment, BinaryExpression], dontResolveAlias bool) *ast.Symbol {
	var expression Expression
	if isExportAssignment(node) {
		expression = node.Expression
	} else {
		expression = node.Right
	}
	resolved := c.getTargetOfAliasLikeExpression(expression, dontResolveAlias)
	c.markSymbolOfAliasDeclarationIfTypeOnly(node, nil /*immediateTarget*/, resolved, false /*overwriteEmpty*/)
	return resolved
}

func (c *Checker) getTargetOfAliasLikeExpression(expression Expression, dontResolveAlias bool) *ast.Symbol {
	if isClassExpression(expression) {
		return c.checkExpressionCached(expression).symbol
	}
	if !isEntityName(expression) && !isEntityNameExpression(expression) {
		return nil
	}
	aliasLike := c.resolveEntityName(expression, ast.SymbolFlagsValue|ast.SymbolFlagsType|ast.SymbolFlagsNamespace, true /*ignoreErrors*/, dontResolveAlias)
	if aliasLike != nil {
		return aliasLike
	}
	c.checkExpressionCached(expression)
	return c.getNodeLinks(expression).resolvedSymbol
}

func (c *Checker) getTargetOfAccessExpression(node AccessExpression, dontRecursivelyResolve bool) *ast.Symbol {
	if !(isBinaryExpression(node.Parent) && node.Parent.Left == node && node.Parent.OperatorToken.Kind == ast.KindEqualsToken) {
		return nil
	}

	return c.getTargetOfAliasLikeExpression(node.Parent.Right, dontRecursivelyResolve)
}

func (c *Checker) getTargetOfAliasDeclaration(node Declaration, dontRecursivelyResolve bool /*  = false */) *ast.Symbol {
	switch node.Kind {
	case ast.KindImportEqualsDeclaration,
		ast.KindVariableDeclaration:
		return c.getTargetOfImportEqualsDeclaration(node /* as ImportEqualsDeclaration | VariableDeclaration */, dontRecursivelyResolve)
	case ast.KindImportClause:
		return c.getTargetOfImportClause(node.AsImportClause(), dontRecursivelyResolve)
	case ast.KindNamespaceImport:
		return c.getTargetOfNamespaceImport(node.AsNamespaceImport(), dontRecursivelyResolve)
	case ast.KindNamespaceExport:
		return c.getTargetOfNamespaceExport(node.AsNamespaceExport(), dontRecursivelyResolve)
	case ast.KindImportSpecifier,
		ast.KindBindingElement:
		return c.getTargetOfImportSpecifier(node /* as ImportSpecifier | BindingElement */, dontRecursivelyResolve)
	case ast.KindExportSpecifier:
		return c.getTargetOfExportSpecifier(node.AsExportSpecifier(), ast.SymbolFlagsValue|ast.SymbolFlagsType|ast.SymbolFlagsNamespace, dontRecursivelyResolve)
	case ast.KindExportAssignment,
		ast.KindBinaryExpression:
		return c.getTargetOfExportAssignment(node /* as ExportAssignment | BinaryExpression */, dontRecursivelyResolve)
	case ast.KindNamespaceExportDeclaration:
		return c.getTargetOfNamespaceExportDeclaration(node.AsNamespaceExportDeclaration(), dontRecursivelyResolve)
	case ast.KindShorthandPropertyAssignment:
		return c.resolveEntityName(node.AsShorthandPropertyAssignment().Name, ast.SymbolFlagsValue|ast.SymbolFlagsType|ast.SymbolFlagsNamespace, true /*ignoreErrors*/, dontRecursivelyResolve)
	case ast.KindPropertyAssignment:
		return c.getTargetOfAliasLikeExpression(node.AsPropertyAssignment().Initializer, dontRecursivelyResolve)
	case ast.KindElementAccessExpression,
		ast.KindPropertyAccessExpression:
		return c.getTargetOfAccessExpression(node.AsAccessExpression(), dontRecursivelyResolve)
	default:
		return Debug.fail()
	}
}

/**
 * Indicates that a symbol is an alias that does not merge with a local declaration.
 * OR Is a JSContainer which may merge an alias with a local declaration
 */

func (c *Checker) isNonLocalAlias(symbol *ast.Symbol, excludes number /*  = SymbolFlags.Value | SymbolFlags.Type | SymbolFlags.Namespace */) bool {
	if symbol == nil {
		return false
	}
	return (symbol.Flags&(ast.SymbolFlagsAlias|excludes)) == ast.SymbolFlagsAlias || symbol.Flags&ast.SymbolFlagsAlias != 0 && symbol.Flags&ast.SymbolFlagsAssignment != 0
}

/* OVERLOAD: function resolveSymbol(symbol: Symbol, dontResolveAlias?: boolean): Symbol; */
/* OVERLOAD: function resolveSymbol(symbol: Symbol | undefined, dontResolveAlias?: boolean): Symbol | undefined; */
func (c *Checker) resolveSymbol(symbol *ast.Symbol, dontResolveAlias bool) *ast.Symbol {
	if !dontResolveAlias && c.isNonLocalAlias(symbol) {
		return c.resolveAlias(symbol)
	} else {
		return symbol
	}
}

func (c *Checker) resolveAlias(symbol *ast.Symbol) *ast.Symbol {
	Debug.assert((symbol.Flags&ast.SymbolFlagsAlias) != 0, "Should only get Alias here.")
	links := c.getSymbolLinks(symbol)
	if links.aliasTarget == nil {
		links.aliasTarget = c.resolvingSymbol
		node := c.getDeclarationOfAliasSymbol(symbol)
		if node == nil {
			return Debug.fail()
		}
		target := c.getTargetOfAliasDeclaration(node)
		if links.aliasTarget == c.resolvingSymbol {
			links.aliasTarget = target || c.unknownSymbol
		} else {
			c.error(node, Diagnostics.Circular_definition_of_import_alias_0, c.symbolToString(symbol))
		}
	} else if links.aliasTarget == c.resolvingSymbol {
		links.aliasTarget = c.unknownSymbol
	}
	return links.aliasTarget
}

func (c *Checker) tryResolveAlias(symbol *ast.Symbol) *ast.Symbol {
	links := c.getSymbolLinks(symbol)
	if links.aliasTarget != c.resolvingSymbol {
		return c.resolveAlias(symbol)
	}

	return nil
}

/**
 * Gets combined flags of a `symbol` and all alias targets it resolves to. `resolveAlias`
 * is typically recursive over chains of aliases, but stops mid-chain if an alias is merged
 * with another exported symbol, e.g.
 * ```ts
 * // a.ts
 * export const a = 0;
 * // b.ts
 * export { a } from "./a";
 * export type a = number;
 * // c.ts
 * import { a } from "./b";
 * ```
 * Calling `resolveAlias` on the `a` in c.ts would stop at the merged symbol exported
 * from b.ts, even though there is still more alias to resolve. Consequently, if we were
 * trying to determine if the `a` in c.ts has a value meaning, looking at the flags on
 * the local symbol and on the symbol returned by `resolveAlias` is not enough.
 * @returns SymbolFlags.All if `symbol` is an alias that ultimately resolves to `unknown`;
 * combined flags of all alias targets otherwise.
 */

func (c *Checker) getSymbolFlags(symbol *ast.Symbol, excludeTypeOnlyMeanings bool, excludeLocalMeanings bool) SymbolFlags {
	typeOnlyDeclaration := excludeTypeOnlyMeanings && c.getTypeOnlyAliasDeclaration(symbol)
	typeOnlyDeclarationIsExportStar := typeOnlyDeclaration && isExportDeclaration(typeOnlyDeclaration)
	typeOnlyResolution := typeOnlyDeclaration && (ifElse(typeOnlyDeclarationIsExportStar, c.resolveExternalModuleName(typeOnlyDeclaration.ModuleSpecifier, typeOnlyDeclaration.ModuleSpecifier, true /*ignoreErrors*/), c.resolveAlias(typeOnlyDeclaration.Symbol)))
	var typeOnlyExportStarTargets *SymbolTable
	if typeOnlyDeclarationIsExportStar && typeOnlyResolution {
		typeOnlyExportStarTargets = c.getExportsOfModule(typeOnlyResolution)
	} else {
		typeOnlyExportStarTargets = nil
	}
	var flags SymbolFlags
	if excludeLocalMeanings {
		flags = ast.SymbolFlagsNone
	} else {
		flags = symbol.Flags
	}
	var seenSymbols TODO
	for symbol.Flags&ast.SymbolFlagsAlias != 0 {
		target := c.getExportSymbolOfValueSymbolIfExported(c.resolveAlias(symbol))
		if !typeOnlyDeclarationIsExportStar && target == typeOnlyResolution || typeOnlyExportStarTargets. /* ? */ get(target.EscapedName) == target {
			break
		}
		if target == c.unknownSymbol {
			return ast.SymbolFlagsAll
		}

		// Optimizations - try to avoid creating or adding to
		// `seenSymbols` if possible
		if target == symbol || seenSymbols. /* ? */ has(target) {
			break
		}
		if target.Flags&ast.SymbolFlagsAlias != 0 {
			if seenSymbols != nil {
				seenSymbols.add(target)
			} else {
				seenSymbols = NewSet([]*ast.Symbol{symbol, target})
			}
		}
		flags |= target.Flags
		symbol = target
	}
	return flags
}

/**
 * Marks a symbol as type-only if its declaration is syntactically type-only.
 * If it is not itself marked type-only, but resolves to a type-only alias
 * somewhere in its resolution chain, save a reference to the type-only alias declaration
 * so the alias _not_ marked type-only can be identified as _transitively_ type-only.
 *
 * This function is called on each alias declaration that could be type-only or resolve to
 * another type-only alias during `resolveAlias`, so that later, when an alias is used in a
 * JS-emitting expression, we can quickly determine if that symbol is effectively type-only
 * and issue an error if so.
 *
 * @param aliasDeclaration The alias declaration not marked as type-only
 * @param immediateTarget The symbol to which the alias declaration immediately resolves
 * @param finalTarget The symbol to which the alias declaration ultimately resolves
 * @param overwriteEmpty Checks `resolvesToSymbol` for type-only declarations even if `aliasDeclaration`
 * has already been marked as not resolving to a type-only alias. Used when recursively resolving qualified
 * names of import aliases, e.g. `import C = a.b.C`. If namespace `a` is not found to be type-only, the
 * import declaration will initially be marked as not resolving to a type-only symbol. But, namespace `b`
 * must still be checked for a type-only marker, overwriting the previous negative result if found.
 */

func (c *Checker) markSymbolOfAliasDeclarationIfTypeOnly(aliasDeclaration Declaration, immediateTarget *ast.Symbol, finalTarget *ast.Symbol, overwriteEmpty bool, exportStarDeclaration Intersection[ExportDeclaration /* TODO(TS-TO-GO) TypeNode TypeLiteral: { readonly isTypeOnly: true; readonly moduleSpecifier: Expression; } */, any], exportStarName string) bool {
	if aliasDeclaration == nil || isPropertyAccessExpression(aliasDeclaration) {
		return false
	}

	// If the declaration itself is type-only, mark it and return.
	// No need to check what it resolves to.
	sourceSymbol := c.getSymbolOfDeclaration(aliasDeclaration)
	if isTypeOnlyImportOrExportDeclaration(aliasDeclaration) {
		links := c.getSymbolLinks(sourceSymbol)
		links.typeOnlyDeclaration = aliasDeclaration
		return true
	}
	if exportStarDeclaration != nil {
		links := c.getSymbolLinks(sourceSymbol)
		links.typeOnlyDeclaration = exportStarDeclaration
		if sourceSymbol.EscapedName != exportStarName {
			links.typeOnlyExportStarName = exportStarName
		}
		return true
	}

	links := c.getSymbolLinks(sourceSymbol)
	return c.markSymbolOfAliasDeclarationIfTypeOnlyWorker(links, immediateTarget, overwriteEmpty) || c.markSymbolOfAliasDeclarationIfTypeOnlyWorker(links, finalTarget, overwriteEmpty)
}

func (c *Checker) markSymbolOfAliasDeclarationIfTypeOnlyWorker(aliasDeclarationLinks SymbolLinks, target *ast.Symbol, overwriteEmpty bool) bool {
	if target != nil && (aliasDeclarationLinks.typeOnlyDeclaration == nil || overwriteEmpty && aliasDeclarationLinks.typeOnlyDeclaration == false) {
		exportSymbol := ifNotNilElse(target.Exports. /* ? */ get(InternalSymbolNameExportEquals), target)
		typeOnly := exportSymbol.Declarations && core.Find(exportSymbol.Declarations, isTypeOnlyImportOrExportDeclaration)
		aliasDeclarationLinks.typeOnlyDeclaration = ifNotNilElse(ifNotNilElse(typeOnly, c.getSymbolLinks(exportSymbol).typeOnlyDeclaration), false)
	}
	return aliasDeclarationLinks.typeOnlyDeclaration
}

/** Indicates that a symbol directly or indirectly resolves to a type-only import or export. */

func (c *Checker) getTypeOnlyAliasDeclaration(symbol *ast.Symbol, include SymbolFlags) *TypeOnlyAliasDeclaration {
	if symbol.Flags&ast.SymbolFlagsAlias == 0 {
		return nil
	}
	links := c.getSymbolLinks(symbol)
	if links.typeOnlyDeclaration == nil {
		// We need to set a WIP value here to prevent reentrancy during `getImmediateAliasedSymbol` which, paradoxically, can depend on this
		links.typeOnlyDeclaration = false
		resolved := c.resolveSymbol(symbol)
		// While usually the alias will have been marked during the pass by the full typecheck, we may still need to calculate the alias declaration now
		c.markSymbolOfAliasDeclarationIfTypeOnly(symbol.Declarations[0], c.getDeclarationOfAliasSymbol(symbol) && c.getImmediateAliasedSymbol(symbol), resolved, true /*overwriteEmpty*/)
	}
	if include == nil {
		return links.typeOnlyDeclaration || nil
	}
	if links.typeOnlyDeclaration {
		var resolved *ast.Symbol
		if links.typeOnlyDeclaration.Kind == ast.KindExportDeclaration {
			resolved = c.resolveSymbol(c.getExportsOfModule(links.typeOnlyDeclaration.Symbol.Parent).get(links.typeOnlyExportStarName || symbol.EscapedName))
		} else {
			resolved = c.resolveAlias(links.typeOnlyDeclaration.Symbol)
		}
		if c.getSymbolFlags(resolved)&include != 0 {
			return links.typeOnlyDeclaration
		} else {
			return nil
		}
	}
	return nil
}

// This function is only for imports with entity names
func (c *Checker) getSymbolOfPartOfRightHandSideOfImportEquals(entityName EntityName, dontResolveAlias bool) *ast.Symbol {
	// There are three things we might try to look for. In the following examples,
	// the search term is enclosed in |...|:
	//
	//     import a = |b|; // Namespace
	//     import a = |b.c|; // Value, type, namespace
	//     import a = |b.c|.d; // Namespace
	if entityName.Kind == ast.KindIdentifier && isRightSideOfQualifiedNameOrPropertyAccess(entityName) {
		entityName = entityName.Parent.AsQualifiedName()
	}
	// Check for case 1 and 3 in the above example
	if entityName.Kind == ast.KindIdentifier || entityName.Parent.Kind == ast.KindQualifiedName {
		return c.resolveEntityName(entityName, ast.SymbolFlagsNamespace, false /*ignoreErrors*/, dontResolveAlias)
	} else {
		// Case 2 in above example
		// entityName.kind could be a QualifiedName or a Missing identifier
		Debug.assert(entityName.Parent.Kind == ast.KindImportEqualsDeclaration)
		return c.resolveEntityName(entityName, ast.SymbolFlagsValue|ast.SymbolFlagsType|ast.SymbolFlagsNamespace, false /*ignoreErrors*/, dontResolveAlias)
	}
}

func (c *Checker) getFullyQualifiedName(symbol *ast.Symbol, containingLocation *ast.Node) string {
	if symbol.Parent != nil {
		return c.getFullyQualifiedName(symbol.Parent, containingLocation) + "." + c.symbolToString(symbol)
	} else {
		return c.symbolToString(symbol, containingLocation, nil /*meaning*/, SymbolFormatFlagsDoNotIncludeSymbolChain|SymbolFormatFlagsAllowAnyNodeKind)
	}
}

func (c *Checker) getContainingQualifiedNameNode(node QualifiedName) QualifiedName {
	for isQualifiedName(node.Parent) {
		node = node.Parent
	}
	return node
}

func (c *Checker) tryGetQualifiedNameAsValue(node QualifiedName) *ast.Symbol {
	var left Union[Identifier, QualifiedName] = getFirstIdentifier(node)
	symbol := c.resolveName(left, left, ast.SymbolFlagsValue, nil /*nameNotFoundMessage*/, true /*isUse*/)
	if symbol == nil {
		return nil
	}
	for isQualifiedName(left.Parent) {
		t := c.getTypeOfSymbol(symbol)
		symbol = c.getPropertyOfType(t, left.Parent.Right.EscapedText)
		if symbol == nil {
			return nil
		}
		left = left.Parent
	}
	return symbol
}

/**
 * Resolves a qualified name and any involved aliases.
 */

func (c *Checker) resolveEntityName(name EntityNameOrEntityNameExpression, meaning SymbolFlags, ignoreErrors bool, dontResolveAlias bool, location *ast.Node) *ast.Symbol {
	if nodeIsMissing(name) {
		return nil
	}

	namespaceMeaning := ast.SymbolFlagsNamespace | (ifElse(isInJSFile(name), meaning&ast.SymbolFlagsValue, 0))
	var symbol *ast.Symbol
	if name.Kind == ast.KindIdentifier {
		var message any
		if meaning == namespaceMeaning || nodeIsSynthesized(name) {
			message = Diagnostics.Cannot_find_namespace_0
		} else {
			message = c.getCannotFindNameDiagnosticForName(getFirstIdentifier(name))
		}
		var symbolFromJSPrototype *ast.Symbol
		if isInJSFile(name) && !nodeIsSynthesized(name) {
			symbolFromJSPrototype = c.resolveEntityNameFromAssignmentDeclaration(name, meaning)
		} else {
			symbolFromJSPrototype = nil
		}
		symbol = c.getMergedSymbol(c.resolveName(location || name, name, meaning, ifElse(ignoreErrors || symbolFromJSPrototype != nil, nil, message), true /*isUse*/, false /*excludeGlobals*/))
		if symbol == nil {
			return c.getMergedSymbol(symbolFromJSPrototype)
		}
	} else if name.Kind == ast.KindQualifiedName || name.Kind == ast.KindPropertyAccessExpression {
		var left /* TODO(TS-TO-GO) inferred type Identifier | QualifiedName | PropertyAccessEntityNameExpression */ any
		if name.Kind == ast.KindQualifiedName {
			left = name.Left
		} else {
			left = name.Expression
		}
		var right Identifier
		if name.Kind == ast.KindQualifiedName {
			right = name.Right
		} else {
			right = name.Name
		}
		namespace := c.resolveEntityName(left, namespaceMeaning, ignoreErrors, false /*dontResolveAlias*/, location)
		if namespace == nil || nodeIsMissing(right) {
			return nil
		} else if namespace == c.unknownSymbol {
			return namespace
		}
		if namespace.ValueDeclaration != nil && isInJSFile(namespace.ValueDeclaration) && getEmitModuleResolutionKind(c.compilerOptions) != ModuleResolutionKindBundler && isVariableDeclaration(namespace.ValueDeclaration) && namespace.ValueDeclaration.Initializer != nil && c.isCommonJsRequire(namespace.ValueDeclaration.Initializer) {
			moduleName := namespace.ValueDeclaration.Initializer.AsCallExpression().Arguments[0].AsStringLiteral()
			moduleSym := c.resolveExternalModuleName(moduleName, moduleName)
			if moduleSym != nil {
				resolvedModuleSymbol := c.resolveExternalModuleSymbol(moduleSym)
				if resolvedModuleSymbol {
					namespace = resolvedModuleSymbol
				}
			}
		}
		symbol = c.getMergedSymbol(c.getSymbol(c.getExportsOfSymbol(namespace), right.EscapedText, meaning))
		if symbol == nil && (namespace.Flags&ast.SymbolFlagsAlias != 0) {
			// `namespace` can be resolved further if there was a symbol merge with a re-export
			symbol = c.getMergedSymbol(c.getSymbol(c.getExportsOfSymbol(c.resolveAlias(namespace)), right.EscapedText, meaning))
		}
		if symbol == nil {
			if !ignoreErrors {
				namespaceName := c.getFullyQualifiedName(namespace)
				declarationName := declarationNameToString(right)
				suggestionForNonexistentModule := c.getSuggestedSymbolForNonexistentModule(right, namespace)
				if suggestionForNonexistentModule != nil {
					c.error(right, Diagnostics._0_has_no_exported_member_named_1_Did_you_mean_2, namespaceName, declarationName, c.symbolToString(suggestionForNonexistentModule))
					return nil
				}

				containingQualifiedName := isQualifiedName(name) && c.getContainingQualifiedNameNode(name)
				canSuggestTypeof := c.globalObjectType && (meaning & ast.SymbolFlagsType) && containingQualifiedName && !isTypeOfExpression(containingQualifiedName.Parent) && c.tryGetQualifiedNameAsValue(containingQualifiedName)
				if canSuggestTypeof {
					c.error(containingQualifiedName, Diagnostics._0_refers_to_a_value_but_is_being_used_as_a_type_here_Did_you_mean_typeof_0, entityNameToString(containingQualifiedName))
					return nil
				}

				if meaning&ast.SymbolFlagsNamespace != 0 && isQualifiedName(name.Parent) {
					exportedTypeSymbol := c.getMergedSymbol(c.getSymbol(c.getExportsOfSymbol(namespace), right.EscapedText, ast.SymbolFlagsType))
					if exportedTypeSymbol != nil {
						c.error(name.Parent.Right, Diagnostics.Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_property_1_in_0_with_0_1, c.symbolToString(exportedTypeSymbol), unescapeLeadingUnderscores(name.Parent.Right.EscapedText))
						return nil
					}
				}

				c.error(right, Diagnostics.Namespace_0_has_no_exported_member_1, namespaceName, declarationName)
			}
			return nil
		}
	} else {
		Debug.assertNever(name, "Unknown entity name kind.")
	}
	if !nodeIsSynthesized(name) && isEntityName(name) && (symbol.Flags&ast.SymbolFlagsAlias != 0 || name.Parent.Kind == ast.KindExportAssignment) {
		c.markSymbolOfAliasDeclarationIfTypeOnly(getAliasDeclarationFromName(name), symbol, nil /*finalTarget*/, true /*overwriteEmpty*/)
	}
	if (symbol.Flags&meaning != 0) || dontResolveAlias {
		return symbol
	} else {
		return c.resolveAlias(symbol)
	}
}

/**
 * 1. For prototype-property methods like `A.prototype.m = function () ...`, try to resolve names in the scope of `A` too.
 * Note that prototype-property assignment to locations outside the current file (eg globals) doesn't work, so
 * name resolution won't work either.
 * 2. For property assignments like `{ x: function f () { } }`, try to resolve names in the scope of `f` too.
 */

func (c *Checker) resolveEntityNameFromAssignmentDeclaration(name Identifier, meaning SymbolFlags) *ast.Symbol {
	if c.isJSDocTypeReference(name.Parent) {
		secondaryLocation := c.getAssignmentDeclarationLocation(name.Parent)
		if secondaryLocation != nil {
			return c.resolveName(secondaryLocation, name, meaning, nil /*nameNotFoundMessage*/, true /*isUse*/)
		}
	}
}

func (c *Checker) getAssignmentDeclarationLocation(node TypeReferenceNode) *ast.Node {
	typeAlias := findAncestor(node, func(node *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
		if !(isJSDocNode(node) || node.Flags&ast.NodeFlagsJSDoc != 0) {
			return "quit"
		} else {
			return isJSDocTypeAlias(node)
		}
	})
	if typeAlias != nil {
		return
	}
	host := getJSDocHost(node)
	if host != nil && isExpressionStatement(host) && isPrototypePropertyAssignment(host.Expression) {
		// /** @param {K} p */ X.prototype.m = function () { } <-- look for K on X's declaration
		symbol := c.getSymbolOfDeclaration(host.Expression.Left)
		if symbol {
			return c.getDeclarationOfJSPrototypeContainer(symbol)
		}
	}
	if host != nil && isFunctionExpression(host) && isPrototypePropertyAssignment(host.Parent) && isExpressionStatement(host.Parent.Parent) {
		// X.prototype.m = /** @param {K} p */ function () { } <-- look for K on X's declaration
		symbol := c.getSymbolOfDeclaration(host.Parent.Left)
		if symbol {
			return c.getDeclarationOfJSPrototypeContainer(symbol)
		}
	}
	if host != nil && (isObjectLiteralMethod(host) || isPropertyAssignment(host)) && isBinaryExpression(host.Parent.Parent) && getAssignmentDeclarationKind(host.Parent.Parent) == AssignmentDeclarationKindPrototype {
		// X.prototype = { /** @param {K} p */m() { } } <-- look for K on X's declaration
		symbol := c.getSymbolOfDeclaration(host.Parent.Parent.Left.AsBindableStaticNameExpression())
		if symbol {
			return c.getDeclarationOfJSPrototypeContainer(symbol)
		}
	}
	sig := getEffectiveJSDocHost(node)
	if sig != nil && isFunctionLike(sig) {
		symbol := c.getSymbolOfDeclaration(sig)
		return symbol && symbol.ValueDeclaration
	}
}

func (c *Checker) getDeclarationOfJSPrototypeContainer(symbol *ast.Symbol) * /* TODO(TS-TO-GO) inferred type Declaration | Expression */ any {
	decl := symbol.Parent.ValueDeclaration
	if decl == nil {
		return nil
	}
	var initializer Expression
	switch {
	case isAssignmentDeclaration(decl):
		initializer = getAssignedExpandoInitializer(decl)
	case hasOnlyExpressionInitializer(decl):
		initializer = getDeclaredExpandoInitializer(decl)
	default:
		initializer = nil
	}
	return initializer || decl
}

/**
 * Get the real symbol of a declaration with an expando initializer.
 *
 * Normally, declarations have an associated symbol, but when a declaration has an expando
 * initializer, the expando's symbol is the one that has all the members merged into it.
 */

func (c *Checker) getExpandoSymbol(symbol *ast.Symbol) *ast.Symbol {
	decl := symbol.ValueDeclaration
	if decl == nil || !isInJSFile(decl) || symbol.Flags&ast.SymbolFlagsTypeAlias != 0 || getExpandoInitializer(decl, false /*isPrototypeAssignment*/) != nil {
		return nil
	}
	var init Expression
	if isVariableDeclaration(decl) {
		init = getDeclaredExpandoInitializer(decl)
	} else {
		init = getAssignedExpandoInitializer(decl)
	}
	if init != nil {
		initSymbol := c.getSymbolOfNode(init)
		if initSymbol != nil {
			return c.mergeJSSymbols(initSymbol, symbol)
		}
	}
}

func (c *Checker) resolveExternalModuleName(location *ast.Node, moduleReferenceExpression Expression, ignoreErrors bool) *ast.Symbol {
	isClassic := getEmitModuleResolutionKind(c.compilerOptions) == ModuleResolutionKindClassic
	var errorMessage any
	if isClassic {
		errorMessage = Diagnostics.Cannot_find_module_0_Did_you_mean_to_set_the_moduleResolution_option_to_nodenext_or_to_add_aliases_to_the_paths_option
	} else {
		errorMessage = Diagnostics.Cannot_find_module_0_or_its_corresponding_type_declarations
	}
	return c.resolveExternalModuleNameWorker(location, moduleReferenceExpression, ifElse(ignoreErrors, nil, errorMessage), ignoreErrors)
}

func (c *Checker) resolveExternalModuleNameWorker(location *ast.Node, moduleReferenceExpression Expression, moduleNotFoundError *DiagnosticMessage, ignoreErrors bool /*  = false */, isForAugmentation bool /*  = false */) *ast.Symbol {
	if isStringLiteralLike(moduleReferenceExpression) {
		return c.resolveExternalModule(location, moduleReferenceExpression.Text, moduleNotFoundError, ifElse(!ignoreErrors, moduleReferenceExpression, nil), isForAugmentation)
	} else {
		return nil
	}
}

func (c *Checker) resolveExternalModule(location *ast.Node, moduleReference string, moduleNotFoundError *DiagnosticMessage, errorNode *ast.Node, isForAugmentation bool /*  = false */) *ast.Symbol {
	if errorNode != nil && startsWith(moduleReference, "@types/") {
		diag := Diagnostics.Cannot_import_type_declaration_files_Consider_importing_0_instead_of_1
		withoutAtTypePrefix := removePrefix(moduleReference, "@types/")
		c.error(errorNode, diag, withoutAtTypePrefix, moduleReference)
	}

	ambientModule := c.tryFindAmbientModule(moduleReference, true /*withAugmentations*/)
	if ambientModule != nil {
		return ambientModule
	}
	currentSourceFile := getSourceFileOfNode(location)
	var contextSpecifier Expression
	if isStringLiteralLike(location) {
		contextSpecifier = location
	} else {
		contextSpecifier = (ifElse(isModuleDeclaration(location), location, ifElse(location.Parent && isModuleDeclaration(location.Parent) && location.Parent.Name == location, location.Parent, nil))). /* ? */ name || (ifElse(isLiteralImportTypeNode(location), location, nil)). /* ? */ argument.literal || (ifElse(isVariableDeclaration(location) && location.Initializer != nil && isRequireCall(location.Initializer, true /*requireStringLiteralLikeArgument*/), location.Initializer.Arguments[0], nil)) || findAncestor(location, isImportCall). /* ? */ arguments[0] || findAncestor(location, or(isImportDeclaration, isJSDocImportTag, isExportDeclaration)). /* ? */ moduleSpecifier || findAncestor(location, isExternalModuleImportEqualsDeclaration). /* ? */ moduleReference.expression
	}
	var mode ResolutionMode
	if contextSpecifier != nil && isStringLiteralLike(contextSpecifier) {
		mode = host.getModeForUsageLocation(currentSourceFile, contextSpecifier)
	} else {
		mode = host.getDefaultResolutionModeForFile(currentSourceFile)
	}
	moduleResolutionKind := getEmitModuleResolutionKind(c.compilerOptions)
	resolvedModule := host.getResolvedModule(currentSourceFile, moduleReference, mode). /* ? */ resolvedModule
	resolutionDiagnostic := errorNode && resolvedModule && getResolutionDiagnostic(c.compilerOptions, resolvedModule, currentSourceFile)
	sourceFile := resolvedModule && (resolutionDiagnostic == nil || resolutionDiagnostic == Diagnostics.Module_0_was_resolved_to_1_but_jsx_is_not_set) && host.getSourceFile(resolvedModule.resolvedFileName)
	if sourceFile {
		// If there's a resolutionDiagnostic we need to report it even if a sourceFile is found.
		if resolutionDiagnostic != nil {
			c.error(errorNode, resolutionDiagnostic, moduleReference, resolvedModule.resolvedFileName)
		}

		if resolvedModule.resolvedUsingTsExtension && isDeclarationFileName(moduleReference) {
			importOrExport := findAncestor(location, isImportDeclaration). /* ? */ importClause || findAncestor(location, or(isImportEqualsDeclaration, isExportDeclaration))
			if errorNode != nil && importOrExport != nil && !importOrExport.IsTypeOnly || findAncestor(location, isImportCall) != nil {
				c.error(errorNode, Diagnostics.A_declaration_file_cannot_be_imported_without_import_type_Did_you_mean_to_import_an_implementation_file_0_instead, getSuggestedImportSource(Debug.checkDefined(tryExtractTSExtension(moduleReference))))
			}
		} else if resolvedModule.resolvedUsingTsExtension && !shouldAllowImportingTsExtension(c.compilerOptions, currentSourceFile.FileName) {
			importOrExport := findAncestor(location, isImportDeclaration). /* ? */ importClause || findAncestor(location, or(isImportEqualsDeclaration, isExportDeclaration))
			if errorNode != nil && !(importOrExport. /* ? */ isTypeOnly || findAncestor(location, isImportTypeNode) != nil) {
				tsExtension := Debug.checkDefined(tryExtractTSExtension(moduleReference))
				c.error(errorNode, Diagnostics.An_import_path_can_only_end_with_a_0_extension_when_allowImportingTsExtensions_is_enabled, tsExtension)
			}
		}

		if sourceFile.Symbol {
			if errorNode != nil && resolvedModule.isExternalLibraryImport && !resolutionExtensionIsTSOrJson(resolvedModule.extension) {
				c.errorOnImplicitAnyModule(false, errorNode, currentSourceFile, mode, resolvedModule, moduleReference)
			}
			if errorNode != nil && (moduleResolutionKind == ModuleResolutionKindNode16 || moduleResolutionKind == ModuleResolutionKindNodeNext) {
				isSyncImport := (currentSourceFile.ImpliedNodeFormat == ModuleKindCommonJS && findAncestor(location, isImportCall) == nil) || findAncestor(location, isImportEqualsDeclaration) != nil
				overrideHost := findAncestor(location, func(l *ast.Node) bool {
					return isImportTypeNode(l) || isExportDeclaration(l) || isImportDeclaration(l) || isJSDocImportTag(l)
				})
				// An override clause will take effect for type-only imports and import types, and allows importing the types across formats, regardless of
				// normal mode restrictions
				if isSyncImport && sourceFile.ImpliedNodeFormat == ModuleKindESNext && !hasResolutionModeOverride(overrideHost) {
					if findAncestor(location, isImportEqualsDeclaration) != nil {
						// ImportEquals in a ESM file resolving to another ESM file
						c.error(errorNode, Diagnostics.Module_0_cannot_be_imported_using_this_construct_The_specifier_only_resolves_to_an_ES_module_which_cannot_be_imported_with_require_Use_an_ECMAScript_import_instead, moduleReference)
					} else {
						// CJS file resolving to an ESM file
						var diagnosticDetails TODO
						ext := tryGetExtensionFromPath(currentSourceFile.FileName)
						if ext == ExtensionTs || ext == ExtensionJs || ext == ExtensionTsx || ext == ExtensionJsx {
							diagnosticDetails = createModeMismatchDetails(currentSourceFile)
						}

						var message any
						switch {
						case overrideHost. /* ? */ kind == ast.KindImportDeclaration && overrideHost.ImportClause. /* ? */ isTypeOnly:
							message = Diagnostics.Type_only_import_of_an_ECMAScript_module_from_a_CommonJS_module_must_have_a_resolution_mode_attribute
						case overrideHost. /* ? */ kind == ast.KindImportType:
							message = Diagnostics.Type_import_of_an_ECMAScript_module_from_a_CommonJS_module_must_have_a_resolution_mode_attribute
						default:
							message = Diagnostics.The_current_file_is_a_CommonJS_module_whose_imports_will_produce_require_calls_however_the_referenced_file_is_an_ECMAScript_module_and_cannot_be_imported_with_require_Consider_writing_a_dynamic_import_0_call_instead
						}
						c.diagnostics.add(createDiagnosticForNodeFromMessageChain(getSourceFileOfNode(errorNode), errorNode, chainDiagnosticMessages(diagnosticDetails, message, moduleReference)))
					}
				}
			}
			// merged symbol is module declaration symbol combined with all augmentations
			return c.getMergedSymbol(sourceFile.Symbol)
		}
		if errorNode != nil && moduleNotFoundError != nil && !isSideEffectImport(errorNode) {
			// report errors only if it was requested
			c.error(errorNode, Diagnostics.File_0_is_not_a_module, sourceFile.FileName)
		}
		return nil
	}

	if c.patternAmbientModules {
		pattern := findBestPatternMatch(c.patternAmbientModules, func(_ PatternAmbientModule) Pattern {
			return _.pattern
		}, moduleReference)
		if pattern != nil {
			// If the module reference matched a pattern ambient module ('*.foo') but there's also a
			// module augmentation by the specific name requested ('a.foo'), we store the merged symbol
			// by the augmentation name ('a.foo'), because asking for *.foo should not give you exports
			// from a.foo.
			augmentation := c.patternAmbientModuleAugmentations && c.patternAmbientModuleAugmentations.get(moduleReference)
			if augmentation != nil {
				return c.getMergedSymbol(augmentation)
			}
			return c.getMergedSymbol(pattern.symbol)
		}
	}

	if errorNode == nil {
		return nil
	}

	// May be an untyped module. If so, ignore resolutionDiagnostic.
	if resolvedModule != nil && !resolutionExtensionIsTSOrJson(resolvedModule.extension) && resolutionDiagnostic == nil || resolutionDiagnostic == Diagnostics.Could_not_find_a_declaration_file_for_module_0_1_implicitly_has_an_any_type {
		if isForAugmentation {
			diag := Diagnostics.Invalid_module_name_in_augmentation_Module_0_resolves_to_an_untyped_module_at_1_which_cannot_be_augmented
			c.error(errorNode, diag, moduleReference, resolvedModule.resolvedFileName)
		} else {
			c.errorOnImplicitAnyModule(c.noImplicitAny && moduleNotFoundError != nil, errorNode, currentSourceFile, mode, resolvedModule, moduleReference)
		}
		// Failed imports and untyped modules are both treated in an untyped manner; only difference is whether we give a diagnostic first.
		return nil
	}

	if moduleNotFoundError != nil {
		// See if this was possibly a projectReference redirect
		if resolvedModule != nil {
			redirect := host.getProjectReferenceRedirect(resolvedModule.resolvedFileName)
			if redirect {
				c.error(errorNode, Diagnostics.Output_file_0_has_not_been_built_from_source_file_1, redirect, resolvedModule.resolvedFileName)
				return nil
			}
		}

		if resolutionDiagnostic != nil {
			c.error(errorNode, resolutionDiagnostic, moduleReference, resolvedModule.resolvedFileName)
		} else {
			isExtensionlessRelativePathImport := pathIsRelative(moduleReference) && !hasExtension(moduleReference)
			resolutionIsNode16OrNext := moduleResolutionKind == ModuleResolutionKindNode16 || moduleResolutionKind == ModuleResolutionKindNodeNext
			if !getResolveJsonModule(c.compilerOptions) && fileExtensionIs(moduleReference, ExtensionJson) && moduleResolutionKind != ModuleResolutionKindClassic && hasJsonModuleEmitEnabled(c.compilerOptions) {
				c.error(errorNode, Diagnostics.Cannot_find_module_0_Consider_using_resolveJsonModule_to_import_module_with_json_extension, moduleReference)
			} else if mode == ModuleKindESNext && resolutionIsNode16OrNext && isExtensionlessRelativePathImport {
				absoluteRef := getNormalizedAbsolutePath(moduleReference, getDirectoryPath(currentSourceFile.Path))
				suggestedExt := c.suggestedExtensions.find(func(TODO_IDENTIFIER /* TODO(TS-TO-GO) inferred type [string, string] */ any) bool {
					return host.fileExists(absoluteRef + actualExt)
				})[1]
				if suggestedExt {
					c.error(errorNode, Diagnostics.Relative_import_paths_need_explicit_file_extensions_in_ECMAScript_imports_when_moduleResolution_is_node16_or_nodenext_Did_you_mean_0, moduleReference+suggestedExt)
				} else {
					c.error(errorNode, Diagnostics.Relative_import_paths_need_explicit_file_extensions_in_ECMAScript_imports_when_moduleResolution_is_node16_or_nodenext_Consider_adding_an_extension_to_the_import_path)
				}
			} else {
				if host.getResolvedModule(currentSourceFile, moduleReference, mode). /* ? */ alternateResult {
					errorInfo := createModuleNotFoundChain(currentSourceFile, host, moduleReference, mode, moduleReference)
					c.errorOrSuggestion(true, errorNode, chainDiagnosticMessages(errorInfo, moduleNotFoundError, moduleReference))
				} else {
					c.error(errorNode, moduleNotFoundError, moduleReference)
				}
			}
		}
	}
	return nil

	getSuggestedImportSource := func(tsExtension string) string {
		importSourceWithoutExtension := removeExtension(moduleReference, tsExtension)
		/**
		 * Direct users to import source with .js extension if outputting an ES module.
		 * @see https://github.com/microsoft/TypeScript/issues/42151
		 */

		if emitModuleKindIsNonNodeESM(c.moduleKind) || mode == ModuleKindESNext {
			preferTs := isDeclarationFileName(moduleReference) && shouldAllowImportingTsExtension(c.compilerOptions)
			var ext /* TODO(TS-TO-GO) inferred type ".mts" | ".mjs" | ".ts" | ".js" | ".cts" | ".cjs" */ any
			switch {
			case tsExtension == ExtensionMts || tsExtension == ExtensionDmts:
				if preferTs {
					ext = ".mts"
				} else {
					ext = ".mjs"
				}
			case tsExtension == ExtensionCts || tsExtension == ExtensionDmts:
				if preferTs {
					ext = ".cts"
				} else {
					ext = ".cjs"
				}
			case preferTs:
				ext = ".ts"
			default:
				ext = ".js"
			}
			return importSourceWithoutExtension + ext
		}
		return importSourceWithoutExtension
	}

}

func (c *Checker) errorOnImplicitAnyModule(isError bool, errorNode *ast.Node, sourceFile SourceFile, mode ResolutionMode, TODO_IDENTIFIER ResolvedModuleFull, moduleReference string) {
	if isSideEffectImport(errorNode) {
		return
	}

	var errorInfo *DiagnosticMessageChain
	if !isExternalModuleNameRelative(moduleReference) && packageId != nil {
		errorInfo = createModuleNotFoundChain(sourceFile, host, moduleReference, mode, packageId.name)
	}
	c.errorOrSuggestion(isError, errorNode, chainDiagnosticMessages(errorInfo, Diagnostics.Could_not_find_a_declaration_file_for_module_0_1_implicitly_has_an_any_type, moduleReference, resolvedFileName))
}

/* OVERLOAD: function resolveExternalModuleSymbol(moduleSymbol: Symbol, dontResolveAlias?: boolean): Symbol; */
/* OVERLOAD: function resolveExternalModuleSymbol(moduleSymbol: Symbol | undefined, dontResolveAlias?: boolean): Symbol | undefined; */
func (c *Checker) resolveExternalModuleSymbol(moduleSymbol *ast.Symbol, dontResolveAlias bool) *ast.Symbol {
	if moduleSymbol. /* ? */ exports != nil {
		exportEquals := c.resolveSymbol(moduleSymbol.Exports.get(InternalSymbolNameExportEquals), dontResolveAlias)
		exported := c.getCommonJsExportEquals(c.getMergedSymbol(exportEquals), c.getMergedSymbol(moduleSymbol))
		return c.getMergedSymbol(exported) || moduleSymbol
	}
	return nil
}

func (c *Checker) getCommonJsExportEquals(exported *ast.Symbol, moduleSymbol *ast.Symbol) *ast.Symbol {
	if exported == nil || exported == c.unknownSymbol || exported == moduleSymbol || moduleSymbol.Exports.size == 1 || exported.Flags&ast.SymbolFlagsAlias != 0 {
		return exported
	}
	links := c.getSymbolLinks(exported)
	if links.cjsExportMerged != nil {
		return links.cjsExportMerged
	}
	var merged *ast.Symbol
	if exported.Flags&ast.SymbolFlagsTransient != 0 {
		merged = exported
	} else {
		merged = c.cloneSymbol(exported)
	}
	merged.Flags = merged.Flags | ast.SymbolFlagsValueModule
	if merged.Exports == nil {
		merged.Exports = createSymbolTable()
	}
	moduleSymbol.Exports.forEach(func(s *ast.Symbol, name string) {
		if name == InternalSymbolNameExportEquals {
			return
		}
		merged.Exports.set(name, ifElse(merged.Exports.has(name), c.mergeSymbol(merged.Exports.get(name), s), s))
	})
	if merged == exported {
		// We just mutated a symbol, reset any cached links we may have already set
		// (Notably required to make late bound members appear)
		c.getSymbolLinks(merged).resolvedExports = nil
		c.getSymbolLinks(merged).resolvedMembers = nil
	}
	c.getSymbolLinks(merged).cjsExportMerged = merged
	links.cjsExportMerged = merged
	return links.cjsExportMerged
}

// An external module with an 'export =' declaration may be referenced as an ES6 module provided the 'export ='
// references a symbol that is at least declared as a module or a variable. The target of the 'export =' may
// combine other declarations with the module or variable (e.g. a class/module, function/module, interface/variable).
func (c *Checker) resolveESModuleSymbol(moduleSymbol *ast.Symbol, referencingLocation *ast.Node, dontResolveAlias bool, suppressInteropError bool) *ast.Symbol {
	symbol := c.resolveExternalModuleSymbol(moduleSymbol, dontResolveAlias)

	if !dontResolveAlias && symbol != nil {
		if !suppressInteropError && symbol.Flags&(ast.SymbolFlagsModule|ast.SymbolFlagsVariable) == 0 && getDeclarationOfKind(symbol, ast.KindSourceFile) == nil {
			var compilerOptionName /* TODO(TS-TO-GO) inferred type "allowSyntheticDefaultImports" | "esModuleInterop" */ any
			if c.moduleKind >= ModuleKindES2015 {
				compilerOptionName = "allowSyntheticDefaultImports"
			} else {
				compilerOptionName = "esModuleInterop"
			}

			c.error(referencingLocation, Diagnostics.This_module_can_only_be_referenced_with_ECMAScript_imports_Slashexports_by_turning_on_the_0_flag_and_referencing_its_default_export, compilerOptionName)

			return symbol
		}

		referenceParent := referencingLocation.Parent
		if (isImportDeclaration(referenceParent) && getNamespaceDeclarationNode(referenceParent) != nil) || isImportCall(referenceParent) {
			var reference Expression
			if isImportCall(referenceParent) {
				reference = referenceParent.Arguments[0]
			} else {
				reference = referenceParent.ModuleSpecifier
			}
			t := c.getTypeOfSymbol(symbol)
			defaultOnlyType := c.getTypeWithSyntheticDefaultOnly(t, symbol, moduleSymbol, reference)
			if defaultOnlyType != nil {
				return c.cloneTypeAsModuleType(symbol, defaultOnlyType, referenceParent)
			}

			targetFile := moduleSymbol. /* ? */ declarations. /* ? */ find(isSourceFile)
			isEsmCjsRef := targetFile && c.isESMFormatImportImportingCommonjsFormatFile(c.getEmitSyntaxForModuleSpecifierExpression(reference), host.getImpliedNodeFormatForEmit(targetFile))
			if getESModuleInterop(c.compilerOptions) || isEsmCjsRef {
				sigs := c.getSignaturesOfStructuredType(t, SignatureKindCall)
				if !sigs || sigs.length == 0 {
					sigs = c.getSignaturesOfStructuredType(t, SignatureKindConstruct)
				}
				if (sigs && sigs.length != 0) || c.getPropertyOfType(t, InternalSymbolNameDefault, true /*skipObjectFunctionPropertyAugment*/) != nil || isEsmCjsRef {
					var moduleType *Type
					if t.flags&TypeFlagsStructuredType != 0 {
						moduleType = c.getTypeWithSyntheticDefaultImportType(t, symbol, moduleSymbol, reference)
					} else {
						moduleType = c.createDefaultPropertyWrapperForModule(symbol, symbol.Parent)
					}
					return c.cloneTypeAsModuleType(symbol, moduleType, referenceParent)
				}
			}
		}
	}
	return symbol
}

/**
 * Create a new symbol which has the module's type less the call and construct signatures
 */

func (c *Checker) cloneTypeAsModuleType(symbol *ast.Symbol, moduleType *Type, referenceParent Union[ImportDeclaration, ImportCall]) TransientSymbol {
	result := c.createSymbol(symbol.Flags, symbol.EscapedName)
	if symbol.Declarations != nil {
		result.Declarations = symbol.Declarations.slice()
	} else {
		result.Declarations = []never{}
	}
	result.Parent = symbol.Parent
	result.Links.target = symbol
	result.Links.originatingImport = referenceParent
	if symbol.ValueDeclaration != nil {
		result.ValueDeclaration = symbol.ValueDeclaration
	}
	if symbol.ConstEnumOnlyModule {
		result.ConstEnumOnlyModule = true
	}
	if symbol.Members != nil {
		result.Members = NewMap(symbol.Members)
	}
	if symbol.Exports != nil {
		result.Exports = NewMap(symbol.Exports)
	}
	resolvedModuleType := c.resolveStructuredTypeMembers(moduleType.AsStructuredType())
	// Should already be resolved from the signature checks above
	result.Links.type_ = c.createAnonymousType(result, resolvedModuleType.members, emptyArray, emptyArray, resolvedModuleType.indexInfos)
	return result
}

func (c *Checker) hasExportAssignmentSymbol(moduleSymbol *ast.Symbol) bool {
	return moduleSymbol.Exports.get(InternalSymbolNameExportEquals) != nil
}

func (c *Checker) getExportsOfModuleAsArray(moduleSymbol *ast.Symbol) []*ast.Symbol {
	return c.symbolsToArray(c.getExportsOfModule(moduleSymbol))
}

func (c *Checker) getExportsAndPropertiesOfModule(moduleSymbol *ast.Symbol) []*ast.Symbol {
	exports := c.getExportsOfModuleAsArray(moduleSymbol)
	exportEquals := c.resolveExternalModuleSymbol(moduleSymbol)
	if exportEquals != moduleSymbol {
		t := c.getTypeOfSymbol(exportEquals)
		if c.shouldTreatPropertiesOfExternalModuleAsExports(t) {
			addRange(exports, c.getPropertiesOfType(t))
		}
	}
	return exports
}

func (c *Checker) forEachExportAndPropertyOfModule(moduleSymbol *ast.Symbol, cb func(symbol *ast.Symbol, key string)) {
	exports := c.getExportsOfModule(moduleSymbol)
	exports.forEach(func(symbol *ast.Symbol, key string) {
		if !c.isReservedMemberName(key) {
			cb(symbol, key)
		}
	})
	exportEquals := c.resolveExternalModuleSymbol(moduleSymbol)
	if exportEquals != moduleSymbol {
		t := c.getTypeOfSymbol(exportEquals)
		if c.shouldTreatPropertiesOfExternalModuleAsExports(t) {
			c.forEachPropertyOfType(t, func(symbol *ast.Symbol, escapedName string) {
				cb(symbol, escapedName)
			})
		}
	}
}

func (c *Checker) tryGetMemberInModuleExports(memberName string, moduleSymbol *ast.Symbol) *ast.Symbol {
	symbolTable := c.getExportsOfModule(moduleSymbol)
	if symbolTable {
		return symbolTable.get(memberName)
	}
}

func (c *Checker) tryGetMemberInModuleExportsAndProperties(memberName string, moduleSymbol *ast.Symbol) *ast.Symbol {
	symbol := c.tryGetMemberInModuleExports(memberName, moduleSymbol)
	if symbol != nil {
		return symbol
	}

	exportEquals := c.resolveExternalModuleSymbol(moduleSymbol)
	if exportEquals == moduleSymbol {
		return nil
	}

	t := c.getTypeOfSymbol(exportEquals)
	if c.shouldTreatPropertiesOfExternalModuleAsExports(t) {
		return c.getPropertyOfType(t, memberName)
	} else {
		return nil
	}
}

func (c *Checker) shouldTreatPropertiesOfExternalModuleAsExports(resolvedExternalModuleType *Type) bool {
	return !(resolvedExternalModuleType.flags&TypeFlagsPrimitive != 0 || getObjectFlags(resolvedExternalModuleType)&ObjectFlagsClass != 0 || c.isArrayType(resolvedExternalModuleType) || c.isTupleType(resolvedExternalModuleType))
}

func (c *Checker) getExportsOfSymbol(symbol *ast.Symbol) SymbolTable {
	switch {
	case symbol.Flags&ast.SymbolFlagsLateBindingContainer != 0:
		return c.getResolvedMembersOrExportsOfSymbol(symbol, MembersOrExportsResolutionKindresolvedExports)
	case symbol.Flags&ast.SymbolFlagsModule != 0:
		return c.getExportsOfModule(symbol)
	default:
		return symbol.Exports || c.emptySymbols
	}
}

func (c *Checker) getExportsOfModule(moduleSymbol *ast.Symbol) SymbolTable {
	links := c.getSymbolLinks(moduleSymbol)
	if links.resolvedExports == nil {
		TODO_IDENTIFIER := c.getExportsOfModuleWorker(moduleSymbol)
		links.resolvedExports = exports
		links.typeOnlyExportStarMap = typeOnlyExportStarMap
	}
	return links.resolvedExports
}

/**
 * Extends one symbol table with another while collecting information on name collisions for error message generation into the `lookupTable` argument
 * Not passing `lookupTable` and `exportNode` disables this collection, and just extends the tables
 */

func (c *Checker) extendExportSymbols(target SymbolTable, source *SymbolTable, lookupTable ExportCollisionTrackerTable, exportNode ExportDeclaration) {
	if source == nil {
		return
	}
	source.forEach(func(sourceSymbol *ast.Symbol, id string) {
		if id == InternalSymbolNameDefault {
			return
		}

		targetSymbol := target.get(id)
		if targetSymbol == nil {
			target.set(id, sourceSymbol)
			if lookupTable != nil && exportNode != nil {
				lookupTable.set(id, ExportCollisionTracker{
					specifierText: getTextOfNode(exportNode.ModuleSpecifier),
				})
			}
		} else if lookupTable != nil && exportNode != nil && targetSymbol && c.resolveSymbol(targetSymbol) != c.resolveSymbol(sourceSymbol) {
			collisionTracker := lookupTable.get(id)
			if collisionTracker.exportsWithDuplicate == nil {
				collisionTracker.exportsWithDuplicate = []ExportDeclaration{exportNode}
			} else {
				collisionTracker.exportsWithDuplicate.push(exportNode)
			}
		}
	})
}

func (c *Checker) getExportsOfModuleWorker(moduleSymbol *ast.Symbol) /* TODO(TS-TO-GO) inferred type { exports: SymbolTable; typeOnlyExportStarMap: Map<__String, ExportDeclaration & { readonly isTypeOnly: true; readonly moduleSpecifier: Expression; }> | undefined; } */ any {
	var visitedSymbols []*ast.Symbol = []never{}
	var typeOnlyExportStarMap *Map[string, Intersection[ExportDeclaration /* TODO(TS-TO-GO) TypeNode TypeLiteral: { readonly isTypeOnly: true; readonly moduleSpecifier: Expression; } */, any]]
	nonTypeOnlyNames := NewSet[string]()

	// A module defined by an 'export=' consists of one export that needs to be resolved
	moduleSymbol = c.resolveExternalModuleSymbol(moduleSymbol)
	exports := visit(moduleSymbol) || c.emptySymbols

	if typeOnlyExportStarMap != nil {
		nonTypeOnlyNames.forEach(func(name string) bool {
			return typeOnlyExportStarMap.delete(name)
		})
	}

	return map[any]any{ /* TODO(TS-TO-GO): was object literal */
		"exports":               exports,
		"typeOnlyExportStarMap": typeOnlyExportStarMap,
	}

	// The ES6 spec permits export * declarations in a module to circularly reference the module itself. For example,
	// module 'a' can 'export * from "b"' and 'b' can 'export * from "a"' without error.
	visit := func(symbol *ast.Symbol, exportStar ExportDeclaration, isTypeOnly bool) *SymbolTable {
		if !isTypeOnly && symbol. /* ? */ exports != nil {
			// Add non-type-only names before checking if we've visited this module,
			// because we might have visited it via an 'export type *', and visiting
			// again with 'export *' will override the type-onlyness of its exports.
			symbol.Exports.forEach(func(_ *ast.Symbol, name string) Set[string] {
				return nonTypeOnlyNames.add(name)
			})
		}
		if !(symbol != nil && symbol.Exports != nil && pushIfUnique(visitedSymbols, symbol)) {
			return
		}
		symbols := NewMap(symbol.Exports)

		// All export * declarations are collected in an __export symbol by the binder
		exportStars := symbol.Exports.get(InternalSymbolNameExportStar)
		if exportStars != nil {
			nestedSymbols := createSymbolTable()
			var lookupTable ExportCollisionTrackerTable = NewMap()
			if exportStars.Declarations != nil {
				for _, node := range exportStars.Declarations {
					resolvedModule := c.resolveExternalModuleName(node, node.AsExportDeclaration().ModuleSpecifier)
					exportedSymbols := visit(resolvedModule, node.AsExportDeclaration(), isTypeOnly || node.AsExportDeclaration().IsTypeOnly)
					c.extendExportSymbols(nestedSymbols, exportedSymbols, lookupTable, node.AsExportDeclaration())
				}
			}
			lookupTable.forEach(func(TODO_IDENTIFIER ExportCollisionTracker, id string) {
				// It's not an error if the file with multiple `export *`s with duplicate names exports a member with that name itself
				if id == "export=" || !(exportsWithDuplicate != nil && exportsWithDuplicate.length != 0) || symbols.has(id) {
					return
				}
				for _, node := range exportsWithDuplicate {
					c.diagnostics.add(createDiagnosticForNode(node, Diagnostics.Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambiguity, lookupTable.get(id).specifierText, unescapeLeadingUnderscores(id)))
				}
			})
			c.extendExportSymbols(symbols, nestedSymbols)
		}
		if exportStar. /* ? */ isTypeOnly {
			if typeOnlyExportStarMap == nil {
				typeOnlyExportStarMap = NewMap()
			}
			symbols.forEach(func(_ *ast.Symbol, escapedName string) Map[string /* TODO(TS-TO-GO) inferred type ExportDeclaration & { readonly isTypeOnly: true; readonly moduleSpecifier: Expression; } */, any] {
				return typeOnlyExportStarMap.set(escapedName, exportStar /* as ExportDeclaration & { readonly isTypeOnly: true; readonly moduleSpecifier: Expression; } */)
			})
		}
		return symbols
	}

}

/* OVERLOAD: function getMergedSymbol(symbol: Symbol): Symbol; */
/* OVERLOAD: function getMergedSymbol(symbol: Symbol | undefined): Symbol | undefined; */
func (c *Checker) getMergedSymbol(symbol *ast.Symbol) *ast.Symbol {
	var merged *ast.Symbol
	if symbol != nil && symbol.MergeId != 0 && ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: merged = mergedSymbols[symbol.mergeId] */ TODO) {
		return merged
	} else {
		return symbol
	}
}

func (c *Checker) getSymbolOfDeclaration(node Declaration) *ast.Symbol {
	return c.getMergedSymbol(node.Symbol && c.getLateBoundSymbol(node.Symbol))
}

/**
 * Get the merged symbol for a node. If you know the node is a `Declaration`, it is faster and more type safe to
 * use use `getSymbolOfDeclaration` instead.
 */

func (c *Checker) getSymbolOfNode(node *ast.Node) *ast.Symbol {
	if canHaveSymbol(node) {
		return c.getSymbolOfDeclaration(node)
	} else {
		return nil
	}
}

func (c *Checker) getParentOfSymbol(symbol *ast.Symbol) *ast.Symbol {
	return c.getMergedSymbol(symbol.Parent && c.getLateBoundSymbol(symbol.Parent))
}

func (c *Checker) getFunctionExpressionParentSymbolOrSymbol(symbol *ast.Symbol) *ast.Symbol {
	if symbol.ValueDeclaration. /* ? */ kind == ast.KindArrowFunction || symbol.ValueDeclaration. /* ? */ kind == ast.KindFunctionExpression {
		return c.getSymbolOfNode(symbol.ValueDeclaration.Parent) || symbol
	} else {
		return symbol
	}
}

func (c *Checker) getAlternativeContainingModules(symbol *ast.Symbol, enclosingDeclaration *ast.Node) []*ast.Symbol {
	containingFile := getSourceFileOfNode(enclosingDeclaration)
	id := getNodeId(containingFile)
	links := c.getSymbolLinks(symbol)
	var results *[]*ast.Symbol
	if links.extendedContainersByFile != nil && ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: results = links.extendedContainersByFile.get(id) */ TODO != nil) {
		return results
	}
	if containingFile && containingFile.Imports {
		// Try to make an import using an import already in the enclosing file, if possible
		for _, importRef := range containingFile.Imports {
			if nodeIsSynthesized(importRef) {
				continue
				// Synthetic names can't be resolved by `resolveExternalModuleName` - they'll cause a debug assert if they error
			}
			// Synthetic names can't be resolved by `resolveExternalModuleName` - they'll cause a debug assert if they error
			resolvedModule := c.resolveExternalModuleName(enclosingDeclaration, importRef, true /*ignoreErrors*/)
			if resolvedModule == nil {
				continue
			}
			ref := c.getAliasForSymbolInContainer(resolvedModule, symbol)
			if ref == nil {
				continue
			}
			results = append(results, resolvedModule)
		}
		if length(results) != 0 {
			(links.extendedContainersByFile || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.extendedContainersByFile = new Map() */ TODO)).set(id, results)
			return results
		}
	}
	if links.extendedContainers != nil {
		return links.extendedContainers
	}
	// No results from files already being imported by this file - expand search (expensive, but not location-specific, so cached)
	otherFiles := host.getSourceFiles()
	for _, file := range otherFiles {
		if !isExternalModule(file) {
			continue
		}
		sym := c.getSymbolOfDeclaration(file)
		ref := c.getAliasForSymbolInContainer(sym, symbol)
		if ref == nil {
			continue
		}
		results = append(results, sym)
	}
	links.extendedContainers = results || emptyArray
	return links.extendedContainers
}

/**
 * Attempts to find the symbol corresponding to the container a symbol is in - usually this
 * is just its' `.parent`, but for locals, this value is `undefined`
 */

func (c *Checker) getContainersOfSymbol(symbol *ast.Symbol, enclosingDeclaration *ast.Node, meaning SymbolFlags) *[]*ast.Symbol {
	container := c.getParentOfSymbol(symbol)
	// Type parameters end up in the `members` lists but are not externally visible
	if container != nil && symbol.Flags&ast.SymbolFlagsTypeParameter == 0 {
		return getWithAlternativeContainers(container)
	}
	candidates := mapDefined(symbol.Declarations, func(d Declaration) *ast.Symbol {
		if !isAmbientModule(d) && d.Parent {
			// direct children of a module
			if c.hasNonGlobalAugmentationExternalModuleSymbol(d.Parent) {
				return c.getSymbolOfDeclaration(d.Parent.AsDeclaration())
			}
			// export ='d member of an ambient module
			if isModuleBlock(d.Parent) && d.Parent.Parent && c.resolveExternalModuleSymbol(c.getSymbolOfDeclaration(d.Parent.Parent)) == symbol {
				return c.getSymbolOfDeclaration(d.Parent.Parent)
			}
		}
		if isClassExpression(d) && isBinaryExpression(d.Parent) && d.Parent.OperatorToken.Kind == ast.KindEqualsToken && isAccessExpression(d.Parent.Left) && isEntityNameExpression(d.Parent.Left.Expression) {
			if isModuleExportsAccessExpression(d.Parent.Left) || isExportsIdentifier(d.Parent.Left.Expression) {
				return c.getSymbolOfDeclaration(getSourceFileOfNode(d))
			}
			c.checkExpressionCached(d.Parent.Left.Expression)
			return c.getNodeLinks(d.Parent.Left.Expression).resolvedSymbol
		}
	})
	if length(candidates) == 0 {
		return nil
	}
	containers := mapDefined(candidates, func(candidate *ast.Symbol) *ast.Symbol {
		if c.getAliasForSymbolInContainer(candidate, symbol) != nil {
			return candidate
		} else {
			return nil
		}
	})

	var bestContainers []*ast.Symbol = []never{}
	var alternativeContainers []*ast.Symbol = []never{}

	for _, container := range containers {
		TODO_IDENTIFIER := getWithAlternativeContainers(container)
		bestContainers = append(bestContainers, bestMatch)
		alternativeContainers = addRange(alternativeContainers, rest)
	}

	return core.Concatenate(bestContainers, alternativeContainers)

	getWithAlternativeContainers := func(container *ast.Symbol) []*ast.Symbol {
		additionalContainers := mapDefined(container.Declarations, fileSymbolIfFileSymbolExportEqualsContainer)
		reexportContainers := enclosingDeclaration && c.getAlternativeContainingModules(symbol, enclosingDeclaration)
		objectLiteralContainer := c.getVariableDeclarationOfObjectLiteral(container, meaning)
		if enclosingDeclaration != nil && container.Flags&c.getQualifiedLeftMeaning(meaning) != 0 && c.getAccessibleSymbolChain(container, enclosingDeclaration, ast.SymbolFlagsNamespace, false /*useOnlyExternalAliasing*/) != nil {
			return append(core.Concatenate(core.Concatenate([]*ast.Symbol{container}, additionalContainers), reexportContainers), objectLiteralContainer)
			// This order expresses a preference for the real container if it is in scope
		}
		// we potentially have a symbol which is a member of the instance side of something - look for a variable in scope with the container's type
		// which may be acting like a namespace (eg, `Symbol` acts like a namespace when looking up `Symbol.toStringTag`)
		var firstVariableMatch *ast.Symbol
		if container.Flags&c.getQualifiedLeftMeaning(meaning) == 0 && container.Flags&ast.SymbolFlagsType != 0 && c.getDeclaredTypeOfSymbol(container).flags&TypeFlagsObject != 0 && meaning == ast.SymbolFlagsValue {
			firstVariableMatch = c.forEachSymbolTableInScope(enclosingDeclaration, func(t SymbolTable) *ast.Symbol {
				return forEachEntry(t, func(s *ast.Symbol) *ast.Symbol {
					if s.Flags&c.getQualifiedLeftMeaning(meaning) != 0 && c.getTypeOfSymbol(s) == c.getDeclaredTypeOfSymbol(container) {
						return s
					}
				})
			})
		} else {
			firstVariableMatch = nil
		}
		var res []*ast.Symbol
		if firstVariableMatch != nil {
			res = []*ast.Symbol{firstVariableMatch /* TODO(TS-TO-GO) Expression SpreadElement: ...additionalContainers */, container}
		} else {
			res = []*ast.Symbol{ /* TODO(TS-TO-GO) Expression SpreadElement: ...additionalContainers */ container}
		}
		res = append(res, objectLiteralContainer)
		res = addRange(res, reexportContainers)
		return res
	}

	fileSymbolIfFileSymbolExportEqualsContainer := func(d Declaration) *ast.Symbol {
		return container && c.getFileSymbolIfFileSymbolExportEqualsContainer(d, container)
	}

}

func (c *Checker) getVariableDeclarationOfObjectLiteral(symbol *ast.Symbol, meaning SymbolFlags) *ast.Symbol {
	// If we're trying to reference some object literal in, eg `var a = { x: 1 }`, the symbol for the literal, `__object`, is distinct
	// from the symbol of the declaration it is being assigned to. Since we can use the declaration to refer to the literal, however,
	// we'd like to make that connection here - potentially causing us to paint the declaration's visibility, and therefore the literal.
	var firstDecl Union[*ast.Node /* TODO(TS-TO-GO) TypeNode LiteralType: false */, any] = length(symbol.Declarations) != 0 && core.FirstOrNil(symbol.Declarations)
	if meaning&ast.SymbolFlagsValue != 0 && firstDecl && firstDecl.Parent && isVariableDeclaration(firstDecl.Parent) {
		if isObjectLiteralExpression(firstDecl) && firstDecl == firstDecl.Parent.Initializer || isTypeLiteralNode(firstDecl) && firstDecl == firstDecl.Parent.Type_ {
			return c.getSymbolOfDeclaration(firstDecl.Parent)
		}
	}
}

func (c *Checker) getFileSymbolIfFileSymbolExportEqualsContainer(d Declaration, container *ast.Symbol) *ast.Symbol {
	fileSymbol := c.getExternalModuleContainer(d)
	exported := fileSymbol && fileSymbol.Exports && fileSymbol.Exports.get(InternalSymbolNameExportEquals)
	if exported != nil && c.getSymbolIfSameReference(exported, container) != nil {
		return fileSymbol
	} else {
		return nil
	}
}

func (c *Checker) getAliasForSymbolInContainer(container *ast.Symbol, symbol *ast.Symbol) *ast.Symbol {
	if container == c.getParentOfSymbol(symbol) {
		// fast path, `symbol` is either already the alias or isn't aliased
		return symbol
	}
	// Check if container is a thing with an `export=` which points directly at `symbol`, and if so, return
	// the container itself as the alias for the symbol
	exportEquals := container.Exports && container.Exports.get(InternalSymbolNameExportEquals)
	if exportEquals != nil && c.getSymbolIfSameReference(exportEquals, symbol) != nil {
		return container
	}
	exports := c.getExportsOfSymbol(container)
	quick := exports.get(symbol.EscapedName)
	if quick != nil && c.getSymbolIfSameReference(quick, symbol) != nil {
		return quick
	}
	return forEachEntry(exports, func(exported *ast.Symbol) *ast.Symbol {
		if c.getSymbolIfSameReference(exported, symbol) != nil {
			return exported
		}
	})
}

/**
 * Checks if two symbols, through aliasing and/or merging, refer to the same thing
 */

func (c *Checker) getSymbolIfSameReference(s1 *ast.Symbol, s2 *ast.Symbol) *ast.Symbol {
	if c.getMergedSymbol(c.resolveSymbol(c.getMergedSymbol(s1))) == c.getMergedSymbol(c.resolveSymbol(c.getMergedSymbol(s2))) {
		return s1
	}
}

/* OVERLOAD: function getExportSymbolOfValueSymbolIfExported(symbol: Symbol): Symbol; */
/* OVERLOAD: function getExportSymbolOfValueSymbolIfExported(symbol: Symbol | undefined): Symbol | undefined; */
func (c *Checker) getExportSymbolOfValueSymbolIfExported(symbol *ast.Symbol) *ast.Symbol {
	return c.getMergedSymbol(symbol && (symbol.Flags&ast.SymbolFlagsExportValue) != 0 && symbol.ExportSymbol || symbol)
}

func (c *Checker) symbolIsValue(symbol *ast.Symbol, includeTypeOnlyMembers bool) bool {
	return symbol.Flags&ast.SymbolFlagsValue != 0 || symbol.Flags&ast.SymbolFlagsAlias != 0 && c.getSymbolFlags(symbol, !includeTypeOnlyMembers)&ast.SymbolFlagsValue != 0
}

func (c *Checker) createType(flags TypeFlags) *Type {
	result := NewType(c.checker, flags)
	c.typeCount++
	result.id = c.typeCount
	tracing. /* ? */ recordType(result)
	return result
}

func (c *Checker) createTypeWithSymbol(flags TypeFlags, symbol *ast.Symbol) *Type {
	result := c.createType(flags)
	result.symbol = symbol
	return result
}

func (c *Checker) createOriginType(flags TypeFlags) *Type {
	return NewType(c.checker, flags)
}

func (c *Checker) createIntrinsicType(kind TypeFlags, intrinsicName string, objectFlags ObjectFlags /*  = ObjectFlags.None */, debugIntrinsicName string) IntrinsicType {
	c.checkIntrinsicName(intrinsicName, debugIntrinsicName)
	t := c.createType(kind).AsIntrinsicType()
	t.intrinsicName = intrinsicName
	t.debugIntrinsicName = debugIntrinsicName
	t.objectFlags = objectFlags | ObjectFlagsCouldContainTypeVariablesComputed | ObjectFlagsIsGenericTypeComputed | ObjectFlagsIsUnknownLikeUnionComputed | ObjectFlagsIsNeverIntersectionComputed
	return t
}

func (c *Checker) checkIntrinsicName(name string, debug *string) {
	key := __TEMPLATE__(name, ",", ifNotNilElse(debug, ""))
	if c.seenIntrinsicNames.has(key) {
		Debug.fail(__TEMPLATE__("Duplicate intrinsic type name ", name, ifElse(debug, __TEMPLATE__(" (", debug, ")"), ""), "; you may need to pass a name to createIntrinsicType."))
	}
	c.seenIntrinsicNames.add(key)
}

func (c *Checker) createObjectType(objectFlags ObjectFlags, symbol *ast.Symbol) ObjectType {
	t := c.createTypeWithSymbol(TypeFlagsObject, symbol).AsObjectType()
	t.objectFlags = objectFlags
	t.members = nil
	t.properties = nil
	t.callSignatures = nil
	t.constructSignatures = nil
	t.indexInfos = nil
	return t
}

func (c *Checker) createTypeofType() *Type {
	return c.getUnionType(arrayFrom(typeofNEFacts.keys(), c.getStringLiteralType))
}

func (c *Checker) createTypeParameter(symbol *ast.Symbol) TypeParameter {
	return c.createTypeWithSymbol(TypeFlagsTypeParameter, symbol).AsTypeParameter()
}

// A reserved member name starts with two underscores, but the third character cannot be an underscore,
// @, or #. A third underscore indicates an escaped form of an identifier that started
// with at least two underscores. The @ character indicates that the name is denoted by a well known ES
// Symbol instance and the # character indicates that the name is a PrivateIdentifier.
func (c *Checker) isReservedMemberName(name string) bool {
	return (name /* as string */).charCodeAt(0) == CharacterCodes_ && (name /* as string */).charCodeAt(1) == CharacterCodes_ && (name /* as string */).charCodeAt(2) != CharacterCodes_ && (name /* as string */).charCodeAt(2) != CharacterCodesat && (name /* as string */).charCodeAt(2) != CharacterCodeshash
}

func (c *Checker) getNamedMembers(members SymbolTable) []*ast.Symbol {
	var result *[]*ast.Symbol
	members.forEach(func(symbol *ast.Symbol, id string) {
		if c.isNamedMember(symbol, id) {
			(result || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = [] */ TODO)).push(symbol)
		}
	})
	return result || emptyArray
}

func (c *Checker) isNamedMember(member *ast.Symbol, escapedName string) bool {
	return !c.isReservedMemberName(escapedName) && c.symbolIsValue(member)
}

func (c *Checker) getNamedOrIndexSignatureMembers(members SymbolTable) []*ast.Symbol {
	result := c.getNamedMembers(members)
	index := c.getIndexSymbolFromSymbolTable(members)
	if index != nil {
		return core.Concatenate(result, []*ast.Symbol{index})
	} else {
		return result
	}
}

func (c *Checker) setStructuredTypeMembers(t StructuredType, members SymbolTable, callSignatures []Signature, constructSignatures []Signature, indexInfos []IndexInfo) ResolvedType {
	resolved := t.AsResolvedType()
	resolved.members = members
	resolved.properties = emptyArray
	resolved.callSignatures = callSignatures
	resolved.constructSignatures = constructSignatures
	resolved.indexInfos = indexInfos
	// This can loop back to getPropertyOfType() which would crash if `callSignatures` & `constructSignatures` are not initialized.
	if members != c.emptySymbols {
		resolved.properties = c.getNamedMembers(members)
	}
	return resolved
}

func (c *Checker) createAnonymousType(symbol *ast.Symbol, members SymbolTable, callSignatures []Signature, constructSignatures []Signature, indexInfos []IndexInfo) ResolvedType {
	return c.setStructuredTypeMembers(c.createObjectType(ObjectFlagsAnonymous, symbol), members, callSignatures, constructSignatures, indexInfos)
}

func (c *Checker) getResolvedTypeWithoutAbstractConstructSignatures(t ResolvedType) ObjectType {
	if t.constructSignatures.length == 0 {
		return t
	}
	if t.objectTypeWithoutAbstractConstructSignatures != nil {
		return t.objectTypeWithoutAbstractConstructSignatures
	}
	constructSignatures := core.Filter(t.constructSignatures, func(signature Signature) bool {
		return signature.flags&SignatureFlagsAbstract == 0
	})
	if t.constructSignatures == constructSignatures {
		return t
	}
	typeCopy := c.createAnonymousType(t.symbol, t.members, t.callSignatures, ifElse(core.Some(constructSignatures), constructSignatures, emptyArray), t.indexInfos)
	t.objectTypeWithoutAbstractConstructSignatures = typeCopy
	typeCopy.objectTypeWithoutAbstractConstructSignatures = typeCopy
	return typeCopy
}

func (c *Checker) forEachSymbolTableInScope(enclosingDeclaration *ast.Node, callback func(symbolTable SymbolTable, ignoreQualification bool, isLocalNameLookup bool, scopeNode *ast.Node) T) T {
	var result T
	for location := enclosingDeclaration; location != nil; location = location.Parent {
		// Locals of a source file are not in scope (because they get merged into the global symbol table)
		if canHaveLocals(location) && location.Locals != nil && !isGlobalSourceFile(location) {
			if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = callback(location.locals, /*ignoreQualification* / undefined, /*isLocalNameLookup* / true, location) */ TODO {
				return result
			}
		}
		switch location.Kind {
		case ast.KindSourceFile:
			if !isExternalOrCommonJsModule(location.AsSourceFile()) {
				break
			}
			fallthrough
		case ast.KindModuleDeclaration:
			sym := c.getSymbolOfDeclaration(location.AsModuleDeclaration())
			// `sym` may not have exports if this module declaration is backed by the symbol for a `const` that's being rewritten
			// into a namespace - in such cases, it's best to just let the namespace appear empty (the const members couldn't have referred
			// to one another anyway)
			if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = callback(sym?.exports || emptySymbols, /*ignoreQualification* / undefined, /*isLocalNameLookup* / true, location) */ TODO {
				return result
			}
		case ast.KindClassDeclaration,
			ast.KindClassExpression,
			ast.KindInterfaceDeclaration:
			// Type parameters are bound into `members` lists so they can merge across declarations
			// This is troublesome, since in all other respects, they behave like locals :cries:
			// TODO: the below is shared with similar code in `resolveName` - in fact, rephrasing all this symbol
			// lookup logic in terms of `resolveName` would be nice
			// The below is used to lookup type parameters within a class or interface, as they are added to the class/interface locals
			// These can never be latebound, so the symbol's raw members are sufficient. `getMembersOfNode` cannot be used, as it would
			// trigger resolving late-bound names, which we may already be in the process of doing while we're here!
			var table *Map[string, *ast.Symbol]
			// TODO: Should this filtered table be cached in some way?
			(c.getSymbolOfDeclaration(location /* as ClassLikeDeclaration | InterfaceDeclaration */).Members || c.emptySymbols).forEach(func(memberSymbol *ast.Symbol, key string) {
				if memberSymbol.Flags&(ast.SymbolFlagsType & ^ast.SymbolFlagsAssignment) != 0 {
					(table || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: table = createSymbolTable() */ TODO)).set(key, memberSymbol)
				}
			})
			if table != nil && ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = callback(table, /*ignoreQualification* / undefined, /*isLocalNameLookup* / false, location) */ TODO) {
				return result
			}
		}
	}

	return callback(c.globals, nil /*ignoreQualification*/, true /*isLocalNameLookup*/)
}

func (c *Checker) getQualifiedLeftMeaning(rightMeaning SymbolFlags) /* TODO(TS-TO-GO) inferred type SymbolFlags.Value | SymbolFlags.Namespace */ any {
	// If we are looking in value space, the parent meaning is value, other wise it is namespace
	if rightMeaning == ast.SymbolFlagsValue {
		return ast.SymbolFlagsValue
	} else {
		return ast.SymbolFlagsNamespace
	}
}

func (c *Checker) getAccessibleSymbolChain(symbol *ast.Symbol, enclosingDeclaration *ast.Node, meaning SymbolFlags, useOnlyExternalAliasing bool, visitedSymbolTablesMap Map[number, []SymbolTable] /*  = new Map<SymbolId, SymbolTable[]>() */) *[]*ast.Symbol {
	if !(symbol != nil && !c.isPropertyOrMethodDeclarationSymbol(symbol)) {
		return nil
	}
	links := c.getSymbolLinks(symbol)
	cache := ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: links.accessibleChainCache ||= new Map() */ TODO)
	// Go from enclosingDeclaration to the first scope we check, so the cache is keyed off the scope and thus shared more
	firstRelevantLocation := c.forEachSymbolTableInScope(enclosingDeclaration, func(_ SymbolTable, __ *bool, ___ *bool, node *ast.Node) *ast.Node {
		return node
	})
	key := __TEMPLATE__(ifElse(useOnlyExternalAliasing, 0, 1), "|", firstRelevantLocation && getNodeId(firstRelevantLocation), "|", meaning)
	if cache.has(key) {
		return cache.get(key)
	}

	id := getSymbolId(symbol)
	visitedSymbolTables := visitedSymbolTablesMap.get(id)
	if visitedSymbolTables == nil {
		visitedSymbolTablesMap.set(id /* TODO(TS-TO-GO) EqualsToken BinaryExpression: visitedSymbolTables = [] */, TODO)
	}
	result := c.forEachSymbolTableInScope(enclosingDeclaration, getAccessibleSymbolChainFromSymbolTable)
	cache.set(key, result)
	return result
	/**
	 * @param {ignoreQualification} boolean Set when a symbol is being looked for through the exports of another symbol (meaning we have a route to qualify it already)
	 */

	getAccessibleSymbolChainFromSymbolTable := func(symbols SymbolTable, ignoreQualification bool, isLocalNameLookup bool) *[]*ast.Symbol {
		if !pushIfUnique(visitedSymbolTables, symbols) {
			return nil
		}

		result := trySymbolTable(symbols, ignoreQualification, isLocalNameLookup)
		visitedSymbolTables.pop()
		return result
	}

	canQualifySymbol := func(symbolFromSymbolTable *ast.Symbol, meaning SymbolFlags) bool {
		// If the symbol is equivalent and doesn't need further qualification, this symbol is accessible
		return !c.needsQualification(symbolFromSymbolTable, enclosingDeclaration, meaning) || c.getAccessibleSymbolChain(symbolFromSymbolTable.Parent, enclosingDeclaration, c.getQualifiedLeftMeaning(meaning), useOnlyExternalAliasing, visitedSymbolTablesMap) != nil
	}

	isAccessible := func(symbolFromSymbolTable *ast.Symbol, resolvedAliasSymbol *ast.Symbol, ignoreQualification bool) bool {
		return (symbol == (resolvedAliasSymbol || symbolFromSymbolTable) || c.getMergedSymbol(symbol) == c.getMergedSymbol(resolvedAliasSymbol || symbolFromSymbolTable)) && !core.Some(symbolFromSymbolTable.Declarations, c.hasNonGlobalAugmentationExternalModuleSymbol) && (ignoreQualification || canQualifySymbol(c.getMergedSymbol(symbolFromSymbolTable), meaning))
	}

	trySymbolTable := func(symbols SymbolTable, ignoreQualification *bool, isLocalNameLookup *bool) *[]*ast.Symbol {
		// If symbol is directly available by its name in the symbol table
		if isAccessible(symbols.get(symbol.EscapedName), nil /*resolvedAliasSymbol*/, ignoreQualification) {
			return []*ast.Symbol{symbol}
		}

		// Check if symbol is any of the aliases in scope
		result := forEachEntry(symbols, func(symbolFromSymbolTable *ast.Symbol) *[]*ast.Symbol {
			if symbolFromSymbolTable.Flags&ast.SymbolFlagsAlias != 0 && symbolFromSymbolTable.EscapedName != InternalSymbolNameExportEquals && symbolFromSymbolTable.EscapedName != InternalSymbolNameDefault && !(isUMDExportSymbol(symbolFromSymbolTable) && enclosingDeclaration != nil && isExternalModule(getSourceFileOfNode(enclosingDeclaration))) && (!useOnlyExternalAliasing || core.Some(symbolFromSymbolTable.Declarations, isExternalModuleImportEqualsDeclaration)) && (ifElse(isLocalNameLookup, !core.Some(symbolFromSymbolTable.Declarations, isNamespaceReexportDeclaration), true)) && (ignoreQualification || getDeclarationOfKind(symbolFromSymbolTable, ast.KindExportSpecifier) == nil) {
				resolvedImportedSymbol := c.resolveAlias(symbolFromSymbolTable)
				candidate := getCandidateListForSymbol(symbolFromSymbolTable, resolvedImportedSymbol, ignoreQualification)
				if candidate != nil {
					return candidate
				}
			}
			if symbolFromSymbolTable.EscapedName == symbol.EscapedName && symbolFromSymbolTable.ExportSymbol != nil {
				if isAccessible(c.getMergedSymbol(symbolFromSymbolTable.ExportSymbol), nil /*resolvedAliasSymbol*/, ignoreQualification) {
					return []*ast.Symbol{symbol}
				}
			}
		})

		// If there's no result and we're looking at the global symbol table, treat `globalThis` like an alias and try to lookup thru that
		return result || (ifElse(symbols == c.globals, getCandidateListForSymbol(c.globalThisSymbol, c.globalThisSymbol, ignoreQualification), nil))
	}

	getCandidateListForSymbol := func(symbolFromSymbolTable *ast.Symbol, resolvedImportedSymbol *ast.Symbol, ignoreQualification *bool) *[]*ast.Symbol {
		if isAccessible(symbolFromSymbolTable, resolvedImportedSymbol, ignoreQualification) {
			return []*ast.Symbol{symbolFromSymbolTable}
		}

		// Look in the exported members, if we can find accessibleSymbolChain, symbol is accessible using this chain
		// but only if the symbolFromSymbolTable can be qualified
		candidateTable := c.getExportsOfSymbol(resolvedImportedSymbol)
		accessibleSymbolsFromExports := candidateTable && getAccessibleSymbolChainFromSymbolTable(candidateTable, true /*ignoreQualification*/)
		if accessibleSymbolsFromExports != nil && canQualifySymbol(symbolFromSymbolTable, c.getQualifiedLeftMeaning(meaning)) {
			return []*ast.Symbol{symbolFromSymbolTable}.concat(accessibleSymbolsFromExports)
		}
	}

}

func (c *Checker) needsQualification(symbol *ast.Symbol, enclosingDeclaration *ast.Node, meaning SymbolFlags) bool {
	qualify := false
	c.forEachSymbolTableInScope(enclosingDeclaration, func(symbolTable SymbolTable) bool {
		// If symbol of this name is not available in the symbol table we are ok
		symbolFromSymbolTable := c.getMergedSymbol(symbolTable.get(symbol.EscapedName))
		if symbolFromSymbolTable == nil {
			// Continue to the next symbol table
			return false
		}
		// If the symbol with this name is present it should refer to the symbol
		if symbolFromSymbolTable == symbol {
			// No need to qualify
			return true
		}

		// Qualify if the symbol from symbol table has same meaning as expected
		shouldResolveAlias := symbolFromSymbolTable.Flags&ast.SymbolFlagsAlias && getDeclarationOfKind(symbolFromSymbolTable, ast.KindExportSpecifier) == nil
		if shouldResolveAlias {
			symbolFromSymbolTable = c.resolveAlias(symbolFromSymbolTable)
		} else {
			symbolFromSymbolTable = symbolFromSymbolTable
		}
		var flags SymbolFlags
		if shouldResolveAlias {
			flags = c.getSymbolFlags(symbolFromSymbolTable)
		} else {
			flags = symbolFromSymbolTable.Flags
		}
		if flags&meaning != 0 {
			qualify = true
			return true
		}

		// Continue to the next symbol table
		return false
	})

	return qualify
}

func (c *Checker) isPropertyOrMethodDeclarationSymbol(symbol *ast.Symbol) bool {
	if symbol.Declarations != nil && symbol.Declarations.length != 0 {
		for _, declaration := range symbol.Declarations {
			switch declaration.Kind {
			case ast.KindPropertyDeclaration,
				ast.KindMethodDeclaration,
				ast.KindGetAccessor,
				ast.KindSetAccessor:
				continue
			default:
				return false
			}
		}
		return true
	}
	return false
}

func (c *Checker) isTypeSymbolAccessible(typeSymbol *ast.Symbol, enclosingDeclaration *ast.Node) bool {
	access := c.isSymbolAccessibleWorker(typeSymbol, enclosingDeclaration, ast.SymbolFlagsType, false /*shouldComputeAliasesToMakeVisible*/, true /*allowModules*/)
	return access.accessibility == SymbolAccessibilityAccessible
}

func (c *Checker) isValueSymbolAccessible(typeSymbol *ast.Symbol, enclosingDeclaration *ast.Node) bool {
	access := c.isSymbolAccessibleWorker(typeSymbol, enclosingDeclaration, ast.SymbolFlagsValue, false /*shouldComputeAliasesToMakeVisible*/, true /*allowModules*/)
	return access.accessibility == SymbolAccessibilityAccessible
}

func (c *Checker) isSymbolAccessibleByFlags(typeSymbol *ast.Symbol, enclosingDeclaration *ast.Node, flags SymbolFlags) bool {
	access := c.isSymbolAccessibleWorker(typeSymbol, enclosingDeclaration, flags, false /*shouldComputeAliasesToMakeVisible*/, false /*allowModules*/)
	return access.accessibility == SymbolAccessibilityAccessible
}

func (c *Checker) isAnySymbolAccessible(symbols *[]*ast.Symbol, enclosingDeclaration *ast.Node, initialSymbol *ast.Symbol, meaning SymbolFlags, shouldComputeAliasesToMakeVisible bool, allowModules bool) *SymbolAccessibilityResult {
	if length(symbols) == 0 {
		return
	}

	var hadAccessibleChain *ast.Symbol
	earlyModuleBail := false
	for _, symbol := range symbols {
		// Symbol is accessible if it by itself is accessible
		accessibleSymbolChain := c.getAccessibleSymbolChain(symbol, enclosingDeclaration, meaning, false /*useOnlyExternalAliasing*/)
		if accessibleSymbolChain != nil {
			hadAccessibleChain = symbol
			hasAccessibleDeclarations := c.hasVisibleDeclarations(accessibleSymbolChain[0], shouldComputeAliasesToMakeVisible)
			if hasAccessibleDeclarations != nil {
				return hasAccessibleDeclarations
			}
		}
		if allowModules {
			if core.Some(symbol.Declarations, c.hasNonGlobalAugmentationExternalModuleSymbol) {
				if shouldComputeAliasesToMakeVisible {
					earlyModuleBail = true
					// Generally speaking, we want to use the aliases that already exist to refer to a module, if present
					// In order to do so, we need to find those aliases in order to retain them in declaration emit; so
					// if we are in declaration emit, we cannot use the fast path for module visibility until we've exhausted
					// all other visibility options (in order to capture the possible aliases used to reference the module)
					continue
				}
				// Any meaning of a module symbol is always accessible via an `import` type
				return &SymbolAccessibilityResult{
					accessibility: SymbolAccessibilityAccessible,
				}
			}
		}

		// If we haven't got the accessible symbol, it doesn't mean the symbol is actually inaccessible.
		// It could be a qualified symbol and hence verify the path
		// e.g.:
		// module m {
		//     export class c {
		//     }
		// }
		// const x: typeof m.c
		// In the above example when we start with checking if typeof m.c symbol is accessible,
		// we are going to see if c can be accessed in scope directly.
		// But it can't, hence the accessible is going to be undefined, but that doesn't mean m.c is inaccessible
		// It is accessible if the parent m is accessible because then m.c can be accessed through qualification

		containers := c.getContainersOfSymbol(symbol, enclosingDeclaration, meaning)
		parentResult := c.isAnySymbolAccessible(containers, enclosingDeclaration, initialSymbol, ifElse(initialSymbol == symbol, c.getQualifiedLeftMeaning(meaning), meaning), shouldComputeAliasesToMakeVisible, allowModules)
		if parentResult != nil {
			return parentResult
		}
	}

	if earlyModuleBail {
		return &SymbolAccessibilityResult{
			accessibility: SymbolAccessibilityAccessible,
		}
	}

	if hadAccessibleChain != nil {
		return &SymbolAccessibilityResult{
			accessibility:   SymbolAccessibilityNotAccessible,
			errorSymbolName: c.symbolToString(initialSymbol, enclosingDeclaration, meaning),
			errorModuleName: ifElse(hadAccessibleChain != initialSymbol, c.symbolToString(hadAccessibleChain, enclosingDeclaration, ast.SymbolFlagsNamespace), nil),
		}
	}
}

/**
 * Check if the given symbol in given enclosing declaration is accessible and mark all associated alias to be visible if requested
 *
 * @param symbol a Symbol to check if accessible
 * @param enclosingDeclaration a Node containing reference to the symbol
 * @param meaning a SymbolFlags to check if such meaning of the symbol is accessible
 * @param shouldComputeAliasToMakeVisible a boolean value to indicate whether to return aliases to be mark visible in case the symbol is accessible
 */

func (c *Checker) isSymbolAccessible(symbol *ast.Symbol, enclosingDeclaration *ast.Node, meaning SymbolFlags, shouldComputeAliasesToMakeVisible bool) SymbolAccessibilityResult {
	return c.isSymbolAccessibleWorker(symbol, enclosingDeclaration, meaning, shouldComputeAliasesToMakeVisible, true /*allowModules*/)
}

func (c *Checker) isSymbolAccessibleWorker(symbol *ast.Symbol, enclosingDeclaration *ast.Node, meaning SymbolFlags, shouldComputeAliasesToMakeVisible bool, allowModules bool) SymbolAccessibilityResult {
	if symbol != nil && enclosingDeclaration != nil {
		result := c.isAnySymbolAccessible([]*ast.Symbol{symbol}, enclosingDeclaration, symbol, meaning, shouldComputeAliasesToMakeVisible, allowModules)
		if result != nil {
			return result
		}

		// This could be a symbol that is not exported in the external module
		// or it could be a symbol from different external module that is not aliased and hence cannot be named
		symbolExternalModule := forEach(symbol.Declarations, c.getExternalModuleContainer)
		if symbolExternalModule != nil {
			enclosingExternalModule := c.getExternalModuleContainer(enclosingDeclaration)
			if symbolExternalModule != enclosingExternalModule {
				// name from different external module that is not visible
				return SymbolAccessibilityResult{
					accessibility:   SymbolAccessibilityCannotBeNamed,
					errorSymbolName: c.symbolToString(symbol, enclosingDeclaration, meaning),
					errorModuleName: c.symbolToString(symbolExternalModule),
					errorNode:       ifElse(isInJSFile(enclosingDeclaration), enclosingDeclaration, nil),
				}
			}
		}

		// Just a local name that is not accessible
		return SymbolAccessibilityResult{
			accessibility:   SymbolAccessibilityNotAccessible,
			errorSymbolName: c.symbolToString(symbol, enclosingDeclaration, meaning),
		}
	}

	return SymbolAccessibilityResult{
		accessibility: SymbolAccessibilityAccessible,
	}
}

func (c *Checker) getExternalModuleContainer(declaration *ast.Node) *ast.Symbol {
	node := findAncestor(declaration, c.hasExternalModuleSymbol)
	return node && c.getSymbolOfDeclaration(node /* as AmbientModuleDeclaration | SourceFile */)
}

func (c *Checker) hasExternalModuleSymbol(declaration *ast.Node) bool {
	return isAmbientModule(declaration) || (declaration.Kind == ast.KindSourceFile && isExternalOrCommonJsModule(declaration.AsSourceFile()))
}

func (c *Checker) hasNonGlobalAugmentationExternalModuleSymbol(declaration *ast.Node) bool {
	return isModuleWithStringLiteralName(declaration) || (declaration.Kind == ast.KindSourceFile && isExternalOrCommonJsModule(declaration.AsSourceFile()))
}

func (c *Checker) hasVisibleDeclarations(symbol *ast.Symbol, shouldComputeAliasToMakeVisible bool) *SymbolVisibilityResult {
	var aliasesToMakeVisible *[]LateVisibilityPaintedStatement
	if !core.Every(core.Filter(symbol.Declarations, func(d Declaration) bool {
		return d.Kind != ast.KindIdentifier
	}), getIsDeclarationVisible) {
		return nil
	}
	return &SymbolVisibilityResult{
		accessibility:        SymbolAccessibilityAccessible,
		aliasesToMakeVisible: aliasesToMakeVisible,
	}

	getIsDeclarationVisible := func(declaration Declaration) bool {
		if !c.isDeclarationVisible(declaration) {
			// Mark the unexported alias as visible if its parent is visible
			// because these kind of aliases can be used to name types in declaration file

			anyImportSyntax := c.getAnyImportSyntax(declaration)
			if anyImportSyntax != nil && !hasSyntacticModifier(anyImportSyntax, ast.ModifierFlagsExport) && c.isDeclarationVisible(anyImportSyntax.Parent) {
				return addVisibleAlias(declaration, anyImportSyntax)
			} else if isVariableDeclaration(declaration) && isVariableStatement(declaration.Parent.Parent) && !hasSyntacticModifier(declaration.Parent.Parent, ast.ModifierFlagsExport) && c.isDeclarationVisible(declaration.Parent.Parent.Parent) {
				return addVisibleAlias(declaration, declaration.Parent.Parent)
			} else if isLateVisibilityPaintedStatement(declaration) && !hasSyntacticModifier(declaration, ast.ModifierFlagsExport) && c.isDeclarationVisible(declaration.Parent) {
				return addVisibleAlias(declaration, declaration)
			} else if isBindingElement(declaration) {
				if symbol.Flags&ast.SymbolFlagsAlias != 0 && isInJSFile(declaration) && declaration.Parent. /* ? */ Parent && isVariableDeclaration(declaration.Parent.Parent) && declaration.Parent.Parent.Parent. /* ? */ Parent && isVariableStatement(declaration.Parent.Parent.Parent.Parent) && !hasSyntacticModifier(declaration.Parent.Parent.Parent.Parent, ast.ModifierFlagsExport) && declaration.Parent.Parent.Parent.Parent.Parent && c.isDeclarationVisible(declaration.Parent.Parent.Parent.Parent.Parent) {
					return addVisibleAlias(declaration, declaration.Parent.Parent.Parent.Parent)
				} else if symbol.Flags&ast.SymbolFlagsBlockScopedVariable != 0 {
					variableStatement := findAncestor(declaration, isVariableStatement)
					if hasSyntacticModifier(variableStatement, ast.ModifierFlagsExport) {
						return true
					}
					if !c.isDeclarationVisible(variableStatement.Parent) {
						return false
					}
					return addVisibleAlias(declaration, variableStatement)
				}
			}

			// Declaration is not visible
			return false
		}

		return true
	}

	addVisibleAlias := func(declaration Declaration, aliasingStatement LateVisibilityPaintedStatement) bool {
		// In function "buildTypeDisplay" where we decide whether to write type-alias or serialize types,
		// we want to just check if type- alias is accessible or not but we don't care about emitting those alias at that time
		// since we will do the emitting later in trackSymbol.
		if shouldComputeAliasToMakeVisible {
			c.getNodeLinks(declaration).isVisible = true
			aliasesToMakeVisible = core.AppendIfUnique(aliasesToMakeVisible, aliasingStatement)
		}
		return true
	}

}

func (c *Checker) getMeaningOfEntityNameReference(entityName EntityNameOrEntityNameExpression) SymbolFlags {
	// get symbol of the first identifier of the entityName
	var meaning SymbolFlags
	if entityName.Parent.Kind == ast.KindTypeQuery || entityName.Parent.Kind == ast.KindExpressionWithTypeArguments && !isPartOfTypeNode(entityName.Parent) || entityName.Parent.Kind == ast.KindComputedPropertyName || entityName.Parent.Kind == ast.KindTypePredicate && entityName.Parent.AsTypePredicateNode().ParameterName == entityName {
		// Typeof value
		meaning = ast.SymbolFlagsValue | ast.SymbolFlagsExportValue
	} else if entityName.Kind == ast.KindQualifiedName || entityName.Kind == ast.KindPropertyAccessExpression || entityName.Parent.Kind == ast.KindImportEqualsDeclaration || (entityName.Parent.Kind == ast.KindQualifiedName && entityName.Parent.AsQualifiedName().Left == entityName) || (entityName.Parent.Kind == ast.KindPropertyAccessExpression && entityName.Parent.AsPropertyAccessExpression().Expression == entityName) || (entityName.Parent.Kind == ast.KindElementAccessExpression && entityName.Parent.AsElementAccessExpression().Expression == entityName) {
		// Left identifier from type reference or TypeAlias
		// Entity name of the import declaration
		meaning = ast.SymbolFlagsNamespace
	} else {
		// Type Reference or TypeAlias entity = Identifier
		meaning = ast.SymbolFlagsType
	}
	return meaning
}

func (c *Checker) isEntityNameVisible(entityName EntityNameOrEntityNameExpression, enclosingDeclaration *ast.Node, shouldComputeAliasToMakeVisible bool /*  = true */) SymbolVisibilityResult {
	meaning := c.getMeaningOfEntityNameReference(entityName)
	firstIdentifier := getFirstIdentifier(entityName)
	symbol := c.resolveName(enclosingDeclaration, firstIdentifier.EscapedText, meaning, nil /*nameNotFoundMessage*/, false /*isUse*/)
	if symbol != nil && symbol.Flags&ast.SymbolFlagsTypeParameter != 0 && meaning&ast.SymbolFlagsType != 0 {
		return SymbolVisibilityResult{
			accessibility: SymbolAccessibilityAccessible,
		}
	}
	if symbol == nil && isThisIdentifier(firstIdentifier) && c.isSymbolAccessible(c.getSymbolOfDeclaration(getThisContainer(firstIdentifier, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)), firstIdentifier, meaning, false /*shouldComputeAliasesToMakeVisible*/).accessibility == SymbolAccessibilityAccessible {
		return SymbolVisibilityResult{
			accessibility: SymbolAccessibilityAccessible,
		}
	}

	if symbol == nil {
		return SymbolVisibilityResult{
			accessibility:   SymbolAccessibilityNotResolved,
			errorSymbolName: getTextOfNode(firstIdentifier),
			errorNode:       firstIdentifier,
		}
	}
	// Verify if the symbol is accessible
	return c.hasVisibleDeclarations(symbol, shouldComputeAliasToMakeVisible) || SymbolVisibilityResult{
		accessibility:   SymbolAccessibilityNotAccessible,
		errorSymbolName: getTextOfNode(firstIdentifier),
		errorNode:       firstIdentifier,
	}
}

func (c *Checker) symbolToString(symbol *ast.Symbol, enclosingDeclaration *ast.Node, meaning SymbolFlags, flags SymbolFormatFlags /*  = SymbolFormatFlags.AllowAnyNodeKind */, writer EmitTextWriter) string {
	nodeFlags := NodeBuilderFlagsIgnoreErrors
	internalNodeFlags := InternalNodeBuilderFlagsNone
	if flags&SymbolFormatFlagsUseOnlyExternalAliasing != 0 {
		nodeFlags |= NodeBuilderFlagsUseOnlyExternalAliasing
	}
	if flags&SymbolFormatFlagsWriteTypeParametersOrArguments != 0 {
		nodeFlags |= NodeBuilderFlagsWriteTypeParametersInQualifiedName
	}
	if flags&SymbolFormatFlagsUseAliasDefinedOutsideCurrentScope != 0 {
		nodeFlags |= NodeBuilderFlagsUseAliasDefinedOutsideCurrentScope
	}
	if flags&SymbolFormatFlagsDoNotIncludeSymbolChain != 0 {
		internalNodeFlags |= InternalNodeBuilderFlagsDoNotIncludeSymbolChain
	}
	if flags&SymbolFormatFlagsWriteComputedProps != 0 {
		internalNodeFlags |= InternalNodeBuilderFlagsWriteComputedProps
	}
	var builder /* TODO(TS-TO-GO) inferred type ((symbol: Symbol, meaning: SymbolFlags, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => EntityName | undefined) | ((symbol: Symbol, meaning: SymbolFlags, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => Expression | ComputedPropertyName | undefined) */ any
	if flags&SymbolFormatFlagsAllowAnyNodeKind != 0 {
		builder = c.nodeBuilder.symbolToNode
	} else {
		builder = c.nodeBuilder.symbolToEntityName
	}
	if writer != nil {
		return symbolToStringWorker(writer).getText()
	} else {
		return usingSingleLineStringWriter(symbolToStringWorker)
	}

	symbolToStringWorker := func(writer EmitTextWriter) EmitTextWriter {
		entity := builder(symbol, meaning, enclosingDeclaration, nodeFlags, internalNodeFlags)
		// add neverAsciiEscape for GH#39027
		var printer Printer
		if enclosingDeclaration. /* ? */ kind == ast.KindSourceFile {
			printer = createPrinterWithRemoveCommentsNeverAsciiEscape()
		} else {
			printer = createPrinterWithRemoveComments()
		}
		sourceFile := enclosingDeclaration && getSourceFileOfNode(enclosingDeclaration)
		printer.writeNode(EmitHintUnspecified, entity, sourceFile /*sourceFile*/, writer)
		return writer
	}

}

func (c *Checker) signatureToString(signature Signature, enclosingDeclaration *ast.Node, flags TypeFormatFlags /*  = TypeFormatFlags.None */, kind SignatureKind, writer EmitTextWriter) string {
	if writer != nil {
		return signatureToStringWorker(writer).getText()
	} else {
		return usingSingleLineStringWriter(signatureToStringWorker)
	}

	signatureToStringWorker := func(writer EmitTextWriter) EmitTextWriter {
		var sigOutput SyntaxKind
		if flags&TypeFormatFlagsWriteArrowStyleSignature != 0 {
			if kind == SignatureKindConstruct {
				sigOutput = ast.KindConstructorType
			} else {
				sigOutput = ast.KindFunctionType
			}
		} else {
			if kind == SignatureKindConstruct {
				sigOutput = ast.KindConstructSignature
			} else {
				sigOutput = ast.KindCallSignature
			}
		}
		sig := c.nodeBuilder.signatureToSignatureDeclaration(signature, sigOutput, enclosingDeclaration, c.toNodeBuilderFlags(flags)|NodeBuilderFlagsIgnoreErrors|NodeBuilderFlagsWriteTypeParametersInQualifiedName)
		printer := createPrinterWithRemoveCommentsOmitTrailingSemicolon()
		sourceFile := enclosingDeclaration && getSourceFileOfNode(enclosingDeclaration)
		printer.writeNode(EmitHintUnspecified, sig, sourceFile /*sourceFile*/, getTrailingSemicolonDeferringWriter(writer))
		// TODO: GH#18217
		return writer
	}

}

func (c *Checker) typeToString(t *Type, enclosingDeclaration *ast.Node, flags TypeFormatFlags /*  = TypeFormatFlags.AllowUniqueESSymbolType | TypeFormatFlags.UseAliasDefinedOutsideCurrentScope */, writer EmitTextWriter /*  = createTextWriter("") */) string {
	noTruncation := c.compilerOptions.noErrorTruncation || flags&TypeFormatFlagsNoTruncation
	typeNode := c.nodeBuilder.typeToTypeNode(t, enclosingDeclaration, c.toNodeBuilderFlags(flags)|NodeBuilderFlagsIgnoreErrors|(ifElse(noTruncation, NodeBuilderFlagsNoTruncation, NodeBuilderFlagsNone)), nil /*internalFlags*/)
	if typeNode == nil {
		return Debug.fail("should always get typenode")
	}
	// The unresolved type gets a synthesized comment on `any` to hint to users that it's not a plain `any`.
	// Otherwise, we always strip comments out.
	var printer Printer
	if t != c.unresolvedType {
		printer = createPrinterWithRemoveComments()
	} else {
		printer = createPrinterWithDefaults()
	}
	sourceFile := enclosingDeclaration && getSourceFileOfNode(enclosingDeclaration)
	printer.writeNode(EmitHintUnspecified, typeNode, sourceFile /*sourceFile*/, writer)
	result := writer.getText()

	var maxLength number
	if noTruncation {
		maxLength = noTruncationMaximumTruncationLength * 2
	} else {
		maxLength = defaultMaximumTruncationLength * 2
	}
	if maxLength != 0 && result != "" && result.length >= maxLength {
		return result.substr(0, maxLength-len("...")) + "..."
	}
	return result
}

func (c *Checker) getTypeNamesForErrorDisplay(left *Type, right *Type) /* TODO(TS-TO-GO) TypeNode TupleType: [string, string] */ any {
	var leftStr string
	if c.symbolValueDeclarationIsContextSensitive(left.symbol) {
		leftStr = c.typeToString(left, left.symbol.ValueDeclaration)
	} else {
		leftStr = c.typeToString(left)
	}
	var rightStr string
	if c.symbolValueDeclarationIsContextSensitive(right.symbol) {
		rightStr = c.typeToString(right, right.symbol.ValueDeclaration)
	} else {
		rightStr = c.typeToString(right)
	}
	if leftStr == rightStr {
		leftStr = c.getTypeNameForErrorDisplay(left)
		rightStr = c.getTypeNameForErrorDisplay(right)
	}
	return []any{leftStr, rightStr}
}

func (c *Checker) getTypeNameForErrorDisplay(t *Type) string {
	return c.typeToString(t, nil /*enclosingDeclaration*/, TypeFormatFlagsUseFullyQualifiedType)
}

func (c *Checker) symbolValueDeclarationIsContextSensitive(symbol *ast.Symbol) bool {
	return symbol && symbol.ValueDeclaration != nil && isExpression(symbol.ValueDeclaration) && !c.isContextSensitive(symbol.ValueDeclaration)
}

func (c *Checker) toNodeBuilderFlags(flags TypeFormatFlags /*  = TypeFormatFlags.None */) NodeBuilderFlags {
	return flags & TypeFormatFlagsNodeBuilderFlagsMask
}

func (c *Checker) isClassInstanceSide(t *Type) bool {
	return t.symbol && t.symbol.Flags&ast.SymbolFlagsClass != 0 && (t == c.getDeclaredTypeOfClassOrInterface(t.symbol) || (t.flags&TypeFlagsObject != 0 && getObjectFlags(t)&ObjectFlagsIsClassInstanceClone != 0))
}

/**
 * Same as getTypeFromTypeNode, but for use in createNodeBuilder
 * Inside createNodeBuilder we shadow getTypeFromTypeNode to make sure anyone using this function will call the local version that does type mapping if appropriate
 * This function is used to still be able to call the original getTypeFromTypeNode from the local scope version of getTypeFromTypeNode
 */

func (c *Checker) getTypeFromTypeNodeWithoutContext(node TypeNode) *Type {
	return c.getTypeFromTypeNode(node)
}

func (c *Checker) createNodeBuilder() /* TODO(TS-TO-GO) inferred type { typeToTypeNode: (type: Type, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => TypeNode | undefined; typePredicateToTypePredicateNode: (typePredicate: TypePredicate, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => TypePredicateNode | undefined; expressionOrTypeToTypeNode: (expr: Expression | JsxAttributeValue | undefined, type: Type, addUndefined?: boolean, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => TypeNode | undefined; serializeTypeForDeclaration: (declaration: Declaration, type: Type, symbol: Symbol, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => TypeNode | undefined; serializeReturnTypeForSignature: (signature: Signature, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => TypeNode | undefined; indexInfoToIndexSignatureDeclaration: (indexInfo: IndexInfo, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => IndexSignatureDeclaration | undefined; signatureToSignatureDeclaration: (signature: Signature, kind: SignatureDeclaration["kind"], enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => SignatureDeclaration | undefined; symbolToEntityName: (symbol: Symbol, meaning: SymbolFlags, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => EntityName | undefined; symbolToExpression: (symbol: Symbol, meaning: SymbolFlags, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => Expression | undefined; symbolToTypeParameterDeclarations: (symbol: Symbol, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => NodeArray<TypeParameterDeclaration> | undefined; symbolToParameterDeclaration: (symbol: Symbol, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => ParameterDeclaration | undefined; typeParameterToDeclaration: (parameter: TypeParameter, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => TypeParameterDeclaration | undefined; symbolTableToDeclarationStatements: (symbolTable: SymbolTable, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => Statement[] | undefined; symbolToNode: (symbol: Symbol, meaning: SymbolFlags, enclosingDeclaration?: Node, flags?: NodeBuilderFlags, internalFlags?: InternalNodeBuilderFlags, tracker?: SymbolTracker) => Expression | ComputedPropertyName | undefined; } */ any {
	return map[any]any{ /* TODO(TS-TO-GO): was object literal */
		"typeToTypeNode": func(t *Type, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *TypeNode {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) TypeNode {
				return typeToTypeNodeHelper(t, context)
			})
		},
		"typePredicateToTypePredicateNode": func(typePredicate TypePredicate, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *TypePredicateNode {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) TypePredicateNode {
				return typePredicateToTypePredicateNodeHelper(typePredicate, context)
			})
		},
		"expressionOrTypeToTypeNode": func(expr Union[Expression, JsxAttributeValue, undefined], t *Type, addUndefined bool, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *TypeNode {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) TypeNode {
				return expressionOrTypeToTypeNode(context, expr, t, addUndefined)
			})
		},
		"serializeTypeForDeclaration": func(declaration Declaration, t *Type, symbol *ast.Symbol, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *TypeNode {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) TypeNode {
				return serializeTypeForDeclaration(context, declaration, t, symbol)
			})
		},
		"serializeReturnTypeForSignature": func(signature Signature, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *TypeNode {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) *TypeNode {
				return serializeReturnTypeForSignature(context, signature)
			})
		},
		"indexInfoToIndexSignatureDeclaration": func(indexInfo IndexInfo, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *IndexSignatureDeclaration {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) IndexSignatureDeclaration {
				return indexInfoToIndexSignatureDeclarationHelper(indexInfo, context, nil /*typeNode*/)
			})
		},
		"signatureToSignatureDeclaration": func(signature Signature, kind /* TODO(TS-TO-GO) TypeNode IndexedAccessType: SignatureDeclaration["kind"] */ any, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *SignatureDeclaration {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) SignatureDeclaration {
				return signatureToSignatureDeclarationHelper(signature, kind, context)
			})
		},
		"symbolToEntityName": func(symbol *ast.Symbol, meaning SymbolFlags, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *EntityName {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) EntityName {
				return symbolToName(symbol, context, meaning, false /*expectsIdentifier*/)
			})
		},
		"symbolToExpression": func(symbol *ast.Symbol, meaning SymbolFlags, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) Expression {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) Expression {
				return symbolToExpression(symbol, context, meaning)
			})
		},
		"symbolToTypeParameterDeclarations": func(symbol *ast.Symbol, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *NodeArray[TypeParameterDeclaration] {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) *NodeArray[TypeParameterDeclaration] {
				return typeParametersToTypeParameterDeclarations(symbol, context)
			})
		},
		"symbolToParameterDeclaration": func(symbol *ast.Symbol, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *ParameterDeclaration {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) ParameterDeclaration {
				return symbolToParameterDeclaration(symbol, context)
			})
		},
		"typeParameterToDeclaration": func(parameter TypeParameter, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *TypeParameterDeclaration {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) TypeParameterDeclaration {
				return typeParameterToDeclaration(parameter, context)
			})
		},
		"symbolTableToDeclarationStatements": func(symbolTable SymbolTable, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *[]Statement {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) []Statement {
				return symbolTableToDeclarationStatements(symbolTable, context)
			})
		},
		"symbolToNode": func(symbol *ast.Symbol, meaning SymbolFlags, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) * /* TODO(TS-TO-GO) inferred type Expression | ComputedPropertyName */ any {
			return withContext(enclosingDeclaration, flags, internalFlags, tracker, func(context NodeBuilderContext) /* TODO(TS-TO-GO) inferred type Expression | ComputedPropertyName */ any {
				return symbolToNode(symbol, context, meaning)
			})
		},
	}

	/* OVERLOAD: function getTypeFromTypeNode(context: NodeBuilderContext, node: TypeNode, noMappedTypes?: false): Type; */
	/* OVERLOAD: function getTypeFromTypeNode(context: NodeBuilderContext, node: TypeNode, noMappedTypes: true): Type | undefined; */
	getTypeFromTypeNode := func(context NodeBuilderContext, node TypeNode, noMappedTypes bool) *Type {
		t := c.getTypeFromTypeNodeWithoutContext(node)
		if context.mapper == nil {
			return t
		}

		mappedType := c.instantiateType(t, context.mapper)
		if noMappedTypes && mappedType != t {
			return nil
		} else {
			return mappedType
		}
	}

	/**
	 * Unlike the utilities `setTextRange`, this checks if the `location` we're trying to set on `range` is within the
	 * same file as the active context. If not, the range is not applied. This prevents us from copying ranges across files,
	 * which will confuse the node printer (as it assumes all node ranges are within the current file).
	 * Additionally, if `range` _isn't synthetic_, or isn't in the current file, it will _copy_ it to _remove_ its' position
	 * information.
	 *
	 * It also calls `setOriginalNode` to setup a `.original` pointer, since you basically *always* want these in the node builder.
	 */

	setTextRange := func(context NodeBuilderContext, range_ T, location *ast.Node) T {
		if !nodeIsSynthesized(range_) || range_.Flags&ast.NodeFlagsSynthesized == 0 || context.enclosingFile == nil || context.enclosingFile != getSourceFileOfNode(getOriginalNode(range_)) {
			range_ = factory.cloneNode(range_)
			// if `range` is synthesized or originates in another file, copy it so it definitely has synthetic positions
		}
		if range_ == location {
			return range_
		}
		if location == nil {
			return range_
		}
		// Don't overwrite the original node if `range` has an `original` node that points either directly or indirectly to `location`
		original := range_.Original
		for original != nil && original != location {
			original = original.Original
		}
		if original == nil {
			setOriginalNode(range_, location)
		}
		// only set positions if range comes from the same file since copying text across files isn't supported by the emitter
		if context.enclosingFile != nil && context.enclosingFile == getSourceFileOfNode(getOriginalNode(location)) {
			return setTextRangeWorker(range_, location)
		}
		return range_
	}

	/**
	 * Same as expressionOrTypeToTypeNodeHelper, but also checks if the expression can be syntactically typed.
	 */

	expressionOrTypeToTypeNode := func(context NodeBuilderContext, expr Union[Expression, JsxAttributeValue, undefined], t *Type, addUndefined bool) TypeNode {
		restoreFlags := saveRestoreFlags(context)
		if expr != nil && context.internalFlags&InternalNodeBuilderFlagsNoSyntacticPrinter == 0 {
			c.syntacticNodeBuilder.serializeTypeOfExpression(expr, context, addUndefined)
		}
		context.internalFlags |= InternalNodeBuilderFlagsNoSyntacticPrinter
		result := expressionOrTypeToTypeNodeHelper(context, expr, t, addUndefined)
		restoreFlags()
		return result
	}

	expressionOrTypeToTypeNodeHelper := func(context NodeBuilderContext, expr Union[Expression, JsxAttributeValue, undefined], t *Type, addUndefined bool) TypeNode {
		if expr != nil {
			var typeNode *TypeNode
			switch {
			case isAssertionExpression(expr):
				typeNode = expr.Type_
			case isJSDocTypeAssertion(expr):
				typeNode = getJSDocTypeAssertionType(expr)
			default:
				typeNode = nil
			}
			if typeNode != nil && !isConstTypeReference(typeNode) {
				result := tryReuseExistingTypeNode(context, typeNode, t, expr.Parent, addUndefined)
				if result != nil {
					return result
				}
			}
		}

		if addUndefined {
			t = c.getOptionalType(t)
		}

		return typeToTypeNodeHelper(t, context)
	}

	tryReuseExistingTypeNode := func(context NodeBuilderContext, typeNode TypeNode, t *Type, host *ast.Node, addUndefined bool) *TypeNode {
		originalType := t
		if addUndefined {
			t = c.getOptionalType(t, !isParameter(host))
		}
		clone := tryReuseExistingNonParameterTypeNode(context, typeNode, t, host)
		if clone != nil {
			// explicitly add `| undefined` if it's missing from the input type nodes and the type contains `undefined` (and not the missing type)
			if addUndefined && c.containsNonMissingUndefinedType(t) && !c.someType(getTypeFromTypeNode(context, typeNode), func(t *Type) bool {
				return t.flags&TypeFlagsUndefined != 0
			}) {
				return factory.createUnionTypeNode([]TypeNode{clone, factory.createKeywordTypeNode(ast.KindUndefinedKeyword)})
			}
			return clone
		}
		if addUndefined && originalType != t {
			cloneMissingUndefined := tryReuseExistingNonParameterTypeNode(context, typeNode, originalType, host)
			if cloneMissingUndefined != nil {
				return factory.createUnionTypeNode([]TypeNode{cloneMissingUndefined, factory.createKeywordTypeNode(ast.KindUndefinedKeyword)})
			}
		}
		return nil
	}

	tryReuseExistingNonParameterTypeNode := func(context NodeBuilderContext, existing TypeNode, t *Type, host *ast.Node /*  = context.enclosingDeclaration */, annotationType *Type /*  = getTypeFromTypeNode(context, existing, /*noMappedTypes* / true) */) *TypeNode {
		if annotationType != nil && typeNodeIsEquivalentToType(host, t, annotationType) && existingTypeNodeIsNotReferenceOrIsReferenceWithCompatibleTypeArgumentCount(existing, t) {
			result := tryReuseExistingTypeNodeHelper(context, existing)
			if result != nil {
				return result
			}
		}
		return nil
	}

	symbolToNode := func(symbol *ast.Symbol, context NodeBuilderContext, meaning SymbolFlags) /* TODO(TS-TO-GO) inferred type Expression | ComputedPropertyName */ any {
		if context.internalFlags&InternalNodeBuilderFlagsWriteComputedProps != 0 {
			if symbol.ValueDeclaration != nil {
				name := getNameOfDeclaration(symbol.ValueDeclaration)
				if name != nil && isComputedPropertyName(name) {
					return name
				}
			}
			nameType := c.getSymbolLinks(symbol).nameType
			if nameType != nil && nameType.flags&(TypeFlagsEnumLiteral|TypeFlagsUniqueESSymbol) != 0 {
				context.enclosingDeclaration = nameType.symbol.ValueDeclaration
				return factory.createComputedPropertyName(symbolToExpression(nameType.symbol, context, meaning))
			}
		}
		return symbolToExpression(symbol, context, meaning)
	}

	withContext := func(enclosingDeclaration *ast.Node, flags *NodeBuilderFlags, internalFlags *InternalNodeBuilderFlags, tracker *SymbolTracker, cb func(context NodeBuilderContext) T) *T {
		var moduleResolverHost *ModuleSpecifierResolutionHost
		switch {
		case tracker. /* ? */ trackSymbol != nil:
			moduleResolverHost = tracker.moduleResolverHost
		case (internalFlags || InternalNodeBuilderFlagsNone)&InternalNodeBuilderFlagsDoNotIncludeSymbolChain != 0:
			moduleResolverHost = createBasicNodeBuilderModuleSpecifierResolutionHost(host)
		default:
			moduleResolverHost = nil
		}
		var context NodeBuilderContext = NodeBuilderContext{
			enclosingDeclaration:                  enclosingDeclaration,
			enclosingFile:                         enclosingDeclaration && getSourceFileOfNode(enclosingDeclaration),
			flags:                                 flags || NodeBuilderFlagsNone,
			internalFlags:                         internalFlags || InternalNodeBuilderFlagsNone,
			tracker:                               nil,
			encounteredError:                      false,
			reportedDiagnostic:                    false,
			visitedTypes:                          nil,
			symbolDepth:                           nil,
			inferTypeParameters:                   nil,
			approximateLength:                     0,
			trackedSymbols:                        nil,
			bundled:                               c.compilerOptions.outFile && enclosingDeclaration != nil && isExternalOrCommonJsModule(getSourceFileOfNode(enclosingDeclaration)),
			truncating:                            false,
			usedSymbolNames:                       nil,
			remappedSymbolNames:                   nil,
			remappedSymbolReferences:              nil,
			reverseMappedStack:                    nil,
			mustCreateTypeParameterSymbolList:     true,
			typeParameterSymbolList:               nil,
			mustCreateTypeParametersNamesLookups:  true,
			typeParameterNames:                    nil,
			typeParameterNamesByText:              nil,
			typeParameterNamesByTextNextNameCount: nil,
			mapper:                                nil,
		}
		context.tracker = NewSymbolTrackerImpl(context, tracker, moduleResolverHost)
		resultingNode := cb(context)
		if context.truncating && context.flags&NodeBuilderFlagsNoTruncation != 0 {
			context.tracker.reportTruncationError()
		}
		if context.encounteredError {
			return nil
		} else {
			return resultingNode
		}
	}

	saveRestoreFlags := func(context NodeBuilderContext) /* TODO(TS-TO-GO) inferred type () => void */ any {
		flags := context.flags
		internalFlags := context.internalFlags

		return restore

		restore := func() {
			context.flags = flags
			context.internalFlags = internalFlags
		}

	}

	checkTruncationLength := func(context NodeBuilderContext) bool {
		if context.truncating {
			return context.truncating
		}
		context.truncating = context.approximateLength > (ifElse((context.flags&NodeBuilderFlagsNoTruncation != 0), noTruncationMaximumTruncationLength, defaultMaximumTruncationLength))
		return context.truncating
	}

	typeToTypeNodeHelper := func(t *Type, context NodeBuilderContext) TypeNode {
		restoreFlags := saveRestoreFlags(context)
		typeNode := typeToTypeNodeWorker(t, context)
		restoreFlags()
		return typeNode
	}

	typeToTypeNodeWorker := func(t *Type, context NodeBuilderContext) TypeNode {
		if c.cancellationToken != nil && c.cancellationToken.throwIfCancellationRequested {
			c.cancellationToken.throwIfCancellationRequested()
		}
		inTypeAlias := context.flags & NodeBuilderFlagsInTypeAlias
		context.flags &^= NodeBuilderFlagsInTypeAlias

		if !t {
			if context.flags&NodeBuilderFlagsAllowEmptyUnionOrIntersection == 0 {
				context.encounteredError = true
				return nil
				// TODO: GH#18217
			}
			context.approximateLength += 3
			return factory.createKeywordTypeNode(ast.KindAnyKeyword)
		}

		if context.flags&NodeBuilderFlagsNoTypeReduction == 0 {
			t = c.getReducedType(t)
		}

		if t.flags&TypeFlagsAny != 0 {
			if t.aliasSymbol != nil {
				return factory.createTypeReferenceNode(symbolToEntityNameNode(t.aliasSymbol), mapToTypeNodes(t.aliasTypeArguments, context))
			}
			if t == c.unresolvedType {
				return addSyntheticLeadingComment(factory.createKeywordTypeNode(ast.KindAnyKeyword), ast.KindMultiLineCommentTrivia, "unresolved")
			}
			context.approximateLength += 3
			return factory.createKeywordTypeNode(ifElse(t == c.intrinsicMarkerType, ast.KindIntrinsicKeyword, ast.KindAnyKeyword))
		}
		if t.flags&TypeFlagsUnknown != 0 {
			return factory.createKeywordTypeNode(ast.KindUnknownKeyword)
		}
		if t.flags&TypeFlagsString != 0 {
			context.approximateLength += 6
			return factory.createKeywordTypeNode(ast.KindStringKeyword)
		}
		if t.flags&TypeFlagsNumber != 0 {
			context.approximateLength += 6
			return factory.createKeywordTypeNode(ast.KindNumberKeyword)
		}
		if t.flags&TypeFlagsBigInt != 0 {
			context.approximateLength += 6
			return factory.createKeywordTypeNode(ast.KindBigIntKeyword)
		}
		if t.flags&TypeFlagsBoolean != 0 && t.aliasSymbol == nil {
			context.approximateLength += 7
			return factory.createKeywordTypeNode(ast.KindBooleanKeyword)
		}
		if t.flags&TypeFlagsEnumLike != 0 {
			if t.symbol.Flags&ast.SymbolFlagsEnumMember != 0 {
				parentSymbol := c.getParentOfSymbol(t.symbol)
				parentName := symbolToTypeNode(parentSymbol, context, ast.SymbolFlagsType)
				if c.getDeclaredTypeOfSymbol(parentSymbol) == t {
					return parentName
				}
				memberName := symbolName(t.symbol)
				if isIdentifierText(memberName, ScriptTargetES5) {
					return appendReferenceToType(parentName /* as TypeReferenceNode | ImportTypeNode */, factory.createTypeReferenceNode(memberName, nil /*typeArguments*/))
				}
				if isImportTypeNode(parentName) {
					parentName.isTypeOf = true
					// mutably update, node is freshly manufactured anyhow
					return factory.createIndexedAccessTypeNode(parentName, factory.createLiteralTypeNode(factory.createStringLiteral(memberName)))
				} else if isTypeReferenceNode(parentName) {
					return factory.createIndexedAccessTypeNode(factory.createTypeQueryNode(parentName.TypeName), factory.createLiteralTypeNode(factory.createStringLiteral(memberName)))
				} else {
					return Debug.fail("Unhandled type node kind returned from `symbolToTypeNode`.")
				}
			}
			return symbolToTypeNode(t.symbol, context, ast.SymbolFlagsType)
		}
		if t.flags&TypeFlagsStringLiteral != 0 {
			context.approximateLength += t.AsStringLiteralType().value.length + 2
			return factory.createLiteralTypeNode(setEmitFlags(factory.createStringLiteral(t.AsStringLiteralType().value, context.flags&NodeBuilderFlagsUseSingleQuotesForStringLiteralType != 0), EmitFlagsNoAsciiEscaping))
		}
		if t.flags&TypeFlagsNumberLiteral != 0 {
			value := t.AsNumberLiteralType().value
			context.approximateLength += ("" + value).length
			return factory.createLiteralTypeNode(ifElse(value < 0, factory.createPrefixUnaryExpression(ast.KindMinusToken, factory.createNumericLiteral(-value)), factory.createNumericLiteral(value)))
		}
		if t.flags&TypeFlagsBigIntLiteral != 0 {
			context.approximateLength += pseudoBigIntToString(t.AsBigIntLiteralType().value).length + 1
			return factory.createLiteralTypeNode(factory.createBigIntLiteral(t.AsBigIntLiteralType().value))
		}
		if t.flags&TypeFlagsBooleanLiteral != 0 {
			context.approximateLength += t.AsIntrinsicType().intrinsicName.length
			return factory.createLiteralTypeNode(ifElse(t.AsIntrinsicType().intrinsicName == "true", factory.createTrue(), factory.createFalse()))
		}
		if t.flags&TypeFlagsUniqueESSymbol != 0 {
			if context.flags&NodeBuilderFlagsAllowUniqueESSymbolType == 0 {
				if c.isValueSymbolAccessible(t.symbol, context.enclosingDeclaration) {
					context.approximateLength += 6
					return symbolToTypeNode(t.symbol, context, ast.SymbolFlagsValue)
				}
				if context.tracker.reportInaccessibleUniqueSymbolError {
					context.tracker.reportInaccessibleUniqueSymbolError()
				}
			}
			context.approximateLength += 13
			return factory.createTypeOperatorNode(ast.KindUniqueKeyword, factory.createKeywordTypeNode(ast.KindSymbolKeyword))
		}
		if t.flags&TypeFlagsVoid != 0 {
			context.approximateLength += 4
			return factory.createKeywordTypeNode(ast.KindVoidKeyword)
		}
		if t.flags&TypeFlagsUndefined != 0 {
			context.approximateLength += 9
			return factory.createKeywordTypeNode(ast.KindUndefinedKeyword)
		}
		if t.flags&TypeFlagsNull != 0 {
			context.approximateLength += 4
			return factory.createLiteralTypeNode(factory.createNull())
		}
		if t.flags&TypeFlagsNever != 0 {
			context.approximateLength += 5
			return factory.createKeywordTypeNode(ast.KindNeverKeyword)
		}
		if t.flags&TypeFlagsESSymbol != 0 {
			context.approximateLength += 6
			return factory.createKeywordTypeNode(ast.KindSymbolKeyword)
		}
		if t.flags&TypeFlagsNonPrimitive != 0 {
			context.approximateLength += 6
			return factory.createKeywordTypeNode(ast.KindObjectKeyword)
		}
		if isThisTypeParameter(t) {
			if context.flags&NodeBuilderFlagsInObjectTypeLiteral != 0 {
				if !context.encounteredError && context.flags&NodeBuilderFlagsAllowThisInObjectLiteral == 0 {
					context.encounteredError = true
				}
				context.tracker.reportInaccessibleThisError()
			}
			context.approximateLength += 4
			return factory.createThisTypeNode()
		}

		if inTypeAlias == 0 && t.aliasSymbol != nil && (context.flags&NodeBuilderFlagsUseAliasDefinedOutsideCurrentScope != 0 || c.isTypeSymbolAccessible(t.aliasSymbol, context.enclosingDeclaration)) {
			typeArgumentNodes := mapToTypeNodes(t.aliasTypeArguments, context)
			if c.isReservedMemberName(t.aliasSymbol.EscapedName) && t.aliasSymbol.Flags&ast.SymbolFlagsClass == 0 {
				return factory.createTypeReferenceNode(factory.createIdentifier(""), typeArgumentNodes)
			}
			if length(typeArgumentNodes) == 1 && t.aliasSymbol == c.globalArrayType.symbol {
				return factory.createArrayTypeNode(typeArgumentNodes[0])
			}
			return symbolToTypeNode(t.aliasSymbol, context, ast.SymbolFlagsType, typeArgumentNodes)
		}

		objectFlags := getObjectFlags(t)

		if objectFlags&ObjectFlagsReference != 0 {
			Debug.assert(t.flags&TypeFlagsObject != 0)
			if t.AsTypeReference().node != nil {
				return visitAndTransformType(t.AsTypeReference(), typeReferenceToTypeNode)
			} else {
				return typeReferenceToTypeNode(t.AsTypeReference())
			}
		}
		if t.flags&TypeFlagsTypeParameter != 0 || objectFlags&ObjectFlagsClassOrInterface != 0 {
			if t.flags&TypeFlagsTypeParameter != 0 && contains(context.inferTypeParameters, t) {
				context.approximateLength += symbolName(t.symbol).length + 6
				var constraintNode *TypeNode
				constraint := c.getConstraintOfTypeParameter(t.AsTypeParameter())
				if constraint != nil {
					// If the infer type has a constraint that is not the same as the constraint
					// we would have normally inferred based on context, we emit the constraint
					// using `infer T extends ?`. We omit inferred constraints from type references
					// as they may be elided.
					inferredConstraint := c.getInferredTypeParameterConstraint(t.AsTypeParameter(), true /*omitTypeReferences*/)
					if !(inferredConstraint != nil && c.isTypeIdenticalTo(constraint, inferredConstraint)) {
						context.approximateLength += 9
						constraintNode = constraint && typeToTypeNodeHelper(constraint, context)
					}
				}
				return factory.createInferTypeNode(typeParameterToDeclarationWithConstraint(t.AsTypeParameter(), context, constraintNode))
			}
			if context.flags&NodeBuilderFlagsGenerateNamesForShadowedTypeParams != 0 && t.flags&TypeFlagsTypeParameter != 0 {
				name := typeParameterToName(t, context)
				context.approximateLength += idText(name).length
				return factory.createTypeReferenceNode(factory.createIdentifier(idText(name)), nil /*typeArguments*/)
			}
			// Ignore constraint/default when creating a usage (as opposed to declaration) of a type parameter.
			if t.symbol {
				return symbolToTypeNode(t.symbol, context, ast.SymbolFlagsType)
			}
			var name string
			if (t == c.markerSuperTypeForCheck || t == c.markerSubTypeForCheck) && c.varianceTypeParameter != nil && c.varianceTypeParameter.symbol {
				name = (ifElse(t == c.markerSubTypeForCheck, "sub-", "super-")) + symbolName(c.varianceTypeParameter.symbol)
			} else {
				name = "?"
			}
			return factory.createTypeReferenceNode(factory.createIdentifier(name), nil /*typeArguments*/)
		}
		if t.flags&TypeFlagsUnion != 0 && t.AsUnionType().origin != nil {
			t = t.AsUnionType().origin
		}
		if t.flags&(TypeFlagsUnion|TypeFlagsIntersection) != 0 {
			var types []*Type
			if t.flags&TypeFlagsUnion != 0 {
				types = c.formatUnionTypes(t.AsUnionType().types)
			} else {
				types = t.AsIntersectionType().types
			}
			if length(types) == 1 {
				return typeToTypeNodeHelper(types[0], context)
			}
			typeNodes := mapToTypeNodes(types, context, true /*isBareList*/)
			if typeNodes != nil && typeNodes.length > 0 {
				if t.flags&TypeFlagsUnion != 0 {
					return factory.createUnionTypeNode(typeNodes)
				} else {
					return factory.createIntersectionTypeNode(typeNodes)
				}
			} else {
				if !context.encounteredError && context.flags&NodeBuilderFlagsAllowEmptyUnionOrIntersection == 0 {
					context.encounteredError = true
				}
				return nil
				// TODO: GH#18217
			}
		}
		if objectFlags&(ObjectFlagsAnonymous|ObjectFlagsMapped) != 0 {
			Debug.assert(t.flags&TypeFlagsObject != 0)
			// The type is an object literal type.
			return createAnonymousTypeNode(t.AsObjectType())
		}
		if t.flags&TypeFlagsIndex != 0 {
			indexedType := t.AsIndexType().type_
			context.approximateLength += 6
			indexTypeNode := typeToTypeNodeHelper(indexedType, context)
			return factory.createTypeOperatorNode(ast.KindKeyOfKeyword, indexTypeNode)
		}
		if t.flags&TypeFlagsTemplateLiteral != 0 {
			texts := t.AsTemplateLiteralType().texts
			types := t.AsTemplateLiteralType().types
			templateHead := factory.createTemplateHead(texts[0])
			templateSpans := factory.createNodeArray(core.Map(types, func(t *Type, i number) TemplateLiteralTypeSpan {
				return factory.createTemplateLiteralTypeSpan(typeToTypeNodeHelper(t, context), (ifElse(i < types.length-1, factory.createTemplateMiddle, factory.createTemplateTail))(texts[i+1]))
			}))
			context.approximateLength += 2
			return factory.createTemplateLiteralType(templateHead, templateSpans)
		}
		if t.flags&TypeFlagsStringMapping != 0 {
			typeNode := typeToTypeNodeHelper(t.AsStringMappingType().type_, context)
			return symbolToTypeNode(t.AsStringMappingType().symbol, context, ast.SymbolFlagsType, []TypeNode{typeNode})
		}
		if t.flags&TypeFlagsIndexedAccess != 0 {
			objectTypeNode := typeToTypeNodeHelper(t.AsIndexedAccessType().objectType, context)
			indexTypeNode := typeToTypeNodeHelper(t.AsIndexedAccessType().indexType, context)
			context.approximateLength += 2
			return factory.createIndexedAccessTypeNode(objectTypeNode, indexTypeNode)
		}
		if t.flags&TypeFlagsConditional != 0 {
			return visitAndTransformType(t, func(t *Type) ConditionalTypeNode {
				return conditionalTypeToTypeNode(t.AsConditionalType())
			})
		}
		if t.flags&TypeFlagsSubstitution != 0 {
			typeNode := typeToTypeNodeHelper(t.AsSubstitutionType().baseType, context)
			noInferSymbol := c.isNoInferType(t) && c.getGlobalTypeSymbol("NoInfer" /* as __String */, false /*reportErrors*/)
			if noInferSymbol {
				return symbolToTypeNode(noInferSymbol, context, ast.SymbolFlagsType, []TypeNode{typeNode})
			} else {
				return typeNode
			}
		}

		return Debug.fail("Should be unreachable.")

		conditionalTypeToTypeNode := func(t ConditionalType) ConditionalTypeNode {
			checkTypeNode := typeToTypeNodeHelper(t.checkType, context)
			context.approximateLength += 15
			if context.flags&NodeBuilderFlagsGenerateNamesForShadowedTypeParams != 0 && t.root.isDistributive && t.checkType.flags&TypeFlagsTypeParameter == 0 {
				newParam := c.createTypeParameter(c.createSymbol(ast.SymbolFlagsTypeParameter, "T" /* as __String */))
				name := typeParameterToName(newParam, context)
				newTypeVariable := factory.createTypeReferenceNode(name)
				context.approximateLength += 37
				// 15 each for two added conditionals, 7 for an added infer type
				newMapper := c.prependTypeMapping(t.root.checkType, newParam, t.mapper)
				saveInferTypeParameters := context.inferTypeParameters
				context.inferTypeParameters = t.root.inferTypeParameters
				extendsTypeNode := typeToTypeNodeHelper(c.instantiateType(t.root.extendsType, newMapper), context)
				context.inferTypeParameters = saveInferTypeParameters
				trueTypeNode := typeToTypeNodeOrCircularityElision(c.instantiateType(getTypeFromTypeNode(context, t.root.node.TrueType), newMapper))
				falseTypeNode := typeToTypeNodeOrCircularityElision(c.instantiateType(getTypeFromTypeNode(context, t.root.node.FalseType), newMapper))

				// outermost conditional makes `T` a type parameter, allowing the inner conditionals to be distributive
				// second conditional makes `T` have `T & checkType` substitution, so it is correctly usable as the checkType
				// inner conditional runs the check the user provided on the check type (distributively) and returns the result
				// checkType extends infer T ? T extends checkType ? T extends extendsType<T> ? trueType<T> : falseType<T> : never : never;
				// this is potentially simplifiable to
				// checkType extends infer T ? T extends checkType & extendsType<T> ? trueType<T> : falseType<T> : never;
				// but that may confuse users who read the output more.
				// On the other hand,
				// checkType extends infer T extends checkType ? T extends extendsType<T> ? trueType<T> : falseType<T> : never;
				// may also work with `infer ... extends ...` in, but would produce declarations only compatible with the latest TS.
				return factory.createConditionalTypeNode(checkTypeNode, factory.createInferTypeNode(factory.createTypeParameterDeclaration(nil, factory.cloneNode(newTypeVariable.TypeName).AsIdentifier())), factory.createConditionalTypeNode(factory.createTypeReferenceNode(factory.cloneNode(name)), typeToTypeNodeHelper(t.checkType, context), factory.createConditionalTypeNode(newTypeVariable, extendsTypeNode, trueTypeNode, falseTypeNode), factory.createKeywordTypeNode(ast.KindNeverKeyword)), factory.createKeywordTypeNode(ast.KindNeverKeyword))
			}
			saveInferTypeParameters := context.inferTypeParameters
			context.inferTypeParameters = t.root.inferTypeParameters
			extendsTypeNode := typeToTypeNodeHelper(t.extendsType, context)
			context.inferTypeParameters = saveInferTypeParameters
			trueTypeNode := typeToTypeNodeOrCircularityElision(c.getTrueTypeFromConditionalType(t))
			falseTypeNode := typeToTypeNodeOrCircularityElision(c.getFalseTypeFromConditionalType(t))
			return factory.createConditionalTypeNode(checkTypeNode, extendsTypeNode, trueTypeNode, falseTypeNode)
		}

		typeToTypeNodeOrCircularityElision := func(t *Type) TypeNode {
			if t.flags&TypeFlagsUnion != 0 {
				if context.visitedTypes. /* ? */ has(c.getTypeId(t)) {
					if context.flags&NodeBuilderFlagsAllowAnonymousIdentifier == 0 {
						context.encounteredError = true
						context.tracker. /* ? */ reportCyclicStructureError()
					}
					return createElidedInformationPlaceholder(context)
				}
				return visitAndTransformType(t, func(t *Type) TypeNode {
					return typeToTypeNodeHelper(t, context)
				})
			}
			return typeToTypeNodeHelper(t, context)
		}

		isMappedTypeHomomorphic := func(t MappedType) bool {
			return c.getHomomorphicTypeVariable(t) != nil
		}

		isHomomorphicMappedTypeWithNonHomomorphicInstantiation := func(t MappedType) bool {
			return t.target != nil && isMappedTypeHomomorphic(t.target.AsMappedType()) && !isMappedTypeHomomorphic(t)
		}

		createMappedTypeNodeFromType := func(t MappedType) /* TODO(TS-TO-GO) inferred type MappedTypeNode | ConditionalTypeNode */ any {
			Debug.assert(t.flags&TypeFlagsObject != 0)
			var readonlyToken * /* TODO(TS-TO-GO) inferred type ReadonlyKeyword | PlusToken | MinusToken */ any
			if t.declaration.ReadonlyToken != nil {
				readonlyToken = factory.createToken(t.declaration.ReadonlyToken.Kind) /* as ReadonlyKeyword | PlusToken | MinusToken */
			} else {
				readonlyToken = nil
			}
			var questionToken * /* TODO(TS-TO-GO) inferred type QuestionToken | PlusToken | MinusToken */ any
			if t.declaration.QuestionToken != nil {
				questionToken = factory.createToken(t.declaration.QuestionToken.Kind) /* as QuestionToken | PlusToken | MinusToken */
			} else {
				questionToken = nil
			}
			var appropriateConstraintTypeNode TypeNode
			var newTypeVariable *TypeReferenceNode
			// If the mapped type isn't `keyof` constraint-declared, _but_ still has modifiers preserved, and its naive instantiation won't preserve modifiers because its constraint isn't `keyof` constrained, we have work to do
			needsModifierPreservingWrapper := !c.isMappedTypeWithKeyofConstraintDeclaration(t) && c.getModifiersTypeFromMappedType(t).flags&TypeFlagsUnknown == 0 && context.flags&NodeBuilderFlagsGenerateNamesForShadowedTypeParams && !(c.getConstraintTypeFromMappedType(t).flags&TypeFlagsTypeParameter != 0 && c.getConstraintOfTypeParameter(c.getConstraintTypeFromMappedType(t)). /* ? */ flags&TypeFlagsIndex != 0)
			if c.isMappedTypeWithKeyofConstraintDeclaration(t) {
				// We have a { [P in keyof T]: X }
				// We do this to ensure we retain the toplevel keyof-ness of the type which may be lost due to keyof distribution during `getConstraintTypeFromMappedType`
				if isHomomorphicMappedTypeWithNonHomomorphicInstantiation(t) && context.flags&NodeBuilderFlagsGenerateNamesForShadowedTypeParams != 0 {
					newParam := c.createTypeParameter(c.createSymbol(ast.SymbolFlagsTypeParameter, "T" /* as __String */))
					name := typeParameterToName(newParam, context)
					newTypeVariable = factory.createTypeReferenceNode(name)
				}
				appropriateConstraintTypeNode = factory.createTypeOperatorNode(ast.KindKeyOfKeyword, newTypeVariable || typeToTypeNodeHelper(c.getModifiersTypeFromMappedType(t), context))
			} else if needsModifierPreservingWrapper {
				// So, step 1: new type variable
				newParam := c.createTypeParameter(c.createSymbol(ast.SymbolFlagsTypeParameter, "T" /* as __String */))
				name := typeParameterToName(newParam, context)
				newTypeVariable = factory.createTypeReferenceNode(name)
				// step 2: make that new type variable itself the constraint node, making the mapped type `{[K in T_1]: Template}`
				appropriateConstraintTypeNode = newTypeVariable
			} else {
				appropriateConstraintTypeNode = typeToTypeNodeHelper(c.getConstraintTypeFromMappedType(t), context)
			}
			typeParameterNode := typeParameterToDeclarationWithConstraint(c.getTypeParameterFromMappedType(t), context, appropriateConstraintTypeNode)
			var nameTypeNode *TypeNode
			if t.declaration.NameType != nil {
				nameTypeNode = typeToTypeNodeHelper(c.getNameTypeFromMappedType(t), context)
			} else {
				nameTypeNode = nil
			}
			templateTypeNode := typeToTypeNodeHelper(c.removeMissingType(c.getTemplateTypeFromMappedType(t), c.getMappedTypeModifiers(t)&MappedTypeModifiersIncludeOptional != 0), context)
			mappedTypeNode := factory.createMappedTypeNode(readonlyToken, typeParameterNode, nameTypeNode, questionToken, templateTypeNode, nil /*members*/)
			context.approximateLength += 10
			result := setEmitFlags(mappedTypeNode, EmitFlagsSingleLine)
			if isHomomorphicMappedTypeWithNonHomomorphicInstantiation(t) && context.flags&NodeBuilderFlagsGenerateNamesForShadowedTypeParams != 0 {
				// homomorphic mapped type with a non-homomorphic naive inlining
				// wrap it with a conditional like `SomeModifiersType extends infer U ? {..the mapped type...} : never` to ensure the resulting
				// type stays homomorphic
				originalConstraint := c.instantiateType(c.getConstraintOfTypeParameter(getTypeFromTypeNode(context, t.declaration.TypeParameter.Constraint.AsTypeOperatorNode().Type_).AsTypeParameter()) || c.unknownType, t.mapper)
				return factory.createConditionalTypeNode(typeToTypeNodeHelper(c.getModifiersTypeFromMappedType(t), context), factory.createInferTypeNode(factory.createTypeParameterDeclaration(nil, factory.cloneNode(newTypeVariable.TypeName).AsIdentifier(), ifElse(originalConstraint.flags&TypeFlagsUnknown != 0, nil, typeToTypeNodeHelper(originalConstraint, context)))), result, factory.createKeywordTypeNode(ast.KindNeverKeyword))
			} else if needsModifierPreservingWrapper {
				// and step 3: once the mapped type is reconstructed, create a `ConstraintType extends infer T_1 extends keyof ModifiersType ? {[K in T_1]: Template} : never`
				// subtly different from the `keyof` constraint case, by including the `keyof` constraint on the `infer` type parameter, it doesn't rely on the constraint type being itself
				// constrained to a `keyof` type to preserve its modifier-preserving behavior. This is all basically because we preserve modifiers for a wider set of mapped types than
				// just homomorphic ones.
				return factory.createConditionalTypeNode(typeToTypeNodeHelper(c.getConstraintTypeFromMappedType(t), context), factory.createInferTypeNode(factory.createTypeParameterDeclaration(nil, factory.cloneNode(newTypeVariable.TypeName).AsIdentifier(), factory.createTypeOperatorNode(ast.KindKeyOfKeyword, typeToTypeNodeHelper(c.getModifiersTypeFromMappedType(t), context)))), result, factory.createKeywordTypeNode(ast.KindNeverKeyword))
			}
			return result
		}

		createAnonymousTypeNode := func(t ObjectType) TypeNode {
			typeId := t.id
			symbol := t.symbol
			if symbol {
				isInstantiationExpressionType := getObjectFlags(t)&ObjectFlagsInstantiationExpressionType != 0
				if isInstantiationExpressionType {
					instantiationExpressionType := t.AsInstantiationExpressionType()
					existing := instantiationExpressionType.node
					if isTypeQueryNode(existing) {
						typeNode := tryReuseExistingNonParameterTypeNode(context, existing, t)
						if typeNode != nil {
							return typeNode
						}
					}
					if context.visitedTypes. /* ? */ has(typeId) {
						return createElidedInformationPlaceholder(context)
					}
					return visitAndTransformType(t, createTypeNodeFromObjectType)
				}
				var isInstanceType /* TODO(TS-TO-GO) inferred type SymbolFlags.Value | SymbolFlags.Type */ any
				if c.isClassInstanceSide(t) {
					isInstanceType = ast.SymbolFlagsType
				} else {
					isInstanceType = ast.SymbolFlagsValue
				}
				if c.isJSConstructor(symbol.ValueDeclaration) {
					// Instance and static types share the same symbol; only add 'typeof' for the static side.
					return symbolToTypeNode(symbol, context, isInstanceType)
				} else if symbol.Flags&ast.SymbolFlagsClass != 0 && c.getBaseTypeVariableOfClass(symbol) == nil && !(symbol.ValueDeclaration != nil && isClassLike(symbol.ValueDeclaration) && context.flags&NodeBuilderFlagsWriteClassExpressionAsTypeLiteral != 0 && (!isClassDeclaration(symbol.ValueDeclaration) || c.isSymbolAccessible(symbol, context.enclosingDeclaration, isInstanceType, false /*shouldComputeAliasesToMakeVisible*/).accessibility != SymbolAccessibilityAccessible)) || symbol.Flags&(ast.SymbolFlagsEnum|ast.SymbolFlagsValueModule) != 0 || shouldWriteTypeOfFunctionSymbol() {
					return symbolToTypeNode(symbol, context, isInstanceType)
				} else if context.visitedTypes. /* ? */ has(typeId) {
					// If type is an anonymous type literal in a type alias declaration, use type alias name
					typeAlias := c.getTypeAliasForTypeLiteral(t)
					if typeAlias != nil {
						// The specified symbol flags need to be reinterpreted as type flags
						return symbolToTypeNode(typeAlias, context, ast.SymbolFlagsType)
					} else {
						return createElidedInformationPlaceholder(context)
					}
				} else {
					return visitAndTransformType(t, createTypeNodeFromObjectType)
				}
			} else {
				// Anonymous types without a symbol are never circular.
				return createTypeNodeFromObjectType(t)
			}
			shouldWriteTypeOfFunctionSymbol := func() *bool {
				isStaticMethodSymbol := symbol.Flags&ast.SymbolFlagsMethod != 0 && core.Some(symbol.Declarations, func(declaration Declaration) bool {
					return isStatic(declaration)
				})
				isNonLocalFunctionSymbol := symbol.Flags&ast.SymbolFlagsFunction != 0 && (symbol.Parent || forEach(symbol.Declarations, func(declaration Declaration) bool {
					return declaration.Parent.Kind == ast.KindSourceFile || declaration.Parent.Kind == ast.KindModuleBlock
				}))
				if isStaticMethodSymbol || isNonLocalFunctionSymbol {
					// typeof is allowed only for static/non local functions
					return (context.flags&NodeBuilderFlagsUseTypeOfFunction != 0 || (context.visitedTypes. /* ? */ has(typeId))) && (context.flags&NodeBuilderFlagsUseStructuralFallback == 0 || c.isValueSymbolAccessible(symbol, context.enclosingDeclaration))
					// And the build is going to succeed without visibility error or there is no structural fallback allowed
				}
			}

		}

		visitAndTransformType := func(t T, transform func(t T) TypeNode) TypeNode {
			typeId := t.id
			isConstructorObject := getObjectFlags(t)&ObjectFlagsAnonymous && t.symbol && t.symbol.Flags&ast.SymbolFlagsClass
			var id *string
			switch {
			case getObjectFlags(t)&ObjectFlagsReference != 0 && (t /* as TypeReference & T */).node != nil:
				id = "N" + getNodeId((t /* as TypeReference & T */).node)
			case t.flags&TypeFlagsConditional != 0:
				id = "N" + getNodeId((t /* as ConditionalType & T */).root.node)
			case t.symbol:
				id = (ifElse(isConstructorObject != 0, "+", "")) + getSymbolId(t.symbol)
			default:
				id = nil
			}
			// Since instantiations of the same anonymous type have the same symbol, tracking symbols instead
			// of types allows us to catch circular references to instantiations of the same anonymous type
			if context.visitedTypes == nil {
				context.visitedTypes = NewSet()
			}
			if id && context.symbolDepth == nil {
				context.symbolDepth = NewMap()
			}

			links := context.enclosingDeclaration && c.getNodeLinks(context.enclosingDeclaration)
			key := __TEMPLATE__(c.getTypeId(t), "|", context.flags, "|", context.internalFlags)
			if links != nil {
				links.serializedTypes = links.serializedTypes || NewMap()
			}
			cachedResult := links. /* ? */ serializedTypes. /* ? */ get(key)
			if cachedResult != nil {
				// TODO:: check if we instead store late painted statements associated with this?
				cachedResult.trackedSymbols. /* ? */ forEach(func(TODO_IDENTIFIER TrackedSymbol) bool {
					return context.tracker.trackSymbol(symbol, enclosingDeclaration, meaning)
				})
				if cachedResult.truncating {
					context.truncating = true
				}
				context.approximateLength += cachedResult.addedLength
				return deepCloneOrReuseNode(cachedResult.node)
			}

			var depth *number
			if id {
				depth = context.symbolDepth.get(id) || 0
				if depth > 10 {
					return createElidedInformationPlaceholder(context)
				}
				context.symbolDepth.set(id, depth+1)
			}
			context.visitedTypes.add(typeId)
			prevTrackedSymbols := context.trackedSymbols
			context.trackedSymbols = nil
			startLength := context.approximateLength
			result := transform(t)
			addedLength := context.approximateLength - startLength
			if !context.reportedDiagnostic && !context.encounteredError {
				links. /* ? */ serializedTypes. /* ? */ set(key, SerializedTypeEntry{
					node:           result,
					truncating:     context.truncating,
					addedLength:    addedLength,
					trackedSymbols: context.trackedSymbols,
				})
			}
			context.visitedTypes.delete(typeId)
			if id {
				context.symbolDepth.set(id, depth)
			}
			context.trackedSymbols = prevTrackedSymbols
			return result

			deepCloneOrReuseNode := func(node T) T {
				if !nodeIsSynthesized(node) && getParseTreeNode(node) == node {
					return node
				}
				return setTextRange(context, factory.cloneNode(visitEachChildWorker(node, deepCloneOrReuseNode, nil /*context*/, deepCloneOrReuseNodes, deepCloneOrReuseNode)), node)
			}

			deepCloneOrReuseNodes := func(nodes *NodeArray[*ast.Node], visitor Visitor, test func(node *ast.Node) bool, start number, count number) *NodeArray[*ast.Node] {
				if nodes != nil && nodes.length == 0 {
					// Ensure we explicitly make a copy of an empty array; visitNodes will not do this unless the array has elements,
					// which can lead to us reusing the same empty NodeArray more than once within the same AST during type noding.
					return setTextRangeWorker(factory.createNodeArray(nil, nodes.hasTrailingComma), nodes)
				}
				return visitNodes(nodes, visitor, test, start, count)
			}

		}

		createTypeNodeFromObjectType := func(t ObjectType) TypeNode {
			if c.isGenericMappedType(t) || t.AsMappedType().containsError {
				return createMappedTypeNodeFromType(t.AsMappedType())
			}

			resolved := c.resolveStructuredTypeMembers(t)
			if resolved.properties.length == 0 && resolved.indexInfos.length == 0 {
				if resolved.callSignatures.length == 0 && resolved.constructSignatures.length == 0 {
					context.approximateLength += 2
					return setEmitFlags(factory.createTypeLiteralNode(nil), EmitFlagsSingleLine)
				}

				if resolved.callSignatures.length == 1 && resolved.constructSignatures.length == 0 {
					signature := resolved.callSignatures[0]
					signatureNode := signatureToSignatureDeclarationHelper(signature, ast.KindFunctionType, context).AsFunctionTypeNode()
					return signatureNode
				}

				if resolved.constructSignatures.length == 1 && resolved.callSignatures.length == 0 {
					signature := resolved.constructSignatures[0]
					signatureNode := signatureToSignatureDeclarationHelper(signature, ast.KindConstructorType, context).AsConstructorTypeNode()
					return signatureNode
				}
			}

			abstractSignatures := core.Filter(resolved.constructSignatures, func(signature Signature) bool {
				return signature.flags&SignatureFlagsAbstract != 0
			})
			if core.Some(abstractSignatures) {
				types := core.Map(abstractSignatures, func(s Signature) ObjectType {
					return c.getOrCreateTypeFromSignature(s)
				})
				// count the number of type elements excluding abstract constructors
				typeElementCount := resolved.callSignatures.length + (resolved.constructSignatures.length - abstractSignatures.length) + resolved.indexInfos.length + (ifElse(context.flags&NodeBuilderFlagsWriteClassExpressionAsTypeLiteral != 0, core.CountWhere(resolved.properties, func(p *ast.Symbol) bool {
					return p.Flags&ast.SymbolFlagsPrototype == 0
				}), length(resolved.properties)))
				// don't include an empty object literal if there were no other static-side
				// properties to write, i.e. `abstract class C { }` becomes `abstract new () => {}`
				// and not `(abstract new () => {}) & {}`
				if typeElementCount != 0 {
					// create a copy of the object type without any abstract construct signatures.
					types.push(c.getResolvedTypeWithoutAbstractConstructSignatures(resolved))
				}
				return typeToTypeNodeHelper(c.getIntersectionType(types), context)
			}

			restoreFlags := saveRestoreFlags(context)
			context.flags |= NodeBuilderFlagsInObjectTypeLiteral
			members := createTypeNodesFromResolvedType(resolved)
			restoreFlags()
			typeLiteralNode := factory.createTypeLiteralNode(members)
			context.approximateLength += 2
			setEmitFlags(typeLiteralNode, ifElse((context.flags&NodeBuilderFlagsMultilineObjectLiterals != 0), 0, EmitFlagsSingleLine))
			return typeLiteralNode
		}

		typeReferenceToTypeNode := func(type_ TypeReference) TypeNode {
			var typeArguments []*Type = c.getTypeArguments(type_)
			if type_.target == c.globalArrayType || type_.target == c.globalReadonlyArrayType {
				if context.flags&NodeBuilderFlagsWriteArrayAsGenericType != 0 {
					typeArgumentNode := typeToTypeNodeHelper(typeArguments[0], context)
					return factory.createTypeReferenceNode(ifElse(type_.target == c.globalArrayType, "Array", "ReadonlyArray"), []TypeNode{typeArgumentNode})
				}
				elementType := typeToTypeNodeHelper(typeArguments[0], context)
				arrayType := factory.createArrayTypeNode(elementType)
				if type_.target == c.globalArrayType {
					return arrayType
				} else {
					return factory.createTypeOperatorNode(ast.KindReadonlyKeyword, arrayType)
				}
			} else if type_.target.objectFlags&ObjectFlagsTuple != 0 {
				typeArguments = core.SameMap(typeArguments, func(t *Type, i number) *Type {
					return c.removeMissingType(t, type_.target.AsTupleType().elementFlags[i]&ElementFlagsOptional != 0)
				})
				if typeArguments.length > 0 {
					arity := c.getTypeReferenceArity(type_)
					tupleConstituentNodes := mapToTypeNodes(typeArguments.slice(0, arity), context)
					if tupleConstituentNodes != nil {
						TODO_IDENTIFIER := type_.target.AsTupleType()
						for i := 0; i < tupleConstituentNodes.length; i++ {
							flags := type_.target.AsTupleType().elementFlags[i]
							labeledElementDeclaration := labeledElementDeclarations[i]

							if labeledElementDeclaration != nil {
								tupleConstituentNodes[i] = factory.createNamedTupleMember(ifElse(flags&ElementFlagsVariable != 0, factory.createToken(ast.KindDotDotDotToken), nil), factory.createIdentifier(unescapeLeadingUnderscores(c.getTupleElementLabel(labeledElementDeclaration))), ifElse(flags&ElementFlagsOptional != 0, factory.createToken(ast.KindQuestionToken), nil), ifElse(flags&ElementFlagsRest != 0, factory.createArrayTypeNode(tupleConstituentNodes[i]), tupleConstituentNodes[i]))
							} else {
								switch {
								case flags&ElementFlagsVariable != 0:
									tupleConstituentNodes[i] = factory.createRestTypeNode(ifElse(flags&ElementFlagsRest != 0, factory.createArrayTypeNode(tupleConstituentNodes[i]), tupleConstituentNodes[i]))
								case flags&ElementFlagsOptional != 0:
									tupleConstituentNodes[i] = factory.createOptionalTypeNode(tupleConstituentNodes[i])
								default:
									tupleConstituentNodes[i] = tupleConstituentNodes[i]
								}
							}
						}
						tupleTypeNode := setEmitFlags(factory.createTupleTypeNode(tupleConstituentNodes), EmitFlagsSingleLine)
						if type_.target.AsTupleType().readonly {
							return factory.createTypeOperatorNode(ast.KindReadonlyKeyword, tupleTypeNode)
						} else {
							return tupleTypeNode
						}
					}
				}
				if context.encounteredError || (context.flags&NodeBuilderFlagsAllowEmptyTuple != 0) {
					tupleTypeNode := setEmitFlags(factory.createTupleTypeNode([]never{}), EmitFlagsSingleLine)
					if type_.target.AsTupleType().readonly {
						return factory.createTypeOperatorNode(ast.KindReadonlyKeyword, tupleTypeNode)
					} else {
						return tupleTypeNode
					}
				}
				context.encounteredError = true
				return nil
				// TODO: GH#18217
			} else if context.flags&NodeBuilderFlagsWriteClassExpressionAsTypeLiteral != 0 && type_.symbol.ValueDeclaration != nil && isClassLike(type_.symbol.ValueDeclaration) && !c.isValueSymbolAccessible(type_.symbol, context.enclosingDeclaration) {
				return createAnonymousTypeNode(type_)
			} else {
				outerTypeParameters := type_.target.outerTypeParameters
				i := 0
				var resultType Union[TypeReferenceNode, ImportTypeNode, undefined]
				if outerTypeParameters != nil {
					length := outerTypeParameters.length
					for i < length {
						// Find group of type arguments for type parameters with the same declaring container.
						start := i
						parent := c.getParentSymbolOfTypeParameter(outerTypeParameters[i])
						for ok := true; ok; ok = i < length && c.getParentSymbolOfTypeParameter(outerTypeParameters[i]) == parent { // do-while loop
							i++
						}
						// When type parameters are their own type arguments for the whole group (i.e. we have
						// the default outer type arguments), we don't show the group.
						if !rangeEquals(outerTypeParameters, typeArguments, start, i) {
							typeArgumentSlice := mapToTypeNodes(typeArguments.slice(start, i), context)
							restoreFlags := saveRestoreFlags(context)
							context.flags |= NodeBuilderFlagsForbidIndexedAccessSymbolReferences
							ref := symbolToTypeNode(parent, context, ast.SymbolFlagsType, typeArgumentSlice) /* as TypeReferenceNode | ImportTypeNode */
							restoreFlags()
							if resultType == nil {
								resultType = ref
							} else {
								resultType = appendReferenceToType(resultType, ref.AsTypeReferenceNode())
							}
						}
					}
				}
				var typeArgumentNodes *[]TypeNode
				if typeArguments.length > 0 {
					typeParameterCount := 0
					if type_.target.typeParameters != nil {
						typeParameterCount = min(type_.target.typeParameters.length, typeArguments.length)

						// Maybe we should do this for more types, but for now we only elide type arguments that are
						// identical to their associated type parameters' defaults for `Iterable`, `IterableIterator`,
						// `AsyncIterable`, and `AsyncIterableIterator` to provide backwards-compatible .d.ts emit due
						// to each now having three type parameters instead of only one.
						if c.isReferenceToType(type_, c.getGlobalIterableType(false)) || c.isReferenceToType(type_, c.getGlobalIterableIteratorType(false)) || c.isReferenceToType(type_, c.getGlobalAsyncIterableType(false)) || c.isReferenceToType(type_, c.getGlobalAsyncIterableIteratorType(false)) {
							if type_.node == nil || !isTypeReferenceNode(type_.node) || type_.node.TypeArguments == nil || type_.node.TypeArguments.length < typeParameterCount {
								for typeParameterCount > 0 {
									typeArgument := typeArguments[typeParameterCount-1]
									typeParameter := type_.target.typeParameters[typeParameterCount-1]
									defaultType := c.getDefaultFromTypeParameter(typeParameter)
									if defaultType == nil || !c.isTypeIdenticalTo(typeArgument, defaultType) {
										break
									}
									typeParameterCount--
								}
							}
						}
					}

					typeArgumentNodes = mapToTypeNodes(typeArguments.slice(i, typeParameterCount), context)
				}
				restoreFlags := saveRestoreFlags(context)
				context.flags |= NodeBuilderFlagsForbidIndexedAccessSymbolReferences
				finalRef := symbolToTypeNode(type_.symbol, context, ast.SymbolFlagsType, typeArgumentNodes)
				restoreFlags()
				if resultType == nil {
					return finalRef
				} else {
					return appendReferenceToType(resultType, finalRef.AsTypeReferenceNode())
				}
			}
		}

		appendReferenceToType := func(root Union[TypeReferenceNode, ImportTypeNode], ref TypeReferenceNode) Union[TypeReferenceNode, ImportTypeNode] {
			if isImportTypeNode(root) {
				// first shift type arguments
				typeArguments := root.TypeArguments
				qualifier := root.Qualifier
				if qualifier != nil {
					if isIdentifier(qualifier) {
						if typeArguments != getIdentifierTypeArguments(qualifier) {
							qualifier = setIdentifierTypeArguments(factory.cloneNode(qualifier), typeArguments)
						}
					} else {
						if typeArguments != getIdentifierTypeArguments(qualifier.Right) {
							qualifier = factory.updateQualifiedName(qualifier, qualifier.Left, setIdentifierTypeArguments(factory.cloneNode(qualifier.Right), typeArguments))
						}
					}
				}
				typeArguments = ref.TypeArguments
				// then move qualifiers
				ids := getAccessStack(ref)
				for _, id := range ids {
					if qualifier != nil {
						qualifier = factory.createQualifiedName(qualifier, id)
					} else {
						qualifier = id
					}
				}
				return factory.updateImportTypeNode(root, root.Argument, root.Attributes, qualifier, typeArguments, root.IsTypeOf)
			} else {
				// first shift type arguments
				typeArguments := root.TypeArguments
				typeName := root.TypeName
				if isIdentifier(typeName) {
					if typeArguments != getIdentifierTypeArguments(typeName) {
						typeName = setIdentifierTypeArguments(factory.cloneNode(typeName), typeArguments)
					}
				} else {
					if typeArguments != getIdentifierTypeArguments(typeName.Right) {
						typeName = factory.updateQualifiedName(typeName, typeName.Left, setIdentifierTypeArguments(factory.cloneNode(typeName.Right), typeArguments))
					}
				}
				typeArguments = ref.TypeArguments
				// then move qualifiers
				ids := getAccessStack(ref)
				for _, id := range ids {
					typeName = factory.createQualifiedName(typeName, id)
				}
				return factory.updateTypeReferenceNode(root, typeName, typeArguments)
			}
		}

		getAccessStack := func(ref TypeReferenceNode) []Identifier {
			state := ref.TypeName
			ids := []never{}
			for !isIdentifier(state) {
				ids.unshift(state.Right)
				state = state.Left
			}
			ids.unshift(state)
			return ids
		}

		createTypeNodesFromResolvedType := func(resolvedType ResolvedType) *[]TypeElement {
			if checkTruncationLength(context) {
				if context.flags&NodeBuilderFlagsNoTruncation != 0 {
					return []NotEmittedTypeElement{addSyntheticTrailingComment(factory.createNotEmittedTypeElement(), ast.KindMultiLineCommentTrivia, "elided")}
				}
				return []PropertySignature{factory.createPropertySignature(nil, "...", nil /*questionToken*/, nil /*type*/)}
			}
			var typeElements []TypeElement = []never{}
			for _, signature := range resolvedType.callSignatures {
				typeElements.push(signatureToSignatureDeclarationHelper(signature, ast.KindCallSignature, context).AsCallSignatureDeclaration())
			}
			for _, signature := range resolvedType.constructSignatures {
				if signature.flags&SignatureFlagsAbstract != 0 {
					continue
				}
				typeElements.push(signatureToSignatureDeclarationHelper(signature, ast.KindConstructSignature, context).AsConstructSignatureDeclaration())
			}
			for _, info := range resolvedType.indexInfos {
				typeElements.push(indexInfoToIndexSignatureDeclarationHelper(info, context, ifElse(resolvedType.objectFlags&ObjectFlagsReverseMapped != 0, createElidedInformationPlaceholder(context), nil)))
			}

			properties := resolvedType.properties
			if !properties {
				return typeElements
			}

			i := 0
			for _, propertySymbol := range properties {
				i++
				if context.flags&NodeBuilderFlagsWriteClassExpressionAsTypeLiteral != 0 {
					if propertySymbol.Flags&ast.SymbolFlagsPrototype != 0 {
						continue
					}
					if getDeclarationModifierFlagsFromSymbol(propertySymbol)&(ast.ModifierFlagsPrivate|ast.ModifierFlagsProtected) != 0 && context.tracker.reportPrivateInBaseOfClassExpression {
						context.tracker.reportPrivateInBaseOfClassExpression(unescapeLeadingUnderscores(propertySymbol.EscapedName))
					}
				}
				if checkTruncationLength(context) && (i+2 < properties.length-1) {
					if context.flags&NodeBuilderFlagsNoTruncation != 0 {
						typeElement := typeElements.pop()
						typeElements.push(addSyntheticTrailingComment(typeElement, ast.KindMultiLineCommentTrivia, __TEMPLATE__("... ", properties.length-i, " more elided ...")))
					} else {
						typeElements.push(factory.createPropertySignature(nil, __TEMPLATE__("... ", properties.length-i, " more ..."), nil /*questionToken*/, nil /*type*/))
					}
					addPropertyToElementList(properties[properties.length-1], context, typeElements)
					break
				}
				addPropertyToElementList(propertySymbol, context, typeElements)
			}
			if typeElements.length != 0 {
				return typeElements
			} else {
				return nil
			}
		}

	}

	createElidedInformationPlaceholder := func(context NodeBuilderContext) /* TODO(TS-TO-GO) inferred type KeywordTypeNode<SyntaxKind.AnyKeyword> | TypeReferenceNode */ any {
		context.approximateLength += 3
		if context.flags&NodeBuilderFlagsNoTruncation == 0 {
			return factory.createTypeReferenceNode(factory.createIdentifier("..."), nil /*typeArguments*/)
		}
		return addSyntheticLeadingComment(factory.createKeywordTypeNode(ast.KindAnyKeyword), ast.KindMultiLineCommentTrivia, "elided")
	}

	shouldUsePlaceholderForProperty := func(propertySymbol *ast.Symbol, context NodeBuilderContext) bool {
		// Use placeholders for reverse mapped types we've either
		// (1) already descended into, or
		// (2) are nested reverse mappings within a mapping over a non-anonymous type, or
		// (3) are deeply nested properties that originate from the same mapped type.
		// Condition (2) is a restriction mostly just to
		// reduce the blowup in printback size from doing, eg, a deep reverse mapping over `Window`.
		// Since anonymous types usually come from expressions, this allows us to preserve the output
		// for deep mappings which likely come from expressions, while truncating those parts which
		// come from mappings over library functions.
		// Condition (3) limits printing of possibly infinitely deep reverse mapped types.
		depth := 3
		return getCheckFlags(propertySymbol)&ast.CheckFlagsReverseMapped != 0 && (contains(context.reverseMappedStack, propertySymbol.(ReverseMappedSymbol)) || (context.reverseMappedStack[0] && getObjectFlags(core.LastOrNil(context.reverseMappedStack).Links.propertyType)&ObjectFlagsAnonymous == 0) || isDeeplyNestedReverseMappedTypeProperty())
		isDeeplyNestedReverseMappedTypeProperty := func() bool {
			if (ifNotNilElse(context.reverseMappedStack. /* ? */ length, 0)) < depth {
				return false
			}
			for i := 0; i < depth; i++ {
				prop := context.reverseMappedStack[context.reverseMappedStack.length-1-i]
				if prop.Links.mappedType.symbol != (propertySymbol.(ReverseMappedSymbol)).Links.mappedType.symbol {
					return false
				}
			}
			return true
		}

	}

	addPropertyToElementList := func(propertySymbol *ast.Symbol, context NodeBuilderContext, typeElements []TypeElement) {
		propertyIsReverseMapped := getCheckFlags(propertySymbol)&ast.CheckFlagsReverseMapped != 0
		var propertyType *Type
		if shouldUsePlaceholderForProperty(propertySymbol, context) {
			propertyType = c.anyType
		} else {
			propertyType = c.getNonMissingTypeOfSymbol(propertySymbol)
		}
		saveEnclosingDeclaration := context.enclosingDeclaration
		context.enclosingDeclaration = nil
		if context.tracker.canTrackSymbol && c.isLateBoundName(propertySymbol.EscapedName) {
			if propertySymbol.Declarations != nil {
				decl := core.FirstOrNil(propertySymbol.Declarations)
				if c.hasLateBindableName(decl) {
					if isBinaryExpression(decl) {
						name := getNameOfDeclaration(decl)
						if name != nil && isElementAccessExpression(name) && isPropertyAccessEntityNameExpression(name.ArgumentExpression) {
							trackComputedName(name.ArgumentExpression, saveEnclosingDeclaration, context)
						}
					} else {
						trackComputedName(decl.Name.Expression, saveEnclosingDeclaration, context)
					}
				}
			} else {
				context.tracker.reportNonSerializableProperty(c.symbolToString(propertySymbol))
			}
		}
		context.enclosingDeclaration = propertySymbol.ValueDeclaration || propertySymbol.Declarations[0] || saveEnclosingDeclaration
		propertyName := getPropertyNameNodeForSymbol(propertySymbol, context)
		context.enclosingDeclaration = saveEnclosingDeclaration
		context.approximateLength += symbolName(propertySymbol).length + 1

		if propertySymbol.Flags&ast.SymbolFlagsAccessor != 0 {
			writeType := c.getWriteTypeOfSymbol(propertySymbol)
			if propertyType != writeType && !c.isErrorType(propertyType) && !c.isErrorType(writeType) {
				getterDeclaration := getDeclarationOfKind(propertySymbol, ast.KindGetAccessor)
				getterSignature := c.getSignatureFromDeclaration(getterDeclaration)
				typeElements.push(setCommentRange(context, signatureToSignatureDeclarationHelper(getterSignature, ast.KindGetAccessor, context, &SignatureToSignatureDeclarationOptions{
					name: propertyName,
				}).AsGetAccessorDeclaration(), getterDeclaration))
				setterDeclaration := getDeclarationOfKind(propertySymbol, ast.KindSetAccessor)
				setterSignature := c.getSignatureFromDeclaration(setterDeclaration)
				typeElements.push(setCommentRange(context, signatureToSignatureDeclarationHelper(setterSignature, ast.KindSetAccessor, context, &SignatureToSignatureDeclarationOptions{
					name: propertyName,
				}).AsSetAccessorDeclaration(), setterDeclaration))
				return
			}
		}

		var optionalToken * /* TODO(TS-TO-GO) inferred type PunctuationToken<SyntaxKind.QuestionToken> */ any
		if propertySymbol.Flags&ast.SymbolFlagsOptional != 0 {
			optionalToken = factory.createToken(ast.KindQuestionToken)
		} else {
			optionalToken = nil
		}
		if propertySymbol.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsMethod) != 0 && c.getPropertiesOfObjectType(propertyType).length == 0 && !c.isReadonlySymbol(propertySymbol) {
			signatures := c.getSignaturesOfType(c.filterType(propertyType, func(t *Type) bool {
				return t.flags&TypeFlagsUndefined == 0
			}), SignatureKindCall)
			for _, signature := range signatures {
				methodDeclaration := signatureToSignatureDeclarationHelper(signature, ast.KindMethodSignature, context, &SignatureToSignatureDeclarationOptions{
					name:          propertyName,
					questionToken: optionalToken,
				}).AsMethodSignature()
				typeElements.push(preserveCommentsOn(methodDeclaration))
			}
			if signatures.length != 0 || optionalToken == nil {
				return
			}
		}
		var propertyTypeNode TypeNode
		if shouldUsePlaceholderForProperty(propertySymbol, context) {
			propertyTypeNode = createElidedInformationPlaceholder(context)
		} else {
			if propertyIsReverseMapped {
				context.reverseMappedStack = context.reverseMappedStack || []never{}
				context.reverseMappedStack.push(propertySymbol.(ReverseMappedSymbol))
			}
			if propertyType {
				propertyTypeNode = serializeTypeForDeclaration(context, nil /*declaration*/, propertyType, propertySymbol)
			} else {
				propertyTypeNode = factory.createKeywordTypeNode(ast.KindAnyKeyword)
			}
			if propertyIsReverseMapped {
				context.reverseMappedStack.pop()
			}
		}

		var modifiers *[] /* TODO(TS-TO-GO) inferred type ModifierToken<SyntaxKind.ReadonlyKeyword> */ any
		if c.isReadonlySymbol(propertySymbol) {
			modifiers = [] /* TODO(TS-TO-GO) inferred type ModifierToken<SyntaxKind.ReadonlyKeyword> */ any{factory.createToken(ast.KindReadonlyKeyword)}
		} else {
			modifiers = nil
		}
		if modifiers != nil {
			context.approximateLength += 9
		}
		propertySignature := factory.createPropertySignature(modifiers, propertyName, optionalToken, propertyTypeNode)

		typeElements.push(preserveCommentsOn(propertySignature))

		preserveCommentsOn := func(node T) T {
			jsdocPropertyTag := propertySymbol.Declarations. /* ? */ find(func(d Declaration) bool {
				return d.Kind == ast.KindJSDocPropertyTag
			})
			if jsdocPropertyTag != nil {
				commentText := getTextOfJSDocComment(jsdocPropertyTag.Comment)
				if commentText {
					setSyntheticLeadingComments(node, [] /* TODO(TS-TO-GO) inferred type { kind: SyntaxKind.MultiLineCommentTrivia; text: string; pos: -1; end: -1; hasTrailingNewLine: true; } */ any{SynthesizedComment{
						kind:               ast.KindMultiLineCommentTrivia,
						text:               "*\n * " + commentText.replace( /* TODO(TS-TO-GO) Expression RegularExpressionLiteral: /\n/g */ TODO, "\n * ") + "\n ",
						pos:                -1,
						end:                -1,
						hasTrailingNewLine: true,
					}})
				}
			} else if propertySymbol.ValueDeclaration != nil {
				// Copy comments to node for declaration emit
				setCommentRange(context, node, propertySymbol.ValueDeclaration)
			}
			return node
		}

	}

	setCommentRange := func(context NodeBuilderContext, node T, range_ *ast.Node) T {
		if context.enclosingFile != nil && context.enclosingFile == getSourceFileOfNode(range_) {
			// Copy comments to node for declaration emit
			return setCommentRangeWorker(node, range_)
		}
		return node
	}

	mapToTypeNodes := func(types *[]*Type, context NodeBuilderContext, isBareList bool) *[]TypeNode {
		if core.Some(types) {
			if checkTruncationLength(context) {
				if !isBareList {
					return [] /* TODO(TS-TO-GO) inferred type KeywordTypeNode<SyntaxKind.AnyKeyword> | TypeReferenceNode */ any{ifElse(context.flags&NodeBuilderFlagsNoTruncation != 0, addSyntheticLeadingComment(factory.createKeywordTypeNode(ast.KindAnyKeyword), ast.KindMultiLineCommentTrivia, "elided"), factory.createTypeReferenceNode("...", nil /*typeArguments*/))}
				} else if types.length > 2 {
					return []TypeNode{typeToTypeNodeHelper(types[0], context), ifElse(context.flags&NodeBuilderFlagsNoTruncation != 0, addSyntheticLeadingComment(factory.createKeywordTypeNode(ast.KindAnyKeyword), ast.KindMultiLineCommentTrivia, __TEMPLATE__("... ", types.length-2, " more elided ...")), factory.createTypeReferenceNode(__TEMPLATE__("... ", types.length-2, " more ..."), nil /*typeArguments*/)), typeToTypeNodeHelper(types[types.length-1], context)}
				}
			}
			mayHaveNameCollisions := context.flags&NodeBuilderFlagsUseFullyQualifiedType == 0
			/** Map from type reference identifier text to [type, index in `result` where the type node is] */

			var seenNames * /* TODO(TS-TO-GO) inferred type MultiMap<__String, [Type, number]> */ any
			if mayHaveNameCollisions {
				seenNames = createMultiMap()
			} else {
				seenNames = nil
			}
			var result []TypeNode = []never{}
			i := 0
			for _, t := range types {
				i++
				if checkTruncationLength(context) && (i+2 < types.length-1) {
					result.push(ifElse(context.flags&NodeBuilderFlagsNoTruncation != 0, addSyntheticLeadingComment(factory.createKeywordTypeNode(ast.KindAnyKeyword), ast.KindMultiLineCommentTrivia, __TEMPLATE__("... ", types.length-i, " more elided ...")), factory.createTypeReferenceNode(__TEMPLATE__("... ", types.length-i, " more ..."), nil /*typeArguments*/)))
					typeNode := typeToTypeNodeHelper(types[types.length-1], context)
					if typeNode {
						result.push(typeNode)
					}
					break
				}
				context.approximateLength += 2
				// Account for whitespace + separator
				typeNode := typeToTypeNodeHelper(t, context)
				if typeNode {
					result.push(typeNode)
					if seenNames != nil && isIdentifierTypeReference(typeNode) {
						seenNames.add(typeNode.TypeName.EscapedText, []any{t, result.length - 1})
					}
				}
			}

			if seenNames != nil {
				// To avoid printing types like `[Foo, Foo]` or `Bar & Bar` where
				// occurrences of the same name actually come from different
				// namespaces, go through the single-identifier type reference nodes
				// we just generated, and see if any names were generated more than
				// once while referring to different types. If so, regenerate the
				// type node for each entry by that name with the
				// `UseFullyQualifiedType` flag enabled.
				restoreFlags := saveRestoreFlags(context)
				context.flags |= NodeBuilderFlagsUseFullyQualifiedType
				seenNames.forEach(func(types [] /* TODO(TS-TO-GO) inferred type [Type, number] */ any) {
					if !arrayIsHomogeneous(types, func(TODO_IDENTIFIER /* TODO(TS-TO-GO) inferred type [Type, number] */ any, TODO_IDENTIFIER /* TODO(TS-TO-GO) inferred type [Type, number] */ any) bool {
						return typesAreSameReference(a, b)
					}) {
						for _, TODO_IDENTIFIER := range types {
							result[resultIndex] = typeToTypeNodeHelper(t, context)
						}
					}
				})
				restoreFlags()
			}

			return result
		}
	}

	typesAreSameReference := func(a *Type, b *Type) bool {
		return a == b || a.symbol && a.symbol == b.symbol || a.aliasSymbol != nil && a.aliasSymbol == b.aliasSymbol
	}

	indexInfoToIndexSignatureDeclarationHelper := func(indexInfo IndexInfo, context NodeBuilderContext, typeNode *TypeNode) IndexSignatureDeclaration {
		name := getNameFromIndexInfo(indexInfo) || "x"
		indexerTypeNode := typeToTypeNodeHelper(indexInfo.keyType, context)

		indexingParameter := factory.createParameterDeclaration(nil, nil, name, nil, indexerTypeNode, nil)
		if typeNode == nil {
			typeNode = typeToTypeNodeHelper(indexInfo.type_ || c.anyType, context)
		}
		if !indexInfo.type_ && context.flags&NodeBuilderFlagsAllowEmptyIndexInfoType == 0 {
			context.encounteredError = true
		}
		context.approximateLength += name.length + 4
		return factory.createIndexSignature(ifElse(indexInfo.isReadonly, [] /* TODO(TS-TO-GO) inferred type ModifierToken<SyntaxKind.ReadonlyKeyword> */ any{factory.createToken(ast.KindReadonlyKeyword)}, nil), []ParameterDeclaration{indexingParameter}, typeNode)
	}

	type SignatureToSignatureDeclarationOptions struct {
		modifiers     []Modifier
		name          PropertyName
		questionToken QuestionToken
	}

	signatureToSignatureDeclarationHelper := func(signature Signature, kind /* TODO(TS-TO-GO) TypeNode IndexedAccessType: SignatureDeclaration["kind"] */ any, context NodeBuilderContext, options SignatureToSignatureDeclarationOptions) SignatureDeclaration {
		var typeParameters *[]TypeParameterDeclaration
		var typeArguments *[]TypeNode

		expandedParams := c.getExpandedParameters(signature, true /*skipUnionExpanding*/)[0]
		cleanup := enterNewScope(context, signature.declaration, expandedParams, signature.typeParameters, signature.parameters, signature.mapper)
		context.approximateLength += 3
		// Usually a signature contributes a few more characters than this, but 3 is the minimum

		if context.flags&NodeBuilderFlagsWriteTypeArgumentsOfSignature != 0 && signature.target != nil && signature.mapper != nil && signature.target.typeParameters != nil {
			typeArguments = signature.target.typeParameters.map_(func(parameter TypeParameter) TypeNode {
				return typeToTypeNodeHelper(c.instantiateType(parameter, signature.mapper), context)
			})
		} else {
			typeParameters = signature.typeParameters && signature.typeParameters.map_(func(parameter TypeParameter) TypeParameterDeclaration {
				return typeParameterToDeclaration(parameter, context)
			})
		}

		restoreFlags := saveRestoreFlags(context)
		context.flags &^= NodeBuilderFlagsSuppressAnyReturnType
		// If the expanded parameter list had a variadic in a non-trailing position, don't expand it
		parameters := (ifElse(core.Some(expandedParams, func(p *ast.Symbol) bool {
			return p != expandedParams[expandedParams.length-1] && getCheckFlags(p)&ast.CheckFlagsRestParameter != 0
		}), signature.parameters, expandedParams)).map_(func(parameter *ast.Symbol) ParameterDeclaration {
			return symbolToParameterDeclaration(parameter, context, kind == ast.KindConstructor)
		})
		var thisParameter *ParameterDeclaration
		if context.flags&NodeBuilderFlagsOmitThisParameter != 0 {
			thisParameter = nil
		} else {
			thisParameter = tryGetThisParameterDeclaration(signature, context)
		}
		if thisParameter != nil {
			parameters.unshift(thisParameter)
		}
		restoreFlags()

		returnTypeNode := serializeReturnTypeForSignature(context, signature)

		modifiers := options. /* ? */ modifiers
		if (kind == ast.KindConstructorType) && signature.flags&SignatureFlagsAbstract != 0 {
			flags := modifiersToFlags(modifiers)
			modifiers = factory.createModifiersFromModifierFlags(flags | ast.ModifierFlagsAbstract)
		}

		var node /* TODO(TS-TO-GO) inferred type CallSignatureDeclaration | ConstructSignatureDeclaration | MethodSignature | IndexSignatureDeclaration | FunctionTypeNode | ConstructorTypeNode | JSDocFunctionType | FunctionDeclaration | MethodDeclaration | ConstructorDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | FunctionExpression | ArrowFunction */ any
		switch {
		case kind == ast.KindCallSignature:
			node = factory.createCallSignature(typeParameters, parameters, returnTypeNode)
		case kind == ast.KindConstructSignature:
			node = factory.createConstructSignature(typeParameters, parameters, returnTypeNode)
		case kind == ast.KindMethodSignature:
			node = factory.createMethodSignature(modifiers, ifNotNilElse(options. /* ? */ name, factory.createIdentifier("")), options. /* ? */ questionToken, typeParameters, parameters, returnTypeNode)
		case kind == ast.KindMethodDeclaration:
			node = factory.createMethodDeclaration(modifiers, nil /*asteriskToken*/, ifNotNilElse(options. /* ? */ name, factory.createIdentifier("")), nil /*questionToken*/, typeParameters, parameters, returnTypeNode, nil /*body*/)
		case kind == ast.KindConstructor:
			node = factory.createConstructorDeclaration(modifiers, parameters, nil /*body*/)
		case kind == ast.KindGetAccessor:
			node = factory.createGetAccessorDeclaration(modifiers, ifNotNilElse(options. /* ? */ name, factory.createIdentifier("")), parameters, returnTypeNode, nil /*body*/)
		case kind == ast.KindSetAccessor:
			node = factory.createSetAccessorDeclaration(modifiers, ifNotNilElse(options. /* ? */ name, factory.createIdentifier("")), parameters, nil /*body*/)
		case kind == ast.KindIndexSignature:
			node = factory.createIndexSignature(modifiers, parameters, returnTypeNode)
		case kind == ast.KindJSDocFunctionType:
			node = factory.createJSDocFunctionType(parameters, returnTypeNode)
		case kind == ast.KindFunctionType:
			node = factory.createFunctionTypeNode(typeParameters, parameters, ifNotNilElse(returnTypeNode, factory.createTypeReferenceNode(factory.createIdentifier(""))))
		case kind == ast.KindConstructorType:
			node = factory.createConstructorTypeNode(modifiers, typeParameters, parameters, ifNotNilElse(returnTypeNode, factory.createTypeReferenceNode(factory.createIdentifier(""))))
		case kind == ast.KindFunctionDeclaration:
			node = factory.createFunctionDeclaration(modifiers, nil /*asteriskToken*/, ifElse(options. /* ? */ name != nil, cast(options.name, isIdentifier), factory.createIdentifier("")), typeParameters, parameters, returnTypeNode, nil /*body*/)
		case kind == ast.KindFunctionExpression:
			node = factory.createFunctionExpression(modifiers, nil /*asteriskToken*/, ifElse(options. /* ? */ name != nil, cast(options.name, isIdentifier), factory.createIdentifier("")), typeParameters, parameters, returnTypeNode, factory.createBlock([]never{}))
		case kind == ast.KindArrowFunction:
			node = factory.createArrowFunction(modifiers, typeParameters, parameters, returnTypeNode, nil /*equalsGreaterThanToken*/, factory.createBlock([]never{}))
		default:
			node = Debug.assertNever(kind)
		}

		if typeArguments != nil {
			node.TypeArguments = factory.createNodeArray(typeArguments)
		}
		if signature.declaration. /* ? */ kind == ast.KindJSDocSignature && signature.declaration.Parent.Kind == ast.KindJSDocOverloadTag {
			comment := getTextOfNode(signature.declaration.Parent.Parent, true /*includeTrivia*/).slice(2, -2).split(regexp.MustParse(`\r\n|\n|\r`)).map_(func(line string) string {
				return line.replace(regexp.MustParse(`^\s+`), " ")
			}).join("\n")
			addSyntheticLeadingComment(node, ast.KindMultiLineCommentTrivia, comment, true /*hasTrailingNewLine*/)
		}

		cleanup()
		return node
	}

	type IntroducesNewScopeNode Union[SignatureDeclaration, JSDocSignature, MappedTypeNode]

	isNewScopeNode := func(node *ast.Node) bool {
		return isFunctionLike(node) || isJSDocSignature(node) || isMappedTypeNode(node)
	}

	getTypeParametersInScope := func(node Union[IntroducesNewScopeNode, ConditionalTypeNode]) *[]TypeParameter {
		switch {
		case isFunctionLike(node) || isJSDocSignature(node):
			return c.getSignatureFromDeclaration(node).typeParameters
		case isConditionalTypeNode(node):
			return c.getInferTypeParameters(node)
		default:
			return []TypeParameter{c.getDeclaredTypeOfTypeParameter(c.getSymbolOfDeclaration(node.TypeParameter))}
		}
	}

	getParametersInScope := func(node Union[IntroducesNewScopeNode, ConditionalTypeNode]) *[]*ast.Symbol {
		if isFunctionLike(node) || isJSDocSignature(node) {
			return c.getSignatureFromDeclaration(node).parameters
		} else {
			return nil
		}
	}

	enterNewScope := func(context NodeBuilderContext, declaration Union[IntroducesNewScopeNode, ConditionalTypeNode, undefined], expandedParams *[]*ast.Symbol, typeParameters *[]TypeParameter, originalParameters *[]*ast.Symbol, mapper TypeMapper) /* TODO(TS-TO-GO) inferred type () => void */ any {
		cleanupContext := cloneNodeBuilderContext(context)
		// For regular function/method declarations, the enclosing declaration will already be signature.declaration,
		// so this is a no-op, but for arrow functions and function expressions, the enclosing declaration will be
		// the declaration that the arrow function / function expression is assigned to.
		//
		// If the parameters or return type include "typeof globalThis.paramName", using the wrong scope will lead
		// us to believe that we can emit "typeof paramName" instead, even though that would refer to the parameter,
		// not the global. Make sure we are in the right scope by changing the enclosingDeclaration to the function.
		//
		// We can't use the declaration directly; it may be in another file and so we may lose access to symbols
		// accessible to the current enclosing declaration, or gain access to symbols not accessible to the current
		// enclosing declaration. To keep this chain accurate, insert a fake scope into the chain which makes the
		// function's parameters visible.
		var cleanupParams *func()
		var cleanupTypeParams *func()
		oldEnclosingDecl := context.enclosingDeclaration
		oldMapper := context.mapper
		if mapper != nil {
			context.mapper = mapper
		}
		if context.enclosingDeclaration != nil && declaration != nil {
			// As a performance optimization, reuse the same fake scope within this chain.
			// This is especially needed when we are working on an excessively deep type;
			// if we don't do this, then we spend all of our time adding more and more
			// scopes that need to be searched in isSymbolAccessible later. Since all we
			// really want to do is to mark certain names as unavailable, we can just keep
			// all of the names we're introducing in one large table and push/pop from it as
			// needed; isSymbolAccessible will walk upward and find the closest "fake" scope,
			// which will conveniently report on any and all faked scopes in the chain.
			//
			// It'd likely be better to store this somewhere else for isSymbolAccessible, but
			// since that API _only_ uses the enclosing declaration (and its parents), this is
			// seems like the best way to inject names into that search process.
			//
			// Note that we only check the most immediate enclosingDeclaration; the only place we
			// could potentially add another fake scope into the chain is right here, so we don't
			// traverse all ancestors.
			if !core.Some(expandedParams) {
				cleanupParams = nil
			} else {
				cleanupParams = pushFakeScope("params", func(add /* TODO(TS-TO-GO) inferred type (name: __String, symbol: Symbol) => void */ any) {
					if !expandedParams {
						return
					}
					for pIndex := 0; pIndex < expandedParams.length; pIndex++ {
						param := expandedParams[pIndex]
						originalParam := originalParameters[pIndex]
						if originalParameters != nil && originalParam != param {
							// Can't reference parameters that come from an expansion
							add(param.EscapedName, c.unknownSymbol)
							// Can't reference the original expanded parameter either
							if originalParam != nil {
								add(originalParam.EscapedName, c.unknownSymbol)
							}
						} else if !forEach(param.Declarations, func(d Declaration) *true {
							if isParameter(d) && isBindingPattern(d.Name) {
								bindPattern(d.Name)
								return true
							}
							return nil
							bindPattern := func(p BindingPattern) {
								forEach(p.Elements, func(e /* TODO(TS-TO-GO) inferred type BindingElement | OmittedExpression */ any) {
									switch e.Kind {
									case ast.KindOmittedExpression:
										return
									case ast.KindBindingElement:
										return bindElement(e)
									default:
										return Debug.assertNever(e)
									}
								})
							}

							bindElement := func(e BindingElement) {
								if isBindingPattern(e.Name) {
									return bindPattern(e.Name)
								}
								symbol := c.getSymbolOfDeclaration(e)
								add(symbol.EscapedName, symbol)
							}

						}) {
							add(param.EscapedName, param)
						}
					}
				})
			}

			if context.flags&NodeBuilderFlagsGenerateNamesForShadowedTypeParams != 0 && core.Some(typeParameters) {
				cleanupTypeParams = pushFakeScope("typeParams", func(add /* TODO(TS-TO-GO) inferred type (name: __String, symbol: Symbol) => void */ any) {
					for _, typeParam := range ifNotNilElse(typeParameters, emptyArray) {
						typeParamName := typeParameterToName(typeParam, context).EscapedText
						add(typeParamName, typeParam.symbol)
					}
				})
			}

			pushFakeScope := func(kind Union[ /* TODO(TS-TO-GO) TypeNode LiteralType: "params" */ any /* TODO(TS-TO-GO) TypeNode LiteralType: "typeParams" */, any], addAll func(addSymbol func(name string, symbol *ast.Symbol))) * /* TODO(TS-TO-GO) inferred type (() => void) */ any {
				// We only ever need to look two declarations upward.
				Debug.assert(context.enclosingDeclaration)
				var existingFakeScope *ast.Node
				if c.getNodeLinks(context.enclosingDeclaration).fakeScopeForSignatureDeclaration == kind {
					existingFakeScope = context.enclosingDeclaration
				} else if context.enclosingDeclaration.Parent && c.getNodeLinks(context.enclosingDeclaration.Parent).fakeScopeForSignatureDeclaration == kind {
					existingFakeScope = context.enclosingDeclaration.Parent
				}
				Debug.assertOptionalNode(existingFakeScope, isBlock)

				locals := ifNotNilElse(existingFakeScope. /* ? */ locals, createSymbolTable())
				var newLocals *[]string
				var oldLocals *[] /* TODO(TS-TO-GO) TypeNode TypeLiteral: { name: __String; oldSymbol: Symbol; } */ any
				addAll(func(name string, symbol *ast.Symbol) {
					// Add cleanup information only if we don't own the fake scope
					if existingFakeScope != nil {
						oldSymbol := locals.get(name)
						if oldSymbol == nil {
							newLocals = append(newLocals, name)
						} else {
							oldLocals = append(oldLocals, map[any]any{ /* TODO(TS-TO-GO): was object literal */
								"name":      name,
								"oldSymbol": oldSymbol,
							})
						}
					}
					locals.set(name, symbol)
				})

				if existingFakeScope == nil {
					// Use a Block for this; the type of the node doesn't matter so long as it
					// has locals, and this is cheaper/easier than using a function-ish Node.
					fakeScope := factory.createBlock(emptyArray)
					c.getNodeLinks(fakeScope).fakeScopeForSignatureDeclaration = kind
					fakeScope.Locals = locals

					setParent(fakeScope, context.enclosingDeclaration)
					context.enclosingDeclaration = fakeScope
				} else {
					// We did not create the current scope, so we have to clean it up
					return func /* undo */ () {
						forEach(newLocals, func(s string) bool {
							return locals.delete(s)
						})
						forEach(oldLocals, func(s /* TODO(TS-TO-GO) inferred type { name: __String; oldSymbol: Symbol; } */ any) SymbolTable {
							return locals.set(s.name, s.oldSymbol)
						})
					}
				}
			}

		}

		return func() {
			cleanupParams()
			cleanupTypeParams()
			cleanupContext()
			context.enclosingDeclaration = oldEnclosingDecl
			context.mapper = oldMapper
		}
	}

	tryGetThisParameterDeclaration := func(signature Signature, context NodeBuilderContext) *ParameterDeclaration {
		if signature.thisParameter != nil {
			return symbolToParameterDeclaration(signature.thisParameter, context)
		}
		if signature.declaration != nil && isInJSFile(signature.declaration) {
			thisTag := getJSDocThisTag(signature.declaration)
			if thisTag != nil && thisTag.TypeExpression {
				return factory.createParameterDeclaration(nil, nil, "this", nil, typeToTypeNodeHelper(getTypeFromTypeNode(context, thisTag.TypeExpression), context))
			}
		}
	}

	typeParameterToDeclarationWithConstraint := func(t TypeParameter, context NodeBuilderContext, constraintNode *TypeNode) TypeParameterDeclaration {
		restoreFlags := saveRestoreFlags(context)
		context.flags &^= NodeBuilderFlagsWriteTypeParametersInQualifiedName
		// Avoids potential infinite loop when building for a claimspace with a generic
		modifiers := factory.createModifiersFromModifierFlags(c.getTypeParameterModifiers(t))
		name := typeParameterToName(t, context)
		defaultParameter := c.getDefaultFromTypeParameter(t)
		defaultParameterNode := defaultParameter && typeToTypeNodeHelper(defaultParameter, context)
		restoreFlags()
		return factory.createTypeParameterDeclaration(modifiers, name, constraintNode, defaultParameterNode)
	}

	typeToTypeNodeHelperWithPossibleReusableTypeNode := func(t *Type, typeNode *TypeNode, context NodeBuilderContext) TypeNode {
		return typeNode && tryReuseExistingNonParameterTypeNode(context, typeNode, t) || typeToTypeNodeHelper(t, context)
	}

	typeParameterToDeclaration := func(t TypeParameter, context NodeBuilderContext, constraint *Type /*  = getConstraintOfTypeParameter(type) */) TypeParameterDeclaration {
		constraintNode := constraint && typeToTypeNodeHelperWithPossibleReusableTypeNode(constraint, c.getConstraintDeclaration(t), context)
		return typeParameterToDeclarationWithConstraint(t, context, constraintNode)
	}

	typePredicateToTypePredicateNodeHelper := func(typePredicate TypePredicate, context NodeBuilderContext) TypePredicateNode {
		var assertsModifier * /* TODO(TS-TO-GO) inferred type KeywordToken<SyntaxKind.AssertsKeyword> */ any
		if typePredicate.kind == TypePredicateKindAssertsThis || typePredicate.kind == TypePredicateKindAssertsIdentifier {
			assertsModifier = factory.createToken(ast.KindAssertsKeyword)
		} else {
			assertsModifier = nil
		}
		var parameterName /* TODO(TS-TO-GO) inferred type Identifier | ThisTypeNode */ any
		if typePredicate.kind == TypePredicateKindIdentifier || typePredicate.kind == TypePredicateKindAssertsIdentifier {
			parameterName = setEmitFlags(factory.createIdentifier(typePredicate.parameterName), EmitFlagsNoAsciiEscaping)
		} else {
			parameterName = factory.createThisTypeNode()
		}
		typeNode := typePredicate.type_ && typeToTypeNodeHelper(typePredicate.type_, context)
		return factory.createTypePredicateNode(assertsModifier, parameterName, typeNode)
	}

	getEffectiveParameterDeclaration := func(parameterSymbol *ast.Symbol) Union[ParameterDeclaration, JSDocParameterTag, undefined] {
		var parameterDeclaration Union[ParameterDeclaration, JSDocParameterTag, undefined] = getDeclarationOfKind(parameterSymbol, ast.KindParameter)
		if parameterDeclaration != nil {
			return parameterDeclaration
		}
		if !isTransientSymbol(parameterSymbol) {
			return getDeclarationOfKind(parameterSymbol, ast.KindJSDocParameterTag)
		}
	}

	symbolToParameterDeclaration := func(parameterSymbol *ast.Symbol, context NodeBuilderContext, preserveModifierFlags bool) ParameterDeclaration {
		parameterDeclaration := getEffectiveParameterDeclaration(parameterSymbol)

		parameterType := c.getTypeOfSymbol(parameterSymbol)
		parameterTypeNode := serializeTypeForDeclaration(context, parameterDeclaration, parameterType, parameterSymbol)

		var modifiers *[]Modifier
		if context.flags&NodeBuilderFlagsOmitParameterModifiers == 0 && preserveModifierFlags && parameterDeclaration != nil && canHaveModifiers(parameterDeclaration) {
			modifiers = core.Map(getModifiers(parameterDeclaration), factory.cloneNode)
		} else {
			modifiers = nil
		}
		isRest := parameterDeclaration && isRestParameter(parameterDeclaration) || getCheckFlags(parameterSymbol)&ast.CheckFlagsRestParameter
		var dotDotDotToken * /* TODO(TS-TO-GO) inferred type PunctuationToken<SyntaxKind.DotDotDotToken> */ any
		if isRest {
			dotDotDotToken = factory.createToken(ast.KindDotDotDotToken)
		} else {
			dotDotDotToken = nil
		}
		name := parameterToParameterDeclarationName(parameterSymbol, parameterDeclaration, context)
		isOptional := parameterDeclaration && c.isOptionalParameter(parameterDeclaration) || getCheckFlags(parameterSymbol)&ast.CheckFlagsOptionalParameter
		var questionToken * /* TODO(TS-TO-GO) inferred type PunctuationToken<SyntaxKind.QuestionToken> */ any
		if isOptional {
			questionToken = factory.createToken(ast.KindQuestionToken)
		} else {
			questionToken = nil
		}
		parameterNode := factory.createParameterDeclaration(modifiers, dotDotDotToken, name, questionToken, parameterTypeNode, nil)
		context.approximateLength += symbolName(parameterSymbol).length + 3
		return parameterNode
	}

	parameterToParameterDeclarationName := func(parameterSymbol *ast.Symbol, parameterDeclaration Union[ParameterDeclaration, JSDocParameterTag, undefined], context NodeBuilderContext) /* TODO(TS-TO-GO) inferred type string | BindingName */ any {
		switch {
		case parameterDeclaration != nil:
			switch {
			case parameterDeclaration.Name:
				switch {
				case parameterDeclaration.Name.Kind == ast.KindIdentifier:
					return setEmitFlags(factory.cloneNode(parameterDeclaration.Name), EmitFlagsNoAsciiEscaping)
				case parameterDeclaration.Name.Kind == ast.KindQualifiedName:
					return setEmitFlags(factory.cloneNode(parameterDeclaration.Name.Right), EmitFlagsNoAsciiEscaping)
				default:
					return cloneBindingName(parameterDeclaration.Name)
				}
			default:
				return symbolName(parameterSymbol)
			}
		default:
			return symbolName(parameterSymbol)
		}

		cloneBindingName := func(node BindingName) BindingName {
			return elideInitializerAndSetEmitFlags(node).AsBindingName()
			elideInitializerAndSetEmitFlags := func(node *ast.Node) *ast.Node {
				if context.tracker.canTrackSymbol && isComputedPropertyName(node) && c.isLateBindableName(node) {
					trackComputedName(node.Expression, context.enclosingDeclaration, context)
				}
				visited := visitEachChildWorker(node, elideInitializerAndSetEmitFlags, nil /*context*/, nil /*nodesVisitor*/, elideInitializerAndSetEmitFlags)
				if isBindingElement(visited) {
					visited = factory.updateBindingElement(visited, visited.DotDotDotToken, visited.PropertyName, visited.Name, nil)
				}
				if !nodeIsSynthesized(visited) {
					visited = factory.cloneNode(visited)
				}
				return setEmitFlags(visited, EmitFlagsSingleLine|EmitFlagsNoAsciiEscaping)
			}

		}

	}

	trackComputedName := func(accessExpression EntityNameOrEntityNameExpression, enclosingDeclaration *ast.Node, context NodeBuilderContext) {
		if !context.tracker.canTrackSymbol {
			return
		}
		// get symbol of the first identifier of the entityName
		firstIdentifier := getFirstIdentifier(accessExpression)
		name := c.resolveName(firstIdentifier, firstIdentifier.EscapedText, ast.SymbolFlagsValue|ast.SymbolFlagsExportValue, nil /*nameNotFoundMessage*/, true /*isUse*/)
		if name != nil {
			context.tracker.trackSymbol(name, enclosingDeclaration, ast.SymbolFlagsValue)
		}
	}

	lookupSymbolChain := func(symbol *ast.Symbol, context NodeBuilderContext, meaning SymbolFlags, yieldModuleSymbol bool) []*ast.Symbol {
		context.tracker.trackSymbol(symbol, context.enclosingDeclaration, meaning)
		return lookupSymbolChainWorker(symbol, context, meaning, yieldModuleSymbol)
	}

	lookupSymbolChainWorker := func(symbol *ast.Symbol, context NodeBuilderContext, meaning SymbolFlags, yieldModuleSymbol bool) []*ast.Symbol {
		// Try to get qualified name if the symbol is not a type parameter and there is an enclosing declaration.
		var chain []*ast.Symbol
		isTypeParameter := symbol.Flags & ast.SymbolFlagsTypeParameter
		if isTypeParameter == 0 && (context.enclosingDeclaration != nil || context.flags&NodeBuilderFlagsUseFullyQualifiedType != 0) && context.internalFlags&InternalNodeBuilderFlagsDoNotIncludeSymbolChain == 0 {
			chain = Debug.checkDefined(getSymbolChain(symbol, meaning, true /*endOfChain*/))
			Debug.assert(chain && chain.length > 0)
		} else {
			chain = []*ast.Symbol{symbol}
		}
		return chain
		/** @param endOfChain Set to false for recursive calls; non-recursive calls should always output something. */

		getSymbolChain := func(symbol *ast.Symbol, meaning SymbolFlags, endOfChain bool) *[]*ast.Symbol {
			accessibleSymbolChain := c.getAccessibleSymbolChain(symbol, context.enclosingDeclaration, meaning, context.flags&NodeBuilderFlagsUseOnlyExternalAliasing != 0)
			var parentSpecifiers []*string
			if accessibleSymbolChain == nil || c.needsQualification(accessibleSymbolChain[0], context.enclosingDeclaration, ifElse(accessibleSymbolChain.length == 1, meaning, c.getQualifiedLeftMeaning(meaning))) {
				// Go up and add our parent.
				parents := c.getContainersOfSymbol(ifElse(accessibleSymbolChain != nil, accessibleSymbolChain[0], symbol), context.enclosingDeclaration, meaning)
				if length(parents) != 0 {
					parentSpecifiers = parents.map_(func(symbol *ast.Symbol) *string {
						if core.Some(symbol.Declarations, c.hasNonGlobalAugmentationExternalModuleSymbol) {
							return getSpecifierForModuleSymbol(symbol, context)
						} else {
							return nil
						}
					})
					indices := parents.map_(func(_ *ast.Symbol, i number) number {
						return i
					})
					indices.sort(sortByBestName)
					sortedParents := indices.map_(func(i number) *ast.Symbol {
						return parents[i]
					})
					for _, parent := range sortedParents {
						parentChain := getSymbolChain(parent, c.getQualifiedLeftMeaning(meaning), false /*endOfChain*/)
						if parentChain != nil {
							if parent.Exports != nil && parent.Exports.get(InternalSymbolNameExportEquals) != nil && c.getSymbolIfSameReference(parent.Exports.get(InternalSymbolNameExportEquals), symbol) != nil {
								// parentChain root _is_ symbol - symbol is a module export=, so it kinda looks like it's own parent
								// No need to lookup an alias for the symbol in itself
								accessibleSymbolChain = parentChain
								break
							}
							accessibleSymbolChain = parentChain.concat(accessibleSymbolChain || []*ast.Symbol{c.getAliasForSymbolInContainer(parent, symbol) || symbol})
							break
						}
					}
				}
			}

			if accessibleSymbolChain != nil {
				return accessibleSymbolChain
			}
			if endOfChain || symbol.Flags&(ast.SymbolFlagsTypeLiteral|ast.SymbolFlagsObjectLiteral) == 0 {
				// If a parent symbol is an external module, don't write it. (We prefer just `x` vs `"foo/bar".x`.)
				if !endOfChain && !yieldModuleSymbol && forEach(symbol.Declarations, c.hasNonGlobalAugmentationExternalModuleSymbol) {
					return
				}
				return []*ast.Symbol{symbol}
			}

			sortByBestName := func(a number, b number) number {
				specifierA := parentSpecifiers[a]
				specifierB := parentSpecifiers[b]
				if specifierA && specifierB {
					isBRelative := pathIsRelative(specifierB)
					if pathIsRelative(specifierA) == isBRelative {
						// Both relative or both non-relative, sort by number of parts
						return moduleSpecifiers.countPathComponents(specifierA) - moduleSpecifiers.countPathComponents(specifierB)
					}
					if isBRelative {
						// A is non-relative, B is relative: prefer A
						return -1
					}
					// A is relative, B is non-relative: prefer B
					return 1
				}
				return 0
			}

		}

	}

	typeParametersToTypeParameterDeclarations := func(symbol *ast.Symbol, context NodeBuilderContext) *NodeArray[TypeParameterDeclaration] {
		var typeParameterNodes *NodeArray[TypeParameterDeclaration]
		targetSymbol := c.getTargetSymbol(symbol)
		if targetSymbol.Flags&(ast.SymbolFlagsClass|ast.SymbolFlagsInterface|ast.SymbolFlagsTypeAlias) != 0 {
			typeParameterNodes = factory.createNodeArray(core.Map(c.getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol), func(tp TypeParameter) TypeParameterDeclaration {
				return typeParameterToDeclaration(tp, context)
			}))
		}
		return typeParameterNodes
	}

	lookupTypeParameterNodes := func(chain []*ast.Symbol, index number, context NodeBuilderContext) *[] /* TODO(TS-TO-GO) inferred type TypeNode[] | readonly TypeParameterDeclaration */ any {
		Debug.assert(chain && 0 <= index && index < chain.length)
		symbol := chain[index]
		symbolId := getSymbolId(symbol)
		if context.typeParameterSymbolList. /* ? */ has(symbolId) {
			return nil
		}
		if context.mustCreateTypeParameterSymbolList {
			context.mustCreateTypeParameterSymbolList = false
			context.typeParameterSymbolList = NewSet(context.typeParameterSymbolList)
		}
		context.typeParameterSymbolList.add(symbolId)
		var typeParameterNodes Union[[]TypeNode, []TypeParameterDeclaration, undefined]
		if context.flags&NodeBuilderFlagsWriteTypeParametersInQualifiedName != 0 && index < (chain.length-1) {
			parentSymbol := symbol
			nextSymbol := chain[index+1]
			if getCheckFlags(nextSymbol)&ast.CheckFlagsInstantiated != 0 {
				params := c.getTypeParametersOfClassOrInterface(ifElse(parentSymbol.Flags&ast.SymbolFlagsAlias != 0, c.resolveAlias(parentSymbol), parentSymbol))
				// NOTE: cast to TransientSymbol should be safe because only TransientSymbol can have CheckFlags.Instantiated
				typeParameterNodes = mapToTypeNodes(core.Map(params, func(t TypeParameter) *Type {
					return c.getMappedType(t, (nextSymbol.(TransientSymbol)).Links.mapper)
				}), context)
			} else {
				typeParameterNodes = typeParametersToTypeParameterDeclarations(symbol, context)
			}
		}
		return typeParameterNodes
	}

	/**
	 * Given A[B][C][D], finds A[B]
	 */

	getTopmostIndexedAccessType := func(top IndexedAccessTypeNode) IndexedAccessTypeNode {
		if isIndexedAccessTypeNode(top.ObjectType) {
			return getTopmostIndexedAccessType(top.ObjectType)
		}
		return top
	}

	getSpecifierForModuleSymbol := func(symbol *ast.Symbol, context NodeBuilderContext, overrideImportMode ResolutionMode) string {
		file := getDeclarationOfKind(symbol, ast.KindSourceFile)
		if file == nil {
			equivalentFileSymbol := firstDefined(symbol.Declarations, func(d Declaration) *ast.Symbol {
				return c.getFileSymbolIfFileSymbolExportEqualsContainer(d, symbol)
			})
			if equivalentFileSymbol != nil {
				file = getDeclarationOfKind(equivalentFileSymbol, ast.KindSourceFile)
			}
		}
		if file != nil && file.ModuleName != nil {
			// Use the amd name if it is available
			return file.ModuleName
		}
		if file == nil {
			if ambientModuleSymbolRegex.test(symbol.EscapedName /* as string */) {
				return (symbol.EscapedName /* as string */).substring(1, (symbol.EscapedName /* as string */).length-1)
			}
		}
		if context.enclosingFile == nil || context.tracker.moduleResolverHost == nil {
			// If there's no context declaration, we can't lookup a non-ambient specifier, so we just use the symbol name
			if ambientModuleSymbolRegex.test(symbol.EscapedName /* as string */) {
				return (symbol.EscapedName /* as string */).substring(1, (symbol.EscapedName /* as string */).length-1)
			}
			return getSourceFileOfNode(getNonAugmentationDeclaration(symbol)).FileName
			// A resolver may not be provided for baselines and errors - in those cases we use the fileName in full
		}
		enclosingDeclaration := getOriginalNode(context.enclosingDeclaration)
		var originalModuleSpecifier *StringLiteralLike
		if canHaveModuleSpecifier(enclosingDeclaration) {
			originalModuleSpecifier = tryGetModuleSpecifierFromDeclaration(enclosingDeclaration)
		} else {
			originalModuleSpecifier = nil
		}
		contextFile := context.enclosingFile
		resolutionMode := overrideImportMode || originalModuleSpecifier && host.getModeForUsageLocation(contextFile, originalModuleSpecifier) || contextFile && host.getDefaultResolutionModeForFile(contextFile)
		cacheKey := createModeAwareCacheKey(contextFile.Path, resolutionMode)
		links := c.getSymbolLinks(symbol)
		specifier := links.specifierCache && links.specifierCache.get(cacheKey)
		if !specifier {
			isBundle := c.compilerOptions.outFile
			// For declaration bundles, we need to generate absolute paths relative to the common source dir for imports,
			// just like how the declaration emitter does for the ambient module declarations - we can easily accomplish this
			// using the `baseUrl` compiler option (which we would otherwise never use in declaration emit) and a non-relative
			// specifier preference
			TODO_IDENTIFIER := context.tracker
			var specifierCompilerOptions CompilerOptions
			if isBundle {
				specifierCompilerOptions = map[any]any{ /* TODO(TS-TO-GO): was object literal */
					/* TODO(TS-TO-GO) Node SpreadAssignment: ...compilerOptions */
					"baseUrl": moduleResolverHost.getCommonSourceDirectory(),
				}
			} else {
				specifierCompilerOptions = c.compilerOptions
			}
			specifier = core.FirstOrNil(moduleSpecifiers.getModuleSpecifiers(symbol, c.checker, specifierCompilerOptions, contextFile, moduleResolverHost, UserPreferences{
				importModuleSpecifierPreference: ifElse(isBundle, "non-relative", "project-relative"),
				importModuleSpecifierEnding:     ifElse(isBundle, "minimal", ifElse(resolutionMode == ModuleKindESNext, "js", nil)),
			}, &ModuleSpecifierOptions{
				overrideImportMode: overrideImportMode,
			}))
			if links.specifierCache == nil {
				links.specifierCache = NewMap()
			}
			links.specifierCache.set(cacheKey, specifier)
		}
		return specifier
	}

	symbolToEntityNameNode := func(symbol *ast.Symbol) EntityName {
		identifier := factory.createIdentifier(unescapeLeadingUnderscores(symbol.EscapedName))
		if symbol.Parent != nil {
			return factory.createQualifiedName(symbolToEntityNameNode(symbol.Parent), identifier)
		} else {
			return identifier
		}
	}

	symbolToTypeNode := func(symbol *ast.Symbol, context NodeBuilderContext, meaning SymbolFlags, overrideTypeArguments []TypeNode) TypeNode {
		chain := lookupSymbolChain(symbol, context, meaning, context.flags&NodeBuilderFlagsUseAliasDefinedOutsideCurrentScope == 0)
		// If we're using aliases outside the current scope, dont bother with the module

		isTypeOf := meaning == ast.SymbolFlagsValue
		if core.Some(chain[0].Declarations, c.hasNonGlobalAugmentationExternalModuleSymbol) {
			// module is root, must use `ImportTypeNode`
			var nonRootParts * /* TODO(TS-TO-GO) inferred type EntityName | IndexedAccessTypeNode */ any
			if chain.length > 1 {
				nonRootParts = createAccessFromSymbolChain(chain, chain.length-1, 1)
			} else {
				nonRootParts = nil
			}
			typeParameterNodes := overrideTypeArguments || lookupTypeParameterNodes(chain, 0, context)
			contextFile := getSourceFileOfNode(getOriginalNode(context.enclosingDeclaration))
			targetFile := getSourceFileOfModule(chain[0])
			var specifier *string
			var attributes *ImportAttributes
			if getEmitModuleResolutionKind(c.compilerOptions) == ModuleResolutionKindNode16 || getEmitModuleResolutionKind(c.compilerOptions) == ModuleResolutionKindNodeNext {
				// An `import` type directed at an esm format file is only going to resolve in esm mode - set the esm mode assertion
				if targetFile. /* ? */ impliedNodeFormat == ModuleKindESNext && targetFile.ImpliedNodeFormat != contextFile. /* ? */ impliedNodeFormat {
					specifier = getSpecifierForModuleSymbol(chain[0], context, ModuleKindESNext)
					attributes = factory.createImportAttributes(factory.createNodeArray([]ImportAttribute{factory.createImportAttribute(factory.createStringLiteral("resolution-mode"), factory.createStringLiteral("import"))}))
				}
			}
			if !specifier {
				specifier = getSpecifierForModuleSymbol(chain[0], context)
			}
			if context.flags&NodeBuilderFlagsAllowNodeModulesRelativePaths == 0 && getEmitModuleResolutionKind(c.compilerOptions) != ModuleResolutionKindClassic && specifier.includes("/node_modules/") {
				oldSpecifier := specifier
				if getEmitModuleResolutionKind(c.compilerOptions) == ModuleResolutionKindNode16 || getEmitModuleResolutionKind(c.compilerOptions) == ModuleResolutionKindNodeNext {
					// We might be able to write a portable import type using a mode override; try specifier generation again, but with a different mode set
					var swappedMode /* TODO(TS-TO-GO) inferred type ModuleKind.CommonJS | ModuleKind.ESNext */ any
					if contextFile. /* ? */ impliedNodeFormat == ModuleKindESNext {
						swappedMode = ModuleKindCommonJS
					} else {
						swappedMode = ModuleKindESNext
					}
					specifier = getSpecifierForModuleSymbol(chain[0], context, swappedMode)

					if specifier.includes("/node_modules/") {
						// Still unreachable :(
						specifier = oldSpecifier
					} else {
						attributes = factory.createImportAttributes(factory.createNodeArray([]ImportAttribute{factory.createImportAttribute(factory.createStringLiteral("resolution-mode"), factory.createStringLiteral(ifElse(swappedMode == ModuleKindESNext, "import", "require")))}))
					}
				}

				if attributes == nil {
					// If ultimately we can only name the symbol with a reference that dives into a `node_modules` folder, we should error
					// since declaration files with these kinds of references are liable to fail when published :(
					context.encounteredError = true
					if context.tracker.reportLikelyUnsafeImportRequiredError {
						context.tracker.reportLikelyUnsafeImportRequiredError(oldSpecifier)
					}
				}
			}
			lit := factory.createLiteralTypeNode(factory.createStringLiteral(specifier))
			context.approximateLength += specifier.length + 10
			// specifier + import("")
			if nonRootParts == nil || isEntityName(nonRootParts) {
				if nonRootParts != nil {
					var lastId Identifier
					if isIdentifier(nonRootParts) {
						lastId = nonRootParts
					} else {
						lastId = nonRootParts.Right
					}
					setIdentifierTypeArguments(lastId, nil /*typeArguments*/)
				}
				return factory.createImportTypeNode(lit, attributes, nonRootParts.AsEntityName(), typeParameterNodes /* as readonly TypeNode[] */, isTypeOf)
			} else {
				splitNode := getTopmostIndexedAccessType(nonRootParts)
				qualifier := splitNode.ObjectType.AsTypeReferenceNode().TypeName
				return factory.createIndexedAccessTypeNode(factory.createImportTypeNode(lit, attributes, qualifier, typeParameterNodes /* as readonly TypeNode[] */, isTypeOf), splitNode.IndexType)
			}
		}

		entityName := createAccessFromSymbolChain(chain, chain.length-1, 0)
		if isIndexedAccessTypeNode(entityName) {
			return entityName
			// Indexed accesses can never be `typeof`
		}
		if isTypeOf {
			return factory.createTypeQueryNode(entityName)
		} else {
			var lastId Identifier
			if isIdentifier(entityName) {
				lastId = entityName
			} else {
				lastId = entityName.Right
			}
			lastTypeArgs := getIdentifierTypeArguments(lastId)
			setIdentifierTypeArguments(lastId, nil /*typeArguments*/)
			return factory.createTypeReferenceNode(entityName, lastTypeArgs.(NodeArray[TypeNode]))
		}

		createAccessFromSymbolChain := func(chain []*ast.Symbol, index number, stopper number) Union[EntityName, IndexedAccessTypeNode] {
			var typeParameterNodes *[] /* TODO(TS-TO-GO) inferred type TypeNode[] | readonly TypeParameterDeclaration */ any
			if index == (chain.length - 1) {
				typeParameterNodes = overrideTypeArguments
			} else {
				typeParameterNodes = lookupTypeParameterNodes(chain, index, context)
			}
			symbol := chain[index]
			parent := chain[index-1]

			var symbolName *string
			if index == 0 {
				context.flags |= NodeBuilderFlagsInInitialEntityName
				symbolName = c.getNameOfSymbolAsWritten(symbol, context)
				context.approximateLength += (ifElse(symbolName != "", symbolName.length, 0)) + 1
				context.flags ^= NodeBuilderFlagsInInitialEntityName
			} else {
				if parent && c.getExportsOfSymbol(parent) {
					exports := c.getExportsOfSymbol(parent)
					forEachEntry(exports, func(ex *ast.Symbol, name string) *true {
						if c.getSymbolIfSameReference(ex, symbol) != nil && !c.isLateBoundName(name) && name != InternalSymbolNameExportEquals {
							symbolName = unescapeLeadingUnderscores(name)
							return true
						}
					})
				}
			}

			if symbolName == nil {
				name := firstDefined(symbol.Declarations, getNameOfDeclaration)
				if name != nil && isComputedPropertyName(name) && isEntityName(name.Expression) {
					LHS := createAccessFromSymbolChain(chain, index-1, stopper)
					if isEntityName(LHS) {
						return factory.createIndexedAccessTypeNode(factory.createParenthesizedType(factory.createTypeQueryNode(LHS)), factory.createTypeQueryNode(name.Expression))
					}
					return LHS
				}
				symbolName = c.getNameOfSymbolAsWritten(symbol, context)
			}
			context.approximateLength += symbolName.length + 1

			if context.flags&NodeBuilderFlagsForbidIndexedAccessSymbolReferences == 0 && parent && c.getMembersOfSymbol(parent) && c.getMembersOfSymbol(parent).get(symbol.EscapedName) != nil && c.getSymbolIfSameReference(c.getMembersOfSymbol(parent).get(symbol.EscapedName), symbol) != nil {
				// Should use an indexed access
				LHS := createAccessFromSymbolChain(chain, index-1, stopper)
				if isIndexedAccessTypeNode(LHS) {
					return factory.createIndexedAccessTypeNode(LHS, factory.createLiteralTypeNode(factory.createStringLiteral(symbolName)))
				} else {
					return factory.createIndexedAccessTypeNode(factory.createTypeReferenceNode(LHS, typeParameterNodes /* as readonly TypeNode[] */), factory.createLiteralTypeNode(factory.createStringLiteral(symbolName)))
				}
			}

			identifier := setEmitFlags(factory.createIdentifier(symbolName), EmitFlagsNoAsciiEscaping)
			if typeParameterNodes != nil {
				setIdentifierTypeArguments(identifier, factory.createNodeArray(typeParameterNodes))
			}
			identifier.Symbol = symbol

			if index > stopper {
				LHS := createAccessFromSymbolChain(chain, index-1, stopper)
				if !isEntityName(LHS) {
					return Debug.fail("Impossible construct - an export of an indexed access cannot be reachable")
				}
				return factory.createQualifiedName(LHS, identifier)
			}
			return identifier
		}

	}

	typeParameterShadowsOtherTypeParameterInScope := func(escapedName string, context NodeBuilderContext, t TypeParameter) bool {
		result := c.resolveName(context.enclosingDeclaration, escapedName, ast.SymbolFlagsType, nil /*nameNotFoundMessage*/, false /*isUse*/)
		if result != nil && result.Flags&ast.SymbolFlagsTypeParameter != 0 {
			return result != t.symbol
		}
		return false
	}

	typeParameterToName := func(t TypeParameter, context NodeBuilderContext) Identifier {
		if context.flags&NodeBuilderFlagsGenerateNamesForShadowedTypeParams != 0 && context.typeParameterNames != nil {
			cached := context.typeParameterNames.get(c.getTypeId(t))
			if cached != nil {
				return cached
			}
		}
		result := symbolToName(t.symbol, context, ast.SymbolFlagsType, true /*expectsIdentifier*/)
		if result.Kind&ast.KindIdentifier == 0 {
			return factory.createIdentifier("(Missing type parameter)")
		}
		decl := t.symbol. /* ? */ Declarations[0]
		if decl != nil && isTypeParameterDeclaration(decl) {
			result = setTextRange(context, result, decl.Name)
		}
		if context.flags&NodeBuilderFlagsGenerateNamesForShadowedTypeParams != 0 {
			rawtext := result.EscapedText /* as string */
			i := context.typeParameterNamesByTextNextNameCount. /* ? */ get(rawtext) || 0
			text := rawtext
			for context.typeParameterNamesByText. /* ? */ has(text) || typeParameterShadowsOtherTypeParameterInScope(text.(string), context, t) {
				i++
				text = __TEMPLATE__(rawtext, "_", i)
			}
			if text != rawtext {
				typeArguments := getIdentifierTypeArguments(result)
				result = factory.createIdentifier(text)
				setIdentifierTypeArguments(result, typeArguments)
			}
			if context.mustCreateTypeParametersNamesLookups {
				context.mustCreateTypeParametersNamesLookups = false
				context.typeParameterNames = NewMap(context.typeParameterNames)
				context.typeParameterNamesByTextNextNameCount = NewMap(context.typeParameterNamesByTextNextNameCount)
				context.typeParameterNamesByText = NewSet(context.typeParameterNamesByText)
			}
			// avoiding iterations of the above loop turns out to be worth it when `i` starts to get large, so we cache the max
			// `i` we've used thus far, to save work later
			context.typeParameterNamesByTextNextNameCount.set(rawtext, i)
			context.typeParameterNames.set(c.getTypeId(t), result)
			context.typeParameterNamesByText.add(text)
		}
		return result
	}

	/* OVERLOAD: function symbolToName(symbol: Symbol, context: NodeBuilderContext, meaning: SymbolFlags, expectsIdentifier: true): Identifier; */
	/* OVERLOAD: function symbolToName(symbol: Symbol, context: NodeBuilderContext, meaning: SymbolFlags, expectsIdentifier: false): EntityName; */
	symbolToName := func(symbol *ast.Symbol, context NodeBuilderContext, meaning SymbolFlags, expectsIdentifier bool) EntityName {
		chain := lookupSymbolChain(symbol, context, meaning)

		if expectsIdentifier && chain.length != 1 && !context.encounteredError && context.flags&NodeBuilderFlagsAllowQualifiedNameInPlaceOfIdentifier == 0 {
			context.encounteredError = true
		}
		return createEntityNameFromSymbolChain(chain, chain.length-1)

		createEntityNameFromSymbolChain := func(chain []*ast.Symbol, index number) EntityName {
			typeParameterNodes := lookupTypeParameterNodes(chain, index, context)
			symbol := chain[index]

			if index == 0 {
				context.flags |= NodeBuilderFlagsInInitialEntityName
			}
			symbolName := c.getNameOfSymbolAsWritten(symbol, context)
			if index == 0 {
				context.flags ^= NodeBuilderFlagsInInitialEntityName
			}

			identifier := setEmitFlags(factory.createIdentifier(symbolName), EmitFlagsNoAsciiEscaping)
			if typeParameterNodes != nil {
				setIdentifierTypeArguments(identifier, factory.createNodeArray(typeParameterNodes))
			}
			identifier.Symbol = symbol

			if index > 0 {
				return factory.createQualifiedName(createEntityNameFromSymbolChain(chain, index-1), identifier)
			} else {
				return identifier
			}
		}

	}

	symbolToExpression := func(symbol *ast.Symbol, context NodeBuilderContext, meaning SymbolFlags) Expression {
		chain := lookupSymbolChain(symbol, context, meaning)

		return createExpressionFromSymbolChain(chain, chain.length-1)

		createExpressionFromSymbolChain := func(chain []*ast.Symbol, index number) Expression {
			typeParameterNodes := lookupTypeParameterNodes(chain, index, context)
			symbol := chain[index]

			if index == 0 {
				context.flags |= NodeBuilderFlagsInInitialEntityName
			}
			symbolName := c.getNameOfSymbolAsWritten(symbol, context)
			if index == 0 {
				context.flags ^= NodeBuilderFlagsInInitialEntityName
			}
			firstChar := symbolName.charCodeAt(0)

			if isSingleOrDoubleQuote(firstChar) && core.Some(symbol.Declarations, c.hasNonGlobalAugmentationExternalModuleSymbol) {
				return factory.createStringLiteral(getSpecifierForModuleSymbol(symbol, context))
			}
			if index == 0 || canUsePropertyAccess(symbolName, c.languageVersion) {
				identifier := setEmitFlags(factory.createIdentifier(symbolName), EmitFlagsNoAsciiEscaping)
				if typeParameterNodes != nil {
					setIdentifierTypeArguments(identifier, factory.createNodeArray(typeParameterNodes))
				}
				identifier.Symbol = symbol

				if index > 0 {
					return factory.createPropertyAccessExpression(createExpressionFromSymbolChain(chain, index-1), identifier)
				} else {
					return identifier
				}
			} else {
				if firstChar == CharacterCodesopenBracket {
					symbolName = symbolName.substring(1, symbolName.length-1)
					firstChar = symbolName.charCodeAt(0)
				}
				var expression Expression
				if isSingleOrDoubleQuote(firstChar) && symbol.Flags&ast.SymbolFlagsEnumMember == 0 {
					expression = factory.createStringLiteral(stripQuotes(symbolName).replace( /* TODO(TS-TO-GO) Expression RegularExpressionLiteral: /\\./g */ TODO, func(s string) string {
						return s.substring(1)
					}), firstChar == CharacterCodessingleQuote)
				} else if ("" + +symbolName) == symbolName {
					expression = factory.createNumericLiteral(+symbolName)
				}
				if expression == nil {
					identifier := setEmitFlags(factory.createIdentifier(symbolName), EmitFlagsNoAsciiEscaping)
					if typeParameterNodes != nil {
						setIdentifierTypeArguments(identifier, factory.createNodeArray(typeParameterNodes))
					}
					identifier.Symbol = symbol
					expression = identifier
				}
				return factory.createElementAccessExpression(createExpressionFromSymbolChain(chain, index-1), expression)
			}
		}

	}

	isStringNamed := func(d Declaration) bool {
		name := getNameOfDeclaration(d)
		if name == nil {
			return false
		}
		if isComputedPropertyName(name) {
			t := c.checkExpression(name.Expression)
			return t.flags&TypeFlagsStringLike != 0
		}
		if isElementAccessExpression(name) {
			t := c.checkExpression(name.ArgumentExpression)
			return t.flags&TypeFlagsStringLike != 0
		}
		return isStringLiteral(name)
	}

	isSingleQuotedStringNamed := func(d Declaration) bool {
		name := getNameOfDeclaration(d)
		return name != nil && isStringLiteral(name) && (name.SingleQuote || !nodeIsSynthesized(name) && startsWith(getTextOfNode(name, false /*includeTrivia*/), "'"))
	}

	getPropertyNameNodeForSymbol := func(symbol *ast.Symbol, context NodeBuilderContext) /* TODO(TS-TO-GO) inferred type StringLiteral | Identifier | NumericLiteral | ComputedPropertyName */ any {
		stringNamed := length(symbol.Declarations) != 0 && core.Every(symbol.Declarations, isStringNamed)
		singleQuote := length(symbol.Declarations) != 0 && core.Every(symbol.Declarations, isSingleQuotedStringNamed)
		isMethod := symbol.Flags&ast.SymbolFlagsMethod != 0
		fromNameType := getPropertyNameNodeForSymbolFromNameType(symbol, context, singleQuote, stringNamed, isMethod)
		if fromNameType != nil {
			return fromNameType
		}
		rawName := unescapeLeadingUnderscores(symbol.EscapedName)
		return createPropertyNameNodeForIdentifierOrLiteral(rawName, getEmitScriptTarget(c.compilerOptions), singleQuote, stringNamed, isMethod)
	}

	// See getNameForSymbolFromNameType for a stringy equivalent
	getPropertyNameNodeForSymbolFromNameType := func(symbol *ast.Symbol, context NodeBuilderContext, singleQuote bool, stringNamed bool, isMethod bool) * /* TODO(TS-TO-GO) inferred type StringLiteral | Identifier | NumericLiteral | ComputedPropertyName */ any {
		nameType := c.getSymbolLinks(symbol).nameType
		if nameType != nil {
			if nameType.flags&TypeFlagsStringOrNumberLiteral != 0 {
				name := "" + (nameType /* as StringLiteralType | NumberLiteralType */).value
				if !isIdentifierText(name, getEmitScriptTarget(c.compilerOptions)) && (stringNamed || !isNumericLiteralName(name)) {
					return factory.createStringLiteral(name, singleQuote)
				}
				if isNumericLiteralName(name) && startsWith(name, "-") {
					return factory.createComputedPropertyName(factory.createPrefixUnaryExpression(ast.KindMinusToken, factory.createNumericLiteral(-name)))
				}
				return createPropertyNameNodeForIdentifierOrLiteral(name, getEmitScriptTarget(c.compilerOptions), singleQuote, stringNamed, isMethod)
			}
			if nameType.flags&TypeFlagsUniqueESSymbol != 0 {
				return factory.createComputedPropertyName(symbolToExpression(nameType.AsUniqueESSymbolType().symbol, context, ast.SymbolFlagsValue))
			}
		}
	}

	cloneNodeBuilderContext := func(context NodeBuilderContext) /* TODO(TS-TO-GO) inferred type () => void */ any {
		// Make type parameters created within this context not consume the name outside this context
		// The symbol serializer ends up creating many sibling scopes that all need "separate" contexts when
		// it comes to naming things - within a normal `typeToTypeNode` call, the node builder only ever descends
		// through the type tree, so the only cases where we could have used distinct sibling scopes was when there
		// were multiple generic overloads with similar generated type parameter names
		// The effect:
		// When we write out
		// export const x: <T>(x: T) => T
		// export const y: <T>(x: T) => T
		// we write it out like that, rather than as
		// export const x: <T>(x: T) => T
		// export const y: <T_1>(x: T_1) => T_1
		oldMustCreateTypeParameterSymbolList := context.mustCreateTypeParameterSymbolList
		oldMustCreateTypeParametersNamesLookups := context.mustCreateTypeParametersNamesLookups
		context.mustCreateTypeParameterSymbolList = true
		context.mustCreateTypeParametersNamesLookups = true
		oldTypeParameterNames := context.typeParameterNames
		oldTypeParameterNamesByText := context.typeParameterNamesByText
		oldTypeParameterNamesByTextNextNameCount := context.typeParameterNamesByTextNextNameCount
		oldTypeParameterSymbolList := context.typeParameterSymbolList
		return func() {
			context.typeParameterNames = oldTypeParameterNames
			context.typeParameterNamesByText = oldTypeParameterNamesByText
			context.typeParameterNamesByTextNextNameCount = oldTypeParameterNamesByTextNextNameCount
			context.typeParameterSymbolList = oldTypeParameterSymbolList
			context.mustCreateTypeParameterSymbolList = oldMustCreateTypeParameterSymbolList
			context.mustCreateTypeParametersNamesLookups = oldMustCreateTypeParametersNamesLookups
		}
	}

	getDeclarationWithTypeAnnotation := func(symbol *ast.Symbol, enclosingDeclaration *ast.Node) Declaration {
		return symbol.Declarations && core.Find(symbol.Declarations, func(s Declaration) bool {
			return c.getNonlocalEffectiveTypeAnnotationNode(s) != nil && (enclosingDeclaration == nil || findAncestor(s, func(n *ast.Node) bool {
				return n == enclosingDeclaration
			}) != nil)
		})
	}

	existingTypeNodeIsNotReferenceOrIsReferenceWithCompatibleTypeArgumentCount := func(existing TypeNode, t *Type) bool {
		// In JS, you can say something like `Foo` and get a `Foo<any>` implicitly - we don't want to preserve that original `Foo` in these cases, though.
		if getObjectFlags(t)&ObjectFlagsReference == 0 {
			return true
		}
		if !isTypeReferenceNode(existing) {
			return true
		}
		// `type` is a reference type, and `existing` is a type reference node, but we still need to make sure they refer to the _same_ target type
		// before we go comparing their type argument counts.
		c.getTypeFromTypeReference(existing)
		// call to ensure symbol is resolved
		symbol := c.getNodeLinks(existing).resolvedSymbol
		existingTarget := symbol && c.getDeclaredTypeOfSymbol(symbol)
		if existingTarget == nil || existingTarget != t.AsTypeReference().target {
			return true
		}
		return length(existing.TypeArguments) >= c.getMinTypeArgumentCount(t.AsTypeReference().target.typeParameters)
	}

	getEnclosingDeclarationIgnoringFakeScope := func(enclosingDeclaration *ast.Node) *ast.Node {
		for c.getNodeLinks(enclosingDeclaration).fakeScopeForSignatureDeclaration {
			enclosingDeclaration = enclosingDeclaration.Parent
		}
		return enclosingDeclaration
	}

	/**
	 * Unlike `typeToTypeNodeHelper`, this handles setting up the `AllowUniqueESSymbolType` flag
	 * so a `unique symbol` is returned when appropriate for the input symbol, rather than `typeof sym`
	 * @param context - The node builder context. Any reused nodes are checked to be pulled from within the scope of the context's enclosingDeclaration.
	 * @param declaration - The preferred declaration to pull existing type nodes from (the symbol will be used as a fallback to find any annotated declaration)
	 * @param type - The type to write; an existing annotation must match this type if it's used, otherwise this is the type serialized as a new type node
	 * @param symbol - The symbol is used both to find an existing annotation if declaration is not provided, and to determine if `unique symbol` should be printed
	 */

	serializeTypeForDeclaration := func(context NodeBuilderContext, declaration Declaration, t *Type, symbol *ast.Symbol) TypeNode {
		addUndefinedForParameter := declaration && (isParameter(declaration) || isJSDocParameterTag(declaration)) && c.requiresAddingImplicitUndefined(declaration, context.enclosingDeclaration)
		enclosingDeclaration := context.enclosingDeclaration
		restoreFlags := saveRestoreFlags(context)
		if declaration != nil && hasInferredType(declaration) && context.internalFlags&InternalNodeBuilderFlagsNoSyntacticPrinter == 0 {
			c.syntacticNodeBuilder.serializeTypeOfDeclaration(declaration, context)
		}
		context.internalFlags |= InternalNodeBuilderFlagsNoSyntacticPrinter
		if enclosingDeclaration != nil && (!c.isErrorType(t) || (context.internalFlags&InternalNodeBuilderFlagsAllowUnresolvedNames != 0)) {
			var declWithExistingAnnotation Declaration
			if declaration != nil && c.getNonlocalEffectiveTypeAnnotationNode(declaration) != nil {
				declWithExistingAnnotation = declaration
			} else {
				declWithExistingAnnotation = getDeclarationWithTypeAnnotation(symbol)
			}
			if declWithExistingAnnotation != nil && !isFunctionLikeDeclaration(declWithExistingAnnotation) && !isGetAccessorDeclaration(declWithExistingAnnotation) {
				// try to reuse the existing annotation
				existing := c.getNonlocalEffectiveTypeAnnotationNode(declWithExistingAnnotation)
				// explicitly add `| undefined` to optional mapped properties whose type contains `undefined` (and not `missing`)
				addUndefined := addUndefinedForParameter || symbol.Flags&ast.SymbolFlagsProperty != 0 && symbol.Flags&ast.SymbolFlagsOptional != 0 && isOptionalDeclaration(declWithExistingAnnotation) && (symbol.(MappedSymbol)).Links. /* ? */ mappedType && c.containsNonMissingUndefinedType(t)
				result := !isTypePredicateNode(existing) && tryReuseExistingTypeNode(context, existing, t, declWithExistingAnnotation, addUndefined)
				if result {
					restoreFlags()
					return result
				}
			}
		}
		if t.flags&TypeFlagsUniqueESSymbol != 0 && t.symbol == symbol && (context.enclosingDeclaration == nil || core.Some(symbol.Declarations, func(d Declaration) bool {
			return getSourceFileOfNode(d) == getSourceFileOfNode(context.enclosingDeclaration)
		})) {
			context.flags |= NodeBuilderFlagsAllowUniqueESSymbolType
		}

		decl := ifNotNilElse(ifNotNilElse(declaration, symbol.ValueDeclaration), symbol.Declarations[0])
		var expr Expression
		if decl != nil && c.isDeclarationWithPossibleInnerTypeNodeReuse(decl) {
			expr = c.getPossibleTypeNodeReuseExpression(decl)
		} else {
			expr = nil
		}

		result := expressionOrTypeToTypeNode(context, expr, t, addUndefinedForParameter)
		restoreFlags()
		return result
	}

	typeNodeIsEquivalentToType := func(annotatedDeclaration *ast.Node, t *Type, typeFromTypeNode *Type) bool {
		if typeFromTypeNode == t {
			return true
		}
		if annotatedDeclaration == nil {
			return false
		}
		if (isPropertySignature(annotatedDeclaration) || isPropertyDeclaration(annotatedDeclaration)) && annotatedDeclaration.QuestionToken != nil {
			return c.getTypeWithFacts(t, TypeFactsNEUndefined) == typeFromTypeNode
		}
		if isParameter(annotatedDeclaration) && c.hasEffectiveQuestionToken(annotatedDeclaration) {
			return c.getTypeWithFacts(t, TypeFactsNEUndefined) == typeFromTypeNode
		}
		return false
	}

	serializeReturnTypeForSignature := func(context NodeBuilderContext, signature Signature) *TypeNode {
		suppressAny := context.flags & NodeBuilderFlagsSuppressAnyReturnType
		restoreFlags := saveRestoreFlags(context)
		if suppressAny != 0 {
			context.flags &^= NodeBuilderFlagsSuppressAnyReturnType
			// suppress only toplevel `any`s
		}
		// suppress only toplevel `any`s
		var returnTypeNode *TypeNode
		returnType := c.getReturnTypeOfSignature(signature)
		if returnType && !(suppressAny != 0 && c.isTypeAny(returnType)) {
			if signature.declaration != nil && context.internalFlags&InternalNodeBuilderFlagsNoSyntacticPrinter == 0 {
				c.syntacticNodeBuilder.serializeReturnTypeForSignature(signature.declaration, context)
			}
			context.internalFlags |= InternalNodeBuilderFlagsNoSyntacticPrinter
			returnTypeNode = serializeReturnTypeForSignatureWorker(context, signature)
		} else if suppressAny == 0 {
			returnTypeNode = factory.createKeywordTypeNode(ast.KindAnyKeyword)
		}
		restoreFlags()
		return returnTypeNode
	}

	serializeReturnTypeForSignatureWorker := func(context NodeBuilderContext, signature Signature) TypeNode {
		typePredicate := c.getTypePredicateOfSignature(signature)
		t := c.getReturnTypeOfSignature(signature)
		if context.enclosingDeclaration != nil && (!c.isErrorType(t) || (context.internalFlags&InternalNodeBuilderFlagsAllowUnresolvedNames != 0)) && signature.declaration != nil && !nodeIsSynthesized(signature.declaration) {
			annotation := c.getNonlocalEffectiveReturnTypeAnnotationNode(signature.declaration)
			if annotation != nil {
				result := tryReuseExistingTypeNode(context, annotation, t, context.enclosingDeclaration)
				if result != nil {
					return result
				}
			}
		}
		if typePredicate != nil {
			return typePredicateToTypePredicateNodeHelper(typePredicate, context)
		}
		expr := signature.declaration && c.getPossibleTypeNodeReuseExpression(signature.declaration)
		return expressionOrTypeToTypeNode(context, expr, t)
	}

	trackExistingEntityName := func(node T, context NodeBuilderContext) /* TODO(TS-TO-GO) inferred type { introducesError: boolean; node: T; sym?: undefined; } | { introducesError: boolean; node: T; sym: Symbol | undefined; } */ any {
		introducesError := false
		leftmost := getFirstIdentifier(node)
		if isInJSFile(node) && (isExportsIdentifier(leftmost) || isModuleExportsAccessExpression(leftmost.Parent) || (isQualifiedName(leftmost.Parent) && isModuleIdentifier(leftmost.Parent.Left) && isExportsIdentifier(leftmost.Parent.Right))) {
			introducesError = true
			return map[any]any{ /* TODO(TS-TO-GO): was object literal */
				"introducesError": introducesError,
				"node":            node,
			}
		}
		meaning := c.getMeaningOfEntityNameReference(node)
		var sym *ast.Symbol
		if isThisIdentifier(leftmost) {
			// `this` isn't a bindable identifier - skip resolution, find a relevant `this` symbol directly and avoid exhaustive scope traversal
			sym = c.getSymbolOfDeclaration(getThisContainer(leftmost, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/))
			if c.isSymbolAccessible(sym, leftmost, meaning, false /*shouldComputeAliasesToMakeVisible*/).accessibility != SymbolAccessibilityAccessible {
				introducesError = true
				context.tracker.reportInaccessibleThisError()
			}
			return map[any]any{ /* TODO(TS-TO-GO): was object literal */
				"introducesError": introducesError,
				"node":            attachSymbolToLeftmostIdentifier(node).(T),
			}
		}
		sym = c.resolveEntityName(leftmost, meaning, true /*ignoreErrors*/, true /*dontResolveAlias*/)
		if context.enclosingDeclaration != nil && !(sym != nil && sym.Flags&ast.SymbolFlagsTypeParameter != 0) {
			sym = c.getExportSymbolOfValueSymbolIfExported(sym)
			// Some declarations may be transplanted to a new location.
			// When this happens we need to make sure that the name has the same meaning at both locations
			// We also check for the unknownSymbol because when we create a fake scope some parameters may actually not be usable
			// either because they are the expanded rest parameter,
			// or because they are the newly added parameters from the tuple, which might have different meanings in the original context
			symAtLocation := c.resolveEntityName(leftmost, meaning, true /*ignoreErrors*/, true /*dontResolveAlias*/, context.enclosingDeclaration)
			if symAtLocation == c.unknownSymbol || (symAtLocation == nil && sym != nil) || (symAtLocation != nil && sym != nil && c.getSymbolIfSameReference(c.getExportSymbolOfValueSymbolIfExported(symAtLocation), sym) == nil) {
				// In isolated declaration we will not do rest parameter expansion so there is no need to report on these.
				if symAtLocation != c.unknownSymbol {
					context.tracker.reportInferenceFallback(node)
				}
				introducesError = true
				return map[any]any{ /* TODO(TS-TO-GO): was object literal */
					"introducesError": introducesError,
					"node":            node,
					"sym":             sym,
				}
			} else {
				sym = symAtLocation
			}
		}

		if sym != nil {
			// If a parameter is resolvable in the current context it is also visible, so no need to go to symbol accesibility
			if sym.Flags&ast.SymbolFlagsFunctionScopedVariable != 0 && sym.ValueDeclaration != nil {
				if isPartOfParameterDeclaration(sym.ValueDeclaration) || isJSDocParameterTag(sym.ValueDeclaration) {
					return map[any]any{ /* TODO(TS-TO-GO): was object literal */
						"introducesError": introducesError,
						"node":            attachSymbolToLeftmostIdentifier(node).(T),
					}
				}
			}
			if sym.Flags&ast.SymbolFlagsTypeParameter == 0 && !isDeclarationName(node) && c.isSymbolAccessible(sym, context.enclosingDeclaration, meaning, false /*shouldComputeAliasesToMakeVisible*/).accessibility != SymbolAccessibilityAccessible {
				context.tracker.reportInferenceFallback(node)
				introducesError = true
			} else {
				context.tracker.trackSymbol(sym, context.enclosingDeclaration, meaning)
			}
			return map[any]any{ /* TODO(TS-TO-GO): was object literal */
				"introducesError": introducesError,
				"node":            attachSymbolToLeftmostIdentifier(node).(T),
			}
		}

		return map[any]any{ /* TODO(TS-TO-GO): was object literal */
			"introducesError": introducesError,
			"node":            node,
		}
		/**
		 * Attaches a `.symbol` member to an identifier, cloning it to do so, so symbol information
		 * is smuggled out for symbol display information.
		 */

		attachSymbolToLeftmostIdentifier := func(node *ast.Node) *ast.Node {
			if node == leftmost {
				t := c.getDeclaredTypeOfSymbol(sym)
				var name Identifier
				if sym.Flags&ast.SymbolFlagsTypeParameter != 0 {
					name = typeParameterToName(t, context)
				} else {
					name = factory.cloneNode(node.AsIdentifier())
				}
				name.Symbol = sym
				// for quickinfo, which uses identifier symbol information
				return setTextRange(context, setEmitFlags(name, EmitFlagsNoAsciiEscaping), node)
			}
			updated := visitEachChildWorker(node, func(c *ast.Node) *ast.Node {
				return attachSymbolToLeftmostIdentifier(c)
			}, nil /*context*/)
			if updated != node {
				setTextRange(context, updated, node)
			}
			return updated
		}

	}

	serializeTypeName := func(context NodeBuilderContext, node EntityName, isTypeOf bool, typeArguments []TypeNode) *TypeNode {
		var meaning /* TODO(TS-TO-GO) inferred type SymbolFlags.Value | SymbolFlags.Type */ any
		if isTypeOf {
			meaning = ast.SymbolFlagsValue
		} else {
			meaning = ast.SymbolFlagsType
		}
		symbol := c.resolveEntityName(node, meaning, true /*ignoreErrors*/)
		if symbol == nil {
			return nil
		}
		var resolvedSymbol *ast.Symbol
		if symbol.Flags&ast.SymbolFlagsAlias != 0 {
			resolvedSymbol = c.resolveAlias(symbol)
		} else {
			resolvedSymbol = symbol
		}
		if c.isSymbolAccessible(symbol, context.enclosingDeclaration, meaning, false /*shouldComputeAliasesToMakeVisible*/).accessibility != SymbolAccessibilityAccessible {
			return nil
		}
		return symbolToTypeNode(resolvedSymbol, context, meaning, typeArguments)
	}

	canReuseTypeNode := func(context NodeBuilderContext, existing TypeNode) /* TODO(TS-TO-GO) inferred type number | boolean */ any {
		if isInJSFile(existing) {
			if isLiteralImportTypeNode(existing) {
				// Ensure resolvedSymbol is present
				c.getTypeFromImportTypeNode(existing)
				nodeSymbol := c.getNodeLinks(existing).resolvedSymbol
				return nodeSymbol == nil || !((!existing.IsTypeOf && nodeSymbol.Flags&ast.SymbolFlagsType == 0) || !(length(existing.TypeArguments) >= c.getMinTypeArgumentCount(c.getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(nodeSymbol))))
			}
		}
		if isThisTypeNode(existing) {
			if context.mapper == nil {
				return true
			}
			t := getTypeFromTypeNode(context, existing, true /*noMappedTypes*/)
			return t
		}
		if isTypeReferenceNode(existing) {
			if isConstTypeReference(existing) {
				return false
			}
			t := c.getTypeFromTypeReference(existing)
			symbol := c.getNodeLinks(existing).resolvedSymbol
			if symbol == nil {
				return false
			}
			if symbol.Flags&ast.SymbolFlagsTypeParameter != 0 {
				t := c.getDeclaredTypeOfSymbol(symbol)
				if context.mapper != nil && c.getMappedType(t, context.mapper) != t {
					return false
				}
			}
			if isInJSDoc(existing) {
				return existingTypeNodeIsNotReferenceOrIsReferenceWithCompatibleTypeArgumentCount(existing, t) && c.getIntendedTypeFromJSDocTypeReference(existing) == nil && (symbol.Flags & ast.SymbolFlagsType)
				// JSDoc type annotations can reference values (meaning typeof value) as well as types. We only reuse type nodes
			}
		}
		if isTypeOperatorNode(existing) && existing.Operator == ast.KindUniqueKeyword && existing.Type_.Kind == ast.KindSymbolKeyword {
			effectiveEnclosingContext := context.enclosingDeclaration && getEnclosingDeclarationIgnoringFakeScope(context.enclosingDeclaration)
			return findAncestor(existing, func(n *ast.Node) bool {
				return n == effectiveEnclosingContext
			}) != nil
		}
		return true
	}

	serializeExistingTypeNode := func(context NodeBuilderContext, typeNode TypeNode) TypeNode {
		t := getTypeFromTypeNode(context, typeNode)
		return typeToTypeNodeHelper(t, context)
	}

	/**
	 * Do you mean to call this directly? You probably should use `tryReuseExistingTypeNode` instead,
	 * which performs sanity checking on the type before doing this.
	 */

	tryReuseExistingTypeNodeHelper := func(context NodeBuilderContext, existing TypeNode) *TypeNode {
		if c.cancellationToken != nil && c.cancellationToken.throwIfCancellationRequested {
			c.cancellationToken.throwIfCancellationRequested()
		}
		hadError := false
		TODO_IDENTIFIER := createRecoveryBoundary()
		transformed := visitNode(existing, visitExistingNodeTreeSymbols, isTypeNode)
		if !finalizeBoundary() {
			return nil
		}
		context.approximateLength += existing.End - existing.Pos
		return transformed

		visitExistingNodeTreeSymbols := func(node *ast.Node) *ast.Node {
			// If there was an error in a sibling node bail early, the result will be discarded anyway
			if hadError {
				return node
			}
			recover := startRecoveryScope()
			var onExitNewScope * /* TODO(TS-TO-GO) inferred type (() => void) */ any
			if isNewScopeNode(node) {
				onExitNewScope = onEnterNewScope(node)
			} else {
				onExitNewScope = nil
			}
			result := visitExistingNodeTreeSymbolsWorker(node)
			onExitNewScope()

			// If there was an error, maybe we can recover by serializing the actual type of the node
			if hadError {
				if isTypeNode(node) && !isTypePredicateNode(node) {
					recover()
					return serializeExistingTypeNode(context, node)
				}
				return node
			}
			// We want to clone the subtree, so when we mark it up with __pos and __end in quickfixes,
			//  we don't get odd behavior because of reused nodes. We also need to clone to _remove_
			//  the position information if the node comes from a different file than the one the node builder
			//  is set to build for (even though we are reusing the node structure, the position information
			//  would make the printer print invalid spans for literals and identifiers, and the formatter would
			//  choke on the mismatched positonal spans between a parent and an injected child from another file).
			if result != nil {
				return setTextRange(context, result, node)
			} else {
				return nil
			}
		}

		createRecoveryBoundary := func() /* TODO(TS-TO-GO) inferred type { startRecoveryScope: () => () => void; finalizeBoundary: () => boolean; } */ any {
			var trackedSymbols []TrackedSymbol
			var unreportedErrors []func()
			oldTracker := context.tracker
			oldTrackedSymbols := context.trackedSymbols
			context.trackedSymbols = nil
			oldEncounteredError := context.encounteredError
			context.tracker = NewSymbolTrackerImpl(context, &SymbolTracker{
				/* TODO(TS-TO-GO) Node SpreadAssignment: ...oldTracker.inner */
				reportCyclicStructureError: func() {
					markError(func() {
						return oldTracker.reportCyclicStructureError()
					})
				},
				reportInaccessibleThisError: func() {
					markError(func() {
						return oldTracker.reportInaccessibleThisError()
					})
				},
				reportInaccessibleUniqueSymbolError: func() {
					markError(func() {
						return oldTracker.reportInaccessibleUniqueSymbolError()
					})
				},
				reportLikelyUnsafeImportRequiredError: func(specifier string) {
					markError(func() {
						return oldTracker.reportLikelyUnsafeImportRequiredError(specifier)
					})
				},
				reportNonSerializableProperty: func(name string) {
					markError(func() {
						return oldTracker.reportNonSerializableProperty(name)
					})
				},
				trackSymbol: func(sym *ast.Symbol, decl *ast.Node, meaning SymbolFlags) false {
					( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: trackedSymbols ??= [] */ TODO).push([]any{sym, decl, meaning})
					return false
				},
				moduleResolverHost: context.tracker.moduleResolverHost,
			}, context.tracker.moduleResolverHost)

			return map[any]any{ /* TODO(TS-TO-GO): was object literal */
				"startRecoveryScope": startRecoveryScope,
				"finalizeBoundary":   finalizeBoundary,
			}

			markError := func(unreportedError func()) {
				hadError = true
				( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: unreportedErrors ??= [] */ TODO).push(unreportedError)
			}

			startRecoveryScope := func() /* TODO(TS-TO-GO) inferred type () => void */ any {
				trackedSymbolsTop := ifNotNilElse(trackedSymbols. /* ? */ length, 0)
				unreportedErrorsTop := ifNotNilElse(unreportedErrors. /* ? */ length, 0)
				return func() {
					hadError = false
					// Reset the tracked symbols to before the error
					if trackedSymbols {
						trackedSymbols.length = trackedSymbolsTop
					}
					if unreportedErrors {
						unreportedErrors.length = unreportedErrorsTop
					}
				}
			}

			finalizeBoundary := func() bool {
				context.tracker = oldTracker
				context.trackedSymbols = oldTrackedSymbols
				context.encounteredError = oldEncounteredError

				unreportedErrors. /* ? */ forEach(func(fn /* TODO(TS-TO-GO) inferred type () => void */ any) {
					return fn()
				})
				if hadError {
					return false
				}
				trackedSymbols. /* ? */ forEach(func(TODO_IDENTIFIER TrackedSymbol) bool {
					return context.tracker.trackSymbol(symbol, enclosingDeclaration, meaning)
				})
				return true
			}

		}

		onEnterNewScope := func(node Union[IntroducesNewScopeNode, ConditionalTypeNode]) /* TODO(TS-TO-GO) inferred type () => void */ any {
			return enterNewScope(context, node, getParametersInScope(node), getTypeParametersInScope(node))
		}

		tryVisitSimpleTypeNode := func(node TypeNode) *TypeNode {
			innerNode := skipTypeParentheses(node)
			switch innerNode.Kind {
			case ast.KindTypeReference:
				return tryVisitTypeReference(innerNode.AsTypeReferenceNode())
			case ast.KindTypeQuery:
				return tryVisitTypeQuery(innerNode.AsTypeQueryNode())
			case ast.KindIndexedAccessType:
				return tryVisitIndexedAccess(innerNode.AsIndexedAccessTypeNode())
			case ast.KindTypeOperator:
				typeOperatorNode := innerNode.AsTypeOperatorNode()
				if typeOperatorNode.Operator == ast.KindKeyOfKeyword {
					return tryVisitKeyOf(typeOperatorNode)
				}
			}
			return visitNode(node, visitExistingNodeTreeSymbols, isTypeNode)
		}

		tryVisitIndexedAccess := func(node IndexedAccessTypeNode) *TypeNode {
			resultObjectType := tryVisitSimpleTypeNode(node.ObjectType)
			if resultObjectType == nil {
				return nil
			}
			return factory.updateIndexedAccessTypeNode(node, resultObjectType, visitNode(node.IndexType, visitExistingNodeTreeSymbols, isTypeNode))
		}

		tryVisitKeyOf := func(node TypeOperatorNode) *TypeNode {
			Debug.assertEqual(node.Operator, ast.KindKeyOfKeyword)
			t := tryVisitSimpleTypeNode(node.Type_)
			if t == nil {
				return nil
			}
			return factory.updateTypeOperatorNode(node, t)
		}

		tryVisitTypeQuery := func(node TypeQueryNode) *TypeNode {
			TODO_IDENTIFIER := trackExistingEntityName(node.ExprName, context)
			if !introducesError {
				return factory.updateTypeQueryNode(node, exprName, visitNodes(node.TypeArguments, visitExistingNodeTreeSymbols, isTypeNode))
			}

			serializedName := serializeTypeName(context, node.ExprName, true /*isTypeOf*/)
			if serializedName != nil {
				return setTextRange(context, serializedName, node.ExprName)
			}
		}

		tryVisitTypeReference := func(node TypeReferenceNode) *TypeNode {
			if canReuseTypeNode(context, node) {
				TODO_IDENTIFIER := trackExistingEntityName(node.TypeName, context)
				typeArguments := visitNodes(node.TypeArguments, visitExistingNodeTreeSymbols, isTypeNode)

				if !introducesError {
					updated := factory.updateTypeReferenceNode(node, newName, typeArguments)
					return setTextRange(context, updated, node)
				} else {
					serializedName := serializeTypeName(context, node.TypeName, false /*isTypeOf*/, typeArguments)
					if serializedName != nil {
						return setTextRange(context, serializedName, node.TypeName)
					}
				}
			}
		}

		visitExistingNodeTreeSymbolsWorker := func(node *ast.Node) *ast.Node {
			if isJSDocTypeExpression(node) {
				// Unwrap JSDocTypeExpressions
				return visitNode(node.Type_, visitExistingNodeTreeSymbols, isTypeNode)
			}
			// We don't _actually_ support jsdoc namepath types, emit `any` instead
			if isJSDocAllType(node) || node.Kind == ast.KindJSDocNamepathType {
				return factory.createKeywordTypeNode(ast.KindAnyKeyword)
			}
			if isJSDocUnknownType(node) {
				return factory.createKeywordTypeNode(ast.KindUnknownKeyword)
			}
			if isJSDocNullableType(node) {
				return factory.createUnionTypeNode([]TypeNode{visitNode(node.Type_, visitExistingNodeTreeSymbols, isTypeNode), factory.createLiteralTypeNode(factory.createNull())})
			}
			if isJSDocOptionalType(node) {
				return factory.createUnionTypeNode([]TypeNode{visitNode(node.Type_, visitExistingNodeTreeSymbols, isTypeNode), factory.createKeywordTypeNode(ast.KindUndefinedKeyword)})
			}
			if isJSDocNonNullableType(node) {
				return visitNode(node.Type_, visitExistingNodeTreeSymbols)
			}
			if isJSDocVariadicType(node) {
				return factory.createArrayTypeNode(visitNode(node.Type_, visitExistingNodeTreeSymbols, isTypeNode))
			}
			if isJSDocTypeLiteral(node) {
				return factory.createTypeLiteralNode(core.Map(node.JsDocPropertyTags, func(t JSDocPropertyLikeTag) PropertySignature {
					name := visitNode(ifElse(isIdentifier(t.Name), t.Name, t.Name.Right), visitExistingNodeTreeSymbols, isIdentifier)
					typeViaParent := c.getTypeOfPropertyOfType(getTypeFromTypeNode(context, node), name.EscapedText)
					var overrideTypeNode *TypeNode
					if typeViaParent != nil && t.TypeExpression != nil && getTypeFromTypeNode(context, t.TypeExpression.Type_) != typeViaParent {
						overrideTypeNode = typeToTypeNodeHelper(typeViaParent, context)
					} else {
						overrideTypeNode = nil
					}

					return factory.createPropertySignature(nil, name, ifElse(t.IsBracketed || t.TypeExpression != nil && isJSDocOptionalType(t.TypeExpression.Type_), factory.createToken(ast.KindQuestionToken), nil), overrideTypeNode || (t.TypeExpression && visitNode(t.TypeExpression.Type_, visitExistingNodeTreeSymbols, isTypeNode)) || factory.createKeywordTypeNode(ast.KindAnyKeyword))
				}))
			}
			if isTypeReferenceNode(node) && isIdentifier(node.TypeName) && node.TypeName.EscapedText == "" {
				return setOriginalNode(factory.createKeywordTypeNode(ast.KindAnyKeyword), node)
			}
			if (isExpressionWithTypeArguments(node) || isTypeReferenceNode(node)) && isJSDocIndexSignature(node) {
				return factory.createTypeLiteralNode([]IndexSignatureDeclaration{factory.createIndexSignature(nil, []ParameterDeclaration{factory.createParameterDeclaration(nil, nil, "x", nil, visitNode(node.TypeArguments[0], visitExistingNodeTreeSymbols, isTypeNode))}, visitNode(node.TypeArguments[1], visitExistingNodeTreeSymbols, isTypeNode))})
			}
			if isJSDocFunctionType(node) {
				if isJSDocConstructSignature(node) {
					var newTypeNode *TypeNode
					return factory.createConstructorTypeNode(nil, visitNodes(node.TypeParameters, visitExistingNodeTreeSymbols, isTypeParameterDeclaration), mapDefined(node.Parameters, func(p ParameterDeclaration, i number) *ParameterDeclaration {
						if p.Name && isIdentifier(p.Name) && p.Name.EscapedText == "new" {
							return ( /* TODO(TS-TO-GO) CommaToken BinaryExpression: newTypeNode = p.type, undefined */ TODO)
						} else {
							return factory.createParameterDeclaration(nil, getEffectiveDotDotDotForParameter(p), setTextRange(context, factory.createIdentifier(getNameForJSDocFunctionParameter(p, i)), p), factory.cloneNode(p.QuestionToken), visitNode(p.Type_, visitExistingNodeTreeSymbols, isTypeNode), nil)
						}
					}), visitNode(newTypeNode || node.Type_, visitExistingNodeTreeSymbols, isTypeNode) || factory.createKeywordTypeNode(ast.KindAnyKeyword))
				} else {
					return factory.createFunctionTypeNode(visitNodes(node.TypeParameters, visitExistingNodeTreeSymbols, isTypeParameterDeclaration), core.Map(node.Parameters, func(p ParameterDeclaration, i number) ParameterDeclaration {
						return factory.createParameterDeclaration(nil, getEffectiveDotDotDotForParameter(p), setTextRange(context, factory.createIdentifier(getNameForJSDocFunctionParameter(p, i)), p), factory.cloneNode(p.QuestionToken), visitNode(p.Type_, visitExistingNodeTreeSymbols, isTypeNode), nil)
					}), visitNode(node.Type_, visitExistingNodeTreeSymbols, isTypeNode) || factory.createKeywordTypeNode(ast.KindAnyKeyword))
				}
			}
			if isThisTypeNode(node) {
				if canReuseTypeNode(context, node) {
					return node
				}
				hadError = true
				return node
			}
			if isTypeParameterDeclaration(node) {
				return factory.updateTypeParameterDeclaration(node, visitNodes(node.Modifiers, visitExistingNodeTreeSymbols, isModifier), setTextRange(context, typeParameterToName(c.getDeclaredTypeOfSymbol(c.getSymbolOfDeclaration(node)), context), node), visitNode(node.Constraint, visitExistingNodeTreeSymbols, isTypeNode), visitNode(node.Default_, visitExistingNodeTreeSymbols, isTypeNode))
			}

			if isIndexedAccessTypeNode(node) {
				result := tryVisitIndexedAccess(node)
				if result == nil {
					hadError = true
					return node
				}
				return result
			}

			if isTypeReferenceNode(node) {
				result := tryVisitTypeReference(node)
				if result != nil {
					return result
				}
				hadError = true
				return node
			}
			if isLiteralImportTypeNode(node) {
				nodeSymbol := c.getNodeLinks(node).resolvedSymbol
				if isInJSDoc(node) && nodeSymbol != nil && ((!node.IsTypeOf && nodeSymbol.Flags&ast.SymbolFlagsType == 0) || !(length(node.TypeArguments) >= c.getMinTypeArgumentCount(c.getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(nodeSymbol)))) {
					return setTextRange(context, typeToTypeNodeHelper(getTypeFromTypeNode(context, node), context), node)
				}
				return factory.updateImportTypeNode(node, factory.updateLiteralTypeNode(node.Argument, rewriteModuleSpecifier(node, node.Argument.Literal)), visitNode(node.Attributes, visitExistingNodeTreeSymbols, isImportAttributes), visitNode(node.Qualifier, visitExistingNodeTreeSymbols, isEntityName), visitNodes(node.TypeArguments, visitExistingNodeTreeSymbols, isTypeNode), node.IsTypeOf)
			}
			if isNamedDeclaration(node) && node.Name.Kind == ast.KindComputedPropertyName && !c.isLateBindableName(node.Name) {
				if !hasDynamicName(node) {
					return visitEachChild(node, visitExistingNodeTreeSymbols)
				}
				if !(context.internalFlags&InternalNodeBuilderFlagsAllowUnresolvedNames != 0 && isEntityNameExpression(node.Name.Expression) && c.checkComputedPropertyName(node.Name).flags&TypeFlagsAny != 0) {
					return nil
				}
			}
			if (isFunctionLike(node) && node.Type_ == nil) || (isPropertyDeclaration(node) && node.Type_ == nil && node.Initializer == nil) || (isPropertySignature(node) && node.Type_ == nil && node.Initializer == nil) || (isParameter(node) && node.Type_ == nil && node.Initializer == nil) {
				visited := visitEachChild(node, visitExistingNodeTreeSymbols)
				if visited == node {
					visited = setTextRange(context, factory.cloneNode(node), node)
				}
				(visited.(Mutable[ /* TODO(TS-TO-GO) TypeNode TypeQuery: typeof visited */ any])).Type_ = factory.createKeywordTypeNode(ast.KindAnyKeyword)
				if isParameter(node) {
					(visited.(Mutable[ParameterDeclaration])).Modifiers = nil
				}
				return visited
			}
			if isTypeQueryNode(node) {
				result := tryVisitTypeQuery(node)
				if result == nil {
					hadError = true
					return node
				}
				return result
			}
			if isComputedPropertyName(node) && isEntityNameExpression(node.Expression) {
				TODO_IDENTIFIER := trackExistingEntityName(node.Expression, context)
				if !introducesError {
					return factory.updateComputedPropertyName(node, result)
				} else {
					t := c.getWidenedType(c.getRegularTypeOfExpression(node.Expression))
					computedPropertyNameType := typeToTypeNodeHelper(t, context)
					var literal TODO
					if isLiteralTypeNode(computedPropertyNameType) {
						literal = computedPropertyNameType.Literal
					} else {
						evaluated := c.evaluateEntityNameExpression(node.Expression)
						var literalNode * /* TODO(TS-TO-GO) inferred type StringLiteral | NumericLiteral */ any
						switch {
						case /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof evaluated.value */ TODO == "string":
							literalNode = factory.createStringLiteral(evaluated.value, nil /*isSingleQuote*/)
						case /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof evaluated.value */ TODO == "number":
							literalNode = factory.createNumericLiteral(evaluated.value, 0 /*numericLiteralFlags*/)
						default:
							literalNode = nil
						}
						if literalNode == nil {
							if isImportTypeNode(computedPropertyNameType) {
								trackComputedName(node.Expression, context.enclosingDeclaration, context)
							}
							return node
						}
						literal = literalNode
					}
					if literal.Kind == ast.KindStringLiteral && isIdentifierText(literal.Text, getEmitScriptTarget(c.compilerOptions)) {
						return factory.createIdentifier(literal.Text)
					}
					if literal.Kind == ast.KindNumericLiteral && !literal.Text.startsWith("-") {
						return literal
					}
					return factory.updateComputedPropertyName(node, literal)
				}
			}
			if isTypePredicateNode(node) {
				var parameterName TODO
				if isIdentifier(node.ParameterName) {
					TODO_IDENTIFIER := trackExistingEntityName(node.ParameterName, context)
					// Should not usually happen the only case is when a type predicate comes from a JSDoc type annotation with it's own parameter symbol definition.
					// /** @type {(v: unknown) => v is undefined} */
					// const isUndef = v => v === undefined;
					hadError = hadError || introducesError
					parameterName = result
				} else {
					parameterName = factory.cloneNode(node.ParameterName)
				}
				return factory.updateTypePredicateNode(node, factory.cloneNode(node.AssertsModifier), parameterName, visitNode(node.Type_, visitExistingNodeTreeSymbols, isTypeNode))
			}

			if isTupleTypeNode(node) || isTypeLiteralNode(node) || isMappedTypeNode(node) {
				visited := visitEachChild(node, visitExistingNodeTreeSymbols)
				clone := setTextRange(context, ifElse(visited == node, factory.cloneNode(node), visited), node)
				flags := getEmitFlags(clone)
				setEmitFlags(clone, flags|(ifElse(context.flags&NodeBuilderFlagsMultilineObjectLiterals != 0 && isTypeLiteralNode(node), 0, EmitFlagsSingleLine)))
				return clone
			}
			if isStringLiteral(node) && context.flags&NodeBuilderFlagsUseSingleQuotesForStringLiteralType != 0 && !node.SingleQuote {
				clone := factory.cloneNode(node)
				(clone.(Mutable[ /* TODO(TS-TO-GO) TypeNode TypeQuery: typeof clone */ any])).SingleQuote = true
				return clone
			}
			if isConditionalTypeNode(node) {
				checkType := visitNode(node.CheckType, visitExistingNodeTreeSymbols, isTypeNode)

				disposeScope := onEnterNewScope(node)
				extendType := visitNode(node.ExtendsType, visitExistingNodeTreeSymbols, isTypeNode)
				trueType := visitNode(node.TrueType, visitExistingNodeTreeSymbols, isTypeNode)
				disposeScope()
				falseType := visitNode(node.FalseType, visitExistingNodeTreeSymbols, isTypeNode)
				return factory.updateConditionalTypeNode(node, checkType, extendType, trueType, falseType)
			}

			if isTypeOperatorNode(node) {
				if node.Operator == ast.KindUniqueKeyword && node.Type_.Kind == ast.KindSymbolKeyword {
					if !canReuseTypeNode(context, node) {
						hadError = true
						return node
					}
				} else if node.Operator == ast.KindKeyOfKeyword {
					result := tryVisitKeyOf(node)
					if result == nil {
						hadError = true
						return node
					}
					return result
				}
			}

			return visitEachChild(node, visitExistingNodeTreeSymbols)

			/* OVERLOAD: function visitEachChild<T extends Node>(node: T, visitor: Visitor): T; */
			/* OVERLOAD: function visitEachChild<T extends Node>(node: T | undefined, visitor: Visitor): T | undefined; */
			visitEachChild := func(node *T, visitor Visitor) *T {
				nonlocalNode := context.enclosingFile == nil || context.enclosingFile != getSourceFileOfNode(node)
				return visitEachChildWorker(node, visitor, nil /*context*/, ifElse(nonlocalNode, visitNodesWithoutCopyingPositions, nil))
			}

			visitNodesWithoutCopyingPositions := func(nodes *NodeArray[*ast.Node], visitor Visitor, test func(node *ast.Node) bool, start number, count number) *NodeArray[*ast.Node] {
				result := visitNodes(nodes, visitor, test, start, count)
				if result != nil {
					if result.pos != -1 || result.end != -1 {
						if result == nodes {
							result = factory.createNodeArray(nodes.slice(), nodes.hasTrailingComma)
						}
						setTextRangePosEnd(result, -1, -1)
					}
				}
				return result
			}

			getEffectiveDotDotDotForParameter := func(p ParameterDeclaration) *DotDotDotToken {
				return p.DotDotDotToken || (ifElse(p.Type_ != nil && isJSDocVariadicType(p.Type_), factory.createToken(ast.KindDotDotDotToken), nil))
			}

			/** Note that `new:T` parameters are not handled, but should be before calling this function. */

			getNameForJSDocFunctionParameter := func(p ParameterDeclaration, index number) string {
				switch {
				case p.Name && isIdentifier(p.Name) && p.Name.EscapedText == "this":
					return "this"
				case getEffectiveDotDotDotForParameter(p) != nil:
					return `args`
				default:
					return __TEMPLATE__("arg", index)
				}
			}

			rewriteModuleSpecifier := func(parent ImportTypeNode, lit StringLiteral) StringLiteral {
				if context.bundled || context.enclosingFile != getSourceFileOfNode(lit) {
					name := lit.Text
					nodeSymbol := c.getNodeLinks(node).resolvedSymbol
					var meaning /* TODO(TS-TO-GO) inferred type SymbolFlags.Value | SymbolFlags.Type */ any
					if parent.IsTypeOf {
						meaning = ast.SymbolFlagsValue
					} else {
						meaning = ast.SymbolFlagsType
					}
					parentSymbol := nodeSymbol && c.isSymbolAccessible(nodeSymbol, context.enclosingDeclaration, meaning, false /*shouldComputeAliasesToMakeVisible*/).accessibility == SymbolAccessibilityAccessible && lookupSymbolChain(nodeSymbol, context, meaning, true /*yieldModuleSymbol*/)[0]
					if parentSymbol && isExternalModuleSymbol(parentSymbol) {
						name = getSpecifierForModuleSymbol(parentSymbol, context)
					} else {
						targetFile := c.getExternalModuleFileFromDeclaration(parent)
						if targetFile != nil {
							name = getSpecifierForModuleSymbol(targetFile.Symbol, context)
						}
					}
					if name.includes("/node_modules/") {
						context.encounteredError = true
						if context.tracker.reportLikelyUnsafeImportRequiredError {
							context.tracker.reportLikelyUnsafeImportRequiredError(name)
						}
					}
					if name != lit.Text {
						return setOriginalNode(factory.createStringLiteral(name), lit)
					}
				}
				return visitNode(lit, visitExistingNodeTreeSymbols, isStringLiteral)
			}

		}

	}

	symbolTableToDeclarationStatements := func(symbolTable SymbolTable, context NodeBuilderContext) []Statement {
		serializePropertySymbolForClass := makeSerializePropertySymbol(factory.createPropertyDeclaration, ast.KindMethodDeclaration, true /*useAccessors*/)
		serializePropertySymbolForInterfaceWorker := makeSerializePropertySymbol(func(mods *[]Modifier, name /* TODO(TS-TO-GO) inferred type string | PropertyName */ any, question *QuestionToken, t *TypeNode) PropertySignature {
			return factory.createPropertySignature(mods, name, question, t)
		}, ast.KindMethodSignature, false /*useAccessors*/)

		// TODO: Use `setOriginalNode` on original declaration names where possible so these declarations see some kind of
		// declaration mapping

		// We save the enclosing declaration off here so it's not adjusted by well-meaning declaration
		// emit codepaths which want to apply more specific contexts (so we can still refer to the root real declaration
		// we're trying to emit from later on)
		enclosingDeclaration := context.enclosingDeclaration
		var results []Statement = []never{}
		visitedSymbols := NewSet[number]()
		var deferredPrivatesStack []Map[SymbolId, *ast.Symbol] = []never{}
		oldcontext := context
		context = NodeBuilderContext{
			/* TODO(TS-TO-GO) Node SpreadAssignment: ...oldcontext */
			usedSymbolNames:          NewSet(oldcontext.usedSymbolNames),
			remappedSymbolNames:      NewMap(),
			remappedSymbolReferences: NewMap(oldcontext.remappedSymbolReferences. /* ? */ entries()),
			tracker:                  nil,
		}
		var tracker SymbolTracker = SymbolTracker{
			/* TODO(TS-TO-GO) Node SpreadAssignment: ...oldcontext.tracker.inner */
			trackSymbol: func(sym *ast.Symbol, decl *ast.Node, meaning SymbolFlags) bool {
				if context.remappedSymbolNames. /* ? */ has(getSymbolId(sym)) {
					return false
					// If the context has a remapped name for the symbol, it *should* mean it's been made visible
				}
				// If the context has a remapped name for the symbol, it *should* mean it's been made visible
				accessibleResult := c.isSymbolAccessible(sym, decl, meaning, false /*shouldComputeAliasesToMakeVisible*/)
				if accessibleResult.accessibility == SymbolAccessibilityAccessible {
					// Lookup the root symbol of the chain of refs we'll use to access it and serialize it
					chain := lookupSymbolChainWorker(sym, context, meaning)
					if sym.Flags&ast.SymbolFlagsProperty == 0 {
						// Only include referenced privates in the same file. Weird JS aliases may expose privates
						// from other files - assume JS transforms will make those available via expected means
						root := chain[0]
						contextFile := getSourceFileOfNode(oldcontext.enclosingDeclaration)
						if core.Some(root.Declarations, func(d Declaration) bool {
							return getSourceFileOfNode(d) == contextFile
						}) {
							includePrivateSymbol(root)
						}
					}
				} else if oldcontext.tracker.inner. /* ? */ trackSymbol != nil {
					return oldcontext.tracker.inner.trackSymbol(sym, decl, meaning)
				}
				return false
			},
		}
		context.tracker = NewSymbolTrackerImpl(context, tracker, oldcontext.tracker.moduleResolverHost)
		forEachEntry(symbolTable, func(symbol *ast.Symbol, name string) {
			baseName := unescapeLeadingUnderscores(name)
			getInternalSymbolName(symbol, baseName)
			// Called to cache values into `usedSymbolNames` and `remappedSymbolNames`
		})
		addingDeclare := !context.bundled
		exportEquals := symbolTable.get(InternalSymbolNameExportEquals)
		if exportEquals != nil && symbolTable.size > 1 && exportEquals.Flags&(ast.SymbolFlagsAlias|ast.SymbolFlagsModule) != 0 {
			symbolTable = createSymbolTable()
			// Remove extraneous elements from root symbol table (they'll be mixed back in when the target of the `export=` is looked up)
			symbolTable.set(InternalSymbolNameExportEquals, exportEquals)
		}

		visitSymbolTable(symbolTable)
		return mergeRedundantStatements(results)

		isIdentifierAndNotUndefined := func(node *ast.Node) bool {
			return node != nil && node.Kind == ast.KindIdentifier
		}

		getNamesOfDeclaration := func(statement Statement) []Identifier {
			if isVariableStatement(statement) {
				return core.Filter(core.Map(statement.DeclarationList.Declarations, getNameOfDeclaration), isIdentifierAndNotUndefined)
			}
			return core.Filter([]*DeclarationName{getNameOfDeclaration(statement.AsDeclarationStatement())}, isIdentifierAndNotUndefined)
		}

		flattenExportAssignedNamespace := func(statements []Statement) []Statement {
			exportAssignment := core.Find(statements, isExportAssignment)
			nsIndex := core.FindIndex(statements, isModuleDeclaration)
			var ns *ModuleDeclaration
			if nsIndex != -1 {
				ns = statements[nsIndex].AsModuleDeclaration()
			} else {
				ns = nil
			}
			if ns != nil && exportAssignment != nil && exportAssignment.IsExportEquals && isIdentifier(exportAssignment.Expression) && isIdentifier(ns.Name) && idText(ns.Name) == idText(exportAssignment.Expression) && ns.Body != nil && isModuleBlock(ns.Body) {
				// Pass 0: Correct situations where a module has both an `export = ns` and multiple top-level exports by stripping the export modifiers from
				//  the top-level exports and exporting them in the targeted ns, as can occur when a js file has both typedefs and `module.export` assignments
				excessExports := core.Filter(statements, func(s Statement) bool {
					return getEffectiveModifierFlags(s)&ast.ModifierFlagsExport != 0
				})
				name := ns.Name
				body := ns.Body
				if length(excessExports) != 0 {
					ns = factory.updateModuleDeclaration(ns, ns.Modifiers, ns.Name /* TODO(TS-TO-GO) EqualsToken BinaryExpression: body = factory.updateModuleBlock( body, factory.createNodeArray([ ...ns.body.statements, factory.createExportDeclaration( /*modifiers* / undefined, /*isTypeOnly* / false, factory.createNamedExports(map(flatMap(excessExports, e => getNamesOfDeclaration(e)), id => factory.createExportSpecifier(/*isTypeOnly* / false, /*propertyName* / undefined, id))), /*moduleSpecifier* / undefined, ), ]), ) */, TODO)
					statements = []Statement{ /* TODO(TS-TO-GO) Expression SpreadElement: ...statements.slice(0, nsIndex) */ ns /* TODO(TS-TO-GO) Expression SpreadElement: ...statements.slice(nsIndex + 1) */}
				}

				// Pass 1: Flatten `export namespace _exports {} export = _exports;` so long as the `export=` only points at a single namespace declaration
				if core.Find(statements, func(s Statement) bool {
					return s != ns && nodeHasName(s, name)
				}) == nil {
					results = []never{}
					// If the namespace contains no export assignments or declarations, and no declarations flagged with `export`, then _everything_ is exported -
					// to respect this as the top level, we need to add an `export` modifier to everything
					mixinExportFlag := !core.Some(body.Statements, func(s Statement) bool {
						return hasSyntacticModifier(s, ast.ModifierFlagsExport) || isExportAssignment(s) || isExportDeclaration(s)
					})
					forEach(body.Statements, func(s Statement) {
						addResult(s, ifElse(mixinExportFlag, ast.ModifierFlagsExport, ast.ModifierFlagsNone))
						// Recalculates the ambient (and export, if applicable from above) flag
					})
					statements = []Statement{ /* TODO(TS-TO-GO) Expression SpreadElement: ...filter(statements, s => s !== ns && s !== exportAssignment) */ /* TODO(TS-TO-GO) Expression SpreadElement: ...results */ }
				}
			}
			return statements
		}

		mergeExportDeclarations := func(statements []Statement) []Statement {
			// Pass 2: Combine all `export {}` declarations
			exports := core.Filter(statements, func(d Statement) bool {
				return isExportDeclaration(d) && d.ModuleSpecifier == nil && d.ExportClause != nil && isNamedExports(d.ExportClause)
			}) /* as ExportDeclaration[] */
			if length(exports) > 1 {
				nonExports := core.Filter(statements, func(d Statement) bool {
					return !isExportDeclaration(d) || d.ModuleSpecifier != nil || d.ExportClause == nil
				})
				statements = []Statement{ /* TODO(TS-TO-GO) Expression SpreadElement: ...nonExports */ factory.createExportDeclaration(nil, false, factory.createNamedExports(flatMap(exports, func(e ExportDeclaration) NodeArray[ExportSpecifier] {
					return cast(e.ExportClause, isNamedExports).Elements
				})), nil)}
			}
			// Pass 2b: Also combine all `export {} from "..."` declarations as needed
			reexports := core.Filter(statements, func(d Statement) bool {
				return isExportDeclaration(d) && d.ModuleSpecifier != nil && d.ExportClause != nil && isNamedExports(d.ExportClause)
			}) /* as ExportDeclaration[] */
			if length(reexports) > 1 {
				groups := group(reexports, func(decl ExportDeclaration) string {
					if isStringLiteral(decl.ModuleSpecifier) {
						return ">" + decl.ModuleSpecifier.Text
					} else {
						return ">"
					}
				})
				if groups.length != reexports.length {
					for _, group := range groups {
						if group.length > 1 {
							// remove group members from statements and then merge group members and add back to statements
							statements = []Statement{ /* TODO(TS-TO-GO) Expression SpreadElement: ...filter(statements, s => !group.includes(s as ExportDeclaration)) */ factory.createExportDeclaration(nil, false, factory.createNamedExports(flatMap(group, func(e ExportDeclaration) NodeArray[ExportSpecifier] {
								return cast(e.ExportClause, isNamedExports).Elements
							})), group[0].ModuleSpecifier)}
						}
					}
				}
			}
			return statements
		}

		inlineExportModifiers := func(statements []Statement) []Statement {
			// Pass 3: Move all `export {}`'s to `export` modifiers where possible
			index := core.FindIndex(statements, func(d Statement) bool {
				return isExportDeclaration(d) && d.ModuleSpecifier == nil && d.Attributes == nil && d.ExportClause != nil && isNamedExports(d.ExportClause)
			})
			if index >= 0 {
				exportDecl := statements[index] /* as ExportDeclaration & { readonly exportClause: NamedExports; } */
				replacements := mapDefined(exportDecl.ExportClause.Elements, func(e ExportSpecifier) *ExportSpecifier {
					if e.PropertyName == nil && e.Name.Kind != ast.KindStringLiteral {
						// export {name} - look thru `statements` for `name`, and if all results can take an `export` modifier, do so and filter it
						name := e.Name
						indices := indicesOf(statements)
						associatedIndices := core.Filter(indices, func(i number) bool {
							return nodeHasName(statements[i], name)
						})
						if length(associatedIndices) != 0 && core.Every(associatedIndices, func(i number) bool {
							return canHaveExportModifier(statements[i])
						}) {
							for _, index := range associatedIndices {
								statements[index] = addExportModifier(statements[index].(Extract[HasModifiers, Statement]))
							}
							return nil
						}
					}
					return e
				})
				if length(replacements) == 0 {
					// all clauses removed, remove the export declaration
					orderedRemoveItemAt(statements, index)
				} else {
					// some items filtered, others not - update the export declaration
					statements[index] = factory.updateExportDeclaration(exportDecl, exportDecl.Modifiers, exportDecl.IsTypeOnly, factory.updateNamedExports(exportDecl.ExportClause, replacements), exportDecl.ModuleSpecifier, exportDecl.Attributes)
				}
			}
			return statements
		}

		mergeRedundantStatements := func(statements []Statement) []Statement {
			statements = flattenExportAssignedNamespace(statements)
			statements = mergeExportDeclarations(statements)
			statements = inlineExportModifiers(statements)

			// Not a cleanup, but as a final step: If there is a mix of `export` and non-`export` declarations, but no `export =` or `export {}` add a `export {};` so
			// declaration privacy is respected.
			if enclosingDeclaration && ((isSourceFile(enclosingDeclaration) && isExternalOrCommonJsModule(enclosingDeclaration)) || isModuleDeclaration(enclosingDeclaration)) && (!core.Some(statements, isExternalModuleIndicator) || (!hasScopeMarker(statements) && core.Some(statements, needsScopeMarker))) {
				statements.push(createEmptyExports(factory))
			}
			return statements
		}

		addExportModifier := func(node Extract[HasModifiers, Statement]) /* TODO(TS-TO-GO) inferred type FunctionDeclaration | ExportAssignment | VariableStatement | InterfaceDeclaration | ClassDeclaration | EnumDeclaration | ExportDeclaration | ImportDeclaration | ImportEqualsDeclaration | ModuleDeclaration | TypeAliasDeclaration */ any {
			flags := (getEffectiveModifierFlags(node) | ast.ModifierFlagsExport) & ^ast.ModifierFlagsAmbient
			return factory.replaceModifiers(node, flags)
		}

		removeExportModifier := func(node Extract[HasModifiers, Statement]) /* TODO(TS-TO-GO) inferred type FunctionDeclaration | ExportAssignment | VariableStatement | InterfaceDeclaration | ClassDeclaration | EnumDeclaration | ExportDeclaration | ImportDeclaration | ImportEqualsDeclaration | ModuleDeclaration | TypeAliasDeclaration */ any {
			flags := getEffectiveModifierFlags(node) & ^ast.ModifierFlagsExport
			return factory.replaceModifiers(node, flags)
		}

		visitSymbolTable := func(symbolTable SymbolTable, suppressNewPrivateContext bool, propertyAsAlias bool) {
			if !suppressNewPrivateContext {
				deferredPrivatesStack.push(NewMap())
			}
			symbolTable.forEach(func(symbol *ast.Symbol) {
				serializeSymbol(symbol, false /*isPrivate*/, propertyAsAlias)
			})
			if !suppressNewPrivateContext {
				// deferredPrivates will be filled up by visiting the symbol table
				// And will continue to iterate as elements are added while visited `deferredPrivates`
				// (As that's how a map iterator is defined to work)
				deferredPrivatesStack[deferredPrivatesStack.length-1].forEach(func(symbol *ast.Symbol) {
					serializeSymbol(symbol, true /*isPrivate*/, propertyAsAlias)
				})
				deferredPrivatesStack.pop()
			}
		}

		serializeSymbol := func(symbol *ast.Symbol, isPrivate bool, propertyAsAlias bool) {
			c.getPropertiesOfType(c.getTypeOfSymbol(symbol))
			// cache visited list based on merged symbol, since we want to use the unmerged top-level symbol, but
			// still skip reserializing it if we encounter the merged product later on
			visitedSym := c.getMergedSymbol(symbol)
			if visitedSymbols.has(getSymbolId(visitedSym)) {
				return
				// Already printed
			}
			visitedSymbols.add(getSymbolId(visitedSym))
			// Only actually serialize symbols within the correct enclosing declaration, otherwise do nothing with the out-of-context symbol
			skipMembershipCheck := !isPrivate
			// We only call this on exported symbols when we know they're in the correct scope
			if skipMembershipCheck || (length(symbol.Declarations) != 0 && core.Some(symbol.Declarations, func(d Declaration) bool {
				return findAncestor(d, func(n *ast.Node) bool {
					return n == enclosingDeclaration
				}) != nil
			})) {
				scopeCleanup := cloneNodeBuilderContext(context)
				context.tracker.pushErrorFallbackNode(core.Find(symbol.Declarations, func(d Declaration) bool {
					return getSourceFileOfNode(d) == context.enclosingFile
				}))
				serializeSymbolWorker(symbol, isPrivate, propertyAsAlias)
				context.tracker.popErrorFallbackNode()
				scopeCleanup()
			}
		}

		// Synthesize declarations for a symbol - might be an Interface, a Class, a Namespace, a Type, a Variable (const, let, or var), an Alias
		// or a merge of some number of those.
		// An interesting challenge is ensuring that when classes merge with namespaces and interfaces, is keeping
		// each symbol in only one of the representations
		// Also, synthesizing a default export of some kind
		// If it's an alias: emit `export default ref`
		// If it's a property: emit `export default _default` with a `_default` prop
		// If it's a class/interface/function: emit a class/interface/function with a `default` modifier
		// These forms can merge, eg (`export default 12; export default interface A {}`)
		serializeSymbolWorker := func(symbol *ast.Symbol, isPrivate bool, propertyAsAlias bool, escapedSymbolName string /*  = symbol.escapedName */) {
			symbolName := unescapeLeadingUnderscores(escapedSymbolName)
			isDefault := escapedSymbolName == InternalSymbolNameDefault
			if isPrivate && context.flags&NodeBuilderFlagsAllowAnonymousIdentifier == 0 && isStringANonContextualKeyword(symbolName) && !isDefault {
				// Oh no. We cannot use this symbol's name as it's name... It's likely some jsdoc had an invalid name like `export` or `default` :(
				context.encounteredError = true
				// TODO: Issue error via symbol tracker?
				return
				// If we need to emit a private with a keyword name, we're done for, since something else will try to refer to it by that name
			}
			needsPostExportDefault := isDefault && symbol.Flags&ast.SymbolFlagsExportDoesNotSupportDefaultModifier != 0 || (symbol.Flags&ast.SymbolFlagsFunction != 0 && length(c.getPropertiesOfType(c.getTypeOfSymbol(symbol))) != 0) && symbol.Flags&ast.SymbolFlagsAlias == 0
			// An alias symbol should preclude needing to make an alias ourselves
			needsExportDeclaration := !needsPostExportDefault && !isPrivate && isStringANonContextualKeyword(symbolName) && !isDefault
			// `serializeVariableOrProperty` will handle adding the export declaration if it is run (since `getInternalSymbolName` will create the name mapping), so we need to ensuer we unset `needsExportDeclaration` if it is
			if needsPostExportDefault || needsExportDeclaration {
				isPrivate = true
			}
			modifierFlags := (ifElse(!isPrivate, ast.ModifierFlagsExport, 0)) | (ifElse(isDefault && !needsPostExportDefault, ast.ModifierFlagsDefault, 0))
			isConstMergedWithNS := symbol.Flags&ast.SymbolFlagsModule && symbol.Flags&(ast.SymbolFlagsBlockScopedVariable|ast.SymbolFlagsFunctionScopedVariable|ast.SymbolFlagsProperty) && escapedSymbolName != InternalSymbolNameExportEquals
			isConstMergedWithNSPrintableAsSignatureMerge := isConstMergedWithNS && isTypeRepresentableAsFunctionNamespaceMerge(c.getTypeOfSymbol(symbol), symbol)
			if symbol.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsMethod) != 0 || isConstMergedWithNSPrintableAsSignatureMerge {
				serializeAsFunctionNamespaceMerge(c.getTypeOfSymbol(symbol), symbol, getInternalSymbolName(symbol, symbolName), modifierFlags)
			}
			if symbol.Flags&ast.SymbolFlagsTypeAlias != 0 {
				serializeTypeAlias(symbol, symbolName, modifierFlags)
			}
			// Need to skip over export= symbols below - json source files get a single `Property` flagged
			// symbol of name `export=` which needs to be handled like an alias. It's not great, but it is what it is.
			if symbol.Flags&(ast.SymbolFlagsBlockScopedVariable|ast.SymbolFlagsFunctionScopedVariable|ast.SymbolFlagsProperty|ast.SymbolFlagsAccessor) != 0 && escapedSymbolName != InternalSymbolNameExportEquals && symbol.Flags&ast.SymbolFlagsPrototype == 0 && symbol.Flags&ast.SymbolFlagsClass == 0 && symbol.Flags&ast.SymbolFlagsMethod == 0 && !isConstMergedWithNSPrintableAsSignatureMerge {
				if propertyAsAlias {
					createdExport := serializeMaybeAliasAssignment(symbol)
					if createdExport {
						needsExportDeclaration = false
						needsPostExportDefault = false
					}
				} else {
					t := c.getTypeOfSymbol(symbol)
					localName := getInternalSymbolName(symbol, symbolName)
					if t.symbol && t.symbol != symbol && t.symbol.Flags&ast.SymbolFlagsFunction != 0 && core.Some(t.symbol.Declarations, isFunctionExpressionOrArrowFunction) && (t.symbol.Members. /* ? */ size || t.symbol.Exports. /* ? */ size) {
						// assignment of a anonymous expando/class-like function, the func/ns/merge branch below won't trigger,
						// and the assignment form has to reference the unreachable anonymous type so will error.
						// Instead, serialize the type's symbol, but with the current symbol's name, rather than the anonymous one.
						if context.remappedSymbolReferences == nil {
							context.remappedSymbolReferences = NewMap()
						}
						context.remappedSymbolReferences.set(getSymbolId(t.symbol), symbol)
						// save name remapping as local name for target symbol
						serializeSymbolWorker(t.symbol, isPrivate, propertyAsAlias, escapedSymbolName)
						context.remappedSymbolReferences.delete(getSymbolId(t.symbol))
					} else if symbol.Flags&ast.SymbolFlagsFunction == 0 && isTypeRepresentableAsFunctionNamespaceMerge(t, symbol) {
						// If the type looks like a function declaration + ns could represent it, and it's type is sourced locally, rewrite it into a function declaration + ns
						serializeAsFunctionNamespaceMerge(t, symbol, localName, modifierFlags)
					} else {
						// A Class + Property merge is made for a `module.exports.Member = class {}`, and it doesn't serialize well as either a class _or_ a property symbol - in fact, _it behaves like an alias!_
						// `var` is `FunctionScopedVariable`, `const` and `let` are `BlockScopedVariable`, and `module.exports.thing =` is `Property`
						var flags * /* TODO(TS-TO-GO) inferred type NodeFlags.Let | NodeFlags.Const */ any
						switch {
						case symbol.Flags&ast.SymbolFlagsBlockScopedVariable == 0:
							if symbol.Parent. /* ? */ valueDeclaration != nil && isSourceFile(symbol.Parent. /* ? */ ValueDeclaration) {
								flags = ast.NodeFlagsConst
							} else {
								flags = nil
							}
						case c.isConstantVariable(symbol):
							flags = ast.NodeFlagsConst
						default:
							flags = ast.NodeFlagsLet
						}
						var name string
						if needsPostExportDefault || symbol.Flags&ast.SymbolFlagsProperty == 0 {
							name = localName
						} else {
							name = getUnusedName(localName, symbol)
						}
						var textRange *ast.Node = symbol.Declarations && core.Find(symbol.Declarations, func(d Declaration) bool {
							return isVariableDeclaration(d)
						})
						if textRange != nil && isVariableDeclarationList(textRange.Parent) && textRange.Parent.Declarations.length == 1 {
							textRange = textRange.Parent.Parent
						}
						propertyAccessRequire := symbol.Declarations. /* ? */ find(isPropertyAccessExpression)
						if propertyAccessRequire != nil && isBinaryExpression(propertyAccessRequire.Parent) && isIdentifier(propertyAccessRequire.Parent.Right) && t.symbol. /* ? */ ValueDeclaration != nil && isSourceFile(t.symbol.ValueDeclaration) {
							var alias *Identifier
							if localName == propertyAccessRequire.Parent.Right.EscapedText {
								alias = nil
							} else {
								alias = propertyAccessRequire.Parent.Right
							}
							addResult(factory.createExportDeclaration(nil, false, factory.createNamedExports([]ExportSpecifier{factory.createExportSpecifier(false, alias, localName)})), ast.ModifierFlagsNone)
							context.tracker.trackSymbol(t.symbol, context.enclosingDeclaration, ast.SymbolFlagsValue)
						} else {
							statement := setTextRange(context, factory.createVariableStatement(nil, factory.createVariableDeclarationList([]VariableDeclaration{factory.createVariableDeclaration(name, nil /*exclamationToken*/, serializeTypeForDeclaration(context, nil /*declaration*/, t, symbol))}, flags)), textRange)
							addResult(statement, ifElse(name != localName, modifierFlags & ^ast.ModifierFlagsExport, modifierFlags))
							if name != localName && !isPrivate {
								// We rename the variable declaration we generate for Property symbols since they may have a name which
								// conflicts with a local declaration. For example, given input:
								// ```
								// function g() {}
								// module.exports.g = g
								// ```
								// In such a situation, we have a local variable named `g`, and a separate exported variable named `g`.
								// Naively, we would emit
								// ```
								// function g() {}
								// export const g: typeof g;
								// ```
								// That's obviously incorrect - the `g` in the type annotation needs to refer to the local `g`, but
								// the export declaration shadows it.
								// To work around that, we instead write
								// ```
								// function g() {}
								// const g_1: typeof g;
								// export { g_1 as g };
								// ```
								// To create an export named `g` that does _not_ shadow the local `g`
								addResult(factory.createExportDeclaration(nil, false, factory.createNamedExports([]ExportSpecifier{factory.createExportSpecifier(false, name, localName)})), ast.ModifierFlagsNone)
								needsExportDeclaration = false
								needsPostExportDefault = false
							}
						}
					}
				}
			}
			if symbol.Flags&ast.SymbolFlagsEnum != 0 {
				serializeEnum(symbol, symbolName, modifierFlags)
			}
			if symbol.Flags&ast.SymbolFlagsClass != 0 {
				if symbol.Flags&ast.SymbolFlagsProperty != 0 && symbol.ValueDeclaration != nil && isBinaryExpression(symbol.ValueDeclaration.Parent) && isClassExpression(symbol.ValueDeclaration.Parent.Right) {
					// Looks like a `module.exports.Sub = class {}` - if we serialize `symbol` as a class, the result will have no members,
					// since the classiness is actually from the target of the effective alias the symbol is. yes. A BlockScopedVariable|Class|Property
					// _really_ acts like an Alias, and none of a BlockScopedVariable, Class, or Property. This is the travesty of JS binding today.
					serializeAsAlias(symbol, getInternalSymbolName(symbol, symbolName), modifierFlags)
				} else {
					serializeAsClass(symbol, getInternalSymbolName(symbol, symbolName), modifierFlags)
				}
			}
			if (symbol.Flags&(ast.SymbolFlagsValueModule|ast.SymbolFlagsNamespaceModule) != 0 && (!isConstMergedWithNS || isTypeOnlyNamespace(symbol))) || isConstMergedWithNSPrintableAsSignatureMerge {
				serializeModule(symbol, symbolName, modifierFlags)
			}
			// The class meaning serialization should handle serializing all interface members
			if symbol.Flags&ast.SymbolFlagsInterface != 0 && symbol.Flags&ast.SymbolFlagsClass == 0 {
				serializeInterface(symbol, symbolName, modifierFlags)
			}
			if symbol.Flags&ast.SymbolFlagsAlias != 0 {
				serializeAsAlias(symbol, getInternalSymbolName(symbol, symbolName), modifierFlags)
			}
			if symbol.Flags&ast.SymbolFlagsProperty != 0 && symbol.EscapedName == InternalSymbolNameExportEquals {
				serializeMaybeAliasAssignment(symbol)
			}
			if symbol.Flags&ast.SymbolFlagsExportStar != 0 {
				// synthesize export * from "moduleReference"
				// Straightforward - only one thing to do - make an export declaration
				if symbol.Declarations != nil {
					for _, node := range symbol.Declarations {
						resolvedModule := c.resolveExternalModuleName(node, node.AsExportDeclaration().ModuleSpecifier)
						if resolvedModule == nil {
							continue
						}
						addResult(factory.createExportDeclaration(nil, node.AsExportDeclaration().IsTypeOnly /*isTypeOnly*/, nil /*exportClause*/, factory.createStringLiteral(getSpecifierForModuleSymbol(resolvedModule, context))), ast.ModifierFlagsNone)
					}
				}
			}
			if needsPostExportDefault {
				addResult(factory.createExportAssignment(nil, false /*isExportEquals*/, factory.createIdentifier(getInternalSymbolName(symbol, symbolName))), ast.ModifierFlagsNone)
			} else if needsExportDeclaration {
				addResult(factory.createExportDeclaration(nil, false, factory.createNamedExports([]ExportSpecifier{factory.createExportSpecifier(false, getInternalSymbolName(symbol, symbolName), symbolName)})), ast.ModifierFlagsNone)
			}
		}

		includePrivateSymbol := func(symbol *ast.Symbol) {
			if core.Some(symbol.Declarations, isPartOfParameterDeclaration) {
				return
			}
			Debug.assertIsDefined(deferredPrivatesStack[deferredPrivatesStack.length-1])
			getUnusedName(unescapeLeadingUnderscores(symbol.EscapedName), symbol)
			// Blanket moving (import) aliases into the root private context should work, since imports are not valid within namespaces
			// (so they must have been in the root to begin with if they were real imports) cjs `require` aliases (an upcoming feature)
			// will throw a wrench in this, since those may have been nested, but we'll need to synthesize them in the outer scope
			// anyway, as that's the only place the import they translate to is valid. In such a case, we might need to use a unique name
			// for the moved import; which hopefully the above `getUnusedName` call should produce.
			isExternalImportAlias := symbol.Flags&ast.SymbolFlagsAlias != 0 && !core.Some(symbol.Declarations, func(d Declaration) bool {
				return findAncestor(d, isExportDeclaration) != nil || isNamespaceExport(d) || (isImportEqualsDeclaration(d) && !isExternalModuleReference(d.ModuleReference))
			})
			deferredPrivatesStack[ifElse(isExternalImportAlias, 0, (deferredPrivatesStack.length-1))].set(getSymbolId(symbol), symbol)
		}

		isExportingScope := func(enclosingDeclaration *ast.Node) bool {
			return (isSourceFile(enclosingDeclaration) && (isExternalOrCommonJsModule(enclosingDeclaration) || isJsonSourceFile(enclosingDeclaration))) || (isAmbientModule(enclosingDeclaration) && !isGlobalScopeAugmentation(enclosingDeclaration))
		}

		// Prepends a `declare` and/or `export` modifier if the context requires it, and then adds `node` to `result` and returns `node`
		addResult := func(node Statement, additionalModifierFlags ModifierFlags) {
			if canHaveModifiers(node) {
				var newModifierFlags ModifierFlags = ast.ModifierFlagsNone
				enclosingDeclaration := context.enclosingDeclaration && (ifElse(isJSDocTypeAlias(context.enclosingDeclaration), getSourceFileOfNode(context.enclosingDeclaration), context.enclosingDeclaration))
				if additionalModifierFlags&ast.ModifierFlagsExport != 0 && enclosingDeclaration != nil && (isExportingScope(enclosingDeclaration) || isModuleDeclaration(enclosingDeclaration)) && canHaveExportModifier(node) {
					// Classes, namespaces, variables, functions, interfaces, and types should all be `export`ed in a module context if not private
					newModifierFlags |= ast.ModifierFlagsExport
				}
				if addingDeclare && newModifierFlags&ast.ModifierFlagsExport == 0 && (enclosingDeclaration == nil || enclosingDeclaration.Flags&ast.NodeFlagsAmbient == 0) && (isEnumDeclaration(node) || isVariableStatement(node) || isFunctionDeclaration(node) || isClassDeclaration(node) || isModuleDeclaration(node)) {
					// Classes, namespaces, variables, enums, and functions all need `declare` modifiers to be valid in a declaration file top-level scope
					newModifierFlags |= ast.ModifierFlagsAmbient
				}
				if (additionalModifierFlags&ast.ModifierFlagsDefault != 0) && (isClassDeclaration(node) || isInterfaceDeclaration(node) || isFunctionDeclaration(node)) {
					newModifierFlags |= ast.ModifierFlagsDefault
				}
				if newModifierFlags != 0 {
					node = factory.replaceModifiers(node, newModifierFlags|getEffectiveModifierFlags(node))
				}
			}
			results.push(node)
		}

		serializeTypeAlias := func(symbol *ast.Symbol, symbolName string, modifierFlags ModifierFlags) {
			aliasType := c.getDeclaredTypeOfTypeAlias(symbol)
			typeParams := c.getSymbolLinks(symbol).typeParameters
			typeParamDecls := core.Map(typeParams, func(p TypeParameter) TypeParameterDeclaration {
				return typeParameterToDeclaration(p, context)
			})
			jsdocAliasDecl := symbol.Declarations. /* ? */ find(isJSDocTypeAlias)
			commentText := getTextOfJSDocComment(ifElse(jsdocAliasDecl != nil, jsdocAliasDecl.Comment || jsdocAliasDecl.Parent.Comment, nil))
			restoreFlags := saveRestoreFlags(context)
			context.flags |= NodeBuilderFlagsInTypeAlias
			oldEnclosingDecl := context.enclosingDeclaration
			context.enclosingDeclaration = jsdocAliasDecl
			typeNode := jsdocAliasDecl && jsdocAliasDecl.TypeExpression && isJSDocTypeExpression(jsdocAliasDecl.TypeExpression) && tryReuseExistingNonParameterTypeNode(context, jsdocAliasDecl.TypeExpression.Type_, aliasType, nil /*host*/) || typeToTypeNodeHelper(aliasType, context)
			addResult(setSyntheticLeadingComments(factory.createTypeAliasDeclaration(nil, getInternalSymbolName(symbol, symbolName), typeParamDecls, typeNode), ifElse(!commentText, []never{}, [] /* TODO(TS-TO-GO) inferred type { kind: SyntaxKind.MultiLineCommentTrivia; text: string; pos: -1; end: -1; hasTrailingNewLine: true; } */ any{SynthesizedComment{
				kind:               ast.KindMultiLineCommentTrivia,
				text:               "*\n * " + commentText.replace( /* TODO(TS-TO-GO) Expression RegularExpressionLiteral: /\n/g */ TODO, "\n * ") + "\n ",
				pos:                -1,
				end:                -1,
				hasTrailingNewLine: true,
			}})), modifierFlags)
			restoreFlags()
			context.enclosingDeclaration = oldEnclosingDecl
		}

		serializeInterface := func(symbol *ast.Symbol, symbolName string, modifierFlags ModifierFlags) {
			interfaceType := c.getDeclaredTypeOfClassOrInterface(symbol)
			localParams := c.getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol)
			typeParamDecls := core.Map(localParams, func(p TypeParameter) TypeParameterDeclaration {
				return typeParameterToDeclaration(p, context)
			})
			baseTypes := c.getBaseTypes(interfaceType)
			var baseType *Type
			if length(baseTypes) != 0 {
				baseType = c.getIntersectionType(baseTypes)
			} else {
				baseType = nil
			}
			members := flatMap(c.getPropertiesOfType(interfaceType), func(p *ast.Symbol) [] /* TODO(TS-TO-GO) inferred type TypeElement | TypeElement */ any {
				return serializePropertySymbolForInterface(p, baseType)
			})
			callSignatures := serializeSignatures(SignatureKindCall, interfaceType, baseType, ast.KindCallSignature)                /* as CallSignatureDeclaration[] */
			constructSignatures := serializeSignatures(SignatureKindConstruct, interfaceType, baseType, ast.KindConstructSignature) /* as ConstructSignatureDeclaration[] */
			indexSignatures := serializeIndexSignatures(interfaceType, baseType)

			var heritageClauses *[]HeritageClause
			if length(baseTypes) == 0 {
				heritageClauses = nil
			} else {
				heritageClauses = []HeritageClause{factory.createHeritageClause(ast.KindExtendsKeyword, mapDefined(baseTypes, func(b BaseType) *ExpressionWithTypeArguments {
					return trySerializeAsTypeReference(b, ast.SymbolFlagsValue)
				}))}
			}
			addResult(factory.createInterfaceDeclaration(nil, getInternalSymbolName(symbol, symbolName), typeParamDecls, heritageClauses, []TypeElement{ /* TODO(TS-TO-GO) Expression SpreadElement: ...indexSignatures */ /* TODO(TS-TO-GO) Expression SpreadElement: ...constructSignatures */ /* TODO(TS-TO-GO) Expression SpreadElement: ...callSignatures */ /* TODO(TS-TO-GO) Expression SpreadElement: ...members */ }), modifierFlags)
		}

		getNamespaceMembersForSerialization := func(symbol *ast.Symbol) []*ast.Symbol {
			exports := arrayFrom(c.getExportsOfSymbol(symbol).values())
			merged := c.getMergedSymbol(symbol)
			if merged != symbol {
				membersSet := NewSet(exports)
				for _, exported := range c.getExportsOfSymbol(merged).values() {
					if c.getSymbolFlags(c.resolveSymbol(exported))&ast.SymbolFlagsValue == 0 {
						membersSet.add(exported)
					}
				}
				exports = arrayFrom(membersSet)
			}
			return core.Filter(exports, func(m *ast.Symbol) bool {
				return isNamespaceMember(m) && isIdentifierText(m.EscapedName /* as string */, ScriptTargetESNext)
			})
		}

		isTypeOnlyNamespace := func(symbol *ast.Symbol) bool {
			return core.Every(getNamespaceMembersForSerialization(symbol), func(m *ast.Symbol) bool {
				return c.getSymbolFlags(c.resolveSymbol(m))&ast.SymbolFlagsValue == 0
			})
		}

		serializeModule := func(symbol *ast.Symbol, symbolName string, modifierFlags ModifierFlags) {
			members := getNamespaceMembersForSerialization(symbol)
			// Split NS members up by declaration - members whose parent symbol is the ns symbol vs those whose is not (but were added in later via merging)
			locationMap := arrayToMultiMap(members, func(m *ast.Symbol) /* TODO(TS-TO-GO) inferred type "real" | "merged" */ any {
				if m.Parent != nil && m.Parent == symbol {
					return "real"
				} else {
					return "merged"
				}
			})
			realMembers := locationMap.get("real") || emptyArray
			mergedMembers := locationMap.get("merged") || emptyArray
			// TODO: `suppressNewPrivateContext` is questionable -we need to simply be emitting privates in whatever scope they were declared in, rather
			// than whatever scope we traverse to them in. That's a bit of a complex rewrite, since we're not _actually_ tracking privates at all in advance,
			// so we don't even have placeholders to fill in.
			if length(realMembers) != 0 {
				localName := getInternalSymbolName(symbol, symbolName)
				serializeAsNamespaceDeclaration(realMembers, localName, modifierFlags, symbol.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsAssignment) != 0)
			}
			if length(mergedMembers) != 0 {
				containingFile := getSourceFileOfNode(context.enclosingDeclaration)
				localName := getInternalSymbolName(symbol, symbolName)
				nsBody := factory.createModuleBlock([]ExportDeclaration{factory.createExportDeclaration(nil, false, factory.createNamedExports(mapDefined(core.Filter(mergedMembers, func(n *ast.Symbol) bool {
					return n.EscapedName != InternalSymbolNameExportEquals
				}), func(s *ast.Symbol) *ExportSpecifier {
					name := unescapeLeadingUnderscores(s.EscapedName)
					localName := getInternalSymbolName(s, name)
					aliasDecl := s.Declarations && c.getDeclarationOfAliasSymbol(s)
					if containingFile != nil && (ifElse(aliasDecl != nil, containingFile != getSourceFileOfNode(aliasDecl), !core.Some(s.Declarations, func(d Declaration) bool {
						return getSourceFileOfNode(d) == containingFile
					}))) {
						context.tracker. /* ? */ reportNonlocalAugmentation(containingFile, symbol, s)
						return nil
					}
					target := aliasDecl && c.getTargetOfAliasDeclaration(aliasDecl, true /*dontRecursivelyResolve*/)
					includePrivateSymbol(target || s)
					var targetName string
					if target != nil {
						targetName = getInternalSymbolName(target, unescapeLeadingUnderscores(target.EscapedName))
					} else {
						targetName = localName
					}
					return factory.createExportSpecifier(false, ifElse(name == targetName, nil, targetName), name)
				})))})
				addResult(factory.createModuleDeclaration(nil, factory.createIdentifier(localName), nsBody, ast.NodeFlagsNamespace), ast.ModifierFlagsNone)
			}
		}

		serializeEnum := func(symbol *ast.Symbol, symbolName string, modifierFlags ModifierFlags) {
			addResult(factory.createEnumDeclaration(factory.createModifiersFromModifierFlags(ifElse(c.isConstEnumSymbol(symbol), ast.ModifierFlagsConst, 0)), getInternalSymbolName(symbol, symbolName), core.Map(core.Filter(c.getPropertiesOfType(c.getTypeOfSymbol(symbol)), func(p *ast.Symbol) bool {
				return p.Flags&ast.SymbolFlagsEnumMember != 0
			}), func(p *ast.Symbol) EnumMember {
				// TODO: Handle computed names
				// I hate that to get the initialized value we need to walk back to the declarations here; but there's no
				// other way to get the possible const value of an enum member that I'm aware of, as the value is cached
				// _on the declaration_, not on the declaration's symbol...
				var initializedValue * /* TODO(TS-TO-GO) inferred type string | number */ any
				if p.Declarations != nil && p.Declarations[0] && isEnumMember(p.Declarations[0]) {
					initializedValue = c.getConstantValue(p.Declarations[0])
				} else {
					initializedValue = nil
				}
				return factory.createEnumMember(unescapeLeadingUnderscores(p.EscapedName), ifElse(initializedValue == nil, nil, ifElse( /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof initializedValue */ TODO == "string", factory.createStringLiteral(initializedValue), factory.createNumericLiteral(initializedValue))))
			})), modifierFlags)
		}

		serializeAsFunctionNamespaceMerge := func(t *Type, symbol *ast.Symbol, localName string, modifierFlags ModifierFlags) {
			signatures := c.getSignaturesOfType(t, SignatureKindCall)
			for _, sig := range signatures {
				// Each overload becomes a separate function declaration, in order
				decl := signatureToSignatureDeclarationHelper(sig, ast.KindFunctionDeclaration, context, &SignatureToSignatureDeclarationOptions{
					name: factory.createIdentifier(localName),
				}).AsFunctionDeclaration()
				addResult(setTextRange(context, decl, getSignatureTextRangeLocation(sig)), modifierFlags)
			}
			// Module symbol emit will take care of module-y members, provided it has exports
			if !(symbol.Flags&(ast.SymbolFlagsValueModule|ast.SymbolFlagsNamespaceModule) != 0 && symbol.Exports != nil && symbol.Exports.size != 0) {
				props := core.Filter(c.getPropertiesOfType(t), isNamespaceMember)
				serializeAsNamespaceDeclaration(props, localName, modifierFlags, true /*suppressNewPrivateContext*/)
			}
		}

		getSignatureTextRangeLocation := func(signature Signature) * /* TODO(TS-TO-GO) inferred type BinaryExpression | SignatureDeclaration | VariableDeclarationList | CatchClause | JSDocSignature */ any {
			if signature.declaration != nil && signature.declaration.Parent {
				if isBinaryExpression(signature.declaration.Parent) && getAssignmentDeclarationKind(signature.declaration.Parent) == AssignmentDeclarationKindProperty {
					return signature.declaration.Parent
				}
				// for expressions assigned to `var`s, use the `var` as the text range
				if isVariableDeclaration(signature.declaration.Parent) && signature.declaration.Parent.Parent {
					return signature.declaration.Parent.Parent
				}
			}
			return signature.declaration
		}

		serializeAsNamespaceDeclaration := func(props []*ast.Symbol, localName string, modifierFlags ModifierFlags, suppressNewPrivateContext bool) {
			if length(props) != 0 {
				localVsRemoteMap := arrayToMultiMap(props, func(p *ast.Symbol) /* TODO(TS-TO-GO) inferred type "local" | "remote" */ any {
					if length(p.Declarations) == 0 || core.Some(p.Declarations, func(d Declaration) bool {
						return getSourceFileOfNode(d) == getSourceFileOfNode(context.enclosingDeclaration)
					}) {
						return "local"
					} else {
						return "remote"
					}
				})
				localProps := localVsRemoteMap.get("local") || emptyArray
				// handle remote props first - we need to make an `import` declaration that points at the module containing each remote
				// prop in the outermost scope (TODO: a namespace within a namespace would need to be appropriately handled by this)
				// Example:
				// import Foo_1 = require("./exporter");
				// export namespace ns {
				//     import Foo = Foo_1.Foo;
				//     export { Foo };
				//     export const c: number;
				// }
				// This is needed because in JS, statements like `const x = require("./f")` support both type and value lookup, even if they're
				// normally just value lookup (so it functions kinda like an alias even when it's not an alias)
				// _Usually_, we'll simply print the top-level as an alias instead of a `var` in such situations, however is is theoretically
				// possible to encounter a situation where a type has members from both the current file and other files - in those situations,
				// emit akin to the above would be needed.

				// Add a namespace
				// Create namespace as non-synthetic so it is usable as an enclosing declaration
				fakespace := parseNodeFactory.createModuleDeclaration(nil, factory.createIdentifier(localName), factory.createModuleBlock([]never{}), ast.NodeFlagsNamespace)
				setParent(fakespace, enclosingDeclaration /* as SourceFile | NamespaceDeclaration */)
				fakespace.Locals = createSymbolTable(props)
				fakespace.Symbol = props[0].Parent

				oldResults := results
				results = []never{}
				oldAddingDeclare := addingDeclare
				addingDeclare = false
				subcontext := map[any]any{ /* TODO(TS-TO-GO): was object literal */
					/* TODO(TS-TO-GO) Node SpreadAssignment: ...context */
					"enclosingDeclaration": fakespace,
				}
				oldContext := context
				context = subcontext
				// TODO: implement handling for the localVsRemoteMap.get("remote") - should be difficult to trigger (see comment above), as only interesting cross-file js merges should make this possible
				visitSymbolTable(createSymbolTable(localProps), suppressNewPrivateContext, true /*propertyAsAlias*/)
				context = oldContext
				addingDeclare = oldAddingDeclare
				declarations := results
				results = oldResults
				// replace namespace with synthetic version
				defaultReplaced := core.Map(declarations, func(d Statement) Statement {
					if isExportAssignment(d) && !d.IsExportEquals && isIdentifier(d.Expression) {
						return factory.createExportDeclaration(nil, false, factory.createNamedExports([]ExportSpecifier{factory.createExportSpecifier(false, d.Expression, factory.createIdentifier(InternalSymbolNameDefault))}))
					} else {
						return d
					}
				})
				var exportModifierStripped []Statement
				if core.Every(defaultReplaced, func(d Statement) bool {
					return hasSyntacticModifier(d, ast.ModifierFlagsExport)
				}) {
					exportModifierStripped = core.Map(defaultReplaced /* as Extract<HasModifiers, Statement>[] */, removeExportModifier)
				} else {
					exportModifierStripped = defaultReplaced
				}
				fakespace = factory.updateModuleDeclaration(fakespace, fakespace.Modifiers, fakespace.Name, factory.createModuleBlock(exportModifierStripped))
				addResult(fakespace, modifierFlags)
				// namespaces can never be default exported
			}
		}

		isNamespaceMember := func(p *ast.Symbol) bool {
			return p.Flags&(ast.SymbolFlagsType|ast.SymbolFlagsNamespace|ast.SymbolFlagsAlias) != 0 || !(p.Flags&ast.SymbolFlagsPrototype != 0 || p.EscapedName == "prototype" || p.ValueDeclaration != nil && isStatic(p.ValueDeclaration) && isClassLike(p.ValueDeclaration.Parent))
		}

		sanitizeJSDocImplements := func(clauses []ExpressionWithTypeArguments) *[]ExpressionWithTypeArguments {
			result := mapDefined(clauses, func(e ExpressionWithTypeArguments) *ExpressionWithTypeArguments {
				oldEnclosing := context.enclosingDeclaration
				context.enclosingDeclaration = e
				expr := e.Expression
				if isEntityNameExpression(expr) {
					if isIdentifier(expr) && idText(expr) == "" {
						return cleanup(nil)
						// Empty heritage clause, should be an error, but prefer emitting no heritage clauses to reemitting the empty one
					}
					var introducesError bool
					( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: { introducesError, node: expr } = trackExistingEntityName(expr, context) */ TODO)
					if introducesError {
						return cleanup(nil)
					}
				}
				return cleanup(factory.createExpressionWithTypeArguments(expr, core.Map(e.TypeArguments, func(a TypeNode) TypeNode {
					return tryReuseExistingNonParameterTypeNode(context, a, getTypeFromTypeNode(context, a)) || typeToTypeNodeHelper(getTypeFromTypeNode(context, a), context)
				})))

				cleanup := func(result T) T {
					context.enclosingDeclaration = oldEnclosing
					return result
				}

			})
			if result.length == clauses.length {
				return result
			}
			return nil
		}

		serializeAsClass := func(symbol *ast.Symbol, localName string, modifierFlags ModifierFlags) {
			originalDecl := symbol.Declarations. /* ? */ find(isClassLike)
			oldEnclosing := context.enclosingDeclaration
			context.enclosingDeclaration = originalDecl || oldEnclosing
			localParams := c.getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol)
			typeParamDecls := core.Map(localParams, func(p TypeParameter) TypeParameterDeclaration {
				return typeParameterToDeclaration(p, context)
			})
			classType := c.getTypeWithThisArgument(c.getDeclaredTypeOfClassOrInterface(symbol)).AsInterfaceType()
			baseTypes := c.getBaseTypes(classType)
			originalImplements := originalDecl && getEffectiveImplementsTypeNodes(originalDecl)
			implementsExpressions := originalImplements && sanitizeJSDocImplements(originalImplements) || mapDefined(c.getImplementsTypes(classType), serializeImplementedType)
			staticType := c.getTypeOfSymbol(symbol)
			isClass := staticType.symbol. /* ? */ ValueDeclaration != nil && isClassLike(staticType.symbol.ValueDeclaration)
			var staticBaseType *Type
			if isClass {
				staticBaseType = c.getBaseConstructorTypeOfClass(staticType.AsInterfaceType())
			} else {
				staticBaseType = c.anyType
			}
			heritageClauses := []HeritageClause{ /* TODO(TS-TO-GO) Expression SpreadElement: ...!length(baseTypes) ? [] : [factory.createHeritageClause(SyntaxKind.ExtendsKeyword, map(baseTypes, b => serializeBaseType(b, staticBaseType, localName)))] */ /* TODO(TS-TO-GO) Expression SpreadElement: ...!length(implementsExpressions) ? [] : [factory.createHeritageClause(SyntaxKind.ImplementsKeyword, implementsExpressions)] */ }
			symbolProps := c.getNonInheritedProperties(classType, baseTypes, c.getPropertiesOfType(classType))
			publicSymbolProps := core.Filter(symbolProps, func(s *ast.Symbol) bool {
				// `valueDeclaration` could be undefined if inherited from
				// a union/intersection base type, but inherited properties
				// don't matter here.
				valueDecl := s.ValueDeclaration
				return valueDecl != nil && !(isNamedDeclaration(valueDecl) && isPrivateIdentifier(valueDecl.Name))
			})
			hasPrivateIdentifier := core.Some(symbolProps, func(s *ast.Symbol) bool {
				// `valueDeclaration` could be undefined if inherited from
				// a union/intersection base type, but inherited properties
				// don't matter here.
				valueDecl := s.ValueDeclaration
				return valueDecl != nil && isNamedDeclaration(valueDecl) && isPrivateIdentifier(valueDecl.Name)
			})
			// Boil down all private properties into a single one.
			var privateProperties []PropertyDeclaration
			if hasPrivateIdentifier {
				privateProperties = []PropertyDeclaration{factory.createPropertyDeclaration(nil, factory.createPrivateIdentifier("#private"), nil, nil, nil)}
			} else {
				privateProperties = emptyArray
			}
			publicProperties := flatMap(publicSymbolProps, func(p *ast.Symbol) [] /* TODO(TS-TO-GO) inferred type ClassElement | AccessorDeclaration | (ClassElement | AccessorDeclaration) */ any {
				return serializePropertySymbolForClass(p, false /*isStatic*/, baseTypes[0])
			})
			// Consider static members empty if symbol also has function or module meaning - function namespacey emit will handle statics
			staticMembers := flatMap(core.Filter(c.getPropertiesOfType(staticType), func(p *ast.Symbol) bool {
				return p.Flags&ast.SymbolFlagsPrototype == 0 && p.EscapedName != "prototype" && !isNamespaceMember(p)
			}), func(p *ast.Symbol) [] /* TODO(TS-TO-GO) inferred type ClassElement | AccessorDeclaration | (ClassElement | AccessorDeclaration) */ any {
				return serializePropertySymbolForClass(p, true /*isStatic*/, staticBaseType)
			})
			// When we encounter an `X.prototype.y` assignment in a JS file, we bind `X` as a class regardless as to whether
			// the value is ever initialized with a class or function-like value. For cases where `X` could never be
			// created via `new`, we will inject a `private constructor()` declaration to indicate it is not createable.
			isNonConstructableClassLikeInJsFile := !isClass && symbol.ValueDeclaration != nil && isInJSFile(symbol.ValueDeclaration) && !core.Some(c.getSignaturesOfType(staticType, SignatureKindConstruct))
			var constructors []ConstructorDeclaration
			if isNonConstructableClassLikeInJsFile {
				constructors = []ConstructorDeclaration{factory.createConstructorDeclaration(factory.createModifiersFromModifierFlags(ast.ModifierFlagsPrivate), []never{}, nil /*body*/)}
			} else {
				constructors = serializeSignatures(SignatureKindConstruct, staticType, staticBaseType, ast.KindConstructor) /* as ConstructorDeclaration[] */
			}
			indexSignatures := serializeIndexSignatures(classType, baseTypes[0])
			context.enclosingDeclaration = oldEnclosing
			addResult(setTextRange(context, factory.createClassDeclaration(nil, localName, typeParamDecls, heritageClauses, []ClassElement{ /* TODO(TS-TO-GO) Expression SpreadElement: ...indexSignatures */ /* TODO(TS-TO-GO) Expression SpreadElement: ...staticMembers */ /* TODO(TS-TO-GO) Expression SpreadElement: ...constructors */ /* TODO(TS-TO-GO) Expression SpreadElement: ...publicProperties */ /* TODO(TS-TO-GO) Expression SpreadElement: ...privateProperties */ }), symbol.Declarations && core.Filter(symbol.Declarations, func(d Declaration) bool {
				return isClassDeclaration(d) || isClassExpression(d)
			})[0]), modifierFlags)
		}

		getSomeTargetNameFromDeclarations := func(declarations *[]Declaration) *string {
			return firstDefined(declarations, func(d Declaration) *string {
				if isImportSpecifier(d) || isExportSpecifier(d) {
					return moduleExportNameTextUnescaped(d.PropertyName || d.Name)
				}
				if isBinaryExpression(d) || isExportAssignment(d) {
					var expression Expression
					if isExportAssignment(d) {
						expression = d.Expression
					} else {
						expression = d.Right
					}
					if isPropertyAccessExpression(expression) {
						return idText(expression.Name)
					}
				}
				if c.isAliasSymbolDeclaration(d) {
					// This is... heuristic, at best. But it's probably better than always printing the name of the shorthand ambient module.
					name := getNameOfDeclaration(d)
					if name != nil && isIdentifier(name) {
						return idText(name)
					}
				}
				return nil
			})
		}

		serializeAsAlias := func(symbol *ast.Symbol, localName string, modifierFlags ModifierFlags) undefined {
			// synthesize an alias, eg `export { symbolName as Name }`
			// need to mark the alias `symbol` points at
			// as something we need to serialize as a private declaration as well
			node := c.getDeclarationOfAliasSymbol(symbol)
			if node == nil {
				return Debug.fail()
			}
			target := c.getMergedSymbol(c.getTargetOfAliasDeclaration(node, true /*dontRecursivelyResolve*/))
			if target == nil {
				return
			}
			// If `target` refers to a shorthand module symbol, the name we're trying to pull out isn;t recoverable from the target symbol
			// In such a scenario, we must fall back to looking for an alias declaration on `symbol` and pulling the target name from that
			verbatimTargetName := isShorthandAmbientModuleSymbol(target) && getSomeTargetNameFromDeclarations(symbol.Declarations) || unescapeLeadingUnderscores(target.EscapedName)
			if verbatimTargetName == InternalSymbolNameExportEquals && c.allowSyntheticDefaultImports {
				// target refers to an `export=` symbol that was hoisted into a synthetic default - rename here to match
				verbatimTargetName = InternalSymbolNameDefault
			}
			targetName := getInternalSymbolName(target, verbatimTargetName)
			includePrivateSymbol(target)
			// the target may be within the same scope - attempt to serialize it first
			switch node.Kind {
			case ast.KindBindingElement:
				if node.Parent. /* ? */ Parent. /* ? */ Kind == ast.KindVariableDeclaration {
					// const { SomeClass } = require('./lib');
					specifier := getSpecifierForModuleSymbol(target.Parent || target, context)
					// './lib'
					TODO_IDENTIFIER := node.AsBindingElement()
					addResult(factory.createImportDeclaration(nil, factory.createImportClause(false, nil, factory.createNamedImports([]ImportSpecifier{factory.createImportSpecifier(false, ifElse(propertyName != nil && isIdentifier(propertyName), factory.createIdentifier(idText(propertyName)), nil), factory.createIdentifier(localName))})), factory.createStringLiteral(specifier), nil), ast.ModifierFlagsNone)
					break
				}
				// We don't know how to serialize this (nested?) binding element
				Debug.failBadSyntaxKind(node.Parent. /* ? */ Parent || node, "Unhandled binding element grandparent kind in declaration serialization")
			case ast.KindShorthandPropertyAssignment:
				if node.Parent. /* ? */ Parent. /* ? */ Kind == ast.KindBinaryExpression {
					// module.exports = { SomeClass }
					serializeExportSpecifier(unescapeLeadingUnderscores(symbol.EscapedName), targetName)
				}
			case ast.KindVariableDeclaration:
				// commonjs require: const x = require('y')
				if isPropertyAccessExpression(node.AsVariableDeclaration().Initializer) {
					// const x = require('y').z
					initializer := node.AsVariableDeclaration().Initializer.AsPropertyAccessExpression()
					// require('y').z
					uniqueName := factory.createUniqueName(localName)
					// _x
					specifier := getSpecifierForModuleSymbol(target.Parent || target, context)
					// import _x = require('y');
					addResult(factory.createImportEqualsDeclaration(nil, false, uniqueName, factory.createExternalModuleReference(factory.createStringLiteral(specifier))), ast.ModifierFlagsNone)
					// import x = _x.z
					addResult(factory.createImportEqualsDeclaration(nil, false, factory.createIdentifier(localName), factory.createQualifiedName(uniqueName, initializer.Name.AsIdentifier())), modifierFlags)
					break
				}
				// else fall through and treat commonjs require just like import=
				fallthrough
			case ast.KindImportEqualsDeclaration:
				// This _specifically_ only exists to handle json declarations - where we make aliases, but since
				// we emit no declarations for the json document, must not refer to it in the declarations
				if target.EscapedName == InternalSymbolNameExportEquals && core.Some(target.Declarations, func(d Declaration) bool {
					return isSourceFile(d) && isJsonSourceFile(d)
				}) {
					serializeMaybeAliasAssignment(symbol)
					break
				}
				// Could be a local `import localName = ns.member` or
				// an external `import localName = require("whatever")`
				isLocalImport := target.Flags&ast.SymbolFlagsValueModule == 0 && !isVariableDeclaration(node)
				addResult(factory.createImportEqualsDeclaration(nil, false, factory.createIdentifier(localName), ifElse(isLocalImport, symbolToName(target, context, ast.SymbolFlagsAll, false /*expectsIdentifier*/), factory.createExternalModuleReference(factory.createStringLiteral(getSpecifierForModuleSymbol(target, context))))), ifElse(isLocalImport, modifierFlags, ast.ModifierFlagsNone))
			case ast.KindNamespaceExportDeclaration:
				// export as namespace foo
				// TODO: Not part of a file's local or export symbol tables
				// Is bound into file.symbol.globalExports instead, which we don't currently traverse
				addResult(factory.createNamespaceExportDeclaration(idText(node.AsNamespaceExportDeclaration().Name)), ast.ModifierFlagsNone)
			case ast.KindImportClause:
				generatedSpecifier := getSpecifierForModuleSymbol(target.Parent || target, context)
				// generate specifier (even though we're reusing and existing one) for ambient module reference include side effects
				var specifier Expression
				if context.bundled {
					specifier = factory.createStringLiteral(generatedSpecifier)
				} else {
					specifier = node.AsImportClause().Parent.ModuleSpecifier
				}
				var attributes *ImportAttributes
				if isImportDeclaration(node.Parent) {
					attributes = node.Parent.Attributes
				} else {
					attributes = nil
				}
				isTypeOnly := isJSDocImportTag(node.AsImportClause().Parent)
				addResult(factory.createImportDeclaration(nil, factory.createImportClause(isTypeOnly, factory.createIdentifier(localName), nil /*namedBindings*/), specifier, attributes), ast.ModifierFlagsNone)
			case ast.KindNamespaceImport:
				generatedSpecifier := getSpecifierForModuleSymbol(target.Parent || target, context)
				// generate specifier (even though we're reusing and existing one) for ambient module reference include side effects
				var specifier Expression
				if context.bundled {
					specifier = factory.createStringLiteral(generatedSpecifier)
				} else {
					specifier = node.AsNamespaceImport().Parent.Parent.ModuleSpecifier
				}
				isTypeOnly := isJSDocImportTag(node.AsNamespaceImport().Parent.Parent)
				addResult(factory.createImportDeclaration(nil, factory.createImportClause(isTypeOnly, nil /*name*/, factory.createNamespaceImport(factory.createIdentifier(localName))), specifier, node.AsImportClause().Parent.Attributes), ast.ModifierFlagsNone)
			case ast.KindNamespaceExport:
				addResult(factory.createExportDeclaration(nil, false, factory.createNamespaceExport(factory.createIdentifier(localName)), factory.createStringLiteral(getSpecifierForModuleSymbol(target, context))), ast.ModifierFlagsNone)
			case ast.KindImportSpecifier:
				generatedSpecifier := getSpecifierForModuleSymbol(target.Parent || target, context)
				// generate specifier (even though we're reusing and existing one) for ambient module reference include side effects
				var specifier Expression
				if context.bundled {
					specifier = factory.createStringLiteral(generatedSpecifier)
				} else {
					specifier = node.AsImportSpecifier().Parent.Parent.Parent.ModuleSpecifier
				}
				isTypeOnly := isJSDocImportTag(node.AsImportSpecifier().Parent.Parent.Parent)
				addResult(factory.createImportDeclaration(nil, factory.createImportClause(isTypeOnly, nil, factory.createNamedImports([]ImportSpecifier{factory.createImportSpecifier(false, ifElse(localName != verbatimTargetName, factory.createIdentifier(verbatimTargetName), nil), factory.createIdentifier(localName))})), specifier, node.AsImportSpecifier().Parent.Parent.Parent.Attributes), ast.ModifierFlagsNone)
			case ast.KindExportSpecifier:
				// does not use localName because the symbol name in this case refers to the name in the exports table,
				// which we must exactly preserve
				specifier := node.Parent.Parent.AsExportDeclaration().ModuleSpecifier
				if specifier != nil {
					propertyName := node.AsExportSpecifier().PropertyName
					if propertyName != nil && moduleExportNameIsDefault(propertyName) {
						verbatimTargetName = InternalSymbolNameDefault
					}
				}
				// targetName is only used when the target is local, as otherwise the target is an alias that points at
				// another file
				serializeExportSpecifier(unescapeLeadingUnderscores(symbol.EscapedName), ifElse(specifier != nil, verbatimTargetName, targetName), ifElse(specifier != nil && isStringLiteralLike(specifier), factory.createStringLiteral(specifier.Text), nil))
			case ast.KindExportAssignment:
				serializeMaybeAliasAssignment(symbol)
			case ast.KindBinaryExpression,
				ast.KindPropertyAccessExpression,
				ast.KindElementAccessExpression:
				// Could be best encoded as though an export specifier or as though an export assignment
				// If name is default or export=, do an export assignment
				// Otherwise do an export specifier
				if symbol.EscapedName == InternalSymbolNameDefault || symbol.EscapedName == InternalSymbolNameExportEquals {
					serializeMaybeAliasAssignment(symbol)
				} else {
					serializeExportSpecifier(localName, targetName)
				}
			default:
				return Debug.failBadSyntaxKind(node, "Unhandled alias declaration kind in symbol serializer!")
			}
		}

		serializeExportSpecifier := func(localName string, targetName string, specifier Expression) {
			addResult(factory.createExportDeclaration(nil, false, factory.createNamedExports([]ExportSpecifier{factory.createExportSpecifier(false, ifElse(localName != targetName, targetName, nil), localName)}), specifier), ast.ModifierFlagsNone)
		}

		/**
		 * Returns `true` if an export assignment or declaration was produced for the symbol
		 */

		serializeMaybeAliasAssignment := func(symbol *ast.Symbol) bool {
			if symbol.Flags&ast.SymbolFlagsPrototype != 0 {
				return false
			}
			name := unescapeLeadingUnderscores(symbol.EscapedName)
			isExportEquals := name == InternalSymbolNameExportEquals
			isDefault := name == InternalSymbolNameDefault
			isExportAssignmentCompatibleSymbolName := isExportEquals || isDefault
			// synthesize export = ref
			// ref should refer to either be a locally scoped symbol which we need to emit, or
			// a reference to another namespace/module which we may need to emit an `import` statement for
			aliasDecl := symbol.Declarations && c.getDeclarationOfAliasSymbol(symbol)
			// serialize what the alias points to, preserve the declaration's initializer
			target := aliasDecl && c.getTargetOfAliasDeclaration(aliasDecl, true /*dontRecursivelyResolve*/)
			// If the target resolves and resolves to a thing defined in this file, emit as an alias, otherwise emit as a const
			if target != nil && length(target.Declarations) != 0 && core.Some(target.Declarations, func(d Declaration) bool {
				return getSourceFileOfNode(d) == getSourceFileOfNode(enclosingDeclaration)
			}) {
				// In case `target` refers to a namespace member, look at the declaration and serialize the leftmost symbol in it
				// eg, `namespace A { export class B {} }; exports = A.B;`
				// Technically, this is all that's required in the case where the assignment is an entity name expression
				expr := aliasDecl && (ifElse((isExportAssignment(aliasDecl) || isBinaryExpression(aliasDecl)), getExportAssignmentExpression(aliasDecl), getPropertyAssignmentAliasLikeExpression(aliasDecl /* as ShorthandPropertyAssignment | PropertyAssignment | PropertyAccessExpression */)))
				var first *Identifier
				if expr && isEntityNameExpression(expr) {
					first = c.getFirstNonModuleExportsIdentifier(expr)
				} else {
					first = nil
				}
				referenced := first && c.resolveEntityName(first, ast.SymbolFlagsAll, true /*ignoreErrors*/, true /*dontResolveAlias*/, enclosingDeclaration)
				if referenced != nil || target {
					includePrivateSymbol(referenced || target)
				}

				// We disable the context's symbol tracker for the duration of this name serialization
				// as, by virtue of being here, the name is required to print something, and we don't want to
				// issue a visibility error on it. Only anonymous classes that an alias points at _would_ issue
				// a visibility error here (as they're not visible within any scope), but we want to hoist them
				// into the containing scope anyway, so we want to skip the visibility checks.
				prevDisableTrackSymbol := context.tracker.disableTrackSymbol
				context.tracker.disableTrackSymbol = true
				if isExportAssignmentCompatibleSymbolName {
					results.push(factory.createExportAssignment(nil, isExportEquals, symbolToExpression(target, context, ast.SymbolFlagsAll)))
				} else {
					if first == expr && first {
						// serialize as `export {target as name}`
						serializeExportSpecifier(name, idText(first))
					} else if expr && isClassExpression(expr) {
						serializeExportSpecifier(name, getInternalSymbolName(target, symbolName(target)))
					} else {
						// serialize as `import _Ref = t.arg.et; export { _Ref as name }`
						varName := getUnusedName(name, symbol)
						addResult(factory.createImportEqualsDeclaration(nil, false, factory.createIdentifier(varName), symbolToName(target, context, ast.SymbolFlagsAll, false /*expectsIdentifier*/)), ast.ModifierFlagsNone)
						serializeExportSpecifier(name, varName)
					}
				}
				context.tracker.disableTrackSymbol = prevDisableTrackSymbol
				return true
			} else {
				// serialize as an anonymous property declaration
				varName := getUnusedName(name, symbol)
				// We have to use `getWidenedType` here since the object within a json file is unwidened within the file
				// (Unwidened types can only exist in expression contexts and should never be serialized)
				typeToSerialize := c.getWidenedType(c.getTypeOfSymbol(c.getMergedSymbol(symbol)))
				if isTypeRepresentableAsFunctionNamespaceMerge(typeToSerialize, symbol) {
					// If there are no index signatures and `typeToSerialize` is an object type, emit as a namespace instead of a const
					serializeAsFunctionNamespaceMerge(typeToSerialize, symbol, varName, ifElse(isExportAssignmentCompatibleSymbolName, ast.ModifierFlagsNone, ast.ModifierFlagsExport))
				} else {
					var flags /* TODO(TS-TO-GO) inferred type NodeFlags.Let | NodeFlags.Const */ any
					if context.enclosingDeclaration. /* ? */ kind == ast.KindModuleDeclaration && (symbol.Flags&ast.SymbolFlagsAccessor == 0 || symbol.Flags&ast.SymbolFlagsSetAccessor != 0) {
						flags = ast.NodeFlagsLet
					} else {
						flags = ast.NodeFlagsConst
					}
					statement := factory.createVariableStatement(nil, factory.createVariableDeclarationList([]VariableDeclaration{factory.createVariableDeclaration(varName, nil /*exclamationToken*/, serializeTypeForDeclaration(context, nil /*declaration*/, typeToSerialize, symbol))}, flags))
					// Inlined JSON types exported with [module.]exports= will already emit an export=, so should use `declare`.
					// Otherwise, the type itself should be exported.
					addResult(statement, ifElse(target != nil && target.Flags&ast.SymbolFlagsProperty != 0 && target.EscapedName == InternalSymbolNameExportEquals, ast.ModifierFlagsAmbient, ifElse(name == varName, ast.ModifierFlagsExport, ast.ModifierFlagsNone)))
				}
				if isExportAssignmentCompatibleSymbolName {
					results.push(factory.createExportAssignment(nil, isExportEquals, factory.createIdentifier(varName)))
					return true
				} else if name != varName {
					serializeExportSpecifier(name, varName)
					return true
				}
				return false
			}
		}

		isTypeRepresentableAsFunctionNamespaceMerge := func(typeToSerialize *Type, hostSymbol *ast.Symbol) /* TODO(TS-TO-GO) inferred type boolean | 0 */ any {
			// Only object types which are not constructable, or indexable, whose members all come from the
			// context source file, and whose property names are all valid identifiers and not late-bound, _and_
			// whose input is not type annotated (if the input symbol has an annotation we can reuse, we should prefer it)
			ctxSrc := getSourceFileOfNode(context.enclosingDeclaration)
			return getObjectFlags(typeToSerialize)&(ObjectFlagsAnonymous|ObjectFlagsMapped) && !core.Some(typeToSerialize.symbol. /* ? */ Declarations, isTypeNode) && length(c.getIndexInfosOfType(typeToSerialize)) == 0 && !c.isClassInstanceSide(typeToSerialize) && length(core.Filter(c.getPropertiesOfType(typeToSerialize), isNamespaceMember)) != 0 || length(c.getSignaturesOfType(typeToSerialize, SignatureKindCall)) != 0 && length(c.getSignaturesOfType(typeToSerialize, SignatureKindConstruct)) == 0 && getDeclarationWithTypeAnnotation(hostSymbol, enclosingDeclaration) == nil && !(typeToSerialize.symbol && core.Some(typeToSerialize.symbol.Declarations, func(d Declaration) bool {
				return getSourceFileOfNode(d) != ctxSrc
			})) && !core.Some(c.getPropertiesOfType(typeToSerialize), func(p *ast.Symbol) bool {
				return c.isLateBoundName(p.EscapedName)
			}) && !core.Some(c.getPropertiesOfType(typeToSerialize), func(p *ast.Symbol) bool {
				return core.Some(p.Declarations, func(d Declaration) bool {
					return getSourceFileOfNode(d) != ctxSrc
				})
			}) && core.Every(c.getPropertiesOfType(typeToSerialize), func(p *ast.Symbol) bool {
				if !isIdentifierText(symbolName(p), c.languageVersion) {
					return false
				}
				if p.Flags&ast.SymbolFlagsAccessor == 0 {
					return true
				}
				return c.getNonMissingTypeOfSymbol(p) == c.getWriteTypeOfSymbol(p)
			})
		}

		/* OVERLOAD: function makeSerializePropertySymbol<T extends Node>( createProperty: ( modifiers: readonly Modifier[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined, ) => T, methodKind: SignatureDeclaration["kind"], useAccessors: true, ): (p: Symbol, isStatic: boolean, baseType: Type | undefined) => T | AccessorDeclaration | (T | AccessorDeclaration)[]; */
		/* OVERLOAD: function makeSerializePropertySymbol<T extends Node>( createProperty: ( modifiers: readonly Modifier[] | undefined, name: string | PropertyName, questionOrExclamationToken: QuestionToken | undefined, type: TypeNode | undefined, initializer: Expression | undefined, ) => T, methodKind: SignatureDeclaration["kind"], useAccessors: false, ): (p: Symbol, isStatic: boolean, baseType: Type | undefined) => T | T[]; */
		makeSerializePropertySymbol := func(createProperty func(modifiers *[]Modifier, name Union[string, PropertyName], questionOrExclamationToken *QuestionToken, t *TypeNode, initializer Expression) T, methodKind /* TODO(TS-TO-GO) TypeNode IndexedAccessType: SignatureDeclaration["kind"] */ any, useAccessors bool) func(p *ast.Symbol, isStatic bool, baseType *Type) Union[T, AccessorDeclaration, []Union[T, AccessorDeclaration]] {
			return func /* serializePropertySymbol */ (p *ast.Symbol, isStatic bool, baseType *Type) Union[T, AccessorDeclaration, []Union[T, AccessorDeclaration]] {
				modifierFlags := getDeclarationModifierFlagsFromSymbol(p)
				isPrivate := modifierFlags&ast.ModifierFlagsPrivate != 0
				if isStatic && (p.Flags&(ast.SymbolFlagsType|ast.SymbolFlagsNamespace|ast.SymbolFlagsAlias) != 0) {
					// Only value-only-meaning symbols can be correctly encoded as class statics, type/namespace/alias meaning symbols
					// need to be merged namespace members
					return []never{}
				}
				if p.Flags&ast.SymbolFlagsPrototype != 0 || p.EscapedName == "constructor" || (baseType != nil && c.getPropertyOfType(baseType, p.EscapedName) != nil && c.isReadonlySymbol(c.getPropertyOfType(baseType, p.EscapedName)) == c.isReadonlySymbol(p) && (p.Flags&ast.SymbolFlagsOptional) == (c.getPropertyOfType(baseType, p.EscapedName).Flags&ast.SymbolFlagsOptional) && c.isTypeIdenticalTo(c.getTypeOfSymbol(p), c.getTypeOfPropertyOfType(baseType, p.EscapedName))) {
					return []never{}
				}
				flag := (modifierFlags & ^ast.ModifierFlagsAsync) | (ifElse(isStatic, ast.ModifierFlagsStatic, 0))
				name := getPropertyNameNodeForSymbol(p, context)
				firstPropertyLikeDecl := p.Declarations. /* ? */ find(or(isPropertyDeclaration, isAccessor, isVariableDeclaration, isPropertySignature, isBinaryExpression, isPropertyAccessExpression))
				if p.Flags&ast.SymbolFlagsAccessor != 0 && useAccessors {
					var result []AccessorDeclaration = []never{}
					if p.Flags&ast.SymbolFlagsSetAccessor != 0 {
						setter := p.Declarations && forEach(p.Declarations, func(d Declaration) * /* TODO(TS-TO-GO) inferred type MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | PropertyAssignment | ShorthandPropertyAssignment | SpreadAssignment */ any {
							if d.Kind == ast.KindSetAccessor {
								return d.AsSetAccessorDeclaration()
							}
							if isCallExpression(d) && isBindableObjectDefinePropertyCall(d) {
								return forEach(d.Arguments[2].Properties, func(propDecl /* TODO(TS-TO-GO) inferred type MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | PropertyAssignment | ShorthandPropertyAssignment | SpreadAssignment */ any) * /* TODO(TS-TO-GO) inferred type MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | PropertyAssignment | ShorthandPropertyAssignment | SpreadAssignment */ any {
									id := getNameOfDeclaration(propDecl)
									if id != nil && isIdentifier(id) && idText(id) == "set" {
										return propDecl
									}
								})
							}
						})

						Debug.assert(setter != nil)
						var paramSymbol *ast.Symbol
						if isFunctionLikeDeclaration(setter) {
							paramSymbol = c.getSignatureFromDeclaration(setter).parameters[0]
						} else {
							paramSymbol = nil
						}

						result.push(setTextRange(context, factory.createSetAccessorDeclaration(factory.createModifiersFromModifierFlags(flag), name, []ParameterDeclaration{factory.createParameterDeclaration(nil, nil, ifElse(paramSymbol != nil, parameterToParameterDeclarationName(paramSymbol, getEffectiveParameterDeclaration(paramSymbol), context), "value"), nil, ifElse(isPrivate, nil, serializeTypeForDeclaration(context, nil /*declaration*/, c.getWriteTypeOfSymbol(p), p)))}, nil), p.Declarations. /* ? */ find(isSetAccessor) || firstPropertyLikeDecl))
					}
					if p.Flags&ast.SymbolFlagsGetAccessor != 0 {
						isPrivate := modifierFlags & ast.ModifierFlagsPrivate
						result.push(setTextRange(context, factory.createGetAccessorDeclaration(factory.createModifiersFromModifierFlags(flag), name, []never{}, ifElse(isPrivate != 0, nil, serializeTypeForDeclaration(context, nil /*declaration*/, c.getTypeOfSymbol(p), p)), nil), p.Declarations. /* ? */ find(isGetAccessor) || firstPropertyLikeDecl))
					}
					return result
				} else if p.Flags&(ast.SymbolFlagsProperty|ast.SymbolFlagsVariable|ast.SymbolFlagsAccessor) != 0 {
					return setTextRange(context, createProperty(factory.createModifiersFromModifierFlags((ifElse(c.isReadonlySymbol(p), ast.ModifierFlagsReadonly, 0))|flag), name, ifElse(p.Flags&ast.SymbolFlagsOptional != 0, factory.createToken(ast.KindQuestionToken), nil), ifElse(isPrivate, nil, serializeTypeForDeclaration(context, nil /*declaration*/, c.getWriteTypeOfSymbol(p), p)), nil), p.Declarations. /* ? */ find(or(isPropertyDeclaration, isVariableDeclaration)) || firstPropertyLikeDecl)
				}
				if p.Flags&(ast.SymbolFlagsMethod|ast.SymbolFlagsFunction) != 0 {
					t := c.getTypeOfSymbol(p)
					signatures := c.getSignaturesOfType(t, SignatureKindCall)
					if flag&ast.ModifierFlagsPrivate != 0 {
						return setTextRange(context, createProperty(factory.createModifiersFromModifierFlags((ifElse(c.isReadonlySymbol(p), ast.ModifierFlagsReadonly, 0))|flag), name, ifElse(p.Flags&ast.SymbolFlagsOptional != 0, factory.createToken(ast.KindQuestionToken), nil), nil, nil), p.Declarations. /* ? */ find(isFunctionLikeDeclaration) || signatures[0] && signatures[0].declaration || p.Declarations && p.Declarations[0])
					}

					results := []never{}
					for _, sig := range signatures {
						// Each overload becomes a separate method declaration, in order
						decl := signatureToSignatureDeclarationHelper(sig, methodKind, context, &SignatureToSignatureDeclarationOptions{
							name:          name,
							questionToken: ifElse(p.Flags&ast.SymbolFlagsOptional != 0, factory.createToken(ast.KindQuestionToken), nil),
							modifiers:     ifElse(flag != 0, factory.createModifiersFromModifierFlags(flag), nil),
						})
						var location * /* TODO(TS-TO-GO) inferred type SignatureDeclaration | JSDocSignature | PrototypePropertyAssignment */ any
						if sig.declaration != nil && isPrototypePropertyAssignment(sig.declaration.Parent) {
							location = sig.declaration.Parent
						} else {
							location = sig.declaration
						}
						results.push(setTextRange(context, decl, location))
					}
					return results /* as T[] */
				}
				// The `Constructor`'s symbol isn't in the class's properties lists, obviously, since it's a signature on the static
				return Debug.fail(__TEMPLATE__("Unhandled class member kind! ", p.__debugFlags || p.Flags))
			}
		}

		serializePropertySymbolForInterface := func(p *ast.Symbol, baseType *Type) [] /* TODO(TS-TO-GO) inferred type TypeElement | TypeElement */ any {
			return serializePropertySymbolForInterfaceWorker(p, false /*isStatic*/, baseType)
		}

		serializeSignatures := func(kind SignatureKind, input *Type, baseType *Type, outputKind /* TODO(TS-TO-GO) TypeNode IndexedAccessType: SignatureDeclaration["kind"] */ any) [] /* TODO(TS-TO-GO) inferred type (CallSignatureDeclaration | ConstructSignatureDeclaration | MethodSignature | IndexSignatureDeclaration | FunctionTypeNode | ConstructorTypeNode | JSDocFunctionType | FunctionDeclaration | MethodDeclaration | ConstructorDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | FunctionExpression | ArrowFunction) */ any {
			signatures := c.getSignaturesOfType(input, kind)
			if kind == SignatureKindConstruct {
				if baseType == nil && core.Every(signatures, func(s Signature) bool {
					return length(s.parameters) == 0
				}) {
					return []never{}
					// No base type, every constructor is empty - elide the extraneous `constructor()`
				}
				if baseType != nil {
					// If there is a base type, if every signature in the class is identical to a signature in the baseType, elide all the declarations
					baseSigs := c.getSignaturesOfType(baseType, SignatureKindConstruct)
					if length(baseSigs) == 0 && core.Every(signatures, func(s Signature) bool {
						return length(s.parameters) == 0
					}) {
						return []never{}
						// Base had no explicit signatures, if all our signatures are also implicit, return an empty list
					}
					if baseSigs.length == signatures.length {
						failed := false
						for i := 0; i < baseSigs.length; i++ {
							if c.compareSignaturesIdentical(signatures[i], baseSigs[i], false /*partialMatch*/, false /*ignoreThisTypes*/, true /*ignoreReturnTypes*/, c.compareTypesIdentical) == 0 {
								failed = true
								break
							}
						}
						if !failed {
							return []never{}
							// Every signature was identical - elide constructor list as it is inherited
						}
					}
				}
				var privateProtected ModifierFlags = 0
				for _, s := range signatures {
					if s.declaration != nil {
						privateProtected |= getSelectedEffectiveModifierFlags(s.declaration, ast.ModifierFlagsPrivate|ast.ModifierFlagsProtected)
					}
				}
				if privateProtected != 0 {
					return []ConstructorDeclaration{setTextRange(context, factory.createConstructorDeclaration(factory.createModifiersFromModifierFlags(privateProtected), []never{}, nil), signatures[0].declaration)}
				}
			}

			results := []never{}
			for _, sig := range signatures {
				// Each overload becomes a separate constructor declaration, in order
				decl := signatureToSignatureDeclarationHelper(sig, outputKind, context)
				results.push(setTextRange(context, decl, sig.declaration))
			}
			return results
		}

		serializeIndexSignatures := func(input *Type, baseType *Type) []IndexSignatureDeclaration {
			var results []IndexSignatureDeclaration = []never{}
			for _, info := range c.getIndexInfosOfType(input) {
				if baseType != nil {
					baseInfo := c.getIndexInfoOfType(baseType, info.keyType)
					if baseInfo != nil {
						if c.isTypeIdenticalTo(info.type_, baseInfo.type_) {
							continue
							// elide identical index signatures
						}
					}
				}
				results.push(indexInfoToIndexSignatureDeclarationHelper(info, context, nil /*typeNode*/))
			}
			return results
		}

		serializeBaseType := func(t *Type, staticType *Type, rootName string) ExpressionWithTypeArguments {
			ref := trySerializeAsTypeReference(t, ast.SymbolFlagsValue)
			if ref != nil {
				return ref
			}
			tempName := getUnusedName(__TEMPLATE__(rootName, "_base"))
			statement := factory.createVariableStatement(nil, factory.createVariableDeclarationList([]VariableDeclaration{factory.createVariableDeclaration(tempName, nil /*exclamationToken*/, typeToTypeNodeHelper(staticType, context))}, ast.NodeFlagsConst))
			addResult(statement, ast.ModifierFlagsNone)
			return factory.createExpressionWithTypeArguments(factory.createIdentifier(tempName), nil /*typeArguments*/)
		}

		trySerializeAsTypeReference := func(t *Type, flags SymbolFlags) *ExpressionWithTypeArguments {
			var typeArgs *[]TypeNode
			var reference Expression

			// We don't use `isValueSymbolAccessible` below. since that considers alternative containers (like modules)
			// which we can't write out in a syntactically valid way as an expression
			if t.AsTypeReference().target && c.isSymbolAccessibleByFlags(t.AsTypeReference().target.symbol, enclosingDeclaration, flags) {
				typeArgs = core.Map(c.getTypeArguments(t.AsTypeReference()), func(t *Type) TypeNode {
					return typeToTypeNodeHelper(t, context)
				})
				reference = symbolToExpression(t.AsTypeReference().target.symbol, context, ast.SymbolFlagsType)
			} else if t.symbol && c.isSymbolAccessibleByFlags(t.symbol, enclosingDeclaration, flags) {
				reference = symbolToExpression(t.symbol, context, ast.SymbolFlagsType)
			}
			if reference != nil {
				return factory.createExpressionWithTypeArguments(reference, typeArgs)
			}
		}

		serializeImplementedType := func(t *Type) *ExpressionWithTypeArguments {
			ref := trySerializeAsTypeReference(t, ast.SymbolFlagsType)
			if ref != nil {
				return ref
			}
			if t.symbol {
				return factory.createExpressionWithTypeArguments(symbolToExpression(t.symbol, context, ast.SymbolFlagsType), nil /*typeArguments*/)
			}
		}

		getUnusedName := func(input string, symbol *ast.Symbol) string {
			var id *number
			if symbol != nil {
				id = getSymbolId(symbol)
			} else {
				id = nil
			}
			if id {
				if context.remappedSymbolNames.has(id) {
					return context.remappedSymbolNames.get(id)
				}
			}
			if symbol != nil {
				input = getNameCandidateWorker(symbol, input)
			}
			i := 0
			original := input
			for context.usedSymbolNames. /* ? */ has(input) {
				i++
				input = __TEMPLATE__(original, "_", i)
			}
			context.usedSymbolNames. /* ? */ add(input)
			if id {
				context.remappedSymbolNames.set(id, input)
			}
			return input
		}

		getNameCandidateWorker := func(symbol *ast.Symbol, localName string) string {
			if localName == InternalSymbolNameDefault || localName == InternalSymbolNameClass || localName == InternalSymbolNameFunction {
				restoreFlags := saveRestoreFlags(context)
				context.flags |= NodeBuilderFlagsInInitialEntityName
				nameCandidate := c.getNameOfSymbolAsWritten(symbol, context)
				restoreFlags()
				if nameCandidate.length > 0 && isSingleOrDoubleQuote(nameCandidate.charCodeAt(0)) {
					localName = stripQuotes(nameCandidate)
				} else {
					localName = nameCandidate
				}
			}
			if localName == InternalSymbolNameDefault {
				localName = "_default"
			} else if localName == InternalSymbolNameExportEquals {
				localName = "_exports"
			}
			if isIdentifierText(localName, c.languageVersion) && !isStringANonContextualKeyword(localName) {
				localName = localName
			} else {
				localName = "_" + localName.replace( /* TODO(TS-TO-GO) Expression RegularExpressionLiteral: /[^a-z0-9]/gi */ TODO, "_")
			}
			return localName
		}

		getInternalSymbolName := func(symbol *ast.Symbol, localName string) string {
			id := getSymbolId(symbol)
			if context.remappedSymbolNames.has(id) {
				return context.remappedSymbolNames.get(id)
			}
			localName = getNameCandidateWorker(symbol, localName)
			// The result of this is going to be used as the symbol's name - lock it in, so `getUnusedName` will also pick it up
			context.remappedSymbolNames.set(id, localName)
			return localName
		}

	}

}

func (c *Checker) typePredicateToString(typePredicate TypePredicate, enclosingDeclaration *ast.Node, flags TypeFormatFlags /*  = TypeFormatFlags.UseAliasDefinedOutsideCurrentScope */, writer EmitTextWriter) string {
	if writer != nil {
		return typePredicateToStringWorker(writer).getText()
	} else {
		return usingSingleLineStringWriter(typePredicateToStringWorker)
	}

	typePredicateToStringWorker := func(writer EmitTextWriter) EmitTextWriter {
		nodeBuilderFlags := c.toNodeBuilderFlags(flags) | NodeBuilderFlagsIgnoreErrors | NodeBuilderFlagsWriteTypeParametersInQualifiedName
		predicate := c.nodeBuilder.typePredicateToTypePredicateNode(typePredicate, enclosingDeclaration, nodeBuilderFlags)
		// TODO: GH#18217
		printer := createPrinterWithRemoveComments()
		sourceFile := enclosingDeclaration && getSourceFileOfNode(enclosingDeclaration)
		printer.writeNode(EmitHintUnspecified, predicate, sourceFile /*sourceFile*/, writer)
		return writer
	}

}

func (c *Checker) formatUnionTypes(types []*Type) []*Type {
	var result []*Type = []never{}
	flags := 0.(TypeFlags)
	for i := 0; i < types.length; i++ {
		t := types[i]
		flags |= t.flags
		if t.flags&TypeFlagsNullable == 0 {
			if t.flags&(TypeFlagsBooleanLiteral|TypeFlagsEnumLike) != 0 {
				var baseType *Type
				if t.flags&TypeFlagsBooleanLiteral != 0 {
					baseType = c.booleanType
				} else {
					baseType = c.getBaseTypeOfEnumLikeType(t.AsLiteralType())
				}
				if baseType.flags&TypeFlagsUnion != 0 {
					count := baseType.AsUnionType().types.length
					if i+count <= types.length && c.getRegularTypeOfLiteralType(types[i+count-1]) == c.getRegularTypeOfLiteralType(baseType.AsUnionType().types[count-1]) {
						result.push(baseType)
						i += count - 1
						continue
					}
				}
			}
			result.push(t)
		}
	}
	if flags&TypeFlagsNull != 0 {
		result.push(c.nullType)
	}
	if flags&TypeFlagsUndefined != 0 {
		result.push(c.undefinedType)
	}
	return result || types
}

func (c *Checker) visibilityToString(flags ModifierFlags) string {
	if flags == ast.ModifierFlagsPrivate {
		return "private"
	}
	if flags == ast.ModifierFlagsProtected {
		return "protected"
	}
	return "public"
}

func (c *Checker) getTypeAliasForTypeLiteral(t *Type) *ast.Symbol {
	if t.symbol && t.symbol.Flags&ast.SymbolFlagsTypeLiteral != 0 && t.symbol.Declarations != nil {
		node := walkUpParenthesizedTypes(t.symbol.Declarations[0].Parent)
		if isTypeAliasDeclaration(node) {
			return c.getSymbolOfDeclaration(node)
		}
	}
	return nil
}

func (c *Checker) isTopLevelInExternalModuleAugmentation(node *ast.Node) bool {
	return node && node.Parent && node.Parent.Kind == ast.KindModuleBlock && isExternalModuleAugmentation(node.Parent.Parent)
}

func (c *Checker) isDefaultBindingContext(location *ast.Node) bool {
	return location.Kind == ast.KindSourceFile || isAmbientModule(location)
}

func (c *Checker) getNameOfSymbolFromNameType(symbol *ast.Symbol, context NodeBuilderContext) *string {
	nameType := c.getSymbolLinks(symbol).nameType
	if nameType != nil {
		if nameType.flags&TypeFlagsStringOrNumberLiteral != 0 {
			name := "" + (nameType /* as StringLiteralType | NumberLiteralType */).value
			if !isIdentifierText(name, getEmitScriptTarget(c.compilerOptions)) && !isNumericLiteralName(name) {
				return __TEMPLATE__("\"", escapeString(name, CharacterCodesdoubleQuote), "\"")
			}
			if isNumericLiteralName(name) && startsWith(name, "-") {
				return __TEMPLATE__("[", name, "]")
			}
			return name
		}
		if nameType.flags&TypeFlagsUniqueESSymbol != 0 {
			return __TEMPLATE__("[", c.getNameOfSymbolAsWritten(nameType.AsUniqueESSymbolType().symbol, context), "]")
		}
	}
}

/**
 * Gets a human-readable name for a symbol.
 * Should *not* be used for the right-hand side of a `.` -- use `symbolName(symbol)` for that instead.
 *
 * Unlike `symbolName(symbol)`, this will include quotes if the name is from a string literal.
 * It will also use a representation of a number as written instead of a decimal form, e.g. `0o11` instead of `9`.
 */

func (c *Checker) getNameOfSymbolAsWritten(symbol *ast.Symbol, context NodeBuilderContext) string {
	if context. /* ? */ remappedSymbolReferences. /* ? */ has(getSymbolId(symbol)) {
		symbol = context.remappedSymbolReferences.get(getSymbolId(symbol))
	}
	if context != nil && symbol.EscapedName == InternalSymbolNameDefault && context.flags&NodeBuilderFlagsUseAliasDefinedOutsideCurrentScope == 0 && (context.flags&NodeBuilderFlagsInInitialEntityName == 0 || symbol.Declarations == nil || (context.enclosingDeclaration != nil && findAncestor(symbol.Declarations[0], c.isDefaultBindingContext) != findAncestor(context.enclosingDeclaration, c.isDefaultBindingContext))) {
		return "default"
	}
	if symbol.Declarations != nil && symbol.Declarations.length != 0 {
		declaration := firstDefined(symbol.Declarations, func(d Declaration) Declaration {
			if getNameOfDeclaration(d) != nil {
				return d
			} else {
				return nil
			}
		})
		// Try using a declaration with a name, first
		name := declaration && getNameOfDeclaration(declaration)
		if declaration != nil && name != nil {
			if isCallExpression(declaration) && isBindableObjectDefinePropertyCall(declaration) {
				return symbolName(symbol)
			}
			if isComputedPropertyName(name) && getCheckFlags(symbol)&ast.CheckFlagsLate == 0 {
				nameType := c.getSymbolLinks(symbol).nameType
				if nameType != nil && nameType.flags&TypeFlagsStringOrNumberLiteral != 0 {
					// Computed property name isn't late bound, but has a well-known name type - use name type to generate a symbol name
					result := c.getNameOfSymbolFromNameType(symbol, context)
					if result != nil {
						return result
					}
				}
			}
			return declarationNameToString(name)
		}
		if declaration == nil {
			declaration = symbol.Declarations[0]
			// Declaration may be nameless, but we'll try anyway
		}
		if declaration.Parent && declaration.Parent.Kind == ast.KindVariableDeclaration {
			return declarationNameToString(declaration.Parent.AsVariableDeclaration().Name)
		}
		switch declaration.Kind {
		case ast.KindClassExpression,
			ast.KindFunctionExpression,
			ast.KindArrowFunction:
			if context != nil && !context.encounteredError && context.flags&NodeBuilderFlagsAllowAnonymousIdentifier == 0 {
				context.encounteredError = true
			}
			if declaration.Kind == ast.KindClassExpression {
				return "(Anonymous class)"
			} else {
				return "(Anonymous function)"
			}
		}
	}
	name := c.getNameOfSymbolFromNameType(symbol, context)
	if name != nil {
		return name
	} else {
		return symbolName(symbol)
	}
}

func (c *Checker) isDeclarationVisible(node *ast.Node) bool {
	if node {
		links := c.getNodeLinks(node)
		if links.isVisible == nil {
			links.isVisible = determineIfDeclarationIsVisible()
		}
		return links.isVisible
	}

	return false

	determineIfDeclarationIsVisible := func() bool {
		switch node.Kind {
		case ast.KindJSDocCallbackTag,
			ast.KindJSDocTypedefTag,
			ast.KindJSDocEnumTag:
			// Top-level jsdoc type aliases are considered exported
			// First parent is comment node, second is hosting declaration or token; we only care about those tokens or declarations whose parent is a source file
			return node.Parent && node.Parent.Parent && node.Parent.Parent.Parent && isSourceFile(node.Parent.Parent.Parent)
		case ast.KindBindingElement:
			return c.isDeclarationVisible(node.Parent.Parent)
		case ast.KindVariableDeclaration:
			if isBindingPattern(node.AsVariableDeclaration().Name) && (node.AsVariableDeclaration()).Name.AsBindingPattern().Elements.length == 0 {
				// If the binding pattern is empty, this variable declaration is not visible
				return false
			}
			fallthrough
		case ast.KindModuleDeclaration,
			ast.KindClassDeclaration,
			ast.KindInterfaceDeclaration,
			ast.KindTypeAliasDeclaration,
			ast.KindFunctionDeclaration,
			ast.KindEnumDeclaration,
			ast.KindImportEqualsDeclaration:
			// external module augmentation is always visible
			if isExternalModuleAugmentation(node) {
				return true
			}
			parent := c.getDeclarationContainer(node)
			// If the node is not exported or it is not ambient module element (except import declaration)
			if c.getCombinedModifierFlagsCached(node.AsDeclaration())&ast.ModifierFlagsExport == 0 && !(node.Kind != ast.KindImportEqualsDeclaration && parent.Kind != ast.KindSourceFile && parent.Flags&ast.NodeFlagsAmbient != 0) {
				return isGlobalSourceFile(parent)
			}
			// Exported members/ambient module elements (exception import declaration) are visible if parent is visible
			return c.isDeclarationVisible(parent)
		case ast.KindPropertyDeclaration,
			ast.KindPropertySignature,
			ast.KindGetAccessor,
			ast.KindSetAccessor,
			ast.KindMethodDeclaration,
			ast.KindMethodSignature:
			if hasEffectiveModifier(node, ast.ModifierFlagsPrivate|ast.ModifierFlagsProtected) {
				// Private/protected properties/methods are not visible
				return false
			}
			// Public properties/methods are visible if its parents are visible, so:
			fallthrough
		case ast.KindConstructor,
			ast.KindConstructSignature,
			ast.KindCallSignature,
			ast.KindIndexSignature,
			ast.KindParameter,
			ast.KindModuleBlock,
			ast.KindFunctionType,
			ast.KindConstructorType,
			ast.KindTypeLiteral,
			ast.KindTypeReference,
			ast.KindArrayType,
			ast.KindTupleType,
			ast.KindUnionType,
			ast.KindIntersectionType,
			ast.KindParenthesizedType,
			ast.KindNamedTupleMember:
			return c.isDeclarationVisible(node.Parent)

			// Default binding, import specifier and namespace import is visible
			// only on demand so by default it is not visible
		case ast.KindImportClause,
			ast.KindNamespaceImport,
			ast.KindImportSpecifier:
			return false

			// Type parameters are always visible
		case ast.KindTypeParameter,
			ast.KindSourceFile,
			ast.KindNamespaceExportDeclaration:
			return true

			// Export assignments do not create name bindings outside the module
		case ast.KindExportAssignment:
			return false
		default:
			return false
		}
	}

}

func (c *Checker) collectLinkedAliases(node ModuleExportName, setVisibility bool) *[]*ast.Node {
	var exportSymbol *ast.Symbol
	if node.Kind != ast.KindStringLiteral && node.Parent && node.Parent.Kind == ast.KindExportAssignment {
		exportSymbol = c.resolveName(node, node, ast.SymbolFlagsValue|ast.SymbolFlagsType|ast.SymbolFlagsNamespace|ast.SymbolFlagsAlias, nil /*nameNotFoundMessage*/, false /*isUse*/)
	} else if node.Parent.Kind == ast.KindExportSpecifier {
		exportSymbol = c.getTargetOfExportSpecifier(node.Parent.AsExportSpecifier(), ast.SymbolFlagsValue|ast.SymbolFlagsType|ast.SymbolFlagsNamespace|ast.SymbolFlagsAlias)
	}
	var result *[]*ast.Node
	var visited *Set[number]
	if exportSymbol != nil {
		visited = NewSet()
		visited.add(getSymbolId(exportSymbol))
		buildVisibleNodeList(exportSymbol.Declarations)
	}
	return result

	buildVisibleNodeList := func(declarations *[]Declaration) {
		forEach(declarations, func(declaration Declaration) {
			resultNode := c.getAnyImportSyntax(declaration) || declaration
			if setVisibility {
				c.getNodeLinks(declaration).isVisible = true
			} else {
				result = result || []never{}
				pushIfUnique(result, resultNode)
			}

			if isInternalModuleImportEqualsDeclaration(declaration) {
				// Add the referenced top container visible
				internalModuleReference := declaration.ModuleReference /* as Identifier | QualifiedName */
				firstIdentifier := getFirstIdentifier(internalModuleReference)
				importSymbol := c.resolveName(declaration, firstIdentifier.EscapedText, ast.SymbolFlagsValue|ast.SymbolFlagsType|ast.SymbolFlagsNamespace, nil /*nameNotFoundMessage*/, false /*isUse*/)
				if importSymbol != nil && visited != nil {
					if tryAddToSet(visited, getSymbolId(importSymbol)) {
						buildVisibleNodeList(importSymbol.Declarations)
					}
				}
			}
		})
	}

}

/**
 * Push an entry on the type resolution stack. If an entry with the given target and the given property name
 * is already on the stack, and no entries in between already have a type, then a circularity has occurred.
 * In this case, the result values of the existing entry and all entries pushed after it are changed to false,
 * and the value false is returned. Otherwise, the new entry is just pushed onto the stack, and true is returned.
 * In order to see if the same query has already been done before, the target object and the propertyName both
 * must match the one passed in.
 *
 * @param target The symbol, type, or signature whose type is being queried
 * @param propertyName The property name that should be used to query the target for its type
 */

func (c *Checker) pushTypeResolution(target TypeSystemEntity, propertyName TypeSystemPropertyName) bool {
	resolutionCycleStartIndex := c.findResolutionCycleStartIndex(target, propertyName)
	if resolutionCycleStartIndex >= 0 {
		// A cycle was found
		TODO_IDENTIFIER := c.resolutionTargets
		for i := resolutionCycleStartIndex; i < length; i++ {
			c.resolutionResults[i] = false
		}
		return false
	}
	c.resolutionTargets.push(target)
	c.resolutionResults.push(true)
	c.resolutionPropertyNames.push(propertyName)
	return true
}

func (c *Checker) findResolutionCycleStartIndex(target TypeSystemEntity, propertyName TypeSystemPropertyName) number {
	for i := c.resolutionTargets.length - 1; i >= c.resolutionStart; i-- {
		if c.resolutionTargetHasProperty(c.resolutionTargets[i], c.resolutionPropertyNames[i]) {
			return -1
		}
		if c.resolutionTargets[i] == target && c.resolutionPropertyNames[i] == propertyName {
			return i
		}
	}
	return -1
}

func (c *Checker) resolutionTargetHasProperty(target TypeSystemEntity, propertyName TypeSystemPropertyName) bool {
	switch propertyName {
	case TypeSystemPropertyNameType:
		return c.getSymbolLinks(target.(*ast.Symbol)).type_ != nil
	case TypeSystemPropertyNameDeclaredType:
		return c.getSymbolLinks(target.(*ast.Symbol)).declaredType != nil
	case TypeSystemPropertyNameResolvedBaseConstructorType:
		return target.AsInterfaceType().resolvedBaseConstructorType != nil
	case TypeSystemPropertyNameResolvedReturnType:
		return (target.(Signature)).resolvedReturnType != nil
	case TypeSystemPropertyNameImmediateBaseConstraint:
		return target.AsType().immediateBaseConstraint != nil
	case TypeSystemPropertyNameResolvedTypeArguments:
		return target.AsTypeReference().resolvedTypeArguments != nil
	case TypeSystemPropertyNameResolvedBaseTypes:
		return target.AsInterfaceType().baseTypesResolved
	case TypeSystemPropertyNameWriteType:
		return c.getSymbolLinks(target.(*ast.Symbol)).writeType != nil
	case TypeSystemPropertyNameParameterInitializerContainsUndefined:
		return c.getNodeLinks(target.AsParameterDeclaration()).parameterInitializerContainsUndefined != nil
	}
	return Debug.assertNever(propertyName)
}

/**
 * Pop an entry from the type resolution stack and return its associated result value. The result value will
 * be true if no circularities were detected, or false if a circularity was found.
 */

func (c *Checker) popTypeResolution() bool {
	c.resolutionTargets.pop()
	c.resolutionPropertyNames.pop()
	return c.resolutionResults.pop()
}

func (c *Checker) getDeclarationContainer(node *ast.Node) *ast.Node {
	return findAncestor(getRootDeclaration(node), func(node *ast.Node) bool {
		switch node.Kind {
		case ast.KindVariableDeclaration,
			ast.KindVariableDeclarationList,
			ast.KindImportSpecifier,
			ast.KindNamedImports,
			ast.KindNamespaceImport,
			ast.KindImportClause:
			return false
		default:
			return true
		}
	}).Parent
}

func (c *Checker) getTypeOfPrototypeProperty(prototype *ast.Symbol) *Type {
	// TypeScript 1.0 spec (April 2014): 8.4
	// Every class automatically contains a static property member named 'prototype',
	// the type of which is an instantiation of the class type with type Any supplied as a type argument for each type parameter.
	// It is an error to explicitly declare a static property member with the name 'prototype'.
	classType := c.getDeclaredTypeOfSymbol(c.getParentOfSymbol(prototype)).AsInterfaceType()
	if classType.typeParameters != nil {
		return c.createTypeReference(classType.AsGenericType(), core.Map(classType.typeParameters, func(_ TypeParameter) IntrinsicType {
			return c.anyType
		}))
	} else {
		return classType
	}
}

// Return the type of the given property in the given type, or undefined if no such property exists
func (c *Checker) getTypeOfPropertyOfType(t *Type, name string) *Type {
	prop := c.getPropertyOfType(t, name)
	if prop != nil {
		return c.getTypeOfSymbol(prop)
	} else {
		return nil
	}
}

/**
 * Return the type of the matching property or index signature in the given type, or undefined
 * if no matching property or index signature exists. Add optionality to index signature types.
 */

func (c *Checker) getTypeOfPropertyOrIndexSignatureOfType(t *Type, name string) *Type {
	var propType TODO
	return c.getTypeOfPropertyOfType(t, name) || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: propType = getApplicableIndexInfoForName(type, name)?.type */ TODO) && c.addOptionality(propType, true /*isProperty*/, true /*isOptional*/)
}

func (c *Checker) isTypeAny(t *Type) *bool {
	return t && (t.flags&TypeFlagsAny) != 0
}

func (c *Checker) isErrorType(t *Type) bool {
	// The only 'any' types that have alias symbols are those manufactured by getTypeFromTypeAliasReference for
	// a reference to an unresolved symbol. We want those to behave like the errorType.
	return t == c.errorType || t.flags&TypeFlagsAny != 0 && t.aliasSymbol != nil
}

// Return the type of a binding element parent. We check SymbolLinks first to see if a type has been
// assigned by contextual typing.
func (c *Checker) getTypeForBindingElementParent(node BindingElementGrandparent, checkMode CheckMode) *Type {
	if checkMode != CheckModeNormal {
		return c.getTypeForVariableLikeDeclaration(node, false /*includeOptionality*/, checkMode)
	}
	symbol := c.getSymbolOfDeclaration(node)
	return symbol && c.getSymbolLinks(symbol).type_ || c.getTypeForVariableLikeDeclaration(node, false /*includeOptionality*/, checkMode)
}

func (c *Checker) getRestType(source *Type, properties []PropertyName, symbol *ast.Symbol) *Type {
	source = c.filterType(source, func(t *Type) bool {
		return t.flags&TypeFlagsNullable == 0
	})
	if source.flags&TypeFlagsNever != 0 {
		return c.emptyObjectType
	}
	if source.flags&TypeFlagsUnion != 0 {
		return c.mapType(source, func(t *Type) *Type {
			return c.getRestType(t, properties, symbol)
		})
	}

	omitKeyType := c.getUnionType(core.Map(properties, c.getLiteralTypeFromPropertyName))

	var spreadableProperties []*ast.Symbol = []never{}
	var unspreadableToRestKeys []*Type = []never{}

	for _, prop := range c.getPropertiesOfType(source) {
		literalTypeFromProperty := c.getLiteralTypeFromProperty(prop, TypeFlagsStringOrNumberLiteralOrUnique)
		if !c.isTypeAssignableTo(literalTypeFromProperty, omitKeyType) && getDeclarationModifierFlagsFromSymbol(prop)&(ast.ModifierFlagsPrivate|ast.ModifierFlagsProtected) == 0 && c.isSpreadableProperty(prop) {
			spreadableProperties.push(prop)
		} else {
			unspreadableToRestKeys.push(literalTypeFromProperty)
		}
	}

	if c.isGenericObjectType(source) || c.isGenericIndexType(omitKeyType) {
		if unspreadableToRestKeys.length != 0 {
			// If the type we're spreading from has properties that cannot
			// be spread into the rest type (e.g. getters, methods), ensure
			// they are explicitly omitted, as they would in the non-generic case.
			omitKeyType = c.getUnionType([]*Type{omitKeyType /* TODO(TS-TO-GO) Expression SpreadElement: ...unspreadableToRestKeys */})
		}

		if omitKeyType.flags&TypeFlagsNever != 0 {
			return source
		}

		omitTypeAlias := c.getGlobalOmitSymbol()
		if omitTypeAlias == nil {
			return c.errorType
		}
		return c.getTypeAliasInstantiation(omitTypeAlias, []*Type{source, omitKeyType})
	}
	members := createSymbolTable()
	for _, prop := range spreadableProperties {
		members.set(prop.EscapedName, c.getSpreadSymbol(prop, false /*readonly*/))
	}
	result := c.createAnonymousType(symbol, members, emptyArray, emptyArray, c.getIndexInfosOfType(source))
	result.objectFlags |= ObjectFlagsObjectRestType
	return result
}

func (c *Checker) isGenericTypeWithUndefinedConstraint(t *Type) bool {
	return t.flags&TypeFlagsInstantiable != 0 && c.maybeTypeOfKind(c.getBaseConstraintOfType(t) || c.unknownType, TypeFlagsUndefined)
}

func (c *Checker) getNonUndefinedType(t *Type) *Type {
	var typeOrConstraint *Type
	if c.someType(t, c.isGenericTypeWithUndefinedConstraint) {
		typeOrConstraint = c.mapType(t, func(t *Type) *Type {
			if t.flags&TypeFlagsInstantiable != 0 {
				return c.getBaseConstraintOrType(t)
			} else {
				return t
			}
		})
	} else {
		typeOrConstraint = t
	}
	return c.getTypeWithFacts(typeOrConstraint, TypeFactsNEUndefined)
}

// Determine the control flow type associated with a destructuring declaration or assignment. The following
// forms of destructuring are possible:
//
//	let { x } = obj;  // BindingElement
//	let [ x ] = obj;  // BindingElement
//	{ x } = obj;      // ShorthandPropertyAssignment
//	{ x: v } = obj;   // PropertyAssignment
//	[ x ] = obj;      // Expression
//
// We construct a synthetic element access expression corresponding to 'obj.x' such that the control
// flow analyzer doesn't have to handle all the different syntactic forms.
func (c *Checker) getFlowTypeOfDestructuring(node Union[BindingElement, PropertyAssignment, ShorthandPropertyAssignment, Expression], declaredType *Type) *Type {
	reference := c.getSyntheticElementAccess(node)
	if reference != nil {
		return c.getFlowTypeOfReference(reference, declaredType)
	} else {
		return declaredType
	}
}

func (c *Checker) getSyntheticElementAccess(node Union[BindingElement, PropertyAssignment, ShorthandPropertyAssignment, Expression]) *ElementAccessExpression {
	parentAccess := c.getParentElementAccess(node)
	if parentAccess != nil && canHaveFlowNode(parentAccess) && parentAccess.FlowNode != nil {
		propName := c.getDestructuringPropertyName(node)
		if propName {
			literal := setTextRangeWorker(parseNodeFactory.createStringLiteral(propName), node)
			var lhsExpr /* TODO(TS-TO-GO) inferred type FunctionExpression | PropertyAccessExpression | ElementAccessExpression | Identifier | ParenthesizedExpression | ThisExpression | SuperExpression | MetaProperty */ any
			if isLeftHandSideExpression(parentAccess) {
				lhsExpr = parentAccess
			} else {
				lhsExpr = parseNodeFactory.createParenthesizedExpression(parentAccess)
			}
			result := setTextRangeWorker(parseNodeFactory.createElementAccessExpression(lhsExpr, literal), node)
			setParent(literal, result)
			setParent(result, node)
			if lhsExpr != parentAccess {
				setParent(lhsExpr, result)
			}
			result.FlowNode = parentAccess.FlowNode
			return result
		}
	}
}

func (c *Checker) getParentElementAccess(node Union[BindingElement, PropertyAssignment, ShorthandPropertyAssignment, Expression]) Expression {
	ancestor := node.Parent.Parent
	switch ancestor.Kind {
	case ast.KindBindingElement,
		ast.KindPropertyAssignment:
		return c.getSyntheticElementAccess(ancestor /* as BindingElement | PropertyAssignment */)
	case ast.KindArrayLiteralExpression:
		return c.getSyntheticElementAccess(node.Parent.AsExpression())
	case ast.KindVariableDeclaration:
		return ancestor.AsVariableDeclaration().Initializer
	case ast.KindBinaryExpression:
		return ancestor.AsBinaryExpression().Right
	}
}

func (c *Checker) getDestructuringPropertyName(node Union[BindingElement, PropertyAssignment, ShorthandPropertyAssignment, Expression]) *string {
	parent := node.Parent
	if node.Kind == ast.KindBindingElement && parent.Kind == ast.KindObjectBindingPattern {
		return c.getLiteralPropertyNameText(node.AsBindingElement().PropertyName || node.AsBindingElement().Name.AsIdentifier())
	}
	if node.Kind == ast.KindPropertyAssignment || node.Kind == ast.KindShorthandPropertyAssignment {
		return c.getLiteralPropertyNameText((node /* as PropertyAssignment | ShorthandPropertyAssignment */).Name)
	}
	return "" + ((parent /* as BindingPattern | ArrayLiteralExpression */).Elements.(NodeArray[*ast.Node])).indexOf(node)
}

func (c *Checker) getLiteralPropertyNameText(name PropertyName) *string {
	t := c.getLiteralTypeFromPropertyName(name)
	if t.flags&(TypeFlagsStringLiteral|TypeFlagsNumberLiteral) != 0 {
		return "" + (t /* as StringLiteralType | NumberLiteralType */).value
	} else {
		return nil
	}
}

/** Return the inferred type for a binding element */

func (c *Checker) getTypeForBindingElement(declaration BindingElement) *Type {
	var checkMode /* TODO(TS-TO-GO) inferred type CheckMode.Normal | CheckMode.RestBindingElement */ any
	if declaration.DotDotDotToken != nil {
		checkMode = CheckModeRestBindingElement
	} else {
		checkMode = CheckModeNormal
	}
	parentType := c.getTypeForBindingElementParent(declaration.Parent.Parent, checkMode)
	return parentType && c.getBindingElementTypeFromParentType(declaration, parentType, false /*noTupleBoundsCheck*/)
}

func (c *Checker) getBindingElementTypeFromParentType(declaration BindingElement, parentType *Type, noTupleBoundsCheck bool) *Type {
	// If an any type was inferred for parent, infer that for the binding element
	if c.isTypeAny(parentType) {
		return parentType
	}
	pattern := declaration.Parent
	// Relax null check on ambient destructuring parameters, since the parameters have no implementation and are just documentation
	if c.strictNullChecks && declaration.Flags&ast.NodeFlagsAmbient != 0 && isPartOfParameterDeclaration(declaration) {
		parentType = c.getNonNullableType(parentType)
	} else if c.strictNullChecks && pattern.Parent.Initializer != nil && !(c.hasTypeFacts(c.getTypeOfInitializer(pattern.Parent.Initializer), TypeFactsEQUndefined)) {
		parentType = c.getTypeWithFacts(parentType, TypeFactsNEUndefined)
	}

	accessFlags := AccessFlagsExpressionPosition | (ifElse(noTupleBoundsCheck || c.hasDefaultValue(declaration), AccessFlagsAllowMissing, 0))
	var t *Type
	if pattern.Kind == ast.KindObjectBindingPattern {
		if declaration.DotDotDotToken != nil {
			parentType = c.getReducedType(parentType)
			if parentType.flags&TypeFlagsUnknown != 0 || !c.isValidSpreadType(parentType) {
				c.error(declaration, Diagnostics.Rest_types_may_only_be_created_from_object_types)
				return c.errorType
			}
			var literalMembers []PropertyName = []never{}
			for _, element := range pattern.Elements {
				if element.DotDotDotToken == nil {
					literalMembers.push(element.PropertyName || element.Name.AsIdentifier())
				}
			}
			t = c.getRestType(parentType, literalMembers, declaration.Symbol)
		} else {
			// Use explicitly specified property name ({ p: xxx } form), or otherwise the implied name ({ p } form)
			name := declaration.PropertyName || declaration.Name.AsIdentifier()
			indexType := c.getLiteralTypeFromPropertyName(name)
			declaredType := c.getIndexedAccessType(parentType, indexType, accessFlags, name)
			t = c.getFlowTypeOfDestructuring(declaration, declaredType)
		}
	} else {
		// This elementType will be used if the specific property corresponding to this index is not
		// present (aka the tuple element property). This call also checks that the parentType is in
		// fact an iterable or array (depending on target language).
		elementType := c.checkIteratedTypeOrElementType(IterationUseDestructuring|(ifElse(declaration.DotDotDotToken != nil, 0, IterationUsePossiblyOutOfBounds)), parentType, c.undefinedType, pattern)
		index := pattern.Elements.indexOf(declaration)
		if declaration.DotDotDotToken != nil {
			// If the parent is a tuple type, the rest element has a tuple type of the
			// remaining tuple element types. Otherwise, the rest element has an array type with same
			// element type as the parent type.
			baseConstraint := c.mapType(parentType, func(t *Type) *Type {
				if t.flags&TypeFlagsInstantiableNonPrimitive != 0 {
					return c.getBaseConstraintOrType(t)
				} else {
					return t
				}
			})
			if c.everyType(baseConstraint, c.isTupleType) {
				t = c.mapType(baseConstraint, func(t *Type) *Type {
					return c.sliceTupleType(t.AsTupleTypeReference(), index)
				})
			} else {
				t = c.createArrayType(elementType)
			}
		} else if c.isArrayLikeType(parentType) {
			indexType := c.getNumberLiteralType(index)
			declaredType := c.getIndexedAccessTypeOrUndefined(parentType, indexType, accessFlags, declaration.Name) || c.errorType
			t = c.getFlowTypeOfDestructuring(declaration, declaredType)
		} else {
			t = elementType
		}
	}
	if declaration.Initializer == nil {
		return t
	}
	if getEffectiveTypeAnnotationNode(walkUpBindingElementsAndPatterns(declaration)) != nil {
		// In strict null checking mode, if a default value of a non-undefined type is specified, remove
		// undefined from the final type.
		if c.strictNullChecks && !(c.hasTypeFacts(c.checkDeclarationInitializer(declaration, CheckModeNormal), TypeFactsIsUndefined)) {
			return c.getNonUndefinedType(t)
		} else {
			return t
		}
	}
	return c.widenTypeInferredFromInitializer(declaration, c.getUnionType([]*Type{c.getNonUndefinedType(t), c.checkDeclarationInitializer(declaration, CheckModeNormal)}, UnionReductionSubtype))
}

func (c *Checker) getTypeForDeclarationFromJSDocComment(declaration *ast.Node) *Type {
	jsdocType := getJSDocType(declaration)
	if jsdocType != nil {
		return c.getTypeFromTypeNode(jsdocType)
	}
	return nil
}

func (c *Checker) isNullOrUndefined(node Expression) bool {
	expr := skipParentheses(node, true /*excludeJSDocTypeAssertions*/)
	return expr.Kind == ast.KindNullKeyword || expr.Kind == ast.KindIdentifier && c.getResolvedSymbol(expr.AsIdentifier()) == c.undefinedSymbol
}

func (c *Checker) isEmptyArrayLiteral(node Expression) bool {
	expr := skipParentheses(node, true /*excludeJSDocTypeAssertions*/)
	return expr.Kind == ast.KindArrayLiteralExpression && expr.AsArrayLiteralExpression().Elements.length == 0
}

func (c *Checker) addOptionality(t *Type, isProperty bool /*  = false */, isOptional bool /*  = true */) *Type {
	if c.strictNullChecks && isOptional {
		return c.getOptionalType(t, isProperty)
	} else {
		return t
	}
}

// Return the inferred type for a variable, parameter, or property declaration
func (c *Checker) getTypeForVariableLikeDeclaration(declaration Union[ParameterDeclaration, PropertyDeclaration, PropertySignature, VariableDeclaration, BindingElement, JSDocPropertyLikeTag], includeOptionality bool, checkMode CheckMode) *Type {
	// A variable declared in a for..in statement is of type string, or of type keyof T when the
	// right hand expression is of a type parameter type.
	if isVariableDeclaration(declaration) && declaration.Parent.Parent.Kind == ast.KindForInStatement {
		indexType := c.getIndexType(c.getNonNullableTypeIfNeeded(c.checkExpression(declaration.Parent.Parent.Expression, checkMode /*checkMode*/)))
		if indexType.flags&(TypeFlagsTypeParameter|TypeFlagsIndex) != 0 {
			return c.getExtractStringType(indexType)
		} else {
			return c.stringType
		}
	}

	if isVariableDeclaration(declaration) && declaration.Parent.Parent.Kind == ast.KindForOfStatement {
		// checkRightHandSideOfForOf will return undefined if the for-of expression type was
		// missing properties/signatures required to get its iteratedType (like
		// [Symbol.iterator] or next). This may be because we accessed properties from anyType,
		// or it may have led to an error inside getElementTypeOfIterable.
		forOfStatement := declaration.Parent.Parent
		return c.checkRightHandSideOfForOf(forOfStatement) || c.anyType
	}

	if isBindingPattern(declaration.Parent) {
		return c.getTypeForBindingElement(declaration.AsBindingElement())
	}

	isProperty := (isPropertyDeclaration(declaration) && !hasAccessorModifier(declaration)) || isPropertySignature(declaration) || isJSDocPropertyTag(declaration)
	isOptional := includeOptionality && isOptionalDeclaration(declaration)

	// Use type from type annotation if one is present
	declaredType := c.tryGetTypeFromEffectiveTypeNode(declaration)
	if isCatchClauseVariableDeclarationOrBindingElement(declaration) {
		if declaredType != nil {
			// If the catch clause is explicitly annotated with any or unknown, accept it, otherwise error.
			if c.isTypeAny(declaredType) || declaredType == c.unknownType {
				return declaredType
			} else {
				return c.errorType
			}
		}
		// If the catch clause is not explicitly annotated, treat it as though it were explicitly
		// annotated with unknown or any, depending on useUnknownInCatchVariables.
		if c.useUnknownInCatchVariables {
			return c.unknownType
		} else {
			return c.anyType
		}
	}
	if declaredType != nil {
		return c.addOptionality(declaredType, isProperty, isOptional)
	}

	if (c.noImplicitAny || isInJSFile(declaration)) && isVariableDeclaration(declaration) && !isBindingPattern(declaration.Name) && c.getCombinedModifierFlagsCached(declaration)&ast.ModifierFlagsExport == 0 && declaration.Flags&ast.NodeFlagsAmbient == 0 {
		// If --noImplicitAny is on or the declaration is in a Javascript file,
		// use control flow tracked 'any' type for non-ambient, non-exported var or let variables with no
		// initializer or a 'null' or 'undefined' initializer.
		if c.getCombinedNodeFlagsCached(declaration)&ast.NodeFlagsConstant == 0 && (declaration.Initializer == nil || c.isNullOrUndefined(declaration.Initializer)) {
			return c.autoType
		}
		// Use control flow tracked 'any[]' type for non-ambient, non-exported variables with an empty array
		// literal initializer.
		if declaration.Initializer != nil && c.isEmptyArrayLiteral(declaration.Initializer) {
			return c.autoArrayType
		}
	}

	if isParameter(declaration) {
		if !declaration.Symbol {
			// parameters of function types defined in JSDoc in TS files don't have symbols
			return
		}
		func_ := declaration.Parent.AsFunctionLikeDeclaration()
		// For a parameter of a set accessor, use the type of the get accessor if one is present
		if func_.Kind == ast.KindSetAccessor && c.hasBindableName(func_) {
			getter := getDeclarationOfKind(c.getSymbolOfDeclaration(declaration.Parent), ast.KindGetAccessor)
			if getter != nil {
				getterSignature := c.getSignatureFromDeclaration(getter)
				thisParameter := c.getAccessorThisParameter(func_.AsAccessorDeclaration())
				if thisParameter != nil && declaration == thisParameter {
					// Use the type from the *getter*
					Debug.assert(thisParameter.Type_ == nil)
					return c.getTypeOfSymbol(getterSignature.thisParameter)
				}
				return c.getReturnTypeOfSignature(getterSignature)
			}
		}
		parameterTypeOfTypeTag := c.getParameterTypeOfTypeTag(func_, declaration)
		if parameterTypeOfTypeTag != nil {
			return parameterTypeOfTypeTag
		}
		// Use contextual parameter type if one is available
		var t *Type
		if declaration.Symbol.EscapedName == InternalSymbolNameThis {
			t = c.getContextualThisParameterType(func_)
		} else {
			t = c.getContextuallyTypedParameterType(declaration)
		}
		if t {
			return c.addOptionality(t, false /*isProperty*/, isOptional)
		}
	}

	// Use the type of the initializer expression if one is present and the declaration is
	// not a parameter of a contextually typed function
	if hasOnlyExpressionInitializer(declaration) && declaration.Initializer != nil {
		if isInJSFile(declaration) && !isParameter(declaration) {
			containerObjectType := c.getJSContainerObjectType(declaration, c.getSymbolOfDeclaration(declaration), getDeclaredExpandoInitializer(declaration))
			if containerObjectType != nil {
				return containerObjectType
			}
		}
		t := c.widenTypeInferredFromInitializer(declaration, c.checkDeclarationInitializer(declaration, checkMode))
		return c.addOptionality(t, isProperty, isOptional)
	}

	if isPropertyDeclaration(declaration) && (c.noImplicitAny || isInJSFile(declaration)) {
		// We have a property declaration with no type annotation or initializer, in noImplicitAny mode or a .js file.
		// Use control flow analysis of this.xxx assignments in the constructor or static block to determine the type of the property.
		if !hasStaticModifier(declaration) {
			constructor := findConstructorDeclaration(declaration.Parent)
			var t *Type
			switch {
			case constructor != nil:
				t = c.getFlowTypeInConstructor(declaration.Symbol, constructor)
			case getEffectiveModifierFlags(declaration)&ast.ModifierFlagsAmbient != 0:
				t = c.getTypeOfPropertyInBaseClass(declaration.Symbol)
			default:
				t = nil
			}
			return t && c.addOptionality(t, true /*isProperty*/, isOptional)
		} else {
			staticBlocks := core.Filter(declaration.Parent.Members, isClassStaticBlockDeclaration)
			var t *Type
			switch {
			case staticBlocks.length != 0:
				t = c.getFlowTypeInStaticBlocks(declaration.Symbol, staticBlocks)
			case getEffectiveModifierFlags(declaration)&ast.ModifierFlagsAmbient != 0:
				t = c.getTypeOfPropertyInBaseClass(declaration.Symbol)
			default:
				t = nil
			}
			return t && c.addOptionality(t, true /*isProperty*/, isOptional)
		}
	}

	if isJsxAttribute(declaration) {
		// if JSX attribute doesn't have initializer, by default the attribute will have boolean value of true.
		// I.e <Elem attr /> is sugar for <Elem attr={true} />
		return c.trueType
	}

	// If the declaration specifies a binding pattern and is not a parameter of a contextually
	// typed function, use the type implied by the binding pattern
	if isBindingPattern(declaration.Name) {
		return c.getTypeFromBindingPattern(declaration.Name, false /*includePatternInType*/, true /*reportErrors*/)
	}

	// No type specified and nothing can be inferred
	return nil
}

func (c *Checker) isConstructorDeclaredProperty(symbol *ast.Symbol) bool {
	// A property is considered a constructor declared property when all declaration sites are this.xxx assignments,
	// when no declaration sites have JSDoc type annotations, and when at least one declaration site is in the body of
	// a class constructor.
	if symbol.ValueDeclaration != nil && isBinaryExpression(symbol.ValueDeclaration) {
		links := c.getSymbolLinks(symbol)
		if links.isConstructorDeclaredProperty == nil {
			links.isConstructorDeclaredProperty = false
			links.isConstructorDeclaredProperty = c.getDeclaringConstructor(symbol) != nil && core.Every(symbol.Declarations, func(declaration Declaration) bool {
				return isBinaryExpression(declaration) && c.isPossiblyAliasedThisProperty(declaration) && (declaration.Left.Kind != ast.KindElementAccessExpression || isStringOrNumericLiteralLike(declaration.Left.AsElementAccessExpression().ArgumentExpression)) && c.getAnnotatedTypeForAssignmentDeclaration(nil, declaration, symbol, declaration) == nil
			})
		}
		return links.isConstructorDeclaredProperty
	}
	return false
}

func (c *Checker) isAutoTypedProperty(symbol *ast.Symbol) *bool {
	// A property is auto-typed when its declaration has no type annotation or initializer and we're in
	// noImplicitAny mode or a .js file.
	declaration := symbol.ValueDeclaration
	return declaration && isPropertyDeclaration(declaration) && getEffectiveTypeAnnotationNode(declaration) == nil && declaration.Initializer == nil && (c.noImplicitAny || isInJSFile(declaration))
}

func (c *Checker) getDeclaringConstructor(symbol *ast.Symbol) *ConstructorDeclaration {
	if symbol.Declarations == nil {
		return
	}
	for _, declaration := range symbol.Declarations {
		container := getThisContainer(declaration, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)
		if container && (container.Kind == ast.KindConstructor || c.isJSConstructor(container)) {
			return container.AsConstructorDeclaration()
		}
	}
}

/** Create a synthetic property access flow node after the last statement of the file */

func (c *Checker) getFlowTypeFromCommonJSExport(symbol *ast.Symbol) *Type {
	file := getSourceFileOfNode(symbol.Declarations[0])
	accessName := unescapeLeadingUnderscores(symbol.EscapedName)
	areAllModuleExports := symbol.Declarations.every(func(d Declaration) bool {
		return isInJSFile(d) && isAccessExpression(d) && isModuleExportsAccessExpression(d.Expression)
	})
	var reference PropertyAccessExpression
	if areAllModuleExports {
		reference = factory.createPropertyAccessExpression(factory.createPropertyAccessExpression(factory.createIdentifier("module"), factory.createIdentifier("exports")), accessName)
	} else {
		reference = factory.createPropertyAccessExpression(factory.createIdentifier("exports"), accessName)
	}
	if areAllModuleExports {
		setParent(reference.Expression.AsPropertyAccessExpression().Expression, reference.Expression)
	}
	setParent(reference.Expression, reference)
	setParent(reference, file)
	reference.FlowNode = file.EndFlowNode
	return c.getFlowTypeOfReference(reference, c.autoType, c.undefinedType)
}

func (c *Checker) getFlowTypeInStaticBlocks(symbol *ast.Symbol, staticBlocks []ClassStaticBlockDeclaration) *Type {
	var accessName /* TODO(TS-TO-GO) inferred type string | PrivateIdentifier */ any
	if startsWith(symbol.EscapedName /* as string */, "__#") {
		accessName = factory.createPrivateIdentifier((symbol.EscapedName /* as string */).split("@")[1])
	} else {
		accessName = unescapeLeadingUnderscores(symbol.EscapedName)
	}
	for _, staticBlock := range staticBlocks {
		reference := factory.createPropertyAccessExpression(factory.createThis(), accessName)
		setParent(reference.Expression, reference)
		setParent(reference, staticBlock)
		reference.FlowNode = staticBlock.ReturnFlowNode
		flowType := c.getFlowTypeOfProperty(reference, symbol)
		if c.noImplicitAny && (flowType == c.autoType || flowType == c.autoArrayType) {
			c.error(symbol.ValueDeclaration, Diagnostics.Member_0_implicitly_has_an_1_type, c.symbolToString(symbol), c.typeToString(flowType))
		}
		// We don't infer a type if assignments are only null or undefined.
		if c.everyType(flowType, c.isNullableType) {
			continue
		}
		return c.convertAutoToAny(flowType)
	}
}

func (c *Checker) getFlowTypeInConstructor(symbol *ast.Symbol, constructor ConstructorDeclaration) *Type {
	var accessName /* TODO(TS-TO-GO) inferred type string | PrivateIdentifier */ any
	if startsWith(symbol.EscapedName /* as string */, "__#") {
		accessName = factory.createPrivateIdentifier((symbol.EscapedName /* as string */).split("@")[1])
	} else {
		accessName = unescapeLeadingUnderscores(symbol.EscapedName)
	}
	reference := factory.createPropertyAccessExpression(factory.createThis(), accessName)
	setParent(reference.Expression, reference)
	setParent(reference, constructor)
	reference.FlowNode = constructor.ReturnFlowNode
	flowType := c.getFlowTypeOfProperty(reference, symbol)
	if c.noImplicitAny && (flowType == c.autoType || flowType == c.autoArrayType) {
		c.error(symbol.ValueDeclaration, Diagnostics.Member_0_implicitly_has_an_1_type, c.symbolToString(symbol), c.typeToString(flowType))
	}
	// We don't infer a type if assignments are only null or undefined.
	if c.everyType(flowType, c.isNullableType) {
		return nil
	} else {
		return c.convertAutoToAny(flowType)
	}
}

func (c *Checker) getFlowTypeOfProperty(reference *ast.Node, prop *ast.Symbol) *Type {
	initialType := prop. /* ? */ valueDeclaration && (!c.isAutoTypedProperty(prop) || getEffectiveModifierFlags(prop.ValueDeclaration)&ast.ModifierFlagsAmbient) && c.getTypeOfPropertyInBaseClass(prop) || c.undefinedType
	return c.getFlowTypeOfReference(reference, c.autoType, initialType)
}

func (c *Checker) getWidenedTypeForAssignmentDeclaration(symbol *ast.Symbol, resolvedSymbol *ast.Symbol) *Type {
	// function/class/{} initializers are themselves containers, so they won't merge in the same way as other initializers
	container := getAssignedExpandoInitializer(symbol.ValueDeclaration)
	if container != nil {
		var tag *JSDocTypeTag
		if isInJSFile(container) {
			tag = getJSDocTypeTag(container)
		} else {
			tag = nil
		}
		if tag != nil && tag.TypeExpression {
			return c.getTypeFromTypeNode(tag.TypeExpression)
		}
		containerObjectType := symbol.ValueDeclaration && c.getJSContainerObjectType(symbol.ValueDeclaration, symbol, container)
		return containerObjectType || c.getWidenedLiteralType(c.checkExpressionCached(container))
	}
	var t TODO
	definedInConstructor := false
	definedInMethod := false
	// We use control flow analysis to determine the type of the property if the property qualifies as a constructor
	// declared property and the resulting control flow type isn't just undefined or null.
	if c.isConstructorDeclaredProperty(symbol) {
		t = c.getFlowTypeInConstructor(symbol, c.getDeclaringConstructor(symbol))
	}
	if !(t) {
		var types *[]*Type
		if symbol.Declarations != nil {
			var jsdocType *Type
			for _, declaration := range symbol.Declarations {
				var expression * /* TODO(TS-TO-GO) inferred type BinaryExpression | CallExpression | AccessExpression */ any
				switch {
				case (isBinaryExpression(declaration) || isCallExpression(declaration)):
					expression = declaration
				case isAccessExpression(declaration):
					if isBinaryExpression(declaration.Parent) {
						expression = declaration.Parent
					} else {
						expression = declaration
					}
				default:
					expression = nil
				}
				if expression == nil {
					continue
					// Non-assignment declaration merged in (eg, an Identifier to mark the thing as a namespace) - skip over it and pull type info from elsewhere
				}

				var kind AssignmentDeclarationKind
				if isAccessExpression(expression) {
					kind = getAssignmentDeclarationPropertyAccessKind(expression)
				} else {
					kind = getAssignmentDeclarationKind(expression)
				}
				if kind == AssignmentDeclarationKindThisProperty || isBinaryExpression(expression) && c.isPossiblyAliasedThisProperty(expression, kind) {
					if c.isDeclarationInConstructor(expression) {
						definedInConstructor = true
					} else {
						definedInMethod = true
					}
				}
				if !isCallExpression(expression) {
					jsdocType = c.getAnnotatedTypeForAssignmentDeclaration(jsdocType, expression, symbol, declaration)
				}
				if jsdocType == nil {
					(types || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: types = [] */ TODO)).push(ifElse((isBinaryExpression(expression) || isCallExpression(expression)), c.getInitializerTypeFromAssignmentDeclaration(symbol, resolvedSymbol, expression, kind), c.neverType))
				}
			}
			t = jsdocType
		}
		if !(t) {
			if length(types) == 0 {
				return c.errorType
				// No types from any declarations :(
			}
			var constructorTypes *[]*Type
			if definedInConstructor && symbol.Declarations != nil {
				constructorTypes = c.getConstructorDefinedThisAssignmentTypes(types, symbol.Declarations)
			} else {
				constructorTypes = nil
			}
			// use only the constructor types unless they were only assigned null | undefined (including widening variants)
			if definedInMethod {
				propType := c.getTypeOfPropertyInBaseClass(symbol)
				if propType != nil {
					(constructorTypes || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: constructorTypes = [] */ TODO)).push(propType)
					definedInConstructor = true
				}
			}
			var sourceTypes *[]*Type
			if core.Some(constructorTypes, func(t *Type) bool {
				return t.flags & ^TypeFlagsNullable != 0
			}) {
				sourceTypes = constructorTypes
			} else {
				sourceTypes = types
			}
			// TODO: GH#18217
			t = c.getUnionType(sourceTypes)
		}
	}
	widened := c.getWidenedType(c.addOptionality(t, false /*isProperty*/, definedInMethod && !definedInConstructor))
	if symbol.ValueDeclaration != nil && isInJSFile(symbol.ValueDeclaration) && c.filterType(widened, func(t *Type) bool {
		return t.flags & ^TypeFlagsNullable != 0
	}) == c.neverType {
		c.reportImplicitAny(symbol.ValueDeclaration, c.anyType)
		return c.anyType
	}
	return widened
}

func (c *Checker) getJSContainerObjectType(decl *ast.Node, symbol *ast.Symbol, init Expression) *Type {
	if !isInJSFile(decl) || init == nil || !isObjectLiteralExpression(init) || init.Properties.length != 0 {
		return nil
	}
	exports := createSymbolTable()
	for isBinaryExpression(decl) || isPropertyAccessExpression(decl) {
		s := c.getSymbolOfNode(decl)
		if s. /* ? */ exports. /* ? */ size {
			c.mergeSymbolTable(exports, s.Exports)
		}
		if isBinaryExpression(decl) {
			decl = decl.Parent
		} else {
			decl = decl.Parent.Parent
		}
	}
	s := c.getSymbolOfNode(decl)
	if s. /* ? */ exports. /* ? */ size {
		c.mergeSymbolTable(exports, s.Exports)
	}
	t := c.createAnonymousType(symbol, exports, emptyArray, emptyArray, emptyArray)
	t.objectFlags |= ObjectFlagsJSLiteral
	return t
}

func (c *Checker) getAnnotatedTypeForAssignmentDeclaration(declaredType *Type, expression Expression, symbol *ast.Symbol, declaration Declaration) *Type {
	typeNode := getEffectiveTypeAnnotationNode(expression.Parent)
	if typeNode != nil {
		t := c.getWidenedType(c.getTypeFromTypeNode(typeNode))
		if declaredType == nil {
			return t
		} else if !c.isErrorType(declaredType) && !c.isErrorType(t) && !c.isTypeIdenticalTo(declaredType, t) {
			c.errorNextVariableOrPropertyDeclarationMustHaveSameType(nil, declaredType, declaration, t)
		}
	}
	if symbol.Parent. /* ? */ valueDeclaration != nil {
		possiblyAnnotatedSymbol := c.getFunctionExpressionParentSymbolOrSymbol(symbol.Parent)
		if possiblyAnnotatedSymbol.ValueDeclaration != nil {
			typeNode := getEffectiveTypeAnnotationNode(possiblyAnnotatedSymbol.ValueDeclaration)
			if typeNode != nil {
				annotationSymbol := c.getPropertyOfType(c.getTypeFromTypeNode(typeNode), symbol.EscapedName)
				if annotationSymbol != nil {
					return c.getNonMissingTypeOfSymbol(annotationSymbol)
				}
			}
		}
	}

	return declaredType
}

/** If we don't have an explicit JSDoc type, get the type from the initializer. */

func (c *Checker) getInitializerTypeFromAssignmentDeclaration(symbol *ast.Symbol, resolvedSymbol *ast.Symbol, expression Union[BinaryExpression, CallExpression], kind AssignmentDeclarationKind) *Type {
	if isCallExpression(expression) {
		if resolvedSymbol != nil {
			return c.getTypeOfSymbol(resolvedSymbol)
			// This shouldn't happen except under some hopefully forbidden merges of export assignments and object define assignments
		}
		objectLitType := c.checkExpressionCached(expression.AsBindableObjectDefinePropertyCall().Arguments[2])
		valueType := c.getTypeOfPropertyOfType(objectLitType, "value" /* as __String */)
		if valueType != nil {
			return valueType
		}
		getFunc := c.getTypeOfPropertyOfType(objectLitType, "get" /* as __String */)
		if getFunc != nil {
			getSig := c.getSingleCallSignature(getFunc)
			if getSig != nil {
				return c.getReturnTypeOfSignature(getSig)
			}
		}
		setFunc := c.getTypeOfPropertyOfType(objectLitType, "set" /* as __String */)
		if setFunc != nil {
			setSig := c.getSingleCallSignature(setFunc)
			if setSig != nil {
				return c.getTypeOfFirstParameterOfSignature(setSig)
			}
		}
		return c.anyType
	}
	if c.containsSameNamedThisProperty(expression.Left, expression.Right) {
		return c.anyType
	}
	isDirectExport := kind == AssignmentDeclarationKindExportsProperty && (isPropertyAccessExpression(expression.Left) || isElementAccessExpression(expression.Left)) && (isModuleExportsAccessExpression(expression.Left.Expression) || (isIdentifier(expression.Left.Expression) && isExportsIdentifier(expression.Left.Expression)))
	var t *Type
	switch {
	case resolvedSymbol != nil:
		t = c.getTypeOfSymbol(resolvedSymbol)
	case isDirectExport:
		t = c.getRegularTypeOfLiteralType(c.checkExpressionCached(expression.Right))
	default:
		t = c.getWidenedLiteralType(c.checkExpressionCached(expression.Right))
	}
	if t.flags&TypeFlagsObject != 0 && kind == AssignmentDeclarationKindModuleExports && symbol.EscapedName == InternalSymbolNameExportEquals {
		exportedType := c.resolveStructuredTypeMembers(t.AsObjectType())
		members := createSymbolTable()
		copyEntries(exportedType.members, members)
		initialSize := members.size
		if resolvedSymbol != nil && resolvedSymbol.Exports == nil {
			resolvedSymbol.Exports = createSymbolTable()
		}
		(resolvedSymbol || symbol).Exports.forEach(func(s *ast.Symbol, name string) {
			exportedMember := members.get(name)
			if exportedMember && exportedMember != s && s.Flags&ast.SymbolFlagsAlias == 0 {
				if s.Flags&ast.SymbolFlagsValue != 0 && exportedMember.Flags&ast.SymbolFlagsValue != 0 {
					// If the member has an additional value-like declaration, union the types from the two declarations,
					// but issue an error if they occurred in two different files. The purpose is to support a JS file with
					// a pattern like:
					//
					// module.exports = { a: true };
					// module.exports.a = 3;
					//
					// but we may have a JS file with `module.exports = { a: true }` along with a TypeScript module augmentation
					// declaring an `export const a: number`. In that case, we issue a duplicate identifier error, because
					// it's unclear what that's supposed to mean, so it's probably a mistake.
					if s.ValueDeclaration != nil && exportedMember.ValueDeclaration != nil && getSourceFileOfNode(s.ValueDeclaration) != getSourceFileOfNode(exportedMember.ValueDeclaration) {
						unescapedName := unescapeLeadingUnderscores(s.EscapedName)
						exportedMemberName := tryCast(exportedMember.ValueDeclaration, isNamedDeclaration). /* ? */ name || exportedMember.ValueDeclaration
						addRelatedInfo(c.error(s.ValueDeclaration, Diagnostics.Duplicate_identifier_0, unescapedName), createDiagnosticForNode(exportedMemberName, Diagnostics._0_was_also_declared_here, unescapedName))
						addRelatedInfo(c.error(exportedMemberName, Diagnostics.Duplicate_identifier_0, unescapedName), createDiagnosticForNode(s.ValueDeclaration, Diagnostics._0_was_also_declared_here, unescapedName))
					}
					union := c.createSymbol(s.Flags|exportedMember.Flags, name)
					union.Links.type_ = c.getUnionType([]*Type{c.getTypeOfSymbol(s), c.getTypeOfSymbol(exportedMember)})
					union.ValueDeclaration = exportedMember.ValueDeclaration
					union.Declarations = core.Concatenate(exportedMember.Declarations, s.Declarations)
					members.set(name, union)
				} else {
					members.set(name, c.mergeSymbol(s, exportedMember))
				}
			} else {
				members.set(name, s)
			}
		})
		result := c.createAnonymousType(ifElse(initialSize != members.size, nil, exportedType.symbol), members, exportedType.callSignatures, exportedType.constructSignatures, exportedType.indexInfos)
		if initialSize == members.size {
			if t.aliasSymbol != nil {
				result.aliasSymbol = t.aliasSymbol
				result.aliasTypeArguments = t.aliasTypeArguments
			}
			if getObjectFlags(t)&ObjectFlagsReference != 0 {
				result.aliasSymbol = t.AsTypeReference().symbol
				args := c.getTypeArguments(t.AsTypeReference())
				if length(args) != 0 {
					result.aliasTypeArguments = args
				} else {
					result.aliasTypeArguments = nil
				}
			}
		}
		result.objectFlags |= c.getPropagatingFlagsOfTypes([]*Type{t}) | getObjectFlags(t)&(ObjectFlagsJSLiteral|ObjectFlagsArrayLiteral|ObjectFlagsObjectLiteral)
		if result.symbol && result.symbol.Flags&ast.SymbolFlagsClass != 0 && t == c.getDeclaredTypeOfClassOrInterface(result.symbol) {
			result.objectFlags |= ObjectFlagsIsClassInstanceClone
			// Propagate the knowledge that this type is equivalent to the symbol's class instance type
		}
		return result
	}
	if c.isEmptyArrayLiteralType(t) {
		c.reportImplicitAny(expression, c.anyArrayType)
		return c.anyArrayType
	}
	return t
}

func (c *Checker) containsSameNamedThisProperty(thisProperty Expression, expression Expression) *bool {
	return isPropertyAccessExpression(thisProperty) && thisProperty.Expression.Kind == ast.KindThisKeyword && forEachChildRecursively(expression, func(n *ast.Node) bool {
		return c.isMatchingReference(thisProperty, n)
	})
}

func (c *Checker) isDeclarationInConstructor(expression Expression) bool {
	thisContainer := getThisContainer(expression, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)
	// Properties defined in a constructor (or base constructor, or javascript constructor function) don't get undefined added.
	// Function expressions that are assigned to the prototype count as methods.
	return thisContainer.Kind == ast.KindConstructor || thisContainer.Kind == ast.KindFunctionDeclaration || (thisContainer.Kind == ast.KindFunctionExpression && !isPrototypePropertyAssignment(thisContainer.Parent))
}

func (c *Checker) getConstructorDefinedThisAssignmentTypes(types []*Type, declarations []Declaration) *[]*Type {
	Debug.assert(types.length == declarations.length)
	return types.filter(func(_ *Type, i number) *bool {
		declaration := declarations[i]
		var expression *BinaryExpression
		switch {
		case isBinaryExpression(declaration):
			expression = declaration
		case isBinaryExpression(declaration.Parent):
			expression = declaration.Parent
		default:
			expression = nil
		}
		return expression && c.isDeclarationInConstructor(expression)
	})
}

// Return the type implied by a binding pattern element. This is the type of the initializer of the element if
// one is present. Otherwise, if the element is itself a binding pattern, it is the type implied by the binding
// pattern. Otherwise, it is the type any.
func (c *Checker) getTypeFromBindingElement(element BindingElement, includePatternInType bool, reportErrors bool) *Type {
	if element.Initializer != nil {
		// The type implied by a binding pattern is independent of context, so we check the initializer with no
		// contextual type or, if the element itself is a binding pattern, with the type implied by that binding
		// pattern.
		var contextualType *Type
		if isBindingPattern(element.Name) {
			contextualType = c.getTypeFromBindingPattern(element.Name, true /*includePatternInType*/, false /*reportErrors*/)
		} else {
			contextualType = c.unknownType
		}
		return c.addOptionality(c.widenTypeInferredFromInitializer(element, c.checkDeclarationInitializer(element, CheckModeNormal, contextualType)))
	}
	if isBindingPattern(element.Name) {
		return c.getTypeFromBindingPattern(element.Name, includePatternInType, reportErrors)
	}
	if reportErrors && !c.declarationBelongsToPrivateAmbientMember(element) {
		c.reportImplicitAny(element, c.anyType)
	}
	// When we're including the pattern in the type (an indication we're obtaining a contextual type), we
	// use a non-inferrable any type. Inference will never directly infer this type, but it is possible
	// to infer a type that contains it, e.g. for a binding pattern like [foo] or { foo }. In such cases,
	// widening of the binding pattern type substitutes a regular any for the non-inferrable any.
	if includePatternInType {
		return c.nonInferrableAnyType
	} else {
		return c.anyType
	}
}

// Return the type implied by an object binding pattern
func (c *Checker) getTypeFromObjectBindingPattern(pattern ObjectBindingPattern, includePatternInType bool, reportErrors bool) *Type {
	members := createSymbolTable()
	var stringIndexInfo *IndexInfo
	objectFlags := ObjectFlagsObjectLiteral | ObjectFlagsContainsObjectOrArrayLiteral
	forEach(pattern.Elements, func(e BindingElement) {
		name := e.PropertyName || e.Name.AsIdentifier()
		if e.DotDotDotToken != nil {
			stringIndexInfo = c.createIndexInfo(c.stringType, c.anyType, false /*isReadonly*/)
			return
		}

		exprType := c.getLiteralTypeFromPropertyName(name)
		if !isTypeUsableAsPropertyName(exprType) {
			// do not include computed properties in the implied type
			objectFlags |= ObjectFlagsObjectLiteralPatternWithComputedProperties
			return
		}
		text := getPropertyNameFromType(exprType)
		flags := ast.SymbolFlagsProperty | (ifElse(e.Initializer != nil, ast.SymbolFlagsOptional, 0))
		symbol := c.createSymbol(flags, text)
		symbol.Links.type_ = c.getTypeFromBindingElement(e, includePatternInType, reportErrors)
		symbol.Links.bindingElement = e
		members.set(symbol.EscapedName, symbol)
	})
	result := c.createAnonymousType(nil, members, emptyArray, emptyArray, ifElse(stringIndexInfo != nil, []IndexInfo{stringIndexInfo}, emptyArray))
	result.objectFlags |= objectFlags
	if includePatternInType {
		result.pattern = pattern
		result.objectFlags |= ObjectFlagsContainsObjectOrArrayLiteral
	}
	return result
}

// Return the type implied by an array binding pattern
func (c *Checker) getTypeFromArrayBindingPattern(pattern BindingPattern, includePatternInType bool, reportErrors bool) *Type {
	elements := pattern.Elements
	lastElement := lastOrUndefined(elements)
	var restElement *BindingElement
	if lastElement != nil && lastElement.Kind == ast.KindBindingElement && lastElement.DotDotDotToken != nil {
		restElement = lastElement
	} else {
		restElement = nil
	}
	if elements.length == 0 || elements.length == 1 && restElement != nil {
		if c.languageVersion >= ScriptTargetES2015 {
			return c.createIterableType(c.anyType)
		} else {
			return c.anyArrayType
		}
	}
	elementTypes := core.Map(elements, func(e /* TODO(TS-TO-GO) inferred type BindingElement | OmittedExpression */ any) *Type {
		if isOmittedExpression(e) {
			return c.anyType
		} else {
			return c.getTypeFromBindingElement(e, includePatternInType, reportErrors)
		}
	})
	minLength := core.FindLastIndex(elements, func(e /* TODO(TS-TO-GO) inferred type BindingElement | OmittedExpression */ any) bool {
		return !(e == restElement || isOmittedExpression(e) || c.hasDefaultValue(e))
	}, elements.length-1) + 1
	elementFlags := core.Map(elements, func(e /* TODO(TS-TO-GO) inferred type BindingElement | OmittedExpression */ any, i number) /* TODO(TS-TO-GO) inferred type ElementFlags.Required | ElementFlags.Optional | ElementFlags.Rest */ any {
		switch {
		case e == restElement:
			return ElementFlagsRest
		case i >= minLength:
			return ElementFlagsOptional
		default:
			return ElementFlagsRequired
		}
	})
	result := c.createTupleType(elementTypes, elementFlags).AsTypeReference()
	if includePatternInType {
		result = c.cloneTypeReference(result)
		result.pattern = pattern
		result.objectFlags |= ObjectFlagsContainsObjectOrArrayLiteral
	}
	return result
}

// Return the type implied by a binding pattern. This is the type implied purely by the binding pattern itself
// and without regard to its context (i.e. without regard any type annotation or initializer associated with the
// declaration in which the binding pattern is contained). For example, the implied type of [x, y] is [any, any]
// and the implied type of { x, y: z = 1 } is { x: any; y: number; }. The type implied by a binding pattern is
// used as the contextual type of an initializer associated with the binding pattern. Also, for a destructuring
// parameter with no type annotation or initializer, the type implied by the binding pattern becomes the type of
// the parameter.
func (c *Checker) getTypeFromBindingPattern(pattern BindingPattern, includePatternInType bool /*  = false */, reportErrors bool /*  = false */) *Type {
	if includePatternInType {
		c.contextualBindingPatterns.push(pattern)
	}
	var result *Type
	if pattern.Kind == ast.KindObjectBindingPattern {
		result = c.getTypeFromObjectBindingPattern(pattern, includePatternInType, reportErrors)
	} else {
		result = c.getTypeFromArrayBindingPattern(pattern, includePatternInType, reportErrors)
	}
	if includePatternInType {
		c.contextualBindingPatterns.pop()
	}
	return result
}

// Return the type associated with a variable, parameter, or property declaration. In the simple case this is the type
// specified in a type annotation or inferred from an initializer. However, in the case of a destructuring declaration it
// is a bit more involved. For example:
//
//	var [x, s = ""] = [1, "one"];
//
// Here, the array literal [1, "one"] is contextually typed by the type [any, string], which is the implied type of the
// binding pattern [x, s = ""]. Because the contextual type is a tuple type, the resulting type of [1, "one"] is the
// tuple type [number, string]. Thus, the type inferred for 'x' is number and the type inferred for 's' is string.
func (c *Checker) getWidenedTypeForVariableLikeDeclaration(declaration Union[ParameterDeclaration, PropertyDeclaration, PropertySignature, VariableDeclaration, BindingElement, JSDocPropertyLikeTag], reportErrors bool) *Type {
	return c.widenTypeForVariableLikeDeclaration(c.getTypeForVariableLikeDeclaration(declaration, true /*includeOptionality*/, CheckModeNormal), declaration, reportErrors)
}

func (c *Checker) getTypeFromImportAttributes(node ImportAttributes) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		symbol := c.createSymbol(ast.SymbolFlagsObjectLiteral, InternalSymbolNameImportAttributes)
		members := createSymbolTable()
		forEach(node.Elements, func(attr ImportAttribute) {
			member := c.createSymbol(ast.SymbolFlagsProperty, getNameFromImportAttribute(attr))
			member.Parent = symbol
			member.Links.type_ = c.checkImportAttribute(attr)
			member.Links.target = member
			members.set(member.EscapedName, member)
		})
		t := c.createAnonymousType(symbol, members, emptyArray, emptyArray, emptyArray)
		t.objectFlags |= ObjectFlagsObjectLiteral | ObjectFlagsNonInferrableType
		links.resolvedType = t
	}
	return links.resolvedType
}

func (c *Checker) isGlobalSymbolConstructor(node *ast.Node) *bool {
	symbol := c.getSymbolOfNode(node)
	globalSymbol := c.getGlobalESSymbolConstructorTypeSymbol(false)
	return globalSymbol && symbol && symbol == globalSymbol
}

func (c *Checker) widenTypeForVariableLikeDeclaration(t *Type, declaration any, reportErrors bool) *Type {
	if t {
		// TODO: If back compat with pre-3.0/4.0 libs isn't required, remove the following SymbolConstructor special case transforming `symbol` into `unique symbol`
		if t.flags&TypeFlagsESSymbol != 0 && c.isGlobalSymbolConstructor(declaration.parent) {
			t = c.getESSymbolLikeTypeForNode(declaration)
		}
		if reportErrors {
			c.reportErrorsFromWidening(declaration, t)
		}

		// always widen a 'unique symbol' type if the type was created for a different declaration.
		if t.flags&TypeFlagsUniqueESSymbol != 0 && (isBindingElement(declaration) || !declaration.type_) && t.symbol != c.getSymbolOfDeclaration(declaration) {
			t = c.esSymbolType
		}

		return c.getWidenedType(t)
	}

	// Rest parameters default to type any[], other parameters default to type any
	if isParameter(declaration) && declaration.DotDotDotToken != nil {
		t = c.anyArrayType
	} else {
		t = c.anyType
	}

	// Report implicit any errors unless this is a private property within an ambient declaration
	if reportErrors {
		if !c.declarationBelongsToPrivateAmbientMember(declaration) {
			c.reportImplicitAny(declaration, t)
		}
	}
	return t
}

func (c *Checker) declarationBelongsToPrivateAmbientMember(declaration VariableLikeDeclaration) bool {
	root := getRootDeclaration(declaration)
	var memberDeclaration *ast.Node
	if root.Kind == ast.KindParameter {
		memberDeclaration = root.Parent
	} else {
		memberDeclaration = root
	}
	return c.isPrivateWithinAmbient(memberDeclaration)
}

func (c *Checker) tryGetTypeFromEffectiveTypeNode(node *ast.Node) *Type {
	typeNode := getEffectiveTypeAnnotationNode(node)
	if typeNode != nil {
		return c.getTypeFromTypeNode(typeNode)
	}
}

func (c *Checker) isParameterOfContextSensitiveSignature(symbol *ast.Symbol) bool {
	decl := symbol.ValueDeclaration
	if decl == nil {
		return false
	}
	if isBindingElement(decl) {
		decl = walkUpBindingElementsAndPatterns(decl)
	}
	if isParameter(decl) {
		return c.isContextSensitiveFunctionOrObjectLiteralMethod(decl.Parent)
	}
	return false
}

func (c *Checker) getTypeOfVariableOrParameterOrProperty(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	if links.type_ == nil {
		t := c.getTypeOfVariableOrParameterOrPropertyWorker(symbol)
		// For a contextually typed parameter it is possible that a type has already
		// been assigned (in assignTypeToParameterAndFixTypeParameters), and we want
		// to preserve this type. In fact, we need to _prefer_ that type, but it won't
		// be assigned until contextual typing is complete, so we need to defer in
		// cases where contextual typing may take place.
		if !links.type_ && !c.isParameterOfContextSensitiveSignature(symbol) {
			links.type_ = t
		}
		return t
	}
	return links.type_
}

func (c *Checker) getTypeOfVariableOrParameterOrPropertyWorker(symbol *ast.Symbol) *Type {
	// Handle prototype property
	if symbol.Flags&ast.SymbolFlagsPrototype != 0 {
		return c.getTypeOfPrototypeProperty(symbol)
	}
	// CommonsJS require and module both have type any.
	if symbol == c.requireSymbol {
		return c.anyType
	}
	if symbol.Flags&ast.SymbolFlagsModuleExports != 0 && symbol.ValueDeclaration != nil {
		fileSymbol := c.getSymbolOfDeclaration(getSourceFileOfNode(symbol.ValueDeclaration))
		result := c.createSymbol(fileSymbol.Flags, "exports" /* as __String */)
		if fileSymbol.Declarations != nil {
			result.Declarations = fileSymbol.Declarations.slice()
		} else {
			result.Declarations = []never{}
		}
		result.Parent = symbol
		result.Links.target = fileSymbol
		if fileSymbol.ValueDeclaration != nil {
			result.ValueDeclaration = fileSymbol.ValueDeclaration
		}
		if fileSymbol.Members != nil {
			result.Members = NewMap(fileSymbol.Members)
		}
		if fileSymbol.Exports != nil {
			result.Exports = NewMap(fileSymbol.Exports)
		}
		members := createSymbolTable()
		members.set("exports" /* as __String */, result)
		return c.createAnonymousType(symbol, members, emptyArray, emptyArray, emptyArray)
	}
	Debug.assertIsDefined(symbol.ValueDeclaration)
	declaration := symbol.ValueDeclaration
	// Handle export default expressions
	if isSourceFile(declaration) && isJsonSourceFile(declaration) {
		if declaration.Statements.length == 0 {
			return c.emptyObjectType
		}
		return c.getWidenedType(c.getWidenedLiteralType(c.checkExpression(declaration.Statements[0].Expression)))
	}
	if isAccessor(declaration) {
		// Binding of certain patterns in JS code will occasionally mark symbols as both properties
		// and accessors. Here we dispatch to accessor resolution if needed.
		return c.getTypeOfAccessors(symbol)
	}

	// Handle variable, parameter or property
	if !c.pushTypeResolution(symbol, TypeSystemPropertyNameType) {
		// Symbol is property of some kind that is merged with something - should use `getTypeOfFuncClassEnumModule` and not `getTypeOfVariableOrParameterOrProperty`
		if symbol.Flags&ast.SymbolFlagsValueModule != 0 && symbol.Flags&ast.SymbolFlagsAssignment == 0 {
			return c.getTypeOfFuncClassEnumModule(symbol)
		}
		return c.reportCircularityError(symbol)
	}
	var t *Type
	if declaration.Kind == ast.KindExportAssignment {
		t = c.widenTypeForVariableLikeDeclaration(c.tryGetTypeFromEffectiveTypeNode(declaration) || c.checkExpressionCached(declaration.AsExportAssignment().Expression), declaration)
	} else if isBinaryExpression(declaration) || (isInJSFile(declaration) && (isCallExpression(declaration) || (isPropertyAccessExpression(declaration) || isBindableStaticElementAccessExpression(declaration)) && isBinaryExpression(declaration.Parent))) {
		t = c.getWidenedTypeForAssignmentDeclaration(symbol)
	} else if isPropertyAccessExpression(declaration) || isElementAccessExpression(declaration) || isIdentifier(declaration) || isStringLiteralLike(declaration) || isNumericLiteral(declaration) || isClassDeclaration(declaration) || isFunctionDeclaration(declaration) || (isMethodDeclaration(declaration) && !isObjectLiteralMethod(declaration)) || isMethodSignature(declaration) || isSourceFile(declaration) {
		// Symbol is property of some kind that is merged with something - should use `getTypeOfFuncClassEnumModule` and not `getTypeOfVariableOrParameterOrProperty`
		if symbol.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsMethod|ast.SymbolFlagsClass|ast.SymbolFlagsEnum|ast.SymbolFlagsValueModule) != 0 {
			return c.getTypeOfFuncClassEnumModule(symbol)
		}
		if isBinaryExpression(declaration.Parent) {
			t = c.getWidenedTypeForAssignmentDeclaration(symbol)
		} else {
			t = c.tryGetTypeFromEffectiveTypeNode(declaration) || c.anyType
		}
	} else if isPropertyAssignment(declaration) {
		t = c.tryGetTypeFromEffectiveTypeNode(declaration) || c.checkPropertyAssignment(declaration)
	} else if isJsxAttribute(declaration) {
		t = c.tryGetTypeFromEffectiveTypeNode(declaration) || c.checkJsxAttribute(declaration)
	} else if isShorthandPropertyAssignment(declaration) {
		t = c.tryGetTypeFromEffectiveTypeNode(declaration) || c.checkExpressionForMutableLocation(declaration.Name, CheckModeNormal)
	} else if isObjectLiteralMethod(declaration) {
		t = c.tryGetTypeFromEffectiveTypeNode(declaration) || c.checkObjectLiteralMethod(declaration, CheckModeNormal)
	} else if isParameter(declaration) || isPropertyDeclaration(declaration) || isPropertySignature(declaration) || isVariableDeclaration(declaration) || isBindingElement(declaration) || isJSDocPropertyLikeTag(declaration) {
		t = c.getWidenedTypeForVariableLikeDeclaration(declaration, true /*reportErrors*/)
	} else if isEnumDeclaration(declaration) {
		t = c.getTypeOfFuncClassEnumModule(symbol)
	} else if isEnumMember(declaration) {
		t = c.getTypeOfEnumMember(symbol)
	} else {
		return Debug.fail("Unhandled declaration kind! " + Debug.formatSyntaxKind(declaration.Kind) + " for " + Debug.formatSymbol(symbol))
	}

	if !c.popTypeResolution() {
		// Symbol is property of some kind that is merged with something - should use `getTypeOfFuncClassEnumModule` and not `getTypeOfVariableOrParameterOrProperty`
		if symbol.Flags&ast.SymbolFlagsValueModule != 0 && symbol.Flags&ast.SymbolFlagsAssignment == 0 {
			return c.getTypeOfFuncClassEnumModule(symbol)
		}
		return c.reportCircularityError(symbol)
	}
	return t
}

func (c *Checker) getAnnotatedAccessorTypeNode(accessor Union[AccessorDeclaration, PropertyDeclaration, undefined]) *TypeNode {
	if accessor != nil {
		switch accessor.Kind {
		case ast.KindGetAccessor:
			getterTypeAnnotation := getEffectiveReturnTypeNode(accessor)
			return getterTypeAnnotation
		case ast.KindSetAccessor:
			setterTypeAnnotation := getEffectiveSetAccessorTypeAnnotationNode(accessor)
			return setterTypeAnnotation
		case ast.KindPropertyDeclaration:
			Debug.assert(hasAccessorModifier(accessor))
			accessorTypeAnnotation := getEffectiveTypeAnnotationNode(accessor)
			return accessorTypeAnnotation
		}
	}
	return nil
}

func (c *Checker) getAnnotatedAccessorType(accessor Union[AccessorDeclaration, PropertyDeclaration, undefined]) *Type {
	node := c.getAnnotatedAccessorTypeNode(accessor)
	return node && c.getTypeFromTypeNode(node)
}

func (c *Checker) getAnnotatedAccessorThisParameter(accessor AccessorDeclaration) *ast.Symbol {
	parameter := c.getAccessorThisParameter(accessor)
	return parameter && parameter.Symbol
}

func (c *Checker) getThisTypeOfDeclaration(declaration SignatureDeclaration) *Type {
	return c.getThisTypeOfSignature(c.getSignatureFromDeclaration(declaration))
}

func (c *Checker) getTypeOfAccessors(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	if links.type_ == nil {
		if !c.pushTypeResolution(symbol, TypeSystemPropertyNameType) {
			return c.errorType
		}
		getter := getDeclarationOfKind(symbol, ast.KindGetAccessor)
		setter := getDeclarationOfKind(symbol, ast.KindSetAccessor)
		accessor := tryCast(getDeclarationOfKind(symbol, ast.KindPropertyDeclaration), isAutoAccessorPropertyDeclaration)

		// We try to resolve a getter type annotation, a setter type annotation, or a getter function
		// body return type inference, in that order.
		t := getter && isInJSFile(getter) && c.getTypeForDeclarationFromJSDocComment(getter) || c.getAnnotatedAccessorType(getter) || c.getAnnotatedAccessorType(setter) || c.getAnnotatedAccessorType(accessor) || getter && getter.Body && c.getReturnTypeFromBody(getter) || accessor && accessor.Initializer && c.getWidenedTypeForVariableLikeDeclaration(accessor, true /*reportErrors*/)
		if !(t) {
			if setter != nil && !c.isPrivateWithinAmbient(setter) {
				c.errorOrSuggestion(c.noImplicitAny, setter, Diagnostics.Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_parameter_type_annotation, c.symbolToString(symbol))
			} else if getter != nil && !c.isPrivateWithinAmbient(getter) {
				c.errorOrSuggestion(c.noImplicitAny, getter, Diagnostics.Property_0_implicitly_has_type_any_because_its_get_accessor_lacks_a_return_type_annotation, c.symbolToString(symbol))
			} else if accessor != nil && !c.isPrivateWithinAmbient(accessor) {
				c.errorOrSuggestion(c.noImplicitAny, accessor, Diagnostics.Member_0_implicitly_has_an_1_type, c.symbolToString(symbol), "any")
			}
			t = c.anyType
		}
		if !c.popTypeResolution() {
			if c.getAnnotatedAccessorTypeNode(getter) != nil {
				c.error(getter, Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, c.symbolToString(symbol))
			} else if c.getAnnotatedAccessorTypeNode(setter) != nil {
				c.error(setter, Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, c.symbolToString(symbol))
			} else if c.getAnnotatedAccessorTypeNode(accessor) != nil {
				c.error(setter, Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, c.symbolToString(symbol))
			} else if getter != nil && c.noImplicitAny {
				c.error(getter, Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, c.symbolToString(symbol))
			}
			t = c.anyType
		}
		if links.type_ == nil {
			links.type_ = t
		}
	}
	return links.type_
}

func (c *Checker) getWriteTypeOfAccessors(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	if links.writeType == nil {
		if !c.pushTypeResolution(symbol, TypeSystemPropertyNameWriteType) {
			return c.errorType
		}

		setter := ifNotNilElse(getDeclarationOfKind(symbol, ast.KindSetAccessor), tryCast(getDeclarationOfKind(symbol, ast.KindPropertyDeclaration), isAutoAccessorPropertyDeclaration))
		writeType := c.getAnnotatedAccessorType(setter)
		if !c.popTypeResolution() {
			if c.getAnnotatedAccessorTypeNode(setter) != nil {
				c.error(setter, Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, c.symbolToString(symbol))
			}
			writeType = c.anyType
		}
		// Absent an explicit setter type annotation we use the read type of the accessor.
		if links.writeType == nil {
			links.writeType = writeType || c.getTypeOfAccessors(symbol)
		}
	}
	return links.writeType
}

func (c *Checker) getBaseTypeVariableOfClass(symbol *ast.Symbol) *Type {
	baseConstructorType := c.getBaseConstructorTypeOfClass(c.getDeclaredTypeOfClassOrInterface(symbol))
	switch {
	case baseConstructorType.flags&TypeFlagsTypeVariable != 0:
		return baseConstructorType
	case baseConstructorType.flags&TypeFlagsIntersection != 0:
		return core.Find(baseConstructorType.AsIntersectionType().types, func(t *Type) bool {
			return t.flags&TypeFlagsTypeVariable != 0
		})
	default:
		return nil
	}
}

func (c *Checker) getTypeOfFuncClassEnumModule(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	originalLinks := links
	if links.type_ == nil {
		expando := symbol.ValueDeclaration && c.getSymbolOfExpando(symbol.ValueDeclaration, false /*allowDeclaration*/)
		if expando != nil {
			merged := c.mergeJSSymbols(symbol, expando)
			if merged != nil {
				// note:we overwrite links because we just cloned the symbol
				symbol = merged
				links = merged.Links
			}
		}
		originalLinks.type_ = /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.type = getTypeOfFuncClassEnumModuleWorker(symbol) */ TODO
	}
	return links.type_
}

func (c *Checker) getTypeOfFuncClassEnumModuleWorker(symbol *ast.Symbol) *Type {
	declaration := symbol.ValueDeclaration
	if symbol.Flags&ast.SymbolFlagsModule != 0 && isShorthandAmbientModuleSymbol(symbol) {
		return c.anyType
	} else if declaration != nil && (declaration.Kind == ast.KindBinaryExpression || isAccessExpression(declaration) && declaration.Parent.Kind == ast.KindBinaryExpression) {
		return c.getWidenedTypeForAssignmentDeclaration(symbol)
	} else if symbol.Flags&ast.SymbolFlagsValueModule != 0 && declaration != nil && isSourceFile(declaration) && declaration.CommonJsModuleIndicator != nil {
		resolvedModule := c.resolveExternalModuleSymbol(symbol)
		if resolvedModule != symbol {
			if !c.pushTypeResolution(symbol, TypeSystemPropertyNameType) {
				return c.errorType
			}
			exportEquals := c.getMergedSymbol(symbol.Exports.get(InternalSymbolNameExportEquals))
			t := c.getWidenedTypeForAssignmentDeclaration(exportEquals, ifElse(exportEquals == resolvedModule, nil, resolvedModule))
			if !c.popTypeResolution() {
				return c.reportCircularityError(symbol)
			}
			return t
		}
	}
	t := c.createObjectType(ObjectFlagsAnonymous, symbol)
	if symbol.Flags&ast.SymbolFlagsClass != 0 {
		baseTypeVariable := c.getBaseTypeVariableOfClass(symbol)
		if baseTypeVariable != nil {
			return c.getIntersectionType([]*Type{t, baseTypeVariable})
		} else {
			return t
		}
	} else {
		if c.strictNullChecks && symbol.Flags&ast.SymbolFlagsOptional != 0 {
			return c.getOptionalType(t, true /*isProperty*/)
		} else {
			return t
		}
	}
}

func (c *Checker) getTypeOfEnumMember(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	return links.type_ || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.type = getDeclaredTypeOfEnumMember(symbol) */ TODO)
}

func (c *Checker) getTypeOfAlias(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	if links.type_ == nil {
		if !c.pushTypeResolution(symbol, TypeSystemPropertyNameType) {
			return c.errorType
		}
		targetSymbol := c.resolveAlias(symbol)
		exportSymbol := symbol.Declarations && c.getTargetOfAliasDeclaration(c.getDeclarationOfAliasSymbol(symbol), true /*dontRecursivelyResolve*/)
		declaredType := firstDefined(exportSymbol. /* ? */ declarations, func(d Declaration) *Type {
			if isExportAssignment(d) {
				return c.tryGetTypeFromEffectiveTypeNode(d)
			} else {
				return nil
			}
		})

		// It only makes sense to get the type of a value symbol. If the result of resolving
		// the alias is not a value, then it has no type. To get the type associated with a
		// type symbol, call getDeclaredTypeOfSymbol.
		// This check is important because without it, a call to getTypeOfSymbol could end
		// up recursively calling getTypeOfAlias, causing a stack overflow.
		if links.type_ == nil {
			links.type_ = ifElse(exportSymbol. /* ? */ declarations != nil && c.isDuplicatedCommonJSExport(exportSymbol.Declarations) && symbol.Declarations.length != 0, c.getFlowTypeFromCommonJSExport(exportSymbol), ifElse(c.isDuplicatedCommonJSExport(symbol.Declarations), c.autoType, ifElse(declaredType != nil, declaredType, ifElse(c.getSymbolFlags(targetSymbol)&ast.SymbolFlagsValue != 0, c.getTypeOfSymbol(targetSymbol), c.errorType))))
		}

		if !c.popTypeResolution() {
			c.reportCircularityError(ifNotNilElse(exportSymbol, symbol))
			if links.type_ == nil {
				links.type_ = c.errorType
			}
			return links.type_
		}
	}
	return links.type_
}

func (c *Checker) getTypeOfInstantiatedSymbol(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	return links.type_ || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.type = instantiateType(getTypeOfSymbol(links.target!), links.mapper) */ TODO)
}

func (c *Checker) getWriteTypeOfInstantiatedSymbol(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	return links.writeType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.writeType = instantiateType(getWriteTypeOfSymbol(links.target!), links.mapper) */ TODO)
}

func (c *Checker) reportCircularityError(symbol *ast.Symbol) IntrinsicType {
	declaration := symbol.ValueDeclaration
	// Check if variable has type annotation that circularly references the variable itself
	if declaration != nil {
		if getEffectiveTypeAnnotationNode(declaration) != nil {
			c.error(symbol.ValueDeclaration, Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, c.symbolToString(symbol))
			return c.errorType
		}
		// Check if variable has initializer that circularly references the variable itself
		if c.noImplicitAny && (declaration.Kind != ast.KindParameter || declaration.AsHasInitializer().Initializer != nil) {
			c.error(symbol.ValueDeclaration, Diagnostics._0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer, c.symbolToString(symbol))
		}
	} else if symbol.Flags&ast.SymbolFlagsAlias != 0 {
		node := c.getDeclarationOfAliasSymbol(symbol)
		if node != nil {
			c.error(node, Diagnostics.Circular_definition_of_import_alias_0, c.symbolToString(symbol))
		}
	}
	// Circularities could also result from parameters in function expressions that end up
	// having themselves as contextual types following type argument inference. In those cases
	// we have already reported an implicit any error so we don't report anything here.
	return c.anyType
}

func (c *Checker) getTypeOfSymbolWithDeferredType(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	if links.type_ == nil {
		Debug.assertIsDefined(links.deferralParent)
		Debug.assertIsDefined(links.deferralConstituents)
		if links.deferralParent.flags&TypeFlagsUnion != 0 {
			links.type_ = c.getUnionType(links.deferralConstituents)
		} else {
			links.type_ = c.getIntersectionType(links.deferralConstituents)
		}
	}
	return links.type_
}

func (c *Checker) getWriteTypeOfSymbolWithDeferredType(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	if links.writeType == nil && links.deferralWriteConstituents != nil {
		Debug.assertIsDefined(links.deferralParent)
		Debug.assertIsDefined(links.deferralConstituents)
		if links.deferralParent.flags&TypeFlagsUnion != 0 {
			links.writeType = c.getUnionType(links.deferralWriteConstituents)
		} else {
			links.writeType = c.getIntersectionType(links.deferralWriteConstituents)
		}
	}
	return links.writeType
}

/**
 * Distinct write types come only from set accessors, but synthetic union and intersection
 * properties deriving from set accessors will either pre-compute or defer the union or
 * intersection of the writeTypes of their constituents.
 */

func (c *Checker) getWriteTypeOfSymbol(symbol *ast.Symbol) *Type {
	checkFlags := getCheckFlags(symbol)
	if symbol.Flags&ast.SymbolFlagsProperty != 0 {
		switch {
		case checkFlags&ast.CheckFlagsSyntheticProperty != 0:
			if checkFlags&ast.CheckFlagsDeferredType != 0 {
				return c.getWriteTypeOfSymbolWithDeferredType(symbol) || c.getTypeOfSymbolWithDeferredType(symbol)
			} else {
				return (symbol.(TransientSymbol)).Links.writeType || (symbol.(TransientSymbol)).Links.type_
			}
		default:
			return c.removeMissingType(c.getTypeOfSymbol(symbol), symbol.Flags&ast.SymbolFlagsOptional != 0)
		}
	}
	if symbol.Flags&ast.SymbolFlagsAccessor != 0 {
		if checkFlags&ast.CheckFlagsInstantiated != 0 {
			return c.getWriteTypeOfInstantiatedSymbol(symbol)
		} else {
			return c.getWriteTypeOfAccessors(symbol)
		}
	}
	return c.getTypeOfSymbol(symbol)
}

func (c *Checker) getTypeOfSymbol(symbol *ast.Symbol) *Type {
	checkFlags := getCheckFlags(symbol)
	if checkFlags&ast.CheckFlagsDeferredType != 0 {
		return c.getTypeOfSymbolWithDeferredType(symbol)
	}
	if checkFlags&ast.CheckFlagsInstantiated != 0 {
		return c.getTypeOfInstantiatedSymbol(symbol)
	}
	if checkFlags&ast.CheckFlagsMapped != 0 {
		return c.getTypeOfMappedSymbol(symbol.(MappedSymbol))
	}
	if checkFlags&ast.CheckFlagsReverseMapped != 0 {
		return c.getTypeOfReverseMappedSymbol(symbol.(ReverseMappedSymbol))
	}
	if symbol.Flags&(ast.SymbolFlagsVariable|ast.SymbolFlagsProperty) != 0 {
		return c.getTypeOfVariableOrParameterOrProperty(symbol)
	}
	if symbol.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsMethod|ast.SymbolFlagsClass|ast.SymbolFlagsEnum|ast.SymbolFlagsValueModule) != 0 {
		return c.getTypeOfFuncClassEnumModule(symbol)
	}
	if symbol.Flags&ast.SymbolFlagsEnumMember != 0 {
		return c.getTypeOfEnumMember(symbol)
	}
	if symbol.Flags&ast.SymbolFlagsAccessor != 0 {
		return c.getTypeOfAccessors(symbol)
	}
	if symbol.Flags&ast.SymbolFlagsAlias != 0 {
		return c.getTypeOfAlias(symbol)
	}
	return c.errorType
}

func (c *Checker) getNonMissingTypeOfSymbol(symbol *ast.Symbol) *Type {
	return c.removeMissingType(c.getTypeOfSymbol(symbol), symbol.Flags&ast.SymbolFlagsOptional != 0)
}

func (c *Checker) isReferenceToSomeType(t *Type, targets []*Type) bool {
	if t == nil || (getObjectFlags(t)&ObjectFlagsReference) == 0 {
		return false
	}
	for _, target := range targets {
		if t.AsTypeReference().target == target {
			return true
		}
	}
	return false
}

func (c *Checker) isReferenceToType(t *Type, target *Type) bool {
	return t != nil && target != nil && (getObjectFlags(t)&ObjectFlagsReference) != 0 && t.AsTypeReference().target == target
}

func (c *Checker) getTargetType(t *Type) *Type {
	if getObjectFlags(t)&ObjectFlagsReference != 0 {
		return t.AsTypeReference().target
	} else {
		return t
	}
}

// TODO: GH#18217 If `checkBase` is undefined, we should not call this because this will always return false.
func (c *Checker) hasBaseType(t *Type, checkBase *Type) bool {
	return check(t)
	check := func(t *Type) bool {
		if getObjectFlags(t)&(ObjectFlagsClassOrInterface|ObjectFlagsReference) != 0 {
			target := c.getTargetType(t).AsInterfaceType()
			return target == checkBase || core.Some(c.getBaseTypes(target), check)
		} else if t.flags&TypeFlagsIntersection != 0 {
			return core.Some(t.AsIntersectionType().types, check)
		}
		return false
	}

}

// Appends the type parameters given by a list of declarations to a set of type parameters and returns the resulting set.
// The function allocates a new array if the input type parameter set is undefined, but otherwise it modifies the set
// in-place and returns the same array.
func (c *Checker) appendTypeParameters(typeParameters *[]TypeParameter, declarations []TypeParameterDeclaration) *[]TypeParameter {
	for _, declaration := range declarations {
		typeParameters = core.AppendIfUnique(typeParameters, c.getDeclaredTypeOfTypeParameter(c.getSymbolOfDeclaration(declaration)))
	}
	return typeParameters
}

// Return the outer type parameters of a node or undefined if the node has no outer type parameters.
func (c *Checker) getOuterTypeParameters(node *ast.Node, includeThisTypes bool) *[]TypeParameter {
	for true {
		node = node.Parent
		// TODO: GH#18217 Use SourceFile kind check instead
		if node && isBinaryExpression(node) {
			// prototype assignments get the outer type parameters of their constructor function
			assignmentKind := getAssignmentDeclarationKind(node)
			if assignmentKind == AssignmentDeclarationKindPrototype || assignmentKind == AssignmentDeclarationKindPrototypeProperty {
				symbol := c.getSymbolOfDeclaration(node.Left /* as BindableStaticNameExpression | PropertyAssignment */)
				if symbol && symbol.Parent != nil && findAncestor(symbol.Parent.ValueDeclaration, func(d *ast.Node) bool {
					return node == d
				}) == nil {
					node = symbol.Parent.ValueDeclaration
				}
			}
		}
		if !node {
			return nil
		}
		kind := node.Kind
		switch kind {
		case ast.KindClassDeclaration,
			ast.KindClassExpression,
			ast.KindInterfaceDeclaration,
			ast.KindCallSignature,
			ast.KindConstructSignature,
			ast.KindMethodSignature,
			ast.KindFunctionType,
			ast.KindConstructorType,
			ast.KindJSDocFunctionType,
			ast.KindFunctionDeclaration,
			ast.KindMethodDeclaration,
			ast.KindFunctionExpression,
			ast.KindArrowFunction,
			ast.KindTypeAliasDeclaration,
			ast.KindJSDocTemplateTag,
			ast.KindJSDocTypedefTag,
			ast.KindJSDocEnumTag,
			ast.KindJSDocCallbackTag,
			ast.KindMappedType,
			ast.KindConditionalType:
			outerTypeParameters := c.getOuterTypeParameters(node, includeThisTypes)
			if (kind == ast.KindFunctionExpression || kind == ast.KindArrowFunction || isObjectLiteralMethod(node)) && c.isContextSensitive(node /* as Expression | MethodDeclaration */) {
				signature := firstOrUndefined(c.getSignaturesOfType(c.getTypeOfSymbol(c.getSymbolOfDeclaration(node.AsFunctionLikeDeclaration())), SignatureKindCall))
				if signature != nil && signature.typeParameters != nil {
					return []TypeParameter{ /* TODO(TS-TO-GO) Expression SpreadElement: ...(outerTypeParameters || emptyArray) */ /* TODO(TS-TO-GO) Expression SpreadElement: ...signature.typeParameters */ }
				}
			}
			if kind == ast.KindMappedType {
				return append(outerTypeParameters, c.getDeclaredTypeOfTypeParameter(c.getSymbolOfDeclaration(node.AsMappedTypeNode().TypeParameter)))
			} else if kind == ast.KindConditionalType {
				return core.Concatenate(outerTypeParameters, c.getInferTypeParameters(node.AsConditionalTypeNode()))
			}
			outerAndOwnTypeParameters := c.appendTypeParameters(outerTypeParameters, getEffectiveTypeParameterDeclarations(node.AsDeclarationWithTypeParameters()))
			thisType := includeThisTypes && (kind == ast.KindClassDeclaration || kind == ast.KindClassExpression || kind == ast.KindInterfaceDeclaration || c.isJSConstructor(node)) && c.getDeclaredTypeOfClassOrInterface(c.getSymbolOfDeclaration(node /* as ClassLikeDeclaration | InterfaceDeclaration */)).thisType
			if thisType {
				return append(outerAndOwnTypeParameters, thisType)
			} else {
				return outerAndOwnTypeParameters
			}
		case ast.KindJSDocParameterTag:
			paramSymbol := getParameterSymbolFromJSDoc(node.AsJSDocParameterTag())
			if paramSymbol != nil {
				node = paramSymbol.ValueDeclaration
			}
		case ast.KindJSDoc:
			outerTypeParameters := c.getOuterTypeParameters(node, includeThisTypes)
			if node.AsJSDoc().Tags != nil {
				return c.appendTypeParameters(outerTypeParameters, flatMap(node.AsJSDoc().Tags, func(t JSDocTag) *NodeArray[TypeParameterDeclaration] {
					if isJSDocTemplateTag(t) {
						return t.TypeParameters
					} else {
						return nil
					}
				}))
			} else {
				return outerTypeParameters
			}
		}
	}
}

// The outer type parameters are those defined by enclosing generic classes, methods, or functions.
func (c *Checker) getOuterTypeParametersOfClassOrInterface(symbol *ast.Symbol) *[]TypeParameter {
	var declaration Declaration
	if symbol.Flags&ast.SymbolFlagsClass != 0 || symbol.Flags&ast.SymbolFlagsFunction != 0 {
		declaration = symbol.ValueDeclaration
	} else {
		declaration = symbol.Declarations. /* ? */ find(func(decl Declaration) bool {
			if decl.Kind == ast.KindInterfaceDeclaration {
				return true
			}
			if decl.Kind != ast.KindVariableDeclaration {
				return false
			}
			initializer := decl.AsVariableDeclaration().Initializer
			return initializer != nil && (initializer.Kind == ast.KindFunctionExpression || initializer.Kind == ast.KindArrowFunction)
		})
	}
	Debug.assert(declaration != nil, "Class was missing valueDeclaration -OR- non-class had no interface declarations")
	return c.getOuterTypeParameters(declaration)
}

// The local type parameters are the combined set of type parameters from all declarations of the class,
// interface, or type alias.
func (c *Checker) getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol *ast.Symbol) *[]TypeParameter {
	if symbol.Declarations == nil {
		return
	}
	var result *[]TypeParameter
	for _, node := range symbol.Declarations {
		if node.Kind == ast.KindInterfaceDeclaration || node.Kind == ast.KindClassDeclaration || node.Kind == ast.KindClassExpression || c.isJSConstructor(node) || isTypeAlias(node) {
			declaration := node /* as InterfaceDeclaration | TypeAliasDeclaration | JSDocTypedefTag | JSDocCallbackTag */
			result = c.appendTypeParameters(result, getEffectiveTypeParameterDeclarations(declaration))
		}
	}
	return result
}

// The full set of type parameters for a generic class or interface type consists of its outer type parameters plus
// its locally declared type parameters.
func (c *Checker) getTypeParametersOfClassOrInterface(symbol *ast.Symbol) *[]TypeParameter {
	return core.Concatenate(c.getOuterTypeParametersOfClassOrInterface(symbol), c.getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol))
}

// A type is a mixin constructor if it has a single construct signature taking no type parameters and a single
// rest parameter of type any[].
func (c *Checker) isMixinConstructorType(t *Type) bool {
	signatures := c.getSignaturesOfType(t, SignatureKindConstruct)
	if signatures.length == 1 {
		s := signatures[0]
		if s.typeParameters == nil && s.parameters.length == 1 && signatureHasRestParameter(s) {
			paramType := c.getTypeOfParameter(s.parameters[0])
			return c.isTypeAny(paramType) || c.getElementTypeOfArrayType(paramType) == c.anyType
		}
	}
	return false
}

func (c *Checker) isConstructorType(t *Type) bool {
	if c.getSignaturesOfType(t, SignatureKindConstruct).length > 0 {
		return true
	}
	if t.flags&TypeFlagsTypeVariable != 0 {
		constraint := c.getBaseConstraintOfType(t)
		return constraint != nil && c.isMixinConstructorType(constraint)
	}
	return false
}

func (c *Checker) getBaseTypeNodeOfClass(t InterfaceType) *ExpressionWithTypeArguments {
	decl := getClassLikeDeclarationOfSymbol(t.symbol)
	return decl && getEffectiveBaseTypeNode(decl)
}

func (c *Checker) getConstructorsForTypeArguments(t *Type, typeArgumentNodes *[]TypeNode, location *ast.Node) []Signature {
	typeArgCount := length(typeArgumentNodes)
	isJavascript := isInJSFile(location)
	return core.Filter(c.getSignaturesOfType(t, SignatureKindConstruct), func(sig Signature) bool {
		return (isJavascript || typeArgCount >= c.getMinTypeArgumentCount(sig.typeParameters)) && typeArgCount <= length(sig.typeParameters)
	})
}

func (c *Checker) getInstantiatedConstructorsForTypeArguments(t *Type, typeArgumentNodes *[]TypeNode, location *ast.Node) []Signature {
	signatures := c.getConstructorsForTypeArguments(t, typeArgumentNodes, location)
	typeArguments := core.Map(typeArgumentNodes, c.getTypeFromTypeNode)
	return core.SameMap(signatures, func(sig Signature) Signature {
		if core.Some(sig.typeParameters) {
			return c.getSignatureInstantiation(sig, typeArguments, isInJSFile(location))
		} else {
			return sig
		}
	})
}

/**
 * The base constructor of a class can resolve to
 * * undefinedType if the class has no extends clause,
 * * errorType if an error occurred during resolution of the extends expression,
 * * nullType if the extends expression is the null value,
 * * anyType if the extends expression has type any, or
 * * an object type with at least one construct signature.
 */

func (c *Checker) getBaseConstructorTypeOfClass(t InterfaceType) *Type {
	if t.resolvedBaseConstructorType == nil {
		decl := getClassLikeDeclarationOfSymbol(t.symbol)
		extended := decl && getEffectiveBaseTypeNode(decl)
		baseTypeNode := c.getBaseTypeNodeOfClass(t)
		if baseTypeNode == nil {
			t.resolvedBaseConstructorType = c.undefinedType
			return t.resolvedBaseConstructorType
		}
		if !c.pushTypeResolution(t, TypeSystemPropertyNameResolvedBaseConstructorType) {
			return c.errorType
		}
		baseConstructorType := c.checkExpression(baseTypeNode.Expression)
		if extended != nil && baseTypeNode != extended {
			Debug.assert(extended.TypeArguments == nil)
			// Because this is in a JS file, and baseTypeNode is in an @extends tag
			c.checkExpression(extended.Expression)
		}
		if baseConstructorType.flags&(TypeFlagsObject|TypeFlagsIntersection) != 0 {
			// Resolving the members of a class requires us to resolve the base class of that class.
			// We force resolution here such that we catch circularities now.
			c.resolveStructuredTypeMembers(baseConstructorType.AsObjectType())
		}
		if !c.popTypeResolution() {
			c.error(t.symbol.ValueDeclaration, Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_base_expression, c.symbolToString(t.symbol))
			if t.resolvedBaseConstructorType == nil {
				t.resolvedBaseConstructorType = c.errorType
			}
			return t.resolvedBaseConstructorType
		}
		if baseConstructorType.flags&TypeFlagsAny == 0 && baseConstructorType != c.nullWideningType && !c.isConstructorType(baseConstructorType) {
			err := c.error(baseTypeNode.Expression, Diagnostics.Type_0_is_not_a_constructor_function_type, c.typeToString(baseConstructorType))
			if baseConstructorType.flags&TypeFlagsTypeParameter != 0 {
				constraint := c.getConstraintFromTypeParameter(baseConstructorType)
				var ctorReturn *Type = c.unknownType
				if constraint != nil {
					ctorSig := c.getSignaturesOfType(constraint, SignatureKindConstruct)
					if ctorSig[0] {
						ctorReturn = c.getReturnTypeOfSignature(ctorSig[0])
					}
				}
				if baseConstructorType.symbol.Declarations != nil {
					addRelatedInfo(err, createDiagnosticForNode(baseConstructorType.symbol.Declarations[0], Diagnostics.Did_you_mean_for_0_to_be_constrained_to_type_new_args_Colon_any_1, c.symbolToString(baseConstructorType.symbol), c.typeToString(ctorReturn)))
				}
			}
			if t.resolvedBaseConstructorType == nil {
				t.resolvedBaseConstructorType = c.errorType
			}
			return t.resolvedBaseConstructorType
		}
		if t.resolvedBaseConstructorType == nil {
			t.resolvedBaseConstructorType = baseConstructorType
		}
	}
	return t.resolvedBaseConstructorType
}

func (c *Checker) getImplementsTypes(t InterfaceType) []BaseType {
	var resolvedImplementsTypes []BaseType = emptyArray
	if t.symbol.Declarations != nil {
		for _, declaration := range t.symbol.Declarations {
			implementsTypeNodes := getEffectiveImplementsTypeNodes(declaration.AsClassLikeDeclaration())
			if implementsTypeNodes == nil {
				continue
			}
			for _, node := range implementsTypeNodes {
				implementsType := c.getTypeFromTypeNode(node)
				if !c.isErrorType(implementsType) {
					if resolvedImplementsTypes == emptyArray {
						resolvedImplementsTypes = []ObjectType{implementsType.AsObjectType()}
					} else {
						resolvedImplementsTypes.push(implementsType)
					}
				}
			}
		}
	}
	return resolvedImplementsTypes
}

func (c *Checker) reportCircularBaseType(node *ast.Node, t *Type) {
	c.error(node, Diagnostics.Type_0_recursively_references_itself_as_a_base_type, c.typeToString(t, nil /*enclosingDeclaration*/, TypeFormatFlagsWriteArrayAsGenericType))
}

func (c *Checker) getBaseTypes(t InterfaceType) []BaseType {
	if !t.baseTypesResolved {
		if c.pushTypeResolution(t, TypeSystemPropertyNameResolvedBaseTypes) {
			if t.objectFlags&ObjectFlagsTuple != 0 {
				t.resolvedBaseTypes = []ObjectType{c.getTupleBaseType(t.AsTupleType())}
			} else if t.symbol.Flags&(ast.SymbolFlagsClass|ast.SymbolFlagsInterface) != 0 {
				if t.symbol.Flags&ast.SymbolFlagsClass != 0 {
					c.resolveBaseTypesOfClass(t)
				}
				if t.symbol.Flags&ast.SymbolFlagsInterface != 0 {
					c.resolveBaseTypesOfInterface(t)
				}
			} else {
				Debug.fail("type must be class or interface")
			}
			if !c.popTypeResolution() && t.symbol.Declarations != nil {
				for _, declaration := range t.symbol.Declarations {
					if declaration.Kind == ast.KindClassDeclaration || declaration.Kind == ast.KindInterfaceDeclaration {
						c.reportCircularBaseType(declaration, t)
					}
				}
			}
		}
		t.baseTypesResolved = true
	}
	return t.resolvedBaseTypes
}

func (c *Checker) getTupleBaseType(type_ TupleType) ObjectType {
	elementTypes := core.SameMap(type_.typeParameters, func(t TypeParameter, i number) *Type {
		if type_.elementFlags[i]&ElementFlagsVariadic != 0 {
			return c.getIndexedAccessType(t, c.numberType)
		} else {
			return t
		}
	})
	return c.createArrayType(c.getUnionType(elementTypes || emptyArray), type_.readonly)
}

func (c *Checker) resolveBaseTypesOfClass(t InterfaceType) []BaseType {
	t.resolvedBaseTypes = resolvingEmptyArray
	baseConstructorType := c.getApparentType(c.getBaseConstructorTypeOfClass(t))
	if baseConstructorType.flags&(TypeFlagsObject|TypeFlagsIntersection|TypeFlagsAny) == 0 {
		t.resolvedBaseTypes = emptyArray
		return t.resolvedBaseTypes
	}
	baseTypeNode := c.getBaseTypeNodeOfClass(t)
	var baseType *Type
	var originalBaseType *Type
	if baseConstructorType.symbol {
		originalBaseType = c.getDeclaredTypeOfSymbol(baseConstructorType.symbol)
	} else {
		originalBaseType = nil
	}
	if baseConstructorType.symbol && baseConstructorType.symbol.Flags&ast.SymbolFlagsClass != 0 && c.areAllOuterTypeParametersApplied(originalBaseType) {
		// When base constructor type is a class with no captured type arguments we know that the constructors all have the same type parameters as the
		// class and all return the instance type of the class. There is no need for further checks and we can apply the
		// type arguments in the same manner as a type reference to get the same error reporting experience.
		baseType = c.getTypeFromClassOrInterfaceReference(baseTypeNode, baseConstructorType.symbol)
	} else if baseConstructorType.flags&TypeFlagsAny != 0 {
		baseType = baseConstructorType
	} else {
		// The class derives from a "class-like" constructor function, check that we have at least one construct signature
		// with a matching number of type parameters and use the return type of the first instantiated signature. Elsewhere
		// we check that all instantiated signatures return the same type.
		constructors := c.getInstantiatedConstructorsForTypeArguments(baseConstructorType, baseTypeNode.TypeArguments, baseTypeNode)
		if constructors.length == 0 {
			c.error(baseTypeNode.Expression, Diagnostics.No_base_constructor_has_the_specified_number_of_type_arguments)
			t.resolvedBaseTypes = emptyArray
			return t.resolvedBaseTypes
		}
		baseType = c.getReturnTypeOfSignature(constructors[0])
	}

	if c.isErrorType(baseType) {
		t.resolvedBaseTypes = emptyArray
		return t.resolvedBaseTypes
	}
	reducedBaseType := c.getReducedType(baseType)
	if !c.isValidBaseType(reducedBaseType) {
		elaboration := c.elaborateNeverIntersection(nil, baseType)
		diagnostic := chainDiagnosticMessages(elaboration, Diagnostics.Base_constructor_return_type_0_is_not_an_object_type_or_intersection_of_object_types_with_statically_known_members, c.typeToString(reducedBaseType))
		c.diagnostics.add(createDiagnosticForNodeFromMessageChain(getSourceFileOfNode(baseTypeNode.Expression), baseTypeNode.Expression, diagnostic))
		t.resolvedBaseTypes = emptyArray
		return t.resolvedBaseTypes
	}
	if t == reducedBaseType || c.hasBaseType(reducedBaseType, t) {
		c.error(t.symbol.ValueDeclaration, Diagnostics.Type_0_recursively_references_itself_as_a_base_type, c.typeToString(t, nil /*enclosingDeclaration*/, TypeFormatFlagsWriteArrayAsGenericType))
		t.resolvedBaseTypes = emptyArray
		return t.resolvedBaseTypes
	}
	if t.resolvedBaseTypes == resolvingEmptyArray {
		// Circular reference, likely through instantiation of default parameters
		// (otherwise there'd be an error from hasBaseType) - this is fine, but `.members` should be reset
		// as `getIndexedAccessType` via `instantiateType` via `getTypeFromClassOrInterfaceReference` forces a
		// partial instantiation of the members without the base types fully resolved
		t.members = nil
	}
	t.resolvedBaseTypes = []BaseType{reducedBaseType}
	return t.resolvedBaseTypes
}

func (c *Checker) areAllOuterTypeParametersApplied(t *Type) bool {
	// An unapplied type parameter has its symbol still the same as the matching argument symbol.
	// Since parameters are applied outer-to-inner, only the last outer parameter needs to be checked.
	outerTypeParameters := t.AsInterfaceType().outerTypeParameters
	if outerTypeParameters != nil {
		last := outerTypeParameters.length - 1
		typeArguments := c.getTypeArguments(t.AsTypeReference())
		return outerTypeParameters[last].symbol != typeArguments[last].symbol
	}
	return true
}

// A valid base type is `any`, an object type or intersection of object types.
func (c *Checker) isValidBaseType(t *Type) bool {
	if t.flags&TypeFlagsTypeParameter != 0 {
		constraint := c.getBaseConstraintOfType(t)
		if constraint != nil {
			return c.isValidBaseType(constraint)
		}
	}
	// TODO: Given that we allow type parmeters here now, is this `!isGenericMappedType(type)` check really needed?
	// There's no reason a `T` should be allowed while a `Readonly<T>` should not.
	return t.flags&(TypeFlagsObject|TypeFlagsNonPrimitive|TypeFlagsAny) != 0 && !c.isGenericMappedType(t) || t.flags&TypeFlagsIntersection != 0 && core.Every(t.AsIntersectionType().types, c.isValidBaseType)
}

func (c *Checker) resolveBaseTypesOfInterface(t InterfaceType) {
	t.resolvedBaseTypes = t.resolvedBaseTypes || emptyArray
	if t.symbol.Declarations != nil {
		for _, declaration := range t.symbol.Declarations {
			if declaration.Kind == ast.KindInterfaceDeclaration && getInterfaceBaseTypeNodes(declaration.AsInterfaceDeclaration()) != nil {
				for _, node := range getInterfaceBaseTypeNodes(declaration.AsInterfaceDeclaration()) {
					baseType := c.getReducedType(c.getTypeFromTypeNode(node))
					if !c.isErrorType(baseType) {
						if c.isValidBaseType(baseType) {
							if t != baseType && !c.hasBaseType(baseType, t) {
								if t.resolvedBaseTypes == emptyArray {
									t.resolvedBaseTypes = []ObjectType{baseType.AsObjectType()}
								} else {
									t.resolvedBaseTypes.push(baseType)
								}
							} else {
								c.reportCircularBaseType(declaration, t)
							}
						} else {
							c.error(node, Diagnostics.An_interface_can_only_extend_an_object_type_or_intersection_of_object_types_with_statically_known_members)
						}
					}
				}
			}
		}
	}
}

/**
 * Returns true if the interface given by the symbol is free of "this" references.
 *
 * Specifically, the result is true if the interface itself contains no references
 * to "this" in its body, if all base types are interfaces,
 * and if none of the base interfaces have a "this" type.
 */

func (c *Checker) isThislessInterface(symbol *ast.Symbol) bool {
	if symbol.Declarations == nil {
		return true
	}
	for _, declaration := range symbol.Declarations {
		if declaration.Kind == ast.KindInterfaceDeclaration {
			if declaration.Flags&ast.NodeFlagsContainsThis != 0 {
				return false
			}
			baseTypeNodes := getInterfaceBaseTypeNodes(declaration.AsInterfaceDeclaration())
			if baseTypeNodes != nil {
				for _, node := range baseTypeNodes {
					if isEntityNameExpression(node.Expression) {
						baseSymbol := c.resolveEntityName(node.Expression, ast.SymbolFlagsType, true /*ignoreErrors*/)
						if baseSymbol == nil || baseSymbol.Flags&ast.SymbolFlagsInterface == 0 || c.getDeclaredTypeOfClassOrInterface(baseSymbol).thisType != nil {
							return false
						}
					}
				}
			}
		}
	}
	return true
}

func (c *Checker) getDeclaredTypeOfClassOrInterface(symbol *ast.Symbol) InterfaceType {
	links := c.getSymbolLinks(symbol)
	originalLinks := links
	if links.declaredType == nil {
		var kind /* TODO(TS-TO-GO) inferred type ObjectFlags.Class | ObjectFlags.Interface */ any
		if symbol.Flags&ast.SymbolFlagsClass != 0 {
			kind = ObjectFlagsClass
		} else {
			kind = ObjectFlagsInterface
		}
		merged := c.mergeJSSymbols(symbol, symbol.ValueDeclaration && c.getAssignedClassSymbol(symbol.ValueDeclaration))
		if merged != nil {
			// note:we overwrite links because we just cloned the symbol
			symbol = merged
			links = merged.Links
		}

		t := /* TODO(TS-TO-GO) EqualsToken BinaryExpression: originalLinks.declaredType = links.declaredType = createObjectType(kind, symbol) as InterfaceType */ TODO
		outerTypeParameters := c.getOuterTypeParametersOfClassOrInterface(symbol)
		localTypeParameters := c.getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol)
		// A class or interface is generic if it has type parameters or a "this" type. We always give classes a "this" type
		// because it is not feasible to analyze all members to determine if the "this" type escapes the class (in particular,
		// property types inferred from initializers and method return types inferred from return statements are very hard
		// to exhaustively analyze). We give interfaces a "this" type if we can't definitely determine that they are free of
		// "this" references.
		if outerTypeParameters != nil || localTypeParameters != nil || kind == ObjectFlagsClass || !c.isThislessInterface(symbol) {
			t.objectFlags |= ObjectFlagsReference
			t.typeParameters = core.Concatenate(outerTypeParameters, localTypeParameters)
			t.outerTypeParameters = outerTypeParameters
			t.localTypeParameters = localTypeParameters
			t.AsGenericType().instantiations = NewMap[string, TypeReference]()
			t.AsGenericType().instantiations.set(c.getTypeListId(t.typeParameters), t.AsGenericType())
			t.AsGenericType().target = t.AsGenericType()
			t.AsGenericType().resolvedTypeArguments = t.typeParameters
			t.thisType = c.createTypeParameter(symbol)
			t.thisType.isThisType = true
			t.thisType.constraint = t
		}
	}
	return links.declaredType.AsInterfaceType()
}

func (c *Checker) getDeclaredTypeOfTypeAlias(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	if links.declaredType == nil {
		// Note that we use the links object as the target here because the symbol object is used as the unique
		// identity for resolution of the 'type' property in SymbolLinks.
		if !c.pushTypeResolution(symbol, TypeSystemPropertyNameDeclaredType) {
			return c.errorType
		}

		declaration := Debug.checkDefined(symbol.Declarations. /* ? */ find(isTypeAlias), "Type alias symbol with no valid declaration found")
		var typeNode *TypeNode
		if isJSDocTypeAlias(declaration) {
			typeNode = declaration.TypeExpression
		} else {
			typeNode = declaration.Type_
		}
		// If typeNode is missing, we will error in checkJSDocTypedefTag.
		var t *Type
		if typeNode != nil {
			t = c.getTypeFromTypeNode(typeNode)
		} else {
			t = c.errorType
		}
		if c.popTypeResolution() {
			typeParameters := c.getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol)
			if typeParameters != nil {
				// Initialize the instantiation cache for generic type aliases. The declared type corresponds to
				// an instantiation of the type alias with the type parameters supplied as type arguments.
				links.typeParameters = typeParameters
				links.instantiations = NewMap[string, *Type]()
				links.instantiations.set(c.getTypeListId(typeParameters), t)
			}
			if t == c.intrinsicMarkerType && symbol.EscapedName == "BuiltinIteratorReturn" {
				t = c.getBuiltinIteratorReturnType()
			}
		} else {
			t = c.errorType
			if declaration.Kind == ast.KindJSDocEnumTag {
				c.error(declaration.TypeExpression.Type_, Diagnostics.Type_alias_0_circularly_references_itself, c.symbolToString(symbol))
			} else {
				c.error(ifElse(isNamedDeclaration(declaration), declaration.Name || declaration, declaration), Diagnostics.Type_alias_0_circularly_references_itself, c.symbolToString(symbol))
			}
		}
		if links.declaredType == nil {
			links.declaredType = t
		}
	}
	return links.declaredType
}

func (c *Checker) getBaseTypeOfEnumLikeType(t *Type) *Type {
	if t.flags&TypeFlagsEnumLike != 0 && t.symbol.Flags&ast.SymbolFlagsEnumMember != 0 {
		return c.getDeclaredTypeOfSymbol(c.getParentOfSymbol(t.symbol))
	} else {
		return t
	}
}

func (c *Checker) getDeclaredTypeOfEnum(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	if links.declaredType == nil {
		var memberTypeList []*Type = []never{}
		if symbol.Declarations != nil {
			for _, declaration := range symbol.Declarations {
				if declaration.Kind == ast.KindEnumDeclaration {
					for _, member := range declaration.AsEnumDeclaration().Members {
						if c.hasBindableName(member) {
							memberSymbol := c.getSymbolOfDeclaration(member)
							value := c.getEnumMemberValue(member).value
							memberType := c.getFreshTypeOfLiteralType(ifElse(value != nil, c.getEnumLiteralType(value, getSymbolId(symbol), memberSymbol), c.createComputedEnumType(memberSymbol)))
							c.getSymbolLinks(memberSymbol).declaredType = memberType
							memberTypeList.push(c.getRegularTypeOfLiteralType(memberType))
						}
					}
				}
			}
		}
		var enumType *Type
		if memberTypeList.length != 0 {
			enumType = c.getUnionType(memberTypeList, UnionReductionLiteral, symbol, nil /*aliasTypeArguments*/)
		} else {
			enumType = c.createComputedEnumType(symbol)
		}
		if enumType.flags&TypeFlagsUnion != 0 {
			enumType.flags |= TypeFlagsEnumLiteral
			enumType.symbol = symbol
		}
		links.declaredType = enumType
	}
	return links.declaredType
}

func (c *Checker) createComputedEnumType(symbol *ast.Symbol) EnumType {
	regularType := c.createTypeWithSymbol(TypeFlagsEnum, symbol).AsEnumType()
	freshType := c.createTypeWithSymbol(TypeFlagsEnum, symbol).AsEnumType()
	regularType.regularType = regularType
	regularType.freshType = freshType
	freshType.regularType = regularType
	freshType.freshType = freshType
	return regularType
}

func (c *Checker) getDeclaredTypeOfEnumMember(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	if links.declaredType == nil {
		enumType := c.getDeclaredTypeOfEnum(c.getParentOfSymbol(symbol))
		if !links.declaredType {
			links.declaredType = enumType
		}
	}
	return links.declaredType
}

func (c *Checker) getDeclaredTypeOfTypeParameter(symbol *ast.Symbol) TypeParameter {
	links := c.getSymbolLinks(symbol)
	return links.declaredType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.declaredType = createTypeParameter(symbol) */ TODO)
}

func (c *Checker) getDeclaredTypeOfAlias(symbol *ast.Symbol) *Type {
	links := c.getSymbolLinks(symbol)
	return links.declaredType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.declaredType = getDeclaredTypeOfSymbol(resolveAlias(symbol)) */ TODO)
}

func (c *Checker) getDeclaredTypeOfSymbol(symbol *ast.Symbol) *Type {
	return c.tryGetDeclaredTypeOfSymbol(symbol) || c.errorType
}

func (c *Checker) tryGetDeclaredTypeOfSymbol(symbol *ast.Symbol) *Type {
	if symbol.Flags&(ast.SymbolFlagsClass|ast.SymbolFlagsInterface) != 0 {
		return c.getDeclaredTypeOfClassOrInterface(symbol)
	}
	if symbol.Flags&ast.SymbolFlagsTypeAlias != 0 {
		return c.getDeclaredTypeOfTypeAlias(symbol)
	}
	if symbol.Flags&ast.SymbolFlagsTypeParameter != 0 {
		return c.getDeclaredTypeOfTypeParameter(symbol)
	}
	if symbol.Flags&ast.SymbolFlagsEnum != 0 {
		return c.getDeclaredTypeOfEnum(symbol)
	}
	if symbol.Flags&ast.SymbolFlagsEnumMember != 0 {
		return c.getDeclaredTypeOfEnumMember(symbol)
	}
	if symbol.Flags&ast.SymbolFlagsAlias != 0 {
		return c.getDeclaredTypeOfAlias(symbol)
	}
	return nil
}

/**
 * A type is free of this references if it's the any, string, number, boolean, symbol, or void keyword, a string
 * literal type, an array with an element type that is free of this references, or a type reference that is
 * free of this references.
 */

func (c *Checker) isThislessType(node TypeNode) bool {
	switch node.Kind {
	case ast.KindAnyKeyword,
		ast.KindUnknownKeyword,
		ast.KindStringKeyword,
		ast.KindNumberKeyword,
		ast.KindBigIntKeyword,
		ast.KindBooleanKeyword,
		ast.KindSymbolKeyword,
		ast.KindObjectKeyword,
		ast.KindVoidKeyword,
		ast.KindUndefinedKeyword,
		ast.KindNeverKeyword,
		ast.KindLiteralType:
		return true
	case ast.KindArrayType:
		return c.isThislessType(node.AsArrayTypeNode().ElementType)
	case ast.KindTypeReference:
		return node.AsTypeReferenceNode().TypeArguments == nil || node.AsTypeReferenceNode().TypeArguments.every(c.isThislessType)
	}
	return false
}

/** A type parameter is thisless if its constraint is thisless, or if it has no constraint. */

func (c *Checker) isThislessTypeParameter(node TypeParameterDeclaration) bool {
	constraint := getEffectiveConstraintOfTypeParameter(node)
	return constraint == nil || c.isThislessType(constraint)
}

/**
 * A variable-like declaration is free of this references if it has a type annotation
 * that is thisless, or if it has no type annotation and no initializer (and is thus of type any).
 */

func (c *Checker) isThislessVariableLikeDeclaration(node VariableLikeDeclaration) bool {
	typeNode := getEffectiveTypeAnnotationNode(node)
	if typeNode != nil {
		return c.isThislessType(typeNode)
	} else {
		return !hasInitializer(node)
	}
}

/**
 * A function-like declaration is considered free of `this` references if it has a return type
 * annotation that is free of this references and if each parameter is thisless and if
 * each type parameter (if present) is thisless.
 */

func (c *Checker) isThislessFunctionLikeDeclaration(node FunctionLikeDeclaration) bool {
	returnType := getEffectiveReturnTypeNode(node)
	typeParameters := getEffectiveTypeParameterDeclarations(node)
	return (node.Kind == ast.KindConstructor || (returnType != nil && c.isThislessType(returnType))) && node.Parameters.every(c.isThislessVariableLikeDeclaration) && typeParameters.every(c.isThislessTypeParameter)
}

/**
 * Returns true if the class or interface member given by the symbol is free of "this" references. The
 * function may return false for symbols that are actually free of "this" references because it is not
 * feasible to perform a complete analysis in all cases. In particular, property members with types
 * inferred from their initializers and function members with inferred return types are conservatively
 * assumed not to be free of "this" references.
 */

func (c *Checker) isThisless(symbol *ast.Symbol) bool {
	if symbol.Declarations != nil && symbol.Declarations.length == 1 {
		declaration := symbol.Declarations[0]
		if declaration {
			switch declaration.Kind {
			case ast.KindPropertyDeclaration,
				ast.KindPropertySignature:
				return c.isThislessVariableLikeDeclaration(declaration.AsVariableLikeDeclaration())
			case ast.KindMethodDeclaration,
				ast.KindMethodSignature,
				ast.KindConstructor,
				ast.KindGetAccessor,
				ast.KindSetAccessor:
				return c.isThislessFunctionLikeDeclaration(declaration /* as FunctionLikeDeclaration | AccessorDeclaration */)
			}
		}
	}
	return false
}

// The mappingThisOnly flag indicates that the only type parameter being mapped is "this". When the flag is true,
// we check symbols to see if we can quickly conclude they are free of "this" references, thus needing no instantiation.
func (c *Checker) createInstantiatedSymbolTable(symbols []*ast.Symbol, mapper TypeMapper, mappingThisOnly bool) SymbolTable {
	result := createSymbolTable()
	for _, symbol := range symbols {
		result.set(symbol.EscapedName, ifElse(mappingThisOnly && c.isThisless(symbol), symbol, c.instantiateSymbol(symbol, mapper)))
	}
	return result
}

func (c *Checker) addInheritedMembers(symbols SymbolTable, baseSymbols []*ast.Symbol) {
	for _, base := range baseSymbols {
		if c.isStaticPrivateIdentifierProperty(base) {
			continue
		}
		derived := symbols.get(base.EscapedName)
		if derived == nil || derived.ValueDeclaration != nil && isBinaryExpression(derived.ValueDeclaration) && !c.isConstructorDeclaredProperty(derived) && getContainingClassStaticBlock(derived.ValueDeclaration) == nil {
			symbols.set(base.EscapedName, base)
			symbols.set(base.EscapedName, base)
		}
	}
}

func (c *Checker) isStaticPrivateIdentifierProperty(s *ast.Symbol) bool {
	return s.ValueDeclaration != nil && isPrivateIdentifierClassElementDeclaration(s.ValueDeclaration) && isStatic(s.ValueDeclaration)
}

func (c *Checker) resolveDeclaredMembers(t InterfaceType) InterfaceTypeWithDeclaredMembers {
	if !t.AsInterfaceTypeWithDeclaredMembers().declaredProperties {
		symbol := t.symbol
		members := c.getMembersOfSymbol(symbol)
		t.AsInterfaceTypeWithDeclaredMembers().declaredProperties = c.getNamedMembers(members)
		// Start with signatures at empty array in case of recursive types
		t.AsInterfaceTypeWithDeclaredMembers().declaredCallSignatures = emptyArray
		t.AsInterfaceTypeWithDeclaredMembers().declaredConstructSignatures = emptyArray
		t.AsInterfaceTypeWithDeclaredMembers().declaredIndexInfos = emptyArray

		t.AsInterfaceTypeWithDeclaredMembers().declaredCallSignatures = c.getSignaturesOfSymbol(members.get(InternalSymbolNameCall))
		t.AsInterfaceTypeWithDeclaredMembers().declaredConstructSignatures = c.getSignaturesOfSymbol(members.get(InternalSymbolNameNew))
		t.AsInterfaceTypeWithDeclaredMembers().declaredIndexInfos = c.getIndexInfosOfSymbol(symbol)
	}
	return t.AsInterfaceTypeWithDeclaredMembers()
}

/**
 * Indicates whether a declaration name is definitely late-bindable.
 * A declaration name is only late-bindable if:
 * - It is a `ComputedPropertyName`.
 * - Its expression is an `Identifier` or either a `PropertyAccessExpression` an
 * `ElementAccessExpression` consisting only of these same three types of nodes.
 * - The type of its expression is a string or numeric literal type, or is a `unique symbol` type.
 */

func (c *Checker) isLateBindableName(node DeclarationName) bool {
	return c.isLateBindableAST(node) && isTypeUsableAsPropertyName(ifElse(isComputedPropertyName(node), c.checkComputedPropertyName(node), c.checkExpressionCached(node.AsElementAccessExpression().ArgumentExpression)))
}

func (c *Checker) isLateBindableIndexSignature(node DeclarationName) bool {
	return c.isLateBindableAST(node) && c.isTypeUsableAsIndexSignature(ifElse(isComputedPropertyName(node), c.checkComputedPropertyName(node), c.checkExpressionCached(node.AsElementAccessExpression().ArgumentExpression)))
}

func (c *Checker) isLateBindableAST(node DeclarationName) bool {
	if !isComputedPropertyName(node) && !isElementAccessExpression(node) {
		return false
	}
	var expr Expression
	if isComputedPropertyName(node) {
		expr = node.Expression
	} else {
		expr = node.ArgumentExpression
	}
	return isEntityNameExpression(expr)
}

func (c *Checker) isTypeUsableAsIndexSignature(t *Type) bool {
	return c.isTypeAssignableTo(t, c.stringNumberSymbolType)
}

func (c *Checker) isLateBoundName(name string) bool {
	return (name /* as string */).charCodeAt(0) == CharacterCodes_ && (name /* as string */).charCodeAt(1) == CharacterCodes_ && (name /* as string */).charCodeAt(2) == CharacterCodesat
}

/**
 * Indicates whether a declaration has a late-bindable dynamic name.
 */

func (c *Checker) hasLateBindableName(node Declaration) bool {
	name := getNameOfDeclaration(node)
	return name != nil && c.isLateBindableName(name)
}

func (c *Checker) hasLateBindableIndexSignature(node Declaration) bool {
	name := getNameOfDeclaration(node)
	return name != nil && c.isLateBindableIndexSignature(name)
}

/**
 * Indicates whether a declaration has an early-bound name or a dynamic name that can be late-bound.
 */

func (c *Checker) hasBindableName(node Declaration) bool {
	return !hasDynamicName(node) || c.hasLateBindableName(node)
}

/**
 * Indicates whether a declaration name is a dynamic name that cannot be late-bound.
 */

func (c *Checker) isNonBindableDynamicName(node DeclarationName) bool {
	return isDynamicName(node) && !c.isLateBindableName(node)
}

/**
 * Adds a declaration to a late-bound dynamic member. This performs the same function for
 * late-bound members that `addDeclarationToSymbol` in binder.ts performs for early-bound
 * members.
 */

func (c *Checker) addDeclarationToLateBoundSymbol(symbol *ast.Symbol, member Union[LateBoundDeclaration, BinaryExpression], symbolFlags SymbolFlags) {
	Debug.assert(getCheckFlags(symbol)&ast.CheckFlagsLate != 0, "Expected a late-bound symbol.")
	symbol.Flags |= symbolFlags
	c.getSymbolLinks(member.Symbol).lateSymbol = symbol
	if symbol.Declarations == nil {
		symbol.Declarations = [] /* TODO(TS-TO-GO) inferred type BinaryExpression | LateBoundDeclaration */ any{member}
	} else if !member.Symbol.IsReplaceableByMethod {
		symbol.Declarations.push(member)
	}
	if symbolFlags&ast.SymbolFlagsValue != 0 {
		if symbol.ValueDeclaration == nil || symbol.ValueDeclaration.Kind != member.Kind {
			symbol.ValueDeclaration = member
		}
	}
}

/**
 * Performs late-binding of a dynamic member. This performs the same function for
 * late-bound members that `declareSymbol` in binder.ts performs for early-bound
 * members.
 *
 * If a symbol is a dynamic name from a computed property, we perform an additional "late"
 * binding phase to attempt to resolve the name for the symbol from the type of the computed
 * property's expression. If the type of the expression is a string-literal, numeric-literal,
 * or unique symbol type, we can use that type as the name of the symbol.
 *
 * For example, given:
 *
 *   const x = Symbol();
 *
 *   interface I {
 *     [x]: number;
 *   }
 *
 * The binder gives the property `[x]: number` a special symbol with the name "__computed".
 * In the late-binding phase we can type-check the expression `x` and see that it has a
 * unique symbol type which we can then use as the name of the member. This allows users
 * to define custom symbols that can be used in the members of an object type.
 *
 * @param parent The containing symbol for the member.
 * @param earlySymbols The early-bound symbols of the parent.
 * @param lateSymbols The late-bound symbols of the parent.
 * @param decl The member to bind.
 */

func (c *Checker) lateBindMember(parent *ast.Symbol, earlySymbols *SymbolTable, lateSymbols Map[string, TransientSymbol], decl Union[LateBoundDeclaration, LateBoundBinaryExpressionDeclaration]) *ast.Symbol {
	Debug.assert(decl.Symbol, "The member is expected to have a symbol.")
	links := c.getNodeLinks(decl)
	if links.resolvedSymbol == nil {
		// In the event we attempt to resolve the late-bound name of this member recursively,
		// fall back to the early-bound name of this member.
		links.resolvedSymbol = decl.Symbol
		var declName /* TODO(TS-TO-GO) inferred type LateBoundElementAccessExpression | LateBoundName */ any
		if isBinaryExpression(decl) {
			declName = decl.Left
		} else {
			declName = decl.Name
		}
		var t *Type
		if isElementAccessExpression(declName) {
			t = c.checkExpressionCached(declName.ArgumentExpression)
		} else {
			t = c.checkComputedPropertyName(declName)
		}
		if isTypeUsableAsPropertyName(t) {
			memberName := getPropertyNameFromType(t)
			symbolFlags := decl.Symbol.Flags

			// Get or add a late-bound symbol for the member. This allows us to merge late-bound accessor declarations.
			lateSymbol := lateSymbols.get(memberName)
			if lateSymbol == nil {
				lateSymbols.set(memberName /* TODO(TS-TO-GO) EqualsToken BinaryExpression: lateSymbol = createSymbol(SymbolFlags.None, memberName, CheckFlags.Late) */, TODO)
			}

			// Report an error if there's a symbol declaration with the same name and conflicting flags.
			earlySymbol := earlySymbols && earlySymbols.get(memberName)
			// Duplicate property declarations of classes are checked in checkClassForDuplicateDeclarations.
			if parent.Flags&ast.SymbolFlagsClass == 0 && lateSymbol.Flags&c.getExcludedSymbolFlags(symbolFlags) != 0 {
				// If we have an existing early-bound member, combine its declarations so that we can
				// report an error at each declaration.
				var declarations *[]Declaration
				if earlySymbol != nil {
					declarations = core.Concatenate(earlySymbol.Declarations, lateSymbol.Declarations)
				} else {
					declarations = lateSymbol.Declarations
				}
				name := t.flags&TypeFlagsUniqueESSymbol == 0 && unescapeLeadingUnderscores(memberName) || declarationNameToString(declName)
				forEach(declarations, func(declaration Declaration) Diagnostic {
					return c.error(getNameOfDeclaration(declaration) || declaration, Diagnostics.Property_0_was_also_declared_here, name)
				})
				c.error(declName || decl, Diagnostics.Duplicate_property_0, name)
				lateSymbol = c.createSymbol(ast.SymbolFlagsNone, memberName, ast.CheckFlagsLate)
			}
			lateSymbol.Links.nameType = t
			c.addDeclarationToLateBoundSymbol(lateSymbol, decl, symbolFlags)
			if lateSymbol.Parent != nil {
				Debug.assert(lateSymbol.Parent == parent, "Existing symbol parent should match new one")
			} else {
				lateSymbol.Parent = parent
			}
			links.resolvedSymbol = lateSymbol
			return links.resolvedSymbol
		}
	}
	return links.resolvedSymbol
}

func (c *Checker) lateBindIndexSignature(parent *ast.Symbol, earlySymbols *SymbolTable, lateSymbols Map[string, TransientSymbol], decl Union[LateBoundDeclaration, LateBoundBinaryExpressionDeclaration]) {
	// First, late bind the index symbol itself, if needed
	indexSymbol := lateSymbols.get(InternalSymbolNameIndex)
	if indexSymbol == nil {
		early := earlySymbols. /* ? */ get(InternalSymbolNameIndex)
		if early == nil {
			indexSymbol = c.createSymbol(ast.SymbolFlagsNone, InternalSymbolNameIndex, ast.CheckFlagsLate)
		} else {
			indexSymbol = c.cloneSymbol(early)
			indexSymbol.Links.checkFlags |= ast.CheckFlagsLate
		}
		lateSymbols.set(InternalSymbolNameIndex, indexSymbol)
	}
	// Then just add the computed name as a late bound declaration
	// (note: unlike `addDeclarationToLateBoundSymbol` we do not set up a `.lateSymbol` on `decl`'s links,
	// since that would point at an index symbol and not a single property symbol, like most consumers would expect)
	if indexSymbol.Declarations == nil {
		indexSymbol.Declarations = [] /* TODO(TS-TO-GO) inferred type LateBoundDeclaration | LateBoundBinaryExpressionDeclaration */ any{decl}
	} else if !decl.Symbol.IsReplaceableByMethod {
		indexSymbol.Declarations.push(decl)
	}
}

func (c *Checker) getResolvedMembersOrExportsOfSymbol(symbol *ast.Symbol, resolutionKind MembersOrExportsResolutionKind) Map[string, *ast.Symbol] {
	links := c.getSymbolLinks(symbol)
	if links[resolutionKind] == nil {
		isStatic := resolutionKind == MembersOrExportsResolutionKindresolvedExports
		var earlySymbols *SymbolTable
		switch {
		case !isStatic:
			earlySymbols = symbol.Members
		case symbol.Flags&ast.SymbolFlagsModule != 0:
			earlySymbols = c.getExportsOfModuleWorker(symbol).exports
		default:
			earlySymbols = symbol.Exports
		}

		// In the event we recursively resolve the members/exports of the symbol, we
		// set the initial value of resolvedMembers/resolvedExports to the early-bound
		// members/exports of the symbol.
		links[resolutionKind] = earlySymbols || c.emptySymbols

		// fill in any as-yet-unresolved late-bound members.
		lateSymbols := createSymbolTable().(Map[string, TransientSymbol])
		for _, decl := range symbol.Declarations || emptyArray {
			members := getMembersOfDeclaration(decl)
			if members != nil {
				for _, member := range members {
					if isStatic == hasStaticModifier(member) {
						if c.hasLateBindableName(member) {
							c.lateBindMember(symbol, earlySymbols, lateSymbols, member)
						} else if c.hasLateBindableIndexSignature(member) {
							c.lateBindIndexSignature(symbol, earlySymbols, lateSymbols, member.AsNode() /* as LateBoundDeclaration | LateBoundBinaryExpressionDeclaration */)
						}
					}
				}
			}
		}
		assignments := c.getFunctionExpressionParentSymbolOrSymbol(symbol).AssignmentDeclarationMembers

		if assignments != nil {
			decls := arrayFrom(assignments.values())
			for _, member := range decls {
				assignmentKind := getAssignmentDeclarationKind(member /* as BinaryExpression | CallExpression */)
				isInstanceMember := assignmentKind == AssignmentDeclarationKindPrototypeProperty || isBinaryExpression(member) && c.isPossiblyAliasedThisProperty(member, assignmentKind) || assignmentKind == AssignmentDeclarationKindObjectDefinePrototypeProperty || assignmentKind == AssignmentDeclarationKindPrototype
				// A straight `Prototype` assignment probably can never have a computed name
				if isStatic == !isInstanceMember {
					if c.hasLateBindableName(member) {
						c.lateBindMember(symbol, earlySymbols, lateSymbols, member)
					}
				}
			}
		}

		resolved := c.combineSymbolTables(earlySymbols, lateSymbols)
		if symbol.Flags&ast.SymbolFlagsTransient != 0 && links.cjsExportMerged != nil && symbol.Declarations != nil {
			for _, decl := range symbol.Declarations {
				original := c.getSymbolLinks(decl.Symbol)[resolutionKind]
				if resolved == nil {
					resolved = original
					continue
				}
				if original == nil {
					continue
				}
				original.forEach(func(s *ast.Symbol, name string) {
					existing := resolved.get(name)
					if existing == nil {
						resolved.set(name, s)
					} else if existing == s {
						return
					} else {
						resolved.set(name, c.mergeSymbol(existing, s))
					}
				})
			}
		}
		links[resolutionKind] = resolved || c.emptySymbols
	}

	return links[resolutionKind]
}

/**
 * Gets a SymbolTable containing both the early- and late-bound members of a symbol.
 *
 * For a description of late-binding, see `lateBindMember`.
 */

func (c *Checker) getMembersOfSymbol(symbol *ast.Symbol) SymbolTable {
	if symbol.Flags&ast.SymbolFlagsLateBindingContainer != 0 {
		return c.getResolvedMembersOrExportsOfSymbol(symbol, MembersOrExportsResolutionKindresolvedMembers)
	} else {
		return symbol.Members || c.emptySymbols
	}
}

/**
 * If a symbol is the dynamic name of the member of an object type, get the late-bound
 * symbol of the member.
 *
 * For a description of late-binding, see `lateBindMember`.
 */

func (c *Checker) getLateBoundSymbol(symbol *ast.Symbol) *ast.Symbol {
	if symbol.Flags&ast.SymbolFlagsClassMember != 0 && symbol.EscapedName == InternalSymbolNameComputed {
		links := c.getSymbolLinks(symbol)
		if links.lateSymbol == nil && core.Some(symbol.Declarations, c.hasLateBindableName) {
			// force late binding of members/exports. This will set the late-bound symbol
			parent := c.getMergedSymbol(symbol.Parent)
			if core.Some(symbol.Declarations, hasStaticModifier) {
				c.getExportsOfSymbol(parent)
			} else {
				c.getMembersOfSymbol(parent)
			}
		}
		return links.lateSymbol || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.lateSymbol = symbol */ TODO)
	}
	return symbol
}

func (c *Checker) getTypeWithThisArgument(t *Type, thisArgument *Type, needApparentType bool) *Type {
	if getObjectFlags(t)&ObjectFlagsReference != 0 {
		target := t.AsTypeReference().target
		typeArguments := c.getTypeArguments(t.AsTypeReference())
		if length(target.typeParameters) == length(typeArguments) {
			return c.createTypeReference(target, core.Concatenate(typeArguments, []*Type{thisArgument || target.thisType}))
		} else {
			return t
		}
	} else if t.flags&TypeFlagsIntersection != 0 {
		types := core.SameMap(t.AsIntersectionType().types, func(t *Type) *Type {
			return c.getTypeWithThisArgument(t, thisArgument, needApparentType)
		})
		if types != t.AsIntersectionType().types {
			return c.getIntersectionType(types)
		} else {
			return t
		}
	}
	if needApparentType {
		return c.getApparentType(t)
	} else {
		return t
	}
}

func (c *Checker) resolveObjectTypeMembers(t ObjectType, source InterfaceTypeWithDeclaredMembers, typeParameters []TypeParameter, typeArguments []*Type) {
	var mapper *TypeMapper
	var members SymbolTable
	var callSignatures []Signature
	var constructSignatures []Signature
	var indexInfos []IndexInfo
	if rangeEquals(typeParameters, typeArguments, 0, typeParameters.length) {
		if source.symbol {
			members = c.getMembersOfSymbol(source.symbol)
		} else {
			members = createSymbolTable(source.declaredProperties)
		}
		callSignatures = source.declaredCallSignatures
		constructSignatures = source.declaredConstructSignatures
		indexInfos = source.declaredIndexInfos
	} else {
		mapper = c.createTypeMapper(typeParameters, typeArguments)
		members = c.createInstantiatedSymbolTable(source.declaredProperties, mapper, typeParameters.length == 1 /*mappingThisOnly*/)
		callSignatures = c.instantiateSignatures(source.declaredCallSignatures, mapper)
		constructSignatures = c.instantiateSignatures(source.declaredConstructSignatures, mapper)
		indexInfos = c.instantiateIndexInfos(source.declaredIndexInfos, mapper)
	}
	baseTypes := c.getBaseTypes(source)
	if baseTypes.length != 0 {
		if source.symbol && members == c.getMembersOfSymbol(source.symbol) {
			symbolTable := createSymbolTable(source.declaredProperties)
			// copy index signature symbol as well (for quickinfo)
			sourceIndex := c.getIndexSymbol(source.symbol)
			if sourceIndex != nil {
				symbolTable.set(InternalSymbolNameIndex, sourceIndex)
			}
			members = symbolTable
		}
		c.setStructuredTypeMembers(t, members, callSignatures, constructSignatures, indexInfos)
		thisArgument := lastOrUndefined(typeArguments)
		for _, baseType := range baseTypes {
			var instantiatedBaseType *Type
			if thisArgument != nil {
				instantiatedBaseType = c.getTypeWithThisArgument(c.instantiateType(baseType, mapper), thisArgument)
			} else {
				instantiatedBaseType = baseType
			}
			c.addInheritedMembers(members, c.getPropertiesOfType(instantiatedBaseType))
			callSignatures = core.Concatenate(callSignatures, c.getSignaturesOfType(instantiatedBaseType, SignatureKindCall))
			constructSignatures = core.Concatenate(constructSignatures, c.getSignaturesOfType(instantiatedBaseType, SignatureKindConstruct))
			var inheritedIndexInfos []IndexInfo
			if instantiatedBaseType != c.anyType {
				inheritedIndexInfos = c.getIndexInfosOfType(instantiatedBaseType)
			} else {
				inheritedIndexInfos = []IndexInfo{c.createIndexInfo(c.stringType, c.anyType, false /*isReadonly*/)}
			}
			indexInfos = core.Concatenate(indexInfos, core.Filter(inheritedIndexInfos, func(info IndexInfo) bool {
				return c.findIndexInfo(indexInfos, info.keyType) == nil
			}))
		}
	}
	c.setStructuredTypeMembers(t, members, callSignatures, constructSignatures, indexInfos)
}

func (c *Checker) resolveClassOrInterfaceMembers(t InterfaceType) {
	c.resolveObjectTypeMembers(t, c.resolveDeclaredMembers(t), emptyArray, emptyArray)
}

func (c *Checker) resolveTypeReferenceMembers(t TypeReference) {
	source := c.resolveDeclaredMembers(t.target)
	typeParameters := core.Concatenate(source.typeParameters, []TypeParameter{source.thisType})
	typeArguments := c.getTypeArguments(t)
	var paddedTypeArguments []*Type
	if typeArguments.length == typeParameters.length {
		paddedTypeArguments = typeArguments
	} else {
		paddedTypeArguments = core.Concatenate(typeArguments, []TypeReference{t})
	}
	c.resolveObjectTypeMembers(t, source, typeParameters, paddedTypeArguments)
}

func (c *Checker) createSignature(declaration Union[SignatureDeclaration, JSDocSignature, undefined], typeParameters *[]TypeParameter, thisParameter *ast.Symbol, parameters []*ast.Symbol, resolvedReturnType *Type, resolvedTypePredicate *TypePredicate, minArgumentCount number, flags SignatureFlags) Signature {
	sig := NewSignature(c.checker, flags)
	sig.declaration = declaration
	sig.typeParameters = typeParameters
	sig.parameters = parameters
	sig.thisParameter = thisParameter
	sig.resolvedReturnType = resolvedReturnType
	sig.resolvedTypePredicate = resolvedTypePredicate
	sig.minArgumentCount = minArgumentCount
	sig.resolvedMinArgumentCount = nil
	sig.target = nil
	sig.mapper = nil
	sig.compositeSignatures = nil
	sig.compositeKind = nil
	return sig
}

func (c *Checker) cloneSignature(sig Signature) Signature {
	result := c.createSignature(sig.declaration, sig.typeParameters, sig.thisParameter, sig.parameters, nil /*resolvedReturnType*/, nil /*resolvedTypePredicate*/, sig.minArgumentCount, sig.flags&SignatureFlagsPropagatingFlags)
	result.target = sig.target
	result.mapper = sig.mapper
	result.compositeSignatures = sig.compositeSignatures
	result.compositeKind = sig.compositeKind
	return result
}

func (c *Checker) createUnionSignature(signature Signature, unionSignatures []Signature) Signature {
	result := c.cloneSignature(signature)
	result.compositeSignatures = unionSignatures
	result.compositeKind = TypeFlagsUnion
	result.target = nil
	result.mapper = nil
	return result
}

func (c *Checker) getOptionalCallSignature(signature Signature, callChainFlags SignatureFlags) Signature {
	if (signature.flags & SignatureFlagsCallChainFlags) == callChainFlags {
		return signature
	}
	if signature.optionalCallSignatureCache == nil {
		signature.optionalCallSignatureCache = map[any]any{ /* TODO(TS-TO-GO): was object literal */
		}
	}
	var key /* TODO(TS-TO-GO) inferred type "inner" | "outer" */ any
	if callChainFlags == SignatureFlagsIsInnerCallChain {
		key = "inner"
	} else {
		key = "outer"
	}
	return signature.optionalCallSignatureCache[key] || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: signature.optionalCallSignatureCache[key] = createOptionalCallSignature(signature, callChainFlags) */ TODO)
}

func (c *Checker) createOptionalCallSignature(signature Signature, callChainFlags SignatureFlags) Signature {
	Debug.assert(callChainFlags == SignatureFlagsIsInnerCallChain || callChainFlags == SignatureFlagsIsOuterCallChain, "An optional call signature can either be for an inner call chain or an outer call chain, but not both.")
	result := c.cloneSignature(signature)
	result.flags |= callChainFlags
	return result
}

func (c *Checker) getExpandedParameters(sig Signature, skipUnionExpanding bool) [][]*ast.Symbol {
	if signatureHasRestParameter(sig) {
		restIndex := sig.parameters.length - 1
		restSymbol := sig.parameters[restIndex]
		restType := c.getTypeOfSymbol(restSymbol)
		if c.isTupleType(restType) {
			return [][]*ast.Symbol{expandSignatureParametersWithTupleMembers(restType, restIndex, restSymbol)}
		} else if !skipUnionExpanding && restType.flags&TypeFlagsUnion != 0 && core.Every(restType.AsUnionType().types, c.isTupleType) {
			return core.Map(restType.AsUnionType().types, func(t *Type) []*ast.Symbol {
				return expandSignatureParametersWithTupleMembers(t.AsTupleTypeReference(), restIndex, restSymbol)
			})
		}
	}
	return [][]*ast.Symbol{sig.parameters}

	expandSignatureParametersWithTupleMembers := func(restType TupleTypeReference, restIndex number, restSymbol *ast.Symbol) []*ast.Symbol {
		elementTypes := c.getTypeArguments(restType)
		associatedNames := getUniqAssociatedNamesFromTupleType(restType, restSymbol)
		restParams := core.Map(elementTypes, func(t *Type, i number) TransientSymbol {
			// Lookup the label from the individual tuple passed in before falling back to the signature `rest` parameter name
			var name /* TODO(TS-TO-GO) inferred type (string & { __escapedIdentifier: void; }) | (void & { __escapedIdentifier: void; }) | InternalSymbolName */ any
			if associatedNames != nil && associatedNames[i] {
				name = associatedNames[i]
			} else {
				name = c.getParameterNameAtPosition(sig, restIndex+i, restType)
			}
			flags := restType.target.elementFlags[i]
			var checkFlags /* TODO(TS-TO-GO) inferred type 0 | CheckFlags.OptionalParameter | CheckFlags.RestParameter */ any
			switch {
			case flags&ElementFlagsVariable != 0:
				checkFlags = ast.CheckFlagsRestParameter
			case flags&ElementFlagsOptional != 0:
				checkFlags = ast.CheckFlagsOptionalParameter
			default:
				checkFlags = 0
			}
			symbol := c.createSymbol(ast.SymbolFlagsFunctionScopedVariable, name, checkFlags)
			if flags&ElementFlagsRest != 0 {
				symbol.Links.type_ = c.createArrayType(t)
			} else {
				symbol.Links.type_ = t
			}
			return symbol
		})
		return core.Concatenate(sig.parameters.slice(0, restIndex), restParams)
	}

	getUniqAssociatedNamesFromTupleType := func(t TupleTypeReference, restSymbol *ast.Symbol) *[]string {
		names := core.Map(t.target.labeledElementDeclarations, func(labeledElement * /* TODO(TS-TO-GO) inferred type ParameterDeclaration | NamedTupleMember */ any, i number) string {
			return c.getTupleElementLabel(labeledElement, i, t.target.elementFlags[i], restSymbol)
		})
		if names != nil {
			var duplicates []number = []never{}
			uniqueNames := NewSet[string]()
			for i := 0; i < names.length; i++ {
				name := names[i]
				if !tryAddToSet(uniqueNames, name) {
					duplicates.push(i)
				}
			}
			counters := NewMap[string, number]()
			for _, i := range duplicates {
				counter := ifNotNilElse(counters.get(names[i]), 1)
				var name string
				for !tryAddToSet(uniqueNames /* TODO(TS-TO-GO) EqualsToken BinaryExpression: name = `${names[i]}_${counter}` as __String */, TODO) {
					counter++
				}
				names[i] = name
				counters.set(names[i], counter+1)
			}
		}
		return names
	}

}

func (c *Checker) getDefaultConstructSignatures(classType InterfaceType) []Signature {
	baseConstructorType := c.getBaseConstructorTypeOfClass(classType)
	baseSignatures := c.getSignaturesOfType(baseConstructorType, SignatureKindConstruct)
	declaration := getClassLikeDeclarationOfSymbol(classType.symbol)
	isAbstract := declaration != nil && hasSyntacticModifier(declaration, ast.ModifierFlagsAbstract)
	if baseSignatures.length == 0 {
		return []Signature{c.createSignature(nil, classType.localTypeParameters, nil /*thisParameter*/, emptyArray, classType, nil /*resolvedTypePredicate*/, 0, ifElse(isAbstract, SignatureFlagsAbstract, SignatureFlagsNone))}
	}
	baseTypeNode := c.getBaseTypeNodeOfClass(classType)
	isJavaScript := isInJSFile(baseTypeNode)
	typeArguments := c.typeArgumentsFromTypeReferenceNode(baseTypeNode)
	typeArgCount := length(typeArguments)
	var result []Signature = []never{}
	for _, baseSig := range baseSignatures {
		minTypeArgumentCount := c.getMinTypeArgumentCount(baseSig.typeParameters)
		typeParamCount := length(baseSig.typeParameters)
		if isJavaScript || typeArgCount >= minTypeArgumentCount && typeArgCount <= typeParamCount {
			var sig Signature
			if typeParamCount != 0 {
				sig = c.createSignatureInstantiation(baseSig, c.fillMissingTypeArguments(typeArguments, baseSig.typeParameters, minTypeArgumentCount, isJavaScript))
			} else {
				sig = c.cloneSignature(baseSig)
			}
			sig.typeParameters = classType.localTypeParameters
			sig.resolvedReturnType = classType
			if isAbstract {
				sig.flags = sig.flags | SignatureFlagsAbstract
			} else {
				sig.flags = sig.flags & ^SignatureFlagsAbstract
			}
			result.push(sig)
		}
	}
	return result
}

func (c *Checker) findMatchingSignature(signatureList []Signature, signature Signature, partialMatch bool, ignoreThisTypes bool, ignoreReturnTypes bool) *Signature {
	for _, s := range signatureList {
		if c.compareSignaturesIdentical(s, signature, partialMatch, ignoreThisTypes, ignoreReturnTypes, ifElse(partialMatch, c.compareTypesSubtypeOf, c.compareTypesIdentical)) != 0 {
			return s
		}
	}
}

func (c *Checker) findMatchingSignatures(signatureLists [][]Signature, signature Signature, listIndex number) *[]Signature {
	if signature.typeParameters != nil {
		// We require an exact match for generic signatures, so we only return signatures from the first
		// signature list and only if they have exact matches in the other signature lists.
		if listIndex > 0 {
			return nil
		}
		for i := 1; i < signatureLists.length; i++ {
			if c.findMatchingSignature(signatureLists[i], signature, false /*partialMatch*/, false /*ignoreThisTypes*/, false /*ignoreReturnTypes*/) == nil {
				return nil
			}
		}
		return []Signature{signature}
	}
	var result *[]Signature
	for i := 0; i < signatureLists.length; i++ {
		// Allow matching non-generic signatures to have excess parameters (as a fallback if exact parameter match is not found) and different return types.
		// Prefer matching this types if possible.
		var match *Signature
		if i == listIndex {
			match = signature
		} else {
			match = c.findMatchingSignature(signatureLists[i], signature, false /*partialMatch*/, false /*ignoreThisTypes*/, true /*ignoreReturnTypes*/) || c.findMatchingSignature(signatureLists[i], signature, true /*partialMatch*/, false /*ignoreThisTypes*/, true /*ignoreReturnTypes*/)
		}
		if match == nil {
			return nil
		}
		result = core.AppendIfUnique(result, match)
	}
	return result
}

// The signatures of a union type are those signatures that are present in each of the constituent types.
// Generic signatures must match exactly, but non-generic signatures are allowed to have extra optional
// parameters and may differ in return types. When signatures differ in return types, the resulting return
// type is the union of the constituent return types.
func (c *Checker) getUnionSignatures(signatureLists [][]Signature) []Signature {
	var result *[]Signature
	var indexWithLengthOverOne *number
	for i := 0; i < signatureLists.length; i++ {
		if signatureLists[i].length == 0 {
			return emptyArray
		}
		if signatureLists[i].length > 1 {
			if indexWithLengthOverOne == nil {
				indexWithLengthOverOne = i
			} else {
				indexWithLengthOverOne = -1
			}
			// -1 is a signal there are multiple overload sets
		}
		for _, signature := range signatureLists[i] {
			// Only process signatures with parameter lists that aren't already in the result list
			if result == nil || c.findMatchingSignature(result, signature, false /*partialMatch*/, false /*ignoreThisTypes*/, true /*ignoreReturnTypes*/) == nil {
				unionSignatures := c.findMatchingSignatures(signatureLists, signature, i)
				if unionSignatures != nil {
					s := signature
					// Union the result types when more than one signature matches
					if unionSignatures.length > 1 {
						thisParameter := signature.thisParameter
						firstThisParameterOfUnionSignatures := forEach(unionSignatures, func(sig Signature) *ast.Symbol {
							return sig.thisParameter
						})
						if firstThisParameterOfUnionSignatures != nil {
							thisType := c.getIntersectionType(mapDefined(unionSignatures, func(sig Signature) *Type {
								return sig.thisParameter && c.getTypeOfSymbol(sig.thisParameter)
							}))
							thisParameter = c.createSymbolWithType(firstThisParameterOfUnionSignatures, thisType)
						}
						s = c.createUnionSignature(signature, unionSignatures)
						s.thisParameter = thisParameter
					}
					(result || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = [] */ TODO)).push(s)
				}
			}
		}
	}
	if length(result) == 0 && indexWithLengthOverOne != -1 {
		// No sufficiently similar signature existed to subsume all the other signatures in the union - time to see if we can make a single
		// signature that handles all over them. We only do this when there are overloads in only one constituent.
		// (Overloads are conditional in nature and having overloads in multiple constituents would necessitate making a power set of
		// signatures from the type, whose ordering would be non-obvious)
		masterList := signatureLists[ifElse(indexWithLengthOverOne != nil, indexWithLengthOverOne, 0)]
		var results *[]Signature = masterList.slice()
		for _, signatures := range signatureLists {
			if signatures != masterList {
				signature := signatures[0]
				Debug.assert(signature, "getUnionSignatures bails early on empty signature lists and should not have empty lists on second pass")
				if signature.typeParameters != nil && core.Some(results, func(s Signature) bool {
					return s.typeParameters != nil && !c.compareTypeParametersIdentical(signature.typeParameters, s.typeParameters)
				}) {
					results = nil
				} else {
					results = core.Map(results, func(sig Signature) Signature {
						return c.combineSignaturesOfUnionMembers(sig, signature)
					})
				}
				if results == nil {
					break
				}
			}
		}
		result = results
	}
	return result || emptyArray
}

func (c *Checker) compareTypeParametersIdentical(sourceParams *[]TypeParameter, targetParams *[]TypeParameter) bool {
	if length(sourceParams) != length(targetParams) {
		return false
	}
	if sourceParams == nil || targetParams == nil {
		return true
	}

	mapper := c.createTypeMapper(targetParams, sourceParams)
	for i := 0; i < sourceParams.length; i++ {
		source := sourceParams[i]
		target := targetParams[i]
		if source == target {
			continue
		}
		// We instantiate the target type parameter constraints into the source types so we can recognize `<T, U extends T>` as the same as `<A, B extends A>`
		if !c.isTypeIdenticalTo(c.getConstraintFromTypeParameter(source) || c.unknownType, c.instantiateType(c.getConstraintFromTypeParameter(target) || c.unknownType, mapper)) {
			return false
		}
		// We don't compare defaults - we just use the type parameter defaults from the first signature that seems to match.
		// It might make sense to combine these defaults in the future, but doing so intelligently requires knowing
		// if the parameter is used covariantly or contravariantly (so we intersect if it's used like a parameter or union if used like a return type)
		// and, since it's just an inference _default_, just picking one arbitrarily works OK.
	}

	return true
}

func (c *Checker) combineUnionThisParam(left *ast.Symbol, right *ast.Symbol, mapper *TypeMapper) *ast.Symbol {
	if left == nil || right == nil {
		return left || right
	}
	// A signature `this` type might be a read or a write position... It's very possible that it should be invariant
	// and we should refuse to merge signatures if there are `this` types and they do not match. However, so as to be
	// permissive when calling, for now, we'll intersect the `this` types just like we do for param types in union signatures.
	thisType := c.getIntersectionType([]*Type{c.getTypeOfSymbol(left), c.instantiateType(c.getTypeOfSymbol(right), mapper)})
	return c.createSymbolWithType(left, thisType)
}

func (c *Checker) combineUnionParameters(left Signature, right Signature, mapper *TypeMapper) []*ast.Symbol {
	leftCount := c.getParameterCount(left)
	rightCount := c.getParameterCount(right)
	var longest Signature
	if leftCount >= rightCount {
		longest = left
	} else {
		longest = right
	}
	var shorter Signature
	if longest == left {
		shorter = right
	} else {
		shorter = left
	}
	var longestCount number
	if longest == left {
		longestCount = leftCount
	} else {
		longestCount = rightCount
	}
	eitherHasEffectiveRest := c.hasEffectiveRestParameter(left) || c.hasEffectiveRestParameter(right)
	needsExtraRestElement := eitherHasEffectiveRest && !c.hasEffectiveRestParameter(longest)
	params := NewArray[*ast.Symbol](longestCount + (ifElse(needsExtraRestElement, 1, 0)))
	for i := 0; i < longestCount; i++ {
		longestParamType := c.tryGetTypeAtPosition(longest, i)
		if longest == right {
			longestParamType = c.instantiateType(longestParamType, mapper)
		}
		shorterParamType := c.tryGetTypeAtPosition(shorter, i) || c.unknownType
		if shorter == right {
			shorterParamType = c.instantiateType(shorterParamType, mapper)
		}
		unionParamType := c.getIntersectionType([]*Type{longestParamType, shorterParamType})
		isRestParam := eitherHasEffectiveRest && !needsExtraRestElement && i == (longestCount-1)
		isOptional := i >= c.getMinArgumentCount(longest) && i >= c.getMinArgumentCount(shorter)
		var leftName *string
		if i >= leftCount {
			leftName = nil
		} else {
			leftName = c.getParameterNameAtPosition(left, i)
		}
		var rightName *string
		if i >= rightCount {
			rightName = nil
		} else {
			rightName = c.getParameterNameAtPosition(right, i)
		}

		var paramName *string
		switch {
		case leftName == rightName:
			paramName = leftName
		case !leftName:
			paramName = rightName
		case !rightName:
			paramName = leftName
		default:
			paramName = nil
		}
		paramSymbol := c.createSymbol(ast.SymbolFlagsFunctionScopedVariable|(ifElse(isOptional && !isRestParam, ast.SymbolFlagsOptional, 0)), paramName || __TEMPLATE__("arg", i).(string), ifElse(isRestParam, ast.CheckFlagsRestParameter, ifElse(isOptional, ast.CheckFlagsOptionalParameter, 0)))
		if isRestParam {
			paramSymbol.Links.type_ = c.createArrayType(unionParamType)
		} else {
			paramSymbol.Links.type_ = unionParamType
		}
		params[i] = paramSymbol
	}
	if needsExtraRestElement {
		restParamSymbol := c.createSymbol(ast.SymbolFlagsFunctionScopedVariable, "args" /* as __String */, ast.CheckFlagsRestParameter)
		restParamSymbol.Links.type_ = c.createArrayType(c.getTypeAtPosition(shorter, longestCount))
		if shorter == right {
			restParamSymbol.Links.type_ = c.instantiateType(restParamSymbol.Links.type_, mapper)
		}
		params[longestCount] = restParamSymbol
	}
	return params
}

func (c *Checker) combineSignaturesOfUnionMembers(left Signature, right Signature) Signature {
	typeParams := left.typeParameters || right.typeParameters
	var paramMapper *TypeMapper
	if left.typeParameters != nil && right.typeParameters != nil {
		paramMapper = c.createTypeMapper(right.typeParameters, left.typeParameters)
		// We just use the type parameter defaults from the first signature
	}
	flags := (left.flags | right.flags) & (SignatureFlagsPropagatingFlags & ^SignatureFlagsHasRestParameter)
	declaration := left.declaration
	params := c.combineUnionParameters(left, right, paramMapper)
	lastParam := lastOrUndefined(params)
	if lastParam != nil && getCheckFlags(lastParam)&ast.CheckFlagsRestParameter != 0 {
		flags |= SignatureFlagsHasRestParameter
	}
	thisParam := c.combineUnionThisParam(left.thisParameter, right.thisParameter, paramMapper)
	minArgCount := max(left.minArgumentCount, right.minArgumentCount)
	result := c.createSignature(declaration, typeParams, thisParam, params, nil, nil, minArgCount, flags)
	result.compositeKind = TypeFlagsUnion
	result.compositeSignatures = core.Concatenate(left.compositeKind != TypeFlagsIntersection && left.compositeSignatures || []Signature{left}, []Signature{right})
	if paramMapper != nil {
		if left.compositeKind != TypeFlagsIntersection && left.mapper != nil && left.compositeSignatures != nil {
			result.mapper = c.combineTypeMappers(left.mapper, paramMapper)
		} else {
			result.mapper = paramMapper
		}
	} else if left.compositeKind != TypeFlagsIntersection && left.mapper != nil && left.compositeSignatures != nil {
		result.mapper = left.mapper
	}
	return result
}

func (c *Checker) getUnionIndexInfos(types []*Type) []IndexInfo {
	sourceInfos := c.getIndexInfosOfType(types[0])
	if sourceInfos {
		result := []never{}
		for _, info := range sourceInfos {
			indexType := info.keyType
			if core.Every(types, func(t *Type) bool {
				return c.getIndexInfoOfType(t, indexType) != nil
			}) {
				result.push(c.createIndexInfo(indexType, c.getUnionType(core.Map(types, func(t *Type) *Type {
					return c.getIndexTypeOfType(t, indexType)
				})), core.Some(types, func(t *Type) bool {
					return c.getIndexInfoOfType(t, indexType).isReadonly
				})))
			}
		}
		return result
	}
	return emptyArray
}

func (c *Checker) resolveUnionTypeMembers(t UnionType) {
	// The members and properties collections are empty for union types. To get all properties of a union
	// type use getPropertiesOfType (only the language service uses this).
	callSignatures := c.getUnionSignatures(core.Map(t.types, func(t *Type) []Signature {
		if t == c.globalFunctionType {
			return []Signature{c.unknownSignature}
		} else {
			return c.getSignaturesOfType(t, SignatureKindCall)
		}
	}))
	constructSignatures := c.getUnionSignatures(core.Map(t.types, func(t *Type) []Signature {
		return c.getSignaturesOfType(t, SignatureKindConstruct)
	}))
	indexInfos := c.getUnionIndexInfos(t.types)
	c.setStructuredTypeMembers(t, c.emptySymbols, callSignatures, constructSignatures, indexInfos)
}

/* OVERLOAD: function intersectTypes(type1: Type, type2: Type): Type; */
/* OVERLOAD: function intersectTypes(type1: Type | undefined, type2: Type | undefined): Type | undefined; */
func (c *Checker) intersectTypes(type1 *Type, type2 *Type) *Type {
	switch {
	case type1 == nil:
		return type2
	case type2 == nil:
		return type1
	default:
		return c.getIntersectionType([]*Type{type1, type2})
	}
}

func (c *Checker) findMixins(types []*Type) []bool {
	constructorTypeCount := core.CountWhere(types, func(t *Type) bool {
		return c.getSignaturesOfType(t, SignatureKindConstruct).length > 0
	})
	mixinFlags := core.Map(types, c.isMixinConstructorType)
	if constructorTypeCount > 0 && constructorTypeCount == core.CountWhere(mixinFlags, func(b bool) bool {
		return b
	}) {
		firstMixinIndex := mixinFlags.indexOf(true)
		mixinFlags[firstMixinIndex] = false
	}
	return mixinFlags
}

func (c *Checker) includeMixinType(t *Type, types []*Type, mixinFlags []bool, index number) *Type {
	var mixedTypes []*Type = []never{}
	for i := 0; i < types.length; i++ {
		if i == index {
			mixedTypes.push(t)
		} else if mixinFlags[i] {
			mixedTypes.push(c.getReturnTypeOfSignature(c.getSignaturesOfType(types[i], SignatureKindConstruct)[0]))
		}
	}
	return c.getIntersectionType(mixedTypes)
}

func (c *Checker) resolveIntersectionTypeMembers(type_ IntersectionType) {
	// The members and properties collections are empty for intersection types. To get all properties of an
	// intersection type use getPropertiesOfType (only the language service uses this).
	var callSignatures *[]Signature
	var constructSignatures *[]Signature
	var indexInfos *[]IndexInfo
	types := type_.types
	mixinFlags := c.findMixins(types)
	mixinCount := core.CountWhere(mixinFlags, func(b bool) bool {
		return b
	})
	for i := 0; i < types.length; i++ {
		t := type_.types[i]
		// When an intersection type contains mixin constructor types, the construct signatures from
		// those types are discarded and their return types are mixed into the return types of all
		// other construct signatures in the intersection type. For example, the intersection type
		// '{ new(...args: any[]) => A } & { new(s: string) => B }' has a single construct signature
		// 'new(s: string) => A & B'.
		if !mixinFlags[i] {
			signatures := c.getSignaturesOfType(t, SignatureKindConstruct)
			if signatures.length != 0 && mixinCount > 0 {
				signatures = core.Map(signatures, func(s Signature) Signature {
					clone := c.cloneSignature(s)
					clone.resolvedReturnType = c.includeMixinType(c.getReturnTypeOfSignature(s), types, mixinFlags, i)
					return clone
				})
			}
			constructSignatures = c.appendSignatures(constructSignatures, signatures)
		}
		callSignatures = c.appendSignatures(callSignatures, c.getSignaturesOfType(t, SignatureKindCall))
		indexInfos = reduceLeft(c.getIndexInfosOfType(t), func(infos *[]IndexInfo, newInfo IndexInfo) []IndexInfo {
			return c.appendIndexInfo(infos, newInfo, false /*union*/)
		}, indexInfos)
	}
	c.setStructuredTypeMembers(type_, c.emptySymbols, callSignatures || emptyArray, constructSignatures || emptyArray, indexInfos || emptyArray)
}

func (c *Checker) appendSignatures(signatures *[]Signature, newSignatures []Signature) *[]Signature {
	for _, sig := range newSignatures {
		if signatures == nil || core.Every(signatures, func(s Signature) bool {
			return c.compareSignaturesIdentical(s, sig, false /*partialMatch*/, false /*ignoreThisTypes*/, false /*ignoreReturnTypes*/, c.compareTypesIdentical) == 0
		}) {
			signatures = append(signatures, sig)
		}
	}
	return signatures
}

func (c *Checker) appendIndexInfo(indexInfos *[]IndexInfo, newInfo IndexInfo, union bool) []IndexInfo {
	if indexInfos != nil {
		for i := 0; i < indexInfos.length; i++ {
			info := indexInfos[i]
			if info.keyType == newInfo.keyType {
				indexInfos[i] = c.createIndexInfo(info.keyType, ifElse(union, c.getUnionType([]*Type{info.type_, newInfo.type_}), c.getIntersectionType([]*Type{info.type_, newInfo.type_})), ifElse(union, info.isReadonly || newInfo.isReadonly, info.isReadonly && newInfo.isReadonly))
				return indexInfos
			}
		}
	}
	return append(indexInfos, newInfo)
}

/**
 * Converts an AnonymousType to a ResolvedType.
 */

func (c *Checker) resolveAnonymousTypeMembers(t AnonymousType) {
	if t.target != nil {
		c.setStructuredTypeMembers(t, c.emptySymbols, emptyArray, emptyArray, emptyArray)
		members := c.createInstantiatedSymbolTable(c.getPropertiesOfObjectType(t.target), t.mapper, false /*mappingThisOnly*/)
		callSignatures := c.instantiateSignatures(c.getSignaturesOfType(t.target, SignatureKindCall), t.mapper)
		constructSignatures := c.instantiateSignatures(c.getSignaturesOfType(t.target, SignatureKindConstruct), t.mapper)
		indexInfos := c.instantiateIndexInfos(c.getIndexInfosOfType(t.target), t.mapper)
		c.setStructuredTypeMembers(t, members, callSignatures, constructSignatures, indexInfos)
		return
	}
	symbol := c.getMergedSymbol(t.symbol)
	if symbol.Flags&ast.SymbolFlagsTypeLiteral != 0 {
		c.setStructuredTypeMembers(t, c.emptySymbols, emptyArray, emptyArray, emptyArray)
		members := c.getMembersOfSymbol(symbol)
		callSignatures := c.getSignaturesOfSymbol(members.get(InternalSymbolNameCall))
		constructSignatures := c.getSignaturesOfSymbol(members.get(InternalSymbolNameNew))
		indexInfos := c.getIndexInfosOfSymbol(symbol)
		c.setStructuredTypeMembers(t, members, callSignatures, constructSignatures, indexInfos)
		return
	}
	// Combinations of function, class, enum and module
	members := c.getExportsOfSymbol(symbol)
	var indexInfos *[]IndexInfo
	if symbol == c.globalThisSymbol {
		varsOnly := NewMap[string, *ast.Symbol]()
		members.forEach(func(p *ast.Symbol) {
			if p.Flags&ast.SymbolFlagsBlockScoped == 0 && !(p.Flags&ast.SymbolFlagsValueModule != 0 && p.Declarations. /* ? */ length && core.Every(p.Declarations, isAmbientModule)) {
				varsOnly.set(p.EscapedName, p)
			}
		})
		members = varsOnly
	}
	var baseConstructorIndexInfo *IndexInfo
	c.setStructuredTypeMembers(t, members, emptyArray, emptyArray, emptyArray)
	if symbol.Flags&ast.SymbolFlagsClass != 0 {
		classType := c.getDeclaredTypeOfClassOrInterface(symbol)
		baseConstructorType := c.getBaseConstructorTypeOfClass(classType)
		if baseConstructorType.flags&(TypeFlagsObject|TypeFlagsIntersection|TypeFlagsTypeVariable) != 0 {
			members = createSymbolTable(c.getNamedOrIndexSignatureMembers(members))
			c.addInheritedMembers(members, c.getPropertiesOfType(baseConstructorType))
		} else if baseConstructorType == c.anyType {
			baseConstructorIndexInfo = c.createIndexInfo(c.stringType, c.anyType, false /*isReadonly*/)
		}
	}

	indexSymbol := c.getIndexSymbolFromSymbolTable(members)
	if indexSymbol != nil {
		indexInfos = c.getIndexInfosOfIndexSymbol(indexSymbol, arrayFrom(members.values()))
	} else {
		if baseConstructorIndexInfo != nil {
			indexInfos = append(indexInfos, baseConstructorIndexInfo)
		}
		if symbol.Flags&ast.SymbolFlagsEnum != 0 && (c.getDeclaredTypeOfSymbol(symbol).flags&TypeFlagsEnum != 0 || core.Some(t.properties, func(prop *ast.Symbol) bool {
			return c.getTypeOfSymbol(prop).flags&TypeFlagsNumberLike != 0
		})) {
			indexInfos = append(indexInfos, c.enumNumberIndexInfo)
		}
	}
	c.setStructuredTypeMembers(t, members, emptyArray, emptyArray, indexInfos || emptyArray)
	// We resolve the members before computing the signatures because a signature may use
	// typeof with a qualified name expression that circularly references the type we are
	// in the process of resolving (see issue #6072). The temporarily empty signature list
	// will never be observed because a qualified name can't reference signatures.
	if symbol.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsMethod) != 0 {
		t.callSignatures = c.getSignaturesOfSymbol(symbol)
	}
	// And likewise for construct signatures for classes
	if symbol.Flags&ast.SymbolFlagsClass != 0 {
		classType := c.getDeclaredTypeOfClassOrInterface(symbol)
		var constructSignatures []Signature
		if symbol.Members != nil {
			constructSignatures = c.getSignaturesOfSymbol(symbol.Members.get(InternalSymbolNameConstructor))
		} else {
			constructSignatures = emptyArray
		}
		if symbol.Flags&ast.SymbolFlagsFunction != 0 {
			constructSignatures = addRange(constructSignatures.slice(), mapDefined(t.callSignatures, func(sig Signature) *Signature {
				if c.isJSConstructor(sig.declaration) {
					return c.createSignature(sig.declaration, sig.typeParameters, sig.thisParameter, sig.parameters, classType, nil /*resolvedTypePredicate*/, sig.minArgumentCount, sig.flags&SignatureFlagsPropagatingFlags)
				} else {
					return nil
				}
			}))
		}
		if constructSignatures.length == 0 {
			constructSignatures = c.getDefaultConstructSignatures(classType)
		}
		t.constructSignatures = constructSignatures
	}
}

func (c *Checker) replaceIndexedAccess(instantiable *Type, t ReplaceableIndexedAccessType, replacement *Type) *Type {
	// map type.indexType to 0
	// map type.objectType to `[TReplacement]`
	// thus making the indexed access `[TReplacement][0]` or `TReplacement`
	return c.instantiateType(instantiable, c.createTypeMapper([] /* TODO(TS-TO-GO) inferred type Type & TypeParameter */ any{t.indexType, t.objectType}, []*Type{c.getNumberLiteralType(0), c.createTupleType([]*Type{replacement})}))
}

// If the original mapped type had an intersection constraint we extract its components,
// and we make an attempt to do so even if the intersection has been reduced to a union.
// This entire process allows us to possibly retrieve the filtering type literals.
// e.g. { [K in keyof U & ("a" | "b") ] } -> "a" | "b"
func (c *Checker) getLimitedConstraint(type_ ReverseMappedType) *Type {
	constraint := c.getConstraintTypeFromMappedType(type_.mappedType)
	if !(constraint.flags&TypeFlagsUnion != 0 || constraint.flags&TypeFlagsIntersection != 0) {
		return
	}
	var origin *Type
	if constraint.flags&TypeFlagsUnion != 0 {
		origin = constraint.AsUnionType().origin
	} else {
		origin = constraint.AsIntersectionType()
	}
	if origin == nil || origin.flags&TypeFlagsIntersection == 0 {
		return
	}
	limitedConstraint := c.getIntersectionType(origin.AsIntersectionType().types.filter(func(t *Type) bool {
		return t != type_.constraintType
	}))
	if limitedConstraint != c.neverType {
		return limitedConstraint
	} else {
		return nil
	}
}

func (c *Checker) resolveReverseMappedTypeMembers(t ReverseMappedType) {
	indexInfo := c.getIndexInfoOfType(t.source, c.stringType)
	modifiers := c.getMappedTypeModifiers(t.mappedType)
	var readonlyMask bool
	if modifiers&MappedTypeModifiersIncludeReadonly != 0 {
		readonlyMask = false
	} else {
		readonlyMask = true
	}
	var optionalMask /* TODO(TS-TO-GO) inferred type SymbolFlags.Optional | 0 */ any
	if modifiers&MappedTypeModifiersIncludeOptional != 0 {
		optionalMask = 0
	} else {
		optionalMask = ast.SymbolFlagsOptional
	}
	var indexInfos []IndexInfo
	if indexInfo != nil {
		indexInfos = []IndexInfo{c.createIndexInfo(c.stringType, c.inferReverseMappedType(indexInfo.type_, t.mappedType, t.constraintType) || c.unknownType, readonlyMask && indexInfo.isReadonly)}
	} else {
		indexInfos = emptyArray
	}
	members := createSymbolTable()
	limitedConstraint := c.getLimitedConstraint(t)
	for _, prop := range c.getPropertiesOfType(t.source) {
		// In case of a reverse mapped type with an intersection constraint, if we were able to
		// extract the filtering type literals we skip those properties that are not assignable to them,
		// because the extra properties wouldn't get through the application of the mapped type anyway
		if limitedConstraint != nil {
			propertyNameType := c.getLiteralTypeFromProperty(prop, TypeFlagsStringOrNumberLiteralOrUnique)
			if !c.isTypeAssignableTo(propertyNameType, limitedConstraint) {
				continue
			}
		}
		checkFlags := ast.CheckFlagsReverseMapped | (ifElse(readonlyMask && c.isReadonlySymbol(prop), ast.CheckFlagsReadonly, 0))
		inferredProp := c.createSymbol(ast.SymbolFlagsProperty|prop.Flags&optionalMask, prop.EscapedName, checkFlags).(ReverseMappedSymbol)
		inferredProp.Declarations = prop.Declarations
		inferredProp.Links.nameType = c.getSymbolLinks(prop).nameType
		inferredProp.Links.propertyType = c.getTypeOfSymbol(prop)
		if t.constraintType.type_.flags&TypeFlagsIndexedAccess != 0 && t.constraintType.type_.AsIndexedAccessType().objectType.flags&TypeFlagsTypeParameter != 0 && t.constraintType.type_.AsIndexedAccessType().indexType.flags&TypeFlagsTypeParameter != 0 {
			// A reverse mapping of `{[K in keyof T[K_1]]: T[K_1]}` is the same as that of `{[K in keyof T]: T}`, since all we care about is
			// inferring to the "type parameter" (or indexed access) shared by the constraint and template. So, to reduce the number of
			// type identities produced, we simplify such indexed access occurences
			newTypeParam := t.constraintType.type_.AsIndexedAccessType().objectType
			newMappedType := c.replaceIndexedAccess(t.mappedType, t.constraintType.type_.AsReplaceableIndexedAccessType(), newTypeParam)
			inferredProp.Links.mappedType = newMappedType.AsMappedType()
			inferredProp.Links.constraintType = c.getIndexType(newTypeParam).AsIndexType()
		} else {
			inferredProp.Links.mappedType = t.mappedType
			inferredProp.Links.constraintType = t.constraintType
		}
		members.set(prop.EscapedName, inferredProp)
	}
	c.setStructuredTypeMembers(t, members, emptyArray, emptyArray, indexInfos)
}

// Return the lower bound of the key type in a mapped type. Intuitively, the lower
// bound includes those keys that are known to always be present, for example because
// because of constraints on type parameters (e.g. 'keyof T' for a constrained T).
func (c *Checker) getLowerBoundOfKeyType(type_ *Type) *Type {
	if type_.flags&TypeFlagsIndex != 0 {
		t := c.getApparentType(type_.AsIndexType().type_)
		if c.isGenericTupleType(t) {
			return c.getKnownKeysOfTupleType(t)
		} else {
			return c.getIndexType(t)
		}
	}
	if type_.flags&TypeFlagsConditional != 0 {
		if type_.AsConditionalType().root.isDistributive {
			checkType := type_.AsConditionalType().checkType
			constraint := c.getLowerBoundOfKeyType(checkType)
			if constraint != checkType {
				return c.getConditionalTypeInstantiation(type_.AsConditionalType(), c.prependTypeMapping(type_.AsConditionalType().root.checkType, constraint, type_.AsConditionalType().mapper), false /*forConstraint*/)
			}
		}
		return type_
	}
	if type_.flags&TypeFlagsUnion != 0 {
		return c.mapType(type_.AsUnionType(), c.getLowerBoundOfKeyType, true /*noReductions*/)
	}
	if type_.flags&TypeFlagsIntersection != 0 {
		// Similarly to getTypeFromIntersectionTypeNode, we preserve the special string & {}, number & {},
		// and bigint & {} intersections that are used to prevent subtype reduction in union types.
		types := type_.AsIntersectionType().types
		if types.length == 2 && types[0].flags&(TypeFlagsString|TypeFlagsNumber|TypeFlagsBigInt) != 0 && types[1] == c.emptyTypeLiteralType {
			return type_
		}
		return c.getIntersectionType(core.SameMap(type_.AsUnionType().types, c.getLowerBoundOfKeyType))
	}
	return type_
}

func (c *Checker) getIsLateCheckFlag(s *ast.Symbol) CheckFlags {
	return getCheckFlags(s) & ast.CheckFlagsLate
}

func (c *Checker) forEachMappedTypePropertyKeyTypeAndIndexSignatureKeyType(t *Type, include TypeFlags, stringsOnly bool, cb func(keyType *Type)) {
	for _, prop := range c.getPropertiesOfType(t) {
		cb(c.getLiteralTypeFromProperty(prop, include))
	}
	if t.flags&TypeFlagsAny != 0 {
		cb(c.stringType)
	} else {
		for _, info := range c.getIndexInfosOfType(t) {
			if !stringsOnly || info.keyType.flags&(TypeFlagsString|TypeFlagsTemplateLiteral) != 0 {
				cb(info.keyType)
			}
		}
	}
}

/** Resolve the members of a mapped type { [P in K]: T } */

func (c *Checker) resolveMappedTypeMembers(t MappedType) {
	var members SymbolTable = createSymbolTable()
	var indexInfos *[]IndexInfo
	// Resolve upfront such that recursive references see an empty object type.
	c.setStructuredTypeMembers(t, c.emptySymbols, emptyArray, emptyArray, emptyArray)
	// In { [P in K]: T }, we refer to P as the type parameter type, K as the constraint type,
	// and T as the template type.
	typeParameter := c.getTypeParameterFromMappedType(t)
	constraintType := c.getConstraintTypeFromMappedType(t)
	mappedType := t.target.AsMappedType() || t
	nameType := c.getNameTypeFromMappedType(mappedType)
	shouldLinkPropDeclarations := c.getMappedTypeNameTypeKind(mappedType) != MappedTypeNameTypeKindRemapping
	templateType := c.getTemplateTypeFromMappedType(mappedType)
	modifiersType := c.getApparentType(c.getModifiersTypeFromMappedType(t))
	// The 'T' in 'keyof T'
	templateModifiers := c.getMappedTypeModifiers(t)
	include := TypeFlagsStringOrNumberLiteralOrUnique
	if c.isMappedTypeWithKeyofConstraintDeclaration(t) {
		// We have a { [P in keyof T]: X }
		c.forEachMappedTypePropertyKeyTypeAndIndexSignatureKeyType(modifiersType, include, false /*stringsOnly*/, addMemberForKeyType)
	} else {
		c.forEachType(c.getLowerBoundOfKeyType(constraintType), addMemberForKeyType)
	}
	c.setStructuredTypeMembers(t, members, emptyArray, emptyArray, indexInfos || emptyArray)

	addMemberForKeyType := func(keyType *Type) {
		var propNameType *Type
		if nameType != nil {
			propNameType = c.instantiateType(nameType, c.appendTypeMapping(t.mapper, typeParameter, keyType))
		} else {
			propNameType = keyType
		}
		c.forEachType(propNameType, func(t *Type) {
			return addMemberForKeyTypeWorker(keyType, t)
		})
	}

	addMemberForKeyTypeWorker := func(keyType *Type, propNameType *Type) {
		// If the current iteration type constituent is a string literal type, create a property.
		// Otherwise, for type string create a string index signature.
		if isTypeUsableAsPropertyName(propNameType) {
			propName := getPropertyNameFromType(propNameType)
			// String enum members from separate enums with identical values
			// are distinct types with the same property name. Make the resulting
			// property symbol's name type be the union of those enum member types.
			existingProp := members.get(propName) /* as MappedSymbol | undefined */
			if existingProp != nil {
				existingProp.Links.nameType = c.getUnionType([]*Type{existingProp.Links.nameType, propNameType})
				existingProp.Links.keyType = c.getUnionType([]*Type{existingProp.Links.keyType, keyType})
			} else {
				var modifiersProp *ast.Symbol
				if isTypeUsableAsPropertyName(keyType) {
					modifiersProp = c.getPropertyOfType(modifiersType, getPropertyNameFromType(keyType))
				} else {
					modifiersProp = nil
				}
				isOptional := templateModifiers&MappedTypeModifiersIncludeOptional != 0 || templateModifiers&MappedTypeModifiersExcludeOptional == 0 && modifiersProp != nil && modifiersProp.Flags&ast.SymbolFlagsOptional != 0
				isReadonly := templateModifiers&MappedTypeModifiersIncludeReadonly != 0 || templateModifiers&MappedTypeModifiersExcludeReadonly == 0 && modifiersProp != nil && c.isReadonlySymbol(modifiersProp)
				stripOptional := c.strictNullChecks && !isOptional && modifiersProp && modifiersProp.Flags&ast.SymbolFlagsOptional
				var lateFlag CheckFlags
				if modifiersProp != nil {
					lateFlag = c.getIsLateCheckFlag(modifiersProp)
				} else {
					lateFlag = 0
				}
				prop := c.createSymbol(ast.SymbolFlagsProperty|(ifElse(isOptional, ast.SymbolFlagsOptional, 0)), propName, lateFlag|ast.CheckFlagsMapped|(ifElse(isReadonly, ast.CheckFlagsReadonly, 0))|(ifElse(stripOptional, ast.CheckFlagsStripOptional, 0))).(MappedSymbol)
				prop.Links.mappedType = t
				prop.Links.nameType = propNameType
				prop.Links.keyType = keyType
				if modifiersProp != nil {
					prop.Links.syntheticOrigin = modifiersProp
					if shouldLinkPropDeclarations {
						prop.Declarations = modifiersProp.Declarations
					} else {
						prop.Declarations = nil
					}
				}
				members.set(propName, prop)
			}
		} else if c.isValidIndexKeyType(propNameType) || propNameType.flags&(TypeFlagsAny|TypeFlagsEnum) != 0 {
			var indexKeyType *Type
			switch {
			case propNameType.flags&(TypeFlagsAny|TypeFlagsString) != 0:
				indexKeyType = c.stringType
			case propNameType.flags&(TypeFlagsNumber|TypeFlagsEnum) != 0:
				indexKeyType = c.numberType
			default:
				indexKeyType = propNameType
			}
			propType := c.instantiateType(templateType, c.appendTypeMapping(t.mapper, typeParameter, keyType))
			modifiersIndexInfo := c.getApplicableIndexInfo(modifiersType, propNameType)
			isReadonly := templateModifiers&MappedTypeModifiersIncludeReadonly != 0 || templateModifiers&MappedTypeModifiersExcludeReadonly == 0 && modifiersIndexInfo. /* ? */ isReadonly
			indexInfo := c.createIndexInfo(indexKeyType, propType, isReadonly)
			indexInfos = c.appendIndexInfo(indexInfos, indexInfo, true /*union*/)
		}
	}

}

func (c *Checker) getTypeOfMappedSymbol(symbol MappedSymbol) *Type {
	if symbol.Links.type_ == nil {
		mappedType := symbol.Links.mappedType
		if !c.pushTypeResolution(symbol, TypeSystemPropertyNameType) {
			mappedType.containsError = true
			return c.errorType
		}
		templateType := c.getTemplateTypeFromMappedType(mappedType.target.AsMappedType() || mappedType)
		mapper := c.appendTypeMapping(mappedType.mapper, c.getTypeParameterFromMappedType(mappedType), symbol.Links.keyType)
		propType := c.instantiateType(templateType, mapper)
		// When creating an optional property in strictNullChecks mode, if 'undefined' isn't assignable to the
		// type, we include 'undefined' in the type. Similarly, when creating a non-optional property in strictNullChecks
		// mode, if the underlying property is optional we remove 'undefined' from the type.
		var t *Type
		switch {
		case c.strictNullChecks && symbol.Flags&ast.SymbolFlagsOptional != 0 && !c.maybeTypeOfKind(propType, TypeFlagsUndefined|TypeFlagsVoid):
			t = c.getOptionalType(propType, true /*isProperty*/)
		case symbol.Links.checkFlags&ast.CheckFlagsStripOptional != 0:
			t = c.removeMissingOrUndefinedType(propType)
		default:
			t = propType
		}
		if !c.popTypeResolution() {
			c.error(c.currentNode, Diagnostics.Type_of_property_0_circularly_references_itself_in_mapped_type_1, c.symbolToString(symbol), c.typeToString(mappedType))
			t = c.errorType
		}
		if symbol.Links.type_ == nil {
			symbol.Links.type_ = t
		}
	}
	return symbol.Links.type_
}

func (c *Checker) getTypeParameterFromMappedType(t MappedType) TypeParameter {
	return t.typeParameter || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.typeParameter = getDeclaredTypeOfTypeParameter(getSymbolOfDeclaration(type.declaration.typeParameter)) */ TODO)
}

func (c *Checker) getConstraintTypeFromMappedType(t MappedType) *Type {
	return t.constraintType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.constraintType = getConstraintOfTypeParameter(getTypeParameterFromMappedType(type)) || errorType */ TODO)
}

func (c *Checker) getNameTypeFromMappedType(t MappedType) *Type {
	if t.declaration.NameType != nil {
		return t.nameType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.nameType = instantiateType(getTypeFromTypeNode(type.declaration.nameType), type.mapper) */ TODO)
	} else {
		return nil
	}
}

func (c *Checker) getTemplateTypeFromMappedType(t MappedType) *Type {
	return t.templateType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.templateType = type.declaration.type ? instantiateType(addOptionality(getTypeFromTypeNode(type.declaration.type), /*isProperty* / true, !!(getMappedTypeModifiers(type) & MappedTypeModifiers.IncludeOptional)), type.mapper) : errorType */ TODO)
}

func (c *Checker) getConstraintDeclarationForMappedType(t MappedType) *TypeNode {
	return getEffectiveConstraintOfTypeParameter(t.declaration.TypeParameter)
}

func (c *Checker) isMappedTypeWithKeyofConstraintDeclaration(t MappedType) bool {
	constraintDeclaration := c.getConstraintDeclarationForMappedType(t)
	// TODO: GH#18217
	return constraintDeclaration.Kind == ast.KindTypeOperator && constraintDeclaration.AsTypeOperatorNode().Operator == ast.KindKeyOfKeyword
}

func (c *Checker) getModifiersTypeFromMappedType(t MappedType) *Type {
	if t.modifiersType == nil {
		if c.isMappedTypeWithKeyofConstraintDeclaration(t) {
			// If the constraint declaration is a 'keyof T' node, the modifiers type is T. We check
			// AST nodes here because, when T is a non-generic type, the logic below eagerly resolves
			// 'keyof T' to a literal union type and we can't recover T from that type.
			t.modifiersType = c.instantiateType(c.getTypeFromTypeNode(c.getConstraintDeclarationForMappedType(t).AsTypeOperatorNode().Type_), t.mapper)
		} else {
			// Otherwise, get the declared constraint type, and if the constraint type is a type parameter,
			// get the constraint of that type parameter. If the resulting type is an indexed type 'keyof T',
			// the modifiers type is T. Otherwise, the modifiers type is unknown.
			declaredType := c.getTypeFromMappedTypeNode(t.declaration).AsMappedType()
			constraint := c.getConstraintTypeFromMappedType(declaredType)
			var extendedConstraint *Type
			if constraint && constraint.flags&TypeFlagsTypeParameter != 0 {
				extendedConstraint = c.getConstraintOfTypeParameter(constraint.AsTypeParameter())
			} else {
				extendedConstraint = constraint
			}
			if extendedConstraint != nil && extendedConstraint.flags&TypeFlagsIndex != 0 {
				t.modifiersType = c.instantiateType(extendedConstraint.AsIndexType().type_, t.mapper)
			} else {
				t.modifiersType = c.unknownType
			}
		}
	}
	return t.modifiersType
}

func (c *Checker) getMappedTypeModifiers(t MappedType) MappedTypeModifiers {
	declaration := t.declaration
	return (ifElse(declaration.ReadonlyToken != nil, ifElse(declaration.ReadonlyToken.Kind == ast.KindMinusToken, MappedTypeModifiersExcludeReadonly, MappedTypeModifiersIncludeReadonly), 0)) | (ifElse(declaration.QuestionToken != nil, ifElse(declaration.QuestionToken.Kind == ast.KindMinusToken, MappedTypeModifiersExcludeOptional, MappedTypeModifiersIncludeOptional), 0))
}

// Return -1, 0, or 1, where -1 means optionality is stripped (i.e. -?), 0 means optionality is unchanged, and 1 means
// optionality is added (i.e. +?).
func (c *Checker) getMappedTypeOptionality(t MappedType) number {
	modifiers := c.getMappedTypeModifiers(t)
	switch {
	case modifiers&MappedTypeModifiersExcludeOptional != 0:
		return -1
	case modifiers&MappedTypeModifiersIncludeOptional != 0:
		return 1
	default:
		return 0
	}
}

// Return -1, 0, or 1, for stripped, unchanged, or added optionality respectively. When a homomorphic mapped type doesn't
// modify optionality, recursively consult the optionality of the type being mapped over to see if it strips or adds optionality.
// For intersections, return -1 or 1 when all constituents strip or add optionality, otherwise return 0.
func (c *Checker) getCombinedMappedTypeOptionality(t *Type) number {
	if getObjectFlags(t)&ObjectFlagsMapped != 0 {
		return c.getMappedTypeOptionality(t.AsMappedType()) || c.getCombinedMappedTypeOptionality(c.getModifiersTypeFromMappedType(t.AsMappedType()))
	}
	if t.flags&TypeFlagsIntersection != 0 {
		optionality := c.getCombinedMappedTypeOptionality(t.AsIntersectionType().types[0])
		if core.Every(t.AsIntersectionType().types, func(t *Type, i number) bool {
			return i == 0 || c.getCombinedMappedTypeOptionality(t) == optionality
		}) {
			return optionality
		} else {
			return 0
		}
	}
	return 0
}

func (c *Checker) isPartialMappedType(t *Type) bool {
	return getObjectFlags(t)&ObjectFlagsMapped != 0 && c.getMappedTypeModifiers(t.AsMappedType())&MappedTypeModifiersIncludeOptional != 0
}

func (c *Checker) isGenericMappedType(t *Type) bool {
	if getObjectFlags(t)&ObjectFlagsMapped != 0 {
		constraint := c.getConstraintTypeFromMappedType(t.AsMappedType())
		if c.isGenericIndexType(constraint) {
			return true
		}
		// A mapped type is generic if the 'as' clause references generic types other than the iteration type.
		// To determine this, we substitute the constraint type (that we now know isn't generic) for the iteration
		// type and check whether the resulting type is generic.
		nameType := c.getNameTypeFromMappedType(t.AsMappedType())
		if nameType != nil && c.isGenericIndexType(c.instantiateType(nameType, c.makeUnaryTypeMapper(c.getTypeParameterFromMappedType(t.AsMappedType()), constraint))) {
			return true
		}
	}
	return false
}

func (c *Checker) getMappedTypeNameTypeKind(t MappedType) MappedTypeNameTypeKind {
	nameType := c.getNameTypeFromMappedType(t)
	if nameType == nil {
		return MappedTypeNameTypeKindNone
	}
	if c.isTypeAssignableTo(nameType, c.getTypeParameterFromMappedType(t)) {
		return MappedTypeNameTypeKindFiltering
	} else {
		return MappedTypeNameTypeKindRemapping
	}
}

func (c *Checker) resolveStructuredTypeMembers(t StructuredType) ResolvedType {
	if !t.AsResolvedType().members {
		if t.flags&TypeFlagsObject != 0 {
			if t.AsObjectType().objectFlags&ObjectFlagsReference != 0 {
				c.resolveTypeReferenceMembers(t.AsTypeReference())
			} else if t.AsObjectType().objectFlags&ObjectFlagsClassOrInterface != 0 {
				c.resolveClassOrInterfaceMembers(t.AsInterfaceType())
			} else if t.AsReverseMappedType().objectFlags&ObjectFlagsReverseMapped != 0 {
				c.resolveReverseMappedTypeMembers(t.AsReverseMappedType())
			} else if t.AsObjectType().objectFlags&ObjectFlagsAnonymous != 0 {
				c.resolveAnonymousTypeMembers(t.AsAnonymousType())
			} else if t.AsMappedType().objectFlags&ObjectFlagsMapped != 0 {
				c.resolveMappedTypeMembers(t.AsMappedType())
			} else {
				Debug.fail("Unhandled object type " + Debug.formatObjectFlags(t.objectFlags))
			}
		} else if t.flags&TypeFlagsUnion != 0 {
			c.resolveUnionTypeMembers(t.AsUnionType())
		} else if t.flags&TypeFlagsIntersection != 0 {
			c.resolveIntersectionTypeMembers(t.AsIntersectionType())
		} else {
			Debug.fail("Unhandled type " + Debug.formatTypeFlags(t.flags))
		}
	}
	return t.AsResolvedType()
}

/** Return properties of an object type or an empty array for other types */

func (c *Checker) getPropertiesOfObjectType(t *Type) []*ast.Symbol {
	if t.flags&TypeFlagsObject != 0 {
		return c.resolveStructuredTypeMembers(t.AsObjectType()).properties
	}
	return emptyArray
}

/** If the given type is an object type and that type has a property by the given name,
 * return the symbol for that property. Otherwise return undefined.
 */

func (c *Checker) getPropertyOfObjectType(t *Type, name string) *ast.Symbol {
	if t.flags&TypeFlagsObject != 0 {
		resolved := c.resolveStructuredTypeMembers(t.AsObjectType())
		symbol := resolved.members.get(name)
		if symbol != nil && c.symbolIsValue(symbol) {
			return symbol
		}
	}
}

func (c *Checker) getPropertiesOfUnionOrIntersectionType(t UnionOrIntersectionType) []*ast.Symbol {
	if !t.resolvedProperties {
		members := createSymbolTable()
		for _, current := range t.types {
			for _, prop := range c.getPropertiesOfType(current) {
				if !members.has(prop.EscapedName) {
					combinedProp := c.getPropertyOfUnionOrIntersectionType(t, prop.EscapedName, t.flags&TypeFlagsIntersection != 0 /*skipObjectFunctionPropertyAugment*/)
					if combinedProp != nil {
						members.set(prop.EscapedName, combinedProp)
					}
				}
			}
			// The properties of a union type are those that are present in all constituent types, so
			// we only need to check the properties of the first type without index signature
			if t.flags&TypeFlagsUnion != 0 && c.getIndexInfosOfType(current).length == 0 {
				break
			}
		}
		t.resolvedProperties = c.getNamedMembers(members)
	}
	return t.resolvedProperties
}

func (c *Checker) getPropertiesOfType(t *Type) []*ast.Symbol {
	t = c.getReducedApparentType(t)
	if t.flags&TypeFlagsUnionOrIntersection != 0 {
		return c.getPropertiesOfUnionOrIntersectionType(t.AsUnionType())
	} else {
		return c.getPropertiesOfObjectType(t)
	}
}

func (c *Checker) forEachPropertyOfType(t *Type, action func(symbol *ast.Symbol, escapedName string)) {
	t = c.getReducedApparentType(t)
	if t.flags&TypeFlagsStructuredType != 0 {
		c.resolveStructuredTypeMembers(t.AsStructuredType()).members.forEach(func(symbol *ast.Symbol, escapedName string) {
			if c.isNamedMember(symbol, escapedName) {
				action(symbol, escapedName)
			}
		})
	}
}

func (c *Checker) isTypeInvalidDueToUnionDiscriminant(contextualType *Type, obj Union[ObjectLiteralExpression, JsxAttributes]) bool {
	list := obj.Properties.(NodeArray[Union[ObjectLiteralElementLike, JsxAttributeLike]])
	return list.some(func(property /* TODO(TS-TO-GO) inferred type ObjectLiteralElementLike | JsxAttributeLike */ any) bool {
		nameType := property.Name && (ifElse(isJsxNamespacedName(property.Name), c.getStringLiteralType(getTextOfJsxAttributeName(property.Name)), c.getLiteralTypeFromPropertyName(property.Name)))
		var name *string
		if nameType != nil && isTypeUsableAsPropertyName(nameType) {
			name = getPropertyNameFromType(nameType)
		} else {
			name = nil
		}
		var expected *Type
		if name == nil {
			expected = nil
		} else {
			expected = c.getTypeOfPropertyOfType(contextualType, name)
		}
		return expected != nil && c.isLiteralType(expected) && !c.isTypeAssignableTo(c.getTypeOfNode(property), expected)
	})
}

func (c *Checker) getAllPossiblePropertiesOfTypes(types []*Type) []*ast.Symbol {
	unionType := c.getUnionType(types)
	if unionType.flags&TypeFlagsUnion == 0 {
		return c.getAugmentedPropertiesOfType(unionType)
	}

	props := createSymbolTable()
	for _, memberType := range types {
		for _, TODO_IDENTIFIER := range c.getAugmentedPropertiesOfType(memberType) {
			if !props.has(escapedName) {
				prop := c.createUnionOrIntersectionProperty(unionType.AsUnionType(), escapedName)
				// May be undefined if the property is private
				if prop != nil {
					props.set(escapedName, prop)
				}
			}
		}
	}
	return arrayFrom(props.values())
}

func (c *Checker) getConstraintOfType(t Union[InstantiableType, UnionOrIntersectionType]) *Type {
	switch {
	case t.flags&TypeFlagsTypeParameter != 0:
		return c.getConstraintOfTypeParameter(t.AsTypeParameter())
	case t.flags&TypeFlagsIndexedAccess != 0:
		return c.getConstraintOfIndexedAccess(t.AsIndexedAccessType())
	case t.flags&TypeFlagsConditional != 0:
		return c.getConstraintOfConditionalType(t.AsConditionalType())
	default:
		return c.getBaseConstraintOfType(t)
	}
}

func (c *Checker) getConstraintOfTypeParameter(typeParameter TypeParameter) *Type {
	if c.hasNonCircularBaseConstraint(typeParameter) {
		return c.getConstraintFromTypeParameter(typeParameter)
	} else {
		return nil
	}
}

func (c *Checker) isConstMappedType(t MappedType, depth number) bool {
	typeVariable := c.getHomomorphicTypeVariable(t)
	return typeVariable != nil && c.isConstTypeVariable(typeVariable, depth)
}

func (c *Checker) isConstTypeVariable(type_ *Type, depth number /*  = 0 */) bool {
	return depth < 5 && type_ != nil && (type_.flags&TypeFlagsTypeParameter != 0 && core.Some(type_.AsTypeParameter().symbol. /* ? */ Declarations, func(d Declaration) bool {
		return hasSyntacticModifier(d, ast.ModifierFlagsConst)
	}) || type_.flags&TypeFlagsUnionOrIntersection != 0 && core.Some(type_.AsUnionOrIntersectionType().types, func(t *Type) bool {
		return c.isConstTypeVariable(t, depth)
	}) || type_.flags&TypeFlagsIndexedAccess != 0 && c.isConstTypeVariable(type_.AsIndexedAccessType().objectType, depth+1) || type_.flags&TypeFlagsConditional != 0 && c.isConstTypeVariable(c.getConstraintOfConditionalType(type_.AsConditionalType()), depth+1) || type_.flags&TypeFlagsSubstitution != 0 && c.isConstTypeVariable(type_.AsSubstitutionType().baseType, depth) || getObjectFlags(type_)&ObjectFlagsMapped != 0 && c.isConstMappedType(type_.AsMappedType(), depth) || c.isGenericTupleType(type_) && core.FindIndex(c.getElementTypes(type_), func(t *Type, i number) bool {
		return type_.target.elementFlags[i]&ElementFlagsVariadic != 0 && c.isConstTypeVariable(t, depth)
	}) >= 0)
}

func (c *Checker) getConstraintOfIndexedAccess(t IndexedAccessType) *Type {
	if c.hasNonCircularBaseConstraint(t) {
		return c.getConstraintFromIndexedAccess(t)
	} else {
		return nil
	}
}

func (c *Checker) getSimplifiedTypeOrConstraint(t *Type) *Type {
	simplified := c.getSimplifiedType(t, false /*writing*/)
	if simplified != t {
		return simplified
	} else {
		return c.getConstraintOfType(t)
	}
}

func (c *Checker) getConstraintFromIndexedAccess(t IndexedAccessType) *Type {
	if c.isMappedTypeGenericIndexedAccess(t) {
		// For indexed access types of the form { [P in K]: E }[X], where K is non-generic and X is generic,
		// we substitute an instantiation of E where P is replaced with X.
		return c.substituteIndexedMappedType(t.objectType.AsMappedType(), t.indexType)
	}
	indexConstraint := c.getSimplifiedTypeOrConstraint(t.indexType)
	if indexConstraint != nil && indexConstraint != t.indexType {
		indexedAccess := c.getIndexedAccessTypeOrUndefined(t.objectType, indexConstraint, t.accessFlags)
		if indexedAccess != nil {
			return indexedAccess
		}
	}
	objectConstraint := c.getSimplifiedTypeOrConstraint(t.objectType)
	if objectConstraint != nil && objectConstraint != t.objectType {
		return c.getIndexedAccessTypeOrUndefined(objectConstraint, t.indexType, t.accessFlags)
	}
	return nil
}

func (c *Checker) getDefaultConstraintOfConditionalType(t ConditionalType) *Type {
	if t.resolvedDefaultConstraint == nil {
		// An `any` branch of a conditional type would normally be viral - specifically, without special handling here,
		// a conditional type with a single branch of type `any` would be assignable to anything, since it's constraint would simplify to
		// just `any`. This result is _usually_ unwanted - so instead here we elide an `any` branch from the constraint type,
		// in effect treating `any` like `never` rather than `unknown` in this location.
		trueConstraint := c.getInferredTrueTypeFromConditionalType(t)
		falseConstraint := c.getFalseTypeFromConditionalType(t)
		switch {
		case c.isTypeAny(trueConstraint):
			t.resolvedDefaultConstraint = falseConstraint
		case c.isTypeAny(falseConstraint):
			t.resolvedDefaultConstraint = trueConstraint
		default:
			t.resolvedDefaultConstraint = c.getUnionType([]*Type{trueConstraint, falseConstraint})
		}
	}
	return t.resolvedDefaultConstraint
}

func (c *Checker) getConstraintOfDistributiveConditionalType(t ConditionalType) *Type {
	if t.resolvedConstraintOfDistributive != nil {
		return t.resolvedConstraintOfDistributive || nil
	}

	// Check if we have a conditional type of the form 'T extends U ? X : Y', where T is a constrained
	// type parameter. If so, create an instantiation of the conditional type where T is replaced
	// with its constraint. We do this because if the constraint is a union type it will be distributed
	// over the conditional type and possibly reduced. For example, 'T extends undefined ? never : T'
	// removes 'undefined' from T.
	// We skip returning a distributive constraint for a restrictive instantiation of a conditional type
	// as the constraint for all type params (check type included) have been replace with `unknown`, which
	// is going to produce even more false positive/negative results than the distribute constraint already does.
	// Please note: the distributive constraint is a kludge for emulating what a negated type could to do filter
	// a union - once negated types exist and are applied to the conditional false branch, this "constraint"
	// likely doesn't need to exist.
	if t.root.isDistributive && t.restrictiveInstantiation != t {
		simplified := c.getSimplifiedType(t.checkType, false /*writing*/)
		var constraint *Type
		if simplified == t.checkType {
			constraint = c.getConstraintOfType(simplified)
		} else {
			constraint = simplified
		}
		if constraint != nil && constraint != t.checkType {
			instantiated := c.getConditionalTypeInstantiation(t, c.prependTypeMapping(t.root.checkType, constraint, t.mapper), true /*forConstraint*/)
			if instantiated.flags&TypeFlagsNever == 0 {
				t.resolvedConstraintOfDistributive = instantiated
				return instantiated
			}
		}
	}
	t.resolvedConstraintOfDistributive = false
	return nil
}

func (c *Checker) getConstraintFromConditionalType(t ConditionalType) *Type {
	return c.getConstraintOfDistributiveConditionalType(t) || c.getDefaultConstraintOfConditionalType(t)
}

func (c *Checker) getConstraintOfConditionalType(t ConditionalType) *Type {
	if c.hasNonCircularBaseConstraint(t) {
		return c.getConstraintFromConditionalType(t)
	} else {
		return nil
	}
}

func (c *Checker) getEffectiveConstraintOfIntersection(types []*Type, targetIsUnion bool) *Type {
	var constraints *[]*Type
	hasDisjointDomainType := false
	for _, t := range types {
		if t.flags&TypeFlagsInstantiable != 0 {
			// We keep following constraints as long as we have an instantiable type that is known
			// not to be circular or infinite (hence we stop on index access types).
			constraint := c.getConstraintOfType(t)
			for constraint != nil && constraint.flags&(TypeFlagsTypeParameter|TypeFlagsIndex|TypeFlagsConditional) != 0 {
				constraint = c.getConstraintOfType(constraint)
			}
			if constraint != nil {
				constraints = append(constraints, constraint)
				if targetIsUnion {
					constraints = append(constraints, t)
				}
			}
		} else if t.flags&TypeFlagsDisjointDomains != 0 || c.isEmptyAnonymousObjectType(t) {
			hasDisjointDomainType = true
		}
	}
	// If the target is a union type or if we are intersecting with types belonging to one of the
	// disjoint domains, we may end up producing a constraint that hasn't been examined before.
	if constraints != nil && (targetIsUnion || hasDisjointDomainType) {
		if hasDisjointDomainType {
			// We add any types belong to one of the disjoint domains because they might cause the final
			// intersection operation to reduce the union constraints.
			for _, t := range types {
				if t.flags&TypeFlagsDisjointDomains != 0 || c.isEmptyAnonymousObjectType(t) {
					constraints = append(constraints, t)
				}
			}
		}
		// The source types were normalized; ensure the result is normalized too.
		return c.getNormalizedType(c.getIntersectionType(constraints, IntersectionFlagsNoConstraintReduction), false /*writing*/)
	}
	return nil
}

func (c *Checker) getBaseConstraintOfType(t *Type) *Type {
	if t.flags&(TypeFlagsInstantiableNonPrimitive|TypeFlagsUnionOrIntersection|TypeFlagsTemplateLiteral|TypeFlagsStringMapping) != 0 || c.isGenericTupleType(t) {
		constraint := c.getResolvedBaseConstraint(t /* as InstantiableType | UnionOrIntersectionType */)
		if constraint != c.noConstraintType && constraint != c.circularConstraintType {
			return constraint
		} else {
			return nil
		}
	}
	if t.flags&TypeFlagsIndex != 0 {
		return c.stringNumberSymbolType
	} else {
		return nil
	}
}

/**
 * This is similar to `getBaseConstraintOfType` except it returns the input type if there's no base constraint, instead of `undefined`
 * It also doesn't map indexes to `string`, as where this is used this would be unneeded (and likely undesirable)
 */

func (c *Checker) getBaseConstraintOrType(t *Type) *Type {
	return c.getBaseConstraintOfType(t) || t
}

func (c *Checker) hasNonCircularBaseConstraint(t InstantiableType) bool {
	return c.getResolvedBaseConstraint(t) != c.circularConstraintType
}

/**
 * Return the resolved base constraint of a type variable. The noConstraintType singleton is returned if the
 * type variable has no constraint, and the circularConstraintType singleton is returned if the constraint
 * circularly references the type variable.
 */

func (c *Checker) getResolvedBaseConstraint(t Union[InstantiableType, UnionOrIntersectionType]) *Type {
	if t.resolvedBaseConstraint != nil {
		return t.resolvedBaseConstraint
	}
	var stack []any = []never{}
	t.resolvedBaseConstraint = getImmediateBaseConstraint(t)
	return t.resolvedBaseConstraint

	getImmediateBaseConstraint := func(t *Type) *Type {
		if t.immediateBaseConstraint == nil {
			if !c.pushTypeResolution(t, TypeSystemPropertyNameImmediateBaseConstraint) {
				return c.circularConstraintType
			}
			var result TODO
			// We always explore at least 10 levels of nested constraints. Thereafter, we continue to explore
			// up to 50 levels of nested constraints provided there are no "deeply nested" types on the stack
			// (i.e. no types for which five instantiations have been recorded on the stack). If we reach 50
			// levels of nesting, we are presumably exploring a repeating pattern with a long cycle that hasn't
			// yet triggered the deeply nested limiter. We have no test cases that actually get to 50 levels of
			// nesting, so it is effectively just a safety stop.
			identity := c.getRecursionIdentity(t)
			if stack.length < 10 || stack.length < 50 && !contains(stack, identity) {
				stack.push(identity)
				result = computeBaseConstraint(c.getSimplifiedType(t, false /*writing*/))
				stack.pop()
			}
			if !c.popTypeResolution() {
				if t.flags&TypeFlagsTypeParameter != 0 {
					errorNode := c.getConstraintDeclaration(t.AsTypeParameter())
					if errorNode != nil {
						diagnostic := c.error(errorNode, Diagnostics.Type_parameter_0_has_a_circular_constraint, c.typeToString(t))
						if c.currentNode != nil && !isNodeDescendantOf(errorNode, c.currentNode) && !isNodeDescendantOf(c.currentNode, errorNode) {
							addRelatedInfo(diagnostic, createDiagnosticForNode(c.currentNode, Diagnostics.Circularity_originates_in_type_at_this_location))
						}
					}
				}
				result = c.circularConstraintType
			}
			if t.immediateBaseConstraint == nil {
				t.immediateBaseConstraint = result || c.noConstraintType
			}
		}
		return t.immediateBaseConstraint
	}

	getBaseConstraint := func(t *Type) *Type {
		c := getImmediateBaseConstraint(t)
		if c != c.noConstraintType && c != c.circularConstraintType {
			return c
		} else {
			return nil
		}
	}

	computeBaseConstraint := func(t *Type) *Type {
		if t.flags&TypeFlagsTypeParameter != 0 {
			constraint := c.getConstraintFromTypeParameter(t.AsTypeParameter())
			if t.AsTypeParameter().isThisType || constraint == nil {
				return constraint
			} else {
				return getBaseConstraint(constraint)
			}
		}
		if t.flags&TypeFlagsUnionOrIntersection != 0 {
			types := t.AsUnionOrIntersectionType().types
			var baseTypes []*Type = []never{}
			different := false
			for _, type_ := range types {
				baseType := getBaseConstraint(type_)
				if baseType != nil {
					if baseType != type_ {
						different = true
					}
					baseTypes.push(baseType)
				} else {
					different = true
				}
			}
			if !different {
				return t
			}
			switch {
			case t.flags&TypeFlagsUnion != 0 && baseTypes.length == types.length:
				return c.getUnionType(baseTypes)
			case t.flags&TypeFlagsIntersection != 0 && baseTypes.length != 0:
				return c.getIntersectionType(baseTypes)
			default:
				return nil
			}
		}
		if t.flags&TypeFlagsIndex != 0 {
			return c.stringNumberSymbolType
		}
		if t.flags&TypeFlagsTemplateLiteral != 0 {
			types := t.AsTemplateLiteralType().types
			constraints := mapDefined(types, getBaseConstraint)
			if constraints.length == types.length {
				return c.getTemplateLiteralType(t.AsTemplateLiteralType().texts, constraints)
			} else {
				return c.stringType
			}
		}
		if t.flags&TypeFlagsStringMapping != 0 {
			constraint := getBaseConstraint(t.AsStringMappingType().type_)
			if constraint != nil && constraint != t.AsStringMappingType().type_ {
				return c.getStringMappingType(t.AsStringMappingType().symbol, constraint)
			} else {
				return c.stringType
			}
		}
		if t.flags&TypeFlagsIndexedAccess != 0 {
			if c.isMappedTypeGenericIndexedAccess(t) {
				// For indexed access types of the form { [P in K]: E }[X], where K is non-generic and X is generic,
				// we substitute an instantiation of E where P is replaced with X.
				return getBaseConstraint(c.substituteIndexedMappedType(t.AsIndexedAccessType().objectType.AsMappedType(), t.AsIndexedAccessType().indexType))
			}
			baseObjectType := getBaseConstraint(t.AsIndexedAccessType().objectType)
			baseIndexType := getBaseConstraint(t.AsIndexedAccessType().indexType)
			baseIndexedAccess := baseObjectType && baseIndexType && c.getIndexedAccessTypeOrUndefined(baseObjectType, baseIndexType, t.AsIndexedAccessType().accessFlags)
			return baseIndexedAccess && getBaseConstraint(baseIndexedAccess)
		}
		if t.flags&TypeFlagsConditional != 0 {
			constraint := c.getConstraintFromConditionalType(t.AsConditionalType())
			return constraint && getBaseConstraint(constraint)
		}
		if t.flags&TypeFlagsSubstitution != 0 {
			return getBaseConstraint(c.getSubstitutionIntersection(t.AsSubstitutionType()))
		}
		if c.isGenericTupleType(t) {
			// We substitute constraints for variadic elements only when the constraints are array types or
			// non-variadic tuple types as we want to avoid further (possibly unbounded) recursion.
			newElements := core.Map(c.getElementTypes(t), func(v *Type, i number) *Type {
				constraint := v.flags&TypeFlagsTypeParameter && t.target.elementFlags[i]&ElementFlagsVariadic && getBaseConstraint(v) || v
				if constraint != v && c.everyType(constraint, func(c *Type) bool {
					return c.isArrayOrTupleType(c) && !c.isGenericTupleType(c)
				}) {
					return constraint
				} else {
					return v
				}
			})
			return c.createTupleType(newElements, t.target.elementFlags, t.target.readonly, t.target.labeledElementDeclarations)
		}
		return t
	}

}

func (c *Checker) getApparentTypeOfIntersectionType(t IntersectionType, thisArgument *Type) *Type {
	if t == thisArgument {
		return t.resolvedApparentType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.resolvedApparentType = getTypeWithThisArgument(type, thisArgument, /*needApparentType* / true) */ TODO)
	}
	key := __TEMPLATE__("I", c.getTypeId(t), ",", c.getTypeId(thisArgument))
	return ifNotNilElse(c.getCachedType(key), c.setCachedType(key, c.getTypeWithThisArgument(t, thisArgument, true /*needApparentType*/)))
}

func (c *Checker) getResolvedTypeParameterDefault(typeParameter TypeParameter) *Type {
	if typeParameter.default_ == nil {
		if typeParameter.target != nil {
			targetDefault := c.getResolvedTypeParameterDefault(typeParameter.target)
			if targetDefault != nil {
				typeParameter.default_ = c.instantiateType(targetDefault, typeParameter.mapper)
			} else {
				typeParameter.default_ = c.noConstraintType
			}
		} else {
			// To block recursion, set the initial value to the resolvingDefaultType.
			typeParameter.default_ = c.resolvingDefaultType
			defaultDeclaration := typeParameter.symbol && forEach(typeParameter.symbol.Declarations, func(decl Declaration) * /* TODO(TS-TO-GO) inferred type false | TypeNode */ any {
				return isTypeParameterDeclaration(decl) && decl.Default_
			})
			var defaultType *Type
			if defaultDeclaration {
				defaultType = c.getTypeFromTypeNode(defaultDeclaration)
			} else {
				defaultType = c.noConstraintType
			}
			if typeParameter.default_ == c.resolvingDefaultType {
				// If we have not been called recursively, set the correct default type.
				typeParameter.default_ = defaultType
			}
		}
	} else if typeParameter.default_ == c.resolvingDefaultType {
		// If we are called recursively for this type parameter, mark the default as circular.
		typeParameter.default_ = c.circularConstraintType
	}
	return typeParameter.default_
}

/**
 * Gets the default type for a type parameter.
 *
 * If the type parameter is the result of an instantiation, this gets the instantiated
 * default type of its target. If the type parameter has no default type or the default is
 * circular, `undefined` is returned.
 */

func (c *Checker) getDefaultFromTypeParameter(typeParameter TypeParameter) *Type {
	defaultType := c.getResolvedTypeParameterDefault(typeParameter)
	if defaultType != c.noConstraintType && defaultType != c.circularConstraintType {
		return defaultType
	} else {
		return nil
	}
}

func (c *Checker) hasNonCircularTypeParameterDefault(typeParameter TypeParameter) bool {
	return c.getResolvedTypeParameterDefault(typeParameter) != c.circularConstraintType
}

/**
 * Indicates whether the declaration of a typeParameter has a default type.
 */

func (c *Checker) hasTypeParameterDefault(typeParameter TypeParameter) bool {
	return typeParameter.symbol && forEach(typeParameter.symbol.Declarations, func(decl Declaration) * /* TODO(TS-TO-GO) inferred type false | TypeNode */ any {
		return isTypeParameterDeclaration(decl) && decl.Default_
	})
}

func (c *Checker) getApparentTypeOfMappedType(t MappedType) *Type {
	return t.resolvedApparentType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.resolvedApparentType = getResolvedApparentTypeOfMappedType(type) */ TODO)
}

func (c *Checker) getResolvedApparentTypeOfMappedType(t MappedType) *Type {
	target := (ifNotNilElse(t.target, t)).AsMappedType()
	typeVariable := c.getHomomorphicTypeVariable(target)
	if typeVariable != nil && target.declaration.NameType == nil {
		// We have a homomorphic mapped type or an instantiation of a homomorphic mapped type, i.e. a type
		// of the form { [P in keyof T]: X }. Obtain the modifiers type (the T of the keyof T), and if it is
		// another generic mapped type, recursively obtain its apparent type. Otherwise, obtain its base
		// constraint. Then, if every constituent of the base constraint is an array or tuple type, apply
		// this mapped type to the base constraint. It is safe to recurse when the modifiers type is a
		// mapped type because we protect again circular constraints in getTypeFromMappedTypeNode.
		modifiersType := c.getModifiersTypeFromMappedType(t)
		var baseConstraint *Type
		if c.isGenericMappedType(modifiersType) {
			baseConstraint = c.getApparentTypeOfMappedType(modifiersType)
		} else {
			baseConstraint = c.getBaseConstraintOfType(modifiersType)
		}
		if baseConstraint != nil && c.everyType(baseConstraint, func(t *Type) bool {
			return c.isArrayOrTupleType(t) || c.isArrayOrTupleOrIntersection(t)
		}) {
			return c.instantiateType(target, c.prependTypeMapping(typeVariable, baseConstraint, t.mapper))
		}
	}
	return t
}

func (c *Checker) isArrayOrTupleOrIntersection(t *Type) bool {
	return t.flags&TypeFlagsIntersection != 0 && core.Every(t.AsIntersectionType().types, c.isArrayOrTupleType)
}

func (c *Checker) isMappedTypeGenericIndexedAccess(t *Type) bool {
	var objectType TODO
	return t.flags&TypeFlagsIndexedAccess != 0 && getObjectFlags( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: objectType = (type as IndexedAccessType).objectType */ TODO)&ObjectFlagsMapped != 0 && !c.isGenericMappedType(objectType) && c.isGenericIndexType(t.AsIndexedAccessType().indexType) && c.getMappedTypeModifiers(objectType.AsMappedType())&MappedTypeModifiersExcludeOptional == 0 && objectType.AsMappedType().declaration.NameType == nil
}

/**
 * For a type parameter, return the base constraint of the type parameter. For the string, number,
 * boolean, and symbol primitive types, return the corresponding object types. Otherwise return the
 * type itself.
 */

func (c *Checker) getApparentType(type_ *Type) *Type {
	var t *Type
	if type_.flags&TypeFlagsInstantiable != 0 {
		t = c.getBaseConstraintOfType(type_) || c.unknownType
	} else {
		t = type_
	}
	objectFlags := getObjectFlags(t)
	switch {
	case objectFlags&ObjectFlagsMapped != 0:
		return c.getApparentTypeOfMappedType(t.AsMappedType())
	case objectFlags&ObjectFlagsReference != 0 && t != type_:
		return c.getTypeWithThisArgument(t, type_)
	case t.flags&TypeFlagsIntersection != 0:
		return c.getApparentTypeOfIntersectionType(t.AsIntersectionType(), type_)
	case t.flags&TypeFlagsStringLike != 0:
		return c.globalStringType
	case t.flags&TypeFlagsNumberLike != 0:
		return c.globalNumberType
	case t.flags&TypeFlagsBigIntLike != 0:
		return c.getGlobalBigIntType()
	case t.flags&TypeFlagsBooleanLike != 0:
		return c.globalBooleanType
	case t.flags&TypeFlagsESSymbolLike != 0:
		return c.getGlobalESSymbolType()
	case t.flags&TypeFlagsNonPrimitive != 0:
		return c.emptyObjectType
	case t.flags&TypeFlagsIndex != 0:
		return c.stringNumberSymbolType
	case t.flags&TypeFlagsUnknown != 0 && !c.strictNullChecks:
		return c.emptyObjectType
	default:
		return t
	}
}

func (c *Checker) getReducedApparentType(t *Type) *Type {
	// Since getApparentType may return a non-reduced union or intersection type, we need to perform
	// type reduction both before and after obtaining the apparent type. For example, given a type parameter
	// 'T extends A | B', the type 'T & X' becomes 'A & X | B & X' after obtaining the apparent type, and
	// that type may need further reduction to remove empty intersections.
	return c.getReducedType(c.getApparentType(c.getReducedType(t)))
}

func (c *Checker) createUnionOrIntersectionProperty(containingType UnionOrIntersectionType, name string, skipObjectFunctionPropertyAugment bool) *ast.Symbol {
	var singleProp *ast.Symbol
	var propSet *Map[SymbolId, *ast.Symbol]
	var indexTypes *[]*Type
	isUnion := containingType.flags & TypeFlagsUnion
	// Flags we want to propagate to the result if they exist in all source symbols
	var optionalFlag *SymbolFlags
	syntheticFlag := ast.CheckFlagsSyntheticMethod
	var checkFlags number
	if isUnion != 0 {
		checkFlags = 0
	} else {
		checkFlags = ast.CheckFlagsReadonly
	}
	mergedInstantiations := false
	for _, current := range containingType.types {
		t := c.getApparentType(current)
		if !(c.isErrorType(t) || t.flags&TypeFlagsNever != 0) {
			prop := c.getPropertyOfType(t, name, skipObjectFunctionPropertyAugment)
			var modifiers /* TODO(TS-TO-GO) inferred type 0 | ModifierFlags */ any
			if prop != nil {
				modifiers = getDeclarationModifierFlagsFromSymbol(prop)
			} else {
				modifiers = 0
			}
			if prop != nil {
				if prop.Flags&ast.SymbolFlagsClassMember != 0 {
					if optionalFlag == nil {
						optionalFlag = ifElse(isUnion != 0, ast.SymbolFlagsNone, ast.SymbolFlagsOptional)
					}
					if isUnion != 0 {
						optionalFlag |= prop.Flags & ast.SymbolFlagsOptional
					} else {
						optionalFlag &= prop.Flags
					}
				}
				if singleProp == nil {
					singleProp = prop
				} else if prop != singleProp {
					isInstantiation := (c.getTargetSymbol(prop) || prop) == (c.getTargetSymbol(singleProp) || singleProp)
					// If the symbols are instances of one another with identical types - consider the symbols
					// equivalent and just use the first one, which thus allows us to avoid eliding private
					// members when intersecting a (this-)instantiations of a class with its raw base or another instance
					if isInstantiation && c.compareProperties(singleProp, prop, func(a *Type, b *Type) /* TODO(TS-TO-GO) inferred type Ternary.False | Ternary.True */ any {
						if a == b {
							return TernaryTrue
						} else {
							return TernaryFalse
						}
					}) == TernaryTrue {
						// If we merged instantiations of a generic type, we replicate the symbol parent resetting behavior we used
						// to do when we recorded multiple distinct symbols so that we still get, eg, `Array<T>.length` printed
						// back and not `Array<string>.length` when we're looking at a `.length` access on a `string[] | number[]`
						mergedInstantiations = singleProp.Parent != nil && length(c.getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(singleProp.Parent)) != 0
					} else {
						if propSet == nil {
							propSet = NewMap[SymbolId, *ast.Symbol]()
							propSet.set(getSymbolId(singleProp), singleProp)
						}
						id := getSymbolId(prop)
						if !propSet.has(id) {
							propSet.set(id, prop)
						}
					}
				}
				if isUnion != 0 && c.isReadonlySymbol(prop) {
					checkFlags |= ast.CheckFlagsReadonly
				} else if isUnion == 0 && !c.isReadonlySymbol(prop) {
					checkFlags &^= ast.CheckFlagsReadonly
				}
				checkFlags |= (ifElse(modifiers&ast.ModifierFlagsNonPublicAccessibilityModifier == 0, ast.CheckFlagsContainsPublic, 0)) | (ifElse(modifiers&ast.ModifierFlagsProtected != 0, ast.CheckFlagsContainsProtected, 0)) | (ifElse(modifiers&ast.ModifierFlagsPrivate != 0, ast.CheckFlagsContainsPrivate, 0)) | (ifElse(modifiers&ast.ModifierFlagsStatic != 0, ast.CheckFlagsContainsStatic, 0))
				if !c.isPrototypeProperty(prop) {
					syntheticFlag = ast.CheckFlagsSyntheticProperty
				}
			} else if isUnion != 0 {
				indexInfo := !c.isLateBoundName(name) && c.getApplicableIndexInfoForName(t, name)
				if indexInfo {
					checkFlags |= ast.CheckFlagsWritePartial | (ifElse(indexInfo.isReadonly, ast.CheckFlagsReadonly, 0))
					indexTypes = append(indexTypes, ifElse(c.isTupleType(t), c.getRestTypeOfTupleType(t) || c.undefinedType, indexInfo.type_))
				} else if c.isObjectLiteralType(t) && getObjectFlags(t)&ObjectFlagsContainsSpread == 0 {
					checkFlags |= ast.CheckFlagsWritePartial
					indexTypes = append(indexTypes, c.undefinedType)
				} else {
					checkFlags |= ast.CheckFlagsReadPartial
				}
			}
		}
	}
	if singleProp == nil || isUnion != 0 && (propSet != nil || checkFlags&ast.CheckFlagsPartial != 0) && checkFlags&(ast.CheckFlagsContainsPrivate|ast.CheckFlagsContainsProtected) != 0 && !(propSet != nil && c.getCommonDeclarationsOfSymbols(propSet.values()) != nil) {
		// No property was found, or, in a union, a property has a private or protected declaration in one
		// constituent, but is missing or has a different declaration in another constituent.
		return nil
	}
	if propSet == nil && checkFlags&ast.CheckFlagsReadPartial == 0 && indexTypes == nil {
		if mergedInstantiations {
			// No symbol from a union/intersection should have a `.parent` set (since unions/intersections don't act as symbol parents)
			// Unless that parent is "reconstituted" from the "first value declaration" on the symbol (which is likely different than its instantiated parent!)
			// They also have a `.containingType` set, which affects some services endpoints behavior, like `getRootSymbol`
			links := tryCast(singleProp, isTransientSymbol). /* ? */ links
			clone := c.createSymbolWithType(singleProp, links. /* ? */ type_)
			clone.Parent = singleProp.ValueDeclaration. /* ? */ symbol. /* ? */ parent
			clone.Links.containingType = containingType
			clone.Links.mapper = links. /* ? */ mapper
			clone.Links.writeType = c.getWriteTypeOfSymbol(singleProp)
			return clone
		} else {
			return singleProp
		}
	}
	var props []*ast.Symbol
	if propSet != nil {
		props = arrayFrom(propSet.values())
	} else {
		props = []*ast.Symbol{singleProp}
	}
	var declarations *[]Declaration
	var firstType *Type
	var nameType *Type
	var propTypes []*Type = []never{}
	var writeTypes *[]*Type
	var firstValueDeclaration Declaration
	hasNonUniformValueDeclaration := false
	for _, prop := range props {
		if firstValueDeclaration == nil {
			firstValueDeclaration = prop.ValueDeclaration
		} else if prop.ValueDeclaration != nil && prop.ValueDeclaration != firstValueDeclaration {
			hasNonUniformValueDeclaration = true
		}
		declarations = addRange(declarations, prop.Declarations)
		t := c.getTypeOfSymbol(prop)
		if firstType == nil {
			firstType = t
			nameType = c.getSymbolLinks(prop).nameType
		}
		writeType := c.getWriteTypeOfSymbol(prop)
		if writeTypes != nil || writeType != t {
			writeTypes = append(ifElse(writeTypes == nil, propTypes.slice(), writeTypes), writeType)
		}
		if t != firstType {
			checkFlags |= ast.CheckFlagsHasNonUniformType
		}
		if c.isLiteralType(t) || c.isPatternLiteralType(t) {
			checkFlags |= ast.CheckFlagsHasLiteralType
		}
		if t.flags&TypeFlagsNever != 0 && t != c.uniqueLiteralType {
			checkFlags |= ast.CheckFlagsHasNeverType
		}
		propTypes.push(t)
	}
	addRange(propTypes, indexTypes)
	result := c.createSymbol(ast.SymbolFlagsProperty|(ifNotNilElse(optionalFlag, 0)), name, syntheticFlag|checkFlags)
	result.Links.containingType = containingType
	if !hasNonUniformValueDeclaration && firstValueDeclaration != nil {
		result.ValueDeclaration = firstValueDeclaration

		// Inherit information about parent type.
		if firstValueDeclaration.Symbol.Parent != nil {
			result.Parent = firstValueDeclaration.Symbol.Parent
		}
	}

	result.Declarations = declarations
	result.Links.nameType = nameType
	if propTypes.length > 2 {
		// When `propTypes` has the potential to explode in size when normalized, defer normalization until absolutely needed
		result.Links.checkFlags |= ast.CheckFlagsDeferredType
		result.Links.deferralParent = containingType
		result.Links.deferralConstituents = propTypes
		result.Links.deferralWriteConstituents = writeTypes
	} else {
		if isUnion != 0 {
			result.Links.type_ = c.getUnionType(propTypes)
		} else {
			result.Links.type_ = c.getIntersectionType(propTypes)
		}
		if writeTypes != nil {
			if isUnion != 0 {
				result.Links.writeType = c.getUnionType(writeTypes)
			} else {
				result.Links.writeType = c.getIntersectionType(writeTypes)
			}
		}
	}
	return result
}

// Return the symbol for a given property in a union or intersection type, or undefined if the property
// does not exist in any constituent type. Note that the returned property may only be present in some
// constituents, in which case the isPartial flag is set when the containing type is union type. We need
// these partial properties when identifying discriminant properties, but otherwise they are filtered out
// and do not appear to be present in the union type.
func (c *Checker) getUnionOrIntersectionProperty(t UnionOrIntersectionType, name string, skipObjectFunctionPropertyAugment bool) *ast.Symbol {
	var property *ast.Symbol
	if skipObjectFunctionPropertyAugment {
		property = t.propertyCacheWithoutObjectFunctionPropertyAugment. /* ? */ get(name)
	} else {
		property = t.propertyCache. /* ? */ get(name)
	}
	if property == nil {
		property = c.createUnionOrIntersectionProperty(t, name, skipObjectFunctionPropertyAugment)
		if property != nil {
			var properties SymbolTable
			if skipObjectFunctionPropertyAugment {
				properties = /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: type.propertyCacheWithoutObjectFunctionPropertyAugment ||= createSymbolTable() */ TODO
			} else {
				properties = /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: type.propertyCache ||= createSymbolTable() */ TODO
			}
			properties.set(name, property)
			// Propagate an entry from the non-augmented cache to the augmented cache unless the property is partial.
			if skipObjectFunctionPropertyAugment && getCheckFlags(property)&ast.CheckFlagsPartial == 0 && t.propertyCache. /* ? */ get(name) == nil {
				properties := /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: type.propertyCache ||= createSymbolTable() */ TODO
				properties.set(name, property)
			}
		}
	}
	return property
}

func (c *Checker) getCommonDeclarationsOfSymbols(symbols Iterable[*ast.Symbol]) *Set[*ast.Node] {
	var commonDeclarations *Set[*ast.Node]
	for _, symbol := range symbols {
		if symbol.Declarations == nil {
			return nil
		}
		if commonDeclarations == nil {
			commonDeclarations = NewSet(symbol.Declarations)
			continue
		}
		commonDeclarations.forEach(func(declaration *ast.Node) {
			if !contains(symbol.Declarations, declaration) {
				commonDeclarations.delete(declaration)
			}
		})
		if commonDeclarations.size == 0 {
			return nil
		}
	}
	return commonDeclarations
}

func (c *Checker) getPropertyOfUnionOrIntersectionType(t UnionOrIntersectionType, name string, skipObjectFunctionPropertyAugment bool) *ast.Symbol {
	property := c.getUnionOrIntersectionProperty(t, name, skipObjectFunctionPropertyAugment)
	// We need to filter out partial properties in union types
	if property != nil && getCheckFlags(property)&ast.CheckFlagsReadPartial == 0 {
		return property
	} else {
		return nil
	}
}

/**
 * Return the reduced form of the given type. For a union type, it is a union of the normalized constituent types.
 * For an intersection of types containing one or more mututally exclusive discriminant properties, it is 'never'.
 * For all other types, it is simply the type itself. Discriminant properties are considered mutually exclusive when
 * no constituent property has type 'never', but the intersection of the constituent property types is 'never'.
 */

func (c *Checker) getReducedType(t *Type) *Type {
	if t.flags&TypeFlagsUnion != 0 && t.AsUnionType().objectFlags&ObjectFlagsContainsIntersections != 0 {
		return t.AsUnionType().resolvedReducedType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: (type as UnionType).resolvedReducedType = getReducedUnionType(type as UnionType) */ TODO)
	} else if t.flags&TypeFlagsIntersection != 0 {
		if t.AsIntersectionType().objectFlags&ObjectFlagsIsNeverIntersectionComputed == 0 {
			t.AsIntersectionType().objectFlags |= ObjectFlagsIsNeverIntersectionComputed | (ifElse(core.Some(c.getPropertiesOfUnionOrIntersectionType(t.AsIntersectionType()), c.isNeverReducedProperty), ObjectFlagsIsNeverIntersection, 0))
		}
		if t.AsIntersectionType().objectFlags&ObjectFlagsIsNeverIntersection != 0 {
			return c.neverType
		} else {
			return t
		}
	}
	return t
}

func (c *Checker) getReducedUnionType(unionType UnionType) *Type {
	reducedTypes := core.SameMap(unionType.types, c.getReducedType)
	if reducedTypes == unionType.types {
		return unionType
	}
	reduced := c.getUnionType(reducedTypes)
	if reduced.flags&TypeFlagsUnion != 0 {
		reduced.AsUnionType().resolvedReducedType = reduced
	}
	return reduced
}

func (c *Checker) isNeverReducedProperty(prop *ast.Symbol) bool {
	return c.isDiscriminantWithNeverType(prop) || c.isConflictingPrivateProperty(prop)
}

func (c *Checker) isDiscriminantWithNeverType(prop *ast.Symbol) bool {
	// Return true for a synthetic non-optional property with non-uniform types, where at least one is
	// a literal type and none is never, that reduces to never.
	return prop.Flags&ast.SymbolFlagsOptional == 0 && (getCheckFlags(prop)&(ast.CheckFlagsDiscriminant|ast.CheckFlagsHasNeverType)) == ast.CheckFlagsDiscriminant && c.getTypeOfSymbol(prop).flags&TypeFlagsNever != 0
}

func (c *Checker) isConflictingPrivateProperty(prop *ast.Symbol) bool {
	// Return true for a synthetic property with multiple declarations, at least one of which is private.
	return prop.ValueDeclaration == nil && getCheckFlags(prop)&ast.CheckFlagsContainsPrivate != 0
}

/**
 * A union type which is reducible upon instantiation (meaning some members are removed under certain instantiations)
 * must be kept generic, as that instantiation information needs to flow through the type system. By replacing all
 * type parameters in the union with a special never type that is treated as a literal in `getReducedType`, we can cause
 * the `getReducedType` logic to reduce the resulting type if possible (since only intersections with conflicting
 * literal-typed properties are reducible).
 */

func (c *Checker) isGenericReducibleType(t *Type) bool {
	return t.flags&TypeFlagsUnion != 0 && t.AsUnionType().objectFlags&ObjectFlagsContainsIntersections != 0 && core.Some(t.AsUnionType().types, c.isGenericReducibleType) || t.flags&TypeFlagsIntersection != 0 && c.isReducibleIntersection(t.AsIntersectionType())
}

func (c *Checker) isReducibleIntersection(t IntersectionType) bool {
	uniqueFilled := t.uniqueLiteralFilledInstantiation || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.uniqueLiteralFilledInstantiation = instantiateType(type, uniqueLiteralMapper) */ TODO)
	return c.getReducedType(uniqueFilled) != uniqueFilled
}

func (c *Checker) elaborateNeverIntersection(errorInfo *DiagnosticMessageChain, t *Type) *DiagnosticMessageChain {
	if t.flags&TypeFlagsIntersection != 0 && getObjectFlags(t)&ObjectFlagsIsNeverIntersection != 0 {
		neverProp := core.Find(c.getPropertiesOfUnionOrIntersectionType(t.AsIntersectionType()), c.isDiscriminantWithNeverType)
		if neverProp != nil {
			return chainDiagnosticMessages(errorInfo, Diagnostics.The_intersection_0_was_reduced_to_never_because_property_1_has_conflicting_types_in_some_constituents, c.typeToString(t, nil /*enclosingDeclaration*/, TypeFormatFlagsNoTypeReduction), c.symbolToString(neverProp))
		}
		privateProp := core.Find(c.getPropertiesOfUnionOrIntersectionType(t.AsIntersectionType()), c.isConflictingPrivateProperty)
		if privateProp != nil {
			return chainDiagnosticMessages(errorInfo, Diagnostics.The_intersection_0_was_reduced_to_never_because_property_1_exists_in_multiple_constituents_and_is_private_in_some, c.typeToString(t, nil /*enclosingDeclaration*/, TypeFormatFlagsNoTypeReduction), c.symbolToString(privateProp))
		}
	}
	return errorInfo
}

/**
 * Return the symbol for the property with the given name in the given type. Creates synthetic union properties when
 * necessary, maps primitive types and type parameters are to their apparent types, and augments with properties from
 * Object and Function as appropriate.
 *
 * @param type a type to look up property from
 * @param name a name of property to look up in a given type
 */

func (c *Checker) getPropertyOfType(t *Type, name string, skipObjectFunctionPropertyAugment bool, includeTypeOnlyMembers bool) *ast.Symbol {
	t = c.getReducedApparentType(t)
	if t.flags&TypeFlagsObject != 0 {
		resolved := c.resolveStructuredTypeMembers(t.AsObjectType())
		symbol := resolved.members.get(name)
		if symbol != nil && !includeTypeOnlyMembers && t.symbol. /* ? */ Flags&ast.SymbolFlagsValueModule != 0 && c.getSymbolLinks(t.symbol).typeOnlyExportStarMap. /* ? */ has(name) {
			// If this is the type of a module, `resolved.members.get(name)` might have effectively skipped over
			// an `export type * from './foo'`, leaving `symbolIsValue` unable to see that the symbol is being
			// viewed through a type-only export.
			return nil
		}
		if symbol != nil && c.symbolIsValue(symbol, includeTypeOnlyMembers) {
			return symbol
		}
		if skipObjectFunctionPropertyAugment {
			return nil
		}
		var functionType *ObjectType
		switch {
		case resolved == c.anyFunctionType:
			functionType = c.globalFunctionType
		case resolved.callSignatures.length != 0:
			functionType = c.globalCallableFunctionType
		case resolved.constructSignatures.length != 0:
			functionType = c.globalNewableFunctionType
		default:
			functionType = nil
		}
		if functionType != nil {
			symbol := c.getPropertyOfObjectType(functionType, name)
			if symbol != nil {
				return symbol
			}
		}
		return c.getPropertyOfObjectType(c.globalObjectType, name)
	}
	if t.flags&TypeFlagsIntersection != 0 {
		prop := c.getPropertyOfUnionOrIntersectionType(t.AsUnionOrIntersectionType(), name, true /*skipObjectFunctionPropertyAugment*/)
		if prop != nil {
			return prop
		}
		if !skipObjectFunctionPropertyAugment {
			return c.getPropertyOfUnionOrIntersectionType(t.AsUnionOrIntersectionType(), name, skipObjectFunctionPropertyAugment)
		}
		return nil
	}
	if t.flags&TypeFlagsUnion != 0 {
		return c.getPropertyOfUnionOrIntersectionType(t.AsUnionOrIntersectionType(), name, skipObjectFunctionPropertyAugment)
	}
	return nil
}

func (c *Checker) getSignaturesOfStructuredType(t *Type, kind SignatureKind) []Signature {
	if t.flags&TypeFlagsStructuredType != 0 {
		resolved := c.resolveStructuredTypeMembers(t.AsObjectType())
		if kind == SignatureKindCall {
			return resolved.callSignatures
		} else {
			return resolved.constructSignatures
		}
	}
	return emptyArray
}

/**
 * Return the signatures of the given kind in the given type. Creates synthetic union signatures when necessary and
 * maps primitive types and type parameters are to their apparent types.
 */

func (c *Checker) getSignaturesOfType(t *Type, kind SignatureKind) []Signature {
	result := c.getSignaturesOfStructuredType(c.getReducedApparentType(t), kind)
	if kind == SignatureKindCall && length(result) == 0 && t.flags&TypeFlagsUnion != 0 {
		if t.AsUnionType().arrayFallbackSignatures != nil {
			return t.AsUnionType().arrayFallbackSignatures
		}
		// If the union is all different instantiations of a member of the global array type...
		var memberName string
		if c.everyType(t, func(t *Type) bool {
			return t.symbol. /* ? */ Parent != nil && c.isArrayOrTupleSymbol(t.symbol.Parent) && (ifElse(!memberName, ( /* TODO(TS-TO-GO) CommaToken BinaryExpression: memberName = t.symbol.escapedName, true */ TODO), memberName == t.symbol.EscapedName))
		}) {
			// Transform the type from `(A[] | B[])["member"]` to `(A | B)[]["member"]` (since we pretend array is covariant anyway)
			arrayArg := c.mapType(t, func(t *Type) *Type {
				return c.getMappedType((ifElse(c.isReadonlyArraySymbol(t.symbol.Parent), c.globalReadonlyArrayType, c.globalArrayType)).typeParameters[0], t.AsAnonymousType().mapper)
			})
			arrayType := c.createArrayType(arrayArg, c.someType(t, func(t *Type) bool {
				return c.isReadonlyArraySymbol(t.symbol.Parent)
			}))
			t.AsUnionType().arrayFallbackSignatures = c.getSignaturesOfType(c.getTypeOfPropertyOfType(arrayType, memberName), kind)
			return t.AsUnionType().arrayFallbackSignatures
		}
		t.AsUnionType().arrayFallbackSignatures = result
	}
	return result
}

func (c *Checker) isArrayOrTupleSymbol(symbol *ast.Symbol) bool {
	if symbol == nil || !c.globalArrayType.symbol || !c.globalReadonlyArrayType.symbol {
		return false
	}
	return c.getSymbolIfSameReference(symbol, c.globalArrayType.symbol) != nil || c.getSymbolIfSameReference(symbol, c.globalReadonlyArrayType.symbol) != nil
}

func (c *Checker) isReadonlyArraySymbol(symbol *ast.Symbol) bool {
	if symbol == nil || !c.globalReadonlyArrayType.symbol {
		return false
	}
	return c.getSymbolIfSameReference(symbol, c.globalReadonlyArrayType.symbol) != nil
}

func (c *Checker) findIndexInfo(indexInfos []IndexInfo, keyType *Type) *IndexInfo {
	return core.Find(indexInfos, func(info IndexInfo) bool {
		return info.keyType == keyType
	})
}

func (c *Checker) findApplicableIndexInfo(indexInfos []IndexInfo, keyType *Type) *IndexInfo {
	// Index signatures for type 'string' are considered only when no other index signatures apply.
	var stringIndexInfo *IndexInfo
	var applicableInfo *IndexInfo
	var applicableInfos *[]IndexInfo
	for _, info := range indexInfos {
		if info.keyType == c.stringType {
			stringIndexInfo = info
		} else if c.isApplicableIndexType(keyType, info.keyType) {
			if applicableInfo == nil {
				applicableInfo = info
			} else {
				(applicableInfos || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: applicableInfos = [applicableInfo] */ TODO)).push(info)
			}
		}
	}
	// When more than one index signature is applicable we create a synthetic IndexInfo. Instead of computing
	// the intersected key type, we just use unknownType for the key type as nothing actually depends on the
	// keyType property of the returned IndexInfo.
	switch {
	case applicableInfos != nil:
		return c.createIndexInfo(c.unknownType, c.getIntersectionType(core.Map(applicableInfos, func(info IndexInfo) *Type {
			return info.type_
		})), reduceLeft(applicableInfos, func(isReadonly bool, info IndexInfo) bool {
			return isReadonly && info.isReadonly
		}, true /*initial*/))
	case applicableInfo != nil:
		return applicableInfo
	case stringIndexInfo != nil && c.isApplicableIndexType(keyType, c.stringType):
		return stringIndexInfo
	default:
		return nil
	}
}

func (c *Checker) isApplicableIndexType(source *Type, target *Type) bool {
	// A 'string' index signature applies to types assignable to 'string' or 'number', and a 'number' index
	// signature applies to types assignable to 'number', `${number}` and numeric string literal types.
	return c.isTypeAssignableTo(source, target) || target == c.stringType && c.isTypeAssignableTo(source, c.numberType) || target == c.numberType && (source == c.numericStringType || source.flags&TypeFlagsStringLiteral != 0 && isNumericLiteralName(source.AsStringLiteralType().value))
}

func (c *Checker) getIndexInfosOfStructuredType(t *Type) []IndexInfo {
	if t.flags&TypeFlagsStructuredType != 0 {
		resolved := c.resolveStructuredTypeMembers(t.AsObjectType())
		return resolved.indexInfos
	}
	return emptyArray
}

func (c *Checker) getIndexInfosOfType(t *Type) []IndexInfo {
	return c.getIndexInfosOfStructuredType(c.getReducedApparentType(t))
}

// Return the indexing info of the given kind in the given type. Creates synthetic union index types when necessary and
// maps primitive types and type parameters are to their apparent types.
func (c *Checker) getIndexInfoOfType(t *Type, keyType *Type) *IndexInfo {
	return c.findIndexInfo(c.getIndexInfosOfType(t), keyType)
}

// Return the index type of the given kind in the given type. Creates synthetic union index types when necessary and
// maps primitive types and type parameters are to their apparent types.
func (c *Checker) getIndexTypeOfType(t *Type, keyType *Type) *Type {
	return c.getIndexInfoOfType(t, keyType). /* ? */ type_
}

func (c *Checker) getApplicableIndexInfos(t *Type, keyType *Type) []IndexInfo {
	return c.getIndexInfosOfType(t).filter(func(info IndexInfo) bool {
		return c.isApplicableIndexType(keyType, info.keyType)
	})
}

func (c *Checker) getApplicableIndexInfo(t *Type, keyType *Type) *IndexInfo {
	return c.findApplicableIndexInfo(c.getIndexInfosOfType(t), keyType)
}

func (c *Checker) getApplicableIndexInfoForName(t *Type, name string) *IndexInfo {
	return c.getApplicableIndexInfo(t, ifElse(c.isLateBoundName(name), c.esSymbolType, c.getStringLiteralType(unescapeLeadingUnderscores(name))))
}

// Return list of type parameters with duplicates removed (duplicate identifier errors are generated in the actual
// type checking functions).
func (c *Checker) getTypeParametersFromDeclaration(declaration DeclarationWithTypeParameters) *[]TypeParameter {
	var result *[]TypeParameter
	for _, node := range getEffectiveTypeParameterDeclarations(declaration) {
		result = core.AppendIfUnique(result, c.getDeclaredTypeOfTypeParameter(node.Symbol))
	}
	switch {
	case result. /* ? */ length:
		return result
	case isFunctionDeclaration(declaration):
		return c.getSignatureOfTypeTag(declaration). /* ? */ typeParameters
	default:
		return nil
	}
}

func (c *Checker) symbolsToArray(symbols SymbolTable) []*ast.Symbol {
	var result []*ast.Symbol = []never{}
	symbols.forEach(func(symbol *ast.Symbol, id string) {
		if !c.isReservedMemberName(id) {
			result.push(symbol)
		}
	})
	return result
}

func (c *Checker) tryFindAmbientModule(moduleName string, withAugmentations bool) *ast.Symbol {
	if isExternalModuleNameRelative(moduleName) {
		return nil
	}
	symbol := c.getSymbol(c.globals, "\""+moduleName+"\"".(string), ast.SymbolFlagsValueModule)
	// merged symbol is module declaration symbol combined with all augmentations
	if symbol != nil && withAugmentations {
		return c.getMergedSymbol(symbol)
	} else {
		return symbol
	}
}

func (c *Checker) hasEffectiveQuestionToken(node Union[ParameterDeclaration, JSDocParameterTag, JSDocPropertyTag]) bool {
	return hasQuestionToken(node) || isOptionalJSDocPropertyLikeTag(node) || isParameter(node) && isJSDocOptionalParameter(node)
}

func (c *Checker) isOptionalParameter(node Union[ParameterDeclaration, JSDocParameterTag, JSDocPropertyTag]) bool {
	if c.hasEffectiveQuestionToken(node) {
		return true
	}
	if !isParameter(node) {
		return false
	}
	if node.Initializer != nil {
		signature := c.getSignatureFromDeclaration(node.Parent)
		parameterIndex := node.Parent.Parameters.indexOf(node)
		Debug.assert(parameterIndex >= 0)
		// Only consider syntactic or instantiated parameters as optional, not `void` parameters as this function is used
		// in grammar checks and checking for `void` too early results in parameter types widening too early
		// and causes some noImplicitAny errors to be lost.
		return parameterIndex >= c.getMinArgumentCount(signature, MinArgumentCountFlagsStrongArityForUntypedJS|MinArgumentCountFlagsVoidIsNonOptional)
	}
	iife := getImmediatelyInvokedFunctionExpression(node.Parent)
	if iife != nil {
		return node.Type_ == nil && node.DotDotDotToken == nil && node.Parent.Parameters.indexOf(node) >= c.getEffectiveCallArguments(iife).length
	}

	return false
}

func (c *Checker) isOptionalPropertyDeclaration(node Declaration) * /* TODO(TS-TO-GO) inferred type false | QuestionToken */ any {
	return isPropertyDeclaration(node) && !hasAccessorModifier(node) && node.QuestionToken
}

func (c *Checker) createTypePredicate(kind TypePredicateKind, parameterName *string, parameterIndex *number, t *Type) TypePredicate {
	return TypePredicate{
		kind:           kind,
		parameterName:  parameterName,
		parameterIndex: parameterIndex,
		type_:          type_,
	}.(TypePredicate)
}

/**
 * Gets the minimum number of type arguments needed to satisfy all non-optional type
 * parameters.
 */

func (c *Checker) getMinTypeArgumentCount(typeParameters *[]TypeParameter) number {
	minTypeArgumentCount := 0
	if typeParameters != nil {
		for i := 0; i < typeParameters.length; i++ {
			if !c.hasTypeParameterDefault(typeParameters[i]) {
				minTypeArgumentCount = i + 1
			}
		}
	}
	return minTypeArgumentCount
}

/**
 * Fill in default types for unsupplied type arguments. If `typeArguments` is undefined
 * when a default type is supplied, a new array will be created and returned.
 *
 * @param typeArguments The supplied type arguments.
 * @param typeParameters The requested type parameters.
 * @param minTypeArgumentCount The minimum number of required type arguments.
 */

/* OVERLOAD: function fillMissingTypeArguments(typeArguments: readonly Type[], typeParameters: readonly TypeParameter[] | undefined, minTypeArgumentCount: number, isJavaScriptImplicitAny: boolean): Type[]; */
/* OVERLOAD: function fillMissingTypeArguments(typeArguments: readonly Type[] | undefined, typeParameters: readonly TypeParameter[] | undefined, minTypeArgumentCount: number, isJavaScriptImplicitAny: boolean): Type[] | undefined; */
func (c *Checker) fillMissingTypeArguments(typeArguments *[]*Type, typeParameters *[]TypeParameter, minTypeArgumentCount number, isJavaScriptImplicitAny bool) *[]*Type {
	numTypeParameters := length(typeParameters)
	if numTypeParameters == 0 {
		return []never{}
	}
	numTypeArguments := length(typeArguments)
	if isJavaScriptImplicitAny || (numTypeArguments >= minTypeArgumentCount && numTypeArguments <= numTypeParameters) {
		var result []*Type
		if typeArguments != nil {
			result = typeArguments.slice()
		} else {
			result = []never{}
		}
		// Map invalid forward references in default types to the error type
		for i := numTypeArguments; i < numTypeParameters; i++ {
			result[i] = c.errorType
		}
		baseDefaultType := c.getDefaultTypeArgumentType(isJavaScriptImplicitAny)
		for i := numTypeArguments; i < numTypeParameters; i++ {
			defaultType := c.getDefaultFromTypeParameter(typeParameters[i])
			if isJavaScriptImplicitAny && defaultType != nil && (c.isTypeIdenticalTo(defaultType, c.unknownType) || c.isTypeIdenticalTo(defaultType, c.emptyObjectType)) {
				defaultType = c.anyType
			}
			if defaultType != nil {
				result[i] = c.instantiateType(defaultType, c.createTypeMapper(typeParameters, result))
			} else {
				result[i] = baseDefaultType
			}
		}
		result.length = typeParameters.length
		return result
	}
	return typeArguments && typeArguments.slice()
}

func (c *Checker) getSignatureFromDeclaration(declaration Union[SignatureDeclaration, JSDocSignature]) Signature {
	links := c.getNodeLinks(declaration)
	if links.resolvedSignature == nil {
		var parameters []*ast.Symbol = []never{}
		flags := SignatureFlagsNone
		minArgumentCount := 0
		var thisParameter *ast.Symbol
		var thisTag *JSDocThisTag
		if isInJSFile(declaration) {
			thisTag = getJSDocThisTag(declaration)
		} else {
			thisTag = nil
		}
		hasThisParameter := false
		iife := getImmediatelyInvokedFunctionExpression(declaration)
		isJSConstructSignature := isJSDocConstructSignature(declaration)
		isUntypedSignatureInJSFile := iife == nil && isInJSFile(declaration) && isValueSignatureDeclaration(declaration) && !hasJSDocParameterTags(declaration) && getJSDocType(declaration) == nil
		if isUntypedSignatureInJSFile {
			flags |= SignatureFlagsIsUntypedSignatureInJSFile
		}

		// If this is a JSDoc construct signature, then skip the first parameter in the
		// parameter list.  The first parameter represents the return type of the construct
		// signature.
		for i := ifElse(isJSConstructSignature, 1, 0); i < declaration.Parameters.length; i++ {
			param := declaration.Parameters[i]
			if isInJSFile(param) && isJSDocThisTag(param) {
				thisTag = param
				continue
			}

			paramSymbol := param.Symbol
			var t *TypeNode
			if isJSDocParameterTag(param) {
				t = (param.TypeExpression && param.TypeExpression.Type_)
			} else {
				t = param.Type_
			}
			// Include parameter symbol instead of property symbol in the signature
			if paramSymbol && paramSymbol.Flags&ast.SymbolFlagsProperty != 0 && !isBindingPattern(param.Name) {
				resolvedSymbol := c.resolveName(param, paramSymbol.EscapedName, ast.SymbolFlagsValue, nil /*nameNotFoundMessage*/, false /*isUse*/)
				paramSymbol = resolvedSymbol
			}
			if i == 0 && paramSymbol.EscapedName == InternalSymbolNameThis {
				hasThisParameter = true
				thisParameter = param.Symbol
			} else {
				parameters.push(paramSymbol)
			}

			if t && t.Kind == ast.KindLiteralType {
				flags |= SignatureFlagsHasLiteralTypes
			}

			// Record a new minimum argument count if this is not an optional parameter
			isOptionalParameter := c.hasEffectiveQuestionToken(param) || isParameter(param) && param.Initializer || isRestParameter(param) || iife && parameters.length > iife.Arguments.length && !(t)
			if !isOptionalParameter {
				minArgumentCount = parameters.length
			}
		}

		// If only one accessor includes a this-type annotation, the other behaves as if it had the same type annotation
		if (declaration.Kind == ast.KindGetAccessor || declaration.Kind == ast.KindSetAccessor) && c.hasBindableName(declaration) && (!hasThisParameter || thisParameter == nil) {
			var otherKind /* TODO(TS-TO-GO) inferred type SyntaxKind.GetAccessor | SyntaxKind.SetAccessor */ any
			if declaration.Kind == ast.KindGetAccessor {
				otherKind = ast.KindSetAccessor
			} else {
				otherKind = ast.KindGetAccessor
			}
			other := getDeclarationOfKind(c.getSymbolOfDeclaration(declaration), otherKind)
			if other != nil {
				thisParameter = c.getAnnotatedAccessorThisParameter(other)
			}
		}

		if thisTag != nil && thisTag.TypeExpression {
			thisParameter = c.createSymbolWithType(c.createSymbol(ast.SymbolFlagsFunctionScopedVariable, InternalSymbolNameThis), c.getTypeFromTypeNode(thisTag.TypeExpression))
		}

		var hostDeclaration *ast.Node
		if isJSDocSignature(declaration) {
			hostDeclaration = getEffectiveJSDocHost(declaration)
		} else {
			hostDeclaration = declaration
		}
		var classType *InterfaceType
		if hostDeclaration != nil && isConstructorDeclaration(hostDeclaration) {
			classType = c.getDeclaredTypeOfClassOrInterface(c.getMergedSymbol(hostDeclaration.Parent.AsClassDeclaration().Symbol))
		} else {
			classType = nil
		}
		var typeParameters *[]TypeParameter
		if classType != nil {
			typeParameters = classType.localTypeParameters
		} else {
			typeParameters = c.getTypeParametersFromDeclaration(declaration)
		}
		if hasRestParameter(declaration) || isInJSFile(declaration) && c.maybeAddJsSyntheticRestParameter(declaration, parameters) {
			flags |= SignatureFlagsHasRestParameter
		}
		if isConstructorTypeNode(declaration) && hasSyntacticModifier(declaration, ast.ModifierFlagsAbstract) || isConstructorDeclaration(declaration) && hasSyntacticModifier(declaration.Parent, ast.ModifierFlagsAbstract) {
			flags |= SignatureFlagsAbstract
		}
		links.resolvedSignature = c.createSignature(declaration, typeParameters, thisParameter, parameters, nil /*resolvedReturnType*/, nil /*resolvedTypePredicate*/, minArgumentCount, flags)
	}
	return links.resolvedSignature
}

/**
 * A JS function gets a synthetic rest parameter if it references `arguments` AND:
 * 1. It has no parameters but at least one `@param` with a type that starts with `...`
 * OR
 * 2. It has at least one parameter, and the last parameter has a matching `@param` with a type that starts with `...`
 */

func (c *Checker) maybeAddJsSyntheticRestParameter(declaration Union[SignatureDeclaration, JSDocSignature], parameters []*ast.Symbol) bool {
	if isJSDocSignature(declaration) || !c.containsArgumentsReference(declaration) {
		return false
	}
	lastParam := lastOrUndefined(declaration.Parameters)
	var lastParamTags []JSDocParameterTag
	if lastParam != nil {
		lastParamTags = getJSDocParameterTags(lastParam)
	} else {
		lastParamTags = getJSDocTags(declaration).filter(isJSDocParameterTag)
	}
	lastParamVariadicType := firstDefined(lastParamTags, func(p JSDocParameterTag) *JSDocVariadicType {
		if p.TypeExpression != nil && isJSDocVariadicType(p.TypeExpression.Type_) {
			return p.TypeExpression.Type_
		} else {
			return nil
		}
	})

	syntheticArgsSymbol := c.createSymbol(ast.SymbolFlagsVariable, "args" /* as __String */, ast.CheckFlagsRestParameter)
	if lastParamVariadicType != nil {
		// Parameter has effective annotation, lock in type
		syntheticArgsSymbol.Links.type_ = c.createArrayType(c.getTypeFromTypeNode(lastParamVariadicType.Type_))
	} else {
		// Parameter has no annotation
		// By using a `DeferredType` symbol, we allow the type of this rest arg to be overriden by contextual type assignment so long as its type hasn't been
		// cached by `getTypeOfSymbol` yet.
		syntheticArgsSymbol.Links.checkFlags |= ast.CheckFlagsDeferredType
		syntheticArgsSymbol.Links.deferralParent = c.neverType
		syntheticArgsSymbol.Links.deferralConstituents = []*Type{c.anyArrayType}
		syntheticArgsSymbol.Links.deferralWriteConstituents = []*Type{c.anyArrayType}
	}
	if lastParamVariadicType != nil {
		// Replace the last parameter with a rest parameter.
		parameters.pop()
	}
	parameters.push(syntheticArgsSymbol)
	return true
}

func (c *Checker) getSignatureOfTypeTag(node Union[SignatureDeclaration, JSDocSignature]) *Signature {
	// should be attached to a function declaration or expression
	if !(isInJSFile(node) && isFunctionLikeDeclaration(node)) {
		return nil
	}
	typeTag := getJSDocTypeTag(node)
	return typeTag. /* ? */ typeExpression && c.getSingleCallSignature(c.getTypeFromTypeNode(typeTag.TypeExpression))
}

func (c *Checker) getParameterTypeOfTypeTag(func_ FunctionLikeDeclaration, parameter ParameterDeclaration) *Type {
	signature := c.getSignatureOfTypeTag(func_)
	if signature == nil {
		return nil
	}
	pos := func_.Parameters.indexOf(parameter)
	if parameter.DotDotDotToken != nil {
		return c.getRestTypeAtPosition(signature, pos)
	} else {
		return c.getTypeAtPosition(signature, pos)
	}
}

func (c *Checker) getReturnTypeOfTypeTag(node Union[SignatureDeclaration, JSDocSignature]) *Type {
	signature := c.getSignatureOfTypeTag(node)
	return signature && c.getReturnTypeOfSignature(signature)
}

func (c *Checker) containsArgumentsReference(declaration SignatureDeclaration) bool {
	links := c.getNodeLinks(declaration)
	if links.containsArgumentsReference == nil {
		if links.flags&NodeCheckFlagsCaptureArguments != 0 {
			links.containsArgumentsReference = true
		} else {
			links.containsArgumentsReference = traverse(declaration.AsFunctionLikeDeclaration().Body)
		}
	}
	return links.containsArgumentsReference

	traverse := func(node *ast.Node) bool {
		if !node {
			return false
		}
		switch node.Kind {
		case ast.KindIdentifier:
			return node.AsIdentifier().EscapedText == c.argumentsSymbol.EscapedName && c.getReferencedValueSymbol(node.AsIdentifier()) == c.argumentsSymbol
		case ast.KindPropertyDeclaration,
			ast.KindMethodDeclaration,
			ast.KindGetAccessor,
			ast.KindSetAccessor:
			return node.AsNamedDeclaration().Name.Kind == ast.KindComputedPropertyName && traverse(node.AsNamedDeclaration().Name)
		case ast.KindPropertyAccessExpression,
			ast.KindElementAccessExpression:
			return traverse((node /* as PropertyAccessExpression | ElementAccessExpression */).Expression)
		case ast.KindPropertyAssignment:
			return traverse(node.AsPropertyAssignment().Initializer)
		default:
			return !nodeStartsNewLexicalEnvironment(node) && !isPartOfTypeNode(node) && forEachChild(node, traverse)
		}
	}

}

func (c *Checker) getSignaturesOfSymbol(symbol *ast.Symbol) []Signature {
	if symbol == nil || symbol.Declarations == nil {
		return emptyArray
	}
	var result []Signature = []never{}
	for i := 0; i < symbol.Declarations.length; i++ {
		decl := symbol.Declarations[i]
		if !isFunctionLike(decl) {
			continue
		}
		// Don't include signature if node is the implementation of an overloaded function. A node is considered
		// an implementation node if it has a body and the previous node is of the same kind and immediately
		// precedes the implementation node (i.e. has the same parent and ends where the implementation starts).
		if i > 0 && decl.AsFunctionLikeDeclaration().Body != nil {
			previous := symbol.Declarations[i-1]
			if decl.Parent == previous.Parent && decl.Kind == previous.Kind && decl.Pos == previous.End {
				continue
			}
		}
		if isInJSFile(decl) && decl.JsDoc != nil {
			tags := getJSDocOverloadTags(decl)
			if length(tags) != 0 {
				for _, tag := range tags {
					jsDocSignature := tag.TypeExpression
					if jsDocSignature.Type_ == nil && !isConstructorDeclaration(decl) {
						c.reportImplicitAny(jsDocSignature, c.anyType)
					}
					result.push(c.getSignatureFromDeclaration(jsDocSignature))
				}
				continue
			}
		}
		// If this is a function or method declaration, get the signature from the @type tag for the sake of optional parameters.
		// Exclude contextually-typed kinds because we already apply the @type tag to the context, plus applying it here to the initializer would supress checks that the two are compatible.
		result.push((!isFunctionExpressionOrArrowFunction(decl) && !isObjectLiteralMethod(decl) && c.getSignatureOfTypeTag(decl)) || c.getSignatureFromDeclaration(decl))
	}
	return result
}

func (c *Checker) resolveExternalModuleTypeByLiteral(name StringLiteral) *Type {
	moduleSym := c.resolveExternalModuleName(name, name)
	if moduleSym != nil {
		resolvedModuleSymbol := c.resolveExternalModuleSymbol(moduleSym)
		if resolvedModuleSymbol {
			return c.getTypeOfSymbol(resolvedModuleSymbol)
		}
	}

	return c.anyType
}

func (c *Checker) getThisTypeOfSignature(signature Signature) *Type {
	if signature.thisParameter != nil {
		return c.getTypeOfSymbol(signature.thisParameter)
	}
}

func (c *Checker) getTypePredicateOfSignature(signature Signature) *TypePredicate {
	if signature.resolvedTypePredicate == nil {
		if signature.target != nil {
			targetTypePredicate := c.getTypePredicateOfSignature(signature.target)
			if targetTypePredicate != nil {
				signature.resolvedTypePredicate = c.instantiateTypePredicate(targetTypePredicate, signature.mapper)
			} else {
				signature.resolvedTypePredicate = c.noTypePredicate
			}
		} else if signature.compositeSignatures != nil {
			signature.resolvedTypePredicate = c.getUnionOrIntersectionTypePredicate(signature.compositeSignatures, signature.compositeKind) || c.noTypePredicate
		} else {
			t := signature.declaration && getEffectiveReturnTypeNode(signature.declaration)
			var jsdocPredicate *TypePredicate
			if !(t) {
				jsdocSignature := c.getSignatureOfTypeTag(signature.declaration)
				if jsdocSignature != nil && signature != jsdocSignature {
					jsdocPredicate = c.getTypePredicateOfSignature(jsdocSignature)
				}
			}
			if t || jsdocPredicate != nil {
				if t && isTypePredicateNode(t) {
					signature.resolvedTypePredicate = c.createTypePredicateFromTypePredicateNode(t, signature)
				} else {
					signature.resolvedTypePredicate = jsdocPredicate || c.noTypePredicate
				}
			} else if signature.declaration != nil && isFunctionLikeDeclaration(signature.declaration) && (signature.resolvedReturnType == nil || signature.resolvedReturnType.flags&TypeFlagsBoolean != 0) && c.getParameterCount(signature) > 0 {
				TODO_IDENTIFIER := signature
				signature.resolvedTypePredicate = c.noTypePredicate
				// avoid infinite loop
				signature.resolvedTypePredicate = c.getTypePredicateFromBody(declaration) || c.noTypePredicate
			} else {
				signature.resolvedTypePredicate = c.noTypePredicate
			}
		}
		Debug.assert(signature.resolvedTypePredicate)
	}
	if signature.resolvedTypePredicate == c.noTypePredicate {
		return nil
	} else {
		return signature.resolvedTypePredicate
	}
}

func (c *Checker) createTypePredicateFromTypePredicateNode(node TypePredicateNode, signature Signature) TypePredicate {
	parameterName := node.ParameterName
	t := node.Type_ && c.getTypeFromTypeNode(node.Type_)
	if parameterName.Kind == ast.KindThisType {
		return c.createTypePredicate(ifElse(node.AssertsModifier != nil, TypePredicateKindAssertsThis, TypePredicateKindThis), nil /*parameterName*/, nil /*parameterIndex*/, t)
	} else {
		return c.createTypePredicate(ifElse(node.AssertsModifier != nil, TypePredicateKindAssertsIdentifier, TypePredicateKindIdentifier), parameterName.EscapedText /* as string */, core.FindIndex(signature.parameters, func(p *ast.Symbol) bool {
			return p.EscapedName == parameterName.EscapedText
		}), t)
	}
}

func (c *Checker) getUnionOrIntersectionType(types []*Type, kind *TypeFlags, unionReduction UnionReduction) *Type {
	if kind != TypeFlagsIntersection {
		return c.getUnionType(types, unionReduction)
	} else {
		return c.getIntersectionType(types)
	}
}

func (c *Checker) getReturnTypeOfSignature(signature Signature) *Type {
	if signature.resolvedReturnType == nil {
		if !c.pushTypeResolution(signature, TypeSystemPropertyNameResolvedReturnType) {
			return c.errorType
		}
		var t *Type
		switch {
		case signature.target != nil:
			t = c.instantiateType(c.getReturnTypeOfSignature(signature.target), signature.mapper)
		case signature.compositeSignatures != nil:
			t = c.instantiateType(c.getUnionOrIntersectionType(core.Map(signature.compositeSignatures, c.getReturnTypeOfSignature), signature.compositeKind, UnionReductionSubtype), signature.mapper)
		default:
			t = c.getReturnTypeFromAnnotation(signature.declaration) || (ifElse(nodeIsMissing(signature.declaration.AsFunctionLikeDeclaration().Body), c.anyType, c.getReturnTypeFromBody(signature.declaration.AsFunctionLikeDeclaration())))
		}
		if signature.flags&SignatureFlagsIsInnerCallChain != 0 {
			t = c.addOptionalTypeMarker(t)
		} else if signature.flags&SignatureFlagsIsOuterCallChain != 0 {
			t = c.getOptionalType(t)
		}
		if !c.popTypeResolution() {
			if signature.declaration != nil {
				typeNode := getEffectiveReturnTypeNode(signature.declaration)
				if typeNode != nil {
					c.error(typeNode, Diagnostics.Return_type_annotation_circularly_references_itself)
				} else if c.noImplicitAny {
					declaration := signature.declaration.AsDeclaration()
					name := getNameOfDeclaration(declaration)
					if name != nil {
						c.error(name, Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, declarationNameToString(name))
					} else {
						c.error(declaration, Diagnostics.Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions)
					}
				}
			}
			t = c.anyType
		}
		if signature.resolvedReturnType == nil {
			signature.resolvedReturnType = t
		}
	}
	return signature.resolvedReturnType
}

func (c *Checker) getReturnTypeFromAnnotation(declaration Union[SignatureDeclaration, JSDocSignature]) *Type {
	if declaration.Kind == ast.KindConstructor {
		return c.getDeclaredTypeOfClassOrInterface(c.getMergedSymbol(declaration.Parent.AsClassDeclaration().Symbol))
	}
	typeNode := getEffectiveReturnTypeNode(declaration)
	if isJSDocSignature(declaration) {
		root := getJSDocRoot(declaration)
		if root != nil && isConstructorDeclaration(root.Parent) && typeNode == nil {
			return c.getDeclaredTypeOfClassOrInterface(c.getMergedSymbol(root.Parent.Parent.AsClassDeclaration().Symbol))
		}
	}
	if isJSDocConstructSignature(declaration) {
		return c.getTypeFromTypeNode(declaration.Parameters[0].AsParameterDeclaration().Type_)
		// TODO: GH#18217
	}
	if typeNode != nil {
		return c.getTypeFromTypeNode(typeNode)
	}
	if declaration.Kind == ast.KindGetAccessor && c.hasBindableName(declaration) {
		jsDocType := isInJSFile(declaration) && c.getTypeForDeclarationFromJSDocComment(declaration)
		if jsDocType {
			return jsDocType
		}
		setter := getDeclarationOfKind(c.getSymbolOfDeclaration(declaration), ast.KindSetAccessor)
		setterType := c.getAnnotatedAccessorType(setter)
		if setterType != nil {
			return setterType
		}
	}
	return c.getReturnTypeOfTypeTag(declaration)
}

func (c *Checker) isResolvingReturnTypeOfSignature(signature Signature) bool {
	return signature.compositeSignatures && core.Some(signature.compositeSignatures, c.isResolvingReturnTypeOfSignature) || signature.resolvedReturnType == nil && c.findResolutionCycleStartIndex(signature, TypeSystemPropertyNameResolvedReturnType) >= 0
}

func (c *Checker) getRestTypeOfSignature(signature Signature) *Type {
	return c.tryGetRestTypeOfSignature(signature) || c.anyType
}

func (c *Checker) tryGetRestTypeOfSignature(signature Signature) *Type {
	if signatureHasRestParameter(signature) {
		sigRestType := c.getTypeOfSymbol(signature.parameters[signature.parameters.length-1])
		var restType *Type
		if c.isTupleType(sigRestType) {
			restType = c.getRestTypeOfTupleType(sigRestType)
		} else {
			restType = sigRestType
		}
		return restType && c.getIndexTypeOfType(restType, c.numberType)
	}
	return nil
}

func (c *Checker) getSignatureInstantiation(signature Signature, typeArguments *[]*Type, isJavascript bool, inferredTypeParameters []TypeParameter) Signature {
	instantiatedSignature := c.getSignatureInstantiationWithoutFillingInTypeArguments(signature, c.fillMissingTypeArguments(typeArguments, signature.typeParameters, c.getMinTypeArgumentCount(signature.typeParameters), isJavascript))
	if inferredTypeParameters != nil {
		returnSignature := c.getSingleCallOrConstructSignature(c.getReturnTypeOfSignature(instantiatedSignature))
		if returnSignature != nil {
			newReturnSignature := c.cloneSignature(returnSignature)
			newReturnSignature.typeParameters = inferredTypeParameters
			newInstantiatedSignature := c.cloneSignature(instantiatedSignature)
			newInstantiatedSignature.resolvedReturnType = c.getOrCreateTypeFromSignature(newReturnSignature)
			return newInstantiatedSignature
		}
	}
	return instantiatedSignature
}

func (c *Checker) getSignatureInstantiationWithoutFillingInTypeArguments(signature Signature, typeArguments *[]*Type) Signature {
	instantiations := signature.instantiations || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: signature.instantiations = new Map<string, Signature>() */ TODO)
	id := c.getTypeListId(typeArguments)
	instantiation := instantiations.get(id)
	if instantiation == nil {
		instantiations.set(id /* TODO(TS-TO-GO) EqualsToken BinaryExpression: instantiation = createSignatureInstantiation(signature, typeArguments) */, TODO)
	}
	return instantiation
}

func (c *Checker) createSignatureInstantiation(signature Signature, typeArguments *[]*Type) Signature {
	return c.instantiateSignature(signature, c.createSignatureTypeMapper(signature, typeArguments), true /*eraseTypeParameters*/)
}

func (c *Checker) getTypeParametersForMapper(signature Signature) *[]*Type {
	return core.SameMap(signature.typeParameters, func(tp TypeParameter) *Type {
		if tp.mapper != nil {
			return c.instantiateType(tp, tp.mapper)
		} else {
			return tp
		}
	})
}

func (c *Checker) createSignatureTypeMapper(signature Signature, typeArguments *[]*Type) TypeMapper {
	return c.createTypeMapper(c.getTypeParametersForMapper(signature), typeArguments)
}

func (c *Checker) getErasedSignature(signature Signature) Signature {
	if signature.typeParameters != nil {
		return signature.erasedSignatureCache || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: signature.erasedSignatureCache = createErasedSignature(signature) */ TODO)
	} else {
		return signature
	}
}

func (c *Checker) createErasedSignature(signature Signature) Signature {
	// Create an instantiation of the signature where all type arguments are the any type.
	return c.instantiateSignature(signature, c.createTypeEraser(signature.typeParameters), true /*eraseTypeParameters*/)
}

func (c *Checker) getCanonicalSignature(signature Signature) Signature {
	if signature.typeParameters != nil {
		return signature.canonicalSignatureCache || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: signature.canonicalSignatureCache = createCanonicalSignature(signature) */ TODO)
	} else {
		return signature
	}
}

func (c *Checker) createCanonicalSignature(signature Signature) Signature {
	// Create an instantiation of the signature where each unconstrained type parameter is replaced with
	// its original. When a generic class or interface is instantiated, each generic method in the class or
	// interface is instantiated with a fresh set of cloned type parameters (which we need to handle scenarios
	// where different generations of the same type parameter are in scope). This leads to a lot of new type
	// identities, and potentially a lot of work comparing those identities, so here we create an instantiation
	// that uses the original type identities for all unconstrained type parameters.
	return c.getSignatureInstantiation(signature, core.Map(signature.typeParameters, func(tp TypeParameter) TypeParameter {
		if tp.target != nil && c.getConstraintOfTypeParameter(tp.target) == nil {
			return tp.target
		} else {
			return tp
		}
	}), isInJSFile(signature.declaration))
}

func (c *Checker) getImplementationSignature(signature Signature) Signature {
	if signature.typeParameters != nil {
		return /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: signature.implementationSignatureCache ||= createImplementationSignature(signature) */ TODO
	} else {
		return signature
	}
}

func (c *Checker) createImplementationSignature(signature Signature) Signature {
	if signature.typeParameters != nil {
		return c.instantiateSignature(signature, c.createTypeMapper([]never{}, []never{}))
	} else {
		return signature
	}
}

func (c *Checker) getBaseSignature(signature Signature) Signature {
	typeParameters := signature.typeParameters
	if typeParameters != nil {
		if signature.baseSignatureCache != nil {
			return signature.baseSignatureCache
		}
		typeEraser := c.createTypeEraser(typeParameters)
		baseConstraintMapper := c.createTypeMapper(typeParameters, core.Map(typeParameters, func(tp TypeParameter) *Type {
			return c.getConstraintOfTypeParameter(tp) || c.unknownType
		}))
		var baseConstraints []*Type = core.Map(typeParameters, func(tp TypeParameter) *Type {
			return c.instantiateType(tp, baseConstraintMapper) || c.unknownType
		})
		// Run N type params thru the immediate constraint mapper up to N times
		// This way any noncircular interdependent type parameters are definitely resolved to their external dependencies
		for i := 0; i < typeParameters.length-1; i++ {
			baseConstraints = c.instantiateTypes(baseConstraints, baseConstraintMapper)
		}
		// and then apply a type eraser to remove any remaining circularly dependent type parameters
		baseConstraints = c.instantiateTypes(baseConstraints, typeEraser)
		signature.baseSignatureCache = c.instantiateSignature(signature, c.createTypeMapper(typeParameters, baseConstraints), true /*eraseTypeParameters*/)
		return signature.baseSignatureCache
	}
	return signature
}

func (c *Checker) getOrCreateTypeFromSignature(signature Signature, outerTypeParameters []TypeParameter) ObjectType {
	// There are two ways to declare a construct signature, one is by declaring a class constructor
	// using the constructor keyword, and the other is declaring a bare construct signature in an
	// object type literal or interface (using the new keyword). Each way of declaring a constructor
	// will result in a different declaration kind.
	if signature.isolatedSignatureType == nil {
		kind := signature.declaration. /* ? */ kind

		// If declaration is undefined, it is likely to be the signature of the default constructor.
		isConstructor := kind == nil || kind == ast.KindConstructor || kind == ast.KindConstructSignature || kind == ast.KindConstructorType

		// The type must have a symbol with a `Function` flag and a declaration in order to be correctly flagged as possibly containing
		// type variables by `couldContainTypeVariables`
		t := c.createObjectType(ObjectFlagsAnonymous|ObjectFlagsSingleSignatureType, c.createSymbol(ast.SymbolFlagsFunction, InternalSymbolNameFunction)).AsSingleSignatureType()
		if signature.declaration != nil && !nodeIsSynthesized(signature.declaration) {
			t.symbol.Declarations = [] /* TODO(TS-TO-GO) inferred type SignatureDeclaration | JSDocSignature */ any{signature.declaration}
			t.symbol.ValueDeclaration = signature.declaration
		}
		outerTypeParameters = outerTypeParameters || signature.declaration && c.getOuterTypeParameters(signature.declaration, true /*includeThisTypes*/)
		t.outerTypeParameters = outerTypeParameters

		t.members = c.emptySymbols
		t.properties = emptyArray
		if !isConstructor {
			t.callSignatures = []Signature{signature}
		} else {
			t.callSignatures = emptyArray
		}
		if isConstructor {
			t.constructSignatures = []Signature{signature}
		} else {
			t.constructSignatures = emptyArray
		}
		t.indexInfos = emptyArray
		signature.isolatedSignatureType = t
	}

	return signature.isolatedSignatureType
}

func (c *Checker) getIndexSymbol(symbol *ast.Symbol) *ast.Symbol {
	if symbol.Members != nil {
		return c.getIndexSymbolFromSymbolTable(c.getMembersOfSymbol(symbol))
	} else {
		return nil
	}
}

func (c *Checker) getIndexSymbolFromSymbolTable(symbolTable SymbolTable) *ast.Symbol {
	return symbolTable.get(InternalSymbolNameIndex)
}

func (c *Checker) createIndexInfo(keyType *Type, t *Type, isReadonly bool, declaration IndexSignatureDeclaration) IndexInfo {
	return IndexInfo{
		keyType:     keyType,
		type_:       type_,
		isReadonly:  isReadonly,
		declaration: declaration,
	}
}

func (c *Checker) getIndexInfosOfSymbol(symbol *ast.Symbol) []IndexInfo {
	indexSymbol := c.getIndexSymbol(symbol)
	if indexSymbol != nil {
		return c.getIndexInfosOfIndexSymbol(indexSymbol, arrayFrom(c.getMembersOfSymbol(symbol).values()))
	} else {
		return emptyArray
	}
}

// note intentional similarities to index signature building in `checkObjectLiteral` for parity
func (c *Checker) getIndexInfosOfIndexSymbol(indexSymbol *ast.Symbol, siblingSymbols *[]*ast.Symbol /*  = indexSymbol.parent ? arrayFrom(getMembersOfSymbol(indexSymbol.parent).values()) : undefined */) []IndexInfo {
	if indexSymbol.Declarations != nil {
		var indexInfos []IndexInfo = []never{}
		hasComputedNumberProperty := false
		readonlyComputedNumberProperty := true
		hasComputedSymbolProperty := false
		readonlyComputedSymbolProperty := true
		hasComputedStringProperty := false
		readonlyComputedStringProperty := true
		var computedPropertySymbols []*ast.Symbol = []never{}
		for _, declaration := range indexSymbol.Declarations {
			if isIndexSignatureDeclaration(declaration) {
				if declaration.Parameters.length == 1 {
					parameter := declaration.Parameters[0]
					if parameter.Type_ != nil {
						c.forEachType(c.getTypeFromTypeNode(parameter.Type_), func(keyType *Type) {
							if c.isValidIndexKeyType(keyType) && c.findIndexInfo(indexInfos, keyType) == nil {
								indexInfos.push(c.createIndexInfo(keyType, ifElse(declaration.Type_, c.getTypeFromTypeNode(declaration.Type_), c.anyType), hasEffectiveModifier(declaration, ast.ModifierFlagsReadonly), declaration))
							}
						})
					}
				}
			} else if c.hasLateBindableIndexSignature(declaration) {
				var declName /* TODO(TS-TO-GO) inferred type ElementAccessExpression | LateBoundName */ any
				if isBinaryExpression(declaration) {
					declName = declaration.Left.AsElementAccessExpression()
				} else {
					declName = declaration.AsLateBoundDeclaration().Name
				}
				var keyType *Type
				if isElementAccessExpression(declName) {
					keyType = c.checkExpressionCached(declName.ArgumentExpression)
				} else {
					keyType = c.checkComputedPropertyName(declName)
				}
				if c.findIndexInfo(indexInfos, keyType) != nil {
					continue
					// Explicit index for key type takes priority
				}
				if c.isTypeAssignableTo(keyType, c.stringNumberSymbolType) {
					if c.isTypeAssignableTo(keyType, c.numberType) {
						hasComputedNumberProperty = true
						if !hasEffectiveReadonlyModifier(declaration) {
							readonlyComputedNumberProperty = false
						}
					} else if c.isTypeAssignableTo(keyType, c.esSymbolType) {
						hasComputedSymbolProperty = true
						if !hasEffectiveReadonlyModifier(declaration) {
							readonlyComputedSymbolProperty = false
						}
					} else {
						hasComputedStringProperty = true
						if !hasEffectiveReadonlyModifier(declaration) {
							readonlyComputedStringProperty = false
						}
					}
					computedPropertySymbols.push(declaration.Symbol)
				}
			}
		}
		allPropertySymbols := core.Concatenate(computedPropertySymbols, core.Filter(siblingSymbols, func(s *ast.Symbol) bool {
			return s != indexSymbol
		}))
		// aggregate similar index infos implied to be the same key to the same combined index info
		if hasComputedStringProperty && c.findIndexInfo(indexInfos, c.stringType) == nil {
			indexInfos.push(c.getObjectLiteralIndexInfo(readonlyComputedStringProperty, 0, allPropertySymbols, c.stringType))
		}
		if hasComputedNumberProperty && c.findIndexInfo(indexInfos, c.numberType) == nil {
			indexInfos.push(c.getObjectLiteralIndexInfo(readonlyComputedNumberProperty, 0, allPropertySymbols, c.numberType))
		}
		if hasComputedSymbolProperty && c.findIndexInfo(indexInfos, c.esSymbolType) == nil {
			indexInfos.push(c.getObjectLiteralIndexInfo(readonlyComputedSymbolProperty, 0, allPropertySymbols, c.esSymbolType))
		}
		return indexInfos
	}
	return emptyArray
}

func (c *Checker) isValidIndexKeyType(t *Type) bool {
	return t.flags&(TypeFlagsString|TypeFlagsNumber|TypeFlagsESSymbol) != 0 || c.isPatternLiteralType(t) || t.flags&TypeFlagsIntersection != 0 && !c.isGenericType(t) && core.Some(t.AsIntersectionType().types, c.isValidIndexKeyType)
}

func (c *Checker) getConstraintDeclaration(t TypeParameter) *TypeNode {
	return mapDefined(core.Filter(t.symbol && t.symbol.Declarations, isTypeParameterDeclaration), getEffectiveConstraintOfTypeParameter)[0]
}

func (c *Checker) getInferredTypeParameterConstraint(typeParameter TypeParameter, omitTypeReferences bool) *Type {
	var inferences *[]*Type
	if typeParameter.symbol. /* ? */ Declarations != nil {
		for _, declaration := range typeParameter.symbol.Declarations {
			if declaration.Parent.Kind == ast.KindInferType {
				// When an 'infer T' declaration is immediately contained in a type reference node
				// (such as 'Foo<infer T>'), T's constraint is inferred from the constraint of the
				// corresponding type parameter in 'Foo'. When multiple 'infer T' declarations are
				// present, we form an intersection of the inferred constraint types.
				TODO_IDENTIFIER := walkUpParenthesizedTypesAndGetParentAndChild(declaration.Parent.Parent)
				if grandParent.Kind == ast.KindTypeReference && !omitTypeReferences {
					typeReference := grandParent.AsTypeReferenceNode()
					typeParameters := c.getTypeParametersForTypeReferenceOrImport(typeReference)
					if typeParameters != nil {
						index := typeReference.TypeArguments.indexOf(childTypeParameter.AsTypeNode())
						if index < typeParameters.length {
							declaredConstraint := c.getConstraintOfTypeParameter(typeParameters[index])
							if declaredConstraint != nil {
								// Type parameter constraints can reference other type parameters so
								// constraints need to be instantiated. If instantiation produces the
								// type parameter itself, we discard that inference. For example, in
								//   type Foo<T extends string, U extends T> = [T, U];
								//   type Bar<T> = T extends Foo<infer X, infer X> ? Foo<X, X> : T;
								// the instantiated constraint for U is X, so we discard that inference.
								mapper := c.makeDeferredTypeMapper(typeParameters, typeParameters.map_(func(_ TypeParameter, index number) /* TODO(TS-TO-GO) inferred type () => Type */ any {
									return func() *Type {
										return c.getEffectiveTypeArgumentAtIndex(typeReference, typeParameters, index)
									}
								}))
								constraint := c.instantiateType(declaredConstraint, mapper)
								if constraint != typeParameter {
									inferences = append(inferences, constraint)
								}
							}
						}
					}
				} else if grandParent.Kind == ast.KindParameter && grandParent.AsParameterDeclaration().DotDotDotToken != nil || grandParent.Kind == ast.KindRestType || grandParent.Kind == ast.KindNamedTupleMember && grandParent.AsNamedTupleMember().DotDotDotToken != nil {
					inferences = append(inferences, c.createArrayType(c.unknownType))
				} else if grandParent.Kind == ast.KindTemplateLiteralTypeSpan {
					inferences = append(inferences, c.stringType)
				} else if grandParent.Kind == ast.KindTypeParameter && grandParent.Parent.Kind == ast.KindMappedType {
					inferences = append(inferences, c.stringNumberSymbolType)
				} else if grandParent.Kind == ast.KindMappedType && grandParent.AsMappedTypeNode().Type_ != nil && skipParentheses(grandParent.AsMappedTypeNode().Type_) == declaration.Parent && grandParent.Parent.Kind == ast.KindConditionalType && grandParent.Parent.AsConditionalTypeNode().ExtendsType == grandParent && grandParent.Parent.AsConditionalTypeNode().CheckType.Kind == ast.KindMappedType && (grandParent.Parent.AsConditionalTypeNode()).CheckType.AsMappedTypeNode().Type_ != nil {
					checkMappedType := grandParent.Parent.AsConditionalTypeNode().CheckType.AsMappedTypeNode()
					nodeType := c.getTypeFromTypeNode(checkMappedType.Type_)
					inferences = append(inferences, c.instantiateType(nodeType, c.makeUnaryTypeMapper(c.getDeclaredTypeOfTypeParameter(c.getSymbolOfDeclaration(checkMappedType.TypeParameter)), ifElse(checkMappedType.TypeParameter.Constraint != nil, c.getTypeFromTypeNode(checkMappedType.TypeParameter.Constraint), c.stringNumberSymbolType))))
				}
			}
		}
	}
	return inferences && c.getIntersectionType(inferences)
}

/** This is a worker function. Use getConstraintOfTypeParameter which guards against circular constraints. */

func (c *Checker) getConstraintFromTypeParameter(typeParameter TypeParameter) *Type {
	if typeParameter.constraint == nil {
		if typeParameter.target != nil {
			targetConstraint := c.getConstraintOfTypeParameter(typeParameter.target)
			if targetConstraint != nil {
				typeParameter.constraint = c.instantiateType(targetConstraint, typeParameter.mapper)
			} else {
				typeParameter.constraint = c.noConstraintType
			}
		} else {
			constraintDeclaration := c.getConstraintDeclaration(typeParameter)
			if constraintDeclaration == nil {
				typeParameter.constraint = c.getInferredTypeParameterConstraint(typeParameter) || c.noConstraintType
			} else {
				t := c.getTypeFromTypeNode(constraintDeclaration)
				if t.flags&TypeFlagsAny != 0 && !c.isErrorType(t) {
					// use stringNumberSymbolType as the base constraint for mapped type key constraints (unknown isn;t assignable to that, but `any` was),
					// use unknown otherwise
					if constraintDeclaration.Parent.Parent.Kind == ast.KindMappedType {
						t = c.stringNumberSymbolType
					} else {
						t = c.unknownType
					}
				}
				typeParameter.constraint = t
			}
		}
	}
	if typeParameter.constraint == c.noConstraintType {
		return nil
	} else {
		return typeParameter.constraint
	}
}

func (c *Checker) getParentSymbolOfTypeParameter(typeParameter TypeParameter) *ast.Symbol {
	tp := getDeclarationOfKind(typeParameter.symbol, ast.KindTypeParameter)
	var host * /* TODO(TS-TO-GO) inferred type SignatureDeclaration | InterfaceDeclaration | ClassDeclaration | ClassExpression | TypeAliasDeclaration | InferTypeNode | JSDocCallbackTag | JSDocEnumTag | JSDocTypedefTag */ any
	if isJSDocTemplateTag(tp.Parent) {
		host = getEffectiveContainerForJSDocTemplateTag(tp.Parent)
	} else {
		host = tp.Parent
	}
	return host && c.getSymbolOfNode(host)
}

func (c *Checker) getTypeListId(types *[]*Type) string {
	result := ""
	if types != nil {
		length := types.length
		i := 0
		for i < length {
			startId := types[i].id
			count := 1
			for i+count < length && types[i+count].id == startId+count {
				count++
			}
			if result.length != 0 {
				result += ","
			}
			result += startId
			if count > 1 {
				result += ":" + count
			}
			i += count
		}
	}
	return result
}

func (c *Checker) getAliasId(aliasSymbol *ast.Symbol, aliasTypeArguments *[]*Type) string {
	if aliasSymbol != nil {
		return __TEMPLATE__("@", getSymbolId(aliasSymbol)) + (ifElse(aliasTypeArguments != nil, __TEMPLATE__(":", c.getTypeListId(aliasTypeArguments)), ""))
	} else {
		return ""
	}
}

// This function is used to propagate certain flags when creating new object type references and union types.
// It is only necessary to do so if a constituent type might be the undefined type, the null type, the type
// of an object literal or a non-inferrable type. This is because there are operations in the type checker
// that care about the presence of such types at arbitrary depth in a containing type.
func (c *Checker) getPropagatingFlagsOfTypes(types []*Type, excludeKinds TypeFlags) ObjectFlags {
	var result ObjectFlags = 0
	for _, t := range types {
		if excludeKinds == nil || t.flags&excludeKinds == 0 {
			result |= getObjectFlags(t)
		}
	}
	return result & ObjectFlagsPropagatingFlags
}

func (c *Checker) tryCreateTypeReference(target GenericType, typeArguments *[]*Type) *Type {
	if core.Some(typeArguments) && target == c.emptyGenericType {
		return c.unknownType
	}

	return c.createTypeReference(target, typeArguments)
}

func (c *Checker) createTypeReference(target GenericType, typeArguments *[]*Type) TypeReference {
	id := c.getTypeListId(typeArguments)
	t := target.instantiations.get(id)
	if !(t) {
		t = c.createObjectType(ObjectFlagsReference, target.symbol).AsTypeReference()
		target.instantiations.set(id, t)
		if typeArguments != nil {
			t.objectFlags |= c.getPropagatingFlagsOfTypes(typeArguments)
		} else {
			t.objectFlags |= 0
		}
		t.target = target
		t.resolvedTypeArguments = typeArguments
	}
	return t
}

func (c *Checker) cloneTypeReference(source TypeReference) TypeReference {
	t := c.createTypeWithSymbol(source.flags, source.symbol).AsTypeReference()
	t.objectFlags = source.objectFlags
	t.target = source.target
	t.resolvedTypeArguments = source.resolvedTypeArguments
	return t
}

func (c *Checker) createDeferredTypeReference(target GenericType, node Union[TypeReferenceNode, ArrayTypeNode, TupleTypeNode], mapper TypeMapper, aliasSymbol *ast.Symbol, aliasTypeArguments []*Type) DeferredTypeReference {
	if aliasSymbol == nil {
		aliasSymbol = c.getAliasSymbolForTypeNode(node)
		localAliasTypeArguments := c.getTypeArgumentsForAliasSymbol(aliasSymbol)
		if mapper != nil {
			aliasTypeArguments = c.instantiateTypes(localAliasTypeArguments, mapper)
		} else {
			aliasTypeArguments = localAliasTypeArguments
		}
	}
	t := c.createObjectType(ObjectFlagsReference, target.symbol).AsDeferredTypeReference()
	t.target = target
	t.node = node
	t.mapper = mapper
	t.aliasSymbol = aliasSymbol
	t.aliasTypeArguments = aliasTypeArguments
	return t
}

func (c *Checker) getTypeArguments(t TypeReference) []*Type {
	if t.resolvedTypeArguments == nil {
		if !c.pushTypeResolution(t, TypeSystemPropertyNameResolvedTypeArguments) {
			return core.Concatenate(t.target.outerTypeParameters, t.target.localTypeParameters. /* ? */ map_(func() IntrinsicType {
				return c.errorType
			})) || emptyArray
		}
		node := t.node
		var typeArguments []*Type
		switch {
		case node == nil:
			typeArguments = emptyArray
		case node.Kind == ast.KindTypeReference:
			typeArguments = core.Concatenate(t.target.outerTypeParameters, c.getEffectiveTypeArguments(node, t.target.localTypeParameters))
		case node.Kind == ast.KindArrayType:
			typeArguments = []*Type{c.getTypeFromTypeNode(node.ElementType)}
		default:
			typeArguments = core.Map(node.Elements, c.getTypeFromTypeNode)
		}
		if c.popTypeResolution() {
			if t.resolvedTypeArguments == nil {
				t.resolvedTypeArguments = ifElse(t.mapper != nil, c.instantiateTypes(typeArguments, t.mapper), typeArguments)
			}
		} else {
			if t.resolvedTypeArguments == nil {
				t.resolvedTypeArguments = core.Concatenate(t.target.outerTypeParameters, t.target.localTypeParameters. /* ? */ map_(func() IntrinsicType {
					return c.errorType
				}) || emptyArray)
			}
			c.error(t.node || c.currentNode, ifElse(t.target.symbol, Diagnostics.Type_arguments_for_0_circularly_reference_themselves, Diagnostics.Tuple_type_arguments_circularly_reference_themselves), t.target.symbol && c.symbolToString(t.target.symbol))
		}
	}
	return t.resolvedTypeArguments
}

func (c *Checker) getTypeReferenceArity(t TypeReference) number {
	return length(t.target.typeParameters)
}

/**
 * Get type from type-reference that reference to class or interface
 */

func (c *Checker) getTypeFromClassOrInterfaceReference(node NodeWithTypeArguments, symbol *ast.Symbol) *Type {
	t := c.getDeclaredTypeOfSymbol(c.getMergedSymbol(symbol)).AsInterfaceType()
	typeParameters := t.localTypeParameters
	if typeParameters != nil {
		numTypeArguments := length(node.TypeArguments)
		minTypeArgumentCount := c.getMinTypeArgumentCount(typeParameters)
		isJs := isInJSFile(node)
		isJsImplicitAny := !c.noImplicitAny && isJs
		if !isJsImplicitAny && (numTypeArguments < minTypeArgumentCount || numTypeArguments > typeParameters.length) {
			missingAugmentsTag := isJs && isExpressionWithTypeArguments(node) && !isJSDocAugmentsTag(node.Parent)
			var diag any
			switch {
			case minTypeArgumentCount == typeParameters.length:
				if missingAugmentsTag {
					diag = Diagnostics.Expected_0_type_arguments_provide_these_with_an_extends_tag
				} else {
					diag = Diagnostics.Generic_type_0_requires_1_type_argument_s
				}
			case missingAugmentsTag:
				diag = Diagnostics.Expected_0_1_type_arguments_provide_these_with_an_extends_tag
			default:
				diag = Diagnostics.Generic_type_0_requires_between_1_and_2_type_arguments
			}

			typeStr := c.typeToString(t, nil /*enclosingDeclaration*/, TypeFormatFlagsWriteArrayAsGenericType)
			c.error(node, diag, typeStr, minTypeArgumentCount, typeParameters.length)
			if !isJs {
				// TODO: Adopt same permissive behavior in TS as in JS to reduce follow-on editing experience failures (requires editing fillMissingTypeArguments)
				return c.errorType
			}
		}
		if node.Kind == ast.KindTypeReference && c.isDeferredTypeReferenceNode(node.AsTypeReferenceNode(), length(node.TypeArguments) != typeParameters.length) {
			return c.createDeferredTypeReference(t.AsGenericType(), node.AsTypeReferenceNode(), nil /*mapper*/)
		}
		// In a type reference, the outer type parameters of the referenced class or interface are automatically
		// supplied as type arguments and the type reference only specifies arguments for the local type parameters
		// of the class or interface.
		typeArguments := core.Concatenate(t.outerTypeParameters, c.fillMissingTypeArguments(c.typeArgumentsFromTypeReferenceNode(node), typeParameters, minTypeArgumentCount, isJs))
		return c.createTypeReference(t.AsGenericType(), typeArguments)
	}
	if c.checkNoTypeArguments(node, symbol) {
		return t
	} else {
		return c.errorType
	}
}

func (c *Checker) getTypeAliasInstantiation(symbol *ast.Symbol, typeArguments *[]*Type, aliasSymbol *ast.Symbol, aliasTypeArguments []*Type) *Type {
	t := c.getDeclaredTypeOfSymbol(symbol)
	if t == c.intrinsicMarkerType {
		typeKind := intrinsicTypeKinds.get(symbol.EscapedName /* as string */)
		if typeKind != nil && typeArguments != nil && typeArguments.length == 1 {
			if typeKind == IntrinsicTypeKindNoInfer {
				return c.getNoInferType(typeArguments[0])
			} else {
				return c.getStringMappingType(symbol, typeArguments[0])
			}
		}
	}
	links := c.getSymbolLinks(symbol)
	typeParameters := links.typeParameters
	id := c.getTypeListId(typeArguments) + c.getAliasId(aliasSymbol, aliasTypeArguments)
	instantiation := links.instantiations.get(id)
	if instantiation == nil {
		links.instantiations.set(id /* TODO(TS-TO-GO) EqualsToken BinaryExpression: instantiation = instantiateTypeWithAlias(type, createTypeMapper(typeParameters, fillMissingTypeArguments(typeArguments, typeParameters, getMinTypeArgumentCount(typeParameters), isInJSFile(symbol.valueDeclaration))), aliasSymbol, aliasTypeArguments) */, TODO)
	}
	return instantiation
}

/**
 * Get type from reference to type alias. When a type alias is generic, the declared type of the type alias may include
 * references to the type parameters of the alias. We replace those with the actual type arguments by instantiating the
 * declared type. Instantiations are cached using the type identities of the type arguments as the key.
 */

func (c *Checker) getTypeFromTypeAliasReference(node NodeWithTypeArguments, symbol *ast.Symbol) *Type {
	if getCheckFlags(symbol)&ast.CheckFlagsUnresolved != 0 {
		typeArguments := c.typeArgumentsFromTypeReferenceNode(node)
		id := c.getAliasId(symbol, typeArguments)
		errorType := c.errorTypes.get(id)
		if errorType == nil {
			errorType = c.createIntrinsicType(TypeFlagsAny, "error", nil /*objectFlags*/, __TEMPLATE__("alias ", id))
			errorType.aliasSymbol = symbol
			errorType.aliasTypeArguments = typeArguments
			c.errorTypes.set(id, errorType)
		}
		return errorType
	}
	t := c.getDeclaredTypeOfSymbol(symbol)
	typeParameters := c.getSymbolLinks(symbol).typeParameters
	if typeParameters != nil {
		numTypeArguments := length(node.TypeArguments)
		minTypeArgumentCount := c.getMinTypeArgumentCount(typeParameters)
		if numTypeArguments < minTypeArgumentCount || numTypeArguments > typeParameters.length {
			c.error(node, ifElse(minTypeArgumentCount == typeParameters.length, Diagnostics.Generic_type_0_requires_1_type_argument_s, Diagnostics.Generic_type_0_requires_between_1_and_2_type_arguments), c.symbolToString(symbol), minTypeArgumentCount, typeParameters.length)
			return c.errorType
		}
		// We refrain from associating a local type alias with an instantiation of a top-level type alias
		// because the local alias may end up being referenced in an inferred return type where it is not
		// accessible--which in turn may lead to a large structural expansion of the type when generating
		// a .d.ts file. See #43622 for an example.
		aliasSymbol := c.getAliasSymbolForTypeNode(node)
		var newAliasSymbol *ast.Symbol
		if aliasSymbol != nil && (c.isLocalTypeAlias(symbol) || !c.isLocalTypeAlias(aliasSymbol)) {
			newAliasSymbol = aliasSymbol
		} else {
			newAliasSymbol = nil
		}
		var aliasTypeArguments *[]*Type
		if newAliasSymbol != nil {
			aliasTypeArguments = c.getTypeArgumentsForAliasSymbol(newAliasSymbol)
		} else if isTypeReferenceType(node) {
			aliasSymbol := c.resolveTypeReferenceName(node, ast.SymbolFlagsAlias, true /*ignoreErrors*/)
			// refers to an alias import/export/reexport - by making sure we use the target as an aliasSymbol,
			// we ensure the exported symbol is used to refer to the type when it's reserialized later
			if aliasSymbol && aliasSymbol != c.unknownSymbol {
				resolved := c.resolveAlias(aliasSymbol)
				if resolved && resolved.Flags&ast.SymbolFlagsTypeAlias != 0 {
					newAliasSymbol = resolved
					aliasTypeArguments = c.typeArgumentsFromTypeReferenceNode(node) || (ifElse(typeParameters, []never{}, nil))
				}
			}
		}
		return c.getTypeAliasInstantiation(symbol, c.typeArgumentsFromTypeReferenceNode(node), newAliasSymbol, aliasTypeArguments)
	}
	if c.checkNoTypeArguments(node, symbol) {
		return t
	} else {
		return c.errorType
	}
}

func (c *Checker) isLocalTypeAlias(symbol *ast.Symbol) bool {
	declaration := symbol.Declarations. /* ? */ find(isTypeAlias)
	return declaration != nil && getContainingFunction(declaration) != nil
}

func (c *Checker) getTypeReferenceName(node TypeReferenceType) *EntityNameOrEntityNameExpression {
	switch node.Kind {
	case ast.KindTypeReference:
		return node.TypeName
	case ast.KindExpressionWithTypeArguments:
		// We only support expressions that are simple qualified names. For other
		// expressions this produces undefined.
		expr := node.Expression
		if isEntityNameExpression(expr) {
			return expr
		}
	}

	return nil
}

func (c *Checker) getSymbolPath(symbol *ast.Symbol) string {
	if symbol.Parent != nil {
		return __TEMPLATE__(c.getSymbolPath(symbol.Parent), ".", symbol.EscapedName)
	} else {
		return symbol.EscapedName /* as string */
	}
}

func (c *Checker) getUnresolvedSymbolForEntityName(name EntityNameOrEntityNameExpression) TransientSymbol {
	var identifier Identifier
	switch {
	case name.Kind == ast.KindQualifiedName:
		identifier = name.Right
	case name.Kind == ast.KindPropertyAccessExpression:
		identifier = name.Name
	default:
		identifier = name
	}
	text := identifier.EscapedText
	if text {
		var parentSymbol *TransientSymbol
		switch {
		case name.Kind == ast.KindQualifiedName:
			parentSymbol = c.getUnresolvedSymbolForEntityName(name.Left)
		case name.Kind == ast.KindPropertyAccessExpression:
			parentSymbol = c.getUnresolvedSymbolForEntityName(name.Expression)
		default:
			parentSymbol = nil
		}
		var path string
		if parentSymbol != nil {
			path = __TEMPLATE__(c.getSymbolPath(parentSymbol), ".", text)
		} else {
			path = text /* as string */
		}
		result := c.unresolvedSymbols.get(path)
		if result == nil {
			c.unresolvedSymbols.set(path /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = createSymbol(SymbolFlags.TypeAlias, text, CheckFlags.Unresolved) */, TODO)
			result.Parent = parentSymbol
			result.Links.declaredType = c.unresolvedType
		}
		return result
	}
	return c.unknownSymbol
}

func (c *Checker) resolveTypeReferenceName(typeReference TypeReferenceType, meaning SymbolFlags, ignoreErrors bool) *ast.Symbol {
	name := c.getTypeReferenceName(typeReference)
	if name == nil {
		return c.unknownSymbol
	}
	symbol := c.resolveEntityName(name, meaning, ignoreErrors)
	switch {
	case symbol != nil && symbol != c.unknownSymbol:
		return symbol
	case ignoreErrors:
		return c.unknownSymbol
	default:
		return c.getUnresolvedSymbolForEntityName(name)
	}
}

func (c *Checker) getTypeReferenceType(node NodeWithTypeArguments, symbol *ast.Symbol) *Type {
	if symbol == c.unknownSymbol {
		return c.errorType
	}
	symbol = c.getExpandoSymbol(symbol) || symbol
	if symbol.Flags&(ast.SymbolFlagsClass|ast.SymbolFlagsInterface) != 0 {
		return c.getTypeFromClassOrInterfaceReference(node, symbol)
	}
	if symbol.Flags&ast.SymbolFlagsTypeAlias != 0 {
		return c.getTypeFromTypeAliasReference(node, symbol)
	}
	// Get type from reference to named type that cannot be generic (enum or type parameter)
	res := c.tryGetDeclaredTypeOfSymbol(symbol)
	if res != nil {
		if c.checkNoTypeArguments(node, symbol) {
			return c.getRegularTypeOfLiteralType(res)
		} else {
			return c.errorType
		}
	}
	if symbol.Flags&ast.SymbolFlagsValue != 0 && c.isJSDocTypeReference(node) {
		jsdocType := c.getTypeFromJSDocValueReference(node, symbol)
		if jsdocType != nil {
			return jsdocType
		} else {
			// Resolve the type reference as a Type for the purpose of reporting errors.
			c.resolveTypeReferenceName(node, ast.SymbolFlagsType)
			return c.getTypeOfSymbol(symbol)
		}
	}
	return c.errorType
}

/**
 * A JSdoc TypeReference may be to a value, but resolve it as a type anyway.
 * Example: import('./b').ConstructorFunction
 */

func (c *Checker) getTypeFromJSDocValueReference(node NodeWithTypeArguments, symbol *ast.Symbol) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedJSDocType == nil {
		valueType := c.getTypeOfSymbol(symbol)
		typeType := valueType
		if symbol.ValueDeclaration != nil {
			isImportTypeWithQualifier := node.Kind == ast.KindImportType && node.AsImportTypeNode().Qualifier
			// valueType might not have a symbol, eg, {import('./b').STRING_LITERAL}
			if valueType.symbol && valueType.symbol != symbol && isImportTypeWithQualifier {
				typeType = c.getTypeReferenceType(node, valueType.symbol)
			}
		}
		links.resolvedJSDocType = typeType
	}
	return links.resolvedJSDocType
}

func (c *Checker) getNoInferType(t *Type) *Type {
	if c.isNoInferTargetType(t) {
		return c.getOrCreateSubstitutionType(t, c.unknownType)
	} else {
		return t
	}
}

func (c *Checker) isNoInferTargetType(t *Type) bool {
	// This is effectively a more conservative and predictable form of couldContainTypeVariables. We want to
	// preserve NoInfer<T> only for types that could contain type variables, but we don't want to exhaustively
	// examine all object type members.
	return t.flags&TypeFlagsUnionOrIntersection != 0 && core.Some(t.AsUnionOrIntersectionType().types, c.isNoInferTargetType) || t.flags&TypeFlagsSubstitution != 0 && !c.isNoInferType(t) && c.isNoInferTargetType(t.AsSubstitutionType().baseType) || t.flags&TypeFlagsObject != 0 && !c.isEmptyAnonymousObjectType(t) || t.flags&(TypeFlagsInstantiable & ^TypeFlagsSubstitution) != 0 && !c.isPatternLiteralType(t)
}

func (c *Checker) isNoInferType(t *Type) bool {
	// A NoInfer<T> type is represented as a substitution type with a TypeFlags.Unknown constraint.
	return t.flags&TypeFlagsSubstitution != 0 && t.AsSubstitutionType().constraint.flags&TypeFlagsUnknown != 0
}

func (c *Checker) getSubstitutionType(baseType *Type, constraint *Type) *Type {
	if constraint.flags&TypeFlagsAnyOrUnknown != 0 || constraint == baseType || baseType.flags&TypeFlagsAny != 0 {
		return baseType
	} else {
		return c.getOrCreateSubstitutionType(baseType, constraint)
	}
}

func (c *Checker) getOrCreateSubstitutionType(baseType *Type, constraint *Type) SubstitutionType {
	id := __TEMPLATE__(c.getTypeId(baseType), ">", c.getTypeId(constraint))
	cached := c.substitutionTypes.get(id)
	if cached != nil {
		return cached
	}
	result := c.createType(TypeFlagsSubstitution).AsSubstitutionType()
	result.baseType = baseType
	result.constraint = constraint
	c.substitutionTypes.set(id, result)
	return result
}

func (c *Checker) getSubstitutionIntersection(substitutionType SubstitutionType) *Type {
	if c.isNoInferType(substitutionType) {
		return substitutionType.baseType
	} else {
		return c.getIntersectionType([]*Type{substitutionType.constraint, substitutionType.baseType})
	}
}

func (c *Checker) isUnaryTupleTypeNode(node TypeNode) bool {
	return node.Kind == ast.KindTupleType && node.AsTupleTypeNode().Elements.length == 1
}

func (c *Checker) getImpliedConstraint(t *Type, checkNode TypeNode, extendsNode TypeNode) *Type {
	switch {
	case c.isUnaryTupleTypeNode(checkNode) && c.isUnaryTupleTypeNode(extendsNode):
		return c.getImpliedConstraint(t, checkNode.AsTupleTypeNode().Elements[0], extendsNode.AsTupleTypeNode().Elements[0])
	case c.getActualTypeVariable(c.getTypeFromTypeNode(checkNode)) == c.getActualTypeVariable(t):
		return c.getTypeFromTypeNode(extendsNode)
	default:
		return nil
	}
}

func (c *Checker) getConditionalFlowTypeOfType(t *Type, node *ast.Node) *Type {
	var constraints *[]*Type
	covariant := true
	for node && !isStatement(node) && node.Kind != ast.KindJSDoc {
		parent := node.Parent
		// only consider variance flipped by parameter locations - `keyof` types would usually be considered variance inverting, but
		// often get used in indexed accesses where they behave sortof invariantly, but our checking is lax
		if parent.Kind == ast.KindParameter {
			covariant = !covariant
		}
		// Always substitute on type parameters, regardless of variance, since even
		// in contravariant positions, they may rely on substituted constraints to be valid
		if (covariant || t.flags&TypeFlagsTypeVariable != 0) && parent.Kind == ast.KindConditionalType && node == parent.AsConditionalTypeNode().TrueType {
			constraint := c.getImpliedConstraint(t, parent.AsConditionalTypeNode().CheckType, parent.AsConditionalTypeNode().ExtendsType)
			if constraint != nil {
				constraints = append(constraints, constraint)
			}
		} else if t.flags&TypeFlagsTypeParameter != 0 && parent.Kind == ast.KindMappedType && parent.AsMappedTypeNode().NameType == nil && node == parent.AsMappedTypeNode().Type_ {
			mappedType := c.getTypeFromTypeNode(parent.AsTypeNode()).AsMappedType()
			if c.getTypeParameterFromMappedType(mappedType) == c.getActualTypeVariable(t) {
				typeParameter := c.getHomomorphicTypeVariable(mappedType)
				if typeParameter != nil {
					constraint := c.getConstraintOfTypeParameter(typeParameter)
					if constraint != nil && c.everyType(constraint, c.isArrayOrTupleType) {
						constraints = append(constraints, c.getUnionType([]*Type{c.numberType, c.numericStringType}))
					}
				}
			}
		}
		node = parent
	}
	if constraints != nil {
		return c.getSubstitutionType(t, c.getIntersectionType(constraints))
	} else {
		return t
	}
}

func (c *Checker) isJSDocTypeReference(node *ast.Node) bool {
	return node.Flags&ast.NodeFlagsJSDoc != 0 && (node.Kind == ast.KindTypeReference || node.Kind == ast.KindImportType)
}

func (c *Checker) checkNoTypeArguments(node NodeWithTypeArguments, symbol *ast.Symbol) bool {
	if node.TypeArguments != nil {
		c.error(node, Diagnostics.Type_0_is_not_generic, ifElse(symbol != nil, c.symbolToString(symbol), ifElse(node.AsTypeReferenceNode().TypeName, declarationNameToString(node.AsTypeReferenceNode().TypeName), anon)))
		return false
	}
	return true
}

func (c *Checker) getIntendedTypeFromJSDocTypeReference(node TypeReferenceNode) *Type {
	if isIdentifier(node.TypeName) {
		typeArgs := node.TypeArguments
		switch node.TypeName.EscapedText {
		case "String":
			c.checkNoTypeArguments(node)
			return c.stringType
		case "Number":
			c.checkNoTypeArguments(node)
			return c.numberType
		case "Boolean":
			c.checkNoTypeArguments(node)
			return c.booleanType
		case "Void":
			c.checkNoTypeArguments(node)
			return c.voidType
		case "Undefined":
			c.checkNoTypeArguments(node)
			return c.undefinedType
		case "Null":
			c.checkNoTypeArguments(node)
			return c.nullType
		case "Function",
			"function":
			c.checkNoTypeArguments(node)
			return c.globalFunctionType
		case "array":
			if (typeArgs == nil || typeArgs.length == 0) && !c.noImplicitAny {
				return c.anyArrayType
			} else {
				return nil
			}
		case "promise":
			if (typeArgs == nil || typeArgs.length == 0) && !c.noImplicitAny {
				return c.createPromiseType(c.anyType)
			} else {
				return nil
			}
		case "Object":
			if typeArgs != nil && typeArgs.length == 2 {
				if isJSDocIndexSignature(node) {
					indexed := c.getTypeFromTypeNode(typeArgs[0])
					target := c.getTypeFromTypeNode(typeArgs[1])
					var indexInfo []IndexInfo
					if indexed == c.stringType || indexed == c.numberType {
						indexInfo = []IndexInfo{c.createIndexInfo(indexed, target, false /*isReadonly*/)}
					} else {
						indexInfo = emptyArray
					}
					return c.createAnonymousType(nil, c.emptySymbols, emptyArray, emptyArray, indexInfo)
				}
				return c.anyType
			}
			c.checkNoTypeArguments(node)
			if !c.noImplicitAny {
				return c.anyType
			} else {
				return nil
			}
		}
	}
}

func (c *Checker) getTypeFromJSDocNullableTypeNode(node JSDocNullableType) *Type {
	t := c.getTypeFromTypeNode(node.Type_)
	if c.strictNullChecks {
		return c.getNullableType(t, TypeFlagsNull)
	} else {
		return t
	}
}

func (c *Checker) getTypeFromTypeReference(node TypeReferenceType) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		// handle LS queries on the `const` in `x as const` by resolving to the type of `x`
		if isConstTypeReference(node) && isAssertionExpression(node.Parent) {
			links.resolvedSymbol = c.unknownSymbol
			links.resolvedType = c.checkExpressionCached(node.Parent.Expression)
			return links.resolvedType
		}
		var symbol *ast.Symbol
		var t *Type
		meaning := ast.SymbolFlagsType
		if c.isJSDocTypeReference(node) {
			t = c.getIntendedTypeFromJSDocTypeReference(node)
			if !(t) {
				symbol = c.resolveTypeReferenceName(node, meaning, true /*ignoreErrors*/)
				if symbol == c.unknownSymbol {
					symbol = c.resolveTypeReferenceName(node, meaning|ast.SymbolFlagsValue)
				} else {
					c.resolveTypeReferenceName(node, meaning)
					// Resolve again to mark errors, if any
				}
				t = c.getTypeReferenceType(node, symbol)
			}
		}
		if !(t) {
			symbol = c.resolveTypeReferenceName(node, meaning)
			t = c.getTypeReferenceType(node, symbol)
		}
		// Cache both the resolved symbol and the resolved type. The resolved symbol is needed when we check the
		// type reference in checkTypeReferenceNode.
		links.resolvedSymbol = symbol
		links.resolvedType = t
	}
	return links.resolvedType
}

func (c *Checker) typeArgumentsFromTypeReferenceNode(node NodeWithTypeArguments) *[]*Type {
	return core.Map(node.TypeArguments, c.getTypeFromTypeNode)
}

func (c *Checker) getTypeFromTypeQueryNode(node TypeQueryNode) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		// TypeScript 1.0 spec (April 2014): 3.6.3
		// The expression is processed as an identifier expression (section 4.3)
		// or property access expression(section 4.10),
		// the widened type(section 3.9) of which becomes the result.
		t := c.checkExpressionWithTypeArguments(node)
		links.resolvedType = c.getRegularTypeOfLiteralType(c.getWidenedType(t))
	}
	return links.resolvedType
}

func (c *Checker) getTypeOfGlobalSymbol(symbol *ast.Symbol, arity number) ObjectType {
	getTypeDeclaration := func(symbol *ast.Symbol) Declaration {
		declarations := symbol.Declarations
		if declarations != nil {
			for _, declaration := range declarations {
				switch declaration.Kind {
				case ast.KindClassDeclaration,
					ast.KindInterfaceDeclaration,
					ast.KindEnumDeclaration:
					return declaration
				}
			}
		}
	}

	if symbol == nil {
		if arity != 0 {
			return c.emptyGenericType
		} else {
			return c.emptyObjectType
		}
	}
	t := c.getDeclaredTypeOfSymbol(symbol)
	if t.flags&TypeFlagsObject == 0 {
		c.error(getTypeDeclaration(symbol), Diagnostics.Global_type_0_must_be_a_class_or_interface_type, symbolName(symbol))
		if arity != 0 {
			return c.emptyGenericType
		} else {
			return c.emptyObjectType
		}
	}
	if length(t.AsInterfaceType().typeParameters) != arity {
		c.error(getTypeDeclaration(symbol), Diagnostics.Global_type_0_must_have_1_type_parameter_s, symbolName(symbol), arity)
		if arity != 0 {
			return c.emptyGenericType
		} else {
			return c.emptyObjectType
		}
	}
	return t.AsObjectType()
}

func (c *Checker) getGlobalValueSymbol(name string, reportErrors bool) *ast.Symbol {
	return c.getGlobalSymbol(name, ast.SymbolFlagsValue, ifElse(reportErrors, Diagnostics.Cannot_find_global_value_0, nil))
}

func (c *Checker) getGlobalTypeSymbol(name string, reportErrors bool) *ast.Symbol {
	return c.getGlobalSymbol(name, ast.SymbolFlagsType, ifElse(reportErrors, Diagnostics.Cannot_find_global_type_0, nil))
}

func (c *Checker) getGlobalTypeAliasSymbol(name string, arity number, reportErrors bool) *ast.Symbol {
	symbol := c.getGlobalSymbol(name, ast.SymbolFlagsType, ifElse(reportErrors, Diagnostics.Cannot_find_global_type_0, nil))
	if symbol != nil {
		// Resolve the declared type of the symbol. This resolves type parameters for the type
		// alias so that we can check arity.
		c.getDeclaredTypeOfSymbol(symbol)
		if length(c.getSymbolLinks(symbol).typeParameters) != arity {
			decl := symbol.Declarations && core.Find(symbol.Declarations, isTypeAliasDeclaration)
			c.error(decl, Diagnostics.Global_type_0_must_have_1_type_parameter_s, symbolName(symbol), arity)
			return nil
		}
	}
	return symbol
}

func (c *Checker) getGlobalSymbol(name string, meaning SymbolFlags, diagnostic *DiagnosticMessage) *ast.Symbol {
	// Don't track references for global symbols anyway, so value if `isReference` is arbitrary
	return c.resolveName(nil, name, meaning, diagnostic, false /*isUse*/, false /*excludeGlobals*/)
}

/* OVERLOAD: function getGlobalType(name: __String, arity: 0, reportErrors: true): ObjectType; */
/* OVERLOAD: function getGlobalType(name: __String, arity: 0, reportErrors: boolean): ObjectType | undefined; */
/* OVERLOAD: function getGlobalType(name: __String, arity: number, reportErrors: true): GenericType; */
/* OVERLOAD: function getGlobalType(name: __String, arity: number, reportErrors: boolean): GenericType | undefined; */
func (c *Checker) getGlobalType(name string, arity number, reportErrors bool) *ObjectType {
	symbol := c.getGlobalTypeSymbol(name, reportErrors)
	if symbol != nil || reportErrors {
		return c.getTypeOfGlobalSymbol(symbol, arity)
	} else {
		return nil
	}
}

/* OVERLOAD: function getGlobalBuiltinTypes(typeNames: readonly string[], arity: 0): ObjectType[]; */
/* OVERLOAD: function getGlobalBuiltinTypes(typeNames: readonly string[], arity: number): GenericType[]; */
func (c *Checker) getGlobalBuiltinTypes(typeNames []string, arity number) []*Type {
	var types *[]*Type
	for _, typeName := range typeNames {
		types = append(types, c.getGlobalType(typeName.(string), arity, false /*reportErrors*/))
	}
	return ifNotNilElse(types, emptyArray)
}

func (c *Checker) getGlobalTypedPropertyDescriptorType() GenericType {
	// We always report an error, so store a result in the event we could not resolve the symbol to prevent reporting it multiple times
	c.deferredGlobalTypedPropertyDescriptorType = c.deferredGlobalTypedPropertyDescriptorType || c.getGlobalType("TypedPropertyDescriptor" /* as __String */, 1 /*arity*/, true /*reportErrors*/) || c.emptyGenericType
	return c.deferredGlobalTypedPropertyDescriptorType
}

func (c *Checker) getGlobalTemplateStringsArrayType() ObjectType {
	// We always report an error, so store a result in the event we could not resolve the symbol to prevent reporting it multiple times
	c.deferredGlobalTemplateStringsArrayType = c.deferredGlobalTemplateStringsArrayType || c.getGlobalType("TemplateStringsArray" /* as __String */, 0 /*arity*/, true /*reportErrors*/) || c.emptyObjectType
	return c.deferredGlobalTemplateStringsArrayType
}

func (c *Checker) getGlobalImportMetaType() ObjectType {
	// We always report an error, so store a result in the event we could not resolve the symbol to prevent reporting it multiple times
	c.deferredGlobalImportMetaType = c.deferredGlobalImportMetaType || c.getGlobalType("ImportMeta" /* as __String */, 0 /*arity*/, true /*reportErrors*/) || c.emptyObjectType
	return c.deferredGlobalImportMetaType
}

func (c *Checker) getGlobalImportMetaExpressionType() ObjectType {
	if !c.deferredGlobalImportMetaExpressionType {
		// Create a synthetic type `ImportMetaExpression { meta: MetaProperty }`
		symbol := c.createSymbol(ast.SymbolFlagsNone, "ImportMetaExpression" /* as __String */)
		importMetaType := c.getGlobalImportMetaType()

		metaPropertySymbol := c.createSymbol(ast.SymbolFlagsProperty, "meta" /* as __String */, ast.CheckFlagsReadonly)
		metaPropertySymbol.Parent = symbol
		metaPropertySymbol.Links.type_ = importMetaType

		members := createSymbolTable([]TransientSymbol{metaPropertySymbol})
		symbol.Members = members

		c.deferredGlobalImportMetaExpressionType = c.createAnonymousType(symbol, members, emptyArray, emptyArray, emptyArray)
	}
	return c.deferredGlobalImportMetaExpressionType
}

func (c *Checker) getGlobalImportCallOptionsType(reportErrors bool) ObjectType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalImportCallOptionsType ||= getGlobalType("ImportCallOptions" as __String, /*arity* / 0, reportErrors) */ TODO) || c.emptyObjectType
}

func (c *Checker) getGlobalImportAttributesType(reportErrors bool) ObjectType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalImportAttributesType ||= getGlobalType("ImportAttributes" as __String, /*arity* / 0, reportErrors) */ TODO) || c.emptyObjectType
}

func (c *Checker) getGlobalESSymbolConstructorSymbol(reportErrors bool) *ast.Symbol {
	c.deferredGlobalESSymbolConstructorSymbol = c.deferredGlobalESSymbolConstructorSymbol || c.getGlobalValueSymbol("Symbol" /* as __String */, reportErrors)
	return c.deferredGlobalESSymbolConstructorSymbol
}

func (c *Checker) getGlobalESSymbolConstructorTypeSymbol(reportErrors bool) *ast.Symbol {
	c.deferredGlobalESSymbolConstructorTypeSymbol = c.deferredGlobalESSymbolConstructorTypeSymbol || c.getGlobalTypeSymbol("SymbolConstructor" /* as __String */, reportErrors)
	return c.deferredGlobalESSymbolConstructorTypeSymbol
}

func (c *Checker) getGlobalESSymbolType() ObjectType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalESSymbolType ||= getGlobalType("Symbol" as __String, /*arity* / 0, /*reportErrors* / false) */ TODO) || c.emptyObjectType
}

func (c *Checker) getGlobalPromiseType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalPromiseType ||= getGlobalType("Promise" as __String, /*arity* / 1, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalPromiseLikeType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalPromiseLikeType ||= getGlobalType("PromiseLike" as __String, /*arity* / 1, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalPromiseConstructorSymbol(reportErrors bool) *ast.Symbol {
	c.deferredGlobalPromiseConstructorSymbol = c.deferredGlobalPromiseConstructorSymbol || c.getGlobalValueSymbol("Promise" /* as __String */, reportErrors)
	return c.deferredGlobalPromiseConstructorSymbol
}

func (c *Checker) getGlobalPromiseConstructorLikeType(reportErrors bool) ObjectType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalPromiseConstructorLikeType ||= getGlobalType("PromiseConstructorLike" as __String, /*arity* / 0, reportErrors) */ TODO) || c.emptyObjectType
}

func (c *Checker) getGlobalAsyncIterableType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalAsyncIterableType ||= getGlobalType("AsyncIterable" as __String, /*arity* / 3, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalAsyncIteratorType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalAsyncIteratorType ||= getGlobalType("AsyncIterator" as __String, /*arity* / 3, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalAsyncIterableIteratorType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalAsyncIterableIteratorType ||= getGlobalType("AsyncIterableIterator" as __String, /*arity* / 3, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalBuiltinAsyncIteratorTypes() []GenericType {
	// NOTE: This list does not include all built-in async iterator types, only those that are likely to be encountered frequently.
	if c.deferredGlobalBuiltinAsyncIteratorTypes == nil {
		c.deferredGlobalBuiltinAsyncIteratorTypes = c.getGlobalBuiltinTypes([]string{"ReadableStreamAsyncIterator"}, 1)
	}
	return c.deferredGlobalBuiltinAsyncIteratorTypes
}

func (c *Checker) getGlobalAsyncIteratorObjectType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalAsyncIteratorObjectType ||= getGlobalType("AsyncIteratorObject" as __String, /*arity* / 3, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalAsyncGeneratorType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalAsyncGeneratorType ||= getGlobalType("AsyncGenerator" as __String, /*arity* / 3, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalIterableType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalIterableType ||= getGlobalType("Iterable" as __String, /*arity* / 3, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalIteratorType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalIteratorType ||= getGlobalType("Iterator" as __String, /*arity* / 3, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalIterableIteratorType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalIterableIteratorType ||= getGlobalType("IterableIterator" as __String, /*arity* / 3, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getBuiltinIteratorReturnType() IntrinsicType {
	if c.strictBuiltinIteratorReturn {
		return c.undefinedType
	} else {
		return c.anyType
	}
}

func (c *Checker) getGlobalBuiltinIteratorTypes() []GenericType {
	// NOTE: This list does not include all built-in iterator types, only those that are likely to be encountered frequently.
	if c.deferredGlobalBuiltinIteratorTypes == nil {
		c.deferredGlobalBuiltinIteratorTypes = c.getGlobalBuiltinTypes([]string{"ArrayIterator", "MapIterator", "SetIterator", "StringIterator"}, 1)
	}
	return c.deferredGlobalBuiltinIteratorTypes
}

func (c *Checker) getGlobalIteratorObjectType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalIteratorObjectType ||= getGlobalType("IteratorObject" as __String, /*arity* / 3, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalGeneratorType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalGeneratorType ||= getGlobalType("Generator" as __String, /*arity* / 3, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalIteratorYieldResultType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalIteratorYieldResultType ||= getGlobalType("IteratorYieldResult" as __String, /*arity* / 1, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalIteratorReturnResultType(reportErrors bool) GenericType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalIteratorReturnResultType ||= getGlobalType("IteratorReturnResult" as __String, /*arity* / 1, reportErrors) */ TODO) || c.emptyGenericType
}

func (c *Checker) getGlobalDisposableType(reportErrors bool) ObjectType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalDisposableType ||= getGlobalType("Disposable" as __String, /*arity* / 0, reportErrors) */ TODO) || c.emptyObjectType
}

func (c *Checker) getGlobalAsyncDisposableType(reportErrors bool) ObjectType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalAsyncDisposableType ||= getGlobalType("AsyncDisposable" as __String, /*arity* / 0, reportErrors) */ TODO) || c.emptyObjectType
}

func (c *Checker) getGlobalTypeOrUndefined(name string, arity number /*  = 0 */) *ObjectType {
	symbol := c.getGlobalSymbol(name, ast.SymbolFlagsType, nil /*diagnostic*/)
	return symbol && c.getTypeOfGlobalSymbol(symbol, arity).AsGenericType()
}

func (c *Checker) getGlobalExtractSymbol() *ast.Symbol {
	// We always report an error, so cache a result in the event we could not resolve the symbol to prevent reporting it multiple times
	c.deferredGlobalExtractSymbol = c.deferredGlobalExtractSymbol || c.getGlobalTypeAliasSymbol("Extract" /* as __String */, 2 /*arity*/, true /*reportErrors*/) || c.unknownSymbol
	if c.deferredGlobalExtractSymbol == c.unknownSymbol {
		return nil
	} else {
		return c.deferredGlobalExtractSymbol
	}
}

func (c *Checker) getGlobalOmitSymbol() *ast.Symbol {
	// We always report an error, so cache a result in the event we could not resolve the symbol to prevent reporting it multiple times
	c.deferredGlobalOmitSymbol = c.deferredGlobalOmitSymbol || c.getGlobalTypeAliasSymbol("Omit" /* as __String */, 2 /*arity*/, true /*reportErrors*/) || c.unknownSymbol
	if c.deferredGlobalOmitSymbol == c.unknownSymbol {
		return nil
	} else {
		return c.deferredGlobalOmitSymbol
	}
}

func (c *Checker) getGlobalAwaitedSymbol(reportErrors bool) *ast.Symbol {
	// Only cache `unknownSymbol` if we are reporting errors so that we don't report the error more than once.
	c.deferredGlobalAwaitedSymbol = c.deferredGlobalAwaitedSymbol || c.getGlobalTypeAliasSymbol("Awaited" /* as __String */, 1 /*arity*/, reportErrors) || (ifElse(reportErrors, c.unknownSymbol, nil))
	if c.deferredGlobalAwaitedSymbol == c.unknownSymbol {
		return nil
	} else {
		return c.deferredGlobalAwaitedSymbol
	}
}

func (c *Checker) getGlobalBigIntType() ObjectType {
	return ( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: deferredGlobalBigIntType ||= getGlobalType("BigInt" as __String, /*arity* / 0, /*reportErrors* / false) */ TODO) || c.emptyObjectType
}

func (c *Checker) getGlobalClassDecoratorContextType(reportErrors bool) GenericType {
	return ifNotNilElse(( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: deferredGlobalClassDecoratorContextType ??= getGlobalType("ClassDecoratorContext" as __String, /*arity* / 1, reportErrors) */ TODO), c.emptyGenericType)
}

func (c *Checker) getGlobalClassMethodDecoratorContextType(reportErrors bool) GenericType {
	return ifNotNilElse(( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: deferredGlobalClassMethodDecoratorContextType ??= getGlobalType("ClassMethodDecoratorContext" as __String, /*arity* / 2, reportErrors) */ TODO), c.emptyGenericType)
}

func (c *Checker) getGlobalClassGetterDecoratorContextType(reportErrors bool) GenericType {
	return ifNotNilElse(( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: deferredGlobalClassGetterDecoratorContextType ??= getGlobalType("ClassGetterDecoratorContext" as __String, /*arity* / 2, reportErrors) */ TODO), c.emptyGenericType)
}

func (c *Checker) getGlobalClassSetterDecoratorContextType(reportErrors bool) GenericType {
	return ifNotNilElse(( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: deferredGlobalClassSetterDecoratorContextType ??= getGlobalType("ClassSetterDecoratorContext" as __String, /*arity* / 2, reportErrors) */ TODO), c.emptyGenericType)
}

func (c *Checker) getGlobalClassAccessorDecoratorContextType(reportErrors bool) GenericType {
	return ifNotNilElse(( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: deferredGlobalClassAccessorDecoratorContextType ??= getGlobalType("ClassAccessorDecoratorContext" as __String, /*arity* / 2, reportErrors) */ TODO), c.emptyGenericType)
}

func (c *Checker) getGlobalClassAccessorDecoratorTargetType(reportErrors bool) GenericType {
	return ifNotNilElse(( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: deferredGlobalClassAccessorDecoratorTargetType ??= getGlobalType("ClassAccessorDecoratorTarget" as __String, /*arity* / 2, reportErrors) */ TODO), c.emptyGenericType)
}

func (c *Checker) getGlobalClassAccessorDecoratorResultType(reportErrors bool) GenericType {
	return ifNotNilElse(( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: deferredGlobalClassAccessorDecoratorResultType ??= getGlobalType("ClassAccessorDecoratorResult" as __String, /*arity* / 2, reportErrors) */ TODO), c.emptyGenericType)
}

func (c *Checker) getGlobalClassFieldDecoratorContextType(reportErrors bool) GenericType {
	return ifNotNilElse(( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: deferredGlobalClassFieldDecoratorContextType ??= getGlobalType("ClassFieldDecoratorContext" as __String, /*arity* / 2, reportErrors) */ TODO), c.emptyGenericType)
}

func (c *Checker) getGlobalNaNSymbol() *ast.Symbol {
	c.deferredGlobalNaNSymbol = c.deferredGlobalNaNSymbol || c.getGlobalValueSymbol("NaN" /* as __String */, false /*reportErrors*/)
	return c.deferredGlobalNaNSymbol
}

func (c *Checker) getGlobalRecordSymbol() *ast.Symbol {
	c.deferredGlobalRecordSymbol = c.deferredGlobalRecordSymbol || c.getGlobalTypeAliasSymbol("Record" /* as __String */, 2 /*arity*/, true /*reportErrors*/) || c.unknownSymbol
	if c.deferredGlobalRecordSymbol == c.unknownSymbol {
		return nil
	} else {
		return c.deferredGlobalRecordSymbol
	}
}

/**
 * Instantiates a global type that is generic with some element type, and returns that instantiation.
 */

func (c *Checker) createTypeFromGenericGlobalType(genericGlobalType GenericType, typeArguments []*Type) ObjectType {
	if genericGlobalType != c.emptyGenericType {
		return c.createTypeReference(genericGlobalType, typeArguments)
	} else {
		return c.emptyObjectType
	}
}

func (c *Checker) createTypedPropertyDescriptorType(propertyType *Type) *Type {
	return c.createTypeFromGenericGlobalType(c.getGlobalTypedPropertyDescriptorType(), []*Type{propertyType})
}

func (c *Checker) createIterableType(iteratedType *Type) *Type {
	return c.createTypeFromGenericGlobalType(c.getGlobalIterableType(true), []*Type{iteratedType, c.voidType, c.undefinedType})
}

func (c *Checker) createArrayType(elementType *Type, readonly bool) ObjectType {
	return c.createTypeFromGenericGlobalType(ifElse(readonly, c.globalReadonlyArrayType, c.globalArrayType), []*Type{elementType})
}

func (c *Checker) getTupleElementFlags(node TypeNode) /* TODO(TS-TO-GO) inferred type ElementFlags.Required | ElementFlags.Optional | ElementFlags.Rest | ElementFlags.Variadic */ any {
	switch node.Kind {
	case ast.KindOptionalType:
		return ElementFlagsOptional
	case ast.KindRestType:
		return c.getRestTypeElementFlags(node.AsRestTypeNode())
	case ast.KindNamedTupleMember:
		switch {
		case node.AsNamedTupleMember().QuestionToken != nil:
			return ElementFlagsOptional
		case node.AsNamedTupleMember().DotDotDotToken != nil:
			return c.getRestTypeElementFlags(node.AsNamedTupleMember())
		default:
			return ElementFlagsRequired
		}
	default:
		return ElementFlagsRequired
	}
}

func (c *Checker) getRestTypeElementFlags(node Union[RestTypeNode, NamedTupleMember]) /* TODO(TS-TO-GO) inferred type ElementFlags.Rest | ElementFlags.Variadic */ any {
	if c.getArrayElementTypeNode(node.Type_) != nil {
		return ElementFlagsRest
	} else {
		return ElementFlagsVariadic
	}
}

func (c *Checker) getArrayOrTupleTargetType(node Union[ArrayTypeNode, TupleTypeNode]) GenericType {
	readonly := c.isReadonlyTypeOperator(node.Parent)
	elementType := c.getArrayElementTypeNode(node)
	if elementType != nil {
		if readonly {
			return c.globalReadonlyArrayType
		} else {
			return c.globalArrayType
		}
	}
	elementFlags := core.Map(node.AsTupleTypeNode().Elements, c.getTupleElementFlags)
	return c.getTupleTargetType(elementFlags, readonly, core.Map(node.AsTupleTypeNode().Elements, c.memberIfLabeledElementDeclaration))
}

func (c *Checker) memberIfLabeledElementDeclaration(member *ast.Node) Union[NamedTupleMember, ParameterDeclaration, undefined] {
	if isNamedTupleMember(member) || isParameter(member) {
		return member
	} else {
		return nil
	}
}

// Return true if the given type reference node is directly aliased or if it needs to be deferred
// because it is possibly contained in a circular chain of eagerly resolved types.
func (c *Checker) isDeferredTypeReferenceNode(node Union[TypeReferenceNode, ArrayTypeNode, TupleTypeNode], hasDefaultTypeArguments bool) bool {
	return c.getAliasSymbolForTypeNode(node) != nil || c.isResolvedByTypeAlias(node) && (ifElse(node.Kind == ast.KindArrayType, c.mayResolveTypeAlias(node.ElementType), ifElse(node.Kind == ast.KindTupleType, core.Some(node.Elements, c.mayResolveTypeAlias), hasDefaultTypeArguments || core.Some(node.TypeArguments, c.mayResolveTypeAlias))))
}

// Return true when the given node is transitively contained in type constructs that eagerly
// resolve their constituent types. We include SyntaxKind.TypeReference because type arguments
// of type aliases are eagerly resolved.
func (c *Checker) isResolvedByTypeAlias(node *ast.Node) bool {
	parent := node.Parent
	switch parent.Kind {
	case ast.KindParenthesizedType,
		ast.KindNamedTupleMember,
		ast.KindTypeReference,
		ast.KindUnionType,
		ast.KindIntersectionType,
		ast.KindIndexedAccessType,
		ast.KindConditionalType,
		ast.KindTypeOperator,
		ast.KindArrayType,
		ast.KindTupleType:
		return c.isResolvedByTypeAlias(parent)
	case ast.KindTypeAliasDeclaration:
		return true
	}
	return false
}

// Return true if resolving the given node (i.e. getTypeFromTypeNode) possibly causes resolution
// of a type alias.
func (c *Checker) mayResolveTypeAlias(node *ast.Node) bool {
	switch node.Kind {
	case ast.KindTypeReference:
		return c.isJSDocTypeReference(node) || c.resolveTypeReferenceName(node.AsTypeReferenceNode(), ast.SymbolFlagsType).Flags&ast.SymbolFlagsTypeAlias != 0
	case ast.KindTypeQuery:
		return true
	case ast.KindTypeOperator:
		return node.AsTypeOperatorNode().Operator != ast.KindUniqueKeyword && c.mayResolveTypeAlias(node.AsTypeOperatorNode().Type_)
	case ast.KindParenthesizedType,
		ast.KindOptionalType,
		ast.KindNamedTupleMember,
		ast.KindJSDocOptionalType,
		ast.KindJSDocNullableType,
		ast.KindJSDocNonNullableType,
		ast.KindJSDocTypeExpression:
		return c.mayResolveTypeAlias((node /* as ParenthesizedTypeNode | OptionalTypeNode | JSDocTypeReferencingNode | NamedTupleMember */).Type_)
	case ast.KindRestType:
		return node.AsRestTypeNode().Type_.Kind != ast.KindArrayType || c.mayResolveTypeAlias((node.AsRestTypeNode()).Type_.AsArrayTypeNode().ElementType)
	case ast.KindUnionType,
		ast.KindIntersectionType:
		return core.Some(node.AsUnionOrIntersectionTypeNode().Types, c.mayResolveTypeAlias)
	case ast.KindIndexedAccessType:
		return c.mayResolveTypeAlias(node.AsIndexedAccessTypeNode().ObjectType) || c.mayResolveTypeAlias(node.AsIndexedAccessTypeNode().IndexType)
	case ast.KindConditionalType:
		return c.mayResolveTypeAlias(node.AsConditionalTypeNode().CheckType) || c.mayResolveTypeAlias(node.AsConditionalTypeNode().ExtendsType) || c.mayResolveTypeAlias(node.AsConditionalTypeNode().TrueType) || c.mayResolveTypeAlias(node.AsConditionalTypeNode().FalseType)
	}
	return false
}

func (c *Checker) getTypeFromArrayOrTupleTypeNode(node Union[ArrayTypeNode, TupleTypeNode]) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		target := c.getArrayOrTupleTargetType(node)
		if target == c.emptyGenericType {
			links.resolvedType = c.emptyObjectType
		} else if !(node.Kind == ast.KindTupleType && core.Some(node.Elements, func(e /* TODO(TS-TO-GO) inferred type TypeNode | NamedTupleMember */ any) bool {
			return c.getTupleElementFlags(e)&ElementFlagsVariadic != 0
		})) && c.isDeferredTypeReferenceNode(node) {
			if node.Kind == ast.KindTupleType && node.Elements.length == 0 {
				links.resolvedType = target
			} else {
				links.resolvedType = c.createDeferredTypeReference(target, node, nil /*mapper*/)
			}
		} else {
			var elementTypes []*Type
			if node.Kind == ast.KindArrayType {
				elementTypes = []*Type{c.getTypeFromTypeNode(node.ElementType)}
			} else {
				elementTypes = core.Map(node.Elements, c.getTypeFromTypeNode)
			}
			links.resolvedType = c.createNormalizedTypeReference(target, elementTypes)
		}
	}
	return links.resolvedType
}

func (c *Checker) isReadonlyTypeOperator(node *ast.Node) bool {
	return isTypeOperatorNode(node) && node.Operator == ast.KindReadonlyKeyword
}

func (c *Checker) createTupleType(elementTypes []*Type, elementFlags []ElementFlags, readonly bool /*  = false */, namedMemberDeclarations []Union[NamedTupleMember, ParameterDeclaration, undefined] /*  = [] */) *Type {
	tupleTarget := c.getTupleTargetType(elementFlags || core.Map(elementTypes, func(_ *Type) /* TODO(TS-TO-GO) inferred type ElementFlags.Required */ any {
		return ElementFlagsRequired
	}), readonly, namedMemberDeclarations)
	switch {
	case tupleTarget == c.emptyGenericType:
		return c.emptyObjectType
	case elementTypes.length != 0:
		return c.createNormalizedTypeReference(tupleTarget, elementTypes)
	default:
		return tupleTarget
	}
}

func (c *Checker) getTupleTargetType(elementFlags []ElementFlags, readonly bool, namedMemberDeclarations []Union[NamedTupleMember, ParameterDeclaration, undefined]) GenericType {
	if elementFlags.length == 1 && elementFlags[0]&ElementFlagsRest != 0 {
		// [...X[]] is equivalent to just X[]
		if readonly {
			return c.globalReadonlyArrayType
		} else {
			return c.globalArrayType
		}
	}
	key := core.Map(elementFlags, func(f ElementFlags) /* TODO(TS-TO-GO) inferred type "*" | "?" | "#" | "." */ any {
		switch {
		case f&ElementFlagsRequired != 0:
			return "#"
		case f&ElementFlagsOptional != 0:
			return "?"
		case f&ElementFlagsRest != 0:
			return "."
		default:
			return "*"
		}
	}).join() + (ifElse(readonly, "R", "")) + (ifElse(core.Some(namedMemberDeclarations, func(node * /* TODO(TS-TO-GO) inferred type ParameterDeclaration | NamedTupleMember */ any) bool {
		return node != nil
	}), ","+core.Map(namedMemberDeclarations, func(node * /* TODO(TS-TO-GO) inferred type ParameterDeclaration | NamedTupleMember */ any) /* TODO(TS-TO-GO) inferred type number | "_" */ any {
		if node != nil {
			return getNodeId(node)
		} else {
			return "_"
		}
	}).join(","), ""))
	t := c.tupleTypes.get(key)
	if !(t) {
		c.tupleTypes.set(key /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type = createTupleTargetType(elementFlags, readonly, namedMemberDeclarations) */, TODO)
	}
	return t
}

// We represent tuple types as type references to synthesized generic interface types created by
// this function. The types are of the form:
//
//	interface Tuple<T0, T1, T2, ...> extends Array<T0 | T1 | T2 | ...> { 0: T0, 1: T1, 2: T2, ... }
//
// Note that the generic type created by this function has no symbol associated with it. The same
// is true for each of the synthesized type parameters.
func (c *Checker) createTupleTargetType(elementFlags []ElementFlags, readonly bool, namedMemberDeclarations []Union[NamedTupleMember, ParameterDeclaration, undefined]) TupleType {
	arity := elementFlags.length
	minLength := core.CountWhere(elementFlags, func(f ElementFlags) bool {
		return f&(ElementFlagsRequired|ElementFlagsVariadic) != 0
	})
	var typeParameters *[]TypeParameter
	var properties []*ast.Symbol = []never{}
	combinedFlags := 0.(ElementFlags)
	if arity != 0 {
		typeParameters = NewArray(arity)
		for i := 0; i < arity; i++ {
			typeParameter := /* TODO(TS-TO-GO) EqualsToken BinaryExpression: typeParameters[i] = createTypeParameter() */ TODO
			flags := elementFlags[i]
			combinedFlags |= flags
			if combinedFlags&ElementFlagsVariable == 0 {
				property := c.createSymbol(ast.SymbolFlagsProperty|(ifElse(flags&ElementFlagsOptional != 0, ast.SymbolFlagsOptional, 0)), ""+i.(string), ifElse(readonly, ast.CheckFlagsReadonly, 0))
				property.Links.tupleLabelDeclaration = namedMemberDeclarations[i]
				property.Links.type_ = typeParameter
				properties.push(property)
			}
		}
	}
	fixedLength := properties.length
	lengthSymbol := c.createSymbol(ast.SymbolFlagsProperty, "length" /* as __String */, ifElse(readonly, ast.CheckFlagsReadonly, 0))
	if combinedFlags&ElementFlagsVariable != 0 {
		lengthSymbol.Links.type_ = c.numberType
	} else {
		literalTypes := []never{}
		for i := minLength; i <= arity; i++ {
			literalTypes.push(c.getNumberLiteralType(i))
		}
		lengthSymbol.Links.type_ = c.getUnionType(literalTypes)
	}
	properties.push(lengthSymbol)
	t := c.createObjectType(ObjectFlagsTuple | ObjectFlagsReference) /* as TupleType & InterfaceTypeWithDeclaredMembers */
	t.typeParameters = typeParameters
	t.outerTypeParameters = nil
	t.localTypeParameters = typeParameters
	t.instantiations = NewMap[string, TypeReference]()
	t.instantiations.set(c.getTypeListId(t.typeParameters), t.AsGenericType())
	t.target = t.AsGenericType()
	t.resolvedTypeArguments = t.typeParameters
	t.thisType = c.createTypeParameter()
	t.thisType.isThisType = true
	t.thisType.constraint = t
	t.declaredProperties = properties
	t.declaredCallSignatures = emptyArray
	t.declaredConstructSignatures = emptyArray
	t.declaredIndexInfos = emptyArray
	t.elementFlags = elementFlags
	t.minLength = minLength
	t.fixedLength = fixedLength
	t.hasRestElement = combinedFlags&ElementFlagsVariable != 0
	t.combinedFlags = combinedFlags
	t.readonly = readonly
	t.labeledElementDeclarations = namedMemberDeclarations
	return t
}

func (c *Checker) createNormalizedTypeReference(target GenericType, typeArguments *[]*Type) *Type {
	if target.objectFlags&ObjectFlagsTuple != 0 {
		return c.createNormalizedTupleType(target.AsTupleType(), typeArguments)
	} else {
		return c.createTypeReference(target, typeArguments)
	}
}

func (c *Checker) createNormalizedTupleType(target TupleType, elementTypes []*Type) *Type {
	if target.combinedFlags&ElementFlagsNonRequired == 0 {
		// No need to normalize when we only have regular required elements
		return c.createTypeReference(target, elementTypes)
	}
	if target.combinedFlags&ElementFlagsVariadic != 0 {
		// Transform [A, ...(X | Y | Z)] into [A, ...X] | [A, ...Y] | [A, ...Z]
		unionIndex := core.FindIndex(elementTypes, func(t *Type, i number) bool {
			return target.elementFlags[i]&ElementFlagsVariadic != 0 && t.flags&(TypeFlagsNever|TypeFlagsUnion) != 0
		})
		if unionIndex >= 0 {
			if c.checkCrossProductUnion(core.Map(elementTypes, func(t *Type, i number) *Type {
				if target.elementFlags[i]&ElementFlagsVariadic != 0 {
					return t
				} else {
					return c.unknownType
				}
			})) {
				return c.mapType(elementTypes[unionIndex], func(t *Type) *Type {
					return c.createNormalizedTupleType(target, core.ReplaceElement(elementTypes, unionIndex, t))
				})
			} else {
				return c.errorType
			}
		}
	}
	// We have optional, rest, or variadic elements that may need normalizing. Normalization ensures that all variadic
	// elements are generic and that the tuple type has one of the following layouts, disregarding variadic elements:
	// (1) Zero or more required elements, followed by zero or more optional elements, followed by zero or one rest element.
	// (2) Zero or more required elements, followed by a rest element, followed by zero or more required elements.
	// In either layout, zero or more generic variadic elements may be present at any location.
	var expandedTypes []*Type = []never{}
	var expandedFlags []ElementFlags = []never{}
	var expandedDeclarations []Union[NamedTupleMember, ParameterDeclaration, undefined] = []never{}
	lastRequiredIndex := -1
	firstRestIndex := -1
	lastOptionalOrRestIndex := -1
	for i := 0; i < elementTypes.length; i++ {
		type_ := elementTypes[i]
		flags := target.elementFlags[i]
		if flags&ElementFlagsVariadic != 0 {
			if type_.flags&TypeFlagsAny != 0 {
				addElement(type_, ElementFlagsRest, target.labeledElementDeclarations[i])
			} else if type_.flags&TypeFlagsInstantiableNonPrimitive != 0 || c.isGenericMappedType(type_) {
				// Generic variadic elements stay as they are.
				addElement(type_, ElementFlagsVariadic, target.labeledElementDeclarations[i])
			} else if c.isTupleType(type_) {
				elements := c.getElementTypes(type_)
				if elements.length+expandedTypes.length >= 10_000 {
					c.error(c.currentNode, ifElse(isPartOfTypeNode(c.currentNode), Diagnostics.Type_produces_a_tuple_type_that_is_too_large_to_represent, Diagnostics.Expression_produces_a_tuple_type_that_is_too_large_to_represent))
					return c.errorType
				}
				// Spread variadic elements with tuple types into the resulting tuple.
				forEach(elements, func(t *Type, n number) {
					return addElement(t, type_.target.elementFlags[n], type_.target.labeledElementDeclarations[n])
				})
			} else {
				// Treat everything else as an array type and create a rest element.
				addElement(c.isArrayLikeType(type_) && c.getIndexTypeOfType(type_, c.numberType) || c.errorType, ElementFlagsRest, target.labeledElementDeclarations[i])
			}
		} else {
			// Copy other element kinds with no change.
			addElement(type_, flags, target.labeledElementDeclarations[i])
		}
	}
	// Turn optional elements preceding the last required element into required elements
	for i := 0; i < lastRequiredIndex; i++ {
		if expandedFlags[i]&ElementFlagsOptional != 0 {
			expandedFlags[i] = ElementFlagsRequired
		}
	}
	if firstRestIndex >= 0 && firstRestIndex < lastOptionalOrRestIndex {
		// Turn elements between first rest and last optional/rest into a single rest element
		expandedTypes[firstRestIndex] = c.getUnionType(core.SameMap(expandedTypes.slice(firstRestIndex, lastOptionalOrRestIndex+1), func(t *Type, i number) *Type {
			if expandedFlags[firstRestIndex+i]&ElementFlagsVariadic != 0 {
				return c.getIndexedAccessType(t, c.numberType)
			} else {
				return t
			}
		}))
		expandedTypes.splice(firstRestIndex+1, lastOptionalOrRestIndex-firstRestIndex)
		expandedFlags.splice(firstRestIndex+1, lastOptionalOrRestIndex-firstRestIndex)
		expandedDeclarations.splice(firstRestIndex+1, lastOptionalOrRestIndex-firstRestIndex)
	}
	tupleTarget := c.getTupleTargetType(expandedFlags, target.readonly, expandedDeclarations)
	switch {
	case tupleTarget == c.emptyGenericType:
		return c.emptyObjectType
	case expandedFlags.length != 0:
		return c.createTypeReference(tupleTarget, expandedTypes)
	default:
		return tupleTarget
	}

	addElement := func(t *Type, flags ElementFlags, declaration Union[NamedTupleMember, ParameterDeclaration, undefined]) {
		if flags&ElementFlagsRequired != 0 {
			lastRequiredIndex = expandedFlags.length
		}
		if flags&ElementFlagsRest != 0 && firstRestIndex < 0 {
			firstRestIndex = expandedFlags.length
		}
		if flags&(ElementFlagsOptional|ElementFlagsRest) != 0 {
			lastOptionalOrRestIndex = expandedFlags.length
		}
		expandedTypes.push(ifElse(flags&ElementFlagsOptional != 0, c.addOptionality(t, true /*isProperty*/), t))
		expandedFlags.push(flags)
		expandedDeclarations.push(declaration)
	}

}

func (c *Checker) sliceTupleType(t TupleTypeReference, index number, endSkipCount number /*  = 0 */) *Type {
	target := t.target
	endIndex := c.getTypeReferenceArity(t) - endSkipCount
	if index > target.fixedLength {
		return c.getRestArrayTypeOfTupleType(t) || c.createTupleType(emptyArray)
	} else {
		return c.createTupleType(c.getTypeArguments(t).slice(index, endIndex), target.elementFlags.slice(index, endIndex), false /*readonly*/, target.labeledElementDeclarations && target.labeledElementDeclarations.slice(index, endIndex))
	}
}

func (c *Checker) getKnownKeysOfTupleType(t TupleTypeReference) *Type {
	return c.getUnionType(append(arrayOf(t.target.fixedLength, func(i number) StringLiteralType {
		return c.getStringLiteralType("" + i)
	}), c.getIndexType(ifElse(t.target.readonly, c.globalReadonlyArrayType, c.globalArrayType))))
}

// Return count of starting consecutive tuple elements of the given kind(s)
func (c *Checker) getStartElementCount(t TupleType, flags ElementFlags) number {
	index := core.FindIndex(t.elementFlags, func(f ElementFlags) bool {
		return f&flags == 0
	})
	if index >= 0 {
		return index
	} else {
		return t.elementFlags.length
	}
}

// Return count of ending consecutive tuple elements of the given kind(s)
func (c *Checker) getEndElementCount(t TupleType, flags ElementFlags) number {
	return t.elementFlags.length - core.FindLastIndex(t.elementFlags, func(f ElementFlags) bool {
		return f&flags == 0
	}) - 1
}

func (c *Checker) getTotalFixedElementCount(t TupleType) number {
	return t.fixedLength + c.getEndElementCount(t, ElementFlagsFixed)
}

func (c *Checker) getElementTypes(t TupleTypeReference) []*Type {
	typeArguments := c.getTypeArguments(t)
	arity := c.getTypeReferenceArity(t)
	if typeArguments.length == arity {
		return typeArguments
	} else {
		return typeArguments.slice(0, arity)
	}
}

func (c *Checker) getTypeFromOptionalTypeNode(node OptionalTypeNode) *Type {
	return c.addOptionality(c.getTypeFromTypeNode(node.Type_), true /*isProperty*/)
}

func (c *Checker) getTypeId(t *Type) TypeId {
	return t.id
}

func (c *Checker) containsType(types []*Type, t *Type) bool {
	return binarySearch(types, t, c.getTypeId, compareValues) >= 0
}

func (c *Checker) insertType(types []*Type, t *Type) bool {
	index := binarySearch(types, t, c.getTypeId, compareValues)
	if index < 0 {
		types.splice(^index, 0, t)
		return true
	}
	return false
}

func (c *Checker) addTypeToUnion(typeSet []*Type, includes TypeFlags, t *Type) TypeFlags {
	flags := t.flags
	// We ignore 'never' types in unions
	if flags&TypeFlagsNever == 0 {
		includes |= flags & TypeFlagsIncludesMask
		if flags&TypeFlagsInstantiable != 0 {
			includes |= TypeFlagsIncludesInstantiable
		}
		if flags&TypeFlagsIntersection != 0 && getObjectFlags(t)&ObjectFlagsIsConstrainedTypeVariable != 0 {
			includes |= TypeFlagsIncludesConstrainedTypeVariable
		}
		if t == c.wildcardType {
			includes |= TypeFlagsIncludesWildcard
		}
		if c.isErrorType(t) {
			includes |= TypeFlagsIncludesError
		}
		if !c.strictNullChecks && flags&TypeFlagsNullable != 0 {
			if getObjectFlags(t)&ObjectFlagsContainsWideningType == 0 {
				includes |= TypeFlagsIncludesNonWideningType
			}
		} else {
			len := typeSet.length
			var index number
			if len != 0 && t.id > typeSet[len-1].id {
				index = ^len
			} else {
				index = binarySearch(typeSet, t, c.getTypeId, compareValues)
			}
			if index < 0 {
				typeSet.splice(^index, 0, t)
			}
		}
	}
	return includes
}

// Add the given types to the given type set. Order is preserved, duplicates are removed,
// and nested types of the given kind are flattened into the set.
func (c *Checker) addTypesToUnion(typeSet []*Type, includes TypeFlags, types []*Type) TypeFlags {
	var lastType *Type
	for _, t := range types {
		// We skip the type if it is the same as the last type we processed. This simple test particularly
		// saves a lot of work for large lists of the same union type, such as when resolving `Record<A, B>[A]`,
		// where A and B are large union types.
		if t != lastType {
			if t.flags&TypeFlagsUnion != 0 {
				includes = c.addTypesToUnion(typeSet, includes|(ifElse(c.isNamedUnionType(t), TypeFlagsUnion, 0)), t.AsUnionType().types)
			} else {
				includes = c.addTypeToUnion(typeSet, includes, t)
			}
			lastType = t
		}
	}
	return includes
}

func (c *Checker) removeSubtypes(types []*Type, hasObjectTypes bool) *[]*Type {
	// [] and [T] immediately reduce to [] and [T] respectively
	if types.length < 2 {
		return types
	}

	id := c.getTypeListId(types)
	match := c.subtypeReductionCache.get(id)
	if match != nil {
		return match
	}

	// We assume that redundant primitive types have already been removed from the types array and that there
	// are no any and unknown types in the array. Thus, the only possible supertypes for primitive types are empty
	// object types, and if none of those are present we can exclude primitive types from the subtype check.
	hasEmptyObject := hasObjectTypes && core.Some(types, func(t *Type) bool {
		return t.flags&TypeFlagsObject != 0 && !c.isGenericMappedType(t) && c.isEmptyResolvedType(c.resolveStructuredTypeMembers(t.AsObjectType()))
	})
	len := types.length
	i := len
	count := 0
	for i > 0 {
		i--
		source := types[i]
		if hasEmptyObject || source.flags&TypeFlagsStructuredOrInstantiable != 0 {
			// A type parameter with a union constraint may be a subtype of some union, but not a subtype of the
			// individual constituents of that union. For example, `T extends A | B` is a subtype of `A | B`, but not
			// a subtype of just `A` or just `B`. When we encounter such a type parameter, we therefore check if the
			// type parameter is a subtype of a union of all the other types.
			if source.flags&TypeFlagsTypeParameter != 0 && c.getBaseConstraintOrType(source).flags&TypeFlagsUnion != 0 {
				if c.isTypeRelatedTo(source, c.getUnionType(core.Map(types, func(t *Type) *Type {
					if t == source {
						return c.neverType
					} else {
						return t
					}
				})), c.strictSubtypeRelation) {
					orderedRemoveItemAt(types, i)
				}
				continue
			}
			// Find the first property with a unit type, if any. When constituents have a property by the same name
			// but of a different unit type, we can quickly disqualify them from subtype checks. This helps subtype
			// reduction of large discriminated union types.
			var keyProperty *ast.Symbol
			if source.flags&(TypeFlagsObject|TypeFlagsIntersection|TypeFlagsInstantiableNonPrimitive) != 0 {
				keyProperty = core.Find(c.getPropertiesOfType(source), func(p *ast.Symbol) bool {
					return c.isUnitType(c.getTypeOfSymbol(p))
				})
			} else {
				keyProperty = nil
			}
			keyPropertyType := keyProperty && c.getRegularTypeOfLiteralType(c.getTypeOfSymbol(keyProperty))
			for _, target := range types {
				if source != target {
					if count == 100000 {
						// After 100000 subtype checks we estimate the remaining amount of work by assuming the
						// same ratio of checks per element. If the estimated number of remaining type checks is
						// greater than 1M we deem the union type too complex to represent. This for example
						// caps union types at 1000 unique object types.
						estimatedCount := (count / (len - i)) * len
						if estimatedCount > 1000000 {
							tracing. /* ? */ instant(tracing.Phase.CheckTypes, "removeSubtypes_DepthLimit", &Args{
								typeIds: types.map_(func(t *Type) number {
									return t.id
								}),
							})
							c.error(c.currentNode, Diagnostics.Expression_produces_a_union_type_that_is_too_complex_to_represent)
							return nil
						}
					}
					count++
					if keyProperty != nil && target.flags&(TypeFlagsObject|TypeFlagsIntersection|TypeFlagsInstantiableNonPrimitive) != 0 {
						t := c.getTypeOfPropertyOfType(target, keyProperty.EscapedName)
						if t != nil && c.isUnitType(t) && c.getRegularTypeOfLiteralType(t) != keyPropertyType {
							continue
						}
					}
					if c.isTypeRelatedTo(source, target, c.strictSubtypeRelation) && (getObjectFlags(c.getTargetType(source))&ObjectFlagsClass == 0 || getObjectFlags(c.getTargetType(target))&ObjectFlagsClass == 0 || c.isTypeDerivedFrom(source, target)) {
						orderedRemoveItemAt(types, i)
						break
					}
				}
			}
		}
	}
	c.subtypeReductionCache.set(id, types)
	return types
}

func (c *Checker) removeRedundantLiteralTypes(types []*Type, includes TypeFlags, reduceVoidUndefined bool) {
	i := types.length
	for i > 0 {
		i--
		t := types[i]
		flags := t.flags
		remove := flags&(TypeFlagsStringLiteral|TypeFlagsTemplateLiteral|TypeFlagsStringMapping) && includes&TypeFlagsString || flags&TypeFlagsNumberLiteral && includes&TypeFlagsNumber || flags&TypeFlagsBigIntLiteral && includes&TypeFlagsBigInt || flags&TypeFlagsUniqueESSymbol && includes&TypeFlagsESSymbol || reduceVoidUndefined && flags&TypeFlagsUndefined && includes&TypeFlagsVoid || c.isFreshLiteralType(t) && c.containsType(types, t.AsLiteralType().regularType)
		if remove {
			orderedRemoveItemAt(types, i)
		}
	}
}

func (c *Checker) removeStringLiteralsMatchedByTemplateLiterals(types []*Type) {
	templates := core.Filter(types, c.isPatternLiteralType) /* as (TemplateLiteralType | StringMappingType)[] */
	if templates.length != 0 {
		i := types.length
		for i > 0 {
			i--
			t := types[i]
			if t.flags&TypeFlagsStringLiteral != 0 && core.Some(templates, func(template /* TODO(TS-TO-GO) inferred type TemplateLiteralType | StringMappingType */ any) bool {
				return c.isTypeMatchedByTemplateLiteralOrStringMapping(t, template)
			}) {
				orderedRemoveItemAt(types, i)
			}
		}
	}
}

func (c *Checker) isTypeMatchedByTemplateLiteralOrStringMapping(t *Type, template Union[TemplateLiteralType, StringMappingType]) bool {
	if template.flags&TypeFlagsTemplateLiteral != 0 {
		return c.isTypeMatchedByTemplateLiteralType(t, template.AsTemplateLiteralType())
	} else {
		return c.isMemberOfStringMapping(t, template)
	}
}

func (c *Checker) removeConstrainedTypeVariables(types []*Type) {
	var typeVariables []TypeVariable = []never{}
	// First collect a list of the type variables occurring in constraining intersections.
	for _, t := range types {
		if t.flags&TypeFlagsIntersection != 0 && getObjectFlags(t)&ObjectFlagsIsConstrainedTypeVariable != 0 {
			var index /* TODO(TS-TO-GO) inferred type 0 | 1 */ any
			if t.AsIntersectionType().types[0].flags&TypeFlagsTypeVariable != 0 {
				index = 0
			} else {
				index = 1
			}
			pushIfUnique(typeVariables, t.AsIntersectionType().types[index])
		}
	}
	// For each type variable, check if the constraining intersections for that type variable fully
	// cover the constraint of the type variable; if so, remove the constraining intersections and
	// substitute the type variable.
	for _, typeVariable := range typeVariables {
		var primitives []*Type = []never{}
		// First collect the primitive types from the constraining intersections.
		for _, t := range types {
			if t.flags&TypeFlagsIntersection != 0 && getObjectFlags(t)&ObjectFlagsIsConstrainedTypeVariable != 0 {
				var index /* TODO(TS-TO-GO) inferred type 0 | 1 */ any
				if t.AsIntersectionType().types[0].flags&TypeFlagsTypeVariable != 0 {
					index = 0
				} else {
					index = 1
				}
				if t.AsIntersectionType().types[index] == typeVariable {
					c.insertType(primitives, t.AsIntersectionType().types[1-index])
				}
			}
		}
		// If every constituent in the type variable's constraint is covered by an intersection of the type
		// variable and that constituent, remove those intersections and substitute the type variable.
		constraint := c.getBaseConstraintOfType(typeVariable)
		if c.everyType(constraint, func(t *Type) bool {
			return c.containsType(primitives, t)
		}) {
			i := types.length
			for i > 0 {
				i--
				t := types[i]
				if t.flags&TypeFlagsIntersection != 0 && getObjectFlags(t)&ObjectFlagsIsConstrainedTypeVariable != 0 {
					var index /* TODO(TS-TO-GO) inferred type 0 | 1 */ any
					if t.AsIntersectionType().types[0].flags&TypeFlagsTypeVariable != 0 {
						index = 0
					} else {
						index = 1
					}
					if t.AsIntersectionType().types[index] == typeVariable && c.containsType(primitives, t.AsIntersectionType().types[1-index]) {
						orderedRemoveItemAt(types, i)
					}
				}
			}
			c.insertType(types, typeVariable)
		}
	}
}

func (c *Checker) isNamedUnionType(t *Type) bool {
	return t.flags&TypeFlagsUnion != 0 && (t.aliasSymbol != nil || t.AsUnionType().origin != nil)
}

func (c *Checker) addNamedUnions(namedUnions []*Type, types []*Type) {
	for _, t := range types {
		if t.flags&TypeFlagsUnion != 0 {
			origin := t.AsUnionType().origin
			if t.aliasSymbol != nil || origin != nil && origin.flags&TypeFlagsUnion == 0 {
				pushIfUnique(namedUnions, t)
			} else if origin != nil && origin.flags&TypeFlagsUnion != 0 {
				c.addNamedUnions(namedUnions, origin.AsUnionType().types)
			}
		}
	}
}

func (c *Checker) createOriginUnionOrIntersectionType(flags TypeFlags, types []*Type) UnionOrIntersectionType {
	result := c.createOriginType(flags).AsUnionOrIntersectionType()
	result.types = types
	return result
}

// We sort and deduplicate the constituent types based on object identity. If the subtypeReduction
// flag is specified we also reduce the constituent type set to only include types that aren't subtypes
// of other types. Subtype reduction is expensive for large union types and is possible only when union
// types are known not to circularly reference themselves (as is the case with union types created by
// expression constructs such as array literals and the || and ?: operators). Named types can
// circularly reference themselves and therefore cannot be subtype reduced during their declaration.
// For example, "type Item = string | (() => Item" is a named type that circularly references itself.
func (c *Checker) getUnionType(types []*Type, unionReduction UnionReduction /*  = UnionReduction.Literal */, aliasSymbol *ast.Symbol, aliasTypeArguments []*Type, origin *Type) *Type {
	if types.length == 0 {
		return c.neverType
	}
	if types.length == 1 {
		return types[0]
	}
	// We optimize for the common case of unioning a union type with some other type (such as `undefined`).
	if types.length == 2 && origin == nil && (types[0].flags&TypeFlagsUnion != 0 || types[1].flags&TypeFlagsUnion != 0) {
		var infix /* TODO(TS-TO-GO) inferred type "N" | "S" | "L" */ any
		switch {
		case unionReduction == UnionReductionNone:
			infix = "N"
		case unionReduction == UnionReductionSubtype:
			infix = "S"
		default:
			infix = "L"
		}
		var index /* TODO(TS-TO-GO) inferred type 0 | 1 */ any
		if types[0].id < types[1].id {
			index = 0
		} else {
			index = 1
		}
		id := types[index].id + infix + types[1-index].id + c.getAliasId(aliasSymbol, aliasTypeArguments)
		t := c.unionOfUnionTypes.get(id)
		if !(t) {
			t = c.getUnionTypeWorker(types, unionReduction, aliasSymbol, aliasTypeArguments, nil /*origin*/)
			c.unionOfUnionTypes.set(id, t)
		}
		return t
	}
	return c.getUnionTypeWorker(types, unionReduction, aliasSymbol, aliasTypeArguments, origin)
}

func (c *Checker) getUnionTypeWorker(types []*Type, unionReduction UnionReduction, aliasSymbol *ast.Symbol, aliasTypeArguments *[]*Type, origin *Type) *Type {
	var typeSet *[]*Type = []never{}
	includes := c.addTypesToUnion(typeSet, 0.(TypeFlags), types)
	if unionReduction != UnionReductionNone {
		if includes&TypeFlagsAnyOrUnknown != 0 {
			switch {
			case includes&TypeFlagsAny != 0:
				switch {
				case includes&TypeFlagsIncludesWildcard != 0:
					return c.wildcardType
				case includes&TypeFlagsIncludesError != 0:
					return c.errorType
				default:
					return c.anyType
				}
			default:
				return c.unknownType
			}
		}
		if includes&TypeFlagsUndefined != 0 {
			// If type set contains both undefinedType and missingType, remove missingType
			if typeSet.length >= 2 && typeSet[0] == c.undefinedType && typeSet[1] == c.missingType {
				orderedRemoveItemAt(typeSet, 1)
			}
		}
		if includes&(TypeFlagsEnum|TypeFlagsLiteral|TypeFlagsUniqueESSymbol|TypeFlagsTemplateLiteral|TypeFlagsStringMapping) != 0 || includes&TypeFlagsVoid != 0 && includes&TypeFlagsUndefined != 0 {
			c.removeRedundantLiteralTypes(typeSet, includes, unionReduction&UnionReductionSubtype != 0)
		}
		if includes&TypeFlagsStringLiteral != 0 && includes&(TypeFlagsTemplateLiteral|TypeFlagsStringMapping) != 0 {
			c.removeStringLiteralsMatchedByTemplateLiterals(typeSet)
		}
		if includes&TypeFlagsIncludesConstrainedTypeVariable != 0 {
			c.removeConstrainedTypeVariables(typeSet)
		}
		if unionReduction == UnionReductionSubtype {
			typeSet = c.removeSubtypes(typeSet, includes&TypeFlagsObject != 0)
			if typeSet == nil {
				return c.errorType
			}
		}
		if typeSet.length == 0 {
			switch {
			case includes&TypeFlagsNull != 0:
				if includes&TypeFlagsIncludesNonWideningType != 0 {
					return c.nullType
				} else {
					return c.nullWideningType
				}
			case includes&TypeFlagsUndefined != 0:
				if includes&TypeFlagsIncludesNonWideningType != 0 {
					return c.undefinedType
				} else {
					return c.undefinedWideningType
				}
			default:
				return c.neverType
			}
		}
	}
	if origin == nil && includes&TypeFlagsUnion != 0 {
		var namedUnions []*Type = []never{}
		c.addNamedUnions(namedUnions, types)
		var reducedTypes []*Type = []never{}
		for _, t := range typeSet {
			if !core.Some(namedUnions, func(union *Type) bool {
				return c.containsType(union.AsUnionType().types, t)
			}) {
				reducedTypes.push(t)
			}
		}
		if aliasSymbol == nil && namedUnions.length == 1 && reducedTypes.length == 0 {
			return namedUnions[0]
		}
		// We create a denormalized origin type only when the union was created from one or more named unions
		// (unions with alias symbols or origins) and when there is no overlap between those named unions.
		namedTypesCount := reduceLeft(namedUnions, func(sum number, union *Type) number {
			return sum + union.AsUnionType().types.length
		}, 0)
		if namedTypesCount+reducedTypes.length == typeSet.length {
			for _, t := range namedUnions {
				c.insertType(reducedTypes, t)
			}
			origin = c.createOriginUnionOrIntersectionType(TypeFlagsUnion, reducedTypes)
		}
	}
	objectFlags := (ifElse(includes&TypeFlagsNotPrimitiveUnion != 0, 0, ObjectFlagsPrimitiveUnion)) | (ifElse(includes&TypeFlagsIntersection != 0, ObjectFlagsContainsIntersections, 0))
	return c.getUnionTypeFromSortedList(typeSet, objectFlags, aliasSymbol, aliasTypeArguments, origin)
}

func (c *Checker) getUnionOrIntersectionTypePredicate(signatures []Signature, kind *TypeFlags) *TypePredicate {
	var last *TypePredicate
	var types []*Type = []never{}
	for _, sig := range signatures {
		pred := c.getTypePredicateOfSignature(sig)
		if pred != nil {
			// Constituent type predicates must all have matching kinds. We don't create composite type predicates for assertions.
			if pred.kind != TypePredicateKindThis && pred.kind != TypePredicateKindIdentifier || last != nil && !c.typePredicateKindsMatch(last, pred) {
				return nil
			}
			last = pred
			types.push(pred.type_)
		} else {
			// In composite union signatures we permit and ignore signatures with a return type `false`.
			var returnType *Type
			if kind != TypeFlagsIntersection {
				returnType = c.getReturnTypeOfSignature(sig)
			} else {
				returnType = nil
			}
			if returnType != c.falseType && returnType != c.regularFalseType {
				return nil
			}
		}
	}
	if last == nil {
		return nil
	}
	compositeType := c.getUnionOrIntersectionType(types, kind)
	return c.createTypePredicate(last.kind, last.parameterName, last.parameterIndex, compositeType)
}

func (c *Checker) typePredicateKindsMatch(a TypePredicate, b TypePredicate) bool {
	return a.kind == b.kind && a.parameterIndex == b.parameterIndex
}

// This function assumes the constituent type list is sorted and deduplicated.
func (c *Checker) getUnionTypeFromSortedList(types []*Type, precomputedObjectFlags ObjectFlags, aliasSymbol *ast.Symbol, aliasTypeArguments []*Type, origin *Type) *Type {
	if types.length == 0 {
		return c.neverType
	}
	if types.length == 1 {
		return types[0]
	}
	var typeKey string
	switch {
	case origin == nil:
		typeKey = c.getTypeListId(types)
	case origin.flags&TypeFlagsUnion != 0:
		typeKey = __TEMPLATE__("|", c.getTypeListId(origin.AsUnionType().types))
	case origin.flags&TypeFlagsIntersection != 0:
		typeKey = __TEMPLATE__("&", c.getTypeListId(origin.AsIntersectionType().types))
	default:
		typeKey = __TEMPLATE__("#", origin.AsIndexType().type_.id, "|", c.getTypeListId(types))
	}
	// origin type id alone is insufficient, as `keyof x` may resolve to multiple WIP values while `x` is still resolving
	id := typeKey + c.getAliasId(aliasSymbol, aliasTypeArguments)
	t := c.unionTypes.get(id)
	if !(t) {
		t = c.createType(TypeFlagsUnion).AsUnionType()
		t.objectFlags = precomputedObjectFlags | c.getPropagatingFlagsOfTypes(types, TypeFlagsNullable /*excludeKinds*/)
		t.types = types
		t.origin = origin
		t.aliasSymbol = aliasSymbol
		t.aliasTypeArguments = aliasTypeArguments
		if types.length == 2 && types[0].flags&TypeFlagsBooleanLiteral != 0 && types[1].flags&TypeFlagsBooleanLiteral != 0 {
			t.flags |= TypeFlagsBoolean
			(t /* as UnionType & IntrinsicType */).intrinsicName = "boolean"
		}
		c.unionTypes.set(id, t)
	}
	return t
}

func (c *Checker) getTypeFromUnionTypeNode(node UnionTypeNode) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		aliasSymbol := c.getAliasSymbolForTypeNode(node)
		links.resolvedType = c.getUnionType(core.Map(node.Types, c.getTypeFromTypeNode), UnionReductionLiteral, aliasSymbol, c.getTypeArgumentsForAliasSymbol(aliasSymbol))
	}
	return links.resolvedType
}

func (c *Checker) addTypeToIntersection(typeSet Map[string, *Type], includes TypeFlags, t *Type) TypeFlags {
	flags := t.flags
	if flags&TypeFlagsIntersection != 0 {
		return c.addTypesToIntersection(typeSet, includes, t.AsIntersectionType().types)
	}
	if c.isEmptyAnonymousObjectType(t) {
		if includes&TypeFlagsIncludesEmptyObject == 0 {
			includes |= TypeFlagsIncludesEmptyObject
			typeSet.set(t.id.toString(), t)
		}
	} else {
		if flags&TypeFlagsAnyOrUnknown != 0 {
			if t == c.wildcardType {
				includes |= TypeFlagsIncludesWildcard
			}
			if c.isErrorType(t) {
				includes |= TypeFlagsIncludesError
			}
		} else if c.strictNullChecks || flags&TypeFlagsNullable == 0 {
			if t == c.missingType {
				includes |= TypeFlagsIncludesMissingType
				t = c.undefinedType
			}
			if !typeSet.has(t.id.toString()) {
				if t.flags&TypeFlagsUnit != 0 && includes&TypeFlagsUnit != 0 {
					// We have seen two distinct unit types which means we should reduce to an
					// empty intersection. Adding TypeFlags.NonPrimitive causes that to happen.
					includes |= TypeFlagsNonPrimitive
				}
				typeSet.set(t.id.toString(), t)
			}
		}
		includes |= flags & TypeFlagsIncludesMask
	}
	return includes
}

// Add the given types to the given type set. Order is preserved, freshness is removed from literal
// types, duplicates are removed, and nested types of the given kind are flattened into the set.
func (c *Checker) addTypesToIntersection(typeSet Map[string, *Type], includes TypeFlags, types []*Type) TypeFlags {
	for _, t := range types {
		includes = c.addTypeToIntersection(typeSet, includes, c.getRegularTypeOfLiteralType(t))
	}
	return includes
}

func (c *Checker) removeRedundantSupertypes(types []*Type, includes TypeFlags) {
	i := types.length
	for i > 0 {
		i--
		t := types[i]
		remove := t.flags&TypeFlagsString && includes&(TypeFlagsStringLiteral|TypeFlagsTemplateLiteral|TypeFlagsStringMapping) || t.flags&TypeFlagsNumber && includes&TypeFlagsNumberLiteral || t.flags&TypeFlagsBigInt && includes&TypeFlagsBigIntLiteral || t.flags&TypeFlagsESSymbol && includes&TypeFlagsUniqueESSymbol || t.flags&TypeFlagsVoid && includes&TypeFlagsUndefined || c.isEmptyAnonymousObjectType(t) && includes&TypeFlagsDefinitelyNonNullable
		if remove {
			orderedRemoveItemAt(types, i)
		}
	}
}

// Check that the given type has a match in every union. A given type is matched by
// an identical type, and a literal type is additionally matched by its corresponding
// primitive type, and missingType is matched by undefinedType (and vice versa).
func (c *Checker) eachUnionContains(unionTypes []UnionType, t *Type) bool {
	for _, u := range c.unionTypes {
		if !c.containsType(u.types, t) {
			if t == c.missingType {
				return c.containsType(u.types, c.undefinedType)
			}
			if t == c.undefinedType {
				return c.containsType(u.types, c.missingType)
			}
			var primitive *IntrinsicType
			switch {
			case t.flags&TypeFlagsStringLiteral != 0:
				primitive = c.stringType
			case t.flags&(TypeFlagsEnum|TypeFlagsNumberLiteral) != 0:
				primitive = c.numberType
			case t.flags&TypeFlagsBigIntLiteral != 0:
				primitive = c.bigintType
			case t.flags&TypeFlagsUniqueESSymbol != 0:
				primitive = c.esSymbolType
			default:
				primitive = nil
			}
			if primitive == nil || !c.containsType(u.types, primitive) {
				return false
			}
		}
	}
	return true
}

/**
 * Returns true if the intersection of the template literals and string literals is the empty set,
 * for example `get${string}` & "setX", and should reduce to never.
 */

func (c *Checker) extractRedundantTemplateLiterals(types []*Type) bool {
	i := types.length
	literals := core.Filter(types, func(t *Type) bool {
		return t.flags&TypeFlagsStringLiteral != 0
	})
	for i > 0 {
		i--
		t := types[i]
		if t.flags&(TypeFlagsTemplateLiteral|TypeFlagsStringMapping) == 0 {
			continue
		}
		for _, t2 := range literals {
			if c.isTypeSubtypeOf(t2, t) {
				// For example, `get${T}` & "getX" is just "getX", and Lowercase<string> & "foo" is just "foo"
				orderedRemoveItemAt(types, i)
				break
			} else if c.isPatternLiteralType(t) {
				return true
			}
		}
	}
	return false
}

func (c *Checker) removeFromEach(types []*Type, flag TypeFlags) {
	for i := 0; i < types.length; i++ {
		types[i] = c.filterType(types[i], func(t *Type) bool {
			return t.flags&flag == 0
		})
	}
}

// If the given list of types contains more than one union of primitive types, replace the
// first with a union containing an intersection of those primitive types, then remove the
// other unions and return true. Otherwise, do nothing and return false.
func (c *Checker) intersectUnionsOfPrimitiveTypes(types []*Type) bool {
	var unionTypes *[]UnionType
	index := core.FindIndex(types, func(t *Type) bool {
		return getObjectFlags(t)&ObjectFlagsPrimitiveUnion != 0
	})
	if index < 0 {
		return false
	}
	i := index + 1
	// Remove all but the first union of primitive types and collect them in
	// the unionTypes array.
	for i < types.length {
		t := types[i]
		if getObjectFlags(t)&ObjectFlagsPrimitiveUnion != 0 {
			(unionTypes || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: unionTypes = [types[index] as UnionType] */ TODO)).push(t.AsUnionType())
			orderedRemoveItemAt(types, i)
		} else {
			i++
		}
	}
	// Return false if there was only one union of primitive types
	if unionTypes == nil {
		return false
	}
	// We have more than one union of primitive types, now intersect them. For each
	// type in each union we check if the type is matched in every union and if so
	// we include it in the result.
	var checked []*Type = []never{}
	var result []*Type = []never{}
	for _, u := range unionTypes {
		for _, t := range u.types {
			if c.insertType(checked, t) {
				if c.eachUnionContains(unionTypes, t) {
					// undefinedType/missingType should always come sorted first so we leverage that here
					if t == c.undefinedType && result.length != 0 && result[0] == c.missingType {
						continue
					}
					if t == c.missingType && result.length != 0 && result[0] == c.undefinedType {
						result[0] = c.missingType
						continue
					}
					c.insertType(result, t)
				}
			}
		}
	}
	// Finally replace the first union with the result
	types[index] = c.getUnionTypeFromSortedList(result, ObjectFlagsPrimitiveUnion)
	return true
}

func (c *Checker) createIntersectionType(types []*Type, objectFlags ObjectFlags, aliasSymbol *ast.Symbol, aliasTypeArguments []*Type) IntersectionType {
	result := c.createType(TypeFlagsIntersection).AsIntersectionType()
	result.objectFlags = objectFlags | c.getPropagatingFlagsOfTypes(types, TypeFlagsNullable /*excludeKinds*/)
	result.types = types
	result.aliasSymbol = aliasSymbol
	result.aliasTypeArguments = aliasTypeArguments
	return result
}

// We normalize combinations of intersection and union types based on the distributive property of the '&'
// operator. Specifically, because X & (A | B) is equivalent to X & A | X & B, we can transform intersection
// types with union type constituents into equivalent union types with intersection type constituents and
// effectively ensure that union types are always at the top level in type representations.
//
// We do not perform structural deduplication on intersection types. Intersection types are created only by the &
// type operator and we can't reduce those because we want to support recursive intersection types. For example,
// a type alias of the form "type List<T> = T & { next: List<T> }" cannot be reduced during its declaration.
// Also, unlike union types, the order of the constituent types is preserved in order that overload resolution
// for intersections of types with signatures can be deterministic.
func (c *Checker) getIntersectionType(types []*Type, flags IntersectionFlags /*  = IntersectionFlags.None */, aliasSymbol *ast.Symbol, aliasTypeArguments []*Type) *Type {
	typeMembershipMap := NewMap[string, *Type]()
	includes := c.addTypesToIntersection(typeMembershipMap, 0.(TypeFlags), types)
	var typeSet []*Type = arrayFrom(typeMembershipMap.values())
	objectFlags := ObjectFlagsNone
	// An intersection type is considered empty if it contains
	// the type never, or
	// more than one unit type or,
	// an object type and a nullable type (null or undefined), or
	// a string-like type and a type known to be non-string-like, or
	// a number-like type and a type known to be non-number-like, or
	// a symbol-like type and a type known to be non-symbol-like, or
	// a void-like type and a type known to be non-void-like, or
	// a non-primitive type and a type known to be primitive.
	if includes&TypeFlagsNever != 0 {
		if contains(typeSet, c.silentNeverType) {
			return c.silentNeverType
		} else {
			return c.neverType
		}
	}
	if c.strictNullChecks && includes&TypeFlagsNullable != 0 && includes&(TypeFlagsObject|TypeFlagsNonPrimitive|TypeFlagsIncludesEmptyObject) != 0 || includes&TypeFlagsNonPrimitive != 0 && includes&(TypeFlagsDisjointDomains & ^TypeFlagsNonPrimitive) != 0 || includes&TypeFlagsStringLike != 0 && includes&(TypeFlagsDisjointDomains & ^TypeFlagsStringLike) != 0 || includes&TypeFlagsNumberLike != 0 && includes&(TypeFlagsDisjointDomains & ^TypeFlagsNumberLike) != 0 || includes&TypeFlagsBigIntLike != 0 && includes&(TypeFlagsDisjointDomains & ^TypeFlagsBigIntLike) != 0 || includes&TypeFlagsESSymbolLike != 0 && includes&(TypeFlagsDisjointDomains & ^TypeFlagsESSymbolLike) != 0 || includes&TypeFlagsVoidLike != 0 && includes&(TypeFlagsDisjointDomains & ^TypeFlagsVoidLike) != 0 {
		return c.neverType
	}
	if includes&(TypeFlagsTemplateLiteral|TypeFlagsStringMapping) != 0 && includes&TypeFlagsStringLiteral != 0 && c.extractRedundantTemplateLiterals(typeSet) {
		return c.neverType
	}
	if includes&TypeFlagsAny != 0 {
		switch {
		case includes&TypeFlagsIncludesWildcard != 0:
			return c.wildcardType
		case includes&TypeFlagsIncludesError != 0:
			return c.errorType
		default:
			return c.anyType
		}
	}
	if !c.strictNullChecks && includes&TypeFlagsNullable != 0 {
		switch {
		case includes&TypeFlagsIncludesEmptyObject != 0:
			return c.neverType
		case includes&TypeFlagsUndefined != 0:
			return c.undefinedType
		default:
			return c.nullType
		}
	}
	if includes&TypeFlagsString != 0 && includes&(TypeFlagsStringLiteral|TypeFlagsTemplateLiteral|TypeFlagsStringMapping) != 0 || includes&TypeFlagsNumber != 0 && includes&TypeFlagsNumberLiteral != 0 || includes&TypeFlagsBigInt != 0 && includes&TypeFlagsBigIntLiteral != 0 || includes&TypeFlagsESSymbol != 0 && includes&TypeFlagsUniqueESSymbol != 0 || includes&TypeFlagsVoid != 0 && includes&TypeFlagsUndefined != 0 || includes&TypeFlagsIncludesEmptyObject != 0 && includes&TypeFlagsDefinitelyNonNullable != 0 {
		if flags&IntersectionFlagsNoSupertypeReduction == 0 {
			c.removeRedundantSupertypes(typeSet, includes)
		}
	}
	if includes&TypeFlagsIncludesMissingType != 0 {
		typeSet[typeSet.indexOf(c.undefinedType)] = c.missingType
	}
	if typeSet.length == 0 {
		return c.unknownType
	}
	if typeSet.length == 1 {
		return typeSet[0]
	}
	if typeSet.length == 2 && flags&IntersectionFlagsNoConstraintReduction == 0 {
		var typeVarIndex /* TODO(TS-TO-GO) inferred type 0 | 1 */ any
		if typeSet[0].flags&TypeFlagsTypeVariable != 0 {
			typeVarIndex = 0
		} else {
			typeVarIndex = 1
		}
		typeVariable := typeSet[typeVarIndex]
		primitiveType := typeSet[1-typeVarIndex]
		if typeVariable.flags&TypeFlagsTypeVariable != 0 && (primitiveType.flags&(TypeFlagsPrimitive|TypeFlagsNonPrimitive) != 0 && !c.isGenericStringLikeType(primitiveType) || includes&TypeFlagsIncludesEmptyObject != 0) {
			// We have an intersection T & P or P & T, where T is a type variable and P is a primitive type, the object type, or {}.
			constraint := c.getBaseConstraintOfType(typeVariable)
			// Check that T's constraint is similarly composed of primitive types, the object type, or {}.
			if constraint != nil && c.everyType(constraint, func(t *Type) bool {
				return t.flags&(TypeFlagsPrimitive|TypeFlagsNonPrimitive) != 0 || c.isEmptyAnonymousObjectType(t)
			}) {
				// If T's constraint is a subtype of P, simply return T. For example, given `T extends "a" | "b"`,
				// the intersection `T & string` reduces to just T.
				if c.isTypeStrictSubtypeOf(constraint, primitiveType) {
					return typeVariable
				}
				if !(constraint.flags&TypeFlagsUnion != 0 && c.someType(constraint, func(c *Type) bool {
					return c.isTypeStrictSubtypeOf(c, primitiveType)
				})) {
					// No constituent of T's constraint is a subtype of P. If P is also not a subtype of T's constraint,
					// then the constraint and P are unrelated, and the intersection reduces to never. For example, given
					// `T extends "a" | "b"`, the intersection `T & number` reduces to never.
					if !c.isTypeStrictSubtypeOf(primitiveType, constraint) {
						return c.neverType
					}
				}
				// Some constituent of T's constraint is a subtype of P, or P is a subtype of T's constraint. Thus,
				// the intersection further constrains the type variable. For example, given `T extends string | number`,
				// the intersection `T & "a"` is marked as a constrained type variable. Likewise, given `T extends "a" | 1`,
				// the intersection `T & number` is marked as a constrained type variable.
				objectFlags = ObjectFlagsIsConstrainedTypeVariable
			}
		}
	}
	id := c.getTypeListId(typeSet) + (ifElse(flags&IntersectionFlagsNoConstraintReduction != 0, "*", c.getAliasId(aliasSymbol, aliasTypeArguments)))
	result := c.intersectionTypes.get(id)
	if result == nil {
		if includes&TypeFlagsUnion != 0 {
			if c.intersectUnionsOfPrimitiveTypes(typeSet) {
				// When the intersection creates a reduced set (which might mean that *all* union types have
				// disappeared), we restart the operation to get a new set of combined flags. Once we have
				// reduced we'll never reduce again, so this occurs at most once.
				result = c.getIntersectionType(typeSet, flags, aliasSymbol, aliasTypeArguments)
			} else if core.Every(typeSet, func(t *Type) bool {
				return t.flags&TypeFlagsUnion != 0 && t.AsUnionType().types[0].flags&TypeFlagsUndefined != 0
			}) {
				var containedUndefinedType IntrinsicType
				if core.Some(typeSet, c.containsMissingType) {
					containedUndefinedType = c.missingType
				} else {
					containedUndefinedType = c.undefinedType
				}
				c.removeFromEach(typeSet, TypeFlagsUndefined)
				result = c.getUnionType([]*Type{c.getIntersectionType(typeSet, flags), containedUndefinedType}, UnionReductionLiteral, aliasSymbol, aliasTypeArguments)
			} else if core.Every(typeSet, func(t *Type) bool {
				return t.flags&TypeFlagsUnion != 0 && (t.AsUnionType().types[0].flags&TypeFlagsNull != 0 || t.AsUnionType().types[1].flags&TypeFlagsNull != 0)
			}) {
				c.removeFromEach(typeSet, TypeFlagsNull)
				result = c.getUnionType([]*Type{c.getIntersectionType(typeSet, flags), c.nullType}, UnionReductionLiteral, aliasSymbol, aliasTypeArguments)
			} else if typeSet.length >= 3 && types.length > 2 {
				// When we have three or more constituents, more than two inputs (to head off infinite reexpansion), some of which are unions, we employ a "divide and conquer" strategy
				// where A & B & C & D is processed as (A & B) & (C & D). Since intersections of unions often produce far smaller
				// unions of intersections than the full cartesian product (due to some intersections becoming `never`), this can
				// dramatically reduce the overall work.
				middle := Math.floor(typeSet.length / 2)
				result = c.getIntersectionType([]*Type{c.getIntersectionType(typeSet.slice(0, middle), flags), c.getIntersectionType(typeSet.slice(middle), flags)}, flags, aliasSymbol, aliasTypeArguments)
			} else {
				// We are attempting to construct a type of the form X & (A | B) & (C | D). Transform this into a type of
				// the form X & A & C | X & A & D | X & B & C | X & B & D. If the estimated size of the resulting union type
				// exceeds 100000 constituents, report an error.
				if !c.checkCrossProductUnion(typeSet) {
					return c.errorType
				}
				constituents := c.getCrossProductIntersections(typeSet, flags)
				// We attach a denormalized origin type when at least one constituent of the cross-product union is an
				// intersection (i.e. when the intersection didn't just reduce one or more unions to smaller unions) and
				// the denormalized origin has fewer constituents than the union itself.
				var origin *UnionOrIntersectionType
				if core.Some(constituents, func(t *Type) bool {
					return t.flags&TypeFlagsIntersection != 0
				}) && c.getConstituentCountOfTypes(constituents) > c.getConstituentCountOfTypes(typeSet) {
					origin = c.createOriginUnionOrIntersectionType(TypeFlagsIntersection, typeSet)
				} else {
					origin = nil
				}
				result = c.getUnionType(constituents, UnionReductionLiteral, aliasSymbol, aliasTypeArguments, origin)
			}
		} else {
			result = c.createIntersectionType(typeSet, objectFlags, aliasSymbol, aliasTypeArguments)
		}
		c.intersectionTypes.set(id, result)
	}
	return result
}

func (c *Checker) getCrossProductUnionSize(types []*Type) number {
	return reduceLeft(types, func(n number, t *Type) number {
		switch {
		case t.flags&TypeFlagsUnion != 0:
			return n * t.AsUnionType().types.length
		case t.flags&TypeFlagsNever != 0:
			return 0
		default:
			return n
		}
	}, 1)
}

func (c *Checker) checkCrossProductUnion(types []*Type) bool {
	size := c.getCrossProductUnionSize(types)
	if size >= 100000 {
		tracing. /* ? */ instant(tracing.Phase.CheckTypes, "checkCrossProductUnion_DepthLimit", &Args{
			typeIds: types.map_(func(t *Type) number {
				return t.id
			}),
			size: size,
		})
		c.error(c.currentNode, Diagnostics.Expression_produces_a_union_type_that_is_too_complex_to_represent)
		return false
	}
	return true
}

func (c *Checker) getCrossProductIntersections(types []*Type, flags IntersectionFlags) []*Type {
	count := c.getCrossProductUnionSize(types)
	var intersections []*Type = []never{}
	for i := 0; i < count; i++ {
		constituents := types.slice()
		n := i
		for j := types.length - 1; j >= 0; j-- {
			if types[j].flags&TypeFlagsUnion != 0 {
				sourceTypes := types[j].AsUnionType().types
				length := sourceTypes.length
				constituents[j] = sourceTypes[n%length]
				n = Math.floor(n / length)
			}
		}
		t := c.getIntersectionType(constituents, flags)
		if t.flags&TypeFlagsNever == 0 {
			intersections.push(t)
		}
	}
	return intersections
}

func (c *Checker) getConstituentCount(t *Type) number {
	switch {
	case t.flags&TypeFlagsUnionOrIntersection == 0 || t.aliasSymbol != nil:
		return 1
	case t.flags&TypeFlagsUnion != 0 && t.AsUnionType().origin != nil:
		return c.getConstituentCount(t.AsUnionType().origin)
	default:
		return c.getConstituentCountOfTypes(t.AsUnionOrIntersectionType().types)
	}
}

func (c *Checker) getConstituentCountOfTypes(types []*Type) number {
	return reduceLeft(types, func(n number, t *Type) number {
		return n + c.getConstituentCount(t)
	}, 0)
}

func (c *Checker) getTypeFromIntersectionTypeNode(node IntersectionTypeNode) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		aliasSymbol := c.getAliasSymbolForTypeNode(node)
		types := core.Map(node.Types, c.getTypeFromTypeNode)
		// We perform no supertype reduction for X & {} or {} & X, where X is one of string, number, bigint,
		// or a pattern literal template type. This enables union types like "a" | "b" | string & {} or
		// "aa" | "ab" | `a${string}` which preserve the literal types for purposes of statement completion.
		var emptyIndex number
		if types.length == 2 {
			emptyIndex = types.indexOf(c.emptyTypeLiteralType)
		} else {
			emptyIndex = -1
		}
		var t *Type
		if emptyIndex >= 0 {
			t = types[1-emptyIndex]
		} else {
			t = c.unknownType
		}
		noSupertypeReduction := t.flags&(TypeFlagsString|TypeFlagsNumber|TypeFlagsBigInt) != 0 || t.flags&TypeFlagsTemplateLiteral != 0 && c.isPatternLiteralType(t)
		links.resolvedType = c.getIntersectionType(types, ifElse(noSupertypeReduction, IntersectionFlagsNoSupertypeReduction, 0), aliasSymbol, c.getTypeArgumentsForAliasSymbol(aliasSymbol))
	}
	return links.resolvedType
}

func (c *Checker) createIndexType(t Union[InstantiableType, UnionOrIntersectionType], indexFlags IndexFlags) IndexType {
	result := c.createType(TypeFlagsIndex).AsIndexType()
	result.type_ = t
	result.indexFlags = indexFlags
	return result
}

func (c *Checker) createOriginIndexType(t Union[InstantiableType, UnionOrIntersectionType]) IndexType {
	result := c.createOriginType(TypeFlagsIndex).AsIndexType()
	result.type_ = t
	return result
}

func (c *Checker) getIndexTypeForGenericType(t Union[InstantiableType, UnionOrIntersectionType], indexFlags IndexFlags) IndexType {
	if indexFlags&IndexFlagsStringsOnly != 0 {
		return t.resolvedStringIndexType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.resolvedStringIndexType = createIndexType(type, IndexFlags.StringsOnly) */ TODO)
	} else {
		return t.resolvedIndexType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.resolvedIndexType = createIndexType(type, IndexFlags.None) */ TODO)
	}
}

/**
 * This roughly mirrors `resolveMappedTypeMembers` in the nongeneric case, except only reports a union of the keys calculated,
 * rather than manufacturing the properties. We can't just fetch the `constraintType` since that would ignore mappings
 * and mapping the `constraintType` directly ignores how mapped types map _properties_ and not keys (thus ignoring subtype
 * reduction in the constraintType) when possible.
 * @param noIndexSignatures Indicates if _string_ index signatures should be elided. (other index signatures are always reported)
 */

func (c *Checker) getIndexTypeForMappedType(t MappedType, indexFlags IndexFlags) *Type {
	typeParameter := c.getTypeParameterFromMappedType(t)
	constraintType := c.getConstraintTypeFromMappedType(t)
	nameType := c.getNameTypeFromMappedType(t.target.AsMappedType() || t)
	if nameType == nil && indexFlags&IndexFlagsNoIndexSignatures == 0 {
		// no mapping and no filtering required, just quickly bail to returning the constraint in the common case
		return constraintType
	}
	var keyTypes []*Type = []never{}
	// Calling getApparentType on the `T` of a `keyof T` in the constraint type of a generic mapped type can
	// trigger a circularity. For example, `T extends { [P in keyof T & string as Captitalize<P>]: any }` is
	// a circular definition. For this reason, we only eagerly manifest the keys if the constraint is non-generic.
	if c.isGenericIndexType(constraintType) {
		if c.isMappedTypeWithKeyofConstraintDeclaration(t) {
			// We have a generic index and a homomorphic mapping (but a distributive key remapping) - we need to defer
			// the whole `keyof whatever` for later since it's not safe to resolve the shape of modifier type.
			return c.getIndexTypeForGenericType(t, indexFlags)
		}
		// Include the generic component in the resulting type.
		c.forEachType(constraintType, addMemberForKeyType)
	} else if c.isMappedTypeWithKeyofConstraintDeclaration(t) {
		modifiersType := c.getApparentType(c.getModifiersTypeFromMappedType(t))
		// The 'T' in 'keyof T'
		c.forEachMappedTypePropertyKeyTypeAndIndexSignatureKeyType(modifiersType, TypeFlagsStringOrNumberLiteralOrUnique, indexFlags&IndexFlagsStringsOnly != 0, addMemberForKeyType)
	} else {
		c.forEachType(c.getLowerBoundOfKeyType(constraintType), addMemberForKeyType)
	}
	// We had to pick apart the constraintType to potentially map/filter it - compare the final resulting list with the
	// original constraintType, so we can return the union that preserves aliases/origin data if possible.
	var result *Type
	if indexFlags&IndexFlagsNoIndexSignatures != 0 {
		result = c.filterType(c.getUnionType(keyTypes), func(t *Type) bool {
			return t.flags&(TypeFlagsAny|TypeFlagsString) == 0
		})
	} else {
		result = c.getUnionType(keyTypes)
	}
	if result.flags&TypeFlagsUnion != 0 && constraintType.flags&TypeFlagsUnion != 0 && c.getTypeListId(result.AsUnionType().types) == c.getTypeListId(constraintType.AsUnionType().types) {
		return constraintType
	}
	return result

	addMemberForKeyType := func(keyType *Type) {
		var propNameType *Type
		if nameType != nil {
			propNameType = c.instantiateType(nameType, c.appendTypeMapping(t.mapper, typeParameter, keyType))
		} else {
			propNameType = keyType
		}
		// `keyof` currently always returns `string | number` for concrete `string` index signatures - the below ternary keeps that behavior for mapped types
		// See `getLiteralTypeFromProperties` where there's a similar ternary to cause the same behavior.
		keyTypes.push(ifElse(propNameType == c.stringType, c.stringOrNumberType, propNameType))
	}

}

// Ordinarily we reduce a keyof M, where M is a mapped type { [P in K as N<P>]: X }, to simply N<K>. This however presumes
// that N distributes over union types, i.e. that N<A | B | C> is equivalent to N<A> | N<B> | N<C>. Specifically, we only
// want to perform the reduction when the name type of a mapped type is distributive with respect to the type variable
// introduced by the 'in' clause of the mapped type. Note that non-generic types are considered to be distributive because
// they're the same type regardless of what's being distributed over.
func (c *Checker) hasDistributiveNameType(mappedType MappedType) bool {
	typeVariable := c.getTypeParameterFromMappedType(mappedType)
	return isDistributive(c.getNameTypeFromMappedType(mappedType) || typeVariable)
	isDistributive := func(t *Type) bool {
		switch {
		case t.flags&(TypeFlagsAnyOrUnknown|TypeFlagsPrimitive|TypeFlagsNever|TypeFlagsTypeParameter|TypeFlagsObject|TypeFlagsNonPrimitive) != 0:
			return true
		case t.flags&TypeFlagsConditional != 0:
			return t.AsConditionalType().root.isDistributive && t.AsConditionalType().checkType == typeVariable
		case t.flags&(TypeFlagsUnionOrIntersection|TypeFlagsTemplateLiteral) != 0:
			return core.Every((t /* as UnionOrIntersectionType | TemplateLiteralType */).types, isDistributive)
		case t.flags&TypeFlagsIndexedAccess != 0:
			return isDistributive(t.AsIndexedAccessType().objectType) && isDistributive(t.AsIndexedAccessType().indexType)
		case t.flags&TypeFlagsSubstitution != 0:
			return isDistributive(t.AsSubstitutionType().baseType) && isDistributive(t.AsSubstitutionType().constraint)
		case t.flags&TypeFlagsStringMapping != 0:
			return isDistributive(t.AsStringMappingType().type_)
		default:
			return false
		}
	}

}

func (c *Checker) getLiteralTypeFromPropertyName(name Union[PropertyName, JsxAttributeName]) *Type {
	if isPrivateIdentifier(name) {
		return c.neverType
	}
	if isNumericLiteral(name) {
		return c.getRegularTypeOfLiteralType(c.checkExpression(name))
	}
	if isComputedPropertyName(name) {
		return c.getRegularTypeOfLiteralType(c.checkComputedPropertyName(name))
	}
	propertyName := getPropertyNameForPropertyNameNode(name)
	if propertyName != nil {
		return c.getStringLiteralType(unescapeLeadingUnderscores(propertyName))
	}
	if isExpression(name) {
		return c.getRegularTypeOfLiteralType(c.checkExpression(name))
	}
	return c.neverType
}

func (c *Checker) getLiteralTypeFromProperty(prop *ast.Symbol, include TypeFlags, includeNonPublic bool) *Type {
	if includeNonPublic || getDeclarationModifierFlagsFromSymbol(prop)&ast.ModifierFlagsNonPublicAccessibilityModifier == 0 {
		t := c.getSymbolLinks(c.getLateBoundSymbol(prop)).nameType
		if !(t) {
			name := getNameOfDeclaration(prop.ValueDeclaration) /* as PropertyName | JsxAttributeName */
			if prop.EscapedName == InternalSymbolNameDefault {
				t = c.getStringLiteralType("default")
			} else {
				t = name && c.getLiteralTypeFromPropertyName(name) || (ifElse(!isKnownSymbol(prop), c.getStringLiteralType(symbolName(prop)), nil))
			}
		}
		if t && t.flags&include != 0 {
			return t
		}
	}
	return c.neverType
}

func (c *Checker) isKeyTypeIncluded(keyType *Type, include TypeFlags) bool {
	return keyType.flags&include != 0 || keyType.flags&TypeFlagsIntersection != 0 && core.Some(keyType.AsIntersectionType().types, func(t *Type) bool {
		return c.isKeyTypeIncluded(t, include)
	})
}

func (c *Checker) getLiteralTypeFromProperties(t *Type, include TypeFlags, includeOrigin bool) *Type {
	var origin *IndexType
	if includeOrigin && (getObjectFlags(t)&(ObjectFlagsClassOrInterface|ObjectFlagsReference) != 0 || t.aliasSymbol != nil) {
		origin = c.createOriginIndexType(t)
	} else {
		origin = nil
	}
	propertyTypes := core.Map(c.getPropertiesOfType(t), func(prop *ast.Symbol) *Type {
		return c.getLiteralTypeFromProperty(prop, include)
	})
	indexKeyTypes := core.Map(c.getIndexInfosOfType(t), func(info IndexInfo) *Type {
		switch {
		case info != c.enumNumberIndexInfo && c.isKeyTypeIncluded(info.keyType, include):
			if info.keyType == c.stringType && include&TypeFlagsNumber != 0 {
				return c.stringOrNumberType
			} else {
				return info.keyType
			}
		default:
			return c.neverType
		}
	})
	return c.getUnionType(core.Concatenate(propertyTypes, indexKeyTypes), UnionReductionLiteral, nil /*aliasSymbol*/, nil /*aliasTypeArguments*/, origin)
}

func (c *Checker) shouldDeferIndexType(t *Type, indexFlags IndexFlags /*  = IndexFlags.None */) bool {
	return t.flags&TypeFlagsInstantiableNonPrimitive != 0 || c.isGenericTupleType(t) || c.isGenericMappedType(t) && (!c.hasDistributiveNameType(t) || c.getMappedTypeNameTypeKind(t) == MappedTypeNameTypeKindRemapping) || t.flags&TypeFlagsUnion != 0 && indexFlags&IndexFlagsNoReducibleCheck == 0 && c.isGenericReducibleType(t) || t.flags&TypeFlagsIntersection != 0 && c.maybeTypeOfKind(t, TypeFlagsInstantiable) && core.Some(t.AsIntersectionType().types, c.isEmptyAnonymousObjectType)
}

func (c *Checker) getIndexType(t *Type, indexFlags IndexFlags /*  = IndexFlags.None */) *Type {
	t = c.getReducedType(t)
	switch {
	case c.isNoInferType(t):
		return c.getNoInferType(c.getIndexType(t.AsSubstitutionType().baseType, indexFlags))
	case c.shouldDeferIndexType(t, indexFlags):
		return c.getIndexTypeForGenericType(t /* as InstantiableType | UnionOrIntersectionType */, indexFlags)
	case t.flags&TypeFlagsUnion != 0:
		return c.getIntersectionType(core.Map(t.AsUnionType().types, func(t *Type) *Type {
			return c.getIndexType(t, indexFlags)
		}))
	case t.flags&TypeFlagsIntersection != 0:
		return c.getUnionType(core.Map(t.AsIntersectionType().types, func(t *Type) *Type {
			return c.getIndexType(t, indexFlags)
		}))
	case getObjectFlags(t)&ObjectFlagsMapped != 0:
		return c.getIndexTypeForMappedType(t.AsMappedType(), indexFlags)
	case t == c.wildcardType:
		return c.wildcardType
	case t.flags&TypeFlagsUnknown != 0:
		return c.neverType
	case t.flags&(TypeFlagsAny|TypeFlagsNever) != 0:
		return c.stringNumberSymbolType
	default:
		return c.getLiteralTypeFromProperties(t, (ifElse(indexFlags&IndexFlagsNoIndexSignatures != 0, TypeFlagsStringLiteral, TypeFlagsStringLike))|(ifElse(indexFlags&IndexFlagsStringsOnly != 0, 0, TypeFlagsNumberLike|TypeFlagsESSymbolLike)), indexFlags == IndexFlagsNone)
	}
}

func (c *Checker) getExtractStringType(t *Type) *Type {
	extractTypeAlias := c.getGlobalExtractSymbol()
	if extractTypeAlias != nil {
		return c.getTypeAliasInstantiation(extractTypeAlias, []*Type{t, c.stringType})
	} else {
		return c.stringType
	}
}

func (c *Checker) getIndexTypeOrString(t *Type) *Type {
	indexType := c.getExtractStringType(c.getIndexType(t))
	if indexType.flags&TypeFlagsNever != 0 {
		return c.stringType
	} else {
		return indexType
	}
}

func (c *Checker) getTypeFromTypeOperatorNode(node TypeOperatorNode) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		switch node.Operator {
		case ast.KindKeyOfKeyword:
			links.resolvedType = c.getIndexType(c.getTypeFromTypeNode(node.Type_))
		case ast.KindUniqueKeyword:
			if node.Type_.Kind == ast.KindSymbolKeyword {
				links.resolvedType = c.getESSymbolLikeTypeForNode(walkUpParenthesizedTypes(node.Parent))
			} else {
				links.resolvedType = c.errorType
			}
		case ast.KindReadonlyKeyword:
			links.resolvedType = c.getTypeFromTypeNode(node.Type_)
		default:
			Debug.assertNever(node.Operator)
		}
	}
	return links.resolvedType
}

func (c *Checker) getTypeFromTemplateTypeNode(node TemplateLiteralTypeNode) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		links.resolvedType = c.getTemplateLiteralType([]string{node.Head.Text /* TODO(TS-TO-GO) Expression SpreadElement: ...map(node.templateSpans, span => span.literal.text) */}, core.Map(node.TemplateSpans, func(span TemplateLiteralTypeSpan) *Type {
			return c.getTypeFromTypeNode(span.Type_)
		}))
	}
	return links.resolvedType
}

func (c *Checker) getTemplateLiteralType(texts []string, types []*Type) *Type {
	unionIndex := core.FindIndex(types, func(t *Type) bool {
		return t.flags&(TypeFlagsNever|TypeFlagsUnion) != 0
	})
	if unionIndex >= 0 {
		if c.checkCrossProductUnion(types) {
			return c.mapType(types[unionIndex], func(t *Type) *Type {
				return c.getTemplateLiteralType(texts, core.ReplaceElement(types, unionIndex, t))
			})
		} else {
			return c.errorType
		}
	}
	if contains(types, c.wildcardType) {
		return c.wildcardType
	}
	var newTypes []*Type = []never{}
	var newTexts []string = []never{}
	text := texts[0]
	if !addSpans(texts, types) {
		return c.stringType
	}
	if newTypes.length == 0 {
		return c.getStringLiteralType(text)
	}
	newTexts.push(text)
	if core.Every(newTexts, func(t string) bool {
		return t == ""
	}) {
		if core.Every(newTypes, func(t *Type) bool {
			return t.flags&TypeFlagsString != 0
		}) {
			return c.stringType
		}
		// Normalize `${Mapping<xxx>}` into Mapping<xxx>
		if newTypes.length == 1 && c.isPatternLiteralType(newTypes[0]) {
			return newTypes[0]
		}
	}
	id := __TEMPLATE__(c.getTypeListId(newTypes), "|", core.Map(newTexts, func(t string) number {
		return t.length
	}).join(","), "|", newTexts.join(""))
	t := c.templateLiteralTypes.get(id)
	if !(t) {
		c.templateLiteralTypes.set(id /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type = createTemplateLiteralType(newTexts, newTypes) */, TODO)
	}
	return t

	addSpans := func(texts []string, types []*Type) bool {
		for i := 0; i < types.length; i++ {
			t := types[i]
			if t.flags&(TypeFlagsLiteral|TypeFlagsNull|TypeFlagsUndefined) != 0 {
				text += c.getTemplateStringForType(t) || ""
				text += texts[i+1]
			} else if t.flags&TypeFlagsTemplateLiteral != 0 {
				text += t.AsTemplateLiteralType().texts[0]
				if !addSpans(t.AsTemplateLiteralType().texts, t.AsTemplateLiteralType().types) {
					return false
				}
				text += texts[i+1]
			} else if c.isGenericIndexType(t) || c.isPatternLiteralPlaceholderType(t) {
				newTypes.push(t)
				newTexts.push(text)
				text = texts[i+1]
			} else {
				return false
			}
		}
		return true
	}

}

func (c *Checker) getTemplateStringForType(t *Type) *string {
	switch {
	case t.flags&TypeFlagsStringLiteral != 0:
		return t.AsStringLiteralType().value
	case t.flags&TypeFlagsNumberLiteral != 0:
		return "" + t.AsNumberLiteralType().value
	case t.flags&TypeFlagsBigIntLiteral != 0:
		return pseudoBigIntToString(t.AsBigIntLiteralType().value)
	case t.flags&(TypeFlagsBooleanLiteral|TypeFlagsNullable) != 0:
		return t.AsIntrinsicType().intrinsicName
	default:
		return nil
	}
}

func (c *Checker) createTemplateLiteralType(texts []string, types []*Type) TemplateLiteralType {
	t := c.createType(TypeFlagsTemplateLiteral).AsTemplateLiteralType()
	t.texts = texts
	t.types = types
	return t
}

func (c *Checker) getStringMappingType(symbol *ast.Symbol, t *Type) *Type {
	switch {
	case t.flags&(TypeFlagsUnion|TypeFlagsNever) != 0:
		return c.mapType(t, func(t *Type) *Type {
			return c.getStringMappingType(symbol, t)
		})
	case t.flags&TypeFlagsStringLiteral != 0:
		return c.getStringLiteralType(c.applyStringMapping(symbol, t.AsStringLiteralType().value))
	case t.flags&TypeFlagsTemplateLiteral != 0:
		return c.getTemplateLiteralType(c.applyTemplateStringMapping(symbol, t.AsTemplateLiteralType().texts, t.AsTemplateLiteralType().types)...)
	case t.flags&TypeFlagsStringMapping != 0 && symbol == t.symbol:
		return t
	case t.flags&(TypeFlagsAny|TypeFlagsString|TypeFlagsStringMapping) != 0 || c.isGenericIndexType(t):
		return c.getStringMappingTypeForGenericType(symbol, t)
	case c.isPatternLiteralPlaceholderType(t):
		return c.getStringMappingTypeForGenericType(symbol, c.getTemplateLiteralType([]string{"", ""}, []*Type{t}))
	default:
		return t
	}
}

func (c *Checker) applyStringMapping(symbol *ast.Symbol, str string) string {
	switch intrinsicTypeKinds.get(symbol.EscapedName /* as string */) {
	case IntrinsicTypeKindUppercase:
		return str.toUpperCase()
	case IntrinsicTypeKindLowercase:
		return str.toLowerCase()
	case IntrinsicTypeKindCapitalize:
		return str.charAt(0).toUpperCase() + str.slice(1)
	case IntrinsicTypeKindUncapitalize:
		return str.charAt(0).toLowerCase() + str.slice(1)
	}
	return str
}

func (c *Checker) applyTemplateStringMapping(symbol *ast.Symbol, texts []string, types []*Type) /* TODO(TS-TO-GO) TypeNode TupleType: [texts: readonly string[], types: readonly Type[]] */ any {
	switch intrinsicTypeKinds.get(symbol.EscapedName /* as string */) {
	case IntrinsicTypeKindUppercase:
		return []any{texts.map_(func(t string) string {
			return t.toUpperCase()
		}), types.map_(func(t *Type) *Type {
			return c.getStringMappingType(symbol, t)
		})}
	case IntrinsicTypeKindLowercase:
		return []any{texts.map_(func(t string) string {
			return t.toLowerCase()
		}), types.map_(func(t *Type) *Type {
			return c.getStringMappingType(symbol, t)
		})}
	case IntrinsicTypeKindCapitalize:
		return []any{ifElse(texts[0] == "", texts, []string{texts[0].charAt(0).toUpperCase() + texts[0].slice(1) /* TODO(TS-TO-GO) Expression SpreadElement: ...texts.slice(1) */}), ifElse(texts[0] == "", []*Type{c.getStringMappingType(symbol, types[0]) /* TODO(TS-TO-GO) Expression SpreadElement: ...types.slice(1) */}, types)}
	case IntrinsicTypeKindUncapitalize:
		return []any{ifElse(texts[0] == "", texts, []string{texts[0].charAt(0).toLowerCase() + texts[0].slice(1) /* TODO(TS-TO-GO) Expression SpreadElement: ...texts.slice(1) */}), ifElse(texts[0] == "", []*Type{c.getStringMappingType(symbol, types[0]) /* TODO(TS-TO-GO) Expression SpreadElement: ...types.slice(1) */}, types)}
	}
	return []any{texts, types}
}

func (c *Checker) getStringMappingTypeForGenericType(symbol *ast.Symbol, t *Type) *Type {
	id := __TEMPLATE__(getSymbolId(symbol), ",", c.getTypeId(t))
	result := c.stringMappingTypes.get(id)
	if result == nil {
		c.stringMappingTypes.set(id /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = createStringMappingType(symbol, type) */, TODO)
	}
	return result
}

func (c *Checker) createStringMappingType(symbol *ast.Symbol, t *Type) StringMappingType {
	result := c.createTypeWithSymbol(TypeFlagsStringMapping, symbol).AsStringMappingType()
	result.type_ = t
	return result
}

func (c *Checker) createIndexedAccessType(objectType *Type, indexType *Type, accessFlags AccessFlags, aliasSymbol *ast.Symbol, aliasTypeArguments *[]*Type) IndexedAccessType {
	t := c.createType(TypeFlagsIndexedAccess).AsIndexedAccessType()
	t.objectType = objectType
	t.indexType = indexType
	t.accessFlags = accessFlags
	t.aliasSymbol = aliasSymbol
	t.aliasTypeArguments = aliasTypeArguments
	return t
}

/**
 * Returns if a type is or consists of a JSLiteral object type
 * In addition to objects which are directly literals,
 * * unions where every element is a jsliteral
 * * intersections where at least one element is a jsliteral
 * * and instantiable types constrained to a jsliteral
 * Should all count as literals and not print errors on access or assignment of possibly existing properties.
 * This mirrors the behavior of the index signature propagation, to which this behaves similarly (but doesn't affect assignability or inference).
 */

func (c *Checker) isJSLiteralType(t *Type) bool {
	if c.noImplicitAny {
		return false
		// Flag is meaningless under `noImplicitAny` mode
	}
	if getObjectFlags(t)&ObjectFlagsJSLiteral != 0 {
		return true
	}
	if t.flags&TypeFlagsUnion != 0 {
		return core.Every(t.AsUnionType().types, c.isJSLiteralType)
	}
	if t.flags&TypeFlagsIntersection != 0 {
		return core.Some(t.AsIntersectionType().types, c.isJSLiteralType)
	}
	if t.flags&TypeFlagsInstantiable != 0 {
		constraint := c.getResolvedBaseConstraint(t)
		return constraint != t && c.isJSLiteralType(constraint)
	}
	return false
}

func (c *Checker) getPropertyNameFromIndex(indexType *Type, accessNode Union[PropertyName, ObjectBindingPattern, ArrayBindingPattern, IndexedAccessTypeNode, ElementAccessExpression, SyntheticExpression, undefined]) *string {
	switch {
	case isTypeUsableAsPropertyName(indexType):
		return getPropertyNameFromType(indexType)
	case accessNode != nil && isPropertyName(accessNode):
		return getPropertyNameForPropertyNameNode(accessNode)
	default:
		return nil
	}
}

func (c *Checker) isUncalledFunctionReference(node *ast.Node, symbol *ast.Symbol) bool {
	if symbol.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsMethod) != 0 {
		parent := findAncestor(node.Parent, func(n *ast.Node) bool {
			return !isAccessExpression(n)
		}) || node.Parent
		if isCallLikeExpression(parent) {
			return isCallOrNewExpression(parent) && isIdentifier(node) && c.hasMatchingArgument(parent, node)
		}
		return core.Every(symbol.Declarations, func(d Declaration) bool {
			return !isFunctionLike(d) || c.isDeprecatedDeclaration(d)
		})
	}
	return true
}

func (c *Checker) getPropertyTypeForIndexType(originalObjectType *Type, objectType *Type, indexType *Type, fullIndexType *Type, accessNode Union[ElementAccessExpression, IndexedAccessTypeNode, PropertyName, BindingName, SyntheticExpression, undefined], accessFlags AccessFlags) *Type {
	var accessExpression *ElementAccessExpression
	if accessNode != nil && accessNode.Kind == ast.KindElementAccessExpression {
		accessExpression = accessNode
	} else {
		accessExpression = nil
	}
	var propName *string
	if accessNode != nil && isPrivateIdentifier(accessNode) {
		propName = nil
	} else {
		propName = c.getPropertyNameFromIndex(indexType, accessNode)
	}

	if propName != nil {
		if accessFlags&AccessFlagsContextual != 0 {
			return c.getTypeOfPropertyOfContextualType(objectType, propName) || c.anyType
		}
		prop := c.getPropertyOfType(objectType, propName)
		if prop != nil {
			if accessFlags&AccessFlagsReportDeprecated != 0 && accessNode != nil && prop.Declarations != nil && c.isDeprecatedSymbol(prop) && c.isUncalledFunctionReference(accessNode, prop) {
				deprecatedNode := ifNotNilElse(accessExpression. /* ? */ argumentExpression, (ifElse(isIndexedAccessTypeNode(accessNode), accessNode.IndexType, accessNode)))
				c.addDeprecatedSuggestion(deprecatedNode, prop.Declarations, propName /* as string */)
			}
			if accessExpression != nil {
				c.markPropertyAsReferenced(prop, accessExpression, c.isSelfTypeAccess(accessExpression.Expression, objectType.symbol))
				if c.isAssignmentToReadonlyEntity(accessExpression, prop, getAssignmentTargetKind(accessExpression)) {
					c.error(accessExpression.ArgumentExpression, Diagnostics.Cannot_assign_to_0_because_it_is_a_read_only_property, c.symbolToString(prop))
					return nil
				}
				if accessFlags&AccessFlagsCacheSymbol != 0 {
					c.getNodeLinks(accessNode).resolvedSymbol = prop
				}
				if c.isThisPropertyAccessInConstructor(accessExpression, prop) {
					return c.autoType
				}
			}
			var propType *Type
			if accessFlags&AccessFlagsWriting != 0 {
				propType = c.getWriteTypeOfSymbol(prop)
			} else {
				propType = c.getTypeOfSymbol(prop)
			}
			switch {
			case accessExpression != nil && getAssignmentTargetKind(accessExpression) != AssignmentKindDefinite:
				return c.getFlowTypeOfReference(accessExpression, propType)
			case accessNode != nil && isIndexedAccessTypeNode(accessNode) && c.containsMissingType(propType):
				return c.getUnionType([]*Type{propType, c.undefinedType})
			default:
				return propType
			}
		}
		if c.everyType(objectType, c.isTupleType) && isNumericLiteralName(propName) {
			index := +propName
			if accessNode != nil && c.everyType(objectType, func(t *Type) bool {
				return t.AsTupleTypeReference().target.combinedFlags&ElementFlagsVariable == 0
			}) && accessFlags&AccessFlagsAllowMissing == 0 {
				indexNode := c.getIndexNodeForAccessExpression(accessNode)
				if c.isTupleType(objectType) {
					if index < 0 {
						c.error(indexNode, Diagnostics.A_tuple_type_cannot_be_indexed_with_a_negative_value)
						return c.undefinedType
					}
					c.error(indexNode, Diagnostics.Tuple_type_0_of_length_1_has_no_element_at_index_2, c.typeToString(objectType), c.getTypeReferenceArity(objectType), unescapeLeadingUnderscores(propName))
				} else {
					c.error(indexNode, Diagnostics.Property_0_does_not_exist_on_type_1, unescapeLeadingUnderscores(propName), c.typeToString(objectType))
				}
			}
			if index >= 0 {
				errorIfWritingToReadonlyIndex(c.getIndexInfoOfType(objectType, c.numberType))
				return c.getTupleElementTypeOutOfStartCount(objectType, index, ifElse(accessFlags&AccessFlagsIncludeUndefined != 0, c.missingType, nil))
			}
		}
	}
	if indexType.flags&TypeFlagsNullable == 0 && c.isTypeAssignableToKind(indexType, TypeFlagsStringLike|TypeFlagsNumberLike|TypeFlagsESSymbolLike) {
		if objectType.flags&(TypeFlagsAny|TypeFlagsNever) != 0 {
			return objectType
		}
		// If no index signature is applicable, we default to the string index signature. In effect, this means the string
		// index signature applies even when accessing with a symbol-like type.
		indexInfo := c.getApplicableIndexInfo(objectType, indexType) || c.getIndexInfoOfType(objectType, c.stringType)
		if indexInfo != nil {
			if accessFlags&AccessFlagsNoIndexSignatures != 0 && indexInfo.keyType != c.numberType {
				if accessExpression != nil {
					if accessFlags&AccessFlagsWriting != 0 {
						c.error(accessExpression, Diagnostics.Type_0_is_generic_and_can_only_be_indexed_for_reading, c.typeToString(originalObjectType))
					} else {
						c.error(accessExpression, Diagnostics.Type_0_cannot_be_used_to_index_type_1, c.typeToString(indexType), c.typeToString(originalObjectType))
					}
				}
				return nil
			}
			if accessNode != nil && indexInfo.keyType == c.stringType && !c.isTypeAssignableToKind(indexType, TypeFlagsString|TypeFlagsNumber) {
				indexNode := c.getIndexNodeForAccessExpression(accessNode)
				c.error(indexNode, Diagnostics.Type_0_cannot_be_used_as_an_index_type, c.typeToString(indexType))
				if accessFlags&AccessFlagsIncludeUndefined != 0 {
					return c.getUnionType([]*Type{indexInfo.type_, c.missingType})
				} else {
					return indexInfo.type_
				}
			}
			errorIfWritingToReadonlyIndex(indexInfo)
			// When accessing an enum object with its own type,
			// e.g. E[E.A] for enum E { A }, undefined shouldn't
			// be included in the result type
			if (accessFlags&AccessFlagsIncludeUndefined != 0) && !(objectType.symbol && objectType.symbol.Flags&(ast.SymbolFlagsRegularEnum|ast.SymbolFlagsConstEnum) != 0 && (indexType.symbol && indexType.flags&TypeFlagsEnumLiteral != 0 && c.getParentOfSymbol(indexType.symbol) == objectType.symbol)) {
				return c.getUnionType([]*Type{indexInfo.type_, c.missingType})
			}
			return indexInfo.type_
		}
		if indexType.flags&TypeFlagsNever != 0 {
			return c.neverType
		}
		if c.isJSLiteralType(objectType) {
			return c.anyType
		}
		if accessExpression != nil && !c.isConstEnumObjectType(objectType) {
			if c.isObjectLiteralType(objectType) {
				if c.noImplicitAny && indexType.flags&(TypeFlagsStringLiteral|TypeFlagsNumberLiteral) != 0 {
					c.diagnostics.add(createDiagnosticForNode(accessExpression, Diagnostics.Property_0_does_not_exist_on_type_1, indexType.AsStringLiteralType().value, c.typeToString(objectType)))
					return c.undefinedType
				} else if indexType.flags&(TypeFlagsNumber|TypeFlagsString) != 0 {
					types := core.Map(objectType.AsResolvedType().properties, func(property *ast.Symbol) *Type {
						return c.getTypeOfSymbol(property)
					})
					return c.getUnionType(append(types, c.undefinedType))
				}
			}

			if objectType.symbol == c.globalThisSymbol && propName != nil && c.globalThisSymbol.Exports.has(propName) && (c.globalThisSymbol.Exports.get(propName).Flags&ast.SymbolFlagsBlockScoped != 0) {
				c.error(accessExpression, Diagnostics.Property_0_does_not_exist_on_type_1, unescapeLeadingUnderscores(propName), c.typeToString(objectType))
			} else if c.noImplicitAny && accessFlags&AccessFlagsSuppressNoImplicitAnyError == 0 {
				if propName != nil && c.typeHasStaticProperty(propName, objectType) {
					typeName := c.typeToString(objectType)
					c.error(accessExpression, Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_to_access_the_static_member_2_instead, propName /* as string */, typeName, typeName+"["+getTextOfNode(accessExpression.ArgumentExpression)+"]")
				} else if c.getIndexTypeOfType(objectType, c.numberType) != nil {
					c.error(accessExpression.ArgumentExpression, Diagnostics.Element_implicitly_has_an_any_type_because_index_expression_is_not_of_type_number)
				} else {
					var suggestion *string
					if propName != nil && ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: suggestion = getSuggestionForNonexistentProperty(propName as string, objectType) */ TODO) {
						if suggestion != nil {
							c.error(accessExpression.ArgumentExpression, Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_2, propName /* as string */, c.typeToString(objectType), suggestion)
						}
					} else {
						suggestion := c.getSuggestionForNonexistentIndexSignature(objectType, accessExpression, indexType)
						if suggestion != nil {
							c.error(accessExpression, Diagnostics.Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature_Did_you_mean_to_call_1, c.typeToString(objectType), suggestion)
						} else {
							var errorInfo *DiagnosticMessageChain
							if indexType.flags&TypeFlagsEnumLiteral != 0 {
								errorInfo = chainDiagnosticMessages(nil, Diagnostics.Property_0_does_not_exist_on_type_1, "["+c.typeToString(indexType)+"]", c.typeToString(objectType))
							} else if indexType.flags&TypeFlagsUniqueESSymbol != 0 {
								symbolName := c.getFullyQualifiedName(indexType.AsUniqueESSymbolType().symbol, accessExpression)
								errorInfo = chainDiagnosticMessages(nil, Diagnostics.Property_0_does_not_exist_on_type_1, "["+symbolName+"]", c.typeToString(objectType))
							} else if indexType.flags&TypeFlagsStringLiteral != 0 {
								errorInfo = chainDiagnosticMessages(nil, Diagnostics.Property_0_does_not_exist_on_type_1, indexType.AsStringLiteralType().value, c.typeToString(objectType))
							} else if indexType.flags&TypeFlagsNumberLiteral != 0 {
								errorInfo = chainDiagnosticMessages(nil, Diagnostics.Property_0_does_not_exist_on_type_1, indexType.AsNumberLiteralType().value, c.typeToString(objectType))
							} else if indexType.flags&(TypeFlagsNumber|TypeFlagsString) != 0 {
								errorInfo = chainDiagnosticMessages(nil, Diagnostics.No_index_signature_with_a_parameter_of_type_0_was_found_on_type_1, c.typeToString(indexType), c.typeToString(objectType))
							}

							errorInfo = chainDiagnosticMessages(errorInfo, Diagnostics.Element_implicitly_has_an_any_type_because_expression_of_type_0_can_t_be_used_to_index_type_1, c.typeToString(fullIndexType), c.typeToString(objectType))
							c.diagnostics.add(createDiagnosticForNodeFromMessageChain(getSourceFileOfNode(accessExpression), accessExpression, errorInfo))
						}
					}
				}
			}
			return nil
		}
	}
	if accessFlags&AccessFlagsAllowMissing != 0 && c.isObjectLiteralType(objectType) {
		return c.undefinedType
	}
	if c.isJSLiteralType(objectType) {
		return c.anyType
	}
	if accessNode != nil {
		indexNode := c.getIndexNodeForAccessExpression(accessNode)
		if indexNode.Kind != ast.KindBigIntLiteral && indexType.flags&(TypeFlagsStringLiteral|TypeFlagsNumberLiteral) != 0 {
			c.error(indexNode, Diagnostics.Property_0_does_not_exist_on_type_1, ""+(indexType /* as StringLiteralType | NumberLiteralType */).value, c.typeToString(objectType))
		} else if indexType.flags&(TypeFlagsString|TypeFlagsNumber) != 0 {
			c.error(indexNode, Diagnostics.Type_0_has_no_matching_index_signature_for_type_1, c.typeToString(objectType), c.typeToString(indexType))
		} else {
			var typeString string
			if indexNode.Kind == ast.KindBigIntLiteral {
				typeString = "bigint"
			} else {
				typeString = c.typeToString(indexType)
			}
			c.error(indexNode, Diagnostics.Type_0_cannot_be_used_as_an_index_type, typeString)
		}
	}
	if c.isTypeAny(indexType) {
		return indexType
	}
	return nil

	errorIfWritingToReadonlyIndex := func(indexInfo *IndexInfo) {
		if indexInfo != nil && indexInfo.isReadonly && accessExpression != nil && (isAssignmentTarget(accessExpression) || isDeleteTarget(accessExpression)) {
			c.error(accessExpression, Diagnostics.Index_signature_in_type_0_only_permits_reading, c.typeToString(objectType))
		}
	}

}

func (c *Checker) getIndexNodeForAccessExpression(accessNode Union[ElementAccessExpression, IndexedAccessTypeNode, PropertyName, BindingName, SyntheticExpression]) /* TODO(TS-TO-GO) inferred type Expression | TypeNode | ObjectBindingPattern | ArrayBindingPattern */ any {
	switch {
	case accessNode.Kind == ast.KindElementAccessExpression:
		return accessNode.ArgumentExpression
	case accessNode.Kind == ast.KindIndexedAccessType:
		return accessNode.IndexType
	case accessNode.Kind == ast.KindComputedPropertyName:
		return accessNode.Expression
	default:
		return accessNode
	}
}

func (c *Checker) isPatternLiteralPlaceholderType(type_ *Type) bool {
	if type_.flags&TypeFlagsIntersection != 0 {
		// Return true if the intersection consists of one or more placeholders and zero or
		// more object type tags.
		seenPlaceholder := false
		for _, t := range type_.AsIntersectionType().types {
			if t.flags&(TypeFlagsLiteral|TypeFlagsNullable) != 0 || c.isPatternLiteralPlaceholderType(t) {
				seenPlaceholder = true
			} else if t.flags&TypeFlagsObject == 0 {
				return false
			}
		}
		return seenPlaceholder
	}
	return type_.flags&(TypeFlagsAny|TypeFlagsString|TypeFlagsNumber|TypeFlagsBigInt) != 0 || c.isPatternLiteralType(type_)
}

func (c *Checker) isPatternLiteralType(t *Type) bool {
	// A pattern literal type is a template literal or a string mapping type that contains only
	// non-generic pattern literal placeholders.
	return t.flags&TypeFlagsTemplateLiteral != 0 && core.Every(t.AsTemplateLiteralType().types, c.isPatternLiteralPlaceholderType) || t.flags&TypeFlagsStringMapping != 0 && c.isPatternLiteralPlaceholderType(t.AsStringMappingType().type_)
}

func (c *Checker) isGenericStringLikeType(t *Type) bool {
	return t.flags&(TypeFlagsTemplateLiteral|TypeFlagsStringMapping) != 0 && !c.isPatternLiteralType(t)
}

func (c *Checker) isGenericType(t *Type) bool {
	return c.getGenericObjectFlags(t) != 0
}

func (c *Checker) isGenericObjectType(t *Type) bool {
	return c.getGenericObjectFlags(t)&ObjectFlagsIsGenericObjectType != 0
}

func (c *Checker) isGenericIndexType(t *Type) bool {
	return c.getGenericObjectFlags(t)&ObjectFlagsIsGenericIndexType != 0
}

func (c *Checker) getGenericObjectFlags(t *Type) ObjectFlags {
	if t.flags&TypeFlagsUnionOrIntersection != 0 {
		if t.AsUnionOrIntersectionType().objectFlags&ObjectFlagsIsGenericTypeComputed == 0 {
			t.AsUnionOrIntersectionType().objectFlags |= ObjectFlagsIsGenericTypeComputed | reduceLeft(t.AsUnionOrIntersectionType().types, func(flags number, t *Type) number {
				return flags | c.getGenericObjectFlags(t)
			}, 0)
		}
		return t.AsUnionOrIntersectionType().objectFlags & ObjectFlagsIsGenericType
	}
	if t.flags&TypeFlagsSubstitution != 0 {
		if t.AsSubstitutionType().objectFlags&ObjectFlagsIsGenericTypeComputed == 0 {
			t.AsSubstitutionType().objectFlags |= ObjectFlagsIsGenericTypeComputed | c.getGenericObjectFlags(t.AsSubstitutionType().baseType) | c.getGenericObjectFlags(t.AsSubstitutionType().constraint)
		}
		return t.AsSubstitutionType().objectFlags & ObjectFlagsIsGenericType
	}
	return (ifElse(t.flags&TypeFlagsInstantiableNonPrimitive != 0 || c.isGenericMappedType(t) || c.isGenericTupleType(t), ObjectFlagsIsGenericObjectType, 0)) | (ifElse(t.flags&(TypeFlagsInstantiableNonPrimitive|TypeFlagsIndex) != 0 || c.isGenericStringLikeType(t), ObjectFlagsIsGenericIndexType, 0))
}

func (c *Checker) getSimplifiedType(t *Type, writing bool) *Type {
	switch {
	case t.flags&TypeFlagsIndexedAccess != 0:
		return c.getSimplifiedIndexedAccessType(t.AsIndexedAccessType(), writing)
	case t.flags&TypeFlagsConditional != 0:
		return c.getSimplifiedConditionalType(t.AsConditionalType(), writing)
	default:
		return t
	}
}

func (c *Checker) distributeIndexOverObjectType(objectType *Type, indexType *Type, writing bool) *Type {
	// (T | U)[K] -> T[K] | U[K] (reading)
	// (T | U)[K] -> T[K] & U[K] (writing)
	// (T & U)[K] -> T[K] & U[K]
	if objectType.flags&TypeFlagsUnion != 0 || objectType.flags&TypeFlagsIntersection != 0 && !c.shouldDeferIndexType(objectType) {
		types := core.Map(objectType.AsUnionOrIntersectionType().types, func(t *Type) *Type {
			return c.getSimplifiedType(c.getIndexedAccessType(t, indexType), writing)
		})
		if objectType.flags&TypeFlagsIntersection != 0 || writing {
			return c.getIntersectionType(types)
		} else {
			return c.getUnionType(types)
		}
	}
}

func (c *Checker) distributeObjectOverIndexType(objectType *Type, indexType *Type, writing bool) *Type {
	// T[A | B] -> T[A] | T[B] (reading)
	// T[A | B] -> T[A] & T[B] (writing)
	if indexType.flags&TypeFlagsUnion != 0 {
		types := core.Map(indexType.AsUnionType().types, func(t *Type) *Type {
			return c.getSimplifiedType(c.getIndexedAccessType(objectType, t), writing)
		})
		if writing {
			return c.getIntersectionType(types)
		} else {
			return c.getUnionType(types)
		}
	}
}

// Transform an indexed access to a simpler form, if possible. Return the simpler form, or return
// the type itself if no transformation is possible. The writing flag indicates that the type is
// the target of an assignment.
func (c *Checker) getSimplifiedIndexedAccessType(t IndexedAccessType, writing bool) *Type {
	var cache /* TODO(TS-TO-GO) inferred type "simplifiedForWriting" | "simplifiedForReading" */ any
	if writing {
		cache = "simplifiedForWriting"
	} else {
		cache = "simplifiedForReading"
	}
	if t[cache] != nil {
		if t[cache] == c.circularConstraintType {
			return t
		} else {
			return t[cache]
		}
	}
	t[cache] = c.circularConstraintType
	// We recursively simplify the object type as it may in turn be an indexed access type. For example, with
	// '{ [P in T]: { [Q in U]: number } }[T][U]' we want to first simplify the inner indexed access type.
	objectType := c.getSimplifiedType(t.objectType, writing)
	indexType := c.getSimplifiedType(t.indexType, writing)
	// T[A | B] -> T[A] | T[B] (reading)
	// T[A | B] -> T[A] & T[B] (writing)
	distributedOverIndex := c.distributeObjectOverIndexType(objectType, indexType, writing)
	if distributedOverIndex != nil {
		t[cache] = distributedOverIndex
		return t[cache]
	}
	// Only do the inner distributions if the index can no longer be instantiated to cause index distribution again
	if indexType.flags&TypeFlagsInstantiable == 0 {
		// (T | U)[K] -> T[K] | U[K] (reading)
		// (T | U)[K] -> T[K] & U[K] (writing)
		// (T & U)[K] -> T[K] & U[K]
		distributedOverObject := c.distributeIndexOverObjectType(objectType, indexType, writing)
		if distributedOverObject != nil {
			t[cache] = distributedOverObject
			return t[cache]
		}
	}
	// So ultimately (reading):
	// ((A & B) | C)[K1 | K2] -> ((A & B) | C)[K1] | ((A & B) | C)[K2] -> (A & B)[K1] | C[K1] | (A & B)[K2] | C[K2] -> (A[K1] & B[K1]) | C[K1] | (A[K2] & B[K2]) | C[K2]

	// A generic tuple type indexed by a number exists only when the index type doesn't select a
	// fixed element. We simplify to either the combined type of all elements (when the index type
	// the actual number type) or to the combined type of all non-fixed elements.
	if c.isGenericTupleType(objectType) && indexType.flags&TypeFlagsNumberLike != 0 {
		elementType := c.getElementTypeOfSliceOfTupleType(objectType, ifElse(indexType.flags&TypeFlagsNumber != 0, 0, objectType.target.fixedLength), 0 /*endSkipCount*/, writing)
		if elementType != nil {
			t[cache] = elementType
			return t[cache]
		}
	}
	// If the object type is a mapped type { [P in K]: E }, where K is generic, or { [P in K as N]: E }, where
	// K is generic and N is assignable to P, instantiate E using a mapper that substitutes the index type for P.
	// For example, for an index access { [P in K]: Box<T[P]> }[X], we construct the type Box<T[X]>.
	if c.isGenericMappedType(objectType) {
		if c.getMappedTypeNameTypeKind(objectType) != MappedTypeNameTypeKindRemapping {
			t[cache] = c.mapType(c.substituteIndexedMappedType(objectType, t.indexType), func(t *Type) *Type {
				return c.getSimplifiedType(t, writing)
			})
			return t[cache]
		}
	}
	t[cache] = t
	return t[cache]
}

func (c *Checker) getSimplifiedConditionalType(t ConditionalType, writing bool) *Type {
	checkType := t.checkType
	extendsType := t.extendsType
	trueType := c.getTrueTypeFromConditionalType(t)
	falseType := c.getFalseTypeFromConditionalType(t)
	// Simplifications for types of the form `T extends U ? T : never` and `T extends U ? never : T`.
	if falseType.flags&TypeFlagsNever != 0 && c.getActualTypeVariable(trueType) == c.getActualTypeVariable(checkType) {
		if checkType.flags&TypeFlagsAny != 0 || c.isTypeAssignableTo(c.getRestrictiveInstantiation(checkType), c.getRestrictiveInstantiation(extendsType)) {
			return c.getSimplifiedType(trueType, writing)
		} else if c.isIntersectionEmpty(checkType, extendsType) {
			return c.neverType
		}
	} else if trueType.flags&TypeFlagsNever != 0 && c.getActualTypeVariable(falseType) == c.getActualTypeVariable(checkType) {
		if checkType.flags&TypeFlagsAny == 0 && c.isTypeAssignableTo(c.getRestrictiveInstantiation(checkType), c.getRestrictiveInstantiation(extendsType)) {
			return c.neverType
		} else if checkType.flags&TypeFlagsAny != 0 || c.isIntersectionEmpty(checkType, extendsType) {
			return c.getSimplifiedType(falseType, writing)
		}
	}
	return t
}

/**
 * Invokes union simplification logic to determine if an intersection is considered empty as a union constituent
 */

func (c *Checker) isIntersectionEmpty(type1 *Type, type2 *Type) bool {
	return c.getUnionType([]*Type{c.intersectTypes(type1, type2), c.neverType}).flags&TypeFlagsNever != 0
}

// Given an indexed access on a mapped type of the form { [P in K]: E }[X], return an instantiation of E where P is
// replaced with X. Since this simplification doesn't account for mapped type modifiers, add 'undefined' to the
// resulting type if the mapped type includes a '?' modifier or if the modifiers type indicates that some properties
// are optional. If the modifiers type is generic, conservatively estimate optionality by recursively looking for
// mapped types that include '?' modifiers.
func (c *Checker) substituteIndexedMappedType(objectType MappedType, index *Type) *Type {
	mapper := c.createTypeMapper([]TypeParameter{c.getTypeParameterFromMappedType(objectType)}, []*Type{index})
	templateMapper := c.combineTypeMappers(objectType.mapper, mapper)
	instantiatedTemplateType := c.instantiateType(c.getTemplateTypeFromMappedType(objectType.target.AsMappedType() || objectType), templateMapper)
	isOptional := c.getMappedTypeOptionality(objectType) > 0 || (ifElse(c.isGenericType(objectType), c.getCombinedMappedTypeOptionality(c.getModifiersTypeFromMappedType(objectType)) > 0, c.couldAccessOptionalProperty(objectType, index)))
	return c.addOptionality(instantiatedTemplateType, true /*isProperty*/, isOptional)
}

// Return true if an indexed access with the given object and index types could access an optional property.
func (c *Checker) couldAccessOptionalProperty(objectType *Type, indexType *Type) bool {
	indexConstraint := c.getBaseConstraintOfType(indexType)
	return indexConstraint != nil && core.Some(c.getPropertiesOfType(objectType), func(p *ast.Symbol) bool {
		return p.Flags&ast.SymbolFlagsOptional != 0 && c.isTypeAssignableTo(c.getLiteralTypeFromProperty(p, TypeFlagsStringOrNumberLiteralOrUnique), indexConstraint)
	})
}

func (c *Checker) getIndexedAccessType(objectType *Type, indexType *Type, accessFlags AccessFlags /*  = AccessFlags.None */, accessNode Union[ElementAccessExpression, IndexedAccessTypeNode, PropertyName, BindingName, SyntheticExpression], aliasSymbol *ast.Symbol, aliasTypeArguments []*Type) *Type {
	return c.getIndexedAccessTypeOrUndefined(objectType, indexType, accessFlags, accessNode, aliasSymbol, aliasTypeArguments) || (ifElse(accessNode != nil, c.errorType, c.unknownType))
}

func (c *Checker) indexTypeLessThan(indexType *Type, limit number) bool {
	return c.everyType(indexType, func(t *Type) bool {
		if t.flags&TypeFlagsStringOrNumberLiteral != 0 {
			propName := getPropertyNameFromType(t /* as StringLiteralType | NumberLiteralType */)
			if isNumericLiteralName(propName) {
				index := +propName
				return index >= 0 && index < limit
			}
		}
		return false
	})
}

func (c *Checker) getIndexedAccessTypeOrUndefined(objectType *Type, indexType *Type, accessFlags AccessFlags /*  = AccessFlags.None */, accessNode Union[ElementAccessExpression, IndexedAccessTypeNode, PropertyName, BindingName, SyntheticExpression], aliasSymbol *ast.Symbol, aliasTypeArguments []*Type) *Type {
	if objectType == c.wildcardType || indexType == c.wildcardType {
		return c.wildcardType
	}
	objectType = c.getReducedType(objectType)
	// If the object type has a string index signature and no other members we know that the result will
	// always be the type of that index signature and we can simplify accordingly.
	if c.isStringIndexSignatureOnlyType(objectType) && indexType.flags&TypeFlagsNullable == 0 && c.isTypeAssignableToKind(indexType, TypeFlagsString|TypeFlagsNumber) {
		indexType = c.stringType
	}
	// In noUncheckedIndexedAccess mode, indexed access operations that occur in an expression in a read position and resolve to
	// an index signature have 'undefined' included in their type.
	if c.compilerOptions.noUncheckedIndexedAccess && accessFlags&AccessFlagsExpressionPosition != 0 {
		accessFlags |= AccessFlagsIncludeUndefined
	}
	// If the index type is generic, or if the object type is generic and doesn't originate in an expression and
	// the operation isn't exclusively indexing the fixed (non-variadic) portion of a tuple type, we are performing
	// a higher-order index access where we cannot meaningfully access the properties of the object type. Note that
	// for a generic T and a non-generic K, we eagerly resolve T[K] if it originates in an expression. This is to
	// preserve backwards compatibility. For example, an element access 'this["foo"]' has always been resolved
	// eagerly using the constraint type of 'this' at the given location.
	if c.isGenericIndexType(indexType) || (ifElse(accessNode != nil && accessNode.Kind != ast.KindIndexedAccessType, c.isGenericTupleType(objectType) && !c.indexTypeLessThan(indexType, c.getTotalFixedElementCount(objectType.target)), c.isGenericObjectType(objectType) && !(c.isTupleType(objectType) && c.indexTypeLessThan(indexType, c.getTotalFixedElementCount(objectType.target))) || c.isGenericReducibleType(objectType))) {
		if objectType.flags&TypeFlagsAnyOrUnknown != 0 {
			return objectType
		}
		// Defer the operation by creating an indexed access type.
		persistentAccessFlags := accessFlags & AccessFlagsPersistent
		id := objectType.id + "," + indexType.id + "," + persistentAccessFlags + c.getAliasId(aliasSymbol, aliasTypeArguments)
		t := c.indexedAccessTypes.get(id)
		if !(t) {
			c.indexedAccessTypes.set(id /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type = createIndexedAccessType(objectType, indexType, persistentAccessFlags, aliasSymbol, aliasTypeArguments) */, TODO)
		}

		return t
	}
	// In the following we resolve T[K] to the type of the property in T selected by K.
	// We treat boolean as different from other unions to improve errors;
	// skipping straight to getPropertyTypeForIndexType gives errors with 'boolean' instead of 'true'.
	apparentObjectType := c.getReducedApparentType(objectType)
	if indexType.flags&TypeFlagsUnion != 0 && indexType.flags&TypeFlagsBoolean == 0 {
		var propTypes []*Type = []never{}
		wasMissingProp := false
		for _, t := range indexType.AsUnionType().types {
			propType := c.getPropertyTypeForIndexType(objectType, apparentObjectType, t, indexType, accessNode, accessFlags|(ifElse(wasMissingProp, AccessFlagsSuppressNoImplicitAnyError, 0)))
			if propType != nil {
				propTypes.push(propType)
			} else if accessNode == nil {
				// If there's no error node, we can immeditely stop, since error reporting is off
				return nil
			} else {
				// Otherwise we set a flag and return at the end of the loop so we still mark all errors
				wasMissingProp = true
			}
		}
		if wasMissingProp {
			return nil
		}
		if accessFlags&AccessFlagsWriting != 0 {
			return c.getIntersectionType(propTypes, IntersectionFlagsNone, aliasSymbol, aliasTypeArguments)
		} else {
			return c.getUnionType(propTypes, UnionReductionLiteral, aliasSymbol, aliasTypeArguments)
		}
	}
	return c.getPropertyTypeForIndexType(objectType, apparentObjectType, indexType, indexType, accessNode, accessFlags|AccessFlagsCacheSymbol|AccessFlagsReportDeprecated)
}

func (c *Checker) getTypeFromIndexedAccessTypeNode(node IndexedAccessTypeNode) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		objectType := c.getTypeFromTypeNode(node.ObjectType)
		indexType := c.getTypeFromTypeNode(node.IndexType)
		potentialAlias := c.getAliasSymbolForTypeNode(node)
		links.resolvedType = c.getIndexedAccessType(objectType, indexType, AccessFlagsNone, node, potentialAlias, c.getTypeArgumentsForAliasSymbol(potentialAlias))
	}
	return links.resolvedType
}

func (c *Checker) getTypeFromMappedTypeNode(node MappedTypeNode) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		t := c.createObjectType(ObjectFlagsMapped, node.Symbol).AsMappedType()
		t.declaration = node
		t.aliasSymbol = c.getAliasSymbolForTypeNode(node)
		t.aliasTypeArguments = c.getTypeArgumentsForAliasSymbol(t.aliasSymbol)
		links.resolvedType = t
		// Eagerly resolve the constraint type which forces an error if the constraint type circularly
		// references itself through one or more type aliases.
		c.getConstraintTypeFromMappedType(t)
	}
	return links.resolvedType
}

func (c *Checker) getActualTypeVariable(t *Type) *Type {
	if t.flags&TypeFlagsSubstitution != 0 {
		return c.getActualTypeVariable(t.AsSubstitutionType().baseType)
	}
	if t.flags&TypeFlagsIndexedAccess != 0 && (t.AsIndexedAccessType().objectType.flags&TypeFlagsSubstitution != 0 || t.AsIndexedAccessType().indexType.flags&TypeFlagsSubstitution != 0) {
		return c.getIndexedAccessType(c.getActualTypeVariable(t.AsIndexedAccessType().objectType), c.getActualTypeVariable(t.AsIndexedAccessType().indexType))
	}
	return t
}

func (c *Checker) isSimpleTupleType(node TypeNode) bool {
	return isTupleTypeNode(node) && length(node.Elements) > 0 && !core.Some(node.Elements, func(e /* TODO(TS-TO-GO) inferred type TypeNode | NamedTupleMember */ any) bool {
		return isOptionalTypeNode(e) || isRestTypeNode(e) || isNamedTupleMember(e) && e.QuestionToken != nil || e.DotDotDotToken != nil
	})
}

func (c *Checker) isDeferredType(t *Type, checkTuples bool) bool {
	return c.isGenericType(t) || checkTuples && c.isTupleType(t) && core.Some(c.getElementTypes(t), c.isGenericType)
}

func (c *Checker) getConditionalType(root ConditionalRoot, mapper *TypeMapper, forConstraint bool, aliasSymbol *ast.Symbol, aliasTypeArguments []*Type) *Type {
	var result TODO
	var extraTypes *[]*Type
	tailCount := 0
	// We loop here for an immediately nested conditional type in the false position, effectively treating
	// types of the form 'A extends B ? X : C extends D ? Y : E extends F ? Z : ...' as a single construct for
	// purposes of resolution. We also loop here when resolution of a conditional type ends in resolution of
	// another (or, through recursion, possibly the same) conditional type. In the potentially tail-recursive
	// cases we increment the tail recursion counter and stop after 1000 iterations.
	for true {
		if tailCount == 1000 {
			c.error(c.currentNode, Diagnostics.Type_instantiation_is_excessively_deep_and_possibly_infinite)
			return c.errorType
		}
		checkType := c.instantiateType(c.getActualTypeVariable(root.checkType), mapper)
		extendsType := c.instantiateType(root.extendsType, mapper)
		if checkType == c.errorType || extendsType == c.errorType {
			return c.errorType
		}
		if checkType == c.wildcardType || extendsType == c.wildcardType {
			return c.wildcardType
		}
		checkTypeNode := skipTypeParentheses(root.node.CheckType)
		extendsTypeNode := skipTypeParentheses(root.node.ExtendsType)
		// When the check and extends types are simple tuple types of the same arity, we defer resolution of the
		// conditional type when any tuple elements are generic. This is such that non-distributable conditional
		// types can be written `[X] extends [Y] ? ...` and be deferred similarly to `X extends Y ? ...`.
		checkTuples := c.isSimpleTupleType(checkTypeNode) && c.isSimpleTupleType(extendsTypeNode) && length(checkTypeNode.AsTupleTypeNode().Elements) == length(extendsTypeNode.AsTupleTypeNode().Elements)
		checkTypeDeferred := c.isDeferredType(checkType, checkTuples)
		var combinedMapper *TypeMapper
		if root.inferTypeParameters != nil {
			// When we're looking at making an inference for an infer type, when we get its constraint, it'll automagically be
			// instantiated with the context, so it doesn't need the mapper for the inference context - however the constraint
			// may refer to another _root_, _uncloned_ `infer` type parameter [1], or to something mapped by `mapper` [2].
			// [1] Eg, if we have `Foo<T, U extends T>` and `Foo<number, infer B>` - `B` is constrained to `T`, which, in turn, has been instantiated
			// as `number`
			// Conversely, if we have `Foo<infer A, infer B>`, `B` is still constrained to `T` and `T` is instantiated as `A`
			// [2] Eg, if we have `Foo<T, U extends T>` and `Foo<Q, infer B>` where `Q` is mapped by `mapper` into `number` - `B` is constrained to `T`
			// which is in turn instantiated as `Q`, which is in turn instantiated as `number`.
			// So we need to:
			//    * combine `context.nonFixingMapper` with `mapper` so their constraints can be instantiated in the context of `mapper` (otherwise they'd only get inference context information)
			//    * incorporate all of the component mappers into the combined mapper for the true and false members
			// This means we have two mappers that need applying:
			//    * The original `mapper` used to create this conditional
			//    * The mapper that maps the infer type parameter to its inference result (`context.mapper`)
			context := c.createInferenceContext(root.inferTypeParameters, nil /*signature*/, InferenceFlagsNone)
			if mapper != nil {
				context.nonFixingMapper = c.combineTypeMappers(context.nonFixingMapper, mapper)
			}
			if !checkTypeDeferred {
				// We don't want inferences from constraints as they may cause us to eagerly resolve the
				// conditional type instead of deferring resolution. Also, we always want strict function
				// types rules (i.e. proper contravariance) for inferences.
				c.inferTypes(context.inferences, checkType, extendsType, InferencePriorityNoConstraints|InferencePriorityAlwaysStrict)
			}
			// It's possible for 'infer T' type paramteters to be given uninstantiated constraints when the
			// those type parameters are used in type references (see getInferredTypeParameterConstraint). For
			// that reason we need context.mapper to be first in the combined mapper. See #42636 for examples.
			if mapper != nil {
				combinedMapper = c.combineTypeMappers(context.mapper, mapper)
			} else {
				combinedMapper = context.mapper
			}
		}
		// Instantiate the extends type including inferences for 'infer T' type parameters
		var inferredExtendsType *Type
		if combinedMapper != nil {
			inferredExtendsType = c.instantiateType(root.extendsType, combinedMapper)
		} else {
			inferredExtendsType = extendsType
		}
		// We attempt to resolve the conditional type only when the check and extends types are non-generic
		if !checkTypeDeferred && !c.isDeferredType(inferredExtendsType, checkTuples) {
			// Return falseType for a definitely false extends check. We check an instantiations of the two
			// types with type parameters mapped to the wildcard type, the most permissive instantiations
			// possible (the wildcard type is assignable to and from all types). If those are not related,
			// then no instantiations will be and we can just return the false branch type.
			if inferredExtendsType.flags&TypeFlagsAnyOrUnknown == 0 && (checkType.flags&TypeFlagsAny != 0 || !c.isTypeAssignableTo(c.getPermissiveInstantiation(checkType), c.getPermissiveInstantiation(inferredExtendsType))) {
				// Return union of trueType and falseType for 'any' since it matches anything. Furthermore, for a
				// distributive conditional type applied to the constraint of a type variable, include trueType if
				// there are possible values of the check type that are also possible values of the extends type.
				// We use a reverse assignability check as it is less expensive than the comparable relationship
				// and avoids false positives of a non-empty intersection check.
				if checkType.flags&TypeFlagsAny != 0 || forConstraint && inferredExtendsType.flags&TypeFlagsNever == 0 && c.someType(c.getPermissiveInstantiation(inferredExtendsType), func(t *Type) bool {
					return c.isTypeAssignableTo(t, c.getPermissiveInstantiation(checkType))
				}) {
					(extraTypes || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: extraTypes = [] */ TODO)).push(c.instantiateType(c.getTypeFromTypeNode(root.node.TrueType), combinedMapper || mapper))
				}
				// If falseType is an immediately nested conditional type that isn't distributive or has an
				// identical checkType, switch to that type and loop.
				falseType := c.getTypeFromTypeNode(root.node.FalseType)
				if falseType.flags&TypeFlagsConditional != 0 {
					newRoot := falseType.AsConditionalType().root
					if newRoot.node.Parent == root.node && (!newRoot.isDistributive || newRoot.checkType == root.checkType) {
						root = newRoot
						continue
					}
					if canTailRecurse(falseType, mapper) {
						continue
					}
				}
				result = c.instantiateType(falseType, mapper)
				break
			}
			// Return trueType for a definitely true extends check. We check instantiations of the two
			// types with type parameters mapped to their restrictive form, i.e. a form of the type parameter
			// that has no constraint. This ensures that, for example, the type
			//   type Foo<T extends { x: any }> = T extends { x: string } ? string : number
			// doesn't immediately resolve to 'string' instead of being deferred.
			if inferredExtendsType.flags&TypeFlagsAnyOrUnknown != 0 || c.isTypeAssignableTo(c.getRestrictiveInstantiation(checkType), c.getRestrictiveInstantiation(inferredExtendsType)) {
				trueType := c.getTypeFromTypeNode(root.node.TrueType)
				trueMapper := combinedMapper || mapper
				if canTailRecurse(trueType, trueMapper) {
					continue
				}
				result = c.instantiateType(trueType, trueMapper)
				break
			}
		}
		// Return a deferred type for a check that is neither definitely true nor definitely false
		result = c.createType(TypeFlagsConditional).AsConditionalType()
		result.root = root
		result.checkType = c.instantiateType(root.checkType, mapper)
		result.extendsType = c.instantiateType(root.extendsType, mapper)
		result.mapper = mapper
		result.combinedMapper = combinedMapper
		result.aliasSymbol = aliasSymbol || root.aliasSymbol
		if aliasSymbol != nil {
			result.aliasTypeArguments = aliasTypeArguments
		} else {
			result.aliasTypeArguments = c.instantiateTypes(root.aliasTypeArguments, mapper)
		}
		// TODO: GH#18217
		break
	}
	if extraTypes != nil {
		return c.getUnionType(append(extraTypes, result))
	} else {
		return result
	}
	// We tail-recurse for generic conditional types that (a) have not already been evaluated and cached, and
	// (b) are non distributive, have a check type that is unaffected by instantiation, or have a non-union check
	// type. Note that recursion is possible only through aliased conditional types, so we only increment the tail
	// recursion counter for those.
	canTailRecurse := func(newType *Type, newMapper *TypeMapper) bool {
		if newType.flags&TypeFlagsConditional != 0 && newMapper != nil {
			newRoot := newType.AsConditionalType().root
			if newRoot.outerTypeParameters != nil {
				typeParamMapper := c.combineTypeMappers(newType.AsConditionalType().mapper, newMapper)
				typeArguments := core.Map(newRoot.outerTypeParameters, func(t TypeParameter) *Type {
					return c.getMappedType(t, typeParamMapper)
				})
				newRootMapper := c.createTypeMapper(newRoot.outerTypeParameters, typeArguments)
				var newCheckType *Type
				if newRoot.isDistributive {
					newCheckType = c.getMappedType(newRoot.checkType, newRootMapper)
				} else {
					newCheckType = nil
				}
				if newCheckType == nil || newCheckType == newRoot.checkType || newCheckType.flags&(TypeFlagsUnion|TypeFlagsNever) == 0 {
					root = newRoot
					mapper = newRootMapper
					aliasSymbol = nil
					aliasTypeArguments = nil
					if newRoot.aliasSymbol != nil {
						tailCount++
					}
					return true
				}
			}
		}
		return false
	}

}

func (c *Checker) getTrueTypeFromConditionalType(t ConditionalType) *Type {
	return t.resolvedTrueType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.resolvedTrueType = instantiateType(getTypeFromTypeNode(type.root.node.trueType), type.mapper) */ TODO)
}

func (c *Checker) getFalseTypeFromConditionalType(t ConditionalType) *Type {
	return t.resolvedFalseType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.resolvedFalseType = instantiateType(getTypeFromTypeNode(type.root.node.falseType), type.mapper) */ TODO)
}

func (c *Checker) getInferredTrueTypeFromConditionalType(t ConditionalType) *Type {
	return t.resolvedInferredTrueType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.resolvedInferredTrueType = type.combinedMapper ? instantiateType(getTypeFromTypeNode(type.root.node.trueType), type.combinedMapper) : getTrueTypeFromConditionalType(type) */ TODO)
}

func (c *Checker) getInferTypeParameters(node ConditionalTypeNode) *[]TypeParameter {
	var result *[]TypeParameter
	if node.Locals != nil {
		node.Locals.forEach(func(symbol *ast.Symbol) {
			if symbol.Flags&ast.SymbolFlagsTypeParameter != 0 {
				result = append(result, c.getDeclaredTypeOfSymbol(symbol))
			}
		})
	}
	return result
}

func (c *Checker) isDistributionDependent(root ConditionalRoot) bool {
	return root.isDistributive && (c.isTypeParameterPossiblyReferenced(root.checkType.AsTypeParameter(), root.node.TrueType) || c.isTypeParameterPossiblyReferenced(root.checkType.AsTypeParameter(), root.node.FalseType))
}

func (c *Checker) getTypeFromConditionalTypeNode(node ConditionalTypeNode) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		checkType := c.getTypeFromTypeNode(node.CheckType)
		aliasSymbol := c.getAliasSymbolForTypeNode(node)
		aliasTypeArguments := c.getTypeArgumentsForAliasSymbol(aliasSymbol)
		allOuterTypeParameters := c.getOuterTypeParameters(node, true /*includeThisTypes*/)
		var outerTypeParameters *[]TypeParameter
		if aliasTypeArguments != nil {
			outerTypeParameters = allOuterTypeParameters
		} else {
			outerTypeParameters = core.Filter(allOuterTypeParameters, func(tp TypeParameter) bool {
				return c.isTypeParameterPossiblyReferenced(tp, node)
			})
		}
		var root ConditionalRoot = ConditionalRoot{
			node:                node,
			checkType:           checkType,
			extendsType:         c.getTypeFromTypeNode(node.ExtendsType),
			isDistributive:      checkType.flags&TypeFlagsTypeParameter != 0,
			inferTypeParameters: c.getInferTypeParameters(node),
			outerTypeParameters: outerTypeParameters,
			instantiations:      nil,
			aliasSymbol:         aliasSymbol,
			aliasTypeArguments:  aliasTypeArguments,
		}
		links.resolvedType = c.getConditionalType(root, nil /*mapper*/, false /*forConstraint*/)
		if outerTypeParameters != nil {
			root.instantiations = NewMap[string, *Type]()
			root.instantiations.set(c.getTypeListId(outerTypeParameters), links.resolvedType)
		}
	}
	return links.resolvedType
}

func (c *Checker) getTypeFromInferTypeNode(node InferTypeNode) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		links.resolvedType = c.getDeclaredTypeOfTypeParameter(c.getSymbolOfDeclaration(node.TypeParameter))
	}
	return links.resolvedType
}

func (c *Checker) getIdentifierChain(node EntityName) []Identifier {
	if isIdentifier(node) {
		return []Identifier{node}
	} else {
		return append(c.getIdentifierChain(node.Left), node.Right)
	}
}

func (c *Checker) getTypeFromImportTypeNode(node ImportTypeNode) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		if !isLiteralImportTypeNode(node) {
			c.error(node.Argument, Diagnostics.String_literal_expected)
			links.resolvedSymbol = c.unknownSymbol
			links.resolvedType = c.errorType
			return links.resolvedType
		}
		var targetMeaning number
		switch {
		case node.IsTypeOf:
			targetMeaning = ast.SymbolFlagsValue
		case node.Flags&ast.NodeFlagsJSDoc != 0:
			targetMeaning = ast.SymbolFlagsValue | ast.SymbolFlagsType
		default:
			targetMeaning = ast.SymbolFlagsType
		}
		// TODO: Future work: support unions/generics/whatever via a deferred import-type
		innerModuleSymbol := c.resolveExternalModuleName(node, node.Argument.Literal)
		if innerModuleSymbol == nil {
			links.resolvedSymbol = c.unknownSymbol
			links.resolvedType = c.errorType
			return links.resolvedType
		}
		isExportEquals := innerModuleSymbol.Exports. /* ? */ get(InternalSymbolNameExportEquals) != nil
		moduleSymbol := c.resolveExternalModuleSymbol(innerModuleSymbol, false /*dontResolveAlias*/)
		if !nodeIsMissing(node.Qualifier) {
			var nameStack []Identifier = c.getIdentifierChain(node.Qualifier)
			currentNamespace := moduleSymbol
			var current *Identifier
			for /* TODO(TS-TO-GO) EqualsToken BinaryExpression: current = nameStack.shift() */ TODO != nil {
				var meaning number
				if nameStack.length != 0 {
					meaning = ast.SymbolFlagsNamespace
				} else {
					meaning = targetMeaning
				}
				// typeof a.b.c is normally resolved using `checkExpression` which in turn defers to `checkQualifiedName`
				// That, in turn, ultimately uses `getPropertyOfType` on the type of the symbol, which differs slightly from
				// the `exports` lookup process that only looks up namespace members which is used for most type references
				mergedResolvedSymbol := c.getMergedSymbol(c.resolveSymbol(currentNamespace))
				var symbolFromVariable *ast.Symbol
				if node.IsTypeOf || isInJSFile(node) && isExportEquals {
					symbolFromVariable = c.getPropertyOfType(c.getTypeOfSymbol(mergedResolvedSymbol), current.EscapedText, false /*skipObjectFunctionPropertyAugment*/, true /*includeTypeOnlyMembers*/)
				} else {
					symbolFromVariable = nil
				}
				var symbolFromModule *ast.Symbol
				if node.IsTypeOf {
					symbolFromModule = nil
				} else {
					symbolFromModule = c.getSymbol(c.getExportsOfSymbol(mergedResolvedSymbol), current.EscapedText, meaning)
				}
				next := ifNotNilElse(symbolFromModule, symbolFromVariable)
				if next == nil {
					c.error(current, Diagnostics.Namespace_0_has_no_exported_member_1, c.getFullyQualifiedName(currentNamespace), declarationNameToString(current))
					links.resolvedType = c.errorType
					return links.resolvedType
				}
				c.getNodeLinks(current).resolvedSymbol = next
				c.getNodeLinks(current.Parent).resolvedSymbol = next
				currentNamespace = next
			}
			links.resolvedType = c.resolveImportSymbolType(node, links, currentNamespace, targetMeaning)
		} else {
			if moduleSymbol.Flags&targetMeaning != 0 {
				links.resolvedType = c.resolveImportSymbolType(node, links, moduleSymbol, targetMeaning)
			} else {
				var errorMessage any
				if targetMeaning == ast.SymbolFlagsValue {
					errorMessage = Diagnostics.Module_0_does_not_refer_to_a_value_but_is_used_as_a_value_here
				} else {
					errorMessage = Diagnostics.Module_0_does_not_refer_to_a_type_but_is_used_as_a_type_here_Did_you_mean_typeof_import_0
				}

				c.error(node, errorMessage, node.Argument.Literal.Text)

				links.resolvedSymbol = c.unknownSymbol
				links.resolvedType = c.errorType
			}
		}
	}
	return links.resolvedType
}

func (c *Checker) resolveImportSymbolType(node ImportTypeNode, links NodeLinks, symbol *ast.Symbol, meaning SymbolFlags) *Type {
	resolvedSymbol := c.resolveSymbol(symbol)
	links.resolvedSymbol = resolvedSymbol
	if meaning == ast.SymbolFlagsValue {
		return c.getInstantiationExpressionType(c.getTypeOfSymbol(symbol), node)
		// intentionally doesn't use resolved symbol so type is cached as expected on the alias
	} else {
		return c.getTypeReferenceType(node, resolvedSymbol)
		// getTypeReferenceType doesn't handle aliases - it must get the resolved symbol
	}
}

func (c *Checker) getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node Union[TypeLiteralNode, FunctionOrConstructorTypeNode, JSDocTypeLiteral, JSDocFunctionType, JSDocSignature]) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		// Deferred resolution of members is handled by resolveObjectTypeMembers
		aliasSymbol := c.getAliasSymbolForTypeNode(node)
		if c.getMembersOfSymbol(node.Symbol).size == 0 && aliasSymbol == nil {
			links.resolvedType = c.emptyTypeLiteralType
		} else {
			t := c.createObjectType(ObjectFlagsAnonymous, node.Symbol)
			t.aliasSymbol = aliasSymbol
			t.aliasTypeArguments = c.getTypeArgumentsForAliasSymbol(aliasSymbol)
			if isJSDocTypeLiteral(node) && node.IsArrayType {
				t = c.createArrayType(t)
			}
			links.resolvedType = t
		}
	}
	return links.resolvedType
}

func (c *Checker) getAliasSymbolForTypeNode(node *ast.Node) *ast.Symbol {
	host := node.Parent
	for isParenthesizedTypeNode(host) || isJSDocTypeExpression(host) || isTypeOperatorNode(host) && host.Operator == ast.KindReadonlyKeyword {
		host = host.Parent
	}
	if isTypeAlias(host) {
		return c.getSymbolOfDeclaration(host)
	} else {
		return nil
	}
}

func (c *Checker) getTypeArgumentsForAliasSymbol(symbol *ast.Symbol) *[]TypeParameter {
	if symbol != nil {
		return c.getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol)
	} else {
		return nil
	}
}

func (c *Checker) isNonGenericObjectType(t *Type) bool {
	return t.flags&TypeFlagsObject != 0 && !c.isGenericMappedType(t)
}

func (c *Checker) isEmptyObjectTypeOrSpreadsIntoEmptyObject(t *Type) bool {
	return c.isEmptyObjectType(t) || t.flags&(TypeFlagsNull|TypeFlagsUndefined|TypeFlagsBooleanLike|TypeFlagsNumberLike|TypeFlagsBigIntLike|TypeFlagsStringLike|TypeFlagsEnumLike|TypeFlagsNonPrimitive|TypeFlagsIndex) != 0
}

func (c *Checker) tryMergeUnionOfObjectTypeAndEmptyObject(t *Type, readonly bool) *Type {
	if t.flags&TypeFlagsUnion == 0 {
		return t
	}
	if core.Every(t.AsUnionType().types, c.isEmptyObjectTypeOrSpreadsIntoEmptyObject) {
		return core.Find(t.AsUnionType().types, c.isEmptyObjectType) || c.emptyObjectType
	}
	firstType := core.Find(t.AsUnionType().types, func(t *Type) bool {
		return !c.isEmptyObjectTypeOrSpreadsIntoEmptyObject(t)
	})
	if firstType == nil {
		return t
	}
	secondType := core.Find(t.AsUnionType().types, func(t *Type) bool {
		return t != firstType && !c.isEmptyObjectTypeOrSpreadsIntoEmptyObject(t)
	})
	if secondType != nil {
		return t
	}
	return getAnonymousPartialType(firstType)

	getAnonymousPartialType := func(t *Type) ResolvedType {
		// gets the type as if it had been spread, but where everything in the spread is made optional
		members := createSymbolTable()
		for _, prop := range c.getPropertiesOfType(t) {
			if getDeclarationModifierFlagsFromSymbol(prop)&(ast.ModifierFlagsPrivate|ast.ModifierFlagsProtected) != 0 {
				// do nothing, skip privates
			} else if c.isSpreadableProperty(prop) {
				isSetonlyAccessor := prop.Flags&ast.SymbolFlagsSetAccessor && prop.Flags&ast.SymbolFlagsGetAccessor == 0
				flags := ast.SymbolFlagsProperty | ast.SymbolFlagsOptional
				result := c.createSymbol(flags, prop.EscapedName, c.getIsLateCheckFlag(prop)|(ifElse(readonly, ast.CheckFlagsReadonly, 0)))
				if isSetonlyAccessor {
					result.Links.type_ = c.undefinedType
				} else {
					result.Links.type_ = c.addOptionality(c.getTypeOfSymbol(prop), true /*isProperty*/)
				}
				result.Declarations = prop.Declarations
				result.Links.nameType = c.getSymbolLinks(prop).nameType
				result.Links.syntheticOrigin = prop
				members.set(prop.EscapedName, result)
			}
		}
		spread := c.createAnonymousType(t.symbol, members, emptyArray, emptyArray, c.getIndexInfosOfType(t))
		spread.objectFlags |= ObjectFlagsObjectLiteral | ObjectFlagsContainsObjectOrArrayLiteral
		return spread
	}

}

/**
 * Since the source of spread types are object literals, which are not binary,
 * this function should be called in a left folding style, with left = previous result of getSpreadType
 * and right = the new element to be spread.
 */

func (c *Checker) getSpreadType(left *Type, right *Type, symbol *ast.Symbol, objectFlags ObjectFlags, readonly bool) *Type {
	if left.flags&TypeFlagsAny != 0 || right.flags&TypeFlagsAny != 0 {
		return c.anyType
	}
	if left.flags&TypeFlagsUnknown != 0 || right.flags&TypeFlagsUnknown != 0 {
		return c.unknownType
	}
	if left.flags&TypeFlagsNever != 0 {
		return right
	}
	if right.flags&TypeFlagsNever != 0 {
		return left
	}
	left = c.tryMergeUnionOfObjectTypeAndEmptyObject(left, readonly)
	if left.flags&TypeFlagsUnion != 0 {
		if c.checkCrossProductUnion([]*Type{left, right}) {
			return c.mapType(left, func(t *Type) *Type {
				return c.getSpreadType(t, right, symbol, objectFlags, readonly)
			})
		} else {
			return c.errorType
		}
	}
	right = c.tryMergeUnionOfObjectTypeAndEmptyObject(right, readonly)
	if right.flags&TypeFlagsUnion != 0 {
		if c.checkCrossProductUnion([]*Type{left, right}) {
			return c.mapType(right, func(t *Type) *Type {
				return c.getSpreadType(left, t, symbol, objectFlags, readonly)
			})
		} else {
			return c.errorType
		}
	}
	if right.flags&(TypeFlagsBooleanLike|TypeFlagsNumberLike|TypeFlagsBigIntLike|TypeFlagsStringLike|TypeFlagsEnumLike|TypeFlagsNonPrimitive|TypeFlagsIndex) != 0 {
		return left
	}

	if c.isGenericObjectType(left) || c.isGenericObjectType(right) {
		if c.isEmptyObjectType(left) {
			return right
		}
		// When the left type is an intersection, we may need to merge the last constituent of the
		// intersection with the right type. For example when the left type is 'T & { a: string }'
		// and the right type is '{ b: string }' we produce 'T & { a: string, b: string }'.
		if left.flags&TypeFlagsIntersection != 0 {
			types := left.AsIntersectionType().types
			lastLeft := types[types.length-1]
			if c.isNonGenericObjectType(lastLeft) && c.isNonGenericObjectType(right) {
				return c.getIntersectionType(core.Concatenate(types.slice(0, types.length-1), []*Type{c.getSpreadType(lastLeft, right, symbol, objectFlags, readonly)}))
			}
		}
		return c.getIntersectionType([]*Type{left, right})
	}

	members := createSymbolTable()
	skippedPrivateMembers := NewSet[string]()
	var indexInfos []IndexInfo
	if left == c.emptyObjectType {
		indexInfos = c.getIndexInfosOfType(right)
	} else {
		indexInfos = c.getUnionIndexInfos([]*Type{left, right})
	}

	for _, rightProp := range c.getPropertiesOfType(right) {
		if getDeclarationModifierFlagsFromSymbol(rightProp)&(ast.ModifierFlagsPrivate|ast.ModifierFlagsProtected) != 0 {
			skippedPrivateMembers.add(rightProp.EscapedName)
		} else if c.isSpreadableProperty(rightProp) {
			members.set(rightProp.EscapedName, c.getSpreadSymbol(rightProp, readonly))
		}
	}

	for _, leftProp := range c.getPropertiesOfType(left) {
		if skippedPrivateMembers.has(leftProp.EscapedName) || !c.isSpreadableProperty(leftProp) {
			continue
		}
		if members.has(leftProp.EscapedName) {
			rightProp := members.get(leftProp.EscapedName)
			rightType := c.getTypeOfSymbol(rightProp)
			if rightProp.Flags&ast.SymbolFlagsOptional != 0 {
				declarations := core.Concatenate(leftProp.Declarations, rightProp.Declarations)
				flags := ast.SymbolFlagsProperty | (leftProp.Flags & ast.SymbolFlagsOptional)
				result := c.createSymbol(flags, leftProp.EscapedName)
				// Optimization: avoid calculating the union type if spreading into the exact same type.
				// This is common, e.g. spreading one options bag into another where the bags have the
				// same type, or have properties which overlap. If the unions are large, it may turn out
				// to be expensive to perform subtype reduction.
				leftType := c.getTypeOfSymbol(leftProp)
				leftTypeWithoutUndefined := c.removeMissingOrUndefinedType(leftType)
				rightTypeWithoutUndefined := c.removeMissingOrUndefinedType(rightType)
				if leftTypeWithoutUndefined == rightTypeWithoutUndefined {
					result.Links.type_ = leftType
				} else {
					result.Links.type_ = c.getUnionType([]*Type{leftType, rightTypeWithoutUndefined}, UnionReductionSubtype)
				}
				result.Links.leftSpread = leftProp
				result.Links.rightSpread = rightProp
				result.Declarations = declarations
				result.Links.nameType = c.getSymbolLinks(leftProp).nameType
				members.set(leftProp.EscapedName, result)
			}
		} else {
			members.set(leftProp.EscapedName, c.getSpreadSymbol(leftProp, readonly))
		}
	}

	spread := c.createAnonymousType(symbol, members, emptyArray, emptyArray, core.SameMap(indexInfos, func(info IndexInfo) IndexInfo {
		return c.getIndexInfoWithReadonly(info, readonly)
	}))
	spread.objectFlags |= ObjectFlagsObjectLiteral | ObjectFlagsContainsObjectOrArrayLiteral | ObjectFlagsContainsSpread | objectFlags
	return spread
}

/** We approximate own properties as non-methods plus methods that are inside the object literal */

func (c *Checker) isSpreadableProperty(prop *ast.Symbol) bool {
	return !core.Some(prop.Declarations, isPrivateIdentifierClassElementDeclaration) && (prop.Flags&(ast.SymbolFlagsMethod|ast.SymbolFlagsGetAccessor|ast.SymbolFlagsSetAccessor) == 0 || !prop.Declarations. /* ? */ some(func(decl Declaration) bool {
		return isClassLike(decl.Parent)
	}))
}

func (c *Checker) getSpreadSymbol(prop *ast.Symbol, readonly bool) *ast.Symbol {
	isSetonlyAccessor := prop.Flags&ast.SymbolFlagsSetAccessor && prop.Flags&ast.SymbolFlagsGetAccessor == 0
	if !isSetonlyAccessor && readonly == c.isReadonlySymbol(prop) {
		return prop
	}
	flags := ast.SymbolFlagsProperty | (prop.Flags & ast.SymbolFlagsOptional)
	result := c.createSymbol(flags, prop.EscapedName, c.getIsLateCheckFlag(prop)|(ifElse(readonly, ast.CheckFlagsReadonly, 0)))
	if isSetonlyAccessor {
		result.Links.type_ = c.undefinedType
	} else {
		result.Links.type_ = c.getTypeOfSymbol(prop)
	}
	result.Declarations = prop.Declarations
	result.Links.nameType = c.getSymbolLinks(prop).nameType
	result.Links.syntheticOrigin = prop
	return result
}

func (c *Checker) getIndexInfoWithReadonly(info IndexInfo, readonly bool) IndexInfo {
	if info.isReadonly != readonly {
		return c.createIndexInfo(info.keyType, info.type_, readonly, info.declaration)
	} else {
		return info
	}
}

func (c *Checker) createLiteralType(flags TypeFlags, value Union[string, number, PseudoBigInt], symbol *ast.Symbol, regularType LiteralType) LiteralType {
	t := c.createTypeWithSymbol(flags, symbol).AsLiteralType()
	t.value = value
	t.regularType = regularType || t
	return t
}

func (c *Checker) getFreshTypeOfLiteralType(t *Type) *Type {
	if t.flags&TypeFlagsFreshable != 0 {
		if !t.AsFreshableType().freshType {
			freshType := c.createLiteralType(t.flags, t.AsLiteralType().value, t.AsLiteralType().symbol, t.AsLiteralType())
			freshType.freshType = freshType
			t.AsFreshableType().freshType = freshType
		}
		return t.AsFreshableType().freshType
	}
	return t
}

func (c *Checker) getRegularTypeOfLiteralType(t *Type) *Type {
	switch {
	case t.flags&TypeFlagsFreshable != 0:
		return t.AsFreshableType().regularType
	case t.flags&TypeFlagsUnion != 0:
		return (t.AsUnionType().regularType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: (type as UnionType).regularType = mapType(type, getRegularTypeOfLiteralType) as UnionType */ TODO))
	default:
		return t
	}
}

func (c *Checker) isFreshLiteralType(t *Type) bool {
	return t.flags&TypeFlagsFreshable != 0 && t.AsLiteralType().freshType == t
}

func (c *Checker) getStringLiteralType(value string) StringLiteralType {
	var t TODO
	return c.stringLiteralTypes.get(value) || ( /* TODO(TS-TO-GO) CommaToken BinaryExpression: stringLiteralTypes.set(value, type = createLiteralType(TypeFlags.StringLiteral, value) as StringLiteralType), type */ TODO)
}

func (c *Checker) getNumberLiteralType(value number) NumberLiteralType {
	var t TODO
	return c.numberLiteralTypes.get(value) || ( /* TODO(TS-TO-GO) CommaToken BinaryExpression: numberLiteralTypes.set(value, type = createLiteralType(TypeFlags.NumberLiteral, value) as NumberLiteralType), type */ TODO)
}

func (c *Checker) getBigIntLiteralType(value PseudoBigInt) BigIntLiteralType {
	var t TODO
	key := pseudoBigIntToString(value)
	return c.bigIntLiteralTypes.get(key) || ( /* TODO(TS-TO-GO) CommaToken BinaryExpression: bigIntLiteralTypes.set(key, type = createLiteralType(TypeFlags.BigIntLiteral, value) as BigIntLiteralType), type */ TODO)
}

func (c *Checker) getEnumLiteralType(value Union[string, number], enumId number, symbol *ast.Symbol) LiteralType {
	var t TODO
	key := __TEMPLATE__(enumId, ifElse( /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof value */ TODO == "string", "@", "#"), value)
	flags := TypeFlagsEnumLiteral | (ifElse( /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof value */ TODO == "string", TypeFlagsStringLiteral, TypeFlagsNumberLiteral))
	return c.enumLiteralTypes.get(key) || ( /* TODO(TS-TO-GO) CommaToken BinaryExpression: enumLiteralTypes.set(key, type = createLiteralType(flags, value, symbol)), type */ TODO)
}

func (c *Checker) getTypeFromLiteralTypeNode(node LiteralTypeNode) *Type {
	if node.Literal.Kind == ast.KindNullKeyword {
		return c.nullType
	}
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		links.resolvedType = c.getRegularTypeOfLiteralType(c.checkExpression(node.Literal))
	}
	return links.resolvedType
}

func (c *Checker) createUniqueESSymbolType(symbol *ast.Symbol) UniqueESSymbolType {
	t := c.createTypeWithSymbol(TypeFlagsUniqueESSymbol, symbol).AsUniqueESSymbolType()
	t.escapedName = __TEMPLATE__("__@", t.symbol.EscapedName, "@", getSymbolId(t.symbol)).(string)
	return t
}

func (c *Checker) getESSymbolLikeTypeForNode(node *ast.Node) *Type {
	if isInJSFile(node) && isJSDocTypeExpression(node) {
		host := getJSDocHost(node)
		if host != nil {
			node = getSingleVariableOfVariableStatement(host) || host
		}
	}
	if isValidESSymbolDeclaration(node) {
		var symbol *ast.Symbol
		if isCommonJsExportPropertyAssignment(node) {
			symbol = c.getSymbolOfNode(node.AsBinaryExpression().Left)
		} else {
			symbol = c.getSymbolOfNode(node)
		}
		if symbol != nil {
			links := c.getSymbolLinks(symbol)
			return links.uniqueESSymbolType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.uniqueESSymbolType = createUniqueESSymbolType(symbol) */ TODO)
		}
	}
	return c.esSymbolType
}

func (c *Checker) getThisType(node *ast.Node) *Type {
	container := getThisContainer(node, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)
	parent := container && container.Parent
	if parent && (isClassLike(parent) || parent.Kind == ast.KindInterfaceDeclaration) {
		if !isStatic(container) && (!isConstructorDeclaration(container) || isNodeDescendantOf(node, container.Body)) {
			return c.getDeclaredTypeOfClassOrInterface(c.getSymbolOfDeclaration(parent /* as ClassLikeDeclaration | InterfaceDeclaration */)).thisType
		}
	}

	// inside x.prototype = { ... }
	if parent && isObjectLiteralExpression(parent) && isBinaryExpression(parent.Parent) && getAssignmentDeclarationKind(parent.Parent) == AssignmentDeclarationKindPrototype {
		return c.getDeclaredTypeOfClassOrInterface(c.getSymbolOfNode(parent.Parent.Left).Parent).thisType
	}
	// /** @return {this} */
	// x.prototype.m = function() { ... }
	var host *SignatureDeclaration
	if node.Flags&ast.NodeFlagsJSDoc != 0 {
		host = getHostSignatureFromJSDoc(node)
	} else {
		host = nil
	}
	if host != nil && isFunctionExpression(host) && isBinaryExpression(host.Parent) && getAssignmentDeclarationKind(host.Parent) == AssignmentDeclarationKindPrototypeProperty {
		return c.getDeclaredTypeOfClassOrInterface(c.getSymbolOfNode(host.Parent.Left).Parent).thisType
	}
	// inside constructor function C() { ... }
	if c.isJSConstructor(container) && isNodeDescendantOf(node, container.Body) {
		return c.getDeclaredTypeOfClassOrInterface(c.getSymbolOfDeclaration(container)).thisType
	}
	c.error(node, Diagnostics.A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface)
	return c.errorType
}

func (c *Checker) getTypeFromThisTypeNode(node Union[ThisExpression, ThisTypeNode]) *Type {
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		links.resolvedType = c.getThisType(node)
	}
	return links.resolvedType
}

func (c *Checker) getTypeFromRestTypeNode(node Union[RestTypeNode, NamedTupleMember]) *Type {
	return c.getTypeFromTypeNode(c.getArrayElementTypeNode(node.Type_) || node.Type_)
}

func (c *Checker) getArrayElementTypeNode(node TypeNode) *TypeNode {
	switch node.Kind {
	case ast.KindParenthesizedType:
		return c.getArrayElementTypeNode(node.AsParenthesizedTypeNode().Type_)
	case ast.KindTupleType:
		if node.AsTupleTypeNode().Elements.length == 1 {
			node = node.AsTupleTypeNode().Elements[0]
			if node.Kind == ast.KindRestType || node.Kind == ast.KindNamedTupleMember && node.AsNamedTupleMember().DotDotDotToken != nil {
				return c.getArrayElementTypeNode((node /* as RestTypeNode | NamedTupleMember */).Type_)
			}
		}
	case ast.KindArrayType:
		return node.AsArrayTypeNode().ElementType
	}
	return nil
}

func (c *Checker) getTypeFromNamedTupleTypeNode(node NamedTupleMember) *Type {
	links := c.getNodeLinks(node)
	return links.resolvedType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.resolvedType = node.dotDotDotToken ? getTypeFromRestTypeNode(node) : addOptionality(getTypeFromTypeNode(node.type), /*isProperty* / true, !!node.questionToken) */ TODO)
}

func (c *Checker) getTypeFromTypeNode(node TypeNode) *Type {
	return c.getConditionalFlowTypeOfType(c.getTypeFromTypeNodeWorker(node), node)
}

func (c *Checker) getTypeFromTypeNodeWorker(node TypeNode) *Type {
	switch node.Kind {
	case ast.KindAnyKeyword,
		ast.KindJSDocAllType,
		ast.KindJSDocUnknownType:
		return c.anyType
	case ast.KindUnknownKeyword:
		return c.unknownType
	case ast.KindStringKeyword:
		return c.stringType
	case ast.KindNumberKeyword:
		return c.numberType
	case ast.KindBigIntKeyword:
		return c.bigintType
	case ast.KindBooleanKeyword:
		return c.booleanType
	case ast.KindSymbolKeyword:
		return c.esSymbolType
	case ast.KindVoidKeyword:
		return c.voidType
	case ast.KindUndefinedKeyword:
		return c.undefinedType
	case ast.KindNullKeyword.(TypeNodeSyntaxKind):
		// TODO(rbuckton): `NullKeyword` is no longer a `TypeNode`, but we defensively allow it here because of incorrect casts in the Language Service.
		return c.nullType
	case ast.KindNeverKeyword:
		return c.neverType
	case ast.KindObjectKeyword:
		if node.Flags&ast.NodeFlagsJavaScriptFile != 0 && !c.noImplicitAny {
			return c.anyType
		} else {
			return c.nonPrimitiveType
		}
	case ast.KindIntrinsicKeyword:
		return c.intrinsicMarkerType
	case ast.KindThisType,
		ast.KindThisKeyword.(TypeNodeSyntaxKind):
		// TODO(rbuckton): `ThisKeyword` is no longer a `TypeNode`, but we defensively allow it here because of incorrect casts in the Language Service and because of `isPartOfTypeNode`.
		return c.getTypeFromThisTypeNode(node /* as ThisExpression | ThisTypeNode */)
	case ast.KindLiteralType:
		return c.getTypeFromLiteralTypeNode(node.AsLiteralTypeNode())
	case ast.KindTypeReference:
		return c.getTypeFromTypeReference(node.AsTypeReferenceNode())
	case ast.KindTypePredicate:
		if node.AsTypePredicateNode().AssertsModifier != nil {
			return c.voidType
		} else {
			return c.booleanType
		}
	case ast.KindExpressionWithTypeArguments:
		return c.getTypeFromTypeReference(node.AsExpressionWithTypeArguments())
	case ast.KindTypeQuery:
		return c.getTypeFromTypeQueryNode(node.AsTypeQueryNode())
	case ast.KindArrayType,
		ast.KindTupleType:
		return c.getTypeFromArrayOrTupleTypeNode(node /* as ArrayTypeNode | TupleTypeNode */)
	case ast.KindOptionalType:
		return c.getTypeFromOptionalTypeNode(node.AsOptionalTypeNode())
	case ast.KindUnionType:
		return c.getTypeFromUnionTypeNode(node.AsUnionTypeNode())
	case ast.KindIntersectionType:
		return c.getTypeFromIntersectionTypeNode(node.AsIntersectionTypeNode())
	case ast.KindJSDocNullableType:
		return c.getTypeFromJSDocNullableTypeNode(node.AsJSDocNullableType())
	case ast.KindJSDocOptionalType:
		return c.addOptionality(c.getTypeFromTypeNode(node.AsJSDocOptionalType().Type_))
	case ast.KindNamedTupleMember:
		return c.getTypeFromNamedTupleTypeNode(node.AsNamedTupleMember())
	case ast.KindParenthesizedType,
		ast.KindJSDocNonNullableType,
		ast.KindJSDocTypeExpression:
		return c.getTypeFromTypeNode((node /* as ParenthesizedTypeNode | JSDocTypeReferencingNode | JSDocTypeExpression | NamedTupleMember */).Type_)
	case ast.KindRestType:
		return c.getTypeFromRestTypeNode(node.AsRestTypeNode())
	case ast.KindJSDocVariadicType:
		return c.getTypeFromJSDocVariadicType(node.AsJSDocVariadicType())
	case ast.KindFunctionType,
		ast.KindConstructorType,
		ast.KindTypeLiteral,
		ast.KindJSDocTypeLiteral,
		ast.KindJSDocFunctionType,
		ast.KindJSDocSignature:
		return c.getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node /* as TypeLiteralNode | FunctionOrConstructorTypeNode | JSDocTypeLiteral | JSDocFunctionType | JSDocSignature */)
	case ast.KindTypeOperator:
		return c.getTypeFromTypeOperatorNode(node.AsTypeOperatorNode())
	case ast.KindIndexedAccessType:
		return c.getTypeFromIndexedAccessTypeNode(node.AsIndexedAccessTypeNode())
	case ast.KindMappedType:
		return c.getTypeFromMappedTypeNode(node.AsMappedTypeNode())
	case ast.KindConditionalType:
		return c.getTypeFromConditionalTypeNode(node.AsConditionalTypeNode())
	case ast.KindInferType:
		return c.getTypeFromInferTypeNode(node.AsInferTypeNode())
	case ast.KindTemplateLiteralType:
		return c.getTypeFromTemplateTypeNode(node.AsTemplateLiteralTypeNode())
	case ast.KindImportType:
		return c.getTypeFromImportTypeNode(node.AsImportTypeNode())
		// This function assumes that an identifier, qualified name, or property access expression is a type expression
		// Callers should first ensure this by calling `isPartOfTypeNode`
		// TODO(rbuckton): These aren't valid TypeNodes, but we treat them as such because of `isPartOfTypeNode`, which returns `true` for things that aren't `TypeNode`s.
	case ast.KindIdentifier.(TypeNodeSyntaxKind),
		ast.KindQualifiedName.(TypeNodeSyntaxKind),
		ast.KindPropertyAccessExpression.(TypeNodeSyntaxKind):
		symbol := c.getSymbolAtLocation(node)
		if symbol != nil {
			return c.getDeclaredTypeOfSymbol(symbol)
		} else {
			return c.errorType
		}
	default:
		return c.errorType
	}
}

/* OVERLOAD: function instantiateList<T>(items: readonly T[], mapper: TypeMapper, instantiator: (item: T, mapper: TypeMapper) => T): readonly T[]; */
/* OVERLOAD: function instantiateList<T>(items: readonly T[] | undefined, mapper: TypeMapper, instantiator: (item: T, mapper: TypeMapper) => T): readonly T[] | undefined; */
func (c *Checker) instantiateList(items *[]T, mapper TypeMapper, instantiator func(item T, mapper TypeMapper) T) *[]T {
	if items != nil && items.length != 0 {
		for i := 0; i < items.length; i++ {
			item := items[i]
			mapped := instantiator(item, mapper)
			if item != mapped {
				var result []T
				if i == 0 {
					result = []never{}
				} else {
					result = items.slice(0, i)
				}
				result.push(mapped)
				for i++; i < items.length; i++ {
					result.push(instantiator(items[i], mapper))
				}
				return result
			}
		}
	}
	return items
}

/* OVERLOAD: function instantiateTypes(types: readonly Type[], mapper: TypeMapper): readonly Type[]; */
/* OVERLOAD: function instantiateTypes(types: readonly Type[] | undefined, mapper: TypeMapper): readonly Type[] | undefined; */
func (c *Checker) instantiateTypes(types *[]*Type, mapper TypeMapper) *[]*Type {
	return c.instantiateList(types, mapper, c.instantiateType)
}

func (c *Checker) instantiateSignatures(signatures []Signature, mapper TypeMapper) []Signature {
	return c.instantiateList(signatures, mapper, c.instantiateSignature)
}

func (c *Checker) instantiateIndexInfos(indexInfos []IndexInfo, mapper TypeMapper) []IndexInfo {
	return c.instantiateList(indexInfos, mapper, c.instantiateIndexInfo)
}

func (c *Checker) createTypeMapper(sources []TypeParameter, targets *[]*Type) TypeMapper {
	if sources.length == 1 {
		return c.makeUnaryTypeMapper(sources[0], ifElse(targets != nil, targets[0], c.anyType))
	} else {
		return c.makeArrayTypeMapper(sources, targets)
	}
}

func (c *Checker) getMappedType(t *Type, mapper TypeMapper) *Type {
	switch mapper.kind {
	case TypeMapKindSimple:
		if t == mapper.source {
			return mapper.target
		} else {
			return t
		}
	case TypeMapKindArray:
		sources := mapper.sources
		targets := mapper.targets
		for i := 0; i < sources.length; i++ {
			if t == sources[i] {
				if targets != nil {
					return targets[i]
				} else {
					return c.anyType
				}
			}
		}
		return t
	case TypeMapKindDeferred:
		sources := mapper.sources
		targets := mapper.targets
		for i := 0; i < sources.length; i++ {
			if t == sources[i] {
				return targets[i]()
			}
		}
		return t
	case TypeMapKindFunction:
		return mapper.func_(t)
	case TypeMapKindComposite,
		TypeMapKindMerged:
		t1 := c.getMappedType(t, mapper.mapper1)
		if t1 != t && mapper.kind == TypeMapKindComposite {
			return c.instantiateType(t1, mapper.mapper2)
		} else {
			return c.getMappedType(t1, mapper.mapper2)
		}
	}
}

func (c *Checker) makeUnaryTypeMapper(source *Type, target *Type) TypeMapper {
	return Debug.attachDebugPrototypeIfDebug(TypeMapper{
		kind:   TypeMapKindSimple,
		source: source,
		target: target,
	})
}

func (c *Checker) makeArrayTypeMapper(sources []TypeParameter, targets *[]*Type) TypeMapper {
	return Debug.attachDebugPrototypeIfDebug(TypeMapper{
		kind:    TypeMapKindArray,
		sources: sources,
		targets: targets,
	})
}

func (c *Checker) makeFunctionTypeMapper(func_ func(t *Type) *Type, debugInfo func() string) TypeMapper {
	return Debug.attachDebugPrototypeIfDebug(TypeMapper{
		kind:      TypeMapKindFunction,
		func_:     func_,
		debugInfo: ifElse(Debug.isDebugging, debugInfo, nil),
	})
}

func (c *Checker) makeDeferredTypeMapper(sources []TypeParameter, targets []func() *Type) TypeMapper {
	return Debug.attachDebugPrototypeIfDebug(TypeMapper{
		kind:    TypeMapKindDeferred,
		sources: sources,
		targets: targets,
	})
}

func (c *Checker) makeCompositeTypeMapper(kind Union[ /* TODO(TS-TO-GO) Node QualifiedName: TypeMapKind.Composite */ any /* TODO(TS-TO-GO) Node QualifiedName: TypeMapKind.Merged */, any], mapper1 TypeMapper, mapper2 TypeMapper) TypeMapper {
	return Debug.attachDebugPrototypeIfDebug(TypeMapper{
		kind:    kind,
		mapper1: mapper1,
		mapper2: mapper2,
	})
}

func (c *Checker) createTypeEraser(sources []TypeParameter) TypeMapper {
	return c.createTypeMapper(sources, nil /*targets*/)
}

/**
 * Maps forward-references to later types parameters to the empty object type.
 * This is used during inference when instantiating type parameter defaults.
 */

func (c *Checker) createBackreferenceMapper(context InferenceContext, index number) TypeMapper {
	forwardInferences := context.inferences.slice(index)
	return c.createTypeMapper(core.Map(forwardInferences, func(i InferenceInfo) TypeParameter {
		return i.typeParameter
	}), core.Map(forwardInferences, func() IntrinsicType {
		return c.unknownType
	}))
}

func (c *Checker) combineTypeMappers(mapper1 *TypeMapper, mapper2 TypeMapper) TypeMapper {
	if mapper1 != nil {
		return c.makeCompositeTypeMapper(TypeMapKindComposite, mapper1, mapper2)
	} else {
		return mapper2
	}
}

func (c *Checker) mergeTypeMappers(mapper1 *TypeMapper, mapper2 TypeMapper) TypeMapper {
	if mapper1 != nil {
		return c.makeCompositeTypeMapper(TypeMapKindMerged, mapper1, mapper2)
	} else {
		return mapper2
	}
}

func (c *Checker) prependTypeMapping(source *Type, target *Type, mapper *TypeMapper) TypeMapper {
	if mapper == nil {
		return c.makeUnaryTypeMapper(source, target)
	} else {
		return c.makeCompositeTypeMapper(TypeMapKindMerged, c.makeUnaryTypeMapper(source, target), mapper)
	}
}

func (c *Checker) appendTypeMapping(mapper *TypeMapper, source *Type, target *Type) TypeMapper {
	if mapper == nil {
		return c.makeUnaryTypeMapper(source, target)
	} else {
		return c.makeCompositeTypeMapper(TypeMapKindMerged, mapper, c.makeUnaryTypeMapper(source, target))
	}
}

func (c *Checker) getRestrictiveTypeParameter(tp TypeParameter) *Type {
	if tp.constraint == nil && c.getConstraintDeclaration(tp) == nil || tp.constraint == c.noConstraintType {
		return tp
	} else {
		return tp.restrictiveInstantiation || ( /* TODO(TS-TO-GO) CommaToken BinaryExpression: tp.restrictiveInstantiation = createTypeParameter(tp.symbol), (tp.restrictiveInstantiation as TypeParameter).constraint = noConstraintType, tp.restrictiveInstantiation */ TODO)
	}
}

func (c *Checker) cloneTypeParameter(typeParameter TypeParameter) TypeParameter {
	result := c.createTypeParameter(typeParameter.symbol)
	result.target = typeParameter
	return result
}

func (c *Checker) instantiateTypePredicate(predicate TypePredicate, mapper TypeMapper) TypePredicate {
	return c.createTypePredicate(predicate.kind, predicate.parameterName, predicate.parameterIndex, c.instantiateType(predicate.type_, mapper))
}

func (c *Checker) instantiateSignature(signature Signature, mapper TypeMapper, eraseTypeParameters bool) Signature {
	var freshTypeParameters *[]TypeParameter
	if signature.typeParameters != nil && !eraseTypeParameters {
		// First create a fresh set of type parameters, then include a mapping from the old to the
		// new type parameters in the mapper function. Finally store this mapper in the new type
		// parameters such that we can use it when instantiating constraints.
		freshTypeParameters = core.Map(signature.typeParameters, c.cloneTypeParameter)
		mapper = c.combineTypeMappers(c.createTypeMapper(signature.typeParameters, freshTypeParameters), mapper)
		for _, tp := range freshTypeParameters {
			tp.mapper = mapper
		}
	}
	// Don't compute resolvedReturnType and resolvedTypePredicate now,
	// because using `mapper` now could trigger inferences to become fixed. (See `createInferenceContext`.)
	// See GH#17600.
	result := c.createSignature(signature.declaration, freshTypeParameters, signature.thisParameter && c.instantiateSymbol(signature.thisParameter, mapper), c.instantiateList(signature.parameters, mapper, c.instantiateSymbol), nil /*resolvedReturnType*/, nil /*resolvedTypePredicate*/, signature.minArgumentCount, signature.flags&SignatureFlagsPropagatingFlags)
	result.target = signature
	result.mapper = mapper
	return result
}

func (c *Checker) instantiateSymbol(symbol *ast.Symbol, mapper TypeMapper) *ast.Symbol {
	links := c.getSymbolLinks(symbol)
	// If the type of the symbol is already resolved, and if that type could not possibly
	// be affected by instantiation, simply return the symbol itself.
	if links.type_ != nil && !c.couldContainTypeVariables(links.type_) {
		if symbol.Flags&ast.SymbolFlagsSetAccessor == 0 {
			return symbol
		}
		// If we're a setter, check writeType.
		if links.writeType != nil && !c.couldContainTypeVariables(links.writeType) {
			return symbol
		}
	}
	if getCheckFlags(symbol)&ast.CheckFlagsInstantiated != 0 {
		// If symbol being instantiated is itself a instantiation, fetch the original target and combine the
		// type mappers. This ensures that original type identities are properly preserved and that aliases
		// always reference a non-aliases.
		symbol = links.target
		mapper = c.combineTypeMappers(links.mapper, mapper)
	}
	// Keep the flags from the symbol we're instantiating.  Mark that is instantiated, and
	// also transient so that we can just store data on it directly.
	result := c.createSymbol(symbol.Flags, symbol.EscapedName, ast.CheckFlagsInstantiated|getCheckFlags(symbol)&(ast.CheckFlagsReadonly|ast.CheckFlagsLate|ast.CheckFlagsOptionalParameter|ast.CheckFlagsRestParameter))
	result.Declarations = symbol.Declarations
	result.Parent = symbol.Parent
	result.Links.target = symbol
	result.Links.mapper = mapper
	if symbol.ValueDeclaration != nil {
		result.ValueDeclaration = symbol.ValueDeclaration
	}
	if links.nameType != nil {
		result.Links.nameType = links.nameType
	}
	return result
}

func (c *Checker) getObjectTypeInstantiation(t Union[AnonymousType, DeferredTypeReference], mapper TypeMapper, aliasSymbol *ast.Symbol, aliasTypeArguments []*Type) *Type {
	var declaration /* TODO(TS-TO-GO) inferred type Declaration | NodeWithTypeArguments | ArrayTypeNode | TupleTypeNode */ any
	switch {
	case t.objectFlags&ObjectFlagsReference != 0:
		declaration = t.AsTypeReference().node
	case t.objectFlags&ObjectFlagsInstantiationExpressionType != 0:
		declaration = t.AsInstantiationExpressionType().node
	default:
		declaration = t.symbol.Declarations[0]
	}
	links := c.getNodeLinks(declaration)
	var target AnonymousType
	switch {
	case t.objectFlags&ObjectFlagsReference != 0:
		target = links.resolvedType.AsDeferredTypeReference()
	case t.objectFlags&ObjectFlagsInstantiated != 0:
		target = t.target
	default:
		target = t
	}
	var typeParameters *[]TypeParameter
	if t.objectFlags&ObjectFlagsSingleSignatureType != 0 {
		typeParameters = t.AsSingleSignatureType().outerTypeParameters
	} else {
		typeParameters = links.outerTypeParameters
	}
	if typeParameters == nil {
		// The first time an anonymous type is instantiated we compute and store a list of the type
		// parameters that are in scope (and therefore potentially referenced). For type literals that
		// aren't the right hand side of a generic type alias declaration we optimize by reducing the
		// set of type parameters to those that are possibly referenced in the literal.
		outerTypeParameters := c.getOuterTypeParameters(declaration, true /*includeThisTypes*/)
		if c.isJSConstructor(declaration) {
			templateTagParameters := c.getTypeParametersFromDeclaration(declaration.AsDeclarationWithTypeParameters())
			outerTypeParameters = addRange(outerTypeParameters, templateTagParameters)
		}
		typeParameters = outerTypeParameters || emptyArray
		var allDeclarations [] /* TODO(TS-TO-GO) inferred type (Declaration | NodeWithTypeArguments | ArrayTypeNode | TupleTypeNode) */ any
		if t.objectFlags&(ObjectFlagsReference|ObjectFlagsInstantiationExpressionType) != 0 {
			allDeclarations = [] /* TODO(TS-TO-GO) inferred type Declaration | NodeWithTypeArguments | ArrayTypeNode | TupleTypeNode */ any{declaration}
		} else {
			allDeclarations = t.symbol.Declarations
		}
		if (target.objectFlags&(ObjectFlagsReference|ObjectFlagsInstantiationExpressionType) != 0 || target.symbol.Flags&ast.SymbolFlagsMethod != 0 || target.symbol.Flags&ast.SymbolFlagsTypeLiteral != 0) && target.aliasTypeArguments == nil {
			typeParameters = core.Filter(typeParameters, func(tp TypeParameter) bool {
				return core.Some(allDeclarations, func(d /* TODO(TS-TO-GO) inferred type Declaration | NodeWithTypeArguments | ArrayTypeNode | TupleTypeNode */ any) bool {
					return c.isTypeParameterPossiblyReferenced(tp, d)
				})
			})
		} else {
			typeParameters = typeParameters
		}
		links.outerTypeParameters = typeParameters
	}
	if typeParameters.length != 0 {
		// We are instantiating an anonymous type that has one or more type parameters in scope. Apply the
		// mapper to the type parameters to produce the effective list of type arguments, and compute the
		// instantiation cache key from the type IDs of the type arguments.
		combinedMapper := c.combineTypeMappers(t.mapper, mapper)
		typeArguments := core.Map(typeParameters, func(t TypeParameter) *Type {
			return c.getMappedType(t, combinedMapper)
		})
		newAliasSymbol := aliasSymbol || t.aliasSymbol
		var newAliasTypeArguments *[]*Type
		if aliasSymbol != nil {
			newAliasTypeArguments = aliasTypeArguments
		} else {
			newAliasTypeArguments = c.instantiateTypes(t.aliasTypeArguments, mapper)
		}
		id := (ifElse(t.objectFlags&ObjectFlagsSingleSignatureType != 0, "S", "")) + c.getTypeListId(typeArguments) + c.getAliasId(newAliasSymbol, newAliasTypeArguments)
		if target.instantiations == nil {
			target.instantiations = NewMap[string, *Type]()
			target.instantiations.set(c.getTypeListId(typeParameters)+c.getAliasId(target.aliasSymbol, target.aliasTypeArguments), target)
		}
		result := target.instantiations.get(id)
		if result == nil {
			if t.objectFlags&ObjectFlagsSingleSignatureType != 0 {
				result = c.instantiateAnonymousType(t, mapper)
				target.instantiations.set(id, result)
				return result
			}
			newMapper := c.createTypeMapper(typeParameters, typeArguments)
			switch {
			case target.objectFlags&ObjectFlagsReference != 0:
				result = c.createDeferredTypeReference(t.AsDeferredTypeReference().target, t.AsDeferredTypeReference().node, newMapper, newAliasSymbol, newAliasTypeArguments)
			case target.objectFlags&ObjectFlagsMapped != 0:
				result = c.instantiateMappedType(target.AsMappedType(), newMapper, newAliasSymbol, newAliasTypeArguments)
			default:
				result = c.instantiateAnonymousType(target, newMapper, newAliasSymbol, newAliasTypeArguments)
			}
			target.instantiations.set(id, result)
			// Set cached result early in case we recursively invoke instantiation while eagerly computing type variable visibility below
			resultObjectFlags := getObjectFlags(result)
			if result.flags&TypeFlagsObjectFlagsType != 0 && resultObjectFlags&ObjectFlagsCouldContainTypeVariablesComputed == 0 {
				resultCouldContainTypeVariables := core.Some(typeArguments, c.couldContainTypeVariables)
				// one of the input type arguments might be or contain the result
				if getObjectFlags(result)&ObjectFlagsCouldContainTypeVariablesComputed == 0 {
					// if `result` is one of the object types we tried to make (it may not be, due to how `instantiateMappedType` works), we can carry forward the type variable containment check from the input type arguments
					if resultObjectFlags&(ObjectFlagsMapped|ObjectFlagsAnonymous|ObjectFlagsReference) != 0 {
						result.AsObjectFlagsType().objectFlags |= ObjectFlagsCouldContainTypeVariablesComputed | (ifElse(resultCouldContainTypeVariables, ObjectFlagsCouldContainTypeVariables, 0))
					} else {
						if !resultCouldContainTypeVariables {
							result.AsObjectFlagsType().objectFlags |= ObjectFlagsCouldContainTypeVariablesComputed
						} else {
							result.AsObjectFlagsType().objectFlags |= 0
						}
					}
				}
			}
		}
		return result
	}
	return t
}

func (c *Checker) maybeTypeParameterReference(node *ast.Node) bool {
	return !(node.Parent.Kind == ast.KindTypeReference && node.Parent.AsTypeReferenceNode().TypeArguments != nil && node == node.Parent.AsTypeReferenceNode().TypeName || node.Parent.Kind == ast.KindImportType && node.Parent.AsImportTypeNode().TypeArguments != nil && node == node.Parent.AsImportTypeNode().Qualifier)
}

func (c *Checker) isTypeParameterPossiblyReferenced(tp TypeParameter, node *ast.Node) bool {
	// If the type parameter doesn't have exactly one declaration, if there are intervening statement blocks
	// between the node and the type parameter declaration, if the node contains actual references to the
	// type parameter, or if the node contains type queries that we can't prove couldn't contain references to the type parameter,
	// we consider the type parameter possibly referenced.
	if tp.symbol && tp.symbol.Declarations != nil && tp.symbol.Declarations.length == 1 {
		container := tp.symbol.Declarations[0].Parent
		for n := node; n != container; n = n.Parent {
			if !n || n.Kind == ast.KindBlock || n.Kind == ast.KindConditionalType && forEachChild(n.AsConditionalTypeNode().ExtendsType, containsReference) {
				return true
			}
		}
		return containsReference(node)
	}
	return true
	containsReference := func(node *ast.Node) bool {
		switch node.Kind {
		case ast.KindThisType:
			return tp.isThisType
		case ast.KindIdentifier:
			return !tp.isThisType && isPartOfTypeNode(node) && c.maybeTypeParameterReference(node) && c.getTypeFromTypeNodeWorker(node.AsTypeNode()) == tp
			// use worker because we're looking for === equality
		case ast.KindTypeQuery:
			entityName := node.AsTypeQueryNode().ExprName
			firstIdentifier := getFirstIdentifier(entityName)
			if !isThisIdentifier(firstIdentifier) {
				firstIdentifierSymbol := c.getResolvedSymbol(firstIdentifier)
				tpDeclaration := tp.symbol.Declarations[0]
				// There is exactly one declaration, otherwise `containsReference` is not called
				var tpScope *ast.Node
				switch {
				case tpDeclaration.Kind == ast.KindTypeParameter:
					tpScope = tpDeclaration.Parent
				case tp.isThisType:
					tpScope = tpDeclaration
				default:
					tpScope = nil
				}
				// Type parameter's declaration was unrecognized, e.g. comes from JSDoc annotation.
				if firstIdentifierSymbol.Declarations != nil && tpScope != nil {
					return core.Some(firstIdentifierSymbol.Declarations, func(idDecl Declaration) bool {
						return isNodeDescendantOf(idDecl, tpScope)
					}) || core.Some(node.AsTypeQueryNode().TypeArguments, containsReference)
				}
			}
			return true
		case ast.KindMethodDeclaration,
			ast.KindMethodSignature:
			return node.AsFunctionLikeDeclaration().Type_ == nil && node.AsFunctionLikeDeclaration().Body != nil || core.Some(node.AsFunctionLikeDeclaration().TypeParameters, containsReference) || core.Some(node.AsFunctionLikeDeclaration().Parameters, containsReference) || node.AsFunctionLikeDeclaration().Type_ != nil && containsReference(node.AsFunctionLikeDeclaration().Type_)
		}
		return forEachChild(node, containsReference)
	}

}

func (c *Checker) getHomomorphicTypeVariable(t MappedType) *TypeParameter {
	constraintType := c.getConstraintTypeFromMappedType(t)
	if constraintType.flags&TypeFlagsIndex != 0 {
		typeVariable := c.getActualTypeVariable(constraintType.AsIndexType().type_)
		if typeVariable.flags&TypeFlagsTypeParameter != 0 {
			return typeVariable.AsTypeParameter()
		}
	}
	return nil
}

func (c *Checker) instantiateMappedType(type_ MappedType, mapper TypeMapper, aliasSymbol *ast.Symbol, aliasTypeArguments []*Type) *Type {
	// For a homomorphic mapped type { [P in keyof T]: X }, where T is some type variable, the mapping
	// operation depends on T as follows:
	// * If T is a primitive type no mapping is performed and the result is simply T.
	// * If T is a union type we distribute the mapped type over the union.
	// * If T is an array we map to an array where the element type has been transformed.
	// * If T is a tuple we map to a tuple where the element types have been transformed.
	// * If T is an intersection of array or tuple types we map to an intersection of transformed array or tuple types.
	// * Otherwise we map to an object type where the type of each property has been transformed.
	// For example, when T is instantiated to a union type A | B, we produce { [P in keyof A]: X } |
	// { [P in keyof B]: X }, and when when T is instantiated to a union type A | undefined, we produce
	// { [P in keyof A]: X } | undefined.
	typeVariable := c.getHomomorphicTypeVariable(type_)
	if typeVariable != nil {
		mappedTypeVariable := c.instantiateType(typeVariable, mapper)
		if typeVariable != mappedTypeVariable {
			return c.mapTypeWithAlias(c.getReducedType(mappedTypeVariable), instantiateConstituent, aliasSymbol, aliasTypeArguments)
		}
	}
	// If the constraint type of the instantiation is the wildcard type, return the wildcard type.
	if c.instantiateType(c.getConstraintTypeFromMappedType(type_), mapper) == c.wildcardType {
		return c.wildcardType
	} else {
		return c.instantiateAnonymousType(type_, mapper, aliasSymbol, aliasTypeArguments)
	}

	instantiateConstituent := func(t *Type) *Type {
		if t.flags&(TypeFlagsAnyOrUnknown|TypeFlagsInstantiableNonPrimitive|TypeFlagsObject|TypeFlagsIntersection) != 0 && t != c.wildcardType && !c.isErrorType(t) {
			if type_.declaration.NameType == nil {
				var constraint TODO
				if c.isArrayType(t) || t.flags&TypeFlagsAny != 0 && c.findResolutionCycleStartIndex(typeVariable, TypeSystemPropertyNameImmediateBaseConstraint) < 0 && ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: constraint = getConstraintOfTypeParameter(typeVariable!) */ TODO != nil) && c.everyType(constraint, c.isArrayOrTupleType) {
					return c.instantiateMappedArrayType(t, type_, c.prependTypeMapping(typeVariable, t, mapper))
				}
				if c.isTupleType(t) {
					return c.instantiateMappedTupleType(t, type_, typeVariable, mapper)
				}
				if c.isArrayOrTupleOrIntersection(t) {
					return c.getIntersectionType(core.Map(t.AsIntersectionType().types, instantiateConstituent))
				}
			}
			return c.instantiateAnonymousType(type_, c.prependTypeMapping(typeVariable, t, mapper))
		}
		return t
	}

}

func (c *Checker) getModifiedReadonlyState(state bool, modifiers MappedTypeModifiers) bool {
	switch {
	case modifiers&MappedTypeModifiersIncludeReadonly != 0:
		return true
	case modifiers&MappedTypeModifiersExcludeReadonly != 0:
		return false
	default:
		return state
	}
}

func (c *Checker) instantiateMappedTupleType(tupleType TupleTypeReference, mappedType MappedType, typeVariable TypeVariable, mapper TypeMapper) *Type {
	// We apply the mapped type's template type to each of the fixed part elements. For variadic elements, we
	// apply the mapped type itself to the variadic element type. For other elements in the variable part of the
	// tuple, we surround the element type with an array type and apply the mapped type to that. This ensures
	// that we get sequential property key types for the fixed part of the tuple, and property key type number
	// for the remaining elements. For example
	//
	//   type Keys<T> = { [K in keyof T]: K };
	//   type Foo<T extends any[]> = Keys<[string, string, ...T, string]>; // ["0", "1", ...Keys<T>, number]
	//
	elementFlags := tupleType.target.elementFlags
	fixedLength := tupleType.target.fixedLength
	var fixedMapper TypeMapper
	if fixedLength != 0 {
		fixedMapper = c.prependTypeMapping(typeVariable, tupleType, mapper)
	} else {
		fixedMapper = mapper
	}
	newElementTypes := core.Map(c.getElementTypes(tupleType), func(t *Type, i number) *Type {
		flags := elementFlags[i]
		switch {
		case i < fixedLength:
			return c.instantiateMappedTypeTemplate(mappedType, c.getStringLiteralType(""+i), flags&ElementFlagsOptional != 0, fixedMapper)
		case flags&ElementFlagsVariadic != 0:
			return c.instantiateType(mappedType, c.prependTypeMapping(typeVariable, t, mapper))
		default:
			return ifNotNilElse(c.getElementTypeOfArrayType(c.instantiateType(mappedType, c.prependTypeMapping(typeVariable, c.createArrayType(t), mapper))), c.unknownType)
		}
	})
	modifiers := c.getMappedTypeModifiers(mappedType)
	var newElementFlags []ElementFlags
	switch {
	case modifiers&MappedTypeModifiersIncludeOptional != 0:
		newElementFlags = core.Map(elementFlags, func(f ElementFlags) ElementFlags {
			if f&ElementFlagsRequired != 0 {
				return ElementFlagsOptional
			} else {
				return f
			}
		})
	case modifiers&MappedTypeModifiersExcludeOptional != 0:
		newElementFlags = core.Map(elementFlags, func(f ElementFlags) ElementFlags {
			if f&ElementFlagsOptional != 0 {
				return ElementFlagsRequired
			} else {
				return f
			}
		})
	default:
		newElementFlags = elementFlags
	}
	newReadonly := c.getModifiedReadonlyState(tupleType.target.readonly, c.getMappedTypeModifiers(mappedType))
	if contains(newElementTypes, c.errorType) {
		return c.errorType
	} else {
		return c.createTupleType(newElementTypes, newElementFlags, newReadonly, tupleType.target.labeledElementDeclarations)
	}
}

func (c *Checker) instantiateMappedArrayType(arrayType *Type, mappedType MappedType, mapper TypeMapper) /* TODO(TS-TO-GO) inferred type IntrinsicType | ObjectType */ any {
	elementType := c.instantiateMappedTypeTemplate(mappedType, c.numberType, true /*isOptional*/, mapper)
	if c.isErrorType(elementType) {
		return c.errorType
	} else {
		return c.createArrayType(elementType, c.getModifiedReadonlyState(c.isReadonlyArrayType(arrayType), c.getMappedTypeModifiers(mappedType)))
	}
}

func (c *Checker) instantiateMappedTypeTemplate(t MappedType, key *Type, isOptional bool, mapper TypeMapper) *Type {
	templateMapper := c.appendTypeMapping(mapper, c.getTypeParameterFromMappedType(t), key)
	propType := c.instantiateType(c.getTemplateTypeFromMappedType(t.target.AsMappedType() || t), templateMapper)
	modifiers := c.getMappedTypeModifiers(t)
	switch {
	case c.strictNullChecks && modifiers&MappedTypeModifiersIncludeOptional != 0 && !c.maybeTypeOfKind(propType, TypeFlagsUndefined|TypeFlagsVoid):
		return c.getOptionalType(propType, true /*isProperty*/)
	case c.strictNullChecks && modifiers&MappedTypeModifiersExcludeOptional != 0 && isOptional:
		return c.getTypeWithFacts(propType, TypeFactsNEUndefined)
	default:
		return propType
	}
}

func (c *Checker) instantiateAnonymousType(t AnonymousType, mapper TypeMapper, aliasSymbol *ast.Symbol, aliasTypeArguments []*Type) AnonymousType {
	Debug.assert(t.symbol, "anonymous type must have symbol to be instantiated")
	result := c.createObjectType(t.objectFlags & ^(ObjectFlagsCouldContainTypeVariablesComputed|ObjectFlagsCouldContainTypeVariables) | ObjectFlagsInstantiated, t.symbol).AsAnonymousType()
	if t.objectFlags&ObjectFlagsMapped != 0 {
		result.AsMappedType().declaration = t.AsMappedType().declaration
		// C.f. instantiateSignature
		origTypeParameter := c.getTypeParameterFromMappedType(t.AsMappedType())
		freshTypeParameter := c.cloneTypeParameter(origTypeParameter)
		result.AsMappedType().typeParameter = freshTypeParameter
		mapper = c.combineTypeMappers(c.makeUnaryTypeMapper(origTypeParameter, freshTypeParameter), mapper)
		freshTypeParameter.mapper = mapper
	}
	if t.objectFlags&ObjectFlagsInstantiationExpressionType != 0 {
		result.AsInstantiationExpressionType().node = t.AsInstantiationExpressionType().node
	}
	if t.objectFlags&ObjectFlagsSingleSignatureType != 0 {
		result.AsSingleSignatureType().outerTypeParameters = t.AsSingleSignatureType().outerTypeParameters
	}
	result.target = t
	result.mapper = mapper
	result.aliasSymbol = aliasSymbol || t.aliasSymbol
	if aliasSymbol != nil {
		result.aliasTypeArguments = aliasTypeArguments
	} else {
		result.aliasTypeArguments = c.instantiateTypes(t.aliasTypeArguments, mapper)
	}
	if result.aliasTypeArguments != nil {
		result.objectFlags |= c.getPropagatingFlagsOfTypes(result.aliasTypeArguments)
	} else {
		result.objectFlags |= 0
	}
	return result
}

func (c *Checker) getConditionalTypeInstantiation(t ConditionalType, mapper TypeMapper, forConstraint bool, aliasSymbol *ast.Symbol, aliasTypeArguments []*Type) *Type {
	root := t.root
	if root.outerTypeParameters != nil {
		// We are instantiating a conditional type that has one or more type parameters in scope. Apply the
		// mapper to the type parameters to produce the effective list of type arguments, and compute the
		// instantiation cache key from the type IDs of the type arguments.
		typeArguments := core.Map(root.outerTypeParameters, func(t TypeParameter) *Type {
			return c.getMappedType(t, mapper)
		})
		id := (ifElse(forConstraint, "C", "")) + c.getTypeListId(typeArguments) + c.getAliasId(aliasSymbol, aliasTypeArguments)
		result := root.instantiations.get(id)
		if result == nil {
			newMapper := c.createTypeMapper(root.outerTypeParameters, typeArguments)
			checkType := root.checkType
			var distributionType *Type
			if root.isDistributive {
				distributionType = c.getReducedType(c.getMappedType(checkType, newMapper))
			} else {
				distributionType = nil
			}
			// Distributive conditional types are distributed over union types. For example, when the
			// distributive conditional type T extends U ? X : Y is instantiated with A | B for T, the
			// result is (A extends U ? X : Y) | (B extends U ? X : Y).
			if distributionType != nil && checkType != distributionType && distributionType.flags&(TypeFlagsUnion|TypeFlagsNever) != 0 {
				result = c.mapTypeWithAlias(distributionType, func(t *Type) *Type {
					return c.getConditionalType(root, c.prependTypeMapping(checkType, t, newMapper), forConstraint)
				}, aliasSymbol, aliasTypeArguments)
			} else {
				result = c.getConditionalType(root, newMapper, forConstraint, aliasSymbol, aliasTypeArguments)
			}
			root.instantiations.set(id, result)
		}
		return result
	}
	return t
}

/* OVERLOAD: function instantiateType(type: Type, mapper: TypeMapper | undefined): Type; */
/* OVERLOAD: function instantiateType(type: Type | undefined, mapper: TypeMapper | undefined): Type | undefined; */
func (c *Checker) instantiateType(t *Type, mapper *TypeMapper) *Type {
	if t && mapper != nil {
		return c.instantiateTypeWithAlias(t, mapper, nil /*aliasSymbol*/, nil /*aliasTypeArguments*/)
	} else {
		return t
	}
}

func (c *Checker) instantiateTypeWithAlias(t *Type, mapper TypeMapper, aliasSymbol *ast.Symbol, aliasTypeArguments *[]*Type) *Type {
	if !c.couldContainTypeVariables(t) {
		return t
	}
	if c.instantiationDepth == 100 || c.instantiationCount >= 5000000 {
		// We have reached 100 recursive type instantiations, or 5M type instantiations caused by the same statement
		// or expression. There is a very high likelyhood we're dealing with a combination of infinite generic types
		// that perpetually generate new type identities, so we stop the recursion here by yielding the error type.
		tracing. /* ? */ instant(tracing.Phase.CheckTypes, "instantiateType_DepthLimit", &Args{
			typeId:             t.id,
			instantiationDepth: instantiationDepth,
			instantiationCount: instantiationCount,
		})
		c.error(c.currentNode, Diagnostics.Type_instantiation_is_excessively_deep_and_possibly_infinite)
		return c.errorType
	}
	c.totalInstantiationCount++
	c.instantiationCount++
	c.instantiationDepth++
	result := c.instantiateTypeWorker(t, mapper, aliasSymbol, aliasTypeArguments)
	c.instantiationDepth--
	return result
}

func (c *Checker) instantiateTypeWorker(t *Type, mapper TypeMapper, aliasSymbol *ast.Symbol, aliasTypeArguments *[]*Type) *Type {
	flags := t.flags
	if flags&TypeFlagsTypeParameter != 0 {
		return c.getMappedType(t, mapper)
	}
	if flags&TypeFlagsObject != 0 {
		objectFlags := t.AsObjectType().objectFlags
		if objectFlags&(ObjectFlagsReference|ObjectFlagsAnonymous|ObjectFlagsMapped) != 0 {
			if objectFlags&ObjectFlagsReference != 0 && t.AsTypeReference().node == nil {
				resolvedTypeArguments := t.AsTypeReference().resolvedTypeArguments
				newTypeArguments := c.instantiateTypes(resolvedTypeArguments, mapper)
				if newTypeArguments != resolvedTypeArguments {
					return c.createNormalizedTypeReference(t.AsTypeReference().target, newTypeArguments)
				} else {
					return t
				}
			}
			if objectFlags&ObjectFlagsReverseMapped != 0 {
				return c.instantiateReverseMappedType(t.AsReverseMappedType(), mapper)
			}
			return c.getObjectTypeInstantiation(t /* as TypeReference | AnonymousType | MappedType */, mapper, aliasSymbol, aliasTypeArguments)
		}
		return t
	}
	if flags&TypeFlagsUnionOrIntersection != 0 {
		var origin *Type
		if t.flags&TypeFlagsUnion != 0 {
			origin = t.AsUnionType().origin
		} else {
			origin = nil
		}
		var types []*Type
		if origin != nil && origin.flags&TypeFlagsUnionOrIntersection != 0 {
			types = origin.AsUnionOrIntersectionType().types
		} else {
			types = t.AsUnionOrIntersectionType().types
		}
		newTypes := c.instantiateTypes(types, mapper)
		if newTypes == types && aliasSymbol == t.aliasSymbol {
			return t
		}
		newAliasSymbol := aliasSymbol || t.aliasSymbol
		var newAliasTypeArguments *[]*Type
		if aliasSymbol != nil {
			newAliasTypeArguments = aliasTypeArguments
		} else {
			newAliasTypeArguments = c.instantiateTypes(t.aliasTypeArguments, mapper)
		}
		if flags&TypeFlagsIntersection != 0 || origin != nil && origin.flags&TypeFlagsIntersection != 0 {
			return c.getIntersectionType(newTypes, IntersectionFlagsNone, newAliasSymbol, newAliasTypeArguments)
		} else {
			return c.getUnionType(newTypes, UnionReductionLiteral, newAliasSymbol, newAliasTypeArguments)
		}
	}
	if flags&TypeFlagsIndex != 0 {
		return c.getIndexType(c.instantiateType(t.AsIndexType().type_, mapper))
	}
	if flags&TypeFlagsTemplateLiteral != 0 {
		return c.getTemplateLiteralType(t.AsTemplateLiteralType().texts, c.instantiateTypes(t.AsTemplateLiteralType().types, mapper))
	}
	if flags&TypeFlagsStringMapping != 0 {
		return c.getStringMappingType(t.AsStringMappingType().symbol, c.instantiateType(t.AsStringMappingType().type_, mapper))
	}
	if flags&TypeFlagsIndexedAccess != 0 {
		newAliasSymbol := aliasSymbol || t.aliasSymbol
		var newAliasTypeArguments *[]*Type
		if aliasSymbol != nil {
			newAliasTypeArguments = aliasTypeArguments
		} else {
			newAliasTypeArguments = c.instantiateTypes(t.aliasTypeArguments, mapper)
		}
		return c.getIndexedAccessType(c.instantiateType(t.AsIndexedAccessType().objectType, mapper), c.instantiateType(t.AsIndexedAccessType().indexType, mapper), t.AsIndexedAccessType().accessFlags, nil /*accessNode*/, newAliasSymbol, newAliasTypeArguments)
	}
	if flags&TypeFlagsConditional != 0 {
		return c.getConditionalTypeInstantiation(t.AsConditionalType(), c.combineTypeMappers(t.AsConditionalType().mapper, mapper), false /*forConstraint*/, aliasSymbol, aliasTypeArguments)
	}
	if flags&TypeFlagsSubstitution != 0 {
		newBaseType := c.instantiateType(t.AsSubstitutionType().baseType, mapper)
		if c.isNoInferType(t) {
			return c.getNoInferType(newBaseType)
		}
		newConstraint := c.instantiateType(t.AsSubstitutionType().constraint, mapper)
		// A substitution type originates in the true branch of a conditional type and can be resolved
		// to just the base type in the same cases as the conditional type resolves to its true branch
		// (because the base type is then known to satisfy the constraint).
		if newBaseType.flags&TypeFlagsTypeVariable != 0 && c.isGenericType(newConstraint) {
			return c.getSubstitutionType(newBaseType, newConstraint)
		}
		if newConstraint.flags&TypeFlagsAnyOrUnknown != 0 || c.isTypeAssignableTo(c.getRestrictiveInstantiation(newBaseType), c.getRestrictiveInstantiation(newConstraint)) {
			return newBaseType
		}
		if newBaseType.flags&TypeFlagsTypeVariable != 0 {
			return c.getSubstitutionType(newBaseType, newConstraint)
		} else {
			return c.getIntersectionType([]*Type{newConstraint, newBaseType})
		}
	}
	return t
}

func (c *Checker) instantiateReverseMappedType(t ReverseMappedType, mapper TypeMapper) *Type {
	innerMappedType := c.instantiateType(t.mappedType, mapper)
	if getObjectFlags(innerMappedType)&ObjectFlagsMapped == 0 {
		return t
	}
	innerIndexType := c.instantiateType(t.constraintType, mapper)
	if innerIndexType.flags&TypeFlagsIndex == 0 {
		return t
	}
	instantiated := c.inferTypeForHomomorphicMappedType(c.instantiateType(t.source, mapper), innerMappedType.AsMappedType(), innerIndexType.AsIndexType())
	if instantiated != nil {
		return instantiated
	}
	return t
	// Nested invocation of `inferTypeForHomomorphicMappedType` or the `source` instantiated into something unmappable
}

func (c *Checker) getPermissiveInstantiation(t *Type) *Type {
	if t.flags&(TypeFlagsPrimitive|TypeFlagsAnyOrUnknown|TypeFlagsNever) != 0 {
		return t
	} else {
		return t.permissiveInstantiation || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type.permissiveInstantiation = instantiateType(type, permissiveMapper) */ TODO)
	}
}

func (c *Checker) getRestrictiveInstantiation(t *Type) *Type {
	if t.flags&(TypeFlagsPrimitive|TypeFlagsAnyOrUnknown|TypeFlagsNever) != 0 {
		return t
	}
	if t.restrictiveInstantiation != nil {
		return t.restrictiveInstantiation
	}
	t.restrictiveInstantiation = c.instantiateType(t, c.restrictiveMapper)
	// We set the following so we don't attempt to set the restrictive instance of a restrictive instance
	// which is redundant - we'll produce new type identities, but all type params have already been mapped.
	// This also gives us a way to detect restrictive instances upon comparisons and _disable_ the "distributeive constraint"
	// assignability check for them, which is distinctly unsafe, as once you have a restrctive instance, all the type parameters
	// are constrained to `unknown` and produce tons of false positives/negatives!
	t.restrictiveInstantiation.restrictiveInstantiation = t.restrictiveInstantiation
	return t.restrictiveInstantiation
}

func (c *Checker) instantiateIndexInfo(info IndexInfo, mapper TypeMapper) IndexInfo {
	return c.createIndexInfo(info.keyType, c.instantiateType(info.type_, mapper), info.isReadonly, info.declaration)
}

// Returns true if the given expression contains (at any level of nesting) a function or arrow expression
// that is subject to contextual typing.
func (c *Checker) isContextSensitive(node Union[Expression, MethodDeclaration, ObjectLiteralElementLike, JsxAttributeLike, JsxChild]) bool {
	Debug.assert(node.Kind != ast.KindMethodDeclaration || isObjectLiteralMethod(node))
	switch node.Kind {
	case ast.KindFunctionExpression,
		ast.KindArrowFunction,
		ast.KindMethodDeclaration,
		ast.KindFunctionDeclaration:
		return c.isContextSensitiveFunctionLikeDeclaration(node /* as FunctionExpression | ArrowFunction | MethodDeclaration */)
	case ast.KindObjectLiteralExpression:
		return core.Some(node.AsObjectLiteralExpression().Properties, c.isContextSensitive)
	case ast.KindArrayLiteralExpression:
		return core.Some(node.AsArrayLiteralExpression().Elements, c.isContextSensitive)
	case ast.KindConditionalExpression:
		return c.isContextSensitive(node.AsConditionalExpression().WhenTrue) || c.isContextSensitive(node.AsConditionalExpression().WhenFalse)
	case ast.KindBinaryExpression:
		return (node.AsBinaryExpression().OperatorToken.Kind == ast.KindBarBarToken || node.AsBinaryExpression().OperatorToken.Kind == ast.KindQuestionQuestionToken) && (c.isContextSensitive(node.AsBinaryExpression().Left) || c.isContextSensitive(node.AsBinaryExpression().Right))
	case ast.KindPropertyAssignment:
		return c.isContextSensitive(node.AsPropertyAssignment().Initializer)
	case ast.KindParenthesizedExpression:
		return c.isContextSensitive(node.AsParenthesizedExpression().Expression)
	case ast.KindJsxAttributes:
		return core.Some(node.AsJsxAttributes().Properties, c.isContextSensitive) || isJsxOpeningElement(node.Parent) && core.Some(node.Parent.Parent.Children, c.isContextSensitive)
	case ast.KindJsxAttribute:
		// If there is no initializer, JSX attribute has a boolean value of true which is not context sensitive.
		TODO_IDENTIFIER := node.AsJsxAttribute()
		return initializer != nil && c.isContextSensitive(initializer)
	case ast.KindJsxExpression:
		// It is possible to that node.expression is undefined (e.g <div x={} />)
		TODO_IDENTIFIER := node.AsJsxExpression()
		return expression != nil && c.isContextSensitive(expression)
	}

	return false
}

func (c *Checker) isContextSensitiveFunctionLikeDeclaration(node FunctionLikeDeclaration) bool {
	return hasContextSensitiveParameters(node) || c.hasContextSensitiveReturnExpression(node)
}

func (c *Checker) hasContextSensitiveReturnExpression(node FunctionLikeDeclaration) bool {
	if node.TypeParameters != nil || getEffectiveReturnTypeNode(node) != nil || node.Body == nil {
		return false
	}
	if node.Body.Kind != ast.KindBlock {
		return c.isContextSensitive(node.Body)
	}
	return forEachReturnStatement(node.Body.AsBlock(), func(statement ReturnStatement) bool {
		return statement.Expression != nil && c.isContextSensitive(statement.Expression)
	})
}

func (c *Checker) isContextSensitiveFunctionOrObjectLiteralMethod(func_ *ast.Node) bool {
	return (isFunctionExpressionOrArrowFunction(func_) || isObjectLiteralMethod(func_)) && c.isContextSensitiveFunctionLikeDeclaration(func_)
}

func (c *Checker) getTypeWithoutSignatures(t *Type) *Type {
	if t.flags&TypeFlagsObject != 0 {
		resolved := c.resolveStructuredTypeMembers(t.AsObjectType())
		if resolved.constructSignatures.length != 0 || resolved.callSignatures.length != 0 {
			result := c.createObjectType(ObjectFlagsAnonymous, t.symbol)
			result.members = resolved.members
			result.properties = resolved.properties
			result.callSignatures = emptyArray
			result.constructSignatures = emptyArray
			result.indexInfos = emptyArray
			return result
		}
	} else if t.flags&TypeFlagsIntersection != 0 {
		return c.getIntersectionType(core.Map(t.AsIntersectionType().types, c.getTypeWithoutSignatures))
	}
	return t
}

// TYPE CHECKING

func (c *Checker) isTypeIdenticalTo(source *Type, target *Type) bool {
	return c.isTypeRelatedTo(source, target, c.identityRelation)
}

func (c *Checker) compareTypesIdentical(source *Type, target *Type) Ternary {
	if c.isTypeRelatedTo(source, target, c.identityRelation) {
		return TernaryTrue
	} else {
		return TernaryFalse
	}
}

func (c *Checker) compareTypesAssignable(source *Type, target *Type) Ternary {
	if c.isTypeRelatedTo(source, target, c.assignableRelation) {
		return TernaryTrue
	} else {
		return TernaryFalse
	}
}

func (c *Checker) compareTypesSubtypeOf(source *Type, target *Type) Ternary {
	if c.isTypeRelatedTo(source, target, c.subtypeRelation) {
		return TernaryTrue
	} else {
		return TernaryFalse
	}
}

func (c *Checker) isTypeSubtypeOf(source *Type, target *Type) bool {
	return c.isTypeRelatedTo(source, target, c.subtypeRelation)
}

func (c *Checker) isTypeStrictSubtypeOf(source *Type, target *Type) bool {
	return c.isTypeRelatedTo(source, target, c.strictSubtypeRelation)
}

func (c *Checker) isTypeAssignableTo(source *Type, target *Type) bool {
	return c.isTypeRelatedTo(source, target, c.assignableRelation)
}

// An object type S is considered to be derived from an object type T if
// S is a union type and every constituent of S is derived from T,
// T is a union type and S is derived from at least one constituent of T, or
// S is an intersection type and some constituent of S is derived from T, or
// S is a type variable with a base constraint that is derived from T, or
// T is {} and S is an object-like type (ensuring {} is less derived than Object), or
// T is one of the global types Object and Function and S is a subtype of T, or
// T occurs directly or indirectly in an 'extends' clause of S.
// Note that this check ignores type parameters and only considers the
// inheritance hierarchy.
func (c *Checker) isTypeDerivedFrom(source *Type, target *Type) bool {
	switch {
	case source.flags&TypeFlagsUnion != 0:
		return core.Every(source.AsUnionType().types, func(t *Type) bool {
			return c.isTypeDerivedFrom(t, target)
		})
	case target.flags&TypeFlagsUnion != 0:
		return core.Some(target.AsUnionType().types, func(t *Type) bool {
			return c.isTypeDerivedFrom(source, t)
		})
	case source.flags&TypeFlagsIntersection != 0:
		return core.Some(source.AsIntersectionType().types, func(t *Type) bool {
			return c.isTypeDerivedFrom(t, target)
		})
	case source.flags&TypeFlagsInstantiableNonPrimitive != 0:
		return c.isTypeDerivedFrom(c.getBaseConstraintOfType(source) || c.unknownType, target)
	case c.isEmptyAnonymousObjectType(target):
		return source.flags&(TypeFlagsObject|TypeFlagsNonPrimitive) != 0
	case target == c.globalObjectType:
		return source.flags&(TypeFlagsObject|TypeFlagsNonPrimitive) != 0 && !c.isEmptyAnonymousObjectType(source)
	case target == c.globalFunctionType:
		return source.flags&TypeFlagsObject != 0 && c.isFunctionObjectType(source.AsObjectType())
	default:
		return c.hasBaseType(source, c.getTargetType(target)) || (c.isArrayType(target) && !c.isReadonlyArrayType(target) && c.isTypeDerivedFrom(source, c.globalReadonlyArrayType))
	}
}

/**
 * This is *not* a bi-directional relationship.
 * If one needs to check both directions for comparability, use a second call to this function or 'checkTypeComparableTo'.
 *
 * A type S is comparable to a type T if some (but not necessarily all) of the possible values of S are also possible values of T.
 * It is used to check following cases:
 *   - the types of the left and right sides of equality/inequality operators (`===`, `!==`, `==`, `!=`).
 *   - the types of `case` clause expressions and their respective `switch` expressions.
 *   - the type of an expression in a type assertion with the type being asserted.
 */

func (c *Checker) isTypeComparableTo(source *Type, target *Type) bool {
	return c.isTypeRelatedTo(source, target, c.comparableRelation)
}

func (c *Checker) areTypesComparable(type1 *Type, type2 *Type) bool {
	return c.isTypeComparableTo(type1, type2) || c.isTypeComparableTo(type2, type1)
}

func (c *Checker) checkTypeAssignableTo(source *Type, target *Type, errorNode *ast.Node, headMessage DiagnosticMessage, containingMessageChain func() *DiagnosticMessageChain, errorOutputObject /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; } */ any) bool {
	return c.checkTypeRelatedTo(source, target, c.assignableRelation, errorNode, headMessage, containingMessageChain, errorOutputObject)
}

/**
 * Like `checkTypeAssignableTo`, but if it would issue an error, instead performs structural comparisons of the types using the given expression node to
 * attempt to issue more specific errors on, for example, specific object literal properties or tuple members.
 */

func (c *Checker) checkTypeAssignableToAndOptionallyElaborate(source *Type, target *Type, errorNode *ast.Node, expr Expression, headMessage DiagnosticMessage, containingMessageChain func() *DiagnosticMessageChain) bool {
	return c.checkTypeRelatedToAndOptionallyElaborate(source, target, c.assignableRelation, errorNode, expr, headMessage, containingMessageChain, nil /*errorOutputContainer*/)
}

func (c *Checker) checkTypeRelatedToAndOptionallyElaborate(source *Type, target *Type, relation Map[string, RelationComparisonResult], errorNode *ast.Node, expr Expression, headMessage *DiagnosticMessage, containingMessageChain *func() *DiagnosticMessageChain, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; skipLogging?: boolean; } */ any) bool {
	if c.isTypeRelatedTo(source, target, relation) {
		return true
	}
	if errorNode == nil || !c.elaborateError(expr, source, target, relation, headMessage, containingMessageChain, errorOutputContainer) {
		return c.checkTypeRelatedTo(source, target, relation, errorNode, headMessage, containingMessageChain, errorOutputContainer)
	}
	return false
}

func (c *Checker) isOrHasGenericConditional(t *Type) bool {
	return t.flags&TypeFlagsConditional != 0 || (t.flags&TypeFlagsIntersection != 0 && core.Some(t.AsIntersectionType().types, c.isOrHasGenericConditional))
}

func (c *Checker) elaborateError(node Expression, source *Type, target *Type, relation Map[string, RelationComparisonResult], headMessage *DiagnosticMessage, containingMessageChain *func() *DiagnosticMessageChain, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; skipLogging?: boolean; } */ any) bool {
	if node == nil || c.isOrHasGenericConditional(target) {
		return false
	}
	if !c.checkTypeRelatedTo(source, target, relation, nil /*errorNode*/) && c.elaborateDidYouMeanToCallOrConstruct(node, source, target, relation, headMessage, containingMessageChain, errorOutputContainer) {
		return true
	}
	switch node.Kind {
	case ast.KindAsExpression:
		if !isConstAssertion(node) {
			break
		}
		fallthrough
	case ast.KindJsxExpression,
		ast.KindParenthesizedExpression:
		return c.elaborateError((node /* as AsExpression | ParenthesizedExpression | JsxExpression */).Expression, source, target, relation, headMessage, containingMessageChain, errorOutputContainer)
	case ast.KindBinaryExpression:
		switch node.AsBinaryExpression().OperatorToken.Kind {
		case ast.KindEqualsToken,
			ast.KindCommaToken:
			return c.elaborateError(node.AsBinaryExpression().Right, source, target, relation, headMessage, containingMessageChain, errorOutputContainer)
		}
	case ast.KindObjectLiteralExpression:
		return c.elaborateObjectLiteral(node.AsObjectLiteralExpression(), source, target, relation, containingMessageChain, errorOutputContainer)
	case ast.KindArrayLiteralExpression:
		return c.elaborateArrayLiteral(node.AsArrayLiteralExpression(), source, target, relation, containingMessageChain, errorOutputContainer)
	case ast.KindJsxAttributes:
		return c.elaborateJsxComponents(node.AsJsxAttributes(), source, target, relation, containingMessageChain, errorOutputContainer)
	case ast.KindArrowFunction:
		return c.elaborateArrowFunction(node.AsArrowFunction(), source, target, relation, containingMessageChain, errorOutputContainer)
	}
	return false
}

func (c *Checker) elaborateDidYouMeanToCallOrConstruct(node Expression, source *Type, target *Type, relation Map[string, RelationComparisonResult], headMessage *DiagnosticMessage, containingMessageChain *func() *DiagnosticMessageChain, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; skipLogging?: boolean; } */ any) bool {
	callSignatures := c.getSignaturesOfType(source, SignatureKindCall)
	constructSignatures := c.getSignaturesOfType(source, SignatureKindConstruct)
	for _, signatures := range [][]Signature{constructSignatures, callSignatures} {
		if core.Some(signatures, func(s Signature) bool {
			returnType := c.getReturnTypeOfSignature(s)
			return returnType.flags&(TypeFlagsAny|TypeFlagsNever) == 0 && c.checkTypeRelatedTo(returnType, target, relation, nil /*errorNode*/)
		}) {
			var resultObj /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; } */ any = errorOutputContainer || map[any]any{ /* TODO(TS-TO-GO): was object literal */
			}
			c.checkTypeAssignableTo(source, target, node, headMessage, containingMessageChain, resultObj)
			diagnostic := resultObj.errors[resultObj.errors.length-1]
			addRelatedInfo(diagnostic, createDiagnosticForNode(node, ifElse(signatures == constructSignatures, Diagnostics.Did_you_mean_to_use_new_with_this_expression, Diagnostics.Did_you_mean_to_call_this_expression)))
			return true
		}
	}
	return false
}

func (c *Checker) elaborateArrowFunction(node ArrowFunction, source *Type, target *Type, relation Map[string, RelationComparisonResult], containingMessageChain *func() *DiagnosticMessageChain, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; skipLogging?: boolean; } */ any) bool {
	// Don't elaborate blocks
	if isBlock(node.Body) {
		return false
	}
	// Or functions with annotated parameter types
	if core.Some(node.Parameters, hasType) {
		return false
	}
	sourceSig := c.getSingleCallSignature(source)
	if sourceSig == nil {
		return false
	}
	targetSignatures := c.getSignaturesOfType(target, SignatureKindCall)
	if length(targetSignatures) == 0 {
		return false
	}
	returnExpression := node.Body
	sourceReturn := c.getReturnTypeOfSignature(sourceSig)
	targetReturn := c.getUnionType(core.Map(targetSignatures, c.getReturnTypeOfSignature))
	if !c.checkTypeRelatedTo(sourceReturn, targetReturn, relation, nil /*errorNode*/) {
		elaborated := returnExpression && c.elaborateError(returnExpression, sourceReturn, targetReturn, relation, nil /*headMessage*/, containingMessageChain, errorOutputContainer)
		if elaborated {
			return elaborated
		}
		var resultObj /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; } */ any = errorOutputContainer || map[any]any{ /* TODO(TS-TO-GO): was object literal */
		}
		c.checkTypeRelatedTo(sourceReturn, targetReturn, relation, returnExpression, nil /*headMessage*/, containingMessageChain, resultObj)
		if resultObj.errors != nil {
			if target.symbol && length(target.symbol.Declarations) != 0 {
				addRelatedInfo(resultObj.errors[resultObj.errors.length-1], createDiagnosticForNode(target.symbol.Declarations[0], Diagnostics.The_expected_type_comes_from_the_return_type_of_this_signature))
			}
			if (getFunctionFlags(node)&FunctionFlagsAsync) == 0 && c.getTypeOfPropertyOfType(sourceReturn, "then" /* as __String */) == nil && c.checkTypeRelatedTo(c.createPromiseType(sourceReturn), targetReturn, relation, nil /*errorNode*/) {
				addRelatedInfo(resultObj.errors[resultObj.errors.length-1], createDiagnosticForNode(node, Diagnostics.Did_you_mean_to_mark_this_function_as_async))
			}
			return true
		}
	}
	return false
}

func (c *Checker) getBestMatchIndexedAccessTypeOrUndefined(source *Type, target *Type, nameType *Type) *Type {
	idx := c.getIndexedAccessTypeOrUndefined(target, nameType)
	if idx != nil {
		return idx
	}
	if target.flags&TypeFlagsUnion != 0 {
		best := c.getBestMatchingType(source, target.AsUnionType())
		if best != nil {
			return c.getIndexedAccessTypeOrUndefined(best, nameType)
		}
	}
}

func (c *Checker) checkExpressionForMutableLocationWithContextualType(next Expression, sourcePropType *Type) *Type {
	c.pushContextualType(next, sourcePropType, false /*isCache*/)
	result := c.checkExpressionForMutableLocation(next, CheckModeContextual)
	c.popContextualType()
	return result
}

/**
 * For every element returned from the iterator, checks that element to issue an error on a property of that element's type
 * If that element would issue an error, we first attempt to dive into that element's inner expression and issue a more specific error by recuring into `elaborateError`
 * Otherwise, we issue an error on _every_ element which fail the assignability check
 */

func (c *Checker) elaborateElementwise(iterator ElaborationIterator, source *Type, target *Type, relation Map[string, RelationComparisonResult], containingMessageChain *func() *DiagnosticMessageChain, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; skipLogging?: boolean; } */ any) bool {
	// Assignability failure - check each prop individually, and if that fails, fall back on the bad error span
	reportedError := false
	for _, value := range iterator {
		TODO_IDENTIFIER := value
		targetPropType := c.getBestMatchIndexedAccessTypeOrUndefined(source, target, nameType)
		if targetPropType == nil || targetPropType.flags&TypeFlagsIndexedAccess != 0 {
			continue
			// Don't elaborate on indexes on generic variables
		}
		// Don't elaborate on indexes on generic variables
		sourcePropType := c.getIndexedAccessTypeOrUndefined(source, nameType)
		if sourcePropType == nil {
			continue
		}
		propName := c.getPropertyNameFromIndex(nameType, nil /*accessNode*/)
		if !c.checkTypeRelatedTo(sourcePropType, targetPropType, relation, nil /*errorNode*/) {
			elaborated := next && c.elaborateError(next, sourcePropType, targetPropType, relation, nil /*headMessage*/, containingMessageChain, errorOutputContainer)
			reportedError = true
			if !elaborated {
				// Issue error on the prop itself, since the prop couldn't elaborate the error
				var resultObj /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; } */ any = errorOutputContainer || map[any]any{ /* TODO(TS-TO-GO): was object literal */
				}
				// Use the expression type, if available
				var specificSource *Type
				if next != nil {
					specificSource = c.checkExpressionForMutableLocationWithContextualType(next, sourcePropType)
				} else {
					specificSource = sourcePropType
				}
				if c.exactOptionalPropertyTypes && c.isExactOptionalPropertyMismatch(specificSource, targetPropType) {
					diag := createDiagnosticForNode(prop, Diagnostics.Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_type_of_the_target, c.typeToString(specificSource), c.typeToString(targetPropType))
					c.diagnostics.add(diag)
					resultObj.errors = []DiagnosticWithLocation{diag}
				} else {
					targetIsOptional := propName && (c.getPropertyOfType(target, propName) || c.unknownSymbol).Flags&ast.SymbolFlagsOptional != 0
					sourceIsOptional := propName && (c.getPropertyOfType(source, propName) || c.unknownSymbol).Flags&ast.SymbolFlagsOptional != 0
					targetPropType = c.removeMissingType(targetPropType, targetIsOptional)
					sourcePropType = c.removeMissingType(sourcePropType, targetIsOptional && sourceIsOptional)
					result := c.checkTypeRelatedTo(specificSource, targetPropType, relation, prop, errorMessage, containingMessageChain, resultObj)
					if result && specificSource != sourcePropType {
						// If for whatever reason the expression type doesn't yield an error, make sure we still issue an error on the sourcePropType
						c.checkTypeRelatedTo(sourcePropType, targetPropType, relation, prop, errorMessage, containingMessageChain, resultObj)
					}
				}
				if resultObj.errors != nil {
					reportedDiag := resultObj.errors[resultObj.errors.length-1]
					var propertyName *string
					if isTypeUsableAsPropertyName(nameType) {
						propertyName = getPropertyNameFromType(nameType)
					} else {
						propertyName = nil
					}
					var targetProp *ast.Symbol
					if propertyName != nil {
						targetProp = c.getPropertyOfType(target, propertyName)
					} else {
						targetProp = nil
					}

					issuedElaboration := false
					if targetProp == nil {
						indexInfo := c.getApplicableIndexInfo(target, nameType)
						if indexInfo != nil && indexInfo.declaration != nil && !getSourceFileOfNode(indexInfo.declaration).HasNoDefaultLib {
							issuedElaboration = true
							addRelatedInfo(reportedDiag, createDiagnosticForNode(indexInfo.declaration, Diagnostics.The_expected_type_comes_from_this_index_signature))
						}
					}

					if !issuedElaboration && (targetProp != nil && length(targetProp.Declarations) != 0 || target.symbol && length(target.symbol.Declarations) != 0) {
						var targetNode Declaration
						if targetProp != nil && length(targetProp.Declarations) != 0 {
							targetNode = targetProp.Declarations[0]
						} else {
							targetNode = target.symbol.Declarations[0]
						}
						if !getSourceFileOfNode(targetNode).HasNoDefaultLib {
							addRelatedInfo(reportedDiag, createDiagnosticForNode(targetNode, Diagnostics.The_expected_type_comes_from_property_0_which_is_declared_here_on_type_1, ifElse(propertyName && nameType.flags&TypeFlagsUniqueESSymbol == 0, unescapeLeadingUnderscores(propertyName), c.typeToString(nameType)), c.typeToString(target)))
						}
					}
				}
			}
		}
	}
	return reportedError
}

/**
 * Assumes `target` type is assignable to the `Iterable` type, if `Iterable` is defined,
 * or that it's an array or tuple-like type, if `Iterable` is not defined.
 */

func (c *Checker) elaborateIterableOrArrayLikeTargetElementwise(iterator ElaborationIterator, source *Type, target *Type, relation Map[string, RelationComparisonResult], containingMessageChain *func() *DiagnosticMessageChain, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; skipLogging?: boolean; } */ any) bool {
	tupleOrArrayLikeTargetParts := c.filterType(target, c.isArrayOrTupleLikeType)
	nonTupleOrArrayLikeTargetParts := c.filterType(target, func(t *Type) bool {
		return !c.isArrayOrTupleLikeType(t)
	})
	// If `nonTupleOrArrayLikeTargetParts` is not `never`, then that should mean `Iterable` is defined.
	var iterationType *Type
	if nonTupleOrArrayLikeTargetParts != c.neverType {
		iterationType = c.getIterationTypeOfIterable(IterationUseForOf, IterationTypeKindYield, nonTupleOrArrayLikeTargetParts, nil /*errorNode*/)
	} else {
		iterationType = nil
	}

	reportedError := false
	for status := iterator.next(); !status.done; status = iterator.next() {
		TODO_IDENTIFIER := status.value
		targetPropType := iterationType
		var targetIndexedPropType *Type
		if tupleOrArrayLikeTargetParts != c.neverType {
			targetIndexedPropType = c.getBestMatchIndexedAccessTypeOrUndefined(source, tupleOrArrayLikeTargetParts, nameType)
		} else {
			targetIndexedPropType = nil
		}
		if targetIndexedPropType != nil && targetIndexedPropType.flags&TypeFlagsIndexedAccess == 0 {
			if iterationType != nil {
				targetPropType = c.getUnionType([]*Type{iterationType, targetIndexedPropType})
			} else {
				targetPropType = targetIndexedPropType
			}
		}
		if targetPropType == nil {
			continue
		}
		sourcePropType := c.getIndexedAccessTypeOrUndefined(source, nameType)
		if sourcePropType == nil {
			continue
		}
		propName := c.getPropertyNameFromIndex(nameType, nil /*accessNode*/)
		if !c.checkTypeRelatedTo(sourcePropType, targetPropType, relation, nil /*errorNode*/) {
			elaborated := next && c.elaborateError(next, sourcePropType, targetPropType, relation, nil /*headMessage*/, containingMessageChain, errorOutputContainer)
			reportedError = true
			if !elaborated {
				// Issue error on the prop itself, since the prop couldn't elaborate the error
				var resultObj /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; } */ any = errorOutputContainer || map[any]any{ /* TODO(TS-TO-GO): was object literal */
				}
				// Use the expression type, if available
				var specificSource *Type
				if next != nil {
					specificSource = c.checkExpressionForMutableLocationWithContextualType(next, sourcePropType)
				} else {
					specificSource = sourcePropType
				}
				if c.exactOptionalPropertyTypes && c.isExactOptionalPropertyMismatch(specificSource, targetPropType) {
					diag := createDiagnosticForNode(prop, Diagnostics.Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_type_of_the_target, c.typeToString(specificSource), c.typeToString(targetPropType))
					c.diagnostics.add(diag)
					resultObj.errors = []DiagnosticWithLocation{diag}
				} else {
					targetIsOptional := propName && (c.getPropertyOfType(tupleOrArrayLikeTargetParts, propName) || c.unknownSymbol).Flags&ast.SymbolFlagsOptional != 0
					sourceIsOptional := propName && (c.getPropertyOfType(source, propName) || c.unknownSymbol).Flags&ast.SymbolFlagsOptional != 0
					targetPropType = c.removeMissingType(targetPropType, targetIsOptional)
					sourcePropType = c.removeMissingType(sourcePropType, targetIsOptional && sourceIsOptional)
					result := c.checkTypeRelatedTo(specificSource, targetPropType, relation, prop, errorMessage, containingMessageChain, resultObj)
					if result && specificSource != sourcePropType {
						// If for whatever reason the expression type doesn't yield an error, make sure we still issue an error on the sourcePropType
						c.checkTypeRelatedTo(sourcePropType, targetPropType, relation, prop, errorMessage, containingMessageChain, resultObj)
					}
				}
			}
		}
	}
	return reportedError
}

func (c *Checker) generateJsxAttributes(node JsxAttributes) ElaborationIterator {
	if length(node.Properties) == 0 {
		return
	}
	for _, prop := range node.Properties {
		if isJsxSpreadAttribute(prop) || c.isHyphenatedJsxName(getTextOfJsxAttributeName(prop.Name)) {
			continue
		}
		yield(map[any]any{ /* TODO(TS-TO-GO): was object literal */
			"errorNode":       prop.Name,
			"innerExpression": prop.Initializer,
			"nameType":        c.getStringLiteralType(getTextOfJsxAttributeName(prop.Name)),
		})
	}
}

func (c *Checker) generateJsxChildren(node JsxElement, getInvalidTextDiagnostic func() DiagnosticMessage) ElaborationIterator {
	if length(node.Children) == 0 {
		return
	}
	memberOffset := 0
	for i := 0; i < node.Children.length; i++ {
		child := node.Children[i]
		nameType := c.getNumberLiteralType(i - memberOffset)
		elem := c.getElaborationElementForJsxChild(child, nameType, getInvalidTextDiagnostic)
		if elem != nil {
			yield(elem)
		} else {
			memberOffset++
		}
	}
}

func (c *Checker) getElaborationElementForJsxChild(child JsxChild, nameType LiteralType, getInvalidTextDiagnostic func() DiagnosticMessage) * /* TODO(TS-TO-GO) inferred type { errorNode: JsxExpression; innerExpression: Expression | undefined; nameType: LiteralType; errorMessage?: undefined; } | { errorNode: JsxText; innerExpression: undefined; nameType: LiteralType; errorMessage: DiagnosticMessage; } | { errorNode: JsxElement | JsxSelfClosingElement | JsxFragment; innerExpression: JsxElement | JsxSelfClosingElement | JsxFragment; nameType: LiteralType; errorMessage?: undefined; } */ any {
	switch child.Kind {
	case ast.KindJsxExpression:
		// child is of the type of the expression
		return map[any]any{ /* TODO(TS-TO-GO): was object literal */
			"errorNode":       child,
			"innerExpression": child.Expression,
			"nameType":        nameType,
		}
	case ast.KindJsxText:
		if child.ContainsOnlyTriviaWhiteSpaces {
			break
			// Whitespace only jsx text isn't real jsx text
		}
		// child is a string
		return map[any]any{ /* TODO(TS-TO-GO): was object literal */
			"errorNode":       child,
			"innerExpression": nil,
			"nameType":        nameType,
			"errorMessage":    getInvalidTextDiagnostic(),
		}
	case ast.KindJsxElement,
		ast.KindJsxSelfClosingElement,
		ast.KindJsxFragment:
		// child is of type JSX.Element
		return map[any]any{ /* TODO(TS-TO-GO): was object literal */
			"errorNode":       child,
			"innerExpression": child,
			"nameType":        nameType,
		}
	default:
		return Debug.assertNever(child, "Found invalid jsx child")
	}
}

func (c *Checker) elaborateJsxComponents(node JsxAttributes, source *Type, target *Type, relation Map[string, RelationComparisonResult], containingMessageChain *func() *DiagnosticMessageChain, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; skipLogging?: boolean; } */ any) bool {
	result := c.elaborateElementwise(c.generateJsxAttributes(node), source, target, relation, containingMessageChain, errorOutputContainer)
	var invalidTextDiagnostic *DiagnosticMessage
	if isJsxOpeningElement(node.Parent) && isJsxElement(node.Parent.Parent) {
		containingElement := node.Parent.Parent
		childPropName := c.getJsxElementChildrenPropertyName(c.getJsxNamespaceAt(node))
		var childrenPropName string
		if childPropName == nil {
			childrenPropName = "children"
		} else {
			childrenPropName = unescapeLeadingUnderscores(childPropName)
		}
		childrenNameType := c.getStringLiteralType(childrenPropName)
		childrenTargetType := c.getIndexedAccessType(target, childrenNameType)
		validChildren := getSemanticJsxChildren(containingElement.Children)
		if length(validChildren) == 0 {
			return result
		}
		moreThanOneRealChildren := length(validChildren) > 1
		var arrayLikeTargetParts *Type
		var nonArrayLikeTargetParts *Type
		iterableType := c.getGlobalIterableType(false)
		if iterableType != c.emptyGenericType {
			anyIterable := c.createIterableType(c.anyType)
			arrayLikeTargetParts = c.filterType(childrenTargetType, func(t *Type) bool {
				return c.isTypeAssignableTo(t, anyIterable)
			})
			nonArrayLikeTargetParts = c.filterType(childrenTargetType, func(t *Type) bool {
				return !c.isTypeAssignableTo(t, anyIterable)
			})
		} else {
			arrayLikeTargetParts = c.filterType(childrenTargetType, c.isArrayOrTupleLikeType)
			nonArrayLikeTargetParts = c.filterType(childrenTargetType, func(t *Type) bool {
				return !c.isArrayOrTupleLikeType(t)
			})
		}
		if moreThanOneRealChildren {
			if arrayLikeTargetParts != c.neverType {
				realSource := c.createTupleType(c.checkJsxChildren(containingElement, CheckModeNormal))
				children := c.generateJsxChildren(containingElement, getInvalidTextualChildDiagnostic)
				result = c.elaborateIterableOrArrayLikeTargetElementwise(children, realSource, arrayLikeTargetParts, relation, containingMessageChain, errorOutputContainer) || result
			} else if !c.isTypeRelatedTo(c.getIndexedAccessType(source, childrenNameType), childrenTargetType, relation) {
				// arity mismatch
				result = true
				diag := c.error(containingElement.OpeningElement.TagName, Diagnostics.This_JSX_tag_s_0_prop_expects_a_single_child_of_type_1_but_multiple_children_were_provided, childrenPropName, c.typeToString(childrenTargetType))
				if errorOutputContainer != nil && errorOutputContainer.skipLogging {
					(errorOutputContainer.errors || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: errorOutputContainer.errors = [] */ TODO)).push(diag)
				}
			}
		} else {
			if nonArrayLikeTargetParts != c.neverType {
				child := validChildren[0]
				elem := c.getElaborationElementForJsxChild(child, childrenNameType, getInvalidTextualChildDiagnostic)
				if elem != nil {
					result = c.elaborateElementwise((func /* generator */ () /* TODO(TS-TO-GO) inferred type Generator<{ errorNode: JsxExpression; innerExpression: Expression | undefined; nameType: LiteralType; errorMessage?: undefined; } | { errorNode: JsxText; innerExpression: undefined; nameType: LiteralType; errorMessage: DiagnosticMessage; } | { errorNode: JsxElement | JsxSelfClosingElement | JsxFragment; innerExpression: JsxElement | JsxSelfClosingElement | JsxFragment; nameType: LiteralType; errorMessage?: undefined; }, void, any> */ any {
						yield(elem)
					})(), source, target, relation, containingMessageChain, errorOutputContainer) || result
				}
			} else if !c.isTypeRelatedTo(c.getIndexedAccessType(source, childrenNameType), childrenTargetType, relation) {
				// arity mismatch
				result = true
				diag := c.error(containingElement.OpeningElement.TagName, Diagnostics.This_JSX_tag_s_0_prop_expects_type_1_which_requires_multiple_children_but_only_a_single_child_was_provided, childrenPropName, c.typeToString(childrenTargetType))
				if errorOutputContainer != nil && errorOutputContainer.skipLogging {
					(errorOutputContainer.errors || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: errorOutputContainer.errors = [] */ TODO)).push(diag)
				}
			}
		}
	}
	return result

	getInvalidTextualChildDiagnostic := func() *DiagnosticMessage {
		if invalidTextDiagnostic == nil {
			tagNameText := getTextOfNode(node.Parent.TagName)
			childPropName := c.getJsxElementChildrenPropertyName(c.getJsxNamespaceAt(node))
			var childrenPropName string
			if childPropName == nil {
				childrenPropName = "children"
			} else {
				childrenPropName = unescapeLeadingUnderscores(childPropName)
			}
			childrenTargetType := c.getIndexedAccessType(target, c.getStringLiteralType(childrenPropName))
			diagnostic := Diagnostics._0_components_don_t_accept_text_as_child_elements_Text_in_JSX_has_the_type_string_but_the_expected_type_of_1_is_2
			invalidTextDiagnostic = &DiagnosticMessage{
				/* TODO(TS-TO-GO) Node SpreadAssignment: ...diagnostic */
				key:     "!!ALREADY FORMATTED!!",
				message: formatMessage(diagnostic, tagNameText, childrenPropName, c.typeToString(childrenTargetType)),
			}
		}
		return invalidTextDiagnostic
	}

}

func (c *Checker) generateLimitedTupleElements(node ArrayLiteralExpression, target *Type) ElaborationIterator {
	len := length(node.Elements)
	if len == 0 {
		return
	}
	for i := 0; i < len; i++ {
		// Skip elements which do not exist in the target - a length error on the tuple overall is likely better than an error on a mismatched index signature
		if c.isTupleLikeType(target) && c.getPropertyOfType(target, (""+i).(string)) == nil {
			continue
		}
		elem := node.Elements[i]
		if isOmittedExpression(elem) {
			continue
		}
		nameType := c.getNumberLiteralType(i)
		checkNode := c.getEffectiveCheckNode(elem)
		yield(map[any]any{ /* TODO(TS-TO-GO): was object literal */
			"errorNode":       checkNode,
			"innerExpression": checkNode,
			"nameType":        nameType,
		})
	}
}

func (c *Checker) elaborateArrayLiteral(node ArrayLiteralExpression, source *Type, target *Type, relation Map[string, RelationComparisonResult], containingMessageChain *func() *DiagnosticMessageChain, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; skipLogging?: boolean; } */ any) bool {
	if target.flags&(TypeFlagsPrimitive|TypeFlagsNever) != 0 {
		return false
	}
	if c.isTupleLikeType(source) {
		return c.elaborateElementwise(c.generateLimitedTupleElements(node, target), source, target, relation, containingMessageChain, errorOutputContainer)
	}
	// recreate a tuple from the elements, if possible
	// Since we're re-doing the expression type, we need to reapply the contextual type
	c.pushContextualType(node, target, false /*isCache*/)
	tupleizedType := c.checkArrayLiteral(node, CheckModeContextual, true /*forceTuple*/)
	c.popContextualType()
	if c.isTupleLikeType(tupleizedType) {
		return c.elaborateElementwise(c.generateLimitedTupleElements(node, target), tupleizedType, target, relation, containingMessageChain, errorOutputContainer)
	}
	return false
}

func (c *Checker) generateObjectLiteralElements(node ObjectLiteralExpression) ElaborationIterator {
	if length(node.Properties) == 0 {
		return
	}
	for _, prop := range node.Properties {
		if isSpreadAssignment(prop) {
			continue
		}
		t := c.getLiteralTypeFromProperty(c.getSymbolOfDeclaration(prop), TypeFlagsStringOrNumberLiteralOrUnique)
		if !t || (t.flags&TypeFlagsNever != 0) {
			continue
		}
		switch prop.Kind {
		case ast.KindSetAccessor,
			ast.KindGetAccessor,
			ast.KindMethodDeclaration,
			ast.KindShorthandPropertyAssignment:
			yield(map[any]any{ /* TODO(TS-TO-GO): was object literal */
				"errorNode":       prop.Name,
				"innerExpression": nil,
				"nameType":        t,
			})
		case ast.KindPropertyAssignment:
			yield(map[any]any{ /* TODO(TS-TO-GO): was object literal */
				"errorNode":       prop.Name,
				"innerExpression": prop.Initializer,
				"nameType":        t,
				"errorMessage":    ifElse(isComputedNonLiteralName(prop.Name), Diagnostics.Type_of_computed_property_s_value_is_0_which_is_not_assignable_to_type_1, nil),
			})
		default:
			Debug.assertNever(prop)
		}
	}
}

func (c *Checker) elaborateObjectLiteral(node ObjectLiteralExpression, source *Type, target *Type, relation Map[string, RelationComparisonResult], containingMessageChain *func() *DiagnosticMessageChain, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; skipLogging?: boolean; } */ any) bool {
	if target.flags&(TypeFlagsPrimitive|TypeFlagsNever) != 0 {
		return false
	}
	return c.elaborateElementwise(c.generateObjectLiteralElements(node), source, target, relation, containingMessageChain, errorOutputContainer)
}

/**
 * This is *not* a bi-directional relationship.
 * If one needs to check both directions for comparability, use a second call to this function or 'isTypeComparableTo'.
 */

func (c *Checker) checkTypeComparableTo(source *Type, target *Type, errorNode *ast.Node, headMessage DiagnosticMessage, containingMessageChain func() *DiagnosticMessageChain) bool {
	return c.checkTypeRelatedTo(source, target, c.comparableRelation, errorNode, headMessage, containingMessageChain)
}

func (c *Checker) isSignatureAssignableTo(source Signature, target Signature, ignoreReturnTypes bool) bool {
	return c.compareSignaturesRelated(source, target, ifElse(ignoreReturnTypes, SignatureCheckModeIgnoreReturnTypes, SignatureCheckModeNone), false /*reportErrors*/, nil /*errorReporter*/, nil /*incompatibleErrorReporter*/, c.compareTypesAssignable, nil /*reportUnreliableMarkers*/) != TernaryFalse
}

/**
 * Returns true if `s` is `(...args: A) => R` where `A` is `any`, `any[]`, `never`, or `never[]`, and `R` is `any` or `unknown`.
 */

func (c *Checker) isTopSignature(s Signature) bool {
	if s.typeParameters == nil && (s.thisParameter == nil || c.isTypeAny(c.getTypeOfParameter(s.thisParameter))) && s.parameters.length == 1 && signatureHasRestParameter(s) {
		paramType := c.getTypeOfParameter(s.parameters[0])
		var restType *Type
		if c.isArrayType(paramType) {
			restType = c.getTypeArguments(paramType)[0]
		} else {
			restType = paramType
		}
		return restType.flags&(TypeFlagsAny|TypeFlagsNever) != 0 && c.getReturnTypeOfSignature(s).flags&TypeFlagsAnyOrUnknown != 0
	}
	return false
}

/**
 * See signatureRelatedTo, compareSignaturesIdentical
 */

func (c *Checker) compareSignaturesRelated(source Signature, target Signature, checkMode SignatureCheckMode, reportErrors bool, errorReporter *ErrorReporter, incompatibleErrorReporter *func(source *Type, target *Type), compareTypes TypeComparer, reportUnreliableMarkers *TypeMapper) Ternary {
	// TODO (drosen): De-duplicate code between related functions.
	if source == target {
		return TernaryTrue
	}

	if !(checkMode&SignatureCheckModeStrictTopSignature != 0 && c.isTopSignature(source)) && c.isTopSignature(target) {
		return TernaryTrue
	}
	if checkMode&SignatureCheckModeStrictTopSignature != 0 && c.isTopSignature(source) && !c.isTopSignature(target) {
		return TernaryFalse
	}

	targetCount := c.getParameterCount(target)
	sourceHasMoreParameters := !c.hasEffectiveRestParameter(target) && (ifElse(checkMode&SignatureCheckModeStrictArity != 0, c.hasEffectiveRestParameter(source) || c.getParameterCount(source) > targetCount, c.getMinArgumentCount(source) > targetCount))
	if sourceHasMoreParameters {
		if reportErrors && checkMode&SignatureCheckModeStrictArity == 0 {
			// the second condition should be redundant, because there is no error reporting when comparing signatures by strict arity
			// since it is only done for subtype reduction
			errorReporter(Diagnostics.Target_signature_provides_too_few_arguments_Expected_0_or_more_but_got_1, c.getMinArgumentCount(source), targetCount)
		}
		return TernaryFalse
	}

	if source.typeParameters != nil && source.typeParameters != target.typeParameters {
		target = c.getCanonicalSignature(target)
		source = c.instantiateSignatureInContextOf(source, target, nil /*inferenceContext*/, compareTypes)
	}

	sourceCount := c.getParameterCount(source)
	sourceRestType := c.getNonArrayRestType(source)
	targetRestType := c.getNonArrayRestType(target)
	if sourceRestType != nil || targetRestType != nil {
		c.instantiateType(sourceRestType || targetRestType, reportUnreliableMarkers)
	}

	var kind /* TODO(TS-TO-GO) inferred type SyntaxKind.Unknown | SyntaxKind.MethodSignature | SyntaxKind.MethodDeclaration | SyntaxKind.Constructor | SyntaxKind.GetAccessor | SyntaxKind.SetAccessor | SyntaxKind.CallSignature | SyntaxKind.ConstructSignature | SyntaxKind.IndexSignature | SyntaxKind.FunctionType | SyntaxKind.ConstructorType | SyntaxKind.FunctionExpression | SyntaxKind.ArrowFunction | SyntaxKind.FunctionDeclaration | SyntaxKind.JSDocFunctionType | SyntaxKind.JSDocSignature */ any
	if target.declaration != nil {
		kind = target.declaration.Kind
	} else {
		kind = ast.KindUnknown
	}
	strictVariance := checkMode&SignatureCheckModeCallback == 0 && c.strictFunctionTypes && kind != ast.KindMethodDeclaration && kind != ast.KindMethodSignature && kind != ast.KindConstructor
	result := TernaryTrue

	sourceThisType := c.getThisTypeOfSignature(source)
	if sourceThisType != nil && sourceThisType != c.voidType {
		targetThisType := c.getThisTypeOfSignature(target)
		if targetThisType != nil {
			// void sources are assignable to anything.
			related := !strictVariance && compareTypes(sourceThisType, targetThisType, false /*reportErrors*/) || compareTypes(targetThisType, sourceThisType, reportErrors)
			if related == 0 {
				if reportErrors {
					errorReporter(Diagnostics.The_this_types_of_each_signature_are_incompatible)
				}
				return TernaryFalse
			}
			result &= related
		}
	}

	var paramCount number
	if sourceRestType != nil || targetRestType != nil {
		paramCount = min(sourceCount, targetCount)
	} else {
		paramCount = max(sourceCount, targetCount)
	}
	var restIndex number
	if sourceRestType != nil || targetRestType != nil {
		restIndex = paramCount - 1
	} else {
		restIndex = -1
	}

	for i := 0; i < paramCount; i++ {
		var sourceType *Type
		if i == restIndex {
			sourceType = c.getRestOrAnyTypeAtPosition(source, i)
		} else {
			sourceType = c.tryGetTypeAtPosition(source, i)
		}
		var targetType *Type
		if i == restIndex {
			targetType = c.getRestOrAnyTypeAtPosition(target, i)
		} else {
			targetType = c.tryGetTypeAtPosition(target, i)
		}
		if sourceType != nil && targetType != nil && (sourceType != targetType || checkMode&SignatureCheckModeStrictArity != 0) {
			// In order to ensure that any generic type Foo<T> is at least co-variant with respect to T no matter
			// how Foo uses T, we need to relate parameters bi-variantly (given that parameters are input positions,
			// they naturally relate only contra-variantly). However, if the source and target parameters both have
			// function types with a single call signature, we know we are relating two callback parameters. In
			// that case it is sufficient to only relate the parameters of the signatures co-variantly because,
			// similar to return values, callback parameters are output positions. This means that a Promise<T>,
			// where T is used only in callback parameter positions, will be co-variant (as opposed to bi-variant)
			// with respect to T.
			var sourceSig *Signature
			if checkMode&SignatureCheckModeCallback != 0 || c.isInstantiatedGenericParameter(source, i) {
				sourceSig = nil
			} else {
				sourceSig = c.getSingleCallSignature(c.getNonNullableType(sourceType))
			}
			var targetSig *Signature
			if checkMode&SignatureCheckModeCallback != 0 || c.isInstantiatedGenericParameter(target, i) {
				targetSig = nil
			} else {
				targetSig = c.getSingleCallSignature(c.getNonNullableType(targetType))
			}
			callbacks := sourceSig && targetSig && c.getTypePredicateOfSignature(sourceSig) == nil && c.getTypePredicateOfSignature(targetSig) == nil && c.getTypeFacts(sourceType, TypeFactsIsUndefinedOrNull) == c.getTypeFacts(targetType, TypeFactsIsUndefinedOrNull)
			var related Ternary
			if callbacks {
				related = c.compareSignaturesRelated(targetSig, sourceSig, (checkMode&SignatureCheckModeStrictArity)|(ifElse(strictVariance, SignatureCheckModeStrictCallback, SignatureCheckModeBivariantCallback)), reportErrors, errorReporter, incompatibleErrorReporter, compareTypes, reportUnreliableMarkers)
			} else {
				related = checkMode&SignatureCheckModeCallback == 0 && !strictVariance && compareTypes(sourceType, targetType, false /*reportErrors*/) || compareTypes(targetType, sourceType, reportErrors)
			}
			// With strict arity, (x: number | undefined) => void is a subtype of (x?: number | undefined) => void
			if related != 0 && checkMode&SignatureCheckModeStrictArity != 0 && i >= c.getMinArgumentCount(source) && i < c.getMinArgumentCount(target) && compareTypes(sourceType, targetType, false /*reportErrors*/) != 0 {
				related = TernaryFalse
			}
			if related == 0 {
				if reportErrors {
					errorReporter(Diagnostics.Types_of_parameters_0_and_1_are_incompatible, unescapeLeadingUnderscores(c.getParameterNameAtPosition(source, i)), unescapeLeadingUnderscores(c.getParameterNameAtPosition(target, i)))
				}
				return TernaryFalse
			}
			result &= related
		}
	}

	if checkMode&SignatureCheckModeIgnoreReturnTypes == 0 {
		// If a signature resolution is already in-flight, skip issuing a circularity error
		// here and just use the `any` type directly
		var targetReturnType *Type
		switch {
		case c.isResolvingReturnTypeOfSignature(target):
			targetReturnType = c.anyType
		case target.declaration != nil && c.isJSConstructor(target.declaration):
			targetReturnType = c.getDeclaredTypeOfClassOrInterface(c.getMergedSymbol(target.declaration.Symbol))
		default:
			targetReturnType = c.getReturnTypeOfSignature(target)
		}
		if targetReturnType == c.voidType || targetReturnType == c.anyType {
			return result
		}
		var sourceReturnType *Type
		switch {
		case c.isResolvingReturnTypeOfSignature(source):
			sourceReturnType = c.anyType
		case source.declaration != nil && c.isJSConstructor(source.declaration):
			sourceReturnType = c.getDeclaredTypeOfClassOrInterface(c.getMergedSymbol(source.declaration.Symbol))
		default:
			sourceReturnType = c.getReturnTypeOfSignature(source)
		}

		// The following block preserves behavior forbidding boolean returning functions from being assignable to type guard returning functions
		targetTypePredicate := c.getTypePredicateOfSignature(target)
		if targetTypePredicate != nil {
			sourceTypePredicate := c.getTypePredicateOfSignature(source)
			if sourceTypePredicate != nil {
				result &= c.compareTypePredicateRelatedTo(sourceTypePredicate, targetTypePredicate, reportErrors, errorReporter, compareTypes)
			} else if isIdentifierTypePredicate(targetTypePredicate) || isThisTypePredicate(targetTypePredicate) {
				if reportErrors {
					errorReporter(Diagnostics.Signature_0_must_be_a_type_predicate, c.signatureToString(source))
				}
				return TernaryFalse
			}
		} else {
			// When relating callback signatures, we still need to relate return types bi-variantly as otherwise
			// the containing type wouldn't be co-variant. For example, interface Foo<T> { add(cb: () => T): void }
			// wouldn't be co-variant for T without this rule.
			result &= checkMode&SignatureCheckModeBivariantCallback && compareTypes(targetReturnType, sourceReturnType, false /*reportErrors*/) || compareTypes(sourceReturnType, targetReturnType, reportErrors)
			if result == 0 && reportErrors && incompatibleErrorReporter != nil {
				incompatibleErrorReporter(sourceReturnType, targetReturnType)
			}
		}
	}

	return result
}

func (c *Checker) compareTypePredicateRelatedTo(source TypePredicate, target TypePredicate, reportErrors bool, errorReporter *ErrorReporter, compareTypes func(s *Type, t *Type, reportErrors bool) Ternary) Ternary {
	if source.kind != target.kind {
		if reportErrors {
			errorReporter(Diagnostics.A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard)
			errorReporter(Diagnostics.Type_predicate_0_is_not_assignable_to_1, c.typePredicateToString(source), c.typePredicateToString(target))
		}
		return TernaryFalse
	}

	if source.kind == TypePredicateKindIdentifier || source.kind == TypePredicateKindAssertsIdentifier {
		if source.parameterIndex != (target.(IdentifierTypePredicate)).parameterIndex {
			if reportErrors {
				errorReporter(Diagnostics.Parameter_0_is_not_in_the_same_position_as_parameter_1, source.parameterName, (target.(IdentifierTypePredicate)).parameterName)
				errorReporter(Diagnostics.Type_predicate_0_is_not_assignable_to_1, c.typePredicateToString(source), c.typePredicateToString(target))
			}
			return TernaryFalse
		}
	}

	var related Ternary
	switch {
	case source.type_ == target.type_:
		related = TernaryTrue
	case source.type_ != nil && target.type_ != nil:
		related = compareTypes(source.type_, target.type_, reportErrors)
	default:
		related = TernaryFalse
	}
	if related == TernaryFalse && reportErrors {
		errorReporter(Diagnostics.Type_predicate_0_is_not_assignable_to_1, c.typePredicateToString(source), c.typePredicateToString(target))
	}
	return related
}

func (c *Checker) isImplementationCompatibleWithOverload(implementation Signature, overload Signature) bool {
	erasedSource := c.getErasedSignature(implementation)
	erasedTarget := c.getErasedSignature(overload)

	// First see if the return types are compatible in either direction.
	sourceReturnType := c.getReturnTypeOfSignature(erasedSource)
	targetReturnType := c.getReturnTypeOfSignature(erasedTarget)
	if targetReturnType == c.voidType || c.isTypeRelatedTo(targetReturnType, sourceReturnType, c.assignableRelation) || c.isTypeRelatedTo(sourceReturnType, targetReturnType, c.assignableRelation) {
		return c.isSignatureAssignableTo(erasedSource, erasedTarget, true /*ignoreReturnTypes*/)
	}

	return false
}

func (c *Checker) isEmptyResolvedType(t ResolvedType) bool {
	return t != c.anyFunctionType && t.properties.length == 0 && t.callSignatures.length == 0 && t.constructSignatures.length == 0 && t.indexInfos.length == 0
}

func (c *Checker) isEmptyObjectType(t *Type) bool {
	switch {
	case t.flags&TypeFlagsObject != 0:
		return !c.isGenericMappedType(t) && c.isEmptyResolvedType(c.resolveStructuredTypeMembers(t.AsObjectType()))
	case t.flags&TypeFlagsNonPrimitive != 0:
		return true
	case t.flags&TypeFlagsUnion != 0:
		return core.Some(t.AsUnionType().types, c.isEmptyObjectType)
	case t.flags&TypeFlagsIntersection != 0:
		return core.Every(t.AsUnionType().types, c.isEmptyObjectType)
	default:
		return false
	}
}

func (c *Checker) isEmptyAnonymousObjectType(t *Type) bool {
	return getObjectFlags(t)&ObjectFlagsAnonymous != 0 && (t.AsResolvedType().members && c.isEmptyResolvedType(t.AsResolvedType()) || t.symbol && t.symbol.Flags&ast.SymbolFlagsTypeLiteral != 0 && c.getMembersOfSymbol(t.symbol).size == 0)
}

func (c *Checker) isUnknownLikeUnionType(t *Type) bool {
	if c.strictNullChecks && t.flags&TypeFlagsUnion != 0 {
		if t.AsUnionType().objectFlags&ObjectFlagsIsUnknownLikeUnionComputed == 0 {
			types := t.AsUnionType().types
			t.AsUnionType().objectFlags |= ObjectFlagsIsUnknownLikeUnionComputed | (ifElse(types.length >= 3 && types[0].flags&TypeFlagsUndefined != 0 && types[1].flags&TypeFlagsNull != 0 && core.Some(types, c.isEmptyAnonymousObjectType), ObjectFlagsIsUnknownLikeUnion, 0))
		}
		return t.AsUnionType().objectFlags&ObjectFlagsIsUnknownLikeUnion != 0
	}
	return false
}

func (c *Checker) containsUndefinedType(t *Type) bool {
	return (ifElse(t.flags&TypeFlagsUnion != 0, t.AsUnionType().types[0], t)).flags&TypeFlagsUndefined != 0
}

func (c *Checker) containsNonMissingUndefinedType(t *Type) bool {
	var candidate *Type
	if t.flags&TypeFlagsUnion != 0 {
		candidate = t.AsUnionType().types[0]
	} else {
		candidate = t
	}
	return candidate.flags&TypeFlagsUndefined != 0 && candidate != c.missingType
}

func (c *Checker) isStringIndexSignatureOnlyType(t *Type) bool {
	return t.flags&TypeFlagsObject && !c.isGenericMappedType(t) && c.getPropertiesOfType(t).length == 0 && c.getIndexInfosOfType(t).length == 1 && c.getIndexInfoOfType(t, c.stringType) != nil || t.flags&TypeFlagsUnionOrIntersection && core.Every(t.AsUnionOrIntersectionType().types, c.isStringIndexSignatureOnlyType) || false
}

func (c *Checker) isEnumTypeRelatedTo(source *ast.Symbol, target *ast.Symbol, errorReporter ErrorReporter) bool {
	var sourceSymbol *ast.Symbol
	if source.Flags&ast.SymbolFlagsEnumMember != 0 {
		sourceSymbol = c.getParentOfSymbol(source)
	} else {
		sourceSymbol = source
	}
	var targetSymbol *ast.Symbol
	if target.Flags&ast.SymbolFlagsEnumMember != 0 {
		targetSymbol = c.getParentOfSymbol(target)
	} else {
		targetSymbol = target
	}
	if sourceSymbol == targetSymbol {
		return true
	}
	if sourceSymbol.EscapedName != targetSymbol.EscapedName || sourceSymbol.Flags&ast.SymbolFlagsRegularEnum == 0 || targetSymbol.Flags&ast.SymbolFlagsRegularEnum == 0 {
		return false
	}
	id := getSymbolId(sourceSymbol) + "," + getSymbolId(targetSymbol)
	entry := c.enumRelation.get(id)
	if entry != nil && !(entry&RelationComparisonResultFailed != 0 && errorReporter != nil) {
		return entry&RelationComparisonResultSucceeded != 0
	}
	targetEnumType := c.getTypeOfSymbol(targetSymbol)
	for _, sourceProperty := range c.getPropertiesOfType(c.getTypeOfSymbol(sourceSymbol)) {
		if sourceProperty.Flags&ast.SymbolFlagsEnumMember != 0 {
			targetProperty := c.getPropertyOfType(targetEnumType, sourceProperty.EscapedName)
			if targetProperty == nil || targetProperty.Flags&ast.SymbolFlagsEnumMember == 0 {
				if errorReporter != nil {
					errorReporter(Diagnostics.Property_0_is_missing_in_type_1, symbolName(sourceProperty), c.typeToString(c.getDeclaredTypeOfSymbol(targetSymbol), nil /*enclosingDeclaration*/, TypeFormatFlagsUseFullyQualifiedType))
				}
				c.enumRelation.set(id, RelationComparisonResultFailed)
				return false
			}
			sourceValue := c.getEnumMemberValue(getDeclarationOfKind(sourceProperty, ast.KindEnumMember)).value
			targetValue := c.getEnumMemberValue(getDeclarationOfKind(targetProperty, ast.KindEnumMember)).value
			if sourceValue != targetValue {
				sourceIsString := /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof sourceValue */ TODO == "string"
				targetIsString := /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof targetValue */ TODO == "string"

				// If we have 2 enums with *known* values that differ, they are incompatible.
				if sourceValue != nil && targetValue != nil {
					if errorReporter != nil {
						var escapedSource /* TODO(TS-TO-GO) inferred type string | number */ any
						if sourceIsString {
							escapedSource = __TEMPLATE__("\"", escapeString(sourceValue), "\"")
						} else {
							escapedSource = sourceValue
						}
						var escapedTarget /* TODO(TS-TO-GO) inferred type string | number */ any
						if targetIsString {
							escapedTarget = __TEMPLATE__("\"", escapeString(targetValue), "\"")
						} else {
							escapedTarget = targetValue
						}
						errorReporter(Diagnostics.Each_declaration_of_0_1_differs_in_its_value_where_2_was_expected_but_3_was_given, symbolName(targetSymbol), symbolName(targetProperty), escapedTarget, escapedSource)
					}
					c.enumRelation.set(id, RelationComparisonResultFailed)
					return false
				}

				// At this point we know that at least one of the values is 'undefined'.
				// This may mean that we have an opaque member from an ambient enum declaration,
				// or that we were not able to calculate it (which is basically an error).
				//
				// Either way, we can assume that it's numeric.
				// If the other is a string, we have a mismatch in types.
				if sourceIsString || targetIsString {
					if errorReporter != nil {
						knownStringValue := ifNotNilElse(sourceValue, targetValue)
						Debug.assert( /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof knownStringValue */ TODO == "string")
						escapedValue := __TEMPLATE__("\"", escapeString(knownStringValue), "\"")
						errorReporter(Diagnostics.One_value_of_0_1_is_the_string_2_and_the_other_is_assumed_to_be_an_unknown_numeric_value, symbolName(targetSymbol), symbolName(targetProperty), escapedValue)
					}
					c.enumRelation.set(id, RelationComparisonResultFailed)
					return false
				}
			}
		}
	}
	c.enumRelation.set(id, RelationComparisonResultSucceeded)
	return true
}

func (c *Checker) isSimpleTypeRelatedTo(source *Type, target *Type, relation Map[string, RelationComparisonResult], errorReporter ErrorReporter) bool {
	s := source.flags
	t := target.flags
	if t&TypeFlagsAny != 0 || s&TypeFlagsNever != 0 || source == c.wildcardType {
		return true
	}
	if t&TypeFlagsUnknown != 0 && !(relation == c.strictSubtypeRelation && s&TypeFlagsAny != 0) {
		return true
	}
	if t&TypeFlagsNever != 0 {
		return false
	}
	if s&TypeFlagsStringLike != 0 && t&TypeFlagsString != 0 {
		return true
	}
	if s&TypeFlagsStringLiteral != 0 && s&TypeFlagsEnumLiteral != 0 && t&TypeFlagsStringLiteral != 0 && t&TypeFlagsEnumLiteral == 0 && source.AsStringLiteralType().value == target.AsStringLiteralType().value {
		return true
	}
	if s&TypeFlagsNumberLike != 0 && t&TypeFlagsNumber != 0 {
		return true
	}
	if s&TypeFlagsNumberLiteral != 0 && s&TypeFlagsEnumLiteral != 0 && t&TypeFlagsNumberLiteral != 0 && t&TypeFlagsEnumLiteral == 0 && source.AsNumberLiteralType().value == target.AsNumberLiteralType().value {
		return true
	}
	if s&TypeFlagsBigIntLike != 0 && t&TypeFlagsBigInt != 0 {
		return true
	}
	if s&TypeFlagsBooleanLike != 0 && t&TypeFlagsBoolean != 0 {
		return true
	}
	if s&TypeFlagsESSymbolLike != 0 && t&TypeFlagsESSymbol != 0 {
		return true
	}
	if s&TypeFlagsEnum != 0 && t&TypeFlagsEnum != 0 && source.symbol.EscapedName == target.symbol.EscapedName && c.isEnumTypeRelatedTo(source.symbol, target.symbol, errorReporter) {
		return true
	}
	if s&TypeFlagsEnumLiteral != 0 && t&TypeFlagsEnumLiteral != 0 {
		if s&TypeFlagsUnion != 0 && t&TypeFlagsUnion != 0 && c.isEnumTypeRelatedTo(source.symbol, target.symbol, errorReporter) {
			return true
		}
		if s&TypeFlagsLiteral != 0 && t&TypeFlagsLiteral != 0 && source.AsLiteralType().value == target.AsLiteralType().value && c.isEnumTypeRelatedTo(source.symbol, target.symbol, errorReporter) {
			return true
		}
	}
	// In non-strictNullChecks mode, `undefined` and `null` are assignable to anything except `never`.
	// Since unions and intersections may reduce to `never`, we exclude them here.
	if s&TypeFlagsUndefined != 0 && (!c.strictNullChecks && t&TypeFlagsUnionOrIntersection == 0 || t&(TypeFlagsUndefined|TypeFlagsVoid) != 0) {
		return true
	}
	if s&TypeFlagsNull != 0 && (!c.strictNullChecks && t&TypeFlagsUnionOrIntersection == 0 || t&TypeFlagsNull != 0) {
		return true
	}
	if s&TypeFlagsObject != 0 && t&TypeFlagsNonPrimitive != 0 && !(relation == c.strictSubtypeRelation && c.isEmptyAnonymousObjectType(source) && getObjectFlags(source)&ObjectFlagsFreshLiteral == 0) {
		return true
	}
	if relation == c.assignableRelation || relation == c.comparableRelation {
		if s&TypeFlagsAny != 0 {
			return true
		}
		// Type number is assignable to any computed numeric enum type or any numeric enum literal type, and
		// a numeric literal type is assignable any computed numeric enum type or any numeric enum literal type
		// with a matching value. These rules exist such that enums can be used for bit-flag purposes.
		if s&TypeFlagsNumber != 0 && (t&TypeFlagsEnum != 0 || t&TypeFlagsNumberLiteral != 0 && t&TypeFlagsEnumLiteral != 0) {
			return true
		}
		if s&TypeFlagsNumberLiteral != 0 && s&TypeFlagsEnumLiteral == 0 && (t&TypeFlagsEnum != 0 || t&TypeFlagsNumberLiteral != 0 && t&TypeFlagsEnumLiteral != 0 && source.AsNumberLiteralType().value == target.AsNumberLiteralType().value) {
			return true
		}
		// Anything is assignable to a union containing undefined, null, and {}
		if c.isUnknownLikeUnionType(target) {
			return true
		}
	}
	return false
}

func (c *Checker) isTypeRelatedTo(source *Type, target *Type, relation Map[string, RelationComparisonResult]) bool {
	if c.isFreshLiteralType(source) {
		source = source.AsFreshableType().regularType
	}
	if c.isFreshLiteralType(target) {
		target = target.AsFreshableType().regularType
	}
	if source == target {
		return true
	}
	if relation != c.identityRelation {
		if relation == c.comparableRelation && target.flags&TypeFlagsNever == 0 && c.isSimpleTypeRelatedTo(target, source, relation) || c.isSimpleTypeRelatedTo(source, target, relation) {
			return true
		}
	} else if (source.flags|target.flags)&(TypeFlagsUnionOrIntersection|TypeFlagsIndexedAccess|TypeFlagsConditional|TypeFlagsSubstitution) == 0 {
		// We have excluded types that may simplify to other forms, so types must have identical flags
		if source.flags != target.flags {
			return false
		}
		if source.flags&TypeFlagsSingleton != 0 {
			return true
		}
	}
	if source.flags&TypeFlagsObject != 0 && target.flags&TypeFlagsObject != 0 {
		related := relation.get(c.getRelationKey(source, target, IntersectionStateNone, relation, false /*ignoreConstraints*/))
		if related != nil {
			return related&RelationComparisonResultSucceeded != 0
		}
	}
	if source.flags&TypeFlagsStructuredOrInstantiable != 0 || target.flags&TypeFlagsStructuredOrInstantiable != 0 {
		return c.checkTypeRelatedTo(source, target, relation, nil /*errorNode*/)
	}
	return false
}

func (c *Checker) isIgnoredJsxProperty(source *Type, sourceProp *ast.Symbol) /* TODO(TS-TO-GO) inferred type boolean | 0 */ any {
	return getObjectFlags(source)&ObjectFlagsJsxAttributes && c.isHyphenatedJsxName(sourceProp.EscapedName)
}

func (c *Checker) getNormalizedType(type_ *Type, writing bool) *Type {
	for true {
		var t *Type
		switch {
		case c.isFreshLiteralType(type_):
			t = type_.AsFreshableType().regularType
		case c.isGenericTupleType(type_):
			t = c.getNormalizedTupleType(type_, writing)
		case getObjectFlags(type_)&ObjectFlagsReference != 0:
			if type_.AsTypeReference().node != nil {
				t = c.createTypeReference(type_.AsTypeReference().target, c.getTypeArguments(type_.AsTypeReference()))
			} else {
				t = c.getSingleBaseForNonAugmentingSubtype(type_) || type_
			}
		case type_.flags&TypeFlagsUnionOrIntersection != 0:
			t = c.getNormalizedUnionOrIntersectionType(type_.AsUnionOrIntersectionType(), writing)
		case type_.flags&TypeFlagsSubstitution != 0:
			if writing {
				t = type_.AsSubstitutionType().baseType
			} else {
				t = c.getSubstitutionIntersection(type_.AsSubstitutionType())
			}
		case type_.flags&TypeFlagsSimplifiable != 0:
			t = c.getSimplifiedType(type_, writing)
		default:
			t = type_
		}
		if t == type_ {
			return t
		}
		type_ = t
	}
}

func (c *Checker) getNormalizedUnionOrIntersectionType(t UnionOrIntersectionType, writing bool) *Type {
	reduced := c.getReducedType(t)
	if reduced != t {
		return reduced
	}
	if t.flags&TypeFlagsIntersection != 0 && c.shouldNormalizeIntersection(t.AsIntersectionType()) {
		// Normalization handles cases like
		// Partial<T>[K] & ({} | null) ==>
		// Partial<T>[K] & {} | Partial<T>[K} & null ==>
		// (T[K] | undefined) & {} | (T[K] | undefined) & null ==>
		// T[K] & {} | undefined & {} | T[K] & null | undefined & null ==>
		// T[K] & {} | T[K] & null
		normalizedTypes := core.SameMap(t.types, func(t *Type) *Type {
			return c.getNormalizedType(t, writing)
		})
		if normalizedTypes != t.types {
			return c.getIntersectionType(normalizedTypes)
		}
	}
	return t
}

func (c *Checker) shouldNormalizeIntersection(type_ IntersectionType) bool {
	hasInstantiable := false
	hasNullableOrEmpty := false
	for _, t := range type_.types {
		hasInstantiable = hasInstantiable || t.flags&TypeFlagsInstantiable != 0
		hasNullableOrEmpty = hasNullableOrEmpty || t.flags&TypeFlagsNullable != 0 || c.isEmptyAnonymousObjectType(t)
		if hasInstantiable && hasNullableOrEmpty {
			return true
		}
	}
	return false
}

func (c *Checker) getNormalizedTupleType(t TupleTypeReference, writing bool) *Type {
	elements := c.getElementTypes(t)
	normalizedElements := core.SameMap(elements, func(t *Type) *Type {
		if t.flags&TypeFlagsSimplifiable != 0 {
			return c.getSimplifiedType(t, writing)
		} else {
			return t
		}
	})
	if elements != normalizedElements {
		return c.createNormalizedTupleType(t.target, normalizedElements)
	} else {
		return t
	}
}

/**
 * Checks if 'source' is related to 'target' (e.g.: is a assignable to).
 * @param source The left-hand-side of the relation.
 * @param target The right-hand-side of the relation.
 * @param relation The relation considered. One of 'identityRelation', 'subtypeRelation', 'assignableRelation', or 'comparableRelation'.
 * Used as both to determine which checks are performed and as a cache of previously computed results.
 * @param errorNode The suggested node upon which all errors will be reported, if defined. This may or may not be the actual node used.
 * @param headMessage If the error chain should be prepended by a head message, then headMessage will be used.
 * @param containingMessageChain A chain of errors to prepend any new errors found.
 * @param errorOutputContainer Return the diagnostic. Do not log if 'skipLogging' is truthy.
 */

func (c *Checker) checkTypeRelatedTo(source *Type, target *Type, relation Map[string, RelationComparisonResult], errorNode *ast.Node, headMessage DiagnosticMessage, containingMessageChain func() *DiagnosticMessageChain, errorOutputContainer /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; skipLogging?: boolean; } */ any) bool {
	var errorInfo *DiagnosticMessageChain
	var relatedInfo * /* TODO(TS-TO-GO) TypeNode TupleType: [DiagnosticRelatedInformation, ...DiagnosticRelatedInformation[]] */ any
	var maybeKeys []string
	var maybeKeysSet Set[string]
	var sourceStack []*Type
	var targetStack []*Type
	maybeCount := 0
	sourceDepth := 0
	targetDepth := 0
	expandingFlags := ExpandingFlagsNone
	overflow := false
	overrideNextErrorInfo := 0
	// How many `reportRelationError` calls should be skipped in the elaboration pyramid
	skipParentCounter := 0
	// How many errors should be skipped 'above' in the elaboration pyramid
	var lastSkippedInfo * /* TODO(TS-TO-GO) TypeNode TupleType: [Type, Type] */ any
	var incompatibleStack *[]DiagnosticAndArguments
	// In Node.js, the maximum number of elements in a map is 2^24. We limit the number of entries an invocation
	// of checkTypeRelatedTo can add to a relation to 1/8th of its remaining capacity.
	relationCount := /* TODO(TS-TO-GO) GreaterThanGreaterThanToken BinaryExpression: (16_000_000 - relation.size) >> 3 */ TODO

	Debug.assert(relation != c.identityRelation || errorNode == nil, "no error reporting in identity checking")

	result := isRelatedTo(source, target, RecursionFlagsBoth, errorNode != nil /*reportErrors*/, headMessage)
	if incompatibleStack != nil {
		reportIncompatibleStack()
	}
	if overflow {
		// Record this relation as having failed such that we don't attempt the overflowing operation again.
		id := c.getRelationKey(source, target, IntersectionStateNone /*intersectionState*/, relation, false /*ignoreConstraints*/)
		relation.set(id, RelationComparisonResultFailed|(ifElse(relationCount <= 0, RelationComparisonResultComplexityOverflow, RelationComparisonResultStackDepthOverflow)))
		tracing. /* ? */ instant(tracing.Phase.CheckTypes, "checkTypeRelatedTo_DepthLimit", &Args{
			sourceId:    source.id,
			targetId:    target.id,
			depth:       sourceDepth,
			targetDepth: targetDepth,
		})
		var message any
		if relationCount <= 0 {
			message = Diagnostics.Excessive_complexity_comparing_types_0_and_1
		} else {
			message = Diagnostics.Excessive_stack_depth_comparing_types_0_and_1
		}
		diag := c.error(errorNode || c.currentNode, message, c.typeToString(source), c.typeToString(target))
		if errorOutputContainer != nil {
			(errorOutputContainer.errors || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: errorOutputContainer.errors = [] */ TODO)).push(diag)
		}
	} else if errorInfo != nil {
		if containingMessageChain != nil {
			chain := containingMessageChain()
			if chain != nil {
				concatenateDiagnosticMessageChains(chain, errorInfo)
				errorInfo = chain
			}
		}

		var relatedInformation *[]DiagnosticRelatedInformation
		// Check if we should issue an extra diagnostic to produce a quickfix for a slightly incorrect import statement
		if headMessage != nil && errorNode != nil && result == 0 && source.symbol {
			links := c.getSymbolLinks(source.symbol)
			if links.originatingImport != nil && !isImportCall(links.originatingImport) {
				helpfulRetry := c.checkTypeRelatedTo(c.getTypeOfSymbol(links.target), target, relation, nil /*errorNode*/)
				if helpfulRetry {
					// Likely an incorrect import. Issue a helpful diagnostic to produce a quickfix to change the import
					diag := createDiagnosticForNode(links.originatingImport, Diagnostics.Type_originates_at_this_import_A_namespace_style_import_cannot_be_called_or_constructed_and_will_cause_a_failure_at_runtime_Consider_using_a_default_import_or_import_require_here_instead)
					relatedInformation = append(relatedInformation, diag)
					// Cause the error to appear with the error that triggered it
				}
			}
		}
		diag := createDiagnosticForNodeFromMessageChain(getSourceFileOfNode(errorNode), errorNode, errorInfo, relatedInformation)
		if relatedInfo != nil {
			addRelatedInfo(diag, relatedInfo...)
		}
		if errorOutputContainer != nil {
			(errorOutputContainer.errors || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: errorOutputContainer.errors = [] */ TODO)).push(diag)
		}
		if errorOutputContainer == nil || !errorOutputContainer.skipLogging {
			c.diagnostics.add(diag)
		}
	}
	if errorNode != nil && errorOutputContainer != nil && errorOutputContainer.skipLogging && result == TernaryFalse {
		Debug.assert(errorOutputContainer.errors != nil, "missed opportunity to interact with error.")
	}

	return result != TernaryFalse

	resetErrorInfo := func(saved ReturnType[ /* TODO(TS-TO-GO) TypeNode TypeQuery: typeof captureErrorCalculationState */ any]) {
		errorInfo = saved.errorInfo
		lastSkippedInfo = saved.lastSkippedInfo
		incompatibleStack = saved.incompatibleStack
		overrideNextErrorInfo = saved.overrideNextErrorInfo
		skipParentCounter = saved.skipParentCounter
		relatedInfo = saved.relatedInfo
	}

	captureErrorCalculationState := func() /* TODO(TS-TO-GO) inferred type { errorInfo: DiagnosticMessageChain | undefined; lastSkippedInfo: [Type, Type] | undefined; incompatibleStack: [message: DiagnosticMessage, ...args: (string | number)[]][] | undefined; overrideNextErrorInfo: number; skipParentCounter: number; relatedInfo: [DiagnosticRelatedInformation, ...DiagnosticRelatedInformation[]] | undefined; } */ any {
		return map[any]any{ /* TODO(TS-TO-GO): was object literal */
			"errorInfo":             errorInfo,
			"lastSkippedInfo":       lastSkippedInfo,
			"incompatibleStack":     incompatibleStack. /* ? */ slice(),
			"overrideNextErrorInfo": overrideNextErrorInfo,
			"skipParentCounter":     skipParentCounter,
			"relatedInfo":           relatedInfo. /* ? */ slice(), /* as [DiagnosticRelatedInformation, ...DiagnosticRelatedInformation[]] | undefined */
		}
	}

	reportIncompatibleError := func(message DiagnosticMessage, args DiagnosticArguments) {
		overrideNextErrorInfo++
		// Suppress the next relation error
		lastSkippedInfo = nil
		// Reset skipped info cache
		( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: incompatibleStack ||= [] */ TODO).push([]any{message /* TODO(TS-TO-GO) Expression SpreadElement: ...args */})
	}

	reportIncompatibleStack := func() undefined {
		stack := incompatibleStack || []never{}
		incompatibleStack = nil
		info := lastSkippedInfo
		lastSkippedInfo = nil
		if stack.length == 1 {
			reportError(stack[0]...)
			if info != nil {
				// Actually do the last relation error
				reportRelationError(nil, info...)
			}
			return
		}
		// The first error will be the innermost, while the last will be the outermost - so by popping off the end,
		// we can build from left to right
		path := ""
		var secondaryRootErrors []DiagnosticAndArguments = []never{}
		for stack.length != 0 {
			TODO_IDENTIFIER := stack.pop()
			switch msg.code {
			case Diagnostics.Types_of_property_0_are_incompatible.code:
				// Parenthesize a `new` if there is one
				if path.indexOf("new ") == 0 {
					path = __TEMPLATE__("(", path, ")")
				}
				str := "" + args[0]
				// If leading, just print back the arg (irrespective of if it's a valid identifier)
				if path.length == 0 {
					path = __TEMPLATE__(str)
				} else if isIdentifierText(str, getEmitScriptTarget(c.compilerOptions)) {
					path = __TEMPLATE__(path, ".", str)
				} else if str[0] == "[" && str[str.length-1] == "]" {
					path = __TEMPLATE__(path, str)
				} else {
					path = __TEMPLATE__(path, "[", str, "]")
				}
			case Diagnostics.Call_signature_return_types_0_and_1_are_incompatible.code,
				Diagnostics.Construct_signature_return_types_0_and_1_are_incompatible.code,
				Diagnostics.Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code,
				Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code:
				if path.length == 0 {
					// Don't flatten signature compatability errors at the start of a chain - instead prefer
					// to unify (the with no arguments bit is excessive for printback) and print them back
					mappedMsg := msg
					if msg.code == Diagnostics.Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code {
						mappedMsg = Diagnostics.Call_signature_return_types_0_and_1_are_incompatible
					} else if msg.code == Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code {
						mappedMsg = Diagnostics.Construct_signature_return_types_0_and_1_are_incompatible
					}
					secondaryRootErrors.unshift([]any{mappedMsg, args[0], args[1]})
				} else {
					var prefix /* TODO(TS-TO-GO) inferred type "" | "new " */ any
					if msg.code == Diagnostics.Construct_signature_return_types_0_and_1_are_incompatible.code || msg.code == Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code {
						prefix = "new "
					} else {
						prefix = ""
					}
					var params /* TODO(TS-TO-GO) inferred type "" | "..." */ any
					if msg.code == Diagnostics.Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code || msg.code == Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code {
						params = ""
					} else {
						params = "..."
					}
					path = __TEMPLATE__(prefix, path, "(", params, ")")
				}
			case Diagnostics.Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target.code:
				secondaryRootErrors.unshift([]any{Diagnostics.Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target, args[0], args[1]})
			case Diagnostics.Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target.code:
				secondaryRootErrors.unshift([]any{Diagnostics.Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target, args[0], args[1], args[2]})
			default:
				return Debug.fail(__TEMPLATE__("Unhandled Diagnostic: ", msg.code))
			}
		}
		if path != "" {
			reportError(ifElse(path[path.length-1] == ")", Diagnostics.The_types_returned_by_0_are_incompatible_between_these_types, Diagnostics.The_types_of_0_are_incompatible_between_these_types), path)
		} else {
			// Remove the innermost secondary error as it will duplicate the error already reported by `reportRelationError` on entry
			secondaryRootErrors.shift()
		}
		for _, TODO_IDENTIFIER := range secondaryRootErrors {
			originalValue := msg.elidedInCompatabilityPyramid
			msg.elidedInCompatabilityPyramid = false
			// Temporarily override elision to ensure error is reported
			reportError(msg, args...)
			msg.elidedInCompatabilityPyramid = originalValue
		}
		if info != nil {
			// Actually do the last relation error
			reportRelationError(nil, info...)
		}
	}

	reportError := func(message DiagnosticMessage, args DiagnosticArguments) {
		Debug.assert(errorNode != nil)
		if incompatibleStack != nil {
			reportIncompatibleStack()
		}
		if message.elidedInCompatabilityPyramid {
			return
		}
		if skipParentCounter == 0 {
			errorInfo = chainDiagnosticMessages(errorInfo, message, args...)
		} else {
			skipParentCounter--
		}
	}

	reportParentSkippedError := func(message DiagnosticMessage, args DiagnosticArguments) {
		reportError(message, args...)
		skipParentCounter++
	}

	associateRelatedInfo := func(info DiagnosticRelatedInformation) {
		Debug.assert(errorInfo != nil)
		if relatedInfo == nil {
			relatedInfo = []any{info}
		} else {
			relatedInfo.push(info)
		}
	}

	reportRelationError := func(message *DiagnosticMessage, source *Type, target *Type) {
		if incompatibleStack != nil {
			reportIncompatibleStack()
		}
		TODO_IDENTIFIER := c.getTypeNamesForErrorDisplay(source, target)
		generalizedSource := source
		generalizedSourceType := sourceType

		// Don't generalize on 'never' - we really want the original type
		// to be displayed for use-cases like 'assertNever'.
		if target.flags&TypeFlagsNever == 0 && c.isLiteralType(source) && !c.typeCouldHaveTopLevelSingletonTypes(target) {
			generalizedSource = c.getBaseTypeOfLiteralType(source)
			Debug.assert(!c.isTypeAssignableTo(generalizedSource, target), "generalized source shouldn't be assignable")
			generalizedSourceType = c.getTypeNameForErrorDisplay(generalizedSource)
		}

		// If `target` is of indexed access type (And `source` it is not), we use the object type of `target` for better error reporting
		var targetFlags TypeFlags
		if target.flags&TypeFlagsIndexedAccess != 0 && source.flags&TypeFlagsIndexedAccess == 0 {
			targetFlags = target.AsIndexedAccessType().objectType.flags
		} else {
			targetFlags = target.flags
		}

		if targetFlags&TypeFlagsTypeParameter != 0 && target != c.markerSuperTypeForCheck && target != c.markerSubTypeForCheck {
			constraint := c.getBaseConstraintOfType(target)
			var needsOriginalSource TODO
			if constraint != nil && (c.isTypeAssignableTo(generalizedSource, constraint) || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: needsOriginalSource = isTypeAssignableTo(source, constraint) */ TODO)) {
				reportError(Diagnostics._0_is_assignable_to_the_constraint_of_type_1_but_1_could_be_instantiated_with_a_different_subtype_of_constraint_2, ifElse(needsOriginalSource, sourceType, generalizedSourceType), targetType, c.typeToString(constraint))
			} else {
				errorInfo = nil
				reportError(Diagnostics._0_could_be_instantiated_with_an_arbitrary_type_which_could_be_unrelated_to_1, targetType, generalizedSourceType)
			}
		}

		if message == nil {
			if relation == c.comparableRelation {
				message = Diagnostics.Type_0_is_not_comparable_to_type_1
			} else if sourceType == targetType {
				message = Diagnostics.Type_0_is_not_assignable_to_type_1_Two_different_types_with_this_name_exist_but_they_are_unrelated
			} else if c.exactOptionalPropertyTypes && c.getExactOptionalUnassignableProperties(source, target).length != 0 {
				message = Diagnostics.Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_types_of_the_target_s_properties
			} else {
				if source.flags&TypeFlagsStringLiteral != 0 && target.flags&TypeFlagsUnion != 0 {
					suggestedType := c.getSuggestedTypeForNonexistentStringLiteralType(source.AsStringLiteralType(), target.AsUnionType())
					if suggestedType != nil {
						reportError(Diagnostics.Type_0_is_not_assignable_to_type_1_Did_you_mean_2, generalizedSourceType, targetType, c.typeToString(suggestedType))
						return
					}
				}
				message = Diagnostics.Type_0_is_not_assignable_to_type_1
			}
		} else if message == Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1 && c.exactOptionalPropertyTypes && c.getExactOptionalUnassignableProperties(source, target).length != 0 {
			message = Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_types_of_the_target_s_properties
		}

		reportError(message, generalizedSourceType, targetType)
	}

	tryElaborateErrorsForPrimitivesAndObjects := func(source *Type, target *Type) {
		var sourceType string
		if c.symbolValueDeclarationIsContextSensitive(source.symbol) {
			sourceType = c.typeToString(source, source.symbol.ValueDeclaration)
		} else {
			sourceType = c.typeToString(source)
		}
		var targetType string
		if c.symbolValueDeclarationIsContextSensitive(target.symbol) {
			targetType = c.typeToString(target, target.symbol.ValueDeclaration)
		} else {
			targetType = c.typeToString(target)
		}

		if (c.globalStringType == source && c.stringType == target) || (c.globalNumberType == source && c.numberType == target) || (c.globalBooleanType == source && c.booleanType == target) || (c.getGlobalESSymbolType() == source && c.esSymbolType == target) {
			reportError(Diagnostics._0_is_a_primitive_but_1_is_a_wrapper_object_Prefer_using_0_when_possible, targetType, sourceType)
		}
	}

	/**
	 * Try and elaborate array and tuple errors. Returns false
	 * if we have found an elaboration, or we should ignore
	 * any other elaborations when relating the `source` and
	 * `target` types.
	 */

	tryElaborateArrayLikeErrors := func(source *Type, target *Type, reportErrors bool) bool {
		/**
		 * The spec for elaboration is:
		 * - If the source is a readonly tuple and the target is a mutable array or tuple, elaborate on mutability and skip property elaborations.
		 * - If the source is a tuple then skip property elaborations if the target is an array or tuple.
		 * - If the source is a readonly array and the target is a mutable array or tuple, elaborate on mutability and skip property elaborations.
		 * - If the source an array then skip property elaborations if the target is a tuple.
		 */
		if c.isTupleType(source) {
			if source.target.readonly && c.isMutableArrayOrTuple(target) {
				if reportErrors {
					reportError(Diagnostics.The_type_0_is_readonly_and_cannot_be_assigned_to_the_mutable_type_1, c.typeToString(source), c.typeToString(target))
				}
				return false
			}
			return c.isArrayOrTupleType(target)
		}
		if c.isReadonlyArrayType(source) && c.isMutableArrayOrTuple(target) {
			if reportErrors {
				reportError(Diagnostics.The_type_0_is_readonly_and_cannot_be_assigned_to_the_mutable_type_1, c.typeToString(source), c.typeToString(target))
			}
			return false
		}
		if c.isTupleType(target) {
			return c.isArrayType(source)
		}
		return true
	}

	isRelatedToWorker := func(source *Type, target *Type, reportErrors bool) Ternary {
		return isRelatedTo(source, target, RecursionFlagsBoth, reportErrors)
	}

	/**
	 * Compare two types and return
	 * * Ternary.True if they are related with no assumptions,
	 * * Ternary.Maybe if they are related with assumptions of other relationships, or
	 * * Ternary.False if they are not related.
	 */

	isRelatedTo := func(originalSource *Type, originalTarget *Type, recursionFlags RecursionFlags /*  = RecursionFlags.Both */, reportErrors bool /*  = false */, headMessage DiagnosticMessage, intersectionState IntersectionState /*  = IntersectionState.None */) Ternary {
		if originalSource == originalTarget {
			return TernaryTrue
		}

		// Before normalization: if `source` is type an object type, and `target` is primitive,
		// skip all the checks we don't need and just return `isSimpleTypeRelatedTo` result
		if originalSource.flags&TypeFlagsObject != 0 && originalTarget.flags&TypeFlagsPrimitive != 0 {
			if relation == c.comparableRelation && originalTarget.flags&TypeFlagsNever == 0 && c.isSimpleTypeRelatedTo(originalTarget, originalSource, relation) || c.isSimpleTypeRelatedTo(originalSource, originalTarget, relation, ifElse(reportErrors, reportError, nil)) {
				return TernaryTrue
			}
			if reportErrors {
				reportErrorResults(originalSource, originalTarget, originalSource, originalTarget, headMessage)
			}
			return TernaryFalse
		}

		// Normalize the source and target types: Turn fresh literal types into regular literal types,
		// turn deferred type references into regular type references, simplify indexed access and
		// conditional types, and resolve substitution types to either the substitution (on the source
		// side) or the type variable (on the target side).
		source := c.getNormalizedType(originalSource, false /*writing*/)
		target := c.getNormalizedType(originalTarget, true /*writing*/)

		if source == target {
			return TernaryTrue
		}

		if relation == c.identityRelation {
			if source.flags != target.flags {
				return TernaryFalse
			}
			if source.flags&TypeFlagsSingleton != 0 {
				return TernaryTrue
			}
			traceUnionsOrIntersectionsTooLarge(source, target)
			return recursiveTypeRelatedTo(source, target, false /*reportErrors*/, IntersectionStateNone, recursionFlags)
		}

		// We fastpath comparing a type parameter to exactly its constraint, as this is _super_ common,
		// and otherwise, for type parameters in large unions, causes us to need to compare the union to itself,
		// as we break down the _target_ union first, _then_ get the source constraint - so for every
		// member of the target, we attempt to find a match in the source. This avoids that in cases where
		// the target is exactly the constraint.
		if source.flags&TypeFlagsTypeParameter != 0 && c.getConstraintOfType(source) == target {
			return TernaryTrue
		}

		// See if we're relating a definitely non-nullable type to a union that includes null and/or undefined
		// plus a single non-nullable type. If so, remove null and/or undefined from the target type.
		if source.flags&TypeFlagsDefinitelyNonNullable != 0 && target.flags&TypeFlagsUnion != 0 {
			types := target.AsUnionType().types
			var candidate *Type
			switch {
			case types.length == 2 && types[0].flags&TypeFlagsNullable != 0:
				candidate = types[1]
			case types.length == 3 && types[0].flags&TypeFlagsNullable != 0 && types[1].flags&TypeFlagsNullable != 0:
				candidate = types[2]
			default:
				candidate = nil
			}
			if candidate != nil && candidate.flags&TypeFlagsNullable == 0 {
				target = c.getNormalizedType(candidate, true /*writing*/)
				if source == target {
					return TernaryTrue
				}
			}
		}

		if relation == c.comparableRelation && target.flags&TypeFlagsNever == 0 && c.isSimpleTypeRelatedTo(target, source, relation) || c.isSimpleTypeRelatedTo(source, target, relation, ifElse(reportErrors, reportError, nil)) {
			return TernaryTrue
		}

		if source.flags&TypeFlagsStructuredOrInstantiable != 0 || target.flags&TypeFlagsStructuredOrInstantiable != 0 {
			isPerformingExcessPropertyChecks := intersectionState&IntersectionStateTarget == 0 && (c.isObjectLiteralType(source) && getObjectFlags(source)&ObjectFlagsFreshLiteral)
			if isPerformingExcessPropertyChecks {
				if hasExcessProperties(source.AsFreshObjectLiteralType(), target, reportErrors) {
					if reportErrors {
						reportRelationError(headMessage, source, ifElse(originalTarget.aliasSymbol != nil, originalTarget, target))
					}
					return TernaryFalse
				}
			}

			isPerformingCommonPropertyChecks := (relation != c.comparableRelation || c.isUnitType(source)) && intersectionState&IntersectionStateTarget == 0 && source.flags&(TypeFlagsPrimitive|TypeFlagsObject|TypeFlagsIntersection) && source != c.globalObjectType && target.flags&(TypeFlagsObject|TypeFlagsIntersection) && c.isWeakType(target) && (c.getPropertiesOfType(source).length > 0 || c.typeHasCallOrConstructSignatures(source))
			isComparingJsxAttributes := getObjectFlags(source)&ObjectFlagsJsxAttributes != 0
			if isPerformingCommonPropertyChecks && !c.hasCommonProperties(source, target, isComparingJsxAttributes) {
				if reportErrors {
					sourceString := c.typeToString(ifElse(originalSource.aliasSymbol != nil, originalSource, source))
					targetString := c.typeToString(ifElse(originalTarget.aliasSymbol != nil, originalTarget, target))
					calls := c.getSignaturesOfType(source, SignatureKindCall)
					constructs := c.getSignaturesOfType(source, SignatureKindConstruct)
					if calls.length > 0 && isRelatedTo(c.getReturnTypeOfSignature(calls[0]), target, RecursionFlagsSource, false /*reportErrors*/) != 0 || constructs.length > 0 && isRelatedTo(c.getReturnTypeOfSignature(constructs[0]), target, RecursionFlagsSource, false /*reportErrors*/) != 0 {
						reportError(Diagnostics.Value_of_type_0_has_no_properties_in_common_with_type_1_Did_you_mean_to_call_it, sourceString, targetString)
					} else {
						reportError(Diagnostics.Type_0_has_no_properties_in_common_with_type_1, sourceString, targetString)
					}
				}
				return TernaryFalse
			}

			traceUnionsOrIntersectionsTooLarge(source, target)

			skipCaching := source.flags&TypeFlagsUnion && source.AsUnionType().types.length < 4 && target.flags&TypeFlagsUnion == 0 || target.flags&TypeFlagsUnion && target.AsUnionType().types.length < 4 && source.flags&TypeFlagsStructuredOrInstantiable == 0
			var result Ternary
			if skipCaching {
				result = unionOrIntersectionRelatedTo(source, target, reportErrors, intersectionState)
			} else {
				result = recursiveTypeRelatedTo(source, target, reportErrors, intersectionState, recursionFlags)
			}
			if result != 0 {
				return result
			}
		}

		if reportErrors {
			reportErrorResults(originalSource, originalTarget, source, target, headMessage)
		}
		return TernaryFalse
	}

	reportErrorResults := func(originalSource *Type, originalTarget *Type, source *Type, target *Type, headMessage *DiagnosticMessage) {
		sourceHasBase := c.getSingleBaseForNonAugmentingSubtype(originalSource) != nil
		targetHasBase := c.getSingleBaseForNonAugmentingSubtype(originalTarget) != nil
		if originalSource.aliasSymbol != nil || sourceHasBase {
			source = originalSource
		} else {
			source = source
		}
		if originalTarget.aliasSymbol != nil || targetHasBase {
			target = originalTarget
		} else {
			target = target
		}
		maybeSuppress := overrideNextErrorInfo > 0
		if maybeSuppress {
			overrideNextErrorInfo--
		}
		if source.flags&TypeFlagsObject != 0 && target.flags&TypeFlagsObject != 0 {
			currentError := errorInfo
			tryElaborateArrayLikeErrors(source, target, true /*reportErrors*/)
			if errorInfo != currentError {
				maybeSuppress = errorInfo != nil
			}
		}
		if source.flags&TypeFlagsObject != 0 && target.flags&TypeFlagsPrimitive != 0 {
			tryElaborateErrorsForPrimitivesAndObjects(source, target)
		} else if source.symbol && source.flags&TypeFlagsObject != 0 && c.globalObjectType == source {
			reportError(Diagnostics.The_Object_type_is_assignable_to_very_few_other_types_Did_you_mean_to_use_the_any_type_instead)
		} else if getObjectFlags(source)&ObjectFlagsJsxAttributes != 0 && target.flags&TypeFlagsIntersection != 0 {
			targetTypes := target.AsIntersectionType().types
			intrinsicAttributes := c.getJsxType(JsxNames.IntrinsicAttributes, errorNode)
			intrinsicClassAttributes := c.getJsxType(JsxNames.IntrinsicClassAttributes, errorNode)
			if !c.isErrorType(intrinsicAttributes) && !c.isErrorType(intrinsicClassAttributes) && (contains(targetTypes, intrinsicAttributes) || contains(targetTypes, intrinsicClassAttributes)) {
				// do not report top error
				return
			}
		} else {
			errorInfo = c.elaborateNeverIntersection(errorInfo, originalTarget)
		}
		// Used by, eg, missing property checking to replace the top-level message with a more informative one.
		if headMessage == nil && maybeSuppress {
			// We suppress a call to `reportRelationError` or not depending on the state of the type checker, so
			// we call `reportRelationError` here and then undo its effects to figure out what would be the diagnostic
			// if we hadn't supress it, and save that as a canonical diagnostic for deduplication purposes.
			savedErrorState := captureErrorCalculationState()
			reportRelationError(headMessage, source, target)
			var canonical TODO
			if errorInfo != nil && errorInfo != savedErrorState.errorInfo {
				canonical = any{
					code:        errorInfo.code,
					messageText: errorInfo.messageText,
				}
			}
			resetErrorInfo(savedErrorState)
			if canonical != nil && errorInfo != nil {
				errorInfo.canonicalHead = canonical
			}

			lastSkippedInfo = []any{source, target}
			return
		}
		reportRelationError(headMessage, source, target)
		if source.flags&TypeFlagsTypeParameter != 0 && source.symbol. /* ? */ Declarations[0] != nil && c.getConstraintOfType(source.AsTypeVariable()) == nil {
			syntheticParam := c.cloneTypeParameter(source.AsTypeParameter())
			syntheticParam.constraint = c.instantiateType(target, c.makeUnaryTypeMapper(source, syntheticParam))
			if c.hasNonCircularBaseConstraint(syntheticParam) {
				targetConstraintString := c.typeToString(target, source.symbol.Declarations[0])
				associateRelatedInfo(createDiagnosticForNode(source.symbol.Declarations[0], Diagnostics.This_type_parameter_might_need_an_extends_0_constraint, targetConstraintString))
			}
		}
	}

	traceUnionsOrIntersectionsTooLarge := func(source *Type, target *Type) {
		if tracing == nil {
			return
		}

		if (source.flags&TypeFlagsUnionOrIntersection != 0) && (target.flags&TypeFlagsUnionOrIntersection != 0) {
			sourceUnionOrIntersection := source.AsUnionOrIntersectionType()
			targetUnionOrIntersection := target.AsUnionOrIntersectionType()

			if sourceUnionOrIntersection.objectFlags&targetUnionOrIntersection.objectFlags&ObjectFlagsPrimitiveUnion != 0 {
				// There's a fast path for comparing primitive unions
				return
			}

			sourceSize := sourceUnionOrIntersection.types.length
			targetSize := targetUnionOrIntersection.types.length
			if sourceSize*targetSize > 1e6 {
				tracing.instant(tracing.Phase.CheckTypes, "traceUnionsOrIntersectionsTooLarge_DepthLimit", &Args{
					sourceId:   source.id,
					sourceSize: sourceSize,
					targetId:   target.id,
					targetSize: targetSize,
					pos:        errorNode. /* ? */ pos,
					end:        errorNode. /* ? */ end,
				})
			}
		}
	}

	getTypeOfPropertyInTypes := func(types []*Type, name string) *Type {
		appendPropType := func(propTypes *[]*Type, t *Type) []*Type {
			t = c.getApparentType(t)
			var prop *ast.Symbol
			if t.flags&TypeFlagsUnionOrIntersection != 0 {
				prop = c.getPropertyOfUnionOrIntersectionType(t.AsUnionOrIntersectionType(), name)
			} else {
				prop = c.getPropertyOfObjectType(t, name)
			}
			propType := prop && c.getTypeOfSymbol(prop) || c.getApplicableIndexInfoForName(t, name). /* ? */ type_ || c.undefinedType
			return append(propTypes, propType)
		}
		return c.getUnionType(reduceLeft(types, appendPropType, nil /*initial*/) || emptyArray)
	}

	hasExcessProperties := func(source FreshObjectLiteralType, target *Type, reportErrors bool) bool {
		if !c.isExcessPropertyCheckTarget(target) || !c.noImplicitAny && getObjectFlags(target)&ObjectFlagsJSLiteral != 0 {
			return false
			// Disable excess property checks on JS literals to simulate having an implicit "index signature" - but only outside of noImplicitAny
		}
		isComparingJsxAttributes := getObjectFlags(source)&ObjectFlagsJsxAttributes != 0
		if (relation == c.assignableRelation || relation == c.comparableRelation) && (c.isTypeSubsetOf(c.globalObjectType, target) || (!isComparingJsxAttributes && c.isEmptyObjectType(target))) {
			return false
		}
		reducedTarget := target
		var checkTypes *[]*Type
		if target.flags&TypeFlagsUnion != 0 {
			reducedTarget = c.findMatchingDiscriminantType(source, target.AsUnionType(), isRelatedTo) || c.filterPrimitivesIfContainsNonPrimitive(target.AsUnionType())
			if reducedTarget.flags&TypeFlagsUnion != 0 {
				checkTypes = reducedTarget.AsUnionType().types
			} else {
				checkTypes = []*Type{reducedTarget}
			}
		}
		for _, prop := range c.getPropertiesOfType(source) {
			if shouldCheckAsExcessProperty(prop, source.symbol) && !c.isIgnoredJsxProperty(source, prop) {
				if !c.isKnownProperty(reducedTarget, prop.EscapedName, isComparingJsxAttributes) {
					if reportErrors {
						// Report error in terms of object types in the target as those are the only ones
						// we check in isKnownProperty.
						errorTarget := c.filterType(reducedTarget, c.isExcessPropertyCheckTarget)
						// We know *exactly* where things went wrong when comparing the types.
						// Use this property as the error node as this will be more helpful in
						// reasoning about what went wrong.
						if errorNode == nil {
							return Debug.fail()
						}
						if isJsxAttributes(errorNode) || isJsxOpeningLikeElement(errorNode) || isJsxOpeningLikeElement(errorNode.Parent) {
							// JsxAttributes has an object-literal flag and undergo same type-assignablity check as normal object-literal.
							// However, using an object-literal error message will be very confusing to the users so we give different a message.
							if prop.ValueDeclaration != nil && isJsxAttribute(prop.ValueDeclaration) && getSourceFileOfNode(errorNode) == getSourceFileOfNode(prop.ValueDeclaration.Name) {
								// Note that extraneous children (as in `<NoChild>extra</NoChild>`) don't pass this check,
								// since `children` is a SyntaxKind.PropertySignature instead of a SyntaxKind.JsxAttribute.
								errorNode = prop.ValueDeclaration.Name
							}
							propName := c.symbolToString(prop)
							suggestionSymbol := c.getSuggestedSymbolForNonexistentJSXAttribute(propName, errorTarget)
							var suggestion *string
							if suggestionSymbol != nil {
								suggestion = c.symbolToString(suggestionSymbol)
							} else {
								suggestion = nil
							}
							if suggestion {
								reportError(Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_2, propName, c.typeToString(errorTarget), suggestion)
							} else {
								reportError(Diagnostics.Property_0_does_not_exist_on_type_1, propName, c.typeToString(errorTarget))
							}
						} else {
							// use the property's value declaration if the property is assigned inside the literal itself
							objectLiteralDeclaration := source.symbol. /* ? */ Declarations && firstOrUndefined(source.symbol.Declarations)
							var suggestion *string
							if prop.ValueDeclaration != nil && findAncestor(prop.ValueDeclaration, func(d *ast.Node) bool {
								return d == objectLiteralDeclaration
							}) != nil && getSourceFileOfNode(objectLiteralDeclaration) == getSourceFileOfNode(errorNode) {
								propDeclaration := prop.ValueDeclaration.AsObjectLiteralElementLike()
								Debug.assertNode(propDeclaration, isObjectLiteralElementLike)

								name := propDeclaration.Name
								errorNode = name

								if isIdentifier(name) {
									suggestion = c.getSuggestionForNonexistentProperty(name, errorTarget)
								}
							}
							if suggestion != nil {
								reportParentSkippedError(Diagnostics.Object_literal_may_only_specify_known_properties_but_0_does_not_exist_in_type_1_Did_you_mean_to_write_2, c.symbolToString(prop), c.typeToString(errorTarget), suggestion)
							} else {
								reportParentSkippedError(Diagnostics.Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1, c.symbolToString(prop), c.typeToString(errorTarget))
							}
						}
					}
					return true
				}
				if checkTypes != nil && isRelatedTo(c.getTypeOfSymbol(prop), getTypeOfPropertyInTypes(checkTypes, prop.EscapedName), RecursionFlagsBoth, reportErrors) == 0 {
					if reportErrors {
						reportIncompatibleError(Diagnostics.Types_of_property_0_are_incompatible, c.symbolToString(prop))
					}
					return true
				}
			}
		}
		return false
	}

	shouldCheckAsExcessProperty := func(prop *ast.Symbol, container *ast.Symbol) *bool {
		return prop.ValueDeclaration && container.ValueDeclaration && prop.ValueDeclaration.Parent == container.ValueDeclaration
	}

	unionOrIntersectionRelatedTo := func(source *Type, target *Type, reportErrors bool, intersectionState IntersectionState) Ternary {
		// Note that these checks are specifically ordered to produce correct results. In particular,
		// we need to deconstruct unions before intersections (because unions are always at the top),
		// and we need to handle "each" relations before "some" relations for the same kind of type.
		if source.flags&TypeFlagsUnion != 0 {
			if target.flags&TypeFlagsUnion != 0 {
				// Intersections of union types are normalized into unions of intersection types, and such normalized
				// unions can get very large and expensive to relate. The following fast path checks if the source union
				// originated in an intersection. If so, and if that intersection contains the target type, then we know
				// the result to be true (for any two types A and B, A & B is related to both A and B).
				sourceOrigin := source.AsUnionType().origin
				if sourceOrigin != nil && sourceOrigin.flags&TypeFlagsIntersection != 0 && target.aliasSymbol != nil && contains(sourceOrigin.AsIntersectionType().types, target) {
					return TernaryTrue
				}
				// Similarly, in unions of unions the we preserve the original list of unions. This original list is often
				// much shorter than the normalized result, so we scan it in the following fast path.
				targetOrigin := target.AsUnionType().origin
				if targetOrigin != nil && targetOrigin.flags&TypeFlagsUnion != 0 && source.aliasSymbol != nil && contains(targetOrigin.AsUnionType().types, source) {
					return TernaryTrue
				}
			}
			if relation == c.comparableRelation {
				return someTypeRelatedToType(source.AsUnionType(), target, reportErrors && source.flags&TypeFlagsPrimitive == 0, intersectionState)
			} else {
				return eachTypeRelatedToType(source.AsUnionType(), target, reportErrors && source.flags&TypeFlagsPrimitive == 0, intersectionState)
			}
		}
		if target.flags&TypeFlagsUnion != 0 {
			return typeRelatedToSomeType(c.getRegularTypeOfObjectLiteral(source), target.AsUnionType(), reportErrors && source.flags&TypeFlagsPrimitive == 0 && target.flags&TypeFlagsPrimitive == 0, intersectionState)
		}
		if target.flags&TypeFlagsIntersection != 0 {
			return typeRelatedToEachType(source, target.AsIntersectionType(), reportErrors, IntersectionStateTarget)
		}
		// Source is an intersection. For the comparable relation, if the target is a primitive type we hoist the
		// constraints of all non-primitive types in the source into a new intersection. We do this because the
		// intersection may further constrain the constraints of the non-primitive types. For example, given a type
		// parameter 'T extends 1 | 2', the intersection 'T & 1' should be reduced to '1' such that it doesn't
		// appear to be comparable to '2'.
		if relation == c.comparableRelation && target.flags&TypeFlagsPrimitive != 0 {
			constraints := core.SameMap(source.AsIntersectionType().types, func(t *Type) *Type {
				if t.flags&TypeFlagsInstantiable != 0 {
					return c.getBaseConstraintOfType(t) || c.unknownType
				} else {
					return t
				}
			})
			if constraints != source.AsIntersectionType().types {
				source = c.getIntersectionType(constraints)
				if source.flags&TypeFlagsNever != 0 {
					return TernaryFalse
				}
				if source.flags&TypeFlagsIntersection == 0 {
					return isRelatedTo(source, target, RecursionFlagsSource, false /*reportErrors*/) || isRelatedTo(target, source, RecursionFlagsSource, false /*reportErrors*/)
				}
			}
		}
		// Check to see if any constituents of the intersection are immediately related to the target.
		// Don't report errors though. Elaborating on whether a source constituent is related to the target is
		// not actually useful and leads to some confusing error messages. Instead, we rely on the caller
		// checking whether the full intersection viewed as an object is related to the target.
		return someTypeRelatedToType(source.AsIntersectionType(), target, false /*reportErrors*/, IntersectionStateSource)
	}

	eachTypeRelatedToSomeType := func(source UnionOrIntersectionType, target UnionOrIntersectionType) Ternary {
		result := TernaryTrue
		sourceTypes := source.types
		for _, sourceType := range sourceTypes {
			related := typeRelatedToSomeType(sourceType, target, false /*reportErrors*/, IntersectionStateNone)
			if related == 0 {
				return TernaryFalse
			}
			result &= related
		}
		return result
	}

	typeRelatedToSomeType := func(source *Type, target UnionOrIntersectionType, reportErrors bool, intersectionState IntersectionState) Ternary {
		targetTypes := target.types
		if target.flags&TypeFlagsUnion != 0 {
			if c.containsType(targetTypes, source) {
				return TernaryTrue
			}
			if relation != c.comparableRelation && getObjectFlags(target)&ObjectFlagsPrimitiveUnion != 0 && source.flags&TypeFlagsEnumLiteral == 0 && (source.flags&(TypeFlagsStringLiteral|TypeFlagsBooleanLiteral|TypeFlagsBigIntLiteral) != 0 || (relation == c.subtypeRelation || relation == c.strictSubtypeRelation) && source.flags&TypeFlagsNumberLiteral != 0) {
				// When relating a literal type to a union of primitive types, we know the relation is false unless
				// the union contains the base primitive type or the literal type in one of its fresh/regular forms.
				// We exclude numeric literals for non-subtype relations because numeric literals are assignable to
				// numeric enum literals with the same value. Similarly, we exclude enum literal types because
				// identically named enum types are related (see isEnumTypeRelatedTo). We exclude the comparable
				// relation in entirety because it needs to be checked in both directions.
				var alternateForm FreshableType
				if source == source.AsStringLiteralType().regularType {
					alternateForm = source.AsStringLiteralType().freshType
				} else {
					alternateForm = source.AsStringLiteralType().regularType
				}
				var primitive *IntrinsicType
				switch {
				case source.flags&TypeFlagsStringLiteral != 0:
					primitive = c.stringType
				case source.flags&TypeFlagsNumberLiteral != 0:
					primitive = c.numberType
				case source.flags&TypeFlagsBigIntLiteral != 0:
					primitive = c.bigintType
				default:
					primitive = nil
				}
				if primitive != nil && c.containsType(targetTypes, primitive) || alternateForm && c.containsType(targetTypes, alternateForm) {
					return TernaryTrue
				} else {
					return TernaryFalse
				}
			}
			match := c.getMatchingUnionConstituentForType(target.AsUnionType(), source)
			if match != nil {
				related := isRelatedTo(source, match, RecursionFlagsTarget, false /*reportErrors*/, nil /*headMessage*/, intersectionState)
				if related != 0 {
					return related
				}
			}
		}
		for _, t := range targetTypes {
			related := isRelatedTo(source, t, RecursionFlagsTarget, false /*reportErrors*/, nil /*headMessage*/, intersectionState)
			if related != 0 {
				return related
			}
		}
		if reportErrors {
			// Elaborate only if we can find a best matching type in the target union
			bestMatchingType := c.getBestMatchingType(source, target, isRelatedTo)
			if bestMatchingType != nil {
				isRelatedTo(source, bestMatchingType, RecursionFlagsTarget, true /*reportErrors*/, nil /*headMessage*/, intersectionState)
			}
		}
		return TernaryFalse
	}

	typeRelatedToEachType := func(source *Type, target IntersectionType, reportErrors bool, intersectionState IntersectionState) Ternary {
		result := TernaryTrue
		targetTypes := target.types
		for _, targetType := range targetTypes {
			related := isRelatedTo(source, targetType, RecursionFlagsTarget, reportErrors, nil /*headMessage*/, intersectionState)
			if related == 0 {
				return TernaryFalse
			}
			result &= related
		}
		return result
	}

	someTypeRelatedToType := func(source UnionOrIntersectionType, target *Type, reportErrors bool, intersectionState IntersectionState) Ternary {
		sourceTypes := source.types
		if source.flags&TypeFlagsUnion != 0 && c.containsType(sourceTypes, target) {
			return TernaryTrue
		}
		len := sourceTypes.length
		for i := 0; i < len; i++ {
			related := isRelatedTo(sourceTypes[i], target, RecursionFlagsSource, reportErrors && i == len-1, nil /*headMessage*/, intersectionState)
			if related != 0 {
				return related
			}
		}
		return TernaryFalse
	}

	getUndefinedStrippedTargetIfNeeded := func(source *Type, target *Type) *Type {
		if source.flags&TypeFlagsUnion != 0 && target.flags&TypeFlagsUnion != 0 && source.AsUnionType().types[0].flags&TypeFlagsUndefined == 0 && target.AsUnionType().types[0].flags&TypeFlagsUndefined != 0 {
			return c.extractTypesOfKind(target, ^TypeFlagsUndefined)
		}
		return target
	}

	eachTypeRelatedToType := func(source UnionOrIntersectionType, target *Type, reportErrors bool, intersectionState IntersectionState) Ternary {
		result := TernaryTrue
		sourceTypes := source.types
		// We strip `undefined` from the target if the `source` trivially doesn't contain it for our correspondence-checking fastpath
		// since `undefined` is frequently added by optionality and would otherwise spoil a potentially useful correspondence
		undefinedStrippedTarget := getUndefinedStrippedTargetIfNeeded(source, target.AsUnionType())
		for i := 0; i < sourceTypes.length; i++ {
			sourceType := sourceTypes[i]
			if undefinedStrippedTarget.flags&TypeFlagsUnion != 0 && sourceTypes.length >= undefinedStrippedTarget.AsUnionType().types.length && sourceTypes.length%undefinedStrippedTarget.AsUnionType().types.length == 0 {
				// many unions are mappings of one another; in such cases, simply comparing members at the same index can shortcut the comparison
				// such unions will have identical lengths, and their corresponding elements will match up. Another common scenario is where a large
				// union has a union of objects intersected with it. In such cases, if the input was, eg `("a" | "b" | "c") & (string | boolean | {} | {whatever})`,
				// the result will have the structure `"a" | "b" | "c" | "a" & {} | "b" & {} | "c" & {} | "a" & {whatever} | "b" & {whatever} | "c" & {whatever}`
				// - the resulting union has a length which is a multiple of the original union, and the elements correspond modulo the length of the original union
				related := isRelatedTo(sourceType, undefinedStrippedTarget.AsUnionType().types[i%undefinedStrippedTarget.AsUnionType().types.length], RecursionFlagsBoth, false /*reportErrors*/, nil /*headMessage*/, intersectionState)
				if related != 0 {
					result &= related
					continue
				}
			}
			related := isRelatedTo(sourceType, target, RecursionFlagsSource, reportErrors, nil /*headMessage*/, intersectionState)
			if related == 0 {
				return TernaryFalse
			}
			result &= related
		}
		return result
	}

	typeArgumentsRelatedTo := func(sources []*Type /*  = emptyArray */, targets []*Type /*  = emptyArray */, variances []VarianceFlags /*  = emptyArray */, reportErrors bool, intersectionState IntersectionState) Ternary {
		if sources.length != targets.length && relation == c.identityRelation {
			return TernaryFalse
		}
		var length number
		if sources.length <= targets.length {
			length = sources.length
		} else {
			length = targets.length
		}
		result := TernaryTrue
		for i := 0; i < length; i++ {
			// When variance information isn't available we default to covariance. This happens
			// in the process of computing variance information for recursive types and when
			// comparing 'this' type arguments.
			var varianceFlags VarianceFlags
			if i < variances.length {
				varianceFlags = variances[i]
			} else {
				varianceFlags = VarianceFlagsCovariant
			}
			variance := varianceFlags & VarianceFlagsVarianceMask
			// We ignore arguments for independent type parameters (because they're never witnessed).
			if variance != VarianceFlagsIndependent {
				s := sources[i]
				t := targets[i]
				related := TernaryTrue
				if varianceFlags&VarianceFlagsUnmeasurable != 0 {
					// Even an `Unmeasurable` variance works out without a structural check if the source and target are _identical_.
					// We can't simply assume invariance, because `Unmeasurable` marks nonlinear relations, for example, a relation tained by
					// the `-?` modifier in a mapped type (where, no matter how the inputs are related, the outputs still might not be)
					if relation == c.identityRelation {
						related = isRelatedTo(s, t, RecursionFlagsBoth, false /*reportErrors*/)
					} else {
						related = c.compareTypesIdentical(s, t)
					}
				} else if variance == VarianceFlagsCovariant {
					related = isRelatedTo(s, t, RecursionFlagsBoth, reportErrors, nil /*headMessage*/, intersectionState)
				} else if variance == VarianceFlagsContravariant {
					related = isRelatedTo(t, s, RecursionFlagsBoth, reportErrors, nil /*headMessage*/, intersectionState)
				} else if variance == VarianceFlagsBivariant {
					// In the bivariant case we first compare contravariantly without reporting
					// errors. Then, if that doesn't succeed, we compare covariantly with error
					// reporting. Thus, error elaboration will be based on the the covariant check,
					// which is generally easier to reason about.
					related = isRelatedTo(t, s, RecursionFlagsBoth, false /*reportErrors*/)
					if related == 0 {
						related = isRelatedTo(s, t, RecursionFlagsBoth, reportErrors, nil /*headMessage*/, intersectionState)
					}
				} else {
					// In the invariant case we first compare covariantly, and only when that
					// succeeds do we proceed to compare contravariantly. Thus, error elaboration
					// will typically be based on the covariant check.
					related = isRelatedTo(s, t, RecursionFlagsBoth, reportErrors, nil /*headMessage*/, intersectionState)
					if related != 0 {
						related &= isRelatedTo(t, s, RecursionFlagsBoth, reportErrors, nil /*headMessage*/, intersectionState)
					}
				}
				if related == 0 {
					return TernaryFalse
				}
				result &= related
			}
		}
		return result
	}

	// Determine if possibly recursive types are related. First, check if the result is already available in the global cache.
	// Second, check if we have already started a comparison of the given two types in which case we assume the result to be true.
	// Third, check if both types are part of deeply nested chains of generic type instantiations and if so assume the types are
	// equal and infinitely expanding. Fourth, if we have reached a depth of 100 nested comparisons, assume we have runaway recursion
	// and issue an error. Otherwise, actually compare the structure of the two types.
	recursiveTypeRelatedTo := func(source *Type, target *Type, reportErrors bool, intersectionState IntersectionState, recursionFlags RecursionFlags) Ternary {
		if overflow {
			return TernaryFalse
		}
		id := c.getRelationKey(source, target, intersectionState, relation, false /*ignoreConstraints*/)
		entry := relation.get(id)
		if entry != nil {
			if reportErrors && entry&RelationComparisonResultFailed != 0 && entry&RelationComparisonResultOverflow == 0 {
				// We are elaborating errors and the cached result is a failure not due to a comparison overflow,
				// so we will do the comparison again to generate an error message.
			} else {
				if c.outofbandVarianceMarkerHandler != nil {
					// We're in the middle of variance checking - integrate any unmeasurable/unreliable flags from this cached component
					saved := entry & RelationComparisonResultReportsMask
					if saved&RelationComparisonResultReportsUnmeasurable != 0 {
						c.instantiateType(source, c.reportUnmeasurableMapper)
					}
					if saved&RelationComparisonResultReportsUnreliable != 0 {
						c.instantiateType(source, c.reportUnreliableMapper)
					}
				}
				if reportErrors && entry&RelationComparisonResultOverflow != 0 {
					var message any
					if entry&RelationComparisonResultComplexityOverflow != 0 {
						message = Diagnostics.Excessive_complexity_comparing_types_0_and_1
					} else {
						message = Diagnostics.Excessive_stack_depth_comparing_types_0_and_1
					}
					reportError(message, c.typeToString(source), c.typeToString(target))
					overrideNextErrorInfo++
				}
				if entry&RelationComparisonResultSucceeded != 0 {
					return TernaryTrue
				} else {
					return TernaryFalse
				}
			}
		}
		if relationCount <= 0 {
			overflow = true
			return TernaryFalse
		}
		if !maybeKeys {
			maybeKeys = []never{}
			maybeKeysSet = NewSet()
			sourceStack = []never{}
			targetStack = []never{}
		} else {
			// If source and target are already being compared, consider them related with assumptions
			if maybeKeysSet.has(id) {
				return TernaryMaybe
			}

			// A key that starts with "*" is an indication that we have type references that reference constrained
			// type parameters. For such keys we also check against the key we would have gotten if all type parameters
			// were unconstrained.
			var broadestEquivalentId *string
			if id.startsWith("*") {
				broadestEquivalentId = c.getRelationKey(source, target, intersectionState, relation, true /*ignoreConstraints*/)
			} else {
				broadestEquivalentId = nil
			}
			if broadestEquivalentId && maybeKeysSet.has(broadestEquivalentId) {
				return TernaryMaybe
			}

			if sourceDepth == 100 || targetDepth == 100 {
				overflow = true
				return TernaryFalse
			}
		}
		maybeStart := maybeCount
		maybeKeys[maybeCount] = id
		maybeKeysSet.add(id)
		maybeCount++
		saveExpandingFlags := expandingFlags
		if recursionFlags&RecursionFlagsSource != 0 {
			sourceStack[sourceDepth] = source
			sourceDepth++
			if expandingFlags&ExpandingFlagsSource == 0 && c.isDeeplyNestedType(source, sourceStack, sourceDepth) {
				expandingFlags |= ExpandingFlagsSource
			}
		}
		if recursionFlags&RecursionFlagsTarget != 0 {
			targetStack[targetDepth] = target
			targetDepth++
			if expandingFlags&ExpandingFlagsTarget == 0 && c.isDeeplyNestedType(target, targetStack, targetDepth) {
				expandingFlags |= ExpandingFlagsTarget
			}
		}
		var originalHandler /* TODO(TS-TO-GO) TypeNode TypeQuery: typeof outofbandVarianceMarkerHandler */ any
		propagatingVarianceFlags := 0.(RelationComparisonResult)
		if c.outofbandVarianceMarkerHandler != nil {
			originalHandler = c.outofbandVarianceMarkerHandler
			c.outofbandVarianceMarkerHandler = func(onlyUnreliable bool) {
				if onlyUnreliable {
					propagatingVarianceFlags |= RelationComparisonResultReportsUnreliable
				} else {
					propagatingVarianceFlags |= RelationComparisonResultReportsUnmeasurable
				}
				return originalHandler(onlyUnreliable)
			}
		}

		var result Ternary
		if expandingFlags == ExpandingFlagsBoth {
			tracing. /* ? */ instant(tracing.Phase.CheckTypes, "recursiveTypeRelatedTo_DepthLimit", &Args{
				sourceId: source.id,
				sourceIdStack: sourceStack.map_(func(t *Type) number {
					return t.id
				}),
				targetId: target.id,
				targetIdStack: targetStack.map_(func(t *Type) number {
					return t.id
				}),
				depth:       sourceDepth,
				targetDepth: targetDepth,
			})
			result = TernaryMaybe
		} else {
			tracing. /* ? */ push(tracing.Phase.CheckTypes, "structuredTypeRelatedTo", &Args{
				sourceId: source.id,
				targetId: target.id,
			})
			result = structuredTypeRelatedTo(source, target, reportErrors, intersectionState)
			tracing. /* ? */ pop()
		}

		if c.outofbandVarianceMarkerHandler != nil {
			c.outofbandVarianceMarkerHandler = originalHandler
		}
		if recursionFlags&RecursionFlagsSource != 0 {
			sourceDepth--
		}
		if recursionFlags&RecursionFlagsTarget != 0 {
			targetDepth--
		}
		expandingFlags = saveExpandingFlags
		if result != 0 {
			if result == TernaryTrue || (sourceDepth == 0 && targetDepth == 0) {
				if result == TernaryTrue || result == TernaryMaybe {
					// If result is definitely true, record all maybe keys as having succeeded. Also, record Ternary.Maybe
					// results as having succeeded once we reach depth 0, but never record Ternary.Unknown results.
					resetMaybeStack(true)
				} else {
					resetMaybeStack(false)
				}
			}
			// Note: it's intentional that we don't reset in the else case;
			// we leave them on the stack such that when we hit depth zero
			// above, we can report all of them as successful.
		} else {
			// A false result goes straight into global cache (when something is false under
			// assumptions it will also be false without assumptions)
			relation.set(id, RelationComparisonResultFailed|propagatingVarianceFlags)
			relationCount--
			resetMaybeStack(false)
		}
		return result

		resetMaybeStack := func(markAllAsSucceeded bool) {
			for i := maybeStart; i < maybeCount; i++ {
				maybeKeysSet.delete(maybeKeys[i])
				if markAllAsSucceeded {
					relation.set(maybeKeys[i], RelationComparisonResultSucceeded|propagatingVarianceFlags)
					relationCount--
				}
			}
			maybeCount = maybeStart
		}

	}

	structuredTypeRelatedTo := func(source *Type, target *Type, reportErrors bool, intersectionState IntersectionState) Ternary {
		saveErrorInfo := captureErrorCalculationState()
		result := structuredTypeRelatedToWorker(source, target, reportErrors, intersectionState, saveErrorInfo)
		if relation != c.identityRelation {
			// The combined constraint of an intersection type is the intersection of the constraints of
			// the constituents. When an intersection type contains instantiable types with union type
			// constraints, there are situations where we need to examine the combined constraint. One is
			// when the target is a union type. Another is when the intersection contains types belonging
			// to one of the disjoint domains. For example, given type variables T and U, each with the
			// constraint 'string | number', the combined constraint of 'T & U' is 'string | number' and
			// we need to check this constraint against a union on the target side. Also, given a type
			// variable V constrained to 'string | number', 'V & number' has a combined constraint of
			// 'string & number | number & number' which reduces to just 'number'.
			// This also handles type parameters, as a type parameter with a union constraint compared against a union
			// needs to have its constraint hoisted into an intersection with said type parameter, this way
			// the type param can be compared with itself in the target (with the influence of its constraint to match other parts)
			// For example, if `T extends 1 | 2` and `U extends 2 | 3` and we compare `T & U` to `T & U & (1 | 2 | 3)`
			if result == 0 && (source.flags&TypeFlagsIntersection != 0 || source.flags&TypeFlagsTypeParameter != 0 && target.flags&TypeFlagsUnion != 0) {
				constraint := c.getEffectiveConstraintOfIntersection(ifElse(source.flags&TypeFlagsIntersection != 0, source.AsIntersectionType().types, []*Type{source}), target.flags&TypeFlagsUnion != 0)
				if constraint != nil && c.everyType(constraint, func(c *Type) bool {
					return c != source
				}) {
					// TODO: Stack errors so we get a pyramid for the "normal" comparison above, _and_ a second for this
					result = isRelatedTo(constraint, target, RecursionFlagsSource, false /*reportErrors*/, nil /*headMessage*/, intersectionState)
				}
			}
			// When the target is an intersection we need an extra property check in order to detect nested excess
			// properties and nested weak types. The following are motivating examples that all should be errors, but
			// aren't without this extra property check:
			//
			//   let obj: { a: { x: string } } & { c: number } = { a: { x: 'hello', y: 2 }, c: 5 };  // Nested excess property
			//
			//   declare let wrong: { a: { y: string } };
			//   let weak: { a?: { x?: number } } & { c?: string } = wrong;  // Nested weak object type
			//
			if result != 0 && intersectionState&IntersectionStateTarget == 0 && target.flags&TypeFlagsIntersection != 0 && !c.isGenericObjectType(target) && source.flags&(TypeFlagsObject|TypeFlagsIntersection) != 0 {
				result &= propertiesRelatedTo(source, target, reportErrors, nil /*excludedProperties*/, false /*optionalsOnly*/, IntersectionStateNone)
				if result != 0 && c.isObjectLiteralType(source) && getObjectFlags(source)&ObjectFlagsFreshLiteral != 0 {
					result &= indexSignaturesRelatedTo(source, target, false /*sourceIsPrimitive*/, reportErrors, IntersectionStateNone)
				}
			} else if result != 0 && c.isNonGenericObjectType(target) && !c.isArrayOrTupleType(target) && source.flags&TypeFlagsIntersection != 0 && c.getApparentType(source).flags&TypeFlagsStructuredType != 0 && !core.Some(source.AsIntersectionType().types, func(t *Type) bool {
				return t == target || getObjectFlags(t)&ObjectFlagsNonInferrableType != 0
			}) {
				result &= propertiesRelatedTo(source, target, reportErrors, nil /*excludedProperties*/, true /*optionalsOnly*/, intersectionState)
			}
		}
		if result != 0 {
			resetErrorInfo(saveErrorInfo)
		}
		return result
	}

	getApparentMappedTypeKeys := func(nameType *Type, targetType MappedType) *Type {
		modifiersType := c.getApparentType(c.getModifiersTypeFromMappedType(targetType))
		var mappedKeys []*Type = []never{}
		c.forEachMappedTypePropertyKeyTypeAndIndexSignatureKeyType(modifiersType, TypeFlagsStringOrNumberLiteralOrUnique, false, func(t *Type) undefined {
			return mappedKeys.push(c.instantiateType(nameType, c.appendTypeMapping(targetType.mapper, c.getTypeParameterFromMappedType(targetType), t)))
		})
		return c.getUnionType(mappedKeys)
	}

	structuredTypeRelatedToWorker := func(source *Type, target *Type, reportErrors bool, intersectionState IntersectionState, saveErrorInfo ReturnType[ /* TODO(TS-TO-GO) TypeNode TypeQuery: typeof captureErrorCalculationState */ any]) Ternary {
		var result Ternary
		var originalErrorInfo *DiagnosticMessageChain
		varianceCheckFailed := false
		sourceFlags := source.flags
		targetFlags := target.flags
		if relation == c.identityRelation {
			// We've already checked that source.flags and target.flags are identical
			if sourceFlags&TypeFlagsUnionOrIntersection != 0 {
				result := eachTypeRelatedToSomeType(source.AsUnionOrIntersectionType(), target.AsUnionOrIntersectionType())
				if result != 0 {
					result &= eachTypeRelatedToSomeType(target.AsUnionOrIntersectionType(), source.AsUnionOrIntersectionType())
				}
				return result
			}
			if sourceFlags&TypeFlagsIndex != 0 {
				return isRelatedTo(source.AsIndexType().type_, target.AsIndexType().type_, RecursionFlagsBoth, false /*reportErrors*/)
			}
			if sourceFlags&TypeFlagsIndexedAccess != 0 {
				if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo((source as IndexedAccessType).objectType, (target as IndexedAccessType).objectType, RecursionFlags.Both, /*reportErrors* / false) */ TODO != 0 {
					if /* TODO(TS-TO-GO) AmpersandEqualsToken BinaryExpression: result &= isRelatedTo((source as IndexedAccessType).indexType, (target as IndexedAccessType).indexType, RecursionFlags.Both, /*reportErrors* / false) */ TODO != 0 {
						return result
					}
				}
			}
			if sourceFlags&TypeFlagsConditional != 0 {
				if source.AsConditionalType().root.isDistributive == target.AsConditionalType().root.isDistributive {
					if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo((source as ConditionalType).checkType, (target as ConditionalType).checkType, RecursionFlags.Both, /*reportErrors* / false) */ TODO != 0 {
						if /* TODO(TS-TO-GO) AmpersandEqualsToken BinaryExpression: result &= isRelatedTo((source as ConditionalType).extendsType, (target as ConditionalType).extendsType, RecursionFlags.Both, /*reportErrors* / false) */ TODO != 0 {
							if /* TODO(TS-TO-GO) AmpersandEqualsToken BinaryExpression: result &= isRelatedTo(getTrueTypeFromConditionalType(source as ConditionalType), getTrueTypeFromConditionalType(target as ConditionalType), RecursionFlags.Both, /*reportErrors* / false) */ TODO != 0 {
								if /* TODO(TS-TO-GO) AmpersandEqualsToken BinaryExpression: result &= isRelatedTo(getFalseTypeFromConditionalType(source as ConditionalType), getFalseTypeFromConditionalType(target as ConditionalType), RecursionFlags.Both, /*reportErrors* / false) */ TODO != 0 {
									return result
								}
							}
						}
					}
				}
			}
			if sourceFlags&TypeFlagsSubstitution != 0 {
				if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo((source as SubstitutionType).baseType, (target as SubstitutionType).baseType, RecursionFlags.Both, /*reportErrors* / false) */ TODO != 0 {
					if /* TODO(TS-TO-GO) AmpersandEqualsToken BinaryExpression: result &= isRelatedTo((source as SubstitutionType).constraint, (target as SubstitutionType).constraint, RecursionFlags.Both, /*reportErrors* / false) */ TODO != 0 {
						return result
					}
				}
			}
			if sourceFlags&TypeFlagsObject == 0 {
				return TernaryFalse
			}
		} else if sourceFlags&TypeFlagsUnionOrIntersection != 0 || targetFlags&TypeFlagsUnionOrIntersection != 0 {
			if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = unionOrIntersectionRelatedTo(source, target, reportErrors, intersectionState) */ TODO != 0 {
				return result
			}
			// The ordered decomposition above doesn't handle all cases. Specifically, we also need to handle:
			// Source is instantiable (e.g. source has union or intersection constraint).
			// Source is an object, target is a union (e.g. { a, b: boolean } <=> { a, b: true } | { a, b: false }).
			// Source is an intersection, target is an object (e.g. { a } & { b } <=> { a, b }).
			// Source is an intersection, target is a union (e.g. { a } & { b: boolean } <=> { a, b: true } | { a, b: false }).
			// Source is an intersection, target instantiable (e.g. string & { tag } <=> T["a"] constrained to string & { tag }).
			if !(sourceFlags&TypeFlagsInstantiable != 0 || sourceFlags&TypeFlagsObject != 0 && targetFlags&TypeFlagsUnion != 0 || sourceFlags&TypeFlagsIntersection != 0 && targetFlags&(TypeFlagsObject|TypeFlagsUnion|TypeFlagsInstantiable) != 0) {
				return TernaryFalse
			}
		}

		// We limit alias variance probing to only object and conditional types since their alias behavior
		// is more predictable than other, interned types, which may or may not have an alias depending on
		// the order in which things were checked.
		if sourceFlags&(TypeFlagsObject|TypeFlagsConditional) != 0 && source.aliasSymbol != nil && source.aliasTypeArguments != nil && source.aliasSymbol == target.aliasSymbol && !(c.isMarkerType(source) || c.isMarkerType(target)) {
			variances := c.getAliasVariances(source.aliasSymbol)
			if variances == emptyArray {
				return TernaryUnknown
			}
			params := c.getSymbolLinks(source.aliasSymbol).typeParameters
			minParams := c.getMinTypeArgumentCount(params)
			sourceTypes := c.fillMissingTypeArguments(source.aliasTypeArguments, params, minParams, isInJSFile(source.aliasSymbol.ValueDeclaration))
			targetTypes := c.fillMissingTypeArguments(target.aliasTypeArguments, params, minParams, isInJSFile(source.aliasSymbol.ValueDeclaration))
			varianceResult := relateVariances(sourceTypes, targetTypes, variances, intersectionState)
			if varianceResult != nil {
				return varianceResult
			}
		}

		// For a generic type T and a type U that is assignable to T, [...U] is assignable to T, U is assignable to readonly [...T],
		// and U is assignable to [...T] when U is constrained to a mutable array or tuple type.
		if c.isSingleElementGenericTupleType(source) && !source.target.readonly && ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(getTypeArguments(source)[0], target, RecursionFlags.Source) */ TODO != 0) || c.isSingleElementGenericTupleType(target) && (target.target.readonly || c.isMutableArrayOrTuple(c.getBaseConstraintOfType(source) || source)) && ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(source, getTypeArguments(target)[0], RecursionFlags.Target) */ TODO != 0) {
			return result
		}

		if targetFlags&TypeFlagsTypeParameter != 0 {
			// A source type { [P in Q]: X } is related to a target type T if keyof T is related to Q and X is related to T[Q].
			if getObjectFlags(source)&ObjectFlagsMapped != 0 && source.AsMappedType().declaration.NameType == nil && isRelatedTo(c.getIndexType(target), c.getConstraintTypeFromMappedType(source.AsMappedType()), RecursionFlagsBoth) != 0 {
				if c.getMappedTypeModifiers(source.AsMappedType())&MappedTypeModifiersIncludeOptional == 0 {
					templateType := c.getTemplateTypeFromMappedType(source.AsMappedType())
					indexedAccessType := c.getIndexedAccessType(target, c.getTypeParameterFromMappedType(source.AsMappedType()))
					if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(templateType, indexedAccessType, RecursionFlags.Both, reportErrors) */ TODO != 0 {
						return result
					}
				}
			}
			if relation == c.comparableRelation && sourceFlags&TypeFlagsTypeParameter != 0 {
				// This is a carve-out in comparability to essentially forbid comparing a type parameter
				// with another type parameter unless one extends the other. (Remember: comparability is mostly bidirectional!)
				constraint := c.getConstraintOfTypeParameter(source)
				if constraint != nil {
					for constraint != nil && c.someType(constraint, func(c *Type) bool {
						return c.flags&TypeFlagsTypeParameter != 0
					}) {
						if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(constraint, target, RecursionFlags.Source, /*reportErrors* / false) */ TODO != 0 {
							return result
						}
						constraint = c.getConstraintOfTypeParameter(constraint)
					}
				}
				return TernaryFalse
			}
		} else if targetFlags&TypeFlagsIndex != 0 {
			targetType := target.AsIndexType().type_
			// A keyof S is related to a keyof T if T is related to S.
			if sourceFlags&TypeFlagsIndex != 0 {
				if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(targetType, (source as IndexType).type, RecursionFlags.Both, /*reportErrors* / false) */ TODO != 0 {
					return result
				}
			}
			if c.isTupleType(targetType) {
				// An index type can have a tuple type target when the tuple type contains variadic elements.
				// Check if the source is related to the known keys of the tuple type.
				if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(source, getKnownKeysOfTupleType(targetType), RecursionFlags.Target, reportErrors) */ TODO != 0 {
					return result
				}
			} else {
				// A type S is assignable to keyof T if S is assignable to keyof C, where C is the
				// simplified form of T or, if T doesn't simplify, the constraint of T.
				constraint := c.getSimplifiedTypeOrConstraint(targetType)
				if constraint != nil {
					// We require Ternary.True here such that circular constraints don't cause
					// false positives. For example, given 'T extends { [K in keyof T]: string }',
					// 'keyof T' has itself as its constraint and produces a Ternary.Maybe when
					// related to other types.
					if isRelatedTo(source, c.getIndexType(constraint, target.AsIndexType().indexFlags|IndexFlagsNoReducibleCheck), RecursionFlagsTarget, reportErrors) == TernaryTrue {
						return TernaryTrue
					}
				} else if c.isGenericMappedType(targetType) {
					// generic mapped types that don't simplify or have a constraint still have a very simple set of keys we can compare against
					// - their nameType or constraintType.
					// In many ways, this comparison is a deferred version of what `getIndexTypeForMappedType` does to actually resolve the keys for _non_-generic types

					nameType := c.getNameTypeFromMappedType(targetType)
					constraintType := c.getConstraintTypeFromMappedType(targetType)
					var targetKeys TODO
					if nameType != nil && c.isMappedTypeWithKeyofConstraintDeclaration(targetType) {
						// we need to get the apparent mappings and union them with the generic mappings, since some properties may be
						// missing from the `constraintType` which will otherwise be mapped in the object
						mappedKeys := getApparentMappedTypeKeys(nameType, targetType)
						// We still need to include the non-apparent (and thus still generic) keys in the target side of the comparison (in case they're in the source side)
						targetKeys = c.getUnionType([]*Type{mappedKeys, nameType})
					} else {
						targetKeys = nameType || constraintType
					}
					if isRelatedTo(source, targetKeys, RecursionFlagsTarget, reportErrors) == TernaryTrue {
						return TernaryTrue
					}
				}
			}
		} else if targetFlags&TypeFlagsIndexedAccess != 0 {
			if sourceFlags&TypeFlagsIndexedAccess != 0 {
				// Relate components directly before falling back to constraint relationships
				// A type S[K] is related to a type T[J] if S is related to T and K is related to J.
				if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo((source as IndexedAccessType).objectType, (target as IndexedAccessType).objectType, RecursionFlags.Both, reportErrors) */ TODO != 0 {
					result &= isRelatedTo(source.AsIndexedAccessType().indexType, target.AsIndexedAccessType().indexType, RecursionFlagsBoth, reportErrors)
				}
				if result != 0 {
					return result
				}
				if reportErrors {
					originalErrorInfo = errorInfo
				}
			}
			// A type S is related to a type T[K] if S is related to C, where C is the base
			// constraint of T[K] for writing.
			if relation == c.assignableRelation || relation == c.comparableRelation {
				objectType := target.AsIndexedAccessType().objectType
				indexType := target.AsIndexedAccessType().indexType
				baseObjectType := c.getBaseConstraintOfType(objectType) || objectType
				baseIndexType := c.getBaseConstraintOfType(indexType) || indexType
				if !c.isGenericObjectType(baseObjectType) && !c.isGenericIndexType(baseIndexType) {
					accessFlags := AccessFlagsWriting | (ifElse(baseObjectType != objectType, AccessFlagsNoIndexSignatures, 0))
					constraint := c.getIndexedAccessTypeOrUndefined(baseObjectType, baseIndexType, accessFlags)
					if constraint != nil {
						if reportErrors && originalErrorInfo != nil {
							// create a new chain for the constraint error
							resetErrorInfo(saveErrorInfo)
						}
						if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(source, constraint, RecursionFlags.Target, reportErrors, /*headMessage* / undefined, intersectionState) */ TODO != 0 {
							return result
						}
						// prefer the shorter chain of the constraint comparison chain, and the direct comparison chain
						if reportErrors && originalErrorInfo != nil && errorInfo != nil {
							if countMessageChainBreadth([]DiagnosticMessageChain{originalErrorInfo}) <= countMessageChainBreadth([]DiagnosticMessageChain{errorInfo}) {
								errorInfo = originalErrorInfo
							} else {
								errorInfo = errorInfo
							}
						}
					}
				}
			}
			if reportErrors {
				originalErrorInfo = nil
			}
		} else if c.isGenericMappedType(target) && relation != c.identityRelation {
			// Check if source type `S` is related to target type `{ [P in Q]: T }` or `{ [P in Q as R]: T}`.
			keysRemapped := target.declaration.NameType != nil
			templateType := c.getTemplateTypeFromMappedType(target)
			modifiers := c.getMappedTypeModifiers(target)
			if modifiers&MappedTypeModifiersExcludeOptional == 0 {
				// If the mapped type has shape `{ [P in Q]: T[P] }`,
				// source `S` is related to target if `T` = `S`, i.e. `S` is related to `{ [P in Q]: S[P] }`.
				if !keysRemapped && templateType.flags&TypeFlagsIndexedAccess != 0 && templateType.AsIndexedAccessType().objectType == source && templateType.AsIndexedAccessType().indexType == c.getTypeParameterFromMappedType(target) {
					return TernaryTrue
				}
				if !c.isGenericMappedType(source) {
					// If target has shape `{ [P in Q as R]: T}`, then its keys have type `R`.
					// If target has shape `{ [P in Q]: T }`, then its keys have type `Q`.
					var targetKeys *Type
					if keysRemapped {
						targetKeys = c.getNameTypeFromMappedType(target)
					} else {
						targetKeys = c.getConstraintTypeFromMappedType(target)
					}
					// Type of the keys of source type `S`, i.e. `keyof S`.
					sourceKeys := c.getIndexType(source, IndexFlagsNoIndexSignatures)
					includeOptional := modifiers & MappedTypeModifiersIncludeOptional
					var filteredByApplicability *Type
					if includeOptional != 0 {
						filteredByApplicability = c.intersectTypes(targetKeys, sourceKeys)
					} else {
						filteredByApplicability = nil
					}
					// A source type `S` is related to a target type `{ [P in Q]: T }` if `Q` is related to `keyof S` and `S[Q]` is related to `T`.
					// A source type `S` is related to a target type `{ [P in Q as R]: T }` if `R` is related to `keyof S` and `S[R]` is related to `T.
					// A source type `S` is related to a target type `{ [P in Q]?: T }` if some constituent `Q'` of `Q` is related to `keyof S` and `S[Q']` is related to `T`.
					// A source type `S` is related to a target type `{ [P in Q as R]?: T }` if some constituent `R'` of `R` is related to `keyof S` and `S[R']` is related to `T`.
					if ifElse(includeOptional != 0, filteredByApplicability.flags&TypeFlagsNever == 0, isRelatedTo(targetKeys, sourceKeys, RecursionFlagsBoth) != 0) {
						templateType := c.getTemplateTypeFromMappedType(target)
						typeParameter := c.getTypeParameterFromMappedType(target)

						// Fastpath: When the template type has the form `Obj[P]` where `P` is the mapped type parameter, directly compare source `S` with `Obj`
						// to avoid creating the (potentially very large) number of new intermediate types made by manufacturing `S[P]`.
						nonNullComponent := c.extractTypesOfKind(templateType, ^TypeFlagsNullable)
						if !keysRemapped && nonNullComponent.flags&TypeFlagsIndexedAccess != 0 && nonNullComponent.AsIndexedAccessType().indexType == typeParameter {
							if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(source, (nonNullComponent as IndexedAccessType).objectType, RecursionFlags.Target, reportErrors) */ TODO != 0 {
								return result
							}
						} else {
							// We need to compare the type of a property on the source type `S` to the type of the same property on the target type,
							// so we need to construct an indexing type representing a property, and then use indexing type to index the source type for comparison.

							// If the target type has shape `{ [P in Q]: T }`, then a property of the target has type `P`.
							// If the target type has shape `{ [P in Q]?: T }`, then a property of the target has type `P`,
							// but the property is optional, so we only want to compare properties `P` that are common between `keyof S` and `Q`.
							// If the target type has shape `{ [P in Q as R]: T }`, then a property of the target has type `R`.
							// If the target type has shape `{ [P in Q as R]?: T }`, then a property of the target has type `R`,
							// but the property is optional, so we only want to compare properties `R` that are common between `keyof S` and `R`.
							var indexingType *Type
							switch {
							case keysRemapped:
								indexingType = (filteredByApplicability || targetKeys)
							case filteredByApplicability != nil:
								indexingType = c.getIntersectionType([]*Type{filteredByApplicability, typeParameter})
							default:
								indexingType = typeParameter
							}
							indexedAccessType := c.getIndexedAccessType(source, indexingType)
							// Compare `S[indexingType]` to `T`, where `T` is the type of a property of the target type.
							if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(indexedAccessType, templateType, RecursionFlags.Both, reportErrors) */ TODO != 0 {
								return result
							}
						}
					}
					originalErrorInfo = errorInfo
					resetErrorInfo(saveErrorInfo)
				}
			}
		} else if targetFlags&TypeFlagsConditional != 0 {
			// If we reach 10 levels of nesting for the same conditional type, assume it is an infinitely expanding recursive
			// conditional type and bail out with a Ternary.Maybe result.
			if c.isDeeplyNestedType(target, targetStack, targetDepth, 10) {
				return TernaryMaybe
			}
			c := target.AsConditionalType()
			// We check for a relationship to a conditional type target only when the conditional type has no
			// 'infer' positions, is not distributive or is distributive but doesn't reference the check type
			// parameter in either of the result types, and the source isn't an instantiation of the same
			// conditional type (as happens when computing variance).
			if c.root.inferTypeParameters == nil && !c.isDistributionDependent(c.root) && !(source.flags&TypeFlagsConditional != 0 && source.AsConditionalType().root == c.root) {
				// Check if the conditional is always true or always false but still deferred for distribution purposes.
				skipTrue := !c.isTypeAssignableTo(c.getPermissiveInstantiation(c.checkType), c.getPermissiveInstantiation(c.extendsType))
				skipFalse := !skipTrue && c.isTypeAssignableTo(c.getRestrictiveInstantiation(c.checkType), c.getRestrictiveInstantiation(c.extendsType))
				// TODO: Find a nice way to include potential conditional type breakdowns in error output, if they seem good (they usually don't)
				if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = skipTrue ? Ternary.True : isRelatedTo(source, getTrueTypeFromConditionalType(c), RecursionFlags.Target, /*reportErrors* / false, /*headMessage* / undefined, intersectionState) */ TODO != 0 {
					if skipFalse {
						result &= TernaryTrue
					} else {
						result &= isRelatedTo(source, c.getFalseTypeFromConditionalType(c), RecursionFlagsTarget, false /*reportErrors*/, nil /*headMessage*/, intersectionState)
					}
					if result != 0 {
						return result
					}
				}
			}
		} else if targetFlags&TypeFlagsTemplateLiteral != 0 {
			if sourceFlags&TypeFlagsTemplateLiteral != 0 {
				if relation == c.comparableRelation {
					if c.templateLiteralTypesDefinitelyUnrelated(source.AsTemplateLiteralType(), target.AsTemplateLiteralType()) {
						return TernaryFalse
					} else {
						return TernaryTrue
					}
				}
				// Report unreliable variance for type variables referenced in template literal type placeholders.
				// For example, `foo-${number}` is related to `foo-${string}` even though number isn't related to string.
				c.instantiateType(source, c.reportUnreliableMapper)
			}
			if c.isTypeMatchedByTemplateLiteralType(source, target.AsTemplateLiteralType()) {
				return TernaryTrue
			}
		} else if target.flags&TypeFlagsStringMapping != 0 {
			if source.flags&TypeFlagsStringMapping == 0 {
				if c.isMemberOfStringMapping(source, target) {
					return TernaryTrue
				}
			}
		}

		if sourceFlags&TypeFlagsTypeVariable != 0 {
			// IndexedAccess comparisons are handled above in the `targetFlags & TypeFlage.IndexedAccess` branch
			if !(sourceFlags&TypeFlagsIndexedAccess != 0 && targetFlags&TypeFlagsIndexedAccess != 0) {
				constraint := c.getConstraintOfType(source.AsTypeVariable()) || c.unknownType
				// hi-speed no-this-instantiation check (less accurate, but avoids costly `this`-instantiation when the constraint will suffice), see #28231 for report on why this is needed
				if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(constraint, target, RecursionFlags.Source, /*reportErrors* / false, /*headMessage* / undefined, intersectionState) */ TODO != 0 {
					return result
				} else if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(getTypeWithThisArgument(constraint, source), target, RecursionFlags.Source, reportErrors && constraint !== unknownType && !(targetFlags & sourceFlags & TypeFlags.TypeParameter), /*headMessage* / undefined, intersectionState) */ TODO != 0 {
					return result
				}
				if c.isMappedTypeGenericIndexedAccess(source) {
					// For an indexed access type { [P in K]: E}[X], above we have already explored an instantiation of E with X
					// substituted for P. We also want to explore type { [P in K]: E }[C], where C is the constraint of X.
					indexConstraint := c.getConstraintOfType(source.AsIndexedAccessType().indexType)
					if indexConstraint != nil {
						if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(getIndexedAccessType((source as IndexedAccessType).objectType, indexConstraint), target, RecursionFlags.Source, reportErrors) */ TODO != 0 {
							return result
						}
					}
				}
			}
		} else if sourceFlags&TypeFlagsIndex != 0 {
			isDeferredMappedIndex := c.shouldDeferIndexType(source.AsIndexType().type_, source.AsIndexType().indexFlags) && getObjectFlags(source.AsIndexType().type_)&ObjectFlagsMapped
			if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(stringNumberSymbolType, target, RecursionFlags.Source, reportErrors && !isDeferredMappedIndex) */ TODO != 0 {
				return result
			}
			if isDeferredMappedIndex {
				mappedType := source.AsIndexType().type_.AsMappedType()
				nameType := c.getNameTypeFromMappedType(mappedType)
				// Unlike on the target side, on the source side we do *not* include the generic part of the `nameType`, since that comes from a
				// (potentially anonymous) mapped type local type parameter, so that'd never assign outside the mapped type body, but we still want to
				// allow assignments of index types of identical (or similar enough) mapped types.
				// eg, `keyof {[X in keyof A]: Obj[X]}` should be assignable to `keyof {[Y in keyof A]: Tup[Y]}` because both map over the same set of keys (`keyof A`).
				// Without this source-side breakdown, a `keyof {[X in keyof A]: Obj[X]}` style type won't be assignable to anything except itself, which is much too strict.
				var sourceMappedKeys *Type
				if nameType != nil && c.isMappedTypeWithKeyofConstraintDeclaration(mappedType) {
					sourceMappedKeys = getApparentMappedTypeKeys(nameType, mappedType)
				} else {
					sourceMappedKeys = (nameType || c.getConstraintTypeFromMappedType(mappedType))
				}
				if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(sourceMappedKeys, target, RecursionFlags.Source, reportErrors) */ TODO != 0 {
					return result
				}
			}
		} else if sourceFlags&TypeFlagsTemplateLiteral != 0 && targetFlags&TypeFlagsObject == 0 {
			if targetFlags&TypeFlagsTemplateLiteral == 0 {
				constraint := c.getBaseConstraintOfType(source)
				if constraint != nil && constraint != source && ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(constraint, target, RecursionFlags.Source, reportErrors) */ TODO != 0) {
					return result
				}
			}
		} else if sourceFlags&TypeFlagsStringMapping != 0 {
			if targetFlags&TypeFlagsStringMapping != 0 {
				if source.AsStringMappingType().symbol != target.AsStringMappingType().symbol {
					return TernaryFalse
				}
				if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo((source as StringMappingType).type, (target as StringMappingType).type, RecursionFlags.Both, reportErrors) */ TODO != 0 {
					return result
				}
			} else {
				constraint := c.getBaseConstraintOfType(source)
				if constraint != nil && ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(constraint, target, RecursionFlags.Source, reportErrors) */ TODO != 0) {
					return result
				}
			}
		} else if sourceFlags&TypeFlagsConditional != 0 {
			// If we reach 10 levels of nesting for the same conditional type, assume it is an infinitely expanding recursive
			// conditional type and bail out with a Ternary.Maybe result.
			if c.isDeeplyNestedType(source, sourceStack, sourceDepth, 10) {
				return TernaryMaybe
			}
			if targetFlags&TypeFlagsConditional != 0 {
				// Two conditional types 'T1 extends U1 ? X1 : Y1' and 'T2 extends U2 ? X2 : Y2' are related if
				// one of T1 and T2 is related to the other, U1 and U2 are identical types, X1 is related to X2,
				// and Y1 is related to Y2.
				sourceParams := source.AsConditionalType().root.inferTypeParameters
				sourceExtends := source.AsConditionalType().extendsType
				var mapper *TypeMapper
				if sourceParams != nil {
					// If the source has infer type parameters, we instantiate them in the context of the target
					ctx := c.createInferenceContext(sourceParams, nil /*signature*/, InferenceFlagsNone, isRelatedToWorker)
					c.inferTypes(ctx.inferences, target.AsConditionalType().extendsType, sourceExtends, InferencePriorityNoConstraints|InferencePriorityAlwaysStrict)
					sourceExtends = c.instantiateType(sourceExtends, ctx.mapper)
					mapper = ctx.mapper
				}
				if c.isTypeIdenticalTo(sourceExtends, target.AsConditionalType().extendsType) && (isRelatedTo(source.AsConditionalType().checkType, target.AsConditionalType().checkType, RecursionFlagsBoth) != 0 || isRelatedTo(target.AsConditionalType().checkType, source.AsConditionalType().checkType, RecursionFlagsBoth) != 0) {
					if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(instantiateType(getTrueTypeFromConditionalType(source as ConditionalType), mapper), getTrueTypeFromConditionalType(target as ConditionalType), RecursionFlags.Both, reportErrors) */ TODO != 0 {
						result &= isRelatedTo(c.getFalseTypeFromConditionalType(source.AsConditionalType()), c.getFalseTypeFromConditionalType(target.AsConditionalType()), RecursionFlagsBoth, reportErrors)
					}
					if result != 0 {
						return result
					}
				}
			}
			// conditionals can be related to one another via normal constraint, as, eg, `A extends B ? O : never` should be assignable to `O`
			// when `O` is a conditional (`never` is trivially assignable to `O`, as is `O`!).
			defaultConstraint := c.getDefaultConstraintOfConditionalType(source.AsConditionalType())
			if defaultConstraint {
				if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(defaultConstraint, target, RecursionFlags.Source, reportErrors) */ TODO != 0 {
					return result
				}
			}
			// conditionals aren't related to one another via distributive constraint as it is much too inaccurate and allows way
			// more assignments than are desirable (since it maps the source check type to its constraint, it loses information).
			var distributiveConstraint *Type
			if targetFlags&TypeFlagsConditional == 0 && c.hasNonCircularBaseConstraint(source) {
				distributiveConstraint = c.getConstraintOfDistributiveConditionalType(source.AsConditionalType())
			} else {
				distributiveConstraint = nil
			}
			if distributiveConstraint != nil {
				resetErrorInfo(saveErrorInfo)
				if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(distributiveConstraint, target, RecursionFlags.Source, reportErrors) */ TODO != 0 {
					return result
				}
			}
		} else {
			// An empty object type is related to any mapped type that includes a '?' modifier.
			if relation != c.subtypeRelation && relation != c.strictSubtypeRelation && c.isPartialMappedType(target) && c.isEmptyObjectType(source) {
				return TernaryTrue
			}
			if c.isGenericMappedType(target) {
				if c.isGenericMappedType(source) {
					if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = mappedTypeRelatedTo(source, target, reportErrors) */ TODO != 0 {
						return result
					}
				}
				return TernaryFalse
			}
			sourceIsPrimitive := sourceFlags&TypeFlagsPrimitive != 0
			if relation != c.identityRelation {
				source = c.getApparentType(source)
				sourceFlags = source.flags
			} else if c.isGenericMappedType(source) {
				return TernaryFalse
			}
			if getObjectFlags(source)&ObjectFlagsReference != 0 && getObjectFlags(target)&ObjectFlagsReference != 0 && source.AsTypeReference().target == target.AsTypeReference().target && !c.isTupleType(source) && !(c.isMarkerType(source) || c.isMarkerType(target)) {
				// When strictNullChecks is disabled, the element type of the empty array literal is undefinedWideningType,
				// and an empty array literal wouldn't be assignable to a `never[]` without this check.
				if c.isEmptyArrayLiteralType(source) {
					return TernaryTrue
				}
				// We have type references to the same generic type, and the type references are not marker
				// type references (which are intended by be compared structurally). Obtain the variance
				// information for the type parameters and relate the type arguments accordingly.
				variances := c.getVariances(source.AsTypeReference().target)
				// We return Ternary.Maybe for a recursive invocation of getVariances (signalled by emptyArray). This
				// effectively means we measure variance only from type parameter occurrences that aren't nested in
				// recursive instantiations of the generic type.
				if variances == emptyArray {
					return TernaryUnknown
				}
				varianceResult := relateVariances(c.getTypeArguments(source.AsTypeReference()), c.getTypeArguments(target.AsTypeReference()), variances, intersectionState)
				if varianceResult != nil {
					return varianceResult
				}
			} else if ifElse(c.isReadonlyArrayType(target), c.everyType(source, c.isArrayOrTupleType), c.isArrayType(target) && c.everyType(source, func(t *Type) bool {
				return c.isTupleType(t) && !t.target.readonly
			})) {
				if relation != c.identityRelation {
					return isRelatedTo(c.getIndexTypeOfType(source, c.numberType) || c.anyType, c.getIndexTypeOfType(target, c.numberType) || c.anyType, RecursionFlagsBoth, reportErrors)
				} else {
					// By flags alone, we know that the `target` is a readonly array while the source is a normal array or tuple
					// or `target` is an array and source is a tuple - in both cases the types cannot be identical, by construction
					return TernaryFalse
				}
			} else if c.isGenericTupleType(source) && c.isTupleType(target) && !c.isGenericTupleType(target) {
				constraint := c.getBaseConstraintOrType(source)
				if constraint != source {
					return isRelatedTo(constraint, target, RecursionFlagsSource, reportErrors)
				}
			} else if (relation == c.subtypeRelation || relation == c.strictSubtypeRelation) && c.isEmptyObjectType(target) && getObjectFlags(target)&ObjectFlagsFreshLiteral != 0 && !c.isEmptyObjectType(source) {
				return TernaryFalse
			}
			// Even if relationship doesn't hold for unions, intersections, or generic type references,
			// it may hold in a structural comparison.
			// In a check of the form X = A & B, we will have previously checked if A relates to X or B relates
			// to X. Failing both of those we want to check if the aggregation of A and B's members structurally
			// relates to X. Thus, we include intersection types on the source side here.
			if sourceFlags&(TypeFlagsObject|TypeFlagsIntersection) != 0 && targetFlags&TypeFlagsObject != 0 {
				// Report structural errors only if we haven't reported any errors yet
				reportStructuralErrors := reportErrors && errorInfo == saveErrorInfo.errorInfo && !sourceIsPrimitive
				result = propertiesRelatedTo(source, target, reportStructuralErrors, nil /*excludedProperties*/, false /*optionalsOnly*/, intersectionState)
				if result != 0 {
					result &= signaturesRelatedTo(source, target, SignatureKindCall, reportStructuralErrors, intersectionState)
					if result != 0 {
						result &= signaturesRelatedTo(source, target, SignatureKindConstruct, reportStructuralErrors, intersectionState)
						if result != 0 {
							result &= indexSignaturesRelatedTo(source, target, sourceIsPrimitive, reportStructuralErrors, intersectionState)
						}
					}
				}
				if varianceCheckFailed && result != 0 {
					errorInfo = originalErrorInfo || errorInfo || saveErrorInfo.errorInfo
					// Use variance error (there is no structural one) and return false
				} else if result != 0 {
					return result
				}
			}
			// If S is an object type and T is a discriminated union, S may be related to T if
			// there exists a constituent of T for every combination of the discriminants of S
			// with respect to T. We do not report errors here, as we will use the existing
			// error result from checking each constituent of the union.
			if sourceFlags&(TypeFlagsObject|TypeFlagsIntersection) != 0 && targetFlags&TypeFlagsUnion != 0 {
				objectOnlyTarget := c.extractTypesOfKind(target, TypeFlagsObject|TypeFlagsIntersection|TypeFlagsSubstitution)
				if objectOnlyTarget.flags&TypeFlagsUnion != 0 {
					result := typeRelatedToDiscriminatedType(source, objectOnlyTarget.AsUnionType())
					if result {
						return result
					}
				}
			}
		}
		return TernaryFalse

		countMessageChainBreadth := func(info *[]DiagnosticMessageChain) number {
			if info == nil {
				return 0
			}
			return reduceLeft(info, func(value number, chain DiagnosticMessageChain) number {
				return value + 1 + countMessageChainBreadth(chain.next)
			}, 0)
		}

		relateVariances := func(sourceTypeArguments *[]*Type, targetTypeArguments *[]*Type, variances []VarianceFlags, intersectionState IntersectionState) *Ternary {
			if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = typeArgumentsRelatedTo(sourceTypeArguments, targetTypeArguments, variances, reportErrors, intersectionState) */ TODO != 0 {
				return result
			}
			if core.Some(variances, func(v VarianceFlags) bool {
				return v&VarianceFlagsAllowsStructuralFallback != 0
			}) {
				// If some type parameter was `Unmeasurable` or `Unreliable`, and we couldn't pass by assuming it was identical, then we
				// have to allow a structural fallback check
				// We elide the variance-based error elaborations, since those might not be too helpful, since we'll potentially
				// be assuming identity of the type parameter.
				originalErrorInfo = nil
				resetErrorInfo(saveErrorInfo)
				return nil
			}
			allowStructuralFallback := targetTypeArguments && c.hasCovariantVoidArgument(targetTypeArguments, variances)
			varianceCheckFailed = !allowStructuralFallback
			// The type arguments did not relate appropriately, but it may be because we have no variance
			// information (in which case typeArgumentsRelatedTo defaulted to covariance for all type
			// arguments). It might also be the case that the target type has a 'void' type argument for
			// a covariant type parameter that is only used in return positions within the generic type
			// (in which case any type argument is permitted on the source side). In those cases we proceed
			// with a structural comparison. Otherwise, we know for certain the instantiations aren't
			// related and we can return here.
			if variances != emptyArray && !allowStructuralFallback {
				// In some cases generic types that are covariant in regular type checking mode become
				// invariant in --strictFunctionTypes mode because one or more type parameters are used in
				// both co- and contravariant positions. In order to make it easier to diagnose *why* such
				// types are invariant, if any of the type parameters are invariant we reset the reported
				// errors and instead force a structural comparison (which will include elaborations that
				// reveal the reason).
				// We can switch on `reportErrors` here, since varianceCheckFailed guarantees we return `False`,
				// we can return `False` early here to skip calculating the structural error message we don't need.
				if varianceCheckFailed && !(reportErrors && core.Some(variances, func(v VarianceFlags) bool {
					return (v & VarianceFlagsVarianceMask) == VarianceFlagsInvariant
				})) {
					return TernaryFalse
				}
				// We remember the original error information so we can restore it in case the structural
				// comparison unexpectedly succeeds. This can happen when the structural comparison result
				// is a Ternary.Maybe for example caused by the recursion depth limiter.
				originalErrorInfo = errorInfo
				resetErrorInfo(saveErrorInfo)
			}
		}

	}

	// A type [P in S]: X is related to a type [Q in T]: Y if T is related to S and X' is
	// related to Y, where X' is an instantiation of X in which P is replaced with Q. Notice
	// that S and T are contra-variant whereas X and Y are co-variant.
	mappedTypeRelatedTo := func(source MappedType, target MappedType, reportErrors bool) Ternary {
		modifiersRelated := relation == c.comparableRelation || (ifElse(relation == c.identityRelation, c.getMappedTypeModifiers(source) == c.getMappedTypeModifiers(target), c.getCombinedMappedTypeOptionality(source) <= c.getCombinedMappedTypeOptionality(target)))
		if modifiersRelated {
			var result Ternary
			targetConstraint := c.getConstraintTypeFromMappedType(target)
			sourceConstraint := c.instantiateType(c.getConstraintTypeFromMappedType(source), ifElse(c.getCombinedMappedTypeOptionality(source) < 0, c.reportUnmeasurableMapper, c.reportUnreliableMapper))
			if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = isRelatedTo(targetConstraint, sourceConstraint, RecursionFlags.Both, reportErrors) */ TODO != 0 {
				mapper := c.createTypeMapper([]TypeParameter{c.getTypeParameterFromMappedType(source)}, []TypeParameter{c.getTypeParameterFromMappedType(target)})
				if c.instantiateType(c.getNameTypeFromMappedType(source), mapper) == c.instantiateType(c.getNameTypeFromMappedType(target), mapper) {
					return result & isRelatedTo(c.instantiateType(c.getTemplateTypeFromMappedType(source), mapper), c.getTemplateTypeFromMappedType(target), RecursionFlagsBoth, reportErrors)
				}
			}
		}
		return TernaryFalse
	}

	typeRelatedToDiscriminatedType := func(source *Type, target UnionType) Ternary {
		// 1. Generate the combinations of discriminant properties & types 'source' can satisfy.
		//    a. If the number of combinations is above a set limit, the comparison is too complex.
		// 2. Filter 'target' to the subset of types whose discriminants exist in the matrix.
		//    a. If 'target' does not satisfy all discriminants in the matrix, 'source' is not related.
		// 3. For each type in the filtered 'target', determine if all non-discriminant properties of
		//    'target' are related to a property in 'source'.
		//
		// NOTE: See ~/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithDiscriminatedUnion.ts
		//       for examples.

		sourceProperties := c.getPropertiesOfType(source)
		sourcePropertiesFiltered := c.findDiscriminantProperties(sourceProperties, target)
		if sourcePropertiesFiltered == nil {
			return TernaryFalse
		}

		// Though we could compute the number of combinations as we generate
		// the matrix, this would incur additional memory overhead due to
		// array allocations. To reduce this overhead, we first compute
		// the number of combinations to ensure we will not surpass our
		// fixed limit before incurring the cost of any allocations:
		numCombinations := 1
		for _, sourceProperty := range sourcePropertiesFiltered {
			numCombinations *= c.countTypes(c.getNonMissingTypeOfSymbol(sourceProperty))
			if numCombinations > 25 {
				// We've reached the complexity limit.
				tracing. /* ? */ instant(tracing.Phase.CheckTypes, "typeRelatedToDiscriminatedType_DepthLimit", &Args{
					sourceId:        source.id,
					targetId:        target.id,
					numCombinations: numCombinations,
				})
				return TernaryFalse
			}
		}

		// Compute the set of types for each discriminant property.
		var sourceDiscriminantTypes [][]*Type = NewArray[[]*Type](sourcePropertiesFiltered.length)
		excludedProperties := NewSet[string]()
		for i := 0; i < sourcePropertiesFiltered.length; i++ {
			sourceProperty := sourcePropertiesFiltered[i]
			sourcePropertyType := c.getNonMissingTypeOfSymbol(sourceProperty)
			if sourcePropertyType.flags&TypeFlagsUnion != 0 {
				sourceDiscriminantTypes[i] = sourcePropertyType.AsUnionType().types
			} else {
				sourceDiscriminantTypes[i] = []*Type{sourcePropertyType}
			}
			excludedProperties.add(sourceProperty.EscapedName)
		}

		// Match each combination of the cartesian product of discriminant properties to one or more
		// constituents of 'target'. If any combination does not have a match then 'source' is not relatable.
		discriminantCombinations := cartesianProduct(sourceDiscriminantTypes)
		var matchingTypes []*Type = []never{}
		for _, combination := range discriminantCombinations {
			hasMatch := false
		outer:
			for _, t := range target.types {
				for i := 0; i < sourcePropertiesFiltered.length; i++ {
					sourceProperty := sourcePropertiesFiltered[i]
					targetProperty := c.getPropertyOfType(t, sourceProperty.EscapedName)
					if targetProperty == nil {
						continue outer
					}
					if sourceProperty == targetProperty {
						continue
					}
					// We compare the source property to the target in the context of a single discriminant type.
					related := propertyRelatedTo(source, target, sourceProperty, targetProperty, func(_ *ast.Symbol) *Type {
						return combination[i]
					}, false /*reportErrors*/, IntersectionStateNone, c.strictNullChecks || relation == c.comparableRelation /*skipOptional*/)
					// If the target property could not be found, or if the properties were not related,
					// then this constituent is not a match.
					if related == 0 {
						continue outer
					}
				}
				pushIfUnique(matchingTypes, t, equateValues)
				hasMatch = true
			}
			if !hasMatch {
				// We failed to match any type for this combination.
				return TernaryFalse
			}
		}

		// Compare the remaining non-discriminant properties of each match.
		result := TernaryTrue
		for _, t := range matchingTypes {
			result &= propertiesRelatedTo(source, t, false /*reportErrors*/, excludedProperties, false /*optionalsOnly*/, IntersectionStateNone)
			if result != 0 {
				result &= signaturesRelatedTo(source, t, SignatureKindCall, false /*reportErrors*/, IntersectionStateNone)
				if result != 0 {
					result &= signaturesRelatedTo(source, t, SignatureKindConstruct, false /*reportErrors*/, IntersectionStateNone)
					if result != 0 && !(c.isTupleType(source) && c.isTupleType(t)) {
						// Comparing numeric index types when both `source` and `type` are tuples is unnecessary as the
						// element types should be sufficiently covered by `propertiesRelatedTo`. It also causes problems
						// with index type assignability as the types for the excluded discriminants are still included
						// in the index type.
						result &= indexSignaturesRelatedTo(source, t, false /*sourceIsPrimitive*/, false /*reportErrors*/, IntersectionStateNone)
					}
				}
			}
			if result == 0 {
				return result
			}
		}
		return result
	}

	excludeProperties := func(properties []*ast.Symbol, excludedProperties *Set[string]) []*ast.Symbol {
		if excludedProperties == nil || properties.length == 0 {
			return properties
		}
		var result *[]*ast.Symbol
		for i := 0; i < properties.length; i++ {
			if !excludedProperties.has(properties[i].EscapedName) {
				if result != nil {
					result.push(properties[i])
				}
			} else if result == nil {
				result = properties.slice(0, i)
			}
		}
		return result || properties
	}

	isPropertySymbolTypeRelated := func(sourceProp *ast.Symbol, targetProp *ast.Symbol, getTypeOfSourceProperty func(sym *ast.Symbol) *Type, reportErrors bool, intersectionState IntersectionState) Ternary {
		targetIsOptional := c.strictNullChecks && getCheckFlags(targetProp)&ast.CheckFlagsPartial != 0
		effectiveTarget := c.addOptionality(c.getNonMissingTypeOfSymbol(targetProp), false /*isProperty*/, targetIsOptional)
		effectiveSource := getTypeOfSourceProperty(sourceProp)
		return isRelatedTo(effectiveSource, effectiveTarget, RecursionFlagsBoth, reportErrors, nil /*headMessage*/, intersectionState)
	}

	propertyRelatedTo := func(source *Type, target *Type, sourceProp *ast.Symbol, targetProp *ast.Symbol, getTypeOfSourceProperty func(sym *ast.Symbol) *Type, reportErrors bool, intersectionState IntersectionState, skipOptional bool) Ternary {
		sourcePropFlags := getDeclarationModifierFlagsFromSymbol(sourceProp)
		targetPropFlags := getDeclarationModifierFlagsFromSymbol(targetProp)
		if sourcePropFlags&ast.ModifierFlagsPrivate != 0 || targetPropFlags&ast.ModifierFlagsPrivate != 0 {
			if sourceProp.ValueDeclaration != targetProp.ValueDeclaration {
				if reportErrors {
					if sourcePropFlags&ast.ModifierFlagsPrivate != 0 && targetPropFlags&ast.ModifierFlagsPrivate != 0 {
						reportError(Diagnostics.Types_have_separate_declarations_of_a_private_property_0, c.symbolToString(targetProp))
					} else {
						reportError(Diagnostics.Property_0_is_private_in_type_1_but_not_in_type_2, c.symbolToString(targetProp), c.typeToString(ifElse(sourcePropFlags&ast.ModifierFlagsPrivate != 0, source, target)), c.typeToString(ifElse(sourcePropFlags&ast.ModifierFlagsPrivate != 0, target, source)))
					}
				}
				return TernaryFalse
			}
		} else if targetPropFlags&ast.ModifierFlagsProtected != 0 {
			if !c.isValidOverrideOf(sourceProp, targetProp) {
				if reportErrors {
					reportError(Diagnostics.Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2, c.symbolToString(targetProp), c.typeToString(c.getDeclaringClass(sourceProp) || source), c.typeToString(c.getDeclaringClass(targetProp) || target))
				}
				return TernaryFalse
			}
		} else if sourcePropFlags&ast.ModifierFlagsProtected != 0 {
			if reportErrors {
				reportError(Diagnostics.Property_0_is_protected_in_type_1_but_public_in_type_2, c.symbolToString(targetProp), c.typeToString(source), c.typeToString(target))
			}
			return TernaryFalse
		}

		// Ensure {readonly a: whatever} is not a subtype of {a: whatever},
		// while {a: whatever} is a subtype of {readonly a: whatever}.
		// This ensures the subtype relationship is ordered, and preventing declaration order
		// from deciding which type "wins" in union subtype reduction.
		// They're still assignable to one another, since `readonly` doesn't affect assignability.
		// This is only applied during the strictSubtypeRelation -- currently used in subtype reduction
		if relation == c.strictSubtypeRelation && c.isReadonlySymbol(sourceProp) && !c.isReadonlySymbol(targetProp) {
			return TernaryFalse
		}
		// If the target comes from a partial union prop, allow `undefined` in the target type
		related := isPropertySymbolTypeRelated(sourceProp, targetProp, getTypeOfSourceProperty, reportErrors, intersectionState)
		if related == 0 {
			if reportErrors {
				reportIncompatibleError(Diagnostics.Types_of_property_0_are_incompatible, c.symbolToString(targetProp))
			}
			return TernaryFalse
		}
		// When checking for comparability, be more lenient with optional properties.
		if !skipOptional && sourceProp.Flags&ast.SymbolFlagsOptional != 0 && targetProp.Flags&ast.SymbolFlagsClassMember != 0 && targetProp.Flags&ast.SymbolFlagsOptional == 0 {
			// TypeScript 1.0 spec (April 2014): 3.8.3
			// S is a subtype of a type T, and T is a supertype of S if ...
			// S' and T are object types and, for each member M in T..
			// M is a property and S' contains a property N where
			// if M is a required property, N is also a required property
			// (M - property in T)
			// (N - property in S)
			if reportErrors {
				reportError(Diagnostics.Property_0_is_optional_in_type_1_but_required_in_type_2, c.symbolToString(targetProp), c.typeToString(source), c.typeToString(target))
			}
			return TernaryFalse
		}
		return related
	}

	reportUnmatchedProperty := func(source *Type, target *Type, unmatchedProperty *ast.Symbol, requireOptionalProperties bool) {
		shouldSkipElaboration := false
		// give specific error in case where private names have the same description
		if unmatchedProperty.ValueDeclaration != nil && isNamedDeclaration(unmatchedProperty.ValueDeclaration) && isPrivateIdentifier(unmatchedProperty.ValueDeclaration.Name) && source.symbol && source.symbol.Flags&ast.SymbolFlagsClass != 0 {
			privateIdentifierDescription := unmatchedProperty.ValueDeclaration.Name.EscapedText
			symbolTableKey := getSymbolNameForPrivateIdentifier(source.symbol, privateIdentifierDescription)
			if symbolTableKey && c.getPropertyOfType(source, symbolTableKey) != nil {
				sourceName := factory.getDeclarationName(source.symbol.ValueDeclaration)
				targetName := factory.getDeclarationName(target.symbol.ValueDeclaration)
				reportError(Diagnostics.Property_0_in_type_1_refers_to_a_different_member_that_cannot_be_accessed_from_within_type_2, c.diagnosticName(privateIdentifierDescription), c.diagnosticName(ifElse(sourceName.EscapedText == "", anon, sourceName)), c.diagnosticName(ifElse(targetName.EscapedText == "", anon, targetName)))
				return
			}
		}
		props := arrayFrom(c.getUnmatchedProperties(source, target, requireOptionalProperties, false /*matchDiscriminantProperties*/))
		if headMessage == nil || (headMessage.code != Diagnostics.Class_0_incorrectly_implements_interface_1.code && headMessage.code != Diagnostics.Class_0_incorrectly_implements_class_1_Did_you_mean_to_extend_1_and_inherit_its_members_as_a_subclass.code) {
			shouldSkipElaboration = true
			// Retain top-level error for interface implementing issues, otherwise omit it
		}
		if props.length == 1 {
			propName := c.symbolToString(unmatchedProperty, nil /*enclosingDeclaration*/, ast.SymbolFlagsNone, SymbolFormatFlagsAllowAnyNodeKind|SymbolFormatFlagsWriteComputedProps)
			reportError(Diagnostics.Property_0_is_missing_in_type_1_but_required_in_type_2, propName, c.getTypeNamesForErrorDisplay(source, target)...)
			if length(unmatchedProperty.Declarations) != 0 {
				associateRelatedInfo(createDiagnosticForNode(unmatchedProperty.Declarations[0], Diagnostics._0_is_declared_here, propName))
			}
			if shouldSkipElaboration && errorInfo != nil {
				overrideNextErrorInfo++
			}
		} else if tryElaborateArrayLikeErrors(source, target, false /*reportErrors*/) {
			if props.length > 5 {
				reportError(Diagnostics.Type_0_is_missing_the_following_properties_from_type_1_Colon_2_and_3_more, c.typeToString(source), c.typeToString(target), core.Map(props.slice(0, 4), func(p *ast.Symbol) string {
					return c.symbolToString(p)
				}).join(", "), props.length-4)
			} else {
				reportError(Diagnostics.Type_0_is_missing_the_following_properties_from_type_1_Colon_2, c.typeToString(source), c.typeToString(target), core.Map(props, func(p *ast.Symbol) string {
					return c.symbolToString(p)
				}).join(", "))
			}
			if shouldSkipElaboration && errorInfo != nil {
				overrideNextErrorInfo++
			}
		}
		// No array like or unmatched property error - just issue top level error (errorInfo = undefined)
	}

	propertiesRelatedTo := func(source *Type, target *Type, reportErrors bool, excludedProperties *Set[string], optionalsOnly bool, intersectionState IntersectionState) Ternary {
		if relation == c.identityRelation {
			return propertiesIdenticalTo(source, target, excludedProperties)
		}
		result := TernaryTrue
		if c.isTupleType(target) {
			if c.isArrayOrTupleType(source) {
				if !target.target.readonly && (c.isReadonlyArrayType(source) || c.isTupleType(source) && source.target.readonly) {
					return TernaryFalse
				}
				sourceArity := c.getTypeReferenceArity(source)
				targetArity := c.getTypeReferenceArity(target)
				var sourceRestFlag number
				if c.isTupleType(source) {
					sourceRestFlag = source.target.combinedFlags & ElementFlagsRest
				} else {
					sourceRestFlag = ElementFlagsRest
				}
				targetHasRestElement := target.target.combinedFlags&ElementFlagsVariable != 0
				var sourceMinLength number
				if c.isTupleType(source) {
					sourceMinLength = source.target.minLength
				} else {
					sourceMinLength = 0
				}
				targetMinLength := target.target.minLength
				if sourceRestFlag == 0 && sourceArity < targetMinLength {
					if reportErrors {
						reportError(Diagnostics.Source_has_0_element_s_but_target_requires_1, sourceArity, targetMinLength)
					}
					return TernaryFalse
				}
				if !targetHasRestElement && targetArity < sourceMinLength {
					if reportErrors {
						reportError(Diagnostics.Source_has_0_element_s_but_target_allows_only_1, sourceMinLength, targetArity)
					}
					return TernaryFalse
				}
				if !targetHasRestElement && (sourceRestFlag != 0 || targetArity < sourceArity) {
					if reportErrors {
						if sourceMinLength < targetMinLength {
							reportError(Diagnostics.Target_requires_0_element_s_but_source_may_have_fewer, targetMinLength)
						} else {
							reportError(Diagnostics.Target_allows_only_0_element_s_but_source_may_have_more, targetArity)
						}
					}
					return TernaryFalse
				}
				sourceTypeArguments := c.getTypeArguments(source)
				targetTypeArguments := c.getTypeArguments(target)
				targetStartCount := c.getStartElementCount(target.target, ElementFlagsNonRest)
				targetEndCount := c.getEndElementCount(target.target, ElementFlagsNonRest)
				canExcludeDiscriminants := excludedProperties != nil
				for sourcePosition := 0; sourcePosition < sourceArity; sourcePosition++ {
					var sourceFlags ElementFlags
					if c.isTupleType(source) {
						sourceFlags = source.target.elementFlags[sourcePosition]
					} else {
						sourceFlags = ElementFlagsRest
					}
					sourcePositionFromEnd := sourceArity - 1 - sourcePosition

					var targetPosition number
					if targetHasRestElement && sourcePosition >= targetStartCount {
						targetPosition = targetArity - 1 - min(sourcePositionFromEnd, targetEndCount)
					} else {
						targetPosition = sourcePosition
					}

					targetFlags := target.target.elementFlags[targetPosition]

					if targetFlags&ElementFlagsVariadic != 0 && sourceFlags&ElementFlagsVariadic == 0 {
						if reportErrors {
							reportError(Diagnostics.Source_provides_no_match_for_variadic_element_at_position_0_in_target, targetPosition)
						}
						return TernaryFalse
					}
					if sourceFlags&ElementFlagsVariadic != 0 && targetFlags&ElementFlagsVariable == 0 {
						if reportErrors {
							reportError(Diagnostics.Variadic_element_at_position_0_in_source_does_not_match_element_at_position_1_in_target, sourcePosition, targetPosition)
						}
						return TernaryFalse
					}
					if targetFlags&ElementFlagsRequired != 0 && sourceFlags&ElementFlagsRequired == 0 {
						if reportErrors {
							reportError(Diagnostics.Source_provides_no_match_for_required_element_at_position_0_in_target, targetPosition)
						}
						return TernaryFalse
					}
					// We can only exclude discriminant properties if we have not yet encountered a variable-length element.
					if canExcludeDiscriminants {
						if sourceFlags&ElementFlagsVariable != 0 || targetFlags&ElementFlagsVariable != 0 {
							canExcludeDiscriminants = false
						}
						if canExcludeDiscriminants && excludedProperties. /* ? */ has(("" + sourcePosition).(string)) {
							continue
						}
					}

					sourceType := c.removeMissingType(sourceTypeArguments[sourcePosition], sourceFlags&targetFlags&ElementFlagsOptional != 0)
					targetType := targetTypeArguments[targetPosition]

					var targetCheckType *Type
					if sourceFlags&ElementFlagsVariadic != 0 && targetFlags&ElementFlagsRest != 0 {
						targetCheckType = c.createArrayType(targetType)
					} else {
						targetCheckType = c.removeMissingType(targetType, targetFlags&ElementFlagsOptional != 0)
					}
					related := isRelatedTo(sourceType, targetCheckType, RecursionFlagsBoth, reportErrors, nil /*headMessage*/, intersectionState)
					if related == 0 {
						if reportErrors && (targetArity > 1 || sourceArity > 1) {
							if targetHasRestElement && sourcePosition >= targetStartCount && sourcePositionFromEnd >= targetEndCount && targetStartCount != sourceArity-targetEndCount-1 {
								reportIncompatibleError(Diagnostics.Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target, targetStartCount, sourceArity-targetEndCount-1, targetPosition)
							} else {
								reportIncompatibleError(Diagnostics.Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target, sourcePosition, targetPosition)
							}
						}
						return TernaryFalse
					}
					result &= related
				}
				return result
			}
			if target.target.combinedFlags&ElementFlagsVariable != 0 {
				return TernaryFalse
			}
		}
		requireOptionalProperties := (relation == c.subtypeRelation || relation == c.strictSubtypeRelation) && !c.isObjectLiteralType(source) && !c.isEmptyArrayLiteralType(source) && !c.isTupleType(source)
		unmatchedProperty := c.getUnmatchedProperty(source, target, requireOptionalProperties, false /*matchDiscriminantProperties*/)
		if unmatchedProperty != nil {
			if reportErrors && shouldReportUnmatchedPropertyError(source, target) {
				reportUnmatchedProperty(source, target, unmatchedProperty, requireOptionalProperties)
			}
			return TernaryFalse
		}
		if c.isObjectLiteralType(target) {
			for _, sourceProp := range excludeProperties(c.getPropertiesOfType(source), excludedProperties) {
				if c.getPropertyOfObjectType(target, sourceProp.EscapedName) == nil {
					sourceType := c.getTypeOfSymbol(sourceProp)
					if sourceType.flags&TypeFlagsUndefined == 0 {
						if reportErrors {
							reportError(Diagnostics.Property_0_does_not_exist_on_type_1, c.symbolToString(sourceProp), c.typeToString(target))
						}
						return TernaryFalse
					}
				}
			}
		}
		// We only call this for union target types when we're attempting to do excess property checking - in those cases, we want to get _all possible props_
		// from the target union, across all members
		properties := c.getPropertiesOfType(target)
		numericNamesOnly := c.isTupleType(source) && c.isTupleType(target)
		for _, targetProp := range excludeProperties(properties, excludedProperties) {
			name := targetProp.EscapedName
			if targetProp.Flags&ast.SymbolFlagsPrototype == 0 && (!numericNamesOnly || isNumericLiteralName(name) || name == "length") && (!optionalsOnly || targetProp.Flags&ast.SymbolFlagsOptional != 0) {
				sourceProp := c.getPropertyOfType(source, name)
				if sourceProp != nil && sourceProp != targetProp {
					related := propertyRelatedTo(source, target, sourceProp, targetProp, c.getNonMissingTypeOfSymbol, reportErrors, intersectionState, relation == c.comparableRelation)
					if related == 0 {
						return TernaryFalse
					}
					result &= related
				}
			}
		}
		return result
	}

	propertiesIdenticalTo := func(source *Type, target *Type, excludedProperties *Set[string]) Ternary {
		if !(source.flags&TypeFlagsObject != 0 && target.flags&TypeFlagsObject != 0) {
			return TernaryFalse
		}
		sourceProperties := excludeProperties(c.getPropertiesOfObjectType(source), excludedProperties)
		targetProperties := excludeProperties(c.getPropertiesOfObjectType(target), excludedProperties)
		if sourceProperties.length != targetProperties.length {
			return TernaryFalse
		}
		result := TernaryTrue
		for _, sourceProp := range sourceProperties {
			targetProp := c.getPropertyOfObjectType(target, sourceProp.EscapedName)
			if targetProp == nil {
				return TernaryFalse
			}
			related := c.compareProperties(sourceProp, targetProp, isRelatedTo)
			if related == 0 {
				return TernaryFalse
			}
			result &= related
		}
		return result
	}

	signaturesRelatedTo := func(source *Type, target *Type, kind SignatureKind, reportErrors bool, intersectionState IntersectionState) Ternary {
		if relation == c.identityRelation {
			return signaturesIdenticalTo(source, target, kind)
		}
		if target == c.anyFunctionType || source == c.anyFunctionType {
			return TernaryTrue
		}

		sourceIsJSConstructor := source.symbol && c.isJSConstructor(source.symbol.ValueDeclaration)
		targetIsJSConstructor := target.symbol && c.isJSConstructor(target.symbol.ValueDeclaration)

		sourceSignatures := c.getSignaturesOfType(source, ifElse((sourceIsJSConstructor && kind == SignatureKindConstruct), SignatureKindCall, kind))
		targetSignatures := c.getSignaturesOfType(target, ifElse((targetIsJSConstructor && kind == SignatureKindConstruct), SignatureKindCall, kind))

		if kind == SignatureKindConstruct && sourceSignatures.length != 0 && targetSignatures.length != 0 {
			sourceIsAbstract := sourceSignatures[0].flags&SignatureFlagsAbstract != 0
			targetIsAbstract := targetSignatures[0].flags&SignatureFlagsAbstract != 0
			if sourceIsAbstract && !targetIsAbstract {
				// An abstract constructor type is not assignable to a non-abstract constructor type
				// as it would otherwise be possible to new an abstract class. Note that the assignability
				// check we perform for an extends clause excludes construct signatures from the target,
				// so this check never proceeds.
				if reportErrors {
					reportError(Diagnostics.Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type)
				}
				return TernaryFalse
			}
			if !constructorVisibilitiesAreCompatible(sourceSignatures[0], targetSignatures[0], reportErrors) {
				return TernaryFalse
			}
		}

		result := TernaryTrue
		var incompatibleReporter /* TODO(TS-TO-GO) inferred type (siga: Signature, sigb: Signature) => (source: Type, target: Type) => void */ any
		if kind == SignatureKindConstruct {
			incompatibleReporter = reportIncompatibleConstructSignatureReturn
		} else {
			incompatibleReporter = reportIncompatibleCallSignatureReturn
		}
		sourceObjectFlags := getObjectFlags(source)
		targetObjectFlags := getObjectFlags(target)
		if sourceObjectFlags&ObjectFlagsInstantiated != 0 && targetObjectFlags&ObjectFlagsInstantiated != 0 && source.symbol == target.symbol || sourceObjectFlags&ObjectFlagsReference != 0 && targetObjectFlags&ObjectFlagsReference != 0 && source.AsTypeReference().target == target.AsTypeReference().target {
			// We have instantiations of the same anonymous type (which typically will be the type of a
			// method). Simply do a pairwise comparison of the signatures in the two signature lists instead
			// of the much more expensive N * M comparison matrix we explore below. We erase type parameters
			// as they are known to always be the same.
			Debug.assertEqual(sourceSignatures.length, targetSignatures.length)
			for i := 0; i < targetSignatures.length; i++ {
				related := signatureRelatedTo(sourceSignatures[i], targetSignatures[i], true /*erase*/, reportErrors, intersectionState, incompatibleReporter(sourceSignatures[i], targetSignatures[i]))
				if related == 0 {
					return TernaryFalse
				}
				result &= related
			}
		} else if sourceSignatures.length == 1 && targetSignatures.length == 1 {
			// For simple functions (functions with a single signature) we only erase type parameters for
			// the comparable relation. Otherwise, if the source signature is generic, we instantiate it
			// in the context of the target signature before checking the relationship. Ideally we'd do
			// this regardless of the number of signatures, but the potential costs are prohibitive due
			// to the quadratic nature of the logic below.
			eraseGenerics := relation == c.comparableRelation
			sourceSignature := core.FirstOrNil(sourceSignatures)
			targetSignature := core.FirstOrNil(targetSignatures)
			result = signatureRelatedTo(sourceSignature, targetSignature, eraseGenerics, reportErrors, intersectionState, incompatibleReporter(sourceSignature, targetSignature))
			if result == 0 && reportErrors && kind == SignatureKindConstruct && (sourceObjectFlags&targetObjectFlags != 0) && (targetSignature.declaration. /* ? */ kind == ast.KindConstructor || sourceSignature.declaration. /* ? */ kind == ast.KindConstructor) {
				constructSignatureToString := func(signature Signature) string {
					return c.signatureToString(signature, nil /*enclosingDeclaration*/, TypeFormatFlagsWriteArrowStyleSignature, kind)
				}
				reportError(Diagnostics.Type_0_is_not_assignable_to_type_1, constructSignatureToString(sourceSignature), constructSignatureToString(targetSignature))
				reportError(Diagnostics.Types_of_construct_signatures_are_incompatible)
				return result
			}
		} else {
		outer:
			for _, t := range targetSignatures {
				saveErrorInfo := captureErrorCalculationState()
				// Only elaborate errors from the first failure
				shouldElaborateErrors := reportErrors
				for _, s := range sourceSignatures {
					related := signatureRelatedTo(s, t, true /*erase*/, shouldElaborateErrors, intersectionState, incompatibleReporter(s, t))
					if related != 0 {
						result &= related
						resetErrorInfo(saveErrorInfo)
						continue outer
					}
					shouldElaborateErrors = false
				}
				if shouldElaborateErrors {
					reportError(Diagnostics.Type_0_provides_no_match_for_the_signature_1, c.typeToString(source), c.signatureToString(t, nil /*enclosingDeclaration*/, nil /*flags*/, kind))
				}
				return TernaryFalse
			}
		}
		return result
	}

	shouldReportUnmatchedPropertyError := func(source *Type, target *Type) bool {
		typeCallSignatures := c.getSignaturesOfStructuredType(source, SignatureKindCall)
		typeConstructSignatures := c.getSignaturesOfStructuredType(source, SignatureKindConstruct)
		typeProperties := c.getPropertiesOfObjectType(source)
		if (typeCallSignatures.length != 0 || typeConstructSignatures.length != 0) && typeProperties.length == 0 {
			if (c.getSignaturesOfType(target, SignatureKindCall).length != 0 && typeCallSignatures.length != 0) || (c.getSignaturesOfType(target, SignatureKindConstruct).length != 0 && typeConstructSignatures.length != 0) {
				return true
				// target has similar signature kinds to source, still focus on the unmatched property
			}
			return false
		}
		return true
	}

	reportIncompatibleCallSignatureReturn := func(siga Signature, sigb Signature) /* TODO(TS-TO-GO) inferred type (source: Type, target: Type) => void */ any {
		if siga.parameters.length == 0 && sigb.parameters.length == 0 {
			return func(source *Type, target *Type) {
				return reportIncompatibleError(Diagnostics.Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1, c.typeToString(source), c.typeToString(target))
			}
		}
		return func(source *Type, target *Type) {
			return reportIncompatibleError(Diagnostics.Call_signature_return_types_0_and_1_are_incompatible, c.typeToString(source), c.typeToString(target))
		}
	}

	reportIncompatibleConstructSignatureReturn := func(siga Signature, sigb Signature) /* TODO(TS-TO-GO) inferred type (source: Type, target: Type) => void */ any {
		if siga.parameters.length == 0 && sigb.parameters.length == 0 {
			return func(source *Type, target *Type) {
				return reportIncompatibleError(Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1, c.typeToString(source), c.typeToString(target))
			}
		}
		return func(source *Type, target *Type) {
			return reportIncompatibleError(Diagnostics.Construct_signature_return_types_0_and_1_are_incompatible, c.typeToString(source), c.typeToString(target))
		}
	}

	/**
	 * See signatureAssignableTo, compareSignaturesIdentical
	 */

	signatureRelatedTo := func(source Signature, target Signature, erase bool, reportErrors bool, intersectionState IntersectionState, incompatibleReporter func(source *Type, target *Type)) Ternary {
		var checkMode number
		switch {
		case relation == c.subtypeRelation:
			checkMode = SignatureCheckModeStrictTopSignature
		case relation == c.strictSubtypeRelation:
			checkMode = SignatureCheckModeStrictTopSignature | SignatureCheckModeStrictArity
		default:
			checkMode = SignatureCheckModeNone
		}
		return c.compareSignaturesRelated(ifElse(erase, c.getErasedSignature(source), source), ifElse(erase, c.getErasedSignature(target), target), checkMode, reportErrors, reportError, incompatibleReporter, isRelatedToWorker, c.reportUnreliableMapper)
		isRelatedToWorker := func(source *Type, target *Type, reportErrors bool) Ternary {
			return isRelatedTo(source, target, RecursionFlagsBoth, reportErrors, nil /*headMessage*/, intersectionState)
		}

	}

	signaturesIdenticalTo := func(source *Type, target *Type, kind SignatureKind) Ternary {
		sourceSignatures := c.getSignaturesOfType(source, kind)
		targetSignatures := c.getSignaturesOfType(target, kind)
		if sourceSignatures.length != targetSignatures.length {
			return TernaryFalse
		}
		result := TernaryTrue
		for i := 0; i < sourceSignatures.length; i++ {
			related := c.compareSignaturesIdentical(sourceSignatures[i], targetSignatures[i], false /*partialMatch*/, false /*ignoreThisTypes*/, false /*ignoreReturnTypes*/, isRelatedTo)
			if related == 0 {
				return TernaryFalse
			}
			result &= related
		}
		return result
	}

	membersRelatedToIndexInfo := func(source *Type, targetInfo IndexInfo, reportErrors bool, intersectionState IntersectionState) Ternary {
		result := TernaryTrue
		keyType := targetInfo.keyType
		var props []*ast.Symbol
		if source.flags&TypeFlagsIntersection != 0 {
			props = c.getPropertiesOfUnionOrIntersectionType(source.AsIntersectionType())
		} else {
			props = c.getPropertiesOfObjectType(source)
		}
		for _, prop := range props {
			// Skip over ignored JSX and symbol-named members
			if c.isIgnoredJsxProperty(source, prop) {
				continue
			}
			if c.isApplicableIndexType(c.getLiteralTypeFromProperty(prop, TypeFlagsStringOrNumberLiteralOrUnique), keyType) {
				propType := c.getNonMissingTypeOfSymbol(prop)
				var t *Type
				if c.exactOptionalPropertyTypes || propType.flags&TypeFlagsUndefined != 0 || keyType == c.numberType || prop.Flags&ast.SymbolFlagsOptional == 0 {
					t = propType
				} else {
					t = c.getTypeWithFacts(propType, TypeFactsNEUndefined)
				}
				related := isRelatedTo(t, targetInfo.type_, RecursionFlagsBoth, reportErrors, nil /*headMessage*/, intersectionState)
				if related == 0 {
					if reportErrors {
						reportError(Diagnostics.Property_0_is_incompatible_with_index_signature, c.symbolToString(prop))
					}
					return TernaryFalse
				}
				result &= related
			}
		}
		for _, info := range c.getIndexInfosOfType(source) {
			if c.isApplicableIndexType(info.keyType, keyType) {
				related := indexInfoRelatedTo(info, targetInfo, reportErrors, intersectionState)
				if related == 0 {
					return TernaryFalse
				}
				result &= related
			}
		}
		return result
	}

	indexInfoRelatedTo := func(sourceInfo IndexInfo, targetInfo IndexInfo, reportErrors bool, intersectionState IntersectionState) Ternary {
		related := isRelatedTo(sourceInfo.type_, targetInfo.type_, RecursionFlagsBoth, reportErrors, nil /*headMessage*/, intersectionState)
		if related == 0 && reportErrors {
			if sourceInfo.keyType == targetInfo.keyType {
				reportError(Diagnostics._0_index_signatures_are_incompatible, c.typeToString(sourceInfo.keyType))
			} else {
				reportError(Diagnostics._0_and_1_index_signatures_are_incompatible, c.typeToString(sourceInfo.keyType), c.typeToString(targetInfo.keyType))
			}
		}
		return related
	}

	indexSignaturesRelatedTo := func(source *Type, target *Type, sourceIsPrimitive bool, reportErrors bool, intersectionState IntersectionState) Ternary {
		if relation == c.identityRelation {
			return indexSignaturesIdenticalTo(source, target)
		}
		indexInfos := c.getIndexInfosOfType(target)
		targetHasStringIndex := core.Some(indexInfos, func(info IndexInfo) bool {
			return info.keyType == c.stringType
		})
		result := TernaryTrue
		for _, targetInfo := range indexInfos {
			var related Ternary
			switch {
			case relation != c.strictSubtypeRelation && !sourceIsPrimitive && targetHasStringIndex && targetInfo.type_.flags&TypeFlagsAny != 0:
				related = TernaryTrue
			case c.isGenericMappedType(source) && targetHasStringIndex:
				related = isRelatedTo(c.getTemplateTypeFromMappedType(source), targetInfo.type_, RecursionFlagsBoth, reportErrors)
			default:
				related = typeRelatedToIndexInfo(source, targetInfo, reportErrors, intersectionState)
			}
			if related == 0 {
				return TernaryFalse
			}
			result &= related
		}
		return result
	}

	typeRelatedToIndexInfo := func(source *Type, targetInfo IndexInfo, reportErrors bool, intersectionState IntersectionState) Ternary {
		sourceInfo := c.getApplicableIndexInfo(source, targetInfo.keyType)
		if sourceInfo != nil {
			return indexInfoRelatedTo(sourceInfo, targetInfo, reportErrors, intersectionState)
		}
		// Intersection constituents are never considered to have an inferred index signature. Also, in the strict subtype relation,
		// only fresh object literals are considered to have inferred index signatures. This ensures { [x: string]: xxx } <: {} but
		// not vice-versa. Without this rule, those types would be mutual strict subtypes.
		if intersectionState&IntersectionStateSource == 0 && (relation != c.strictSubtypeRelation || getObjectFlags(source)&ObjectFlagsFreshLiteral != 0) && c.isObjectTypeWithInferableIndex(source) {
			return membersRelatedToIndexInfo(source, targetInfo, reportErrors, intersectionState)
		}
		if reportErrors {
			reportError(Diagnostics.Index_signature_for_type_0_is_missing_in_type_1, c.typeToString(targetInfo.keyType), c.typeToString(source))
		}
		return TernaryFalse
	}

	indexSignaturesIdenticalTo := func(source *Type, target *Type) Ternary {
		sourceInfos := c.getIndexInfosOfType(source)
		targetInfos := c.getIndexInfosOfType(target)
		if sourceInfos.length != targetInfos.length {
			return TernaryFalse
		}
		for _, targetInfo := range targetInfos {
			sourceInfo := c.getIndexInfoOfType(source, targetInfo.keyType)
			if !(sourceInfo != nil && isRelatedTo(sourceInfo.type_, targetInfo.type_, RecursionFlagsBoth) != 0 && sourceInfo.isReadonly == targetInfo.isReadonly) {
				return TernaryFalse
			}
		}
		return TernaryTrue
	}

	constructorVisibilitiesAreCompatible := func(sourceSignature Signature, targetSignature Signature, reportErrors bool) bool {
		if sourceSignature.declaration == nil || targetSignature.declaration == nil {
			return true
		}

		sourceAccessibility := getSelectedEffectiveModifierFlags(sourceSignature.declaration, ast.ModifierFlagsNonPublicAccessibilityModifier)
		targetAccessibility := getSelectedEffectiveModifierFlags(targetSignature.declaration, ast.ModifierFlagsNonPublicAccessibilityModifier)

		// A public, protected and private signature is assignable to a private signature.
		if targetAccessibility == ast.ModifierFlagsPrivate {
			return true
		}

		// A public and protected signature is assignable to a protected signature.
		if targetAccessibility == ast.ModifierFlagsProtected && sourceAccessibility != ast.ModifierFlagsPrivate {
			return true
		}

		// Only a public signature is assignable to public signature.
		if targetAccessibility != ast.ModifierFlagsProtected && sourceAccessibility == 0 {
			return true
		}

		if reportErrors {
			reportError(Diagnostics.Cannot_assign_a_0_constructor_type_to_a_1_constructor_type, c.visibilityToString(sourceAccessibility), c.visibilityToString(targetAccessibility))
		}

		return false
	}

}

func (c *Checker) typeCouldHaveTopLevelSingletonTypes(t *Type) bool {
	// Okay, yes, 'boolean' is a union of 'true | false', but that's not useful
	// in error reporting scenarios. If you need to use this function but that detail matters,
	// feel free to add a flag.
	if t.flags&TypeFlagsBoolean != 0 {
		return false
	}

	if t.flags&TypeFlagsUnionOrIntersection != 0 {
		return forEach(t.AsIntersectionType().types, c.typeCouldHaveTopLevelSingletonTypes)
	}

	if t.flags&TypeFlagsInstantiable != 0 {
		constraint := c.getConstraintOfType(t)
		if constraint != nil && constraint != t {
			return c.typeCouldHaveTopLevelSingletonTypes(constraint)
		}
	}

	return c.isUnitType(t) || t.flags&TypeFlagsTemplateLiteral != 0 || t.flags&TypeFlagsStringMapping != 0
}

func (c *Checker) getExactOptionalUnassignableProperties(source *Type, target *Type) []*ast.Symbol {
	if c.isTupleType(source) && c.isTupleType(target) {
		return emptyArray
	}
	return c.getPropertiesOfType(target).filter(func(targetProp *ast.Symbol) bool {
		return c.isExactOptionalPropertyMismatch(c.getTypeOfPropertyOfType(source, targetProp.EscapedName), c.getTypeOfSymbol(targetProp))
	})
}

func (c *Checker) isExactOptionalPropertyMismatch(source *Type, target *Type) bool {
	return source != nil && target != nil && c.maybeTypeOfKind(source, TypeFlagsUndefined) && c.containsMissingType(target)
}

func (c *Checker) getExactOptionalProperties(t *Type) []*ast.Symbol {
	return c.getPropertiesOfType(t).filter(func(targetProp *ast.Symbol) bool {
		return c.containsMissingType(c.getTypeOfSymbol(targetProp))
	})
}

func (c *Checker) getBestMatchingType(source *Type, target UnionOrIntersectionType, isRelatedTo /* TODO(TS-TO-GO) inferred type (source: Type, target: Type) => Ternary */ any /*  = compareTypesAssignable */) *Type {
	return c.findMatchingDiscriminantType(source, target, isRelatedTo) || c.findMatchingTypeReferenceOrTypeAliasReference(source, target) || c.findBestTypeForObjectLiteral(source, target) || c.findBestTypeForInvokable(source, target) || c.findMostOverlappyType(source, target)
}

func (c *Checker) discriminateTypeByDiscriminableItems(target UnionType, discriminators [] /* TODO(TS-TO-GO) TypeNode TupleType: [() => Type, __String] */ any, related func(source *Type, target *Type) Union[bool, Ternary]) *Type {
	types := target.types
	var include []Ternary = types.map_(func(t *Type) /* TODO(TS-TO-GO) inferred type Ternary.False | Ternary.True */ any {
		if t.flags&TypeFlagsPrimitive != 0 {
			return TernaryFalse
		} else {
			return TernaryTrue
		}
	})
	for _, TODO_IDENTIFIER := range discriminators {
		// If the remaining target types include at least one with a matching discriminant, eliminate those that
		// have non-matching discriminants. This ensures that we ignore erroneous discriminators and gradually
		// refine the target set without eliminating every constituent (which would lead to `never`).
		matched := false
		for i := 0; i < types.length; i++ {
			if include[i] != 0 {
				targetType := c.getTypeOfPropertyOrIndexSignatureOfType(types[i], propertyName)
				if targetType != nil && c.someType(getDiscriminatingType(), func(t *Type) bool {
					return related(t, targetType)
				}) {
					matched = true
				} else {
					include[i] = TernaryMaybe
				}
			}
		}
		// Turn each Ternary.Maybe into Ternary.False if there was a match. Otherwise, revert to Ternary.True.
		for i := 0; i < types.length; i++ {
			if include[i] == TernaryMaybe {
				if matched {
					include[i] = TernaryFalse
				} else {
					include[i] = TernaryTrue
				}
			}
		}
	}
	var filtered *Type
	if contains(include, TernaryFalse) {
		filtered = c.getUnionType(types.filter(func(_ *Type, i number) Ternary {
			return include[i]
		}), UnionReductionNone)
	} else {
		filtered = target
	}
	if filtered.flags&TypeFlagsNever != 0 {
		return target
	} else {
		return filtered
	}
}

/**
 * A type is 'weak' if it is an object type with at least one optional property
 * and no required properties, call/construct signatures or index signatures
 */

func (c *Checker) isWeakType(t *Type) bool {
	if t.flags&TypeFlagsObject != 0 {
		resolved := c.resolveStructuredTypeMembers(t.AsObjectType())
		return resolved.callSignatures.length == 0 && resolved.constructSignatures.length == 0 && resolved.indexInfos.length == 0 && resolved.properties.length > 0 && core.Every(resolved.properties, func(p *ast.Symbol) bool {
			return p.Flags&ast.SymbolFlagsOptional != 0
		})
	}
	if t.flags&TypeFlagsSubstitution != 0 {
		return c.isWeakType(t.AsSubstitutionType().baseType)
	}
	if t.flags&TypeFlagsIntersection != 0 {
		return core.Every(t.AsIntersectionType().types, c.isWeakType)
	}
	return false
}

func (c *Checker) hasCommonProperties(source *Type, target *Type, isComparingJsxAttributes bool) bool {
	for _, prop := range c.getPropertiesOfType(source) {
		if c.isKnownProperty(target, prop.EscapedName, isComparingJsxAttributes) {
			return true
		}
	}
	return false
}

func (c *Checker) getVariances(t GenericType) []VarianceFlags {
	// Arrays and tuples are known to be covariant, no need to spend time computing this.
	if t == c.globalArrayType || t == c.globalReadonlyArrayType || t.objectFlags&ObjectFlagsTuple != 0 {
		return c.arrayVariances
	} else {
		return c.getVariancesWorker(t.symbol, t.typeParameters)
	}
}

func (c *Checker) getAliasVariances(symbol *ast.Symbol) []VarianceFlags {
	return c.getVariancesWorker(symbol, c.getSymbolLinks(symbol).typeParameters)
}

// Return an array containing the variance of each type parameter. The variance is effectively
// a digest of the type comparisons that occur for each type argument when instantiations of the
// generic type are structurally compared. We infer the variance information by comparing
// instantiations of the generic type for type arguments with known relations. The function
// returns the emptyArray singleton when invoked recursively for the given generic type.
func (c *Checker) getVariancesWorker(symbol *ast.Symbol, typeParameters []TypeParameter /*  = emptyArray */) []VarianceFlags {
	links := c.getSymbolLinks(symbol)
	if links.variances == nil {
		tracing. /* ? */ push(tracing.Phase.CheckTypes, "getVariancesWorker", &Args{
			arity: typeParameters.length,
			id:    c.getTypeId(c.getDeclaredTypeOfSymbol(symbol)),
		})
		oldVarianceComputation := c.inVarianceComputation
		saveResolutionStart := c.resolutionStart
		if !c.inVarianceComputation {
			c.inVarianceComputation = true
			c.resolutionStart = c.resolutionTargets.length
		}
		links.variances = emptyArray
		variances := []never{}
		for _, tp := range typeParameters {
			modifiers := c.getTypeParameterModifiers(tp)
			var variance *VarianceFlags
			switch {
			case modifiers&ast.ModifierFlagsOut != 0:
				if modifiers&ast.ModifierFlagsIn != 0 {
					variance = VarianceFlagsInvariant
				} else {
					variance = VarianceFlagsCovariant
				}
			case modifiers&ast.ModifierFlagsIn != 0:
				variance = VarianceFlagsContravariant
			default:
				variance = nil
			}
			if variance == nil {
				unmeasurable := false
				unreliable := false
				oldHandler := c.outofbandVarianceMarkerHandler
				c.outofbandVarianceMarkerHandler = func(onlyUnreliable bool) bool {
					if onlyUnreliable {
						return /* TODO(TS-TO-GO) EqualsToken BinaryExpression: unreliable = true */ TODO
					} else {
						return /* TODO(TS-TO-GO) EqualsToken BinaryExpression: unmeasurable = true */ TODO
					}
				}
				// We first compare instantiations where the type parameter is replaced with
				// marker types that have a known subtype relationship. From this we can infer
				// invariance, covariance, contravariance or bivariance.
				typeWithSuper := c.createMarkerType(symbol, tp, c.markerSuperType)
				typeWithSub := c.createMarkerType(symbol, tp, c.markerSubType)
				variance = (ifElse(c.isTypeAssignableTo(typeWithSub, typeWithSuper), VarianceFlagsCovariant, 0)) | (ifElse(c.isTypeAssignableTo(typeWithSuper, typeWithSub), VarianceFlagsContravariant, 0))
				// If the instantiations appear to be related bivariantly it may be because the
				// type parameter is independent (i.e. it isn't witnessed anywhere in the generic
				// type). To determine this we compare instantiations where the type parameter is
				// replaced with marker types that are known to be unrelated.
				if variance == VarianceFlagsBivariant && c.isTypeAssignableTo(c.createMarkerType(symbol, tp, c.markerOtherType), typeWithSuper) {
					variance = VarianceFlagsIndependent
				}
				c.outofbandVarianceMarkerHandler = oldHandler
				if unmeasurable || unreliable {
					if unmeasurable {
						variance |= VarianceFlagsUnmeasurable
					}
					if unreliable {
						variance |= VarianceFlagsUnreliable
					}
				}
			}
			variances.push(variance)
		}
		if !oldVarianceComputation {
			c.inVarianceComputation = false
			c.resolutionStart = saveResolutionStart
		}
		links.variances = variances
		tracing. /* ? */ pop(&Args{
			variances: variances.map_(Debug.formatVariance),
		})
	}
	return links.variances
}

func (c *Checker) createMarkerType(symbol *ast.Symbol, source TypeParameter, target *Type) *Type {
	mapper := c.makeUnaryTypeMapper(source, target)
	t := c.getDeclaredTypeOfSymbol(symbol)
	if c.isErrorType(t) {
		return t
	}
	var result *Type
	if symbol.Flags&ast.SymbolFlagsTypeAlias != 0 {
		result = c.getTypeAliasInstantiation(symbol, c.instantiateTypes(c.getSymbolLinks(symbol).typeParameters, mapper))
	} else {
		result = c.createTypeReference(t.AsGenericType(), c.instantiateTypes(t.AsGenericType().typeParameters, mapper))
	}
	c.markerTypes.add(c.getTypeId(result))
	return result
}

func (c *Checker) isMarkerType(t *Type) bool {
	return c.markerTypes.has(c.getTypeId(t))
}

func (c *Checker) getTypeParameterModifiers(tp TypeParameter) ModifierFlags {
	return reduceLeft(tp.symbol. /* ? */ Declarations, func(modifiers number, d Declaration) number {
		return modifiers | getEffectiveModifierFlags(d)
	}, ast.ModifierFlagsNone) & (ast.ModifierFlagsIn | ast.ModifierFlagsOut | ast.ModifierFlagsConst)
}

// Return true if the given type reference has a 'void' type argument for a covariant type parameter.
// See comment at call in recursiveTypeRelatedTo for when this case matters.
func (c *Checker) hasCovariantVoidArgument(typeArguments []*Type, variances []VarianceFlags) bool {
	for i := 0; i < variances.length; i++ {
		if (variances[i]&VarianceFlagsVarianceMask) == VarianceFlagsCovariant && typeArguments[i].flags&TypeFlagsVoid != 0 {
			return true
		}
	}
	return false
}

func (c *Checker) isUnconstrainedTypeParameter(t *Type) /* TODO(TS-TO-GO) inferred type boolean | 0 */ any {
	return t.flags&TypeFlagsTypeParameter && c.getConstraintOfTypeParameter(t.AsTypeParameter()) == nil
}

func (c *Checker) isNonDeferredTypeReference(t *Type) bool {
	return getObjectFlags(t)&ObjectFlagsReference != 0 && t.AsTypeReference().node == nil
}

func (c *Checker) isTypeReferenceWithGenericArguments(t *Type) bool {
	return c.isNonDeferredTypeReference(t) && core.Some(c.getTypeArguments(t), func(t *Type) bool {
		return t.flags&TypeFlagsTypeParameter != 0 || c.isTypeReferenceWithGenericArguments(t)
	})
}

func (c *Checker) getGenericTypeReferenceRelationKey(source TypeReference, target TypeReference, postFix string, ignoreConstraints bool) string {
	var typeParameters []*Type = []never{}
	constraintMarker := ""
	sourceId := getTypeReferenceId(source, 0)
	targetId := getTypeReferenceId(target, 0)
	return __TEMPLATE__(constraintMarker, sourceId, ",", targetId, postFix)
	// getTypeReferenceId(A<T, number, U>) returns "111=0-12=1"
	// where A.id=111 and number.id=12
	getTypeReferenceId := func(type_ TypeReference, depth number /*  = 0 */) string {
		result := "" + type_.target.id
		for _, t := range c.getTypeArguments(type_) {
			if t.flags&TypeFlagsTypeParameter != 0 {
				if ignoreConstraints || c.isUnconstrainedTypeParameter(t) {
					index := typeParameters.indexOf(t)
					if index < 0 {
						index = typeParameters.length
						typeParameters.push(t)
					}
					result += "=" + index
					continue
				}
				// We mark type references that reference constrained type parameters such that we know to obtain
				// and look for a "broadest equivalent key" in the cache.
				constraintMarker = "*"
			} else if depth < 4 && c.isTypeReferenceWithGenericArguments(t) {
				result += "<" + getTypeReferenceId(t.AsTypeReference(), depth+1) + ">"
				continue
			}
			result += "-" + t.id
		}
		return result
	}

}

/**
 * To improve caching, the relation key for two generic types uses the target's id plus ids of the type parameters.
 * For other cases, the types ids are used.
 */

func (c *Checker) getRelationKey(source *Type, target *Type, intersectionState IntersectionState, relation Map[string, RelationComparisonResult], ignoreConstraints bool) string {
	if relation == c.identityRelation && source.id > target.id {
		temp := source
		source = target
		target = temp
	}
	var postFix string
	if intersectionState != 0 {
		postFix = ":" + intersectionState
	} else {
		postFix = ""
	}
	if c.isTypeReferenceWithGenericArguments(source) && c.isTypeReferenceWithGenericArguments(target) {
		return c.getGenericTypeReferenceRelationKey(source.AsTypeReference(), target.AsTypeReference(), postFix, ignoreConstraints)
	} else {
		return __TEMPLATE__(source.id, ",", target.id, postFix)
	}
}

// Invoke the callback for each underlying property symbol of the given symbol and return the first
// value that isn't undefined.
func (c *Checker) forEachProperty(prop *ast.Symbol, callback func(p *ast.Symbol) T) *T {
	if getCheckFlags(prop)&ast.CheckFlagsSynthetic != 0 {
		// NOTE: cast to TransientSymbol should be safe because only TransientSymbols can have CheckFlags.Synthetic
		for _, t := range (prop.(TransientSymbol)).Links.containingType.types {
			p := c.getPropertyOfType(t, prop.EscapedName)
			result := p && c.forEachProperty(p, callback)
			if result != nil {
				return result
			}
		}
		return nil
	}
	return callback(prop)
}

// Return the declaring class type of a property or undefined if property not declared in class
func (c *Checker) getDeclaringClass(prop *ast.Symbol) *InterfaceType {
	if prop.Parent != nil && prop.Parent.Flags&ast.SymbolFlagsClass != 0 {
		return c.getDeclaredTypeOfSymbol(c.getParentOfSymbol(prop)).AsInterfaceType()
	} else {
		return nil
	}
}

// Return the inherited type of the given property or undefined if property doesn't exist in a base class.
func (c *Checker) getTypeOfPropertyInBaseClass(property *ast.Symbol) *Type {
	classType := c.getDeclaringClass(property)
	baseClassType := classType && c.getBaseTypes(classType)[0]
	return baseClassType && c.getTypeOfPropertyOfType(baseClassType, property.EscapedName)
}

// Return true if some underlying source property is declared in a class that derives
// from the given base class.
func (c *Checker) isPropertyInClassDerivedFrom(prop *ast.Symbol, baseClass *Type) *bool {
	return c.forEachProperty(prop, func(sp *ast.Symbol) bool {
		sourceClass := c.getDeclaringClass(sp)
		if sourceClass != nil {
			return c.hasBaseType(sourceClass, baseClass)
		} else {
			return false
		}
	})
}

// Return true if source property is a valid override of protected parts of target property.
func (c *Checker) isValidOverrideOf(sourceProp *ast.Symbol, targetProp *ast.Symbol) bool {
	return !c.forEachProperty(targetProp, func(tp *ast.Symbol) bool {
		if getDeclarationModifierFlagsFromSymbol(tp)&ast.ModifierFlagsProtected != 0 {
			return !c.isPropertyInClassDerivedFrom(sourceProp, c.getDeclaringClass(tp))
		} else {
			return false
		}
	})
}

// Return true if the given class derives from each of the declaring classes of the protected
// constituents of the given property.
func (c *Checker) isClassDerivedFromDeclaringClasses(checkClass T, prop *ast.Symbol, writing bool) *T {
	if c.forEachProperty(prop, func(p *ast.Symbol) bool {
		if getDeclarationModifierFlagsFromSymbol(p, writing)&ast.ModifierFlagsProtected != 0 {
			return !c.hasBaseType(checkClass, c.getDeclaringClass(p))
		} else {
			return false
		}
	}) {
		return nil
	} else {
		return checkClass
	}
}

// Return true if the given type is deeply nested. We consider this to be the case when the given stack contains
// maxDepth or more occurrences of types with the same recursion identity as the given type. The recursion identity
// provides a shared identity for type instantiations that repeat in some (possibly infinite) pattern. For example,
// in `type Deep<T> = { next: Deep<Deep<T>> }`, repeatedly referencing the `next` property leads to an infinite
// sequence of ever deeper instantiations with the same recursion identity (in this case the symbol associated with
// the object type literal).
// A homomorphic mapped type is considered deeply nested if its target type is deeply nested, and an intersection is
// considered deeply nested if any constituent of the intersection is deeply nested.
// It is possible, though highly unlikely, for the deeply nested check to be true in a situation where a chain of
// instantiations is not infinitely expanding. Effectively, we will generate a false positive when two types are
// structurally equal to at least maxDepth levels, but unequal at some level beyond that.
func (c *Checker) isDeeplyNestedType(t *Type, stack []*Type, depth number, maxDepth number /*  = 3 */) bool {
	if depth >= maxDepth {
		if (getObjectFlags(t) & ObjectFlagsInstantiatedMapped) == ObjectFlagsInstantiatedMapped {
			t = c.getMappedTargetWithSymbol(t)
		}
		if t.flags&TypeFlagsIntersection != 0 {
			return core.Some(t.AsIntersectionType().types, func(t *Type) bool {
				return c.isDeeplyNestedType(t, stack, depth, maxDepth)
			})
		}
		identity := c.getRecursionIdentity(t)
		count := 0
		lastTypeId := 0
		for i := 0; i < depth; i++ {
			t := stack[i]
			if c.hasMatchingRecursionIdentity(t, identity) {
				// We only count occurrences with a higher type id than the previous occurrence, since higher
				// type ids are an indicator of newer instantiations caused by recursion.
				if t.id >= lastTypeId {
					count++
					if count >= maxDepth {
						return true
					}
				}
				lastTypeId = t.id
			}
		}
	}
	return false
}

// Unwrap nested homomorphic mapped types and return the deepest target type that has a symbol. This better
// preserves unique type identities for mapped types applied to explicitly written object literals. For example
// in `Mapped<{ x: Mapped<{ x: Mapped<{ x: string }>}>}>`, each of the mapped type applications will have a
// unique recursion identity (that of their target object type literal) and thus avoid appearing deeply nested.
func (c *Checker) getMappedTargetWithSymbol(t *Type) *Type {
	var target TODO
	for (getObjectFlags(t)&ObjectFlagsInstantiatedMapped) == ObjectFlagsInstantiatedMapped && ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: target = getModifiersTypeFromMappedType(type as MappedType) */ TODO) && (target.symbol || target.flags&TypeFlagsIntersection != 0 && core.Some(target.AsIntersectionType().types, func(t *Type) true {
		return t.symbol
	})) {
		t = target
	}
	return t
}

func (c *Checker) hasMatchingRecursionIdentity(t *Type, identity any) bool {
	if (getObjectFlags(t) & ObjectFlagsInstantiatedMapped) == ObjectFlagsInstantiatedMapped {
		t = c.getMappedTargetWithSymbol(t)
	}
	if t.flags&TypeFlagsIntersection != 0 {
		return core.Some(t.AsIntersectionType().types, func(t *Type) bool {
			return c.hasMatchingRecursionIdentity(t, identity)
		})
	}
	return c.getRecursionIdentity(t) == identity
}

// The recursion identity of a type is an object identity that is shared among multiple instantiations of the type.
// We track recursion identities in order to identify deeply nested and possibly infinite type instantiations with
// the same origin. For example, when type parameters are in scope in an object type such as { x: T }, all
// instantiations of that type have the same recursion identity. The default recursion identity is the object
// identity of the type, meaning that every type is unique. Generally, types with constituents that could circularly
// reference the type have a recursion identity that differs from the object identity.
func (c *Checker) getRecursionIdentity(t *Type) any {
	// Object and array literals are known not to contain recursive references and don't need a recursion identity.
	if t.flags&TypeFlagsObject != 0 && !c.isObjectOrArrayLiteralType(t) {
		if getObjectFlags(t)&ObjectFlagsReference != 0 && t.AsTypeReference().node != nil {
			// Deferred type references are tracked through their associated AST node. This gives us finer
			// granularity than using their associated target because each manifest type reference has a
			// unique AST node.
			return t.AsTypeReference().node
		}
		if t.symbol && !(getObjectFlags(t)&ObjectFlagsAnonymous != 0 && t.symbol.Flags&ast.SymbolFlagsClass != 0) {
			// We track object types that have a symbol by that symbol (representing the origin of the type), but
			// exclude the static side of a class since it shares its symbol with the instance side.
			return t.symbol
		}
		if c.isTupleType(t) {
			return t.target
		}
	}
	if t.flags&TypeFlagsTypeParameter != 0 {
		// We use the symbol of the type parameter such that all "fresh" instantiations of that type parameter
		// have the same recursion identity.
		return t.symbol
	}
	if t.flags&TypeFlagsIndexedAccess != 0 {
		// Identity is the leftmost object type in a chain of indexed accesses, eg, in A[P1][P2][P3] it is A.
		for ok := true; ok; ok = t.flags&TypeFlagsIndexedAccess != 0 { // do-while loop
			t = t.AsIndexedAccessType().objectType
		}
		return t
	}
	if t.flags&TypeFlagsConditional != 0 {
		// The root object represents the origin of the conditional type
		return t.AsConditionalType().root
	}
	return t
}

func (c *Checker) isPropertyIdenticalTo(sourceProp *ast.Symbol, targetProp *ast.Symbol) bool {
	return c.compareProperties(sourceProp, targetProp, c.compareTypesIdentical) != TernaryFalse
}

func (c *Checker) compareProperties(sourceProp *ast.Symbol, targetProp *ast.Symbol, compareTypes func(source *Type, target *Type) Ternary) Ternary {
	// Two members are considered identical when
	// - they are public properties with identical names, optionality, and types,
	// - they are private or protected properties originating in the same declaration and having identical types
	if sourceProp == targetProp {
		return TernaryTrue
	}
	sourcePropAccessibility := getDeclarationModifierFlagsFromSymbol(sourceProp) & ast.ModifierFlagsNonPublicAccessibilityModifier
	targetPropAccessibility := getDeclarationModifierFlagsFromSymbol(targetProp) & ast.ModifierFlagsNonPublicAccessibilityModifier
	if sourcePropAccessibility != targetPropAccessibility {
		return TernaryFalse
	}
	if sourcePropAccessibility != 0 {
		if c.getTargetSymbol(sourceProp) != c.getTargetSymbol(targetProp) {
			return TernaryFalse
		}
	} else {
		if (sourceProp.Flags & ast.SymbolFlagsOptional) != (targetProp.Flags & ast.SymbolFlagsOptional) {
			return TernaryFalse
		}
	}
	if c.isReadonlySymbol(sourceProp) != c.isReadonlySymbol(targetProp) {
		return TernaryFalse
	}
	return compareTypes(c.getTypeOfSymbol(sourceProp), c.getTypeOfSymbol(targetProp))
}

func (c *Checker) isMatchingSignature(source Signature, target Signature, partialMatch bool) bool {
	sourceParameterCount := c.getParameterCount(source)
	targetParameterCount := c.getParameterCount(target)
	sourceMinArgumentCount := c.getMinArgumentCount(source)
	targetMinArgumentCount := c.getMinArgumentCount(target)
	sourceHasRestParameter := c.hasEffectiveRestParameter(source)
	targetHasRestParameter := c.hasEffectiveRestParameter(target)
	// A source signature matches a target signature if the two signatures have the same number of required,
	// optional, and rest parameters.
	if sourceParameterCount == targetParameterCount && sourceMinArgumentCount == targetMinArgumentCount && sourceHasRestParameter == targetHasRestParameter {
		return true
	}
	// A source signature partially matches a target signature if the target signature has no fewer required
	// parameters
	if partialMatch && sourceMinArgumentCount <= targetMinArgumentCount {
		return true
	}
	return false
}

/**
 * See signatureRelatedTo, compareSignaturesIdentical
 */

func (c *Checker) compareSignaturesIdentical(source Signature, target Signature, partialMatch bool, ignoreThisTypes bool, ignoreReturnTypes bool, compareTypes func(s *Type, t *Type) Ternary) Ternary {
	// TODO (drosen): De-duplicate code between related functions.
	if source == target {
		return TernaryTrue
	}
	if !(c.isMatchingSignature(source, target, partialMatch)) {
		return TernaryFalse
	}
	// Check that the two signatures have the same number of type parameters.
	if length(source.typeParameters) != length(target.typeParameters) {
		return TernaryFalse
	}
	// Check that type parameter constraints and defaults match. If they do, instantiate the source
	// signature with the type parameters of the target signature and continue the comparison.
	if target.typeParameters != nil {
		mapper := c.createTypeMapper(source.typeParameters, target.typeParameters)
		for i := 0; i < target.typeParameters.length; i++ {
			s := source.typeParameters[i]
			t := target.typeParameters[i]
			if !(s == t || compareTypes(c.instantiateType(c.getConstraintFromTypeParameter(s), mapper) || c.unknownType, c.getConstraintFromTypeParameter(t) || c.unknownType) != 0 && compareTypes(c.instantiateType(c.getDefaultFromTypeParameter(s), mapper) || c.unknownType, c.getDefaultFromTypeParameter(t) || c.unknownType) != 0) {
				return TernaryFalse
			}
		}
		source = c.instantiateSignature(source, mapper, true /*eraseTypeParameters*/)
	}
	result := TernaryTrue
	if !ignoreThisTypes {
		sourceThisType := c.getThisTypeOfSignature(source)
		if sourceThisType != nil {
			targetThisType := c.getThisTypeOfSignature(target)
			if targetThisType != nil {
				related := compareTypes(sourceThisType, targetThisType)
				if related == 0 {
					return TernaryFalse
				}
				result &= related
			}
		}
	}
	targetLen := c.getParameterCount(target)
	for i := 0; i < targetLen; i++ {
		s := c.getTypeAtPosition(source, i)
		t := c.getTypeAtPosition(target, i)
		related := compareTypes(t, s)
		if related == 0 {
			return TernaryFalse
		}
		result &= related
	}
	if !ignoreReturnTypes {
		sourceTypePredicate := c.getTypePredicateOfSignature(source)
		targetTypePredicate := c.getTypePredicateOfSignature(target)
		if sourceTypePredicate != nil || targetTypePredicate != nil {
			result &= c.compareTypePredicatesIdentical(sourceTypePredicate, targetTypePredicate, compareTypes)
		} else {
			result &= compareTypes(c.getReturnTypeOfSignature(source), c.getReturnTypeOfSignature(target))
		}
	}
	return result
}

func (c *Checker) compareTypePredicatesIdentical(source *TypePredicate, target *TypePredicate, compareTypes func(s *Type, t *Type) Ternary) Ternary {
	switch {
	case !(source != nil && target != nil && c.typePredicateKindsMatch(source, target)):
		return TernaryFalse
	case source.type_ == target.type_:
		return TernaryTrue
	case source.type_ != nil && target.type_ != nil:
		return compareTypes(source.type_, target.type_)
	default:
		return TernaryFalse
	}
}

func (c *Checker) literalTypesWithSameBaseType(types []*Type) bool {
	var commonBaseType *Type
	for _, t := range types {
		if t.flags&TypeFlagsNever == 0 {
			baseType := c.getBaseTypeOfLiteralType(t)
			if commonBaseType == nil {
				commonBaseType = baseType
			}
			if baseType == t || baseType != commonBaseType {
				return false
			}
		}
	}
	return true
}

func (c *Checker) getCombinedTypeFlags(types []*Type) TypeFlags {
	return reduceLeft(types, func(flags number, t *Type) number {
		return flags | (ifElse(t.flags&TypeFlagsUnion != 0, c.getCombinedTypeFlags(t.AsUnionType().types), t.flags))
	}, 0.(TypeFlags))
}

func (c *Checker) getCommonSupertype(types []*Type) *Type {
	if types.length == 1 {
		return types[0]
	}
	// Remove nullable types from each of the candidates.
	var primaryTypes []*Type
	if c.strictNullChecks {
		primaryTypes = core.SameMap(types, func(t *Type) *Type {
			return c.filterType(t, func(u *Type) bool {
				return u.flags&TypeFlagsNullable == 0
			})
		})
	} else {
		primaryTypes = types
	}
	// When the candidate types are all literal types with the same base type, return a union
	// of those literal types. Otherwise, return the leftmost type for which no type to the
	// right is a supertype.
	var superTypeOrUnion *Type
	if c.literalTypesWithSameBaseType(primaryTypes) {
		superTypeOrUnion = c.getUnionType(primaryTypes)
	} else {
		superTypeOrUnion = reduceLeft(primaryTypes, func(s *Type, t *Type) *Type {
			if c.isTypeSubtypeOf(s, t) {
				return t
			} else {
				return s
			}
		})
	}
	// Add any nullable types that occurred in the candidates back to the result.
	if primaryTypes == types {
		return superTypeOrUnion
	} else {
		return c.getNullableType(superTypeOrUnion, c.getCombinedTypeFlags(types)&TypeFlagsNullable)
	}
}

// Return the leftmost type for which no type to the right is a subtype.
func (c *Checker) getCommonSubtype(types []*Type) *Type {
	return reduceLeft(types, func(s *Type, t *Type) *Type {
		if c.isTypeSubtypeOf(t, s) {
			return t
		} else {
			return s
		}
	})
}

func (c *Checker) isArrayType(t *Type) bool {
	return getObjectFlags(t)&ObjectFlagsReference != 0 && (t.AsTypeReference().target == c.globalArrayType || t.AsTypeReference().target == c.globalReadonlyArrayType)
}

func (c *Checker) isReadonlyArrayType(t *Type) bool {
	return getObjectFlags(t)&ObjectFlagsReference != 0 && t.AsTypeReference().target == c.globalReadonlyArrayType
}

func (c *Checker) isArrayOrTupleType(t *Type) bool {
	return c.isArrayType(t) || c.isTupleType(t)
}

func (c *Checker) isMutableArrayOrTuple(t *Type) bool {
	return c.isArrayType(t) && !c.isReadonlyArrayType(t) || c.isTupleType(t) && !t.target.readonly
}

func (c *Checker) getElementTypeOfArrayType(t *Type) *Type {
	if c.isArrayType(t) {
		return c.getTypeArguments(t)[0]
	} else {
		return nil
	}
}

func (c *Checker) isArrayLikeType(t *Type) bool {
	// A type is array-like if it is a reference to the global Array or global ReadonlyArray type,
	// or if it is not the undefined or null type and if it is assignable to ReadonlyArray<any>
	return c.isArrayType(t) || t.flags&TypeFlagsNullable == 0 && c.isTypeAssignableTo(t, c.anyReadonlyArrayType)
}

func (c *Checker) isMutableArrayLikeType(t *Type) bool {
	// A type is mutable-array-like if it is a reference to the global Array type, or if it is not the
	// any, undefined or null type and if it is assignable to Array<any>
	return c.isMutableArrayOrTuple(t) || t.flags&(TypeFlagsAny|TypeFlagsNullable) == 0 && c.isTypeAssignableTo(t, c.anyArrayType)
}

func (c *Checker) getSingleBaseForNonAugmentingSubtype(t *Type) *Type {
	if getObjectFlags(t)&ObjectFlagsReference == 0 || getObjectFlags(t.AsTypeReference().target)&ObjectFlagsClassOrInterface == 0 {
		return nil
	}
	if getObjectFlags(t)&ObjectFlagsIdenticalBaseTypeCalculated != 0 {
		if getObjectFlags(t)&ObjectFlagsIdenticalBaseTypeExists != 0 {
			return t.AsTypeReference().cachedEquivalentBaseType
		} else {
			return nil
		}
	}
	t.AsTypeReference().objectFlags |= ObjectFlagsIdenticalBaseTypeCalculated
	target := t.AsTypeReference().target.AsInterfaceType()
	if getObjectFlags(target)&ObjectFlagsClass != 0 {
		baseTypeNode := c.getBaseTypeNodeOfClass(target)
		// A base type expression may circularly reference the class itself (e.g. as an argument to function call), so we only
		// check for base types specified as simple qualified names.
		if baseTypeNode != nil && baseTypeNode.Expression.Kind != ast.KindIdentifier && baseTypeNode.Expression.Kind != ast.KindPropertyAccessExpression {
			return nil
		}
	}
	bases := c.getBaseTypes(target)
	if bases.length != 1 {
		return nil
	}
	if c.getMembersOfSymbol(t.symbol).size != 0 {
		return nil
		// If the interface has any members, they may subtype members in the base, so we should do a full structural comparison
	}
	var instantiatedBase *Type
	if length(target.typeParameters) == 0 {
		instantiatedBase = bases[0]
	} else {
		instantiatedBase = c.instantiateType(bases[0], c.createTypeMapper(target.typeParameters, c.getTypeArguments(t.AsTypeReference()).slice(0, target.typeParameters.length)))
	}
	if length(c.getTypeArguments(t.AsTypeReference())) > length(target.typeParameters) {
		instantiatedBase = c.getTypeWithThisArgument(instantiatedBase, core.LastOrNil(c.getTypeArguments(t.AsTypeReference())))
	}
	t.AsTypeReference().objectFlags |= ObjectFlagsIdenticalBaseTypeExists
	t.AsTypeReference().cachedEquivalentBaseType = instantiatedBase
	return t.AsTypeReference().cachedEquivalentBaseType
}

func (c *Checker) isEmptyLiteralType(t *Type) bool {
	if c.strictNullChecks {
		return t == c.implicitNeverType
	} else {
		return t == c.undefinedWideningType
	}
}

func (c *Checker) isEmptyArrayLiteralType(t *Type) bool {
	elementType := c.getElementTypeOfArrayType(t)
	return elementType != nil && c.isEmptyLiteralType(elementType)
}

func (c *Checker) isTupleLikeType(t *Type) bool {
	var lengthType TODO
	return c.isTupleType(t) || c.getPropertyOfType(t, "0" /* as __String */) != nil || c.isArrayLikeType(t) && /* TODO(TS-TO-GO) EqualsToken BinaryExpression: lengthType = getTypeOfPropertyOfType(type, "length" as __String) */ TODO != nil && c.everyType(lengthType, func(t *Type) bool {
		return t.flags&TypeFlagsNumberLiteral != 0
	})
}

func (c *Checker) isArrayOrTupleLikeType(t *Type) bool {
	return c.isArrayLikeType(t) || c.isTupleLikeType(t)
}

func (c *Checker) getTupleElementType(t *Type, index number) *Type {
	propType := c.getTypeOfPropertyOfType(t, ""+index.(string))
	if propType != nil {
		return propType
	}
	if c.everyType(t, c.isTupleType) {
		return c.getTupleElementTypeOutOfStartCount(t, index, ifElse(c.compilerOptions.noUncheckedIndexedAccess, c.undefinedType, nil))
	}
	return nil
}

func (c *Checker) isNeitherUnitTypeNorNever(t *Type) bool {
	return t.flags&(TypeFlagsUnit|TypeFlagsNever) == 0
}

func (c *Checker) isUnitType(t *Type) bool {
	return t.flags&TypeFlagsUnit != 0
}

func (c *Checker) isUnitLikeType(type_ *Type) bool {
	// Intersections that reduce to 'never' (e.g. 'T & null' where 'T extends {}') are not unit types.
	t := c.getBaseConstraintOrType(type_)
	// Scan intersections such that tagged literal types are considered unit types.
	if t.flags&TypeFlagsIntersection != 0 {
		return core.Some(t.AsIntersectionType().types, c.isUnitType)
	} else {
		return c.isUnitType(t)
	}
}

func (c *Checker) extractUnitType(t *Type) *Type {
	if t.flags&TypeFlagsIntersection != 0 {
		return core.Find(t.AsIntersectionType().types, c.isUnitType) || t
	} else {
		return t
	}
}

func (c *Checker) isLiteralType(t *Type) bool {
	switch {
	case t.flags&TypeFlagsBoolean != 0:
		return true
	case t.flags&TypeFlagsUnion != 0:
		if t.flags&TypeFlagsEnumLiteral != 0 {
			return true
		} else {
			return core.Every(t.AsUnionType().types, c.isUnitType)
		}
	default:
		return c.isUnitType(t)
	}
}

func (c *Checker) getBaseTypeOfLiteralType(t *Type) *Type {
	switch {
	case t.flags&TypeFlagsEnumLike != 0:
		return c.getBaseTypeOfEnumLikeType(t.AsLiteralType())
	case t.flags&(TypeFlagsStringLiteral|TypeFlagsTemplateLiteral|TypeFlagsStringMapping) != 0:
		return c.stringType
	case t.flags&TypeFlagsNumberLiteral != 0:
		return c.numberType
	case t.flags&TypeFlagsBigIntLiteral != 0:
		return c.bigintType
	case t.flags&TypeFlagsBooleanLiteral != 0:
		return c.booleanType
	case t.flags&TypeFlagsUnion != 0:
		return c.getBaseTypeOfLiteralTypeUnion(t.AsUnionType())
	default:
		return t
	}
}

func (c *Checker) getBaseTypeOfLiteralTypeUnion(t UnionType) *Type {
	key := __TEMPLATE__("B", c.getTypeId(t))
	return ifNotNilElse(c.getCachedType(key), c.setCachedType(key, c.mapType(t, c.getBaseTypeOfLiteralType)))
}

// This like getBaseTypeOfLiteralType, but instead treats enum literals as strings/numbers instead
// of returning their enum base type (which depends on the types of other literals in the enum).
func (c *Checker) getBaseTypeOfLiteralTypeForComparison(t *Type) *Type {
	switch {
	case t.flags&(TypeFlagsStringLiteral|TypeFlagsTemplateLiteral|TypeFlagsStringMapping) != 0:
		return c.stringType
	case t.flags&(TypeFlagsNumberLiteral|TypeFlagsEnum) != 0:
		return c.numberType
	case t.flags&TypeFlagsBigIntLiteral != 0:
		return c.bigintType
	case t.flags&TypeFlagsBooleanLiteral != 0:
		return c.booleanType
	case t.flags&TypeFlagsUnion != 0:
		return c.mapType(t, c.getBaseTypeOfLiteralTypeForComparison)
	default:
		return t
	}
}

func (c *Checker) getWidenedLiteralType(t *Type) *Type {
	switch {
	case t.flags&TypeFlagsEnumLike != 0 && c.isFreshLiteralType(t):
		return c.getBaseTypeOfEnumLikeType(t.AsLiteralType())
	case t.flags&TypeFlagsStringLiteral != 0 && c.isFreshLiteralType(t):
		return c.stringType
	case t.flags&TypeFlagsNumberLiteral != 0 && c.isFreshLiteralType(t):
		return c.numberType
	case t.flags&TypeFlagsBigIntLiteral != 0 && c.isFreshLiteralType(t):
		return c.bigintType
	case t.flags&TypeFlagsBooleanLiteral != 0 && c.isFreshLiteralType(t):
		return c.booleanType
	case t.flags&TypeFlagsUnion != 0:
		return c.mapType(t.AsUnionType(), c.getWidenedLiteralType)
	default:
		return t
	}
}

func (c *Checker) getWidenedUniqueESSymbolType(t *Type) *Type {
	switch {
	case t.flags&TypeFlagsUniqueESSymbol != 0:
		return c.esSymbolType
	case t.flags&TypeFlagsUnion != 0:
		return c.mapType(t.AsUnionType(), c.getWidenedUniqueESSymbolType)
	default:
		return t
	}
}

func (c *Checker) getWidenedLiteralLikeTypeForContextualType(t *Type, contextualType *Type) *Type {
	if !c.isLiteralOfContextualType(t, contextualType) {
		t = c.getWidenedUniqueESSymbolType(c.getWidenedLiteralType(t))
	}
	return c.getRegularTypeOfLiteralType(t)
}

func (c *Checker) getWidenedLiteralLikeTypeForContextualReturnTypeIfNeeded(t *Type, contextualSignatureReturnType *Type, isAsync bool) *Type {
	if t && c.isUnitType(t) {
		var contextualType *Type
		switch {
		case contextualSignatureReturnType == nil:
			contextualType = nil
		case isAsync:
			contextualType = c.getPromisedTypeOfPromise(contextualSignatureReturnType)
		default:
			contextualType = contextualSignatureReturnType
		}
		t = c.getWidenedLiteralLikeTypeForContextualType(t, contextualType)
	}
	return t
}

func (c *Checker) getWidenedLiteralLikeTypeForContextualIterationTypeIfNeeded(t *Type, contextualSignatureReturnType *Type, kind IterationTypeKind, isAsyncGenerator bool) *Type {
	if t && c.isUnitType(t) {
		var contextualType *Type
		if contextualSignatureReturnType == nil {
			contextualType = nil
		} else {
			contextualType = c.getIterationTypeOfGeneratorFunctionReturnType(kind, contextualSignatureReturnType, isAsyncGenerator)
		}
		t = c.getWidenedLiteralLikeTypeForContextualType(t, contextualType)
	}
	return t
}

/**
 * Check if a Type was written as a tuple type literal.
 * Prefer using isTupleLikeType() unless the use of `elementTypes`/`getTypeArguments` is required.
 */

func (c *Checker) isTupleType(t *Type) bool {
	return getObjectFlags(t)&ObjectFlagsReference != 0 && t.AsTypeReference().target.objectFlags&ObjectFlagsTuple != 0
}

func (c *Checker) isGenericTupleType(t *Type) bool {
	return c.isTupleType(t) && t.target.combinedFlags&ElementFlagsVariadic != 0
}

func (c *Checker) isSingleElementGenericTupleType(t *Type) bool {
	return c.isGenericTupleType(t) && t.target.elementFlags.length == 1
}

func (c *Checker) getRestTypeOfTupleType(t TupleTypeReference) *Type {
	return c.getElementTypeOfSliceOfTupleType(t, t.target.fixedLength)
}

func (c *Checker) getTupleElementTypeOutOfStartCount(t *Type, index number, undefinedOrMissingType *Type) *Type {
	return c.mapType(t, func(t *Type) *Type {
		tupleType := t.AsTupleTypeReference()
		restType := c.getRestTypeOfTupleType(tupleType)
		if restType == nil {
			return c.undefinedType
		}
		if c.undefinedOrMissingType != nil && index >= c.getTotalFixedElementCount(tupleType.target) {
			return c.getUnionType([]*Type{restType, c.undefinedOrMissingType})
		}
		return restType
	})
}

func (c *Checker) getRestArrayTypeOfTupleType(t TupleTypeReference) *ObjectType {
	restType := c.getRestTypeOfTupleType(t)
	return restType && c.createArrayType(restType)
}

func (c *Checker) getElementTypeOfSliceOfTupleType(type_ TupleTypeReference, index number, endSkipCount number /*  = 0 */, writing bool /*  = false */, noReductions bool /*  = false */) *Type {
	length := c.getTypeReferenceArity(type_) - endSkipCount
	if index < length {
		typeArguments := c.getTypeArguments(type_)
		var elementTypes []*Type = []never{}
		for i := index; i < length; i++ {
			t := typeArguments[i]
			elementTypes.push(ifElse(type_.target.elementFlags[i]&ElementFlagsVariadic != 0, c.getIndexedAccessType(t, c.numberType), t))
		}
		if writing {
			return c.getIntersectionType(elementTypes)
		} else {
			return c.getUnionType(elementTypes, ifElse(noReductions, UnionReductionNone, UnionReductionLiteral))
		}
	}
	return nil
}

func (c *Checker) isTupleTypeStructureMatching(t1 TupleTypeReference, t2 TupleTypeReference) bool {
	return c.getTypeReferenceArity(t1) == c.getTypeReferenceArity(t2) && core.Every(t1.target.elementFlags, func(f ElementFlags, i number) bool {
		return (f & ElementFlagsVariable) == (t2.target.elementFlags[i] & ElementFlagsVariable)
	})
}

func (c *Checker) isZeroBigInt(TODO_IDENTIFIER BigIntLiteralType) bool {
	return value.base10Value == "0"
}

func (c *Checker) removeDefinitelyFalsyTypes(t *Type) *Type {
	return c.filterType(t, func(t *Type) bool {
		return c.hasTypeFacts(t, TypeFactsTruthy)
	})
}

func (c *Checker) extractDefinitelyFalsyTypes(t *Type) *Type {
	return c.mapType(t, c.getDefinitelyFalsyPartOfType)
}

func (c *Checker) getDefinitelyFalsyPartOfType(t *Type) *Type {
	switch {
	case t.flags&TypeFlagsString != 0:
		return c.emptyStringType
	case t.flags&TypeFlagsNumber != 0:
		return c.zeroType
	case t.flags&TypeFlagsBigInt != 0:
		return c.zeroBigIntType
	case t == c.regularFalseType || t == c.falseType || t.flags&(TypeFlagsVoid|TypeFlagsUndefined|TypeFlagsNull|TypeFlagsAnyOrUnknown) != 0 || t.flags&TypeFlagsStringLiteral != 0 && t.AsStringLiteralType().value == "" || t.flags&TypeFlagsNumberLiteral != 0 && t.AsNumberLiteralType().value == 0 || t.flags&TypeFlagsBigIntLiteral != 0 && c.isZeroBigInt(t.AsBigIntLiteralType()):
		return t
	default:
		return c.neverType
	}
}

/**
 * Add undefined or null or both to a type if they are missing.
 * @param type - type to add undefined and/or null to if not present
 * @param flags - Either TypeFlags.Undefined or TypeFlags.Null, or both
 */

func (c *Checker) getNullableType(t *Type, flags TypeFlags) *Type {
	missing := (flags & ^t.flags) & (TypeFlagsUndefined | TypeFlagsNull)
	switch {
	case missing == 0:
		return t
	case missing == TypeFlagsUndefined:
		return c.getUnionType([]*Type{t, c.undefinedType})
	case missing == TypeFlagsNull:
		return c.getUnionType([]*Type{t, c.nullType})
	default:
		return c.getUnionType([]*Type{t, c.undefinedType, c.nullType})
	}
}

func (c *Checker) getOptionalType(t *Type, isProperty bool /*  = false */) *Type {
	Debug.assert(c.strictNullChecks)
	var missingOrUndefined IntrinsicType
	if isProperty {
		missingOrUndefined = c.undefinedOrMissingType
	} else {
		missingOrUndefined = c.undefinedType
	}
	if t == missingOrUndefined || t.flags&TypeFlagsUnion != 0 && t.AsUnionType().types[0] == missingOrUndefined {
		return t
	} else {
		return c.getUnionType([]*Type{t, missingOrUndefined})
	}
}

func (c *Checker) getGlobalNonNullableTypeInstantiation(t *Type) *Type {
	if !c.deferredGlobalNonNullableTypeAlias {
		c.deferredGlobalNonNullableTypeAlias = c.getGlobalSymbol("NonNullable" /* as __String */, ast.SymbolFlagsTypeAlias, nil /*diagnostic*/) || c.unknownSymbol
	}
	if c.deferredGlobalNonNullableTypeAlias != c.unknownSymbol {
		return c.getTypeAliasInstantiation(c.deferredGlobalNonNullableTypeAlias, []*Type{t})
	} else {
		return c.getIntersectionType([]*Type{t, c.emptyObjectType})
	}
}

func (c *Checker) getNonNullableType(t *Type) *Type {
	if c.strictNullChecks {
		return c.getAdjustedTypeWithFacts(t, TypeFactsNEUndefinedOrNull)
	} else {
		return t
	}
}

func (c *Checker) addOptionalTypeMarker(t *Type) *Type {
	if c.strictNullChecks {
		return c.getUnionType([]*Type{t, c.optionalType})
	} else {
		return t
	}
}

func (c *Checker) removeOptionalTypeMarker(t *Type) *Type {
	if c.strictNullChecks {
		return c.removeType(t, c.optionalType)
	} else {
		return t
	}
}

func (c *Checker) propagateOptionalTypeMarker(t *Type, node OptionalChain, wasOptional bool) *Type {
	switch {
	case wasOptional:
		if isOutermostOptionalChain(node) {
			return c.getOptionalType(t)
		} else {
			return c.addOptionalTypeMarker(t)
		}
	default:
		return t
	}
}

func (c *Checker) getOptionalExpressionType(exprType *Type, expression Expression) *Type {
	switch {
	case isExpressionOfOptionalChainRoot(expression):
		return c.getNonNullableType(exprType)
	case isOptionalChain(expression):
		return c.removeOptionalTypeMarker(exprType)
	default:
		return exprType
	}
}

func (c *Checker) removeMissingType(t *Type, isOptional bool) *Type {
	if c.exactOptionalPropertyTypes && isOptional {
		return c.removeType(t, c.missingType)
	} else {
		return t
	}
}

func (c *Checker) containsMissingType(t *Type) bool {
	return t == c.missingType || t.flags&TypeFlagsUnion != 0 && t.AsUnionType().types[0] == c.missingType
}

func (c *Checker) removeMissingOrUndefinedType(t *Type) *Type {
	if c.exactOptionalPropertyTypes {
		return c.removeType(t, c.missingType)
	} else {
		return c.getTypeWithFacts(t, TypeFactsNEUndefined)
	}
}

/**
 * Is source potentially coercible to target type under `==`.
 * Assumes that `source` is a constituent of a union, hence
 * the boolean literal flag on the LHS, but not on the RHS.
 *
 * This does not fully replicate the semantics of `==`. The
 * intention is to catch cases that are clearly not right.
 *
 * Comparing (string | number) to number should not remove the
 * string element.
 *
 * Comparing (string | number) to 1 will remove the string
 * element, though this is not sound. This is a pragmatic
 * choice.
 *
 * @see narrowTypeByEquality
 *
 * @param source
 * @param target
 */

func (c *Checker) isCoercibleUnderDoubleEquals(source *Type, target *Type) bool {
	return ((source.flags & (TypeFlagsNumber | TypeFlagsString | TypeFlagsBooleanLiteral)) != 0) && ((target.flags & (TypeFlagsNumber | TypeFlagsString | TypeFlagsBoolean)) != 0)
}

/**
 * Return true if type was inferred from an object literal, written as an object type literal, or is the shape of a module
 * with no call or construct signatures.
 */

func (c *Checker) isObjectTypeWithInferableIndex(t *Type) bool {
	objectFlags := getObjectFlags(t)
	if t.flags&TypeFlagsIntersection != 0 {
		return core.Every(t.AsIntersectionType().types, c.isObjectTypeWithInferableIndex)
	} else {
		return t.symbol && (t.symbol.Flags&(ast.SymbolFlagsObjectLiteral|ast.SymbolFlagsTypeLiteral|ast.SymbolFlagsEnum|ast.SymbolFlagsValueModule)) != 0 && t.symbol.Flags&ast.SymbolFlagsClass == 0 && !c.typeHasCallOrConstructSignatures(t) || objectFlags&ObjectFlagsObjectRestType != 0 || objectFlags&ObjectFlagsReverseMapped != 0 && c.isObjectTypeWithInferableIndex(t.AsReverseMappedType().source)
	}
}

func (c *Checker) createSymbolWithType(source *ast.Symbol, t *Type) TransientSymbol {
	symbol := c.createSymbol(source.Flags, source.EscapedName, getCheckFlags(source)&ast.CheckFlagsReadonly)
	symbol.Declarations = source.Declarations
	symbol.Parent = source.Parent
	symbol.Links.type_ = t
	symbol.Links.target = source
	if source.ValueDeclaration != nil {
		symbol.ValueDeclaration = source.ValueDeclaration
	}
	nameType := c.getSymbolLinks(source).nameType
	if nameType != nil {
		symbol.Links.nameType = nameType
	}
	return symbol
}

func (c *Checker) transformTypeOfMembers(t *Type, f func(propertyType *Type) *Type) SymbolTable {
	members := createSymbolTable()
	for _, property := range c.getPropertiesOfObjectType(t) {
		original := c.getTypeOfSymbol(property)
		updated := f(original)
		members.set(property.EscapedName, ifElse(updated == original, property, c.createSymbolWithType(property, updated)))
	}
	return members
}

/**
 * If the the provided object literal is subject to the excess properties check,
 * create a new that is exempt. Recursively mark object literal members as exempt.
 * Leave signatures alone since they are not subject to the check.
 */

func (c *Checker) getRegularTypeOfObjectLiteral(t *Type) *Type {
	if !(c.isObjectLiteralType(t) && getObjectFlags(t)&ObjectFlagsFreshLiteral != 0) {
		return t
	}
	regularType := t.AsFreshObjectLiteralType().regularType
	if regularType {
		return regularType
	}

	resolved := t.AsResolvedType()
	members := c.transformTypeOfMembers(t, c.getRegularTypeOfObjectLiteral)
	regularNew := c.createAnonymousType(resolved.symbol, members, resolved.callSignatures, resolved.constructSignatures, resolved.indexInfos)
	regularNew.flags = resolved.flags
	regularNew.objectFlags |= resolved.objectFlags & ^ObjectFlagsFreshLiteral
	t.AsFreshObjectLiteralType().regularType = regularNew
	return regularNew
}

func (c *Checker) createWideningContext(parent *WideningContext, propertyName *string, siblings *[]*Type) WideningContext {
	return WideningContext{
		parent:             parent,
		propertyName:       propertyName,
		siblings:           siblings,
		resolvedProperties: nil,
	}
}

func (c *Checker) getSiblingsOfContext(context WideningContext) []*Type {
	if context.siblings == nil {
		var siblings []*Type = []never{}
		for _, t := range c.getSiblingsOfContext(context.parent) {
			if c.isObjectLiteralType(t) {
				prop := c.getPropertyOfObjectType(t, context.propertyName)
				if prop != nil {
					c.forEachType(c.getTypeOfSymbol(prop), func(t *Type) {
						siblings.push(t)
					})
				}
			}
		}
		context.siblings = siblings
	}
	return context.siblings
}

func (c *Checker) getPropertiesOfContext(context WideningContext) []*ast.Symbol {
	if context.resolvedProperties == nil {
		names := NewMap[string, *ast.Symbol]()
		for _, t := range c.getSiblingsOfContext(context) {
			if c.isObjectLiteralType(t) && getObjectFlags(t)&ObjectFlagsContainsSpread == 0 {
				for _, prop := range c.getPropertiesOfType(t) {
					names.set(prop.EscapedName, prop)
				}
			}
		}
		context.resolvedProperties = arrayFrom(names.values())
	}
	return context.resolvedProperties
}

func (c *Checker) getWidenedProperty(prop *ast.Symbol, context *WideningContext) *ast.Symbol {
	if prop.Flags&ast.SymbolFlagsProperty == 0 {
		// Since get accessors already widen their return value there is no need to
		// widen accessor based properties here.
		return prop
	}
	original := c.getTypeOfSymbol(prop)
	propContext := context && c.createWideningContext(context, prop.EscapedName, nil /*siblings*/)
	widened := c.getWidenedTypeWithContext(original, propContext)
	if widened == original {
		return prop
	} else {
		return c.createSymbolWithType(prop, widened)
	}
}

func (c *Checker) getUndefinedProperty(prop *ast.Symbol) *ast.Symbol {
	cached := c.undefinedProperties.get(prop.EscapedName)
	if cached != nil {
		return cached
	}
	result := c.createSymbolWithType(prop, c.undefinedOrMissingType)
	result.Flags |= ast.SymbolFlagsOptional
	c.undefinedProperties.set(prop.EscapedName, result)
	return result
}

func (c *Checker) getWidenedTypeOfObjectLiteral(t *Type, context *WideningContext) *Type {
	members := createSymbolTable()
	for _, prop := range c.getPropertiesOfObjectType(t) {
		members.set(prop.EscapedName, c.getWidenedProperty(prop, context))
	}
	if context != nil {
		for _, prop := range c.getPropertiesOfContext(context) {
			if !members.has(prop.EscapedName) {
				members.set(prop.EscapedName, c.getUndefinedProperty(prop))
			}
		}
	}
	result := c.createAnonymousType(t.symbol, members, emptyArray, emptyArray, core.SameMap(c.getIndexInfosOfType(t), func(info IndexInfo) IndexInfo {
		return c.createIndexInfo(info.keyType, c.getWidenedType(info.type_), info.isReadonly)
	}))
	result.objectFlags |= getObjectFlags(t) & (ObjectFlagsJSLiteral | ObjectFlagsNonInferrableType)
	// Retain js literal flag through widening
	return result
}

func (c *Checker) getWidenedType(t *Type) *Type {
	return c.getWidenedTypeWithContext(t, nil /*context*/)
}

func (c *Checker) getWidenedTypeWithContext(t *Type, context *WideningContext) *Type {
	if getObjectFlags(t)&ObjectFlagsRequiresWidening != 0 {
		if context == nil && t.widened != nil {
			return t.widened
		}
		var result *Type
		if t.flags&(TypeFlagsAny|TypeFlagsNullable) != 0 {
			result = c.anyType
		} else if c.isObjectLiteralType(t) {
			result = c.getWidenedTypeOfObjectLiteral(t, context)
		} else if t.flags&TypeFlagsUnion != 0 {
			unionContext := context || c.createWideningContext(nil, nil /*propertyName*/, t.AsUnionType().types)
			widenedTypes := core.SameMap(t.AsUnionType().types, func(t *Type) *Type {
				if t.flags&TypeFlagsNullable != 0 {
					return t
				} else {
					return c.getWidenedTypeWithContext(t, unionContext)
				}
			})
			// Widening an empty object literal transitions from a highly restrictive type to
			// a highly inclusive one. For that reason we perform subtype reduction here if the
			// union includes empty object types (e.g. reducing {} | string to just {}).
			result = c.getUnionType(widenedTypes, ifElse(core.Some(widenedTypes, c.isEmptyObjectType), UnionReductionSubtype, UnionReductionLiteral))
		} else if t.flags&TypeFlagsIntersection != 0 {
			result = c.getIntersectionType(core.SameMap(t.AsIntersectionType().types, c.getWidenedType))
		} else if c.isArrayOrTupleType(t) {
			result = c.createTypeReference(t.target, core.SameMap(c.getTypeArguments(t), c.getWidenedType))
		}
		if result != nil && context == nil {
			t.widened = result
		}
		return result || t
	}
	return t
}

/**
 * Reports implicit any errors that occur as a result of widening 'null' and 'undefined'
 * to 'any'. A call to reportWideningErrorsInType is normally accompanied by a call to
 * getWidenedType. But in some cases getWidenedType is called without reporting errors
 * (type argument inference is an example).
 *
 * The return value indicates whether an error was in fact reported. The particular circumstances
 * are on a best effort basis. Currently, if the null or undefined that causes widening is inside
 * an object literal property (arbitrarily deeply), this function reports an error. If no error is
 * reported, reportImplicitAnyError is a suitable fallback to report a general error.
 */

func (c *Checker) reportWideningErrorsInType(type_ *Type) bool {
	errorReported := false
	if getObjectFlags(type_)&ObjectFlagsContainsWideningType != 0 {
		if type_.flags&TypeFlagsUnion != 0 {
			if core.Some(type_.AsUnionType().types, c.isEmptyObjectType) {
				errorReported = true
			} else {
				for _, t := range type_.AsUnionType().types {
					errorReported = errorReported || c.reportWideningErrorsInType(t)
				}
			}
		} else if c.isArrayOrTupleType(type_) {
			for _, t := range c.getTypeArguments(type_) {
				errorReported = errorReported || c.reportWideningErrorsInType(t)
			}
		} else if c.isObjectLiteralType(type_) {
			for _, p := range c.getPropertiesOfObjectType(type_) {
				t := c.getTypeOfSymbol(p)
				if getObjectFlags(t)&ObjectFlagsContainsWideningType != 0 {
					errorReported = c.reportWideningErrorsInType(t)
					if !errorReported {
						// we need to account for property types coming from object literal type normalization in unions
						valueDeclaration := p.Declarations. /* ? */ find(func(d Declaration) bool {
							return d.Symbol.ValueDeclaration. /* ? */ parent == type_.symbol.ValueDeclaration
						})
						if valueDeclaration != nil {
							c.error(valueDeclaration, Diagnostics.Object_literal_s_property_0_implicitly_has_an_1_type, c.symbolToString(p), c.typeToString(c.getWidenedType(t)))
							errorReported = true
						}
					}
				}
			}
		}
	}
	return errorReported
}

func (c *Checker) reportImplicitAny(declaration Declaration, t *Type, wideningKind WideningKind) {
	typeAsString := c.typeToString(c.getWidenedType(t))
	if isInJSFile(declaration) && !isCheckJsEnabledForFile(getSourceFileOfNode(declaration), c.compilerOptions) {
		// Only report implicit any errors/suggestions in TS and ts-check JS files
		return
	}
	var diagnostic DiagnosticMessage
	switch declaration.Kind {
	case ast.KindBinaryExpression,
		ast.KindPropertyDeclaration,
		ast.KindPropertySignature:
		if c.noImplicitAny {
			diagnostic = Diagnostics.Member_0_implicitly_has_an_1_type
		} else {
			diagnostic = Diagnostics.Member_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage
		}
	case ast.KindParameter:
		param := declaration.AsParameterDeclaration()
		if isIdentifier(param.Name) {
			originalKeywordKind := identifierToKeywordKind(param.Name)
			if (isCallSignatureDeclaration(param.Parent) || isMethodSignature(param.Parent) || isFunctionTypeNode(param.Parent)) && param.Parent.Parameters.includes(param) && (c.resolveName(param, param.Name.EscapedText, ast.SymbolFlagsType, nil /*nameNotFoundMessage*/, true /*isUse*/) != nil || originalKeywordKind && isTypeNodeKind(originalKeywordKind)) {
				newName := "arg" + param.Parent.Parameters.indexOf(param)
				typeName := declarationNameToString(param.Name) + (ifElse(param.DotDotDotToken != nil, "[]", ""))
				c.errorOrSuggestion(c.noImplicitAny, declaration, Diagnostics.Parameter_has_a_name_but_no_type_Did_you_mean_0_Colon_1, newName, typeName)
				return
			}
		}
		switch {
		case declaration.AsParameterDeclaration().DotDotDotToken != nil:
			if c.noImplicitAny {
				diagnostic = Diagnostics.Rest_parameter_0_implicitly_has_an_any_type
			} else {
				diagnostic = Diagnostics.Rest_parameter_0_implicitly_has_an_any_type_but_a_better_type_may_be_inferred_from_usage
			}
		case c.noImplicitAny:
			diagnostic = Diagnostics.Parameter_0_implicitly_has_an_1_type
		default:
			diagnostic = Diagnostics.Parameter_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage
		}
	case ast.KindBindingElement:
		diagnostic = Diagnostics.Binding_element_0_implicitly_has_an_1_type
		if !c.noImplicitAny {
			// Don't issue a suggestion for binding elements since the codefix doesn't yet support them.
			return
		}
	case ast.KindJSDocFunctionType:
		c.error(declaration, Diagnostics.Function_type_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeAsString)
		return
	case ast.KindJSDocSignature:
		if c.noImplicitAny && isJSDocOverloadTag(declaration.Parent) {
			c.error(declaration.Parent.TagName, Diagnostics.This_overload_implicitly_returns_the_type_0_because_it_lacks_a_return_type_annotation, typeAsString)
		}
		return
	case ast.KindFunctionDeclaration,
		ast.KindMethodDeclaration,
		ast.KindMethodSignature,
		ast.KindGetAccessor,
		ast.KindSetAccessor,
		ast.KindFunctionExpression,
		ast.KindArrowFunction:
		if c.noImplicitAny && declaration.AsNamedDeclaration().Name == nil {
			if wideningKind == WideningKindGeneratorYield {
				c.error(declaration, Diagnostics.Generator_implicitly_has_yield_type_0_Consider_supplying_a_return_type_annotation, typeAsString)
			} else {
				c.error(declaration, Diagnostics.Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeAsString)
			}
			return
		}
		switch {
		case !c.noImplicitAny:
			diagnostic = Diagnostics._0_implicitly_has_an_1_return_type_but_a_better_type_may_be_inferred_from_usage
		case wideningKind == WideningKindGeneratorYield:
			diagnostic = Diagnostics._0_which_lacks_return_type_annotation_implicitly_has_an_1_yield_type
		default:
			diagnostic = Diagnostics._0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type
		}
	case ast.KindMappedType:
		if c.noImplicitAny {
			c.error(declaration, Diagnostics.Mapped_object_type_implicitly_has_an_any_template_type)
		}
		return
	default:
		if c.noImplicitAny {
			diagnostic = Diagnostics.Variable_0_implicitly_has_an_1_type
		} else {
			diagnostic = Diagnostics.Variable_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage
		}
	}
	c.errorOrSuggestion(c.noImplicitAny, declaration, diagnostic, declarationNameToString(getNameOfDeclaration(declaration)), typeAsString)
}

func (c *Checker) shouldReportErrorsFromWideningWithContextualSignature(declaration FunctionLikeDeclaration, wideningKind WideningKind) bool {
	signature := c.getContextualSignatureForFunctionLikeDeclaration(declaration)
	if signature == nil {
		return true
	}
	returnType := c.getReturnTypeOfSignature(signature)
	flags := getFunctionFlags(declaration)
	switch wideningKind {
	case WideningKindFunctionReturn:
		if flags&FunctionFlagsGenerator != 0 {
			returnType = ifNotNilElse(c.getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKindReturn, returnType, flags&FunctionFlagsAsync != 0), returnType)
		} else if flags&FunctionFlagsAsync != 0 {
			returnType = ifNotNilElse(c.getAwaitedTypeNoAlias(returnType), returnType)
		}
		return c.isGenericType(returnType)
	case WideningKindGeneratorYield:
		yieldType := c.getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKindYield, returnType, flags&FunctionFlagsAsync != 0)
		return yieldType != nil && c.isGenericType(yieldType)
	case WideningKindGeneratorNext:
		nextType := c.getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKindNext, returnType, flags&FunctionFlagsAsync != 0)
		return nextType != nil && c.isGenericType(nextType)
	}
	return false
}

func (c *Checker) reportErrorsFromWidening(declaration Declaration, t *Type, wideningKind WideningKind) {
	c.addLazyDiagnostic(func() {
		if c.noImplicitAny && getObjectFlags(t)&ObjectFlagsContainsWideningType != 0 {
			if !wideningKind || isFunctionLikeDeclaration(declaration) && c.shouldReportErrorsFromWideningWithContextualSignature(declaration, wideningKind) {
				// Report implicit any error within type if possible, otherwise report error on declaration
				if !c.reportWideningErrorsInType(t) {
					c.reportImplicitAny(declaration, t, wideningKind)
				}
			}
		}
	})
}

func (c *Checker) applyToParameterTypes(source Signature, target Signature, callback func(s *Type, t *Type)) {
	sourceCount := c.getParameterCount(source)
	targetCount := c.getParameterCount(target)
	sourceRestType := c.getEffectiveRestType(source)
	targetRestType := c.getEffectiveRestType(target)
	var targetNonRestCount number
	if targetRestType != nil {
		targetNonRestCount = targetCount - 1
	} else {
		targetNonRestCount = targetCount
	}
	var paramCount number
	if sourceRestType != nil {
		paramCount = targetNonRestCount
	} else {
		paramCount = min(sourceCount, targetNonRestCount)
	}
	sourceThisType := c.getThisTypeOfSignature(source)
	if sourceThisType != nil {
		targetThisType := c.getThisTypeOfSignature(target)
		if targetThisType != nil {
			callback(sourceThisType, targetThisType)
		}
	}
	for i := 0; i < paramCount; i++ {
		callback(c.getTypeAtPosition(source, i), c.getTypeAtPosition(target, i))
	}
	if targetRestType != nil {
		callback(c.getRestTypeAtPosition(source, paramCount, c.isConstTypeVariable(targetRestType) && !c.someType(targetRestType, c.isMutableArrayLikeType) /*readonly*/), targetRestType)
	}
}

func (c *Checker) applyToReturnTypes(source Signature, target Signature, callback func(s *Type, t *Type)) {
	targetTypePredicate := c.getTypePredicateOfSignature(target)
	if targetTypePredicate != nil {
		sourceTypePredicate := c.getTypePredicateOfSignature(source)
		if sourceTypePredicate != nil && c.typePredicateKindsMatch(sourceTypePredicate, targetTypePredicate) && sourceTypePredicate.type_ != nil && targetTypePredicate.type_ != nil {
			callback(sourceTypePredicate.type_, targetTypePredicate.type_)
			return
		}
	}
	targetReturnType := c.getReturnTypeOfSignature(target)
	if c.couldContainTypeVariables(targetReturnType) {
		callback(c.getReturnTypeOfSignature(source), targetReturnType)
	}
}

func (c *Checker) createInferenceContext(typeParameters []TypeParameter, signature *Signature, flags InferenceFlags, compareTypes TypeComparer) InferenceContext {
	return c.createInferenceContextWorker(typeParameters.map_(c.createInferenceInfo), signature, flags, compareTypes || c.compareTypesAssignable)
}

func (c *Checker) cloneInferenceContext(context T, extraFlags InferenceFlags /*  = 0 */) Union[InferenceContext, Intersection[T, undefined]] {
	return context && c.createInferenceContextWorker(core.Map(context.inferences, c.cloneInferenceInfo), context.signature, context.flags|extraFlags, context.compareTypes)
}

func (c *Checker) createInferenceContextWorker(inferences []InferenceInfo, signature *Signature, flags InferenceFlags, compareTypes TypeComparer) InferenceContext {
	var context InferenceContext = InferenceContext{
		inferences:      inferences,
		signature:       signature,
		flags:           flags,
		compareTypes:    compareTypes,
		mapper:          c.reportUnmeasurableMapper,
		nonFixingMapper: c.reportUnmeasurableMapper,
	}
	context.mapper = c.makeFixingMapperForContext(context)
	context.nonFixingMapper = c.makeNonFixingMapperForContext(context)
	return context
}

func (c *Checker) makeFixingMapperForContext(context InferenceContext) TypeMapper {
	return c.makeDeferredTypeMapper(core.Map(context.inferences, func(i InferenceInfo) TypeParameter {
		return i.typeParameter
	}), core.Map(context.inferences, func(inference InferenceInfo, i number) /* TODO(TS-TO-GO) inferred type () => Type */ any {
		return func() *Type {
			if !inference.isFixed {
				// Before we commit to a particular inference (and thus lock out any further inferences),
				// we infer from any intra-expression inference sites we have collected.
				c.inferFromIntraExpressionSites(context)
				c.clearCachedInferences(context.inferences)
				inference.isFixed = true
			}
			return c.getInferredType(context, i)
		}
	}))
}

func (c *Checker) makeNonFixingMapperForContext(context InferenceContext) TypeMapper {
	return c.makeDeferredTypeMapper(core.Map(context.inferences, func(i InferenceInfo) TypeParameter {
		return i.typeParameter
	}), core.Map(context.inferences, func(_ InferenceInfo, i number) /* TODO(TS-TO-GO) inferred type () => Type */ any {
		return func() *Type {
			return c.getInferredType(context, i)
		}
	}))
}

func (c *Checker) clearCachedInferences(inferences []InferenceInfo) {
	for _, inference := range inferences {
		if !inference.isFixed {
			inference.inferredType = nil
		}
	}
}

func (c *Checker) addIntraExpressionInferenceSite(context InferenceContext, node Union[Expression, MethodDeclaration], t *Type) {
	( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: context.intraExpressionInferenceSites ??= [] */ TODO).push(IntraExpressionInferenceSite{
		node: node,
		t:    t,
	})
}

// We collect intra-expression inference sites within object and array literals to handle cases where
// inferred types flow between context sensitive element expressions. For example:
//
//	declare function foo<T>(arg: [(n: number) => T, (x: T) => void]): void;
//	foo([_a => 0, n => n.toFixed()]);
//
// Above, both arrow functions in the tuple argument are context sensitive, thus both are omitted from the
// pass that collects inferences from the non-context sensitive parts of the arguments. In the subsequent
// pass where nothing is omitted, we need to commit to an inference for T in order to contextually type the
// parameter in the second arrow function, but we want to first infer from the return type of the first
// arrow function. This happens automatically when the arrow functions are discrete arguments (because we
// infer from each argument before processing the next), but when the arrow functions are elements of an
// object or array literal, we need to perform intra-expression inferences early.
func (c *Checker) inferFromIntraExpressionSites(context InferenceContext) {
	if context.intraExpressionInferenceSites != nil {
		for _, TODO_IDENTIFIER := range context.intraExpressionInferenceSites {
			var contextualType *Type
			if node.Kind == ast.KindMethodDeclaration {
				contextualType = c.getContextualTypeForObjectLiteralMethod(node.AsMethodDeclaration(), ContextFlagsNoConstraints)
			} else {
				contextualType = c.getContextualType(node, ContextFlagsNoConstraints)
			}
			if contextualType != nil {
				c.inferTypes(context.inferences, t, contextualType)
			}
		}
		context.intraExpressionInferenceSites = nil
	}
}

func (c *Checker) createInferenceInfo(typeParameter TypeParameter) InferenceInfo {
	return InferenceInfo{
		typeParameter:    typeParameter,
		candidates:       nil,
		contraCandidates: nil,
		inferredType:     nil,
		priority:         nil,
		topLevel:         true,
		isFixed:          false,
		impliedArity:     nil,
	}
}

func (c *Checker) cloneInferenceInfo(inference InferenceInfo) InferenceInfo {
	return InferenceInfo{
		typeParameter:    inference.typeParameter,
		candidates:       inference.candidates && inference.candidates.slice(),
		contraCandidates: inference.contraCandidates && inference.contraCandidates.slice(),
		inferredType:     inference.inferredType,
		priority:         inference.priority,
		topLevel:         inference.topLevel,
		isFixed:          inference.isFixed,
		impliedArity:     inference.impliedArity,
	}
}

func (c *Checker) cloneInferredPartOfContext(context InferenceContext) *InferenceContext {
	inferences := core.Filter(context.inferences, c.hasInferenceCandidates)
	if inferences.length != 0 {
		return c.createInferenceContextWorker(core.Map(inferences, c.cloneInferenceInfo), context.signature, context.flags, context.compareTypes)
	} else {
		return nil
	}
}

func (c *Checker) getMapperFromContext(context T) Union[TypeMapper, Intersection[T, undefined]] {
	return context && context.mapper
}

// Return true if the given type could possibly reference a type parameter for which
// we perform type inference (i.e. a type parameter of a generic function). We cache
// results for union and intersection types for performance reasons.
func (c *Checker) couldContainTypeVariables(t *Type) bool {
	objectFlags := getObjectFlags(t)
	if objectFlags&ObjectFlagsCouldContainTypeVariablesComputed != 0 {
		return objectFlags&ObjectFlagsCouldContainTypeVariables != 0
	}
	result := t.flags&TypeFlagsInstantiable != 0 || t.flags&TypeFlagsObject != 0 && !c.isNonGenericTopLevelType(t) && (objectFlags&ObjectFlagsReference != 0 && (t.AsTypeReference().node != nil || core.Some(c.getTypeArguments(t.AsTypeReference()), c.couldContainTypeVariables)) || objectFlags&ObjectFlagsSingleSignatureType != 0 && length(t.AsSingleSignatureType().outerTypeParameters) != 0 || objectFlags&ObjectFlagsAnonymous != 0 && t.symbol && t.symbol.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsMethod|ast.SymbolFlagsClass|ast.SymbolFlagsTypeLiteral|ast.SymbolFlagsObjectLiteral) != 0 && t.symbol.Declarations != nil || objectFlags&(ObjectFlagsMapped|ObjectFlagsReverseMapped|ObjectFlagsObjectRestType|ObjectFlagsInstantiationExpressionType) != 0) || t.flags&TypeFlagsUnionOrIntersection != 0 && t.flags&TypeFlagsEnumLiteral == 0 && !c.isNonGenericTopLevelType(t) && core.Some(t.AsUnionOrIntersectionType().types, c.couldContainTypeVariables)
	if t.flags&TypeFlagsObjectFlagsType != 0 {
		t.AsObjectFlagsType().objectFlags |= ObjectFlagsCouldContainTypeVariablesComputed | (ifElse(result, ObjectFlagsCouldContainTypeVariables, 0))
	}
	return result
}

func (c *Checker) isNonGenericTopLevelType(t *Type) bool {
	if t.aliasSymbol != nil && t.aliasTypeArguments == nil {
		declaration := getDeclarationOfKind(t.aliasSymbol, ast.KindTypeAliasDeclaration)
		return declaration != nil && findAncestor(declaration.Parent, func(n *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
			switch {
			case n.Kind == ast.KindSourceFile:
				return true
			case n.Kind == ast.KindModuleDeclaration:
				return false
			default:
				return "quit"
			}
		}) != nil
	}
	return false
}

func (c *Checker) isTypeParameterAtTopLevel(t *Type, tp TypeParameter, depth number /*  = 0 */) bool {
	return t == tp || t.flags&TypeFlagsUnionOrIntersection != 0 && core.Some(t.AsUnionOrIntersectionType().types, func(t *Type) bool {
		return c.isTypeParameterAtTopLevel(t, tp, depth)
	}) || depth < 3 && t.flags&TypeFlagsConditional != 0 && (c.isTypeParameterAtTopLevel(c.getTrueTypeFromConditionalType(t.AsConditionalType()), tp, depth+1) || c.isTypeParameterAtTopLevel(c.getFalseTypeFromConditionalType(t.AsConditionalType()), tp, depth+1))
}

func (c *Checker) isTypeParameterAtTopLevelInReturnType(signature Signature, typeParameter TypeParameter) bool {
	typePredicate := c.getTypePredicateOfSignature(signature)
	if typePredicate != nil {
		return typePredicate.type_ != nil && c.isTypeParameterAtTopLevel(typePredicate.type_, typeParameter)
	} else {
		return c.isTypeParameterAtTopLevel(c.getReturnTypeOfSignature(signature), typeParameter)
	}
}

/** Create an object with properties named in the string literal type. Every property has type `any` */

func (c *Checker) createEmptyObjectTypeFromStringLiteral(t *Type) ResolvedType {
	members := createSymbolTable()
	c.forEachType(t, func(t *Type) {
		if t.flags&TypeFlagsStringLiteral == 0 {
			return
		}
		name := escapeLeadingUnderscores(t.AsStringLiteralType().value)
		literalProp := c.createSymbol(ast.SymbolFlagsProperty, name)
		literalProp.Links.type_ = c.anyType
		if t.symbol {
			literalProp.Declarations = t.symbol.Declarations
			literalProp.ValueDeclaration = t.symbol.ValueDeclaration
		}
		members.set(name, literalProp)
	})
	var indexInfos []IndexInfo
	if t.flags&TypeFlagsString != 0 {
		indexInfos = []IndexInfo{c.createIndexInfo(c.stringType, c.emptyObjectType, false /*isReadonly*/)}
	} else {
		indexInfos = emptyArray
	}
	return c.createAnonymousType(nil, members, emptyArray, emptyArray, indexInfos)
}

/**
 * Infer a suitable input type for a homomorphic mapped type { [P in keyof T]: X }. We construct
 * an object type with the same set of properties as the source type, where the type of each
 * property is computed by inferring from the source property type to X for the type
 * variable T[P] (i.e. we treat the type T[P] as the type variable we're inferring for).
 */

func (c *Checker) inferTypeForHomomorphicMappedType(source *Type, target MappedType, constraint IndexType) *Type {
	cacheKey := source.id + "," + target.id + "," + constraint.id
	if c.reverseHomomorphicMappedCache.has(cacheKey) {
		return c.reverseHomomorphicMappedCache.get(cacheKey)
	}
	t := c.createReverseMappedType(source, target, constraint)
	c.reverseHomomorphicMappedCache.set(cacheKey, t)
	return t
}

// We consider a type to be partially inferable if it isn't marked non-inferable or if it is
// an object literal type with at least one property of an inferable type. For example, an object
// literal { a: 123, b: x => true } is marked non-inferable because it contains a context sensitive
// arrow function, but is considered partially inferable because property 'a' has an inferable type.
func (c *Checker) isPartiallyInferableType(t *Type) bool {
	return getObjectFlags(t)&ObjectFlagsNonInferrableType == 0 || c.isObjectLiteralType(t) && core.Some(c.getPropertiesOfType(t), func(prop *ast.Symbol) bool {
		return c.isPartiallyInferableType(c.getTypeOfSymbol(prop))
	}) || c.isTupleType(t) && core.Some(c.getElementTypes(t), c.isPartiallyInferableType)
}

func (c *Checker) createReverseMappedType(source *Type, target MappedType, constraint IndexType) *Type {
	// We consider a source type reverse mappable if it has a string index signature or if
	// it has one or more properties and is of a partially inferable type.
	if !(c.getIndexInfoOfType(source, c.stringType) != nil || c.getPropertiesOfType(source).length != 0 && c.isPartiallyInferableType(source)) {
		return nil
	}
	// For arrays and tuples we infer new arrays and tuples where the reverse mapping has been
	// applied to the element type(s).
	if c.isArrayType(source) {
		elementType := c.inferReverseMappedType(c.getTypeArguments(source)[0], target, constraint)
		if elementType == nil {
			return nil
		}
		return c.createArrayType(elementType, c.isReadonlyArrayType(source))
	}
	if c.isTupleType(source) {
		elementTypes := core.Map(c.getElementTypes(source), func(t *Type) *Type {
			return c.inferReverseMappedType(t, target, constraint)
		})
		if !core.Every(elementTypes, func(t *Type) bool {
			return t != nil
		}) {
			return nil
		}
		var elementFlags []ElementFlags
		if c.getMappedTypeModifiers(target)&MappedTypeModifiersIncludeOptional != 0 {
			elementFlags = core.SameMap(source.target.elementFlags, func(f ElementFlags) ElementFlags {
				if f&ElementFlagsOptional != 0 {
					return ElementFlagsRequired
				} else {
					return f
				}
			})
		} else {
			elementFlags = source.target.elementFlags
		}
		return c.createTupleType(elementTypes, elementFlags, source.target.readonly, source.target.labeledElementDeclarations)
	}
	// For all other object types we infer a new object type where the reverse mapping has been
	// applied to the type of each property.
	reversed := c.createObjectType(ObjectFlagsReverseMapped|ObjectFlagsAnonymous, nil /*symbol*/).AsReverseMappedType()
	reversed.source = source
	reversed.mappedType = target
	reversed.constraintType = constraint
	return reversed
}

func (c *Checker) getTypeOfReverseMappedSymbol(symbol ReverseMappedSymbol) *Type {
	links := c.getSymbolLinks(symbol)
	if links.type_ == nil {
		links.type_ = c.inferReverseMappedType(symbol.Links.propertyType, symbol.Links.mappedType, symbol.Links.constraintType) || c.unknownType
	}
	return links.type_
}

func (c *Checker) inferReverseMappedTypeWorker(sourceType *Type, target MappedType, constraint IndexType) *Type {
	typeParameter := c.getIndexedAccessType(constraint.type_, c.getTypeParameterFromMappedType(target)).AsTypeParameter()
	templateType := c.getTemplateTypeFromMappedType(target)
	inference := c.createInferenceInfo(typeParameter)
	c.inferTypes([]InferenceInfo{inference}, sourceType, templateType)
	return c.getTypeFromInference(inference) || c.unknownType
}

func (c *Checker) inferReverseMappedType(source *Type, target MappedType, constraint IndexType) *Type {
	cacheKey := source.id + "," + target.id + "," + constraint.id
	if c.reverseMappedCache.has(cacheKey) {
		return c.reverseMappedCache.get(cacheKey) || c.unknownType
	}
	c.reverseMappedSourceStack.push(source)
	c.reverseMappedTargetStack.push(target)
	saveExpandingFlags := c.reverseExpandingFlags
	if c.isDeeplyNestedType(source, c.reverseMappedSourceStack, c.reverseMappedSourceStack.length, 2) {
		c.reverseExpandingFlags |= ExpandingFlagsSource
	}
	if c.isDeeplyNestedType(target, c.reverseMappedTargetStack, c.reverseMappedTargetStack.length, 2) {
		c.reverseExpandingFlags |= ExpandingFlagsTarget
	}
	var t TODO
	if c.reverseExpandingFlags != ExpandingFlagsBoth {
		t = c.inferReverseMappedTypeWorker(source, target, constraint)
	}
	c.reverseMappedSourceStack.pop()
	c.reverseMappedTargetStack.pop()
	c.reverseExpandingFlags = saveExpandingFlags
	c.reverseMappedCache.set(cacheKey, t)
	return t
}

func (c *Checker) getUnmatchedProperties(source *Type, target *Type, requireOptionalProperties bool, matchDiscriminantProperties bool) IterableIterator[*ast.Symbol] {
	properties := c.getPropertiesOfType(target)
	for _, targetProp := range properties {
		// TODO: remove this when we support static private identifier fields and find other solutions to get privateNamesAndStaticFields test to pass
		if c.isStaticPrivateIdentifierProperty(targetProp) {
			continue
		}
		if requireOptionalProperties || !(targetProp.Flags&ast.SymbolFlagsOptional != 0 || getCheckFlags(targetProp)&ast.CheckFlagsPartial != 0) {
			sourceProp := c.getPropertyOfType(source, targetProp.EscapedName)
			if sourceProp == nil {
				yield(targetProp)
			} else if matchDiscriminantProperties {
				targetType := c.getTypeOfSymbol(targetProp)
				if targetType.flags&TypeFlagsUnit != 0 {
					sourceType := c.getTypeOfSymbol(sourceProp)
					if !(sourceType.flags&TypeFlagsAny != 0 || c.getRegularTypeOfLiteralType(sourceType) == c.getRegularTypeOfLiteralType(targetType)) {
						yield(targetProp)
					}
				}
			}
		}
	}
}

func (c *Checker) getUnmatchedProperty(source *Type, target *Type, requireOptionalProperties bool, matchDiscriminantProperties bool) *ast.Symbol {
	return firstOrUndefinedIterator(c.getUnmatchedProperties(source, target, requireOptionalProperties, matchDiscriminantProperties))
}

func (c *Checker) tupleTypesDefinitelyUnrelated(source TupleTypeReference, target TupleTypeReference) bool {
	return target.target.combinedFlags&ElementFlagsVariadic == 0 && target.target.minLength > source.target.minLength || target.target.combinedFlags&ElementFlagsVariable == 0 && (source.target.combinedFlags&ElementFlagsVariable != 0 || target.target.fixedLength < source.target.fixedLength)
}

func (c *Checker) typesDefinitelyUnrelated(source *Type, target *Type) bool {
	// Two tuple types with incompatible arities are definitely unrelated.
	// Two object types that each have a property that is unmatched in the other are definitely unrelated.
	if c.isTupleType(source) && c.isTupleType(target) {
		return c.tupleTypesDefinitelyUnrelated(source, target)
	} else {
		return c.getUnmatchedProperty(source, target, false /*requireOptionalProperties*/, true /*matchDiscriminantProperties*/) != nil && c.getUnmatchedProperty(target, source, false /*requireOptionalProperties*/, false /*matchDiscriminantProperties*/) != nil
	}
}

func (c *Checker) getTypeFromInference(inference InferenceInfo) *Type {
	switch {
	case inference.candidates != nil:
		return c.getUnionType(inference.candidates, UnionReductionSubtype)
	case inference.contraCandidates != nil:
		return c.getIntersectionType(inference.contraCandidates)
	default:
		return nil
	}
}

func (c *Checker) hasSkipDirectInferenceFlag(node *ast.Node) bool {
	return c.getNodeLinks(node).skipDirectInference
}

func (c *Checker) isFromInferenceBlockedSource(t *Type) bool {
	return t.symbol && core.Some(t.symbol.Declarations, c.hasSkipDirectInferenceFlag)
}

func (c *Checker) templateLiteralTypesDefinitelyUnrelated(source TemplateLiteralType, target TemplateLiteralType) bool {
	// Two template literal types with diffences in their starting or ending text spans are definitely unrelated.
	sourceStart := source.texts[0]
	targetStart := target.texts[0]
	sourceEnd := source.texts[source.texts.length-1]
	targetEnd := target.texts[target.texts.length-1]
	startLen := min(sourceStart.length, targetStart.length)
	endLen := min(sourceEnd.length, targetEnd.length)
	return sourceStart.slice(0, startLen) != targetStart.slice(0, startLen) || sourceEnd.slice(sourceEnd.length-endLen) != targetEnd.slice(targetEnd.length-endLen)
}

/**
 * Tests whether the provided string can be parsed as a number.
 * @param s The string to test.
 * @param roundTripOnly Indicates the resulting number matches the input when converted back to a string.
 */

func (c *Checker) isValidNumberString(s string, roundTripOnly bool) bool {
	if s == "" {
		return false
	}
	n := +s
	return isFinite(n) && (!roundTripOnly || ""+n == s)
}

/**
 * @param text a valid bigint string excluding a trailing `n`, but including a possible prefix `-`. Use `isValidBigIntString(text, roundTripOnly)` before calling this function.
 */

func (c *Checker) parseBigIntLiteralType(text string) BigIntLiteralType {
	return c.getBigIntLiteralType(parseValidBigInt(text))
}

func (c *Checker) isMemberOfStringMapping(source *Type, target *Type) bool {
	if target.flags&TypeFlagsAny != 0 {
		return true
	}
	if target.flags&(TypeFlagsString|TypeFlagsTemplateLiteral) != 0 {
		return c.isTypeAssignableTo(source, target)
	}
	if target.flags&TypeFlagsStringMapping != 0 {
		// We need to see whether applying the same mappings of the target
		// onto the source would produce an identical type *and* that
		// it's compatible with the inner-most non-string-mapped type.
		//
		// The intuition here is that if same mappings don't affect the source at all,
		// and the source is compatible with the unmapped target, then they must
		// still reside in the same domain.
		mappingStack := []never{}
		for target.flags&TypeFlagsStringMapping != 0 {
			mappingStack.unshift(target.symbol)
			target = target.AsStringMappingType().type_
		}
		mappedSource := reduceLeft(mappingStack, func(memo *Type, value *ast.Symbol) *Type {
			return c.getStringMappingType(value, memo)
		}, source)
		return mappedSource == source && c.isMemberOfStringMapping(source, target)
	}
	return false
}

func (c *Checker) isValidTypeForTemplateLiteralPlaceholder(source *Type, target *Type) bool {
	if target.flags&TypeFlagsIntersection != 0 {
		return core.Every(target.AsIntersectionType().types, func(t *Type) bool {
			return t == c.emptyTypeLiteralType || c.isValidTypeForTemplateLiteralPlaceholder(source, t)
		})
	}
	if target.flags&TypeFlagsString != 0 || c.isTypeAssignableTo(source, target) {
		return true
	}
	if source.flags&TypeFlagsStringLiteral != 0 {
		value := source.AsStringLiteralType().value
		return target.flags&TypeFlagsNumber != 0 && c.isValidNumberString(value, false /*roundTripOnly*/) || target.flags&TypeFlagsBigInt != 0 && isValidBigIntString(value, false /*roundTripOnly*/) || target.flags&(TypeFlagsBooleanLiteral|TypeFlagsNullable) != 0 && value == target.AsIntrinsicType().intrinsicName || target.flags&TypeFlagsStringMapping != 0 && c.isMemberOfStringMapping(c.getStringLiteralType(value), target) || target.flags&TypeFlagsTemplateLiteral != 0 && c.isTypeMatchedByTemplateLiteralType(source, target.AsTemplateLiteralType())
	}
	if source.flags&TypeFlagsTemplateLiteral != 0 {
		texts := source.AsTemplateLiteralType().texts
		return texts.length == 2 && texts[0] == "" && texts[1] == "" && c.isTypeAssignableTo(source.AsTemplateLiteralType().types[0], target)
	}
	return false
}

func (c *Checker) inferTypesFromTemplateLiteralType(source *Type, target TemplateLiteralType) *[]*Type {
	switch {
	case source.flags&TypeFlagsStringLiteral != 0:
		return c.inferFromLiteralPartsToTemplateLiteral([]string{source.AsStringLiteralType().value}, emptyArray, target)
	case source.flags&TypeFlagsTemplateLiteral != 0:
		if arrayIsEqualTo(source.AsTemplateLiteralType().texts, target.texts) {
			return core.Map(source.AsTemplateLiteralType().types, func(s *Type, i number) *Type {
				if c.isTypeAssignableTo(c.getBaseConstraintOrType(s), c.getBaseConstraintOrType(target.types[i])) {
					return s
				} else {
					return c.getStringLikeTypeForType(s)
				}
			})
		} else {
			return c.inferFromLiteralPartsToTemplateLiteral(source.AsTemplateLiteralType().texts, source.AsTemplateLiteralType().types, target)
		}
	default:
		return nil
	}
}

func (c *Checker) isTypeMatchedByTemplateLiteralType(source *Type, target TemplateLiteralType) bool {
	inferences := c.inferTypesFromTemplateLiteralType(source, target)
	return inferences != nil && core.Every(inferences, func(r *Type, i number) bool {
		return c.isValidTypeForTemplateLiteralPlaceholder(r, target.types[i])
	})
}

func (c *Checker) getStringLikeTypeForType(t *Type) *Type {
	if t.flags&(TypeFlagsAny|TypeFlagsStringLike) != 0 {
		return t
	} else {
		return c.getTemplateLiteralType([]string{"", ""}, []*Type{t})
	}
}

// This function infers from the text parts and type parts of a source literal to a target template literal. The number
// of text parts is always one more than the number of type parts, and a source string literal is treated as a source
// with one text part and zero type parts. The function returns an array of inferred string or template literal types
// corresponding to the placeholders in the target template literal, or undefined if the source doesn't match the target.
//
// We first check that the starting source text part matches the starting target text part, and that the ending source
// text part ends matches the ending target text part. We then iterate through the remaining target text parts, finding
// a match for each in the source and inferring string or template literal types created from the segments of the source
// that occur between the matches. During this iteration, seg holds the index of the current text part in the sourceTexts
// array and pos holds the current character position in the current text part.
//
// Consider inference from type `<<${string}>.<${number}-${number}>>` to type `<${string}.${string}>`, i.e.
//
//	sourceTexts = ['<<', '>.<', '-', '>>']
//	sourceTypes = [string, number, number]
//	target.texts = ['<', '.', '>']
//
// We first match '<' in the target to the start of '<<' in the source and '>' in the target to the end of '>>' in
// the source. The first match for the '.' in target occurs at character 1 in the source text part at index 1, and thus
// the first inference is the template literal type `<${string}>`. The remainder of the source makes up the second
// inference, the template literal type `<${number}-${number}>`.
func (c *Checker) inferFromLiteralPartsToTemplateLiteral(sourceTexts []string, sourceTypes []*Type, target TemplateLiteralType) *[]*Type {
	lastSourceIndex := sourceTexts.length - 1
	sourceStartText := sourceTexts[0]
	sourceEndText := sourceTexts[lastSourceIndex]
	targetTexts := target.texts
	lastTargetIndex := targetTexts.length - 1
	targetStartText := targetTexts[0]
	targetEndText := targetTexts[lastTargetIndex]
	if lastSourceIndex == 0 && sourceStartText.length < targetStartText.length+targetEndText.length || !sourceStartText.startsWith(targetStartText) || !sourceEndText.endsWith(targetEndText) {
		return nil
	}
	remainingEndText := sourceEndText.slice(0, sourceEndText.length-targetEndText.length)
	var matches []*Type = []never{}
	seg := 0
	pos := targetStartText.length
	for i := 1; i < lastTargetIndex; i++ {
		delim := targetTexts[i]
		if delim.length > 0 {
			s := seg
			p := pos
			for true {
				p = getSourceText(s).indexOf(delim, p)
				if p >= 0 {
					break
				}
				s++
				if s == sourceTexts.length {
					return nil
				}
				p = 0
			}
			addMatch(s, p)
			pos += delim.length
		} else if pos < getSourceText(seg).length {
			addMatch(seg, pos+1)
		} else if seg < lastSourceIndex {
			addMatch(seg+1, 0)
		} else {
			return nil
		}
	}
	addMatch(lastSourceIndex, getSourceText(lastSourceIndex).length)
	return matches
	getSourceText := func(index number) string {
		if index < lastSourceIndex {
			return sourceTexts[index]
		} else {
			return remainingEndText
		}
	}

	addMatch := func(s number, p number) {
		var matchType *Type
		if s == seg {
			matchType = c.getStringLiteralType(getSourceText(s).slice(pos, p))
		} else {
			matchType = c.getTemplateLiteralType([]string{sourceTexts[seg].slice(pos) /* TODO(TS-TO-GO) Expression SpreadElement: ...sourceTexts.slice(seg + 1, s) */, getSourceText(s).slice(0, p)}, sourceTypes.slice(seg, s))
		}
		matches.push(matchType)
		seg = s
		pos = p
	}

}

/**
 * @returns `true` if `type` has the shape `[T[0]]` where `T` is `typeParameter`
 */

func (c *Checker) isTupleOfSelf(typeParameter TypeParameter, t *Type) bool {
	return c.isTupleType(t) && c.getTupleElementType(t, 0) == c.getIndexedAccessType(typeParameter, c.getNumberLiteralType(0)) && c.getTypeOfPropertyOfType(t, "1" /* as __String */) == nil
}

func (c *Checker) inferTypes(inferences []InferenceInfo, originalSource *Type, originalTarget *Type, priority InferencePriority /*  = InferencePriority.None */, contravariant bool /*  = false */) {
	bivariant := false
	var propagationType *Type
	var inferencePriority number = InferencePriorityMaxValue
	var visited Map[string, number]
	var sourceStack []*Type
	var targetStack []*Type
	expandingFlags := ExpandingFlagsNone
	inferFromTypes(originalSource, originalTarget)

	inferFromTypes := func(source *Type, target *Type) {
		if !c.couldContainTypeVariables(target) || c.isNoInferType(target) {
			return
		}
		if source == c.wildcardType || source == c.blockedStringType {
			// We are inferring from an 'any' type. We want to infer this type for every type parameter
			// referenced in the target type, so we record it as the propagation type and infer from the
			// target to itself. Then, as we find candidates we substitute the propagation type.
			savePropagationType := propagationType
			propagationType = source
			inferFromTypes(target, target)
			propagationType = savePropagationType
			return
		}
		if source.aliasSymbol != nil && source.aliasSymbol == target.aliasSymbol {
			if source.aliasTypeArguments != nil {
				// Source and target are types originating in the same generic type alias declaration.
				// Simply infer from source type arguments to target type arguments, with defaults applied.
				params := c.getSymbolLinks(source.aliasSymbol).typeParameters
				minParams := c.getMinTypeArgumentCount(params)
				sourceTypes := c.fillMissingTypeArguments(source.aliasTypeArguments, params, minParams, isInJSFile(source.aliasSymbol.ValueDeclaration))
				targetTypes := c.fillMissingTypeArguments(target.aliasTypeArguments, params, minParams, isInJSFile(source.aliasSymbol.ValueDeclaration))
				inferFromTypeArguments(sourceTypes, targetTypes, c.getAliasVariances(source.aliasSymbol))
			}
			// And if there weren't any type arguments, there's no reason to run inference as the types must be the same.
			return
		}
		if source == target && source.flags&TypeFlagsUnionOrIntersection != 0 {
			// When source and target are the same union or intersection type, just relate each constituent
			// type to itself.
			for _, t := range source.AsUnionOrIntersectionType().types {
				inferFromTypes(t, t)
			}
			return
		}
		if target.flags&TypeFlagsUnion != 0 {
			// First, infer between identically matching source and target constituents and remove the
			// matching types.
			TODO_IDENTIFIER := inferFromMatchingTypes(ifElse(source.flags&TypeFlagsUnion != 0, source.AsUnionType().types, []*Type{source}), target.AsUnionType().types, c.isTypeOrBaseIdenticalTo)
			// Next, infer between closely matching source and target constituents and remove
			// the matching types. Types closely match when they are instantiations of the same
			// object type or instantiations of the same type alias.
			TODO_IDENTIFIER := inferFromMatchingTypes(tempSources, tempTargets, c.isTypeCloselyMatchedBy)
			if targets.length == 0 {
				return
			}
			target = c.getUnionType(targets)
			if sources.length == 0 {
				// All source constituents have been matched and there is nothing further to infer from.
				// However, simply making no inferences is undesirable because it could ultimately mean
				// inferring a type parameter constraint. Instead, make a lower priority inference from
				// the full source to whatever remains in the target. For example, when inferring from
				// string to 'string | T', make a lower priority inference of string for T.
				inferWithPriority(source, target, InferencePriorityNakedTypeVariable)
				return
			}
			source = c.getUnionType(sources)
		} else if target.flags&TypeFlagsIntersection != 0 && !core.Every(target.AsIntersectionType().types, c.isNonGenericObjectType) {
			// We reduce intersection types unless they're simple combinations of object types. For example,
			// when inferring from 'string[] & { extra: any }' to 'string[] & T' we want to remove string[] and
			// infer { extra: any } for T. But when inferring to 'string[] & Iterable<T>' we want to keep the
			// string[] on the source side and infer string for T.
			if source.flags&TypeFlagsUnion == 0 {
				// Infer between identically matching source and target constituents and remove the matching types.
				TODO_IDENTIFIER := inferFromMatchingTypes(ifElse(source.flags&TypeFlagsIntersection != 0, source.AsIntersectionType().types, []*Type{source}), target.AsIntersectionType().types, c.isTypeIdenticalTo)
				if sources.length == 0 || targets.length == 0 {
					return
				}
				source = c.getIntersectionType(sources)
				target = c.getIntersectionType(targets)
			}
		}
		if target.flags&(TypeFlagsIndexedAccess|TypeFlagsSubstitution) != 0 {
			if c.isNoInferType(target) {
				return
			}
			target = c.getActualTypeVariable(target)
		}
		if target.flags&TypeFlagsTypeVariable != 0 {
			// Skip inference if the source is "blocked", which is used by the language service to
			// prevent inference on nodes currently being edited.
			if c.isFromInferenceBlockedSource(source) {
				return
			}
			inference := getInferenceInfoForType(target)
			if inference != nil {
				// If target is a type parameter, make an inference, unless the source type contains
				// a "non-inferrable" type. Types with this flag set are markers used to prevent inference.
				//
				// For example:
				//     - anyFunctionType is a wildcard type that's used to avoid contextually typing functions;
				//       it's internal, so should not be exposed to the user by adding it as a candidate.
				//     - autoType (and autoArrayType) is a special "any" used in control flow; like anyFunctionType,
				//       it's internal and should not be observable.
				//     - silentNeverType is returned by getInferredType when instantiating a generic function for
				//       inference (and a type variable has no mapping).
				//
				// This flag is infectious; if we produce Box<never> (where never is silentNeverType), Box<never> is
				// also non-inferrable.
				//
				// As a special case, also ignore nonInferrableAnyType, which is a special form of the any type
				// used as a stand-in for binding elements when they are being inferred.
				if getObjectFlags(source)&ObjectFlagsNonInferrableType != 0 || source == c.nonInferrableAnyType {
					return
				}
				if !inference.isFixed {
					candidate := propagationType || source
					if candidate == c.blockedStringType {
						return
					}
					if inference.priority == nil || priority < inference.priority {
						inference.candidates = nil
						inference.contraCandidates = nil
						inference.topLevel = true
						inference.priority = priority
					}
					if priority == inference.priority {
						// Inferring A to [A[0]] is a zero information inference (it guarantees A becomes its constraint), but oft arises from generic argument list inferences
						// By discarding it early, we can allow more fruitful results to be used instead.
						if c.isTupleOfSelf(inference.typeParameter, candidate) {
							return
						}
						// We make contravariant inferences only if we are in a pure contravariant position,
						// i.e. only if we have not descended into a bivariant position.
						if contravariant && !bivariant {
							if !contains(inference.contraCandidates, candidate) {
								inference.contraCandidates = append(inference.contraCandidates, candidate)
								c.clearCachedInferences(inferences)
							}
						} else if !contains(inference.candidates, candidate) {
							inference.candidates = append(inference.candidates, candidate)
							c.clearCachedInferences(inferences)
						}
					}
					if priority&InferencePriorityReturnType == 0 && target.flags&TypeFlagsTypeParameter != 0 && inference.topLevel && !c.isTypeParameterAtTopLevel(originalTarget, target.AsTypeParameter()) {
						inference.topLevel = false
						c.clearCachedInferences(inferences)
					}
				}
				inferencePriority = min(inferencePriority, priority)
				return
			}
			// Infer to the simplified version of an indexed access, if possible, to (hopefully) expose more bare type parameters to the inference engine
			simplified := c.getSimplifiedType(target, false /*writing*/)
			if simplified != target {
				inferFromTypes(source, simplified)
			} else if target.flags&TypeFlagsIndexedAccess != 0 {
				indexType := c.getSimplifiedType(target.AsIndexedAccessType().indexType, false /*writing*/)
				// Generally simplifications of instantiable indexes are avoided to keep relationship checking correct, however if our target is an access, we can consider
				// that key of that access to be "instantiated", since we're looking to find the infernce goal in any way we can.
				if indexType.flags&TypeFlagsInstantiable != 0 {
					simplified := c.distributeIndexOverObjectType(c.getSimplifiedType(target.AsIndexedAccessType().objectType, false /*writing*/), indexType, false /*writing*/)
					if simplified != nil && simplified != target {
						inferFromTypes(source, simplified)
					}
				}
			}
		}
		if getObjectFlags(source)&ObjectFlagsReference != 0 && getObjectFlags(target)&ObjectFlagsReference != 0 && (source.AsTypeReference().target == target.AsTypeReference().target || c.isArrayType(source) && c.isArrayType(target)) && !(source.AsTypeReference().node != nil && target.AsTypeReference().node != nil) {
			// If source and target are references to the same generic type, infer from type arguments
			inferFromTypeArguments(c.getTypeArguments(source.AsTypeReference()), c.getTypeArguments(target.AsTypeReference()), c.getVariances(source.AsTypeReference().target))
		} else if source.flags&TypeFlagsIndex != 0 && target.flags&TypeFlagsIndex != 0 {
			inferFromContravariantTypes(source.AsIndexType().type_, target.AsIndexType().type_)
		} else if (c.isLiteralType(source) || source.flags&TypeFlagsString != 0) && target.flags&TypeFlagsIndex != 0 {
			empty := c.createEmptyObjectTypeFromStringLiteral(source)
			inferFromContravariantTypesWithPriority(empty, target.AsIndexType().type_, InferencePriorityLiteralKeyof)
		} else if source.flags&TypeFlagsIndexedAccess != 0 && target.flags&TypeFlagsIndexedAccess != 0 {
			inferFromTypes(source.AsIndexedAccessType().objectType, target.AsIndexedAccessType().objectType)
			inferFromTypes(source.AsIndexedAccessType().indexType, target.AsIndexedAccessType().indexType)
		} else if source.flags&TypeFlagsStringMapping != 0 && target.flags&TypeFlagsStringMapping != 0 {
			if source.AsStringMappingType().symbol == target.AsStringMappingType().symbol {
				inferFromTypes(source.AsStringMappingType().type_, target.AsStringMappingType().type_)
			}
		} else if source.flags&TypeFlagsSubstitution != 0 {
			inferFromTypes(source.AsSubstitutionType().baseType, target)
			inferWithPriority(c.getSubstitutionIntersection(source.AsSubstitutionType()), target, InferencePrioritySubstituteSource)
			// Make substitute inference at a lower priority
		} else if target.flags&TypeFlagsConditional != 0 {
			invokeOnce(source, target.AsConditionalType(), inferToConditionalType)
		} else if target.flags&TypeFlagsUnionOrIntersection != 0 {
			inferToMultipleTypes(source, target.AsUnionOrIntersectionType().types, target.flags)
		} else if source.flags&TypeFlagsUnion != 0 {
			// Source is a union or intersection type, infer from each constituent type
			sourceTypes := source.AsUnionOrIntersectionType().types
			for _, sourceType := range sourceTypes {
				inferFromTypes(sourceType, target)
			}
		} else if target.flags&TypeFlagsTemplateLiteral != 0 {
			inferToTemplateLiteralType(source, target.AsTemplateLiteralType())
		} else {
			source = c.getReducedType(source)
			if c.isGenericMappedType(source) && c.isGenericMappedType(target) {
				invokeOnce(source, target, inferFromGenericMappedTypes)
			}
			if !(priority&InferencePriorityNoConstraints != 0 && source.flags&(TypeFlagsIntersection|TypeFlagsInstantiable) != 0) {
				apparentSource := c.getApparentType(source)
				// getApparentType can return _any_ type, since an indexed access or conditional may simplify to any other type.
				// If that occurs and it doesn't simplify to an object or intersection, we'll need to restart `inferFromTypes`
				// with the simplified source.
				if apparentSource != source && apparentSource.flags&(TypeFlagsObject|TypeFlagsIntersection) == 0 {
					return inferFromTypes(apparentSource, target)
				}
				source = apparentSource
			}
			if source.flags&(TypeFlagsObject|TypeFlagsIntersection) != 0 {
				invokeOnce(source, target, inferFromObjectTypes)
			}
		}
	}

	inferWithPriority := func(source *Type, target *Type, newPriority InferencePriority) {
		savePriority := priority
		priority |= newPriority
		inferFromTypes(source, target)
		priority = savePriority
	}

	inferFromContravariantTypesWithPriority := func(source *Type, target *Type, newPriority InferencePriority) {
		savePriority := priority
		priority |= newPriority
		inferFromContravariantTypes(source, target)
		priority = savePriority
	}

	inferToMultipleTypesWithPriority := func(source *Type, targets []*Type, targetFlags TypeFlags, newPriority InferencePriority) {
		savePriority := priority
		priority |= newPriority
		inferToMultipleTypes(source, targets, targetFlags)
		priority = savePriority
	}

	// Ensure an inference action is performed only once for the given source and target types.
	// This includes two things:
	// Avoiding inferring between the same pair of source and target types,
	// and avoiding circularly inferring between source and target types.
	// For an example of the last, consider if we are inferring between source type
	// `type Deep<T> = { next: Deep<Deep<T>> }` and target type `type Loop<U> = { next: Loop<U> }`.
	// We would then infer between the types of the `next` property: `Deep<Deep<T>>` = `{ next: Deep<Deep<Deep<T>>> }` and `Loop<U>` = `{ next: Loop<U> }`.
	// We will then infer again between the types of the `next` property:
	// `Deep<Deep<Deep<T>>>` and `Loop<U>`, and so on, such that we would be forever inferring
	// between instantiations of the same types `Deep` and `Loop`.
	// In particular, we would be inferring from increasingly deep instantiations of `Deep` to `Loop`,
	// such that we would go on inferring forever, even though we would never infer
	// between the same pair of types.
	invokeOnce := func(source Source, target Target, action func(source Source, target Target)) {
		key := source.id + "," + target.id
		status := visited && visited.get(key)
		if status != nil {
			inferencePriority = min(inferencePriority, status)
			return
		}
		(visited || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: visited = new Map<string, number>() */ TODO)).set(key, InferencePriorityCircularity)
		saveInferencePriority := inferencePriority
		inferencePriority = InferencePriorityMaxValue
		// We stop inferring and report a circularity if we encounter duplicate recursion identities on both
		// the source side and the target side.
		saveExpandingFlags := expandingFlags
		( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: sourceStack ??= [] */ TODO).push(source)
		( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: targetStack ??= [] */ TODO).push(target)
		if c.isDeeplyNestedType(source, sourceStack, sourceStack.length, 2) {
			expandingFlags |= ExpandingFlagsSource
		}
		if c.isDeeplyNestedType(target, targetStack, targetStack.length, 2) {
			expandingFlags |= ExpandingFlagsTarget
		}
		if expandingFlags != ExpandingFlagsBoth {
			action(source, target)
		} else {
			inferencePriority = InferencePriorityCircularity
		}
		targetStack.pop()
		sourceStack.pop()
		expandingFlags = saveExpandingFlags
		visited.set(key, inferencePriority)
		inferencePriority = min(inferencePriority, saveInferencePriority)
	}

	inferFromMatchingTypes := func(sources []*Type, targets []*Type, matches func(s *Type, t *Type) bool) /* TODO(TS-TO-GO) TypeNode TupleType: [Type[], Type[]] */ any {
		var matchedSources *[]*Type
		var matchedTargets *[]*Type
		for _, t := range targets {
			for _, s := range sources {
				if matches(s, t) {
					inferFromTypes(s, t)
					matchedSources = core.AppendIfUnique(matchedSources, s)
					matchedTargets = core.AppendIfUnique(matchedTargets, t)
				}
			}
		}
		return []any{ifElse(matchedSources != nil, core.Filter(sources, func(t *Type) bool {
			return !contains(matchedSources, t)
		}), sources), ifElse(matchedTargets != nil, core.Filter(targets, func(t *Type) bool {
			return !contains(matchedTargets, t)
		}), targets)}
	}

	inferFromTypeArguments := func(sourceTypes []*Type, targetTypes []*Type, variances []VarianceFlags) {
		var count number
		if sourceTypes.length < targetTypes.length {
			count = sourceTypes.length
		} else {
			count = targetTypes.length
		}
		for i := 0; i < count; i++ {
			if i < variances.length && (variances[i]&VarianceFlagsVarianceMask) == VarianceFlagsContravariant {
				inferFromContravariantTypes(sourceTypes[i], targetTypes[i])
			} else {
				inferFromTypes(sourceTypes[i], targetTypes[i])
			}
		}
	}

	inferFromContravariantTypes := func(source *Type, target *Type) {
		contravariant = !contravariant
		inferFromTypes(source, target)
		contravariant = !contravariant
	}

	inferFromContravariantTypesIfStrictFunctionTypes := func(source *Type, target *Type) {
		if c.strictFunctionTypes || priority&InferencePriorityAlwaysStrict != 0 {
			inferFromContravariantTypes(source, target)
		} else {
			inferFromTypes(source, target)
		}
	}

	getInferenceInfoForType := func(t *Type) *InferenceInfo {
		if t.flags&TypeFlagsTypeVariable != 0 {
			for _, inference := range inferences {
				if t == inference.typeParameter {
					return inference
				}
			}
		}
		return nil
	}

	getSingleTypeVariableFromIntersectionTypes := func(types []*Type) *Type {
		var typeVariable *Type
		for _, type_ := range types {
			t := type_.flags&TypeFlagsIntersection && core.Find(type_.AsIntersectionType().types, func(t *Type) bool {
				return getInferenceInfoForType(t) != nil
			})
			if !t || typeVariable != nil && t != typeVariable {
				return nil
			}
			typeVariable = t
		}
		return typeVariable
	}

	inferToMultipleTypes := func(source *Type, targets []*Type, targetFlags TypeFlags) {
		typeVariableCount := 0
		if targetFlags&TypeFlagsUnion != 0 {
			var nakedTypeVariable *Type
			var sources []*Type
			if source.flags&TypeFlagsUnion != 0 {
				sources = source.AsUnionType().types
			} else {
				sources = []*Type{source}
			}
			matched := NewArray[bool](sources.length)
			inferenceCircularity := false
			// First infer to types that are not naked type variables. For each source type we
			// track whether inferences were made from that particular type to some target with
			// equal priority (i.e. of equal quality) to what we would infer for a naked type
			// parameter.
			for _, t := range targets {
				if getInferenceInfoForType(t) != nil {
					nakedTypeVariable = t
					typeVariableCount++
				} else {
					for i := 0; i < sources.length; i++ {
						saveInferencePriority := inferencePriority
						inferencePriority = InferencePriorityMaxValue
						inferFromTypes(sources[i], t)
						if inferencePriority == priority {
							matched[i] = true
						}
						inferenceCircularity = inferenceCircularity || inferencePriority == InferencePriorityCircularity
						inferencePriority = min(inferencePriority, saveInferencePriority)
					}
				}
			}
			if typeVariableCount == 0 {
				// If every target is an intersection of types containing a single naked type variable,
				// make a lower priority inference to that type variable. This handles inferring from
				// 'A | B' to 'T & (X | Y)' where we want to infer 'A | B' for T.
				intersectionTypeVariable := getSingleTypeVariableFromIntersectionTypes(targets)
				if intersectionTypeVariable != nil {
					inferWithPriority(source, intersectionTypeVariable, InferencePriorityNakedTypeVariable)
				}
				return
			}
			// If the target has a single naked type variable and no inference circularities were
			// encountered above (meaning we explored the types fully), create a union of the source
			// types from which no inferences have been made so far and infer from that union to the
			// naked type variable.
			if typeVariableCount == 1 && !inferenceCircularity {
				unmatched := flatMap(sources, func(s *Type, i number) *Type {
					if matched[i] {
						return nil
					} else {
						return s
					}
				})
				if unmatched.length != 0 {
					inferFromTypes(c.getUnionType(unmatched), nakedTypeVariable)
					return
				}
			}
		} else {
			// We infer from types that are not naked type variables first so that inferences we
			// make from nested naked type variables and given slightly higher priority by virtue
			// of being first in the candidates array.
			for _, t := range targets {
				if getInferenceInfoForType(t) != nil {
					typeVariableCount++
				} else {
					inferFromTypes(source, t)
				}
			}
		}
		// Inferences directly to naked type variables are given lower priority as they are
		// less specific. For example, when inferring from Promise<string> to T | Promise<T>,
		// we want to infer string for T, not Promise<string> | string. For intersection types
		// we only infer to single naked type variables.
		if ifElse(targetFlags&TypeFlagsIntersection != 0, typeVariableCount == 1, typeVariableCount > 0) {
			for _, t := range targets {
				if getInferenceInfoForType(t) != nil {
					inferWithPriority(source, t, InferencePriorityNakedTypeVariable)
				}
			}
		}
	}

	inferToMappedType := func(source *Type, target MappedType, constraintType *Type) bool {
		if (constraintType.flags&TypeFlagsUnion != 0) || (constraintType.flags&TypeFlagsIntersection != 0) {
			result := false
			for _, t := range (constraintType /* as (UnionType | IntersectionType) */).types {
				result = inferToMappedType(source, target, t) || result
			}
			return result
		}
		if constraintType.flags&TypeFlagsIndex != 0 {
			// We're inferring from some source type S to a homomorphic mapped type { [P in keyof T]: X },
			// where T is a type variable. Use inferTypeForHomomorphicMappedType to infer a suitable source
			// type and then make a secondary inference from that type to T. We make a secondary inference
			// such that direct inferences to T get priority over inferences to Partial<T>, for example.
			inference := getInferenceInfoForType(constraintType.AsIndexType().type_)
			if inference != nil && !inference.isFixed && !c.isFromInferenceBlockedSource(source) {
				inferredType := c.inferTypeForHomomorphicMappedType(source, target, constraintType.AsIndexType())
				if inferredType != nil {
					// We assign a lower priority to inferences made from types containing non-inferrable
					// types because we may only have a partial result (i.e. we may have failed to make
					// reverse inferences for some properties).
					inferWithPriority(inferredType, inference.typeParameter, ifElse(getObjectFlags(source)&ObjectFlagsNonInferrableType != 0, InferencePriorityPartialHomomorphicMappedType, InferencePriorityHomomorphicMappedType))
				}
			}
			return true
		}
		if constraintType.flags&TypeFlagsTypeParameter != 0 {
			// We're inferring from some source type S to a mapped type { [P in K]: X }, where K is a type
			// parameter. First infer from 'keyof S' to K.
			inferWithPriority(c.getIndexType(source, ifElse(source.pattern != nil, IndexFlagsNoIndexSignatures, IndexFlagsNone) /*indexFlags*/), constraintType, InferencePriorityMappedTypeConstraint)
			// If K is constrained to a type C, also infer to C. Thus, for a mapped type { [P in K]: X },
			// where K extends keyof T, we make the same inferences as for a homomorphic mapped type
			// { [P in keyof T]: X }. This enables us to make meaningful inferences when the target is a
			// Pick<T, K>.
			extendedConstraint := c.getConstraintOfType(constraintType)
			if extendedConstraint != nil && inferToMappedType(source, target, extendedConstraint) {
				return true
			}
			// If no inferences can be made to K's constraint, infer from a union of the property types
			// in the source to the template type X.
			propTypes := core.Map(c.getPropertiesOfType(source), c.getTypeOfSymbol)
			indexTypes := core.Map(c.getIndexInfosOfType(source), func(info IndexInfo) *Type {
				if info != c.enumNumberIndexInfo {
					return info.type_
				} else {
					return c.neverType
				}
			})
			inferFromTypes(c.getUnionType(core.Concatenate(propTypes, indexTypes)), c.getTemplateTypeFromMappedType(target))
			return true
		}
		return false
	}

	inferToConditionalType := func(source *Type, target ConditionalType) {
		if source.flags&TypeFlagsConditional != 0 {
			inferFromTypes(source.AsConditionalType().checkType, target.checkType)
			inferFromTypes(source.AsConditionalType().extendsType, target.extendsType)
			inferFromTypes(c.getTrueTypeFromConditionalType(source.AsConditionalType()), c.getTrueTypeFromConditionalType(target))
			inferFromTypes(c.getFalseTypeFromConditionalType(source.AsConditionalType()), c.getFalseTypeFromConditionalType(target))
		} else {
			targetTypes := []*Type{c.getTrueTypeFromConditionalType(target), c.getFalseTypeFromConditionalType(target)}
			inferToMultipleTypesWithPriority(source, targetTypes, target.flags, ifElse(contravariant, InferencePriorityContravariantConditional, 0))
		}
	}

	inferToTemplateLiteralType := func(source *Type, target TemplateLiteralType) {
		matches := c.inferTypesFromTemplateLiteralType(source, target)
		types := target.types
		// When the target template literal contains only placeholders (meaning that inference is intended to extract
		// single characters and remainder strings) and inference fails to produce matches, we want to infer 'never' for
		// each placeholder such that instantiation with the inferred value(s) produces 'never', a type for which an
		// assignment check will fail. If we make no inferences, we'll likely end up with the constraint 'string' which,
		// upon instantiation, would collapse all the placeholders to just 'string', and an assignment check might
		// succeed. That would be a pointless and confusing outcome.
		if matches != nil || core.Every(target.texts, func(s string) bool {
			return s.length == 0
		}) {
			for i := 0; i < types.length; i++ {
				var source *Type
				if matches != nil {
					source = matches[i]
				} else {
					source = c.neverType
				}
				target := types[i]

				// If we are inferring from a string literal type to a type variable whose constraint includes one of the
				// allowed template literal placeholder types, infer from a literal type corresponding to the constraint.
				if source.flags&TypeFlagsStringLiteral != 0 && target.flags&TypeFlagsTypeVariable != 0 {
					inferenceContext := getInferenceInfoForType(target)
					var constraint *Type
					if inferenceContext != nil {
						constraint = c.getBaseConstraintOfType(inferenceContext.typeParameter)
					} else {
						constraint = nil
					}
					if constraint != nil && !c.isTypeAny(constraint) {
						var constraintTypes []*Type
						if constraint.flags&TypeFlagsUnion != 0 {
							constraintTypes = constraint.AsUnionType().types
						} else {
							constraintTypes = []*Type{constraint}
						}
						var allTypeFlags TypeFlags = reduceLeft(constraintTypes, func(flags number, t *Type) number {
							return flags | t.flags
						}, 0.(TypeFlags))

						// If the constraint contains `string`, we don't need to look for a more preferred type
						if allTypeFlags&TypeFlagsString == 0 {
							str := source.AsStringLiteralType().value

							// If the type contains `number` or a number literal and the string isn't a valid number, exclude numbers
							if allTypeFlags&TypeFlagsNumberLike != 0 && !c.isValidNumberString(str, true /*roundTripOnly*/) {
								allTypeFlags &^= TypeFlagsNumberLike
							}

							// If the type contains `bigint` or a bigint literal and the string isn't a valid bigint, exclude bigints
							if allTypeFlags&TypeFlagsBigIntLike != 0 && !isValidBigIntString(str, true /*roundTripOnly*/) {
								allTypeFlags &^= TypeFlagsBigIntLike
							}

							// for each type in the constraint, find the highest priority matching type
							matchingType := reduceLeft(constraintTypes, func(left *Type, right *Type) *Type {
								switch {
								case right.flags&allTypeFlags == 0:
									return left
								case left.flags&TypeFlagsString != 0:
									return left
								case right.flags&TypeFlagsString != 0:
									return source
								case left.flags&TypeFlagsTemplateLiteral != 0:
									return left
								case right.flags&TypeFlagsTemplateLiteral != 0 && c.isTypeMatchedByTemplateLiteralType(source, right.AsTemplateLiteralType()):
									return source
								case left.flags&TypeFlagsStringMapping != 0:
									return left
								case right.flags&TypeFlagsStringMapping != 0 && str == c.applyStringMapping(right.symbol, str):
									return source
								case left.flags&TypeFlagsStringLiteral != 0:
									return left
								case right.flags&TypeFlagsStringLiteral != 0 && right.AsStringLiteralType().value == str:
									return right
								case left.flags&TypeFlagsNumber != 0:
									return left
								case right.flags&TypeFlagsNumber != 0:
									return c.getNumberLiteralType(+str)
								case left.flags&TypeFlagsEnum != 0:
									return left
								case right.flags&TypeFlagsEnum != 0:
									return c.getNumberLiteralType(+str)
								case left.flags&TypeFlagsNumberLiteral != 0:
									return left
								case right.flags&TypeFlagsNumberLiteral != 0 && right.AsNumberLiteralType().value == +str:
									return right
								case left.flags&TypeFlagsBigInt != 0:
									return left
								case right.flags&TypeFlagsBigInt != 0:
									return c.parseBigIntLiteralType(str)
								case left.flags&TypeFlagsBigIntLiteral != 0:
									return left
								case right.flags&TypeFlagsBigIntLiteral != 0 && pseudoBigIntToString(right.AsBigIntLiteralType().value) == str:
									return right
								case left.flags&TypeFlagsBoolean != 0:
									return left
								case right.flags&TypeFlagsBoolean != 0:
									switch {
									case str == "true":
										return c.trueType
									case str == "false":
										return c.falseType
									default:
										return c.booleanType
									}
								case left.flags&TypeFlagsBooleanLiteral != 0:
									return left
								case right.flags&TypeFlagsBooleanLiteral != 0 && right.AsIntrinsicType().intrinsicName == str:
									return right
								case left.flags&TypeFlagsUndefined != 0:
									return left
								case right.flags&TypeFlagsUndefined != 0 && right.AsIntrinsicType().intrinsicName == str:
									return right
								case left.flags&TypeFlagsNull != 0:
									return left
								case right.flags&TypeFlagsNull != 0 && right.AsIntrinsicType().intrinsicName == str:
									return right
								default:
									return left
								}
							}, c.neverType.AsType())

							if matchingType.flags&TypeFlagsNever == 0 {
								inferFromTypes(matchingType, target)
								continue
							}
						}
					}
				}

				inferFromTypes(source, target)
			}
		}
	}

	inferFromGenericMappedTypes := func(source MappedType, target MappedType) {
		// The source and target types are generic types { [P in S]: X } and { [P in T]: Y }, so we infer
		// from S to T and from X to Y.
		inferFromTypes(c.getConstraintTypeFromMappedType(source), c.getConstraintTypeFromMappedType(target))
		inferFromTypes(c.getTemplateTypeFromMappedType(source), c.getTemplateTypeFromMappedType(target))
		sourceNameType := c.getNameTypeFromMappedType(source)
		targetNameType := c.getNameTypeFromMappedType(target)
		if sourceNameType != nil && targetNameType != nil {
			inferFromTypes(sourceNameType, targetNameType)
		}
	}

	inferFromObjectTypes := func(source *Type, target *Type) {
		if getObjectFlags(source)&ObjectFlagsReference != 0 && getObjectFlags(target)&ObjectFlagsReference != 0 && (source.AsTypeReference().target == target.AsTypeReference().target || c.isArrayType(source) && c.isArrayType(target)) {
			// If source and target are references to the same generic type, infer from type arguments
			inferFromTypeArguments(c.getTypeArguments(source.AsTypeReference()), c.getTypeArguments(target.AsTypeReference()), c.getVariances(source.AsTypeReference().target))
			return
		}
		if c.isGenericMappedType(source) && c.isGenericMappedType(target) {
			inferFromGenericMappedTypes(source, target)
		}
		if getObjectFlags(target)&ObjectFlagsMapped != 0 && target.AsMappedType().declaration.NameType == nil {
			constraintType := c.getConstraintTypeFromMappedType(target.AsMappedType())
			if inferToMappedType(source, target.AsMappedType(), constraintType) {
				return
			}
		}
		// Infer from the members of source and target only if the two types are possibly related
		if !c.typesDefinitelyUnrelated(source, target) {
			if c.isArrayOrTupleType(source) {
				if c.isTupleType(target) {
					sourceArity := c.getTypeReferenceArity(source)
					targetArity := c.getTypeReferenceArity(target)
					elementTypes := c.getTypeArguments(target)
					elementFlags := target.target.elementFlags
					// When source and target are tuple types with the same structure (fixed, variadic, and rest are matched
					// to the same kind in each position), simply infer between the element types.
					if c.isTupleType(source) && c.isTupleTypeStructureMatching(source, target) {
						for i := 0; i < targetArity; i++ {
							inferFromTypes(c.getTypeArguments(source)[i], elementTypes[i])
						}
						return
					}
					var startLength number
					if c.isTupleType(source) {
						startLength = min(source.target.fixedLength, target.target.fixedLength)
					} else {
						startLength = 0
					}
					endLength := min(ifElse(c.isTupleType(source), c.getEndElementCount(source.target, ElementFlagsFixed), 0), ifElse(target.target.combinedFlags&ElementFlagsVariable != 0, c.getEndElementCount(target.target, ElementFlagsFixed), 0))
					// Infer between starting fixed elements.
					for i := 0; i < startLength; i++ {
						inferFromTypes(c.getTypeArguments(source)[i], elementTypes[i])
					}
					if !c.isTupleType(source) || sourceArity-startLength-endLength == 1 && source.target.elementFlags[startLength]&ElementFlagsRest != 0 {
						// Single rest element remains in source, infer from that to every element in target
						restType := c.getTypeArguments(source)[startLength]
						for i := startLength; i < targetArity-endLength; i++ {
							inferFromTypes(ifElse(elementFlags[i]&ElementFlagsVariadic != 0, c.createArrayType(restType), restType), elementTypes[i])
						}
					} else {
						middleLength := targetArity - startLength - endLength
						if middleLength == 2 {
							if elementFlags[startLength]&elementFlags[startLength+1]&ElementFlagsVariadic != 0 {
								// Middle of target is [...T, ...U] and source is tuple type
								targetInfo := getInferenceInfoForType(elementTypes[startLength])
								if targetInfo != nil && targetInfo.impliedArity != nil {
									// Infer slices from source based on implied arity of T.
									inferFromTypes(c.sliceTupleType(source, startLength, endLength+sourceArity-targetInfo.impliedArity), elementTypes[startLength])
									inferFromTypes(c.sliceTupleType(source, startLength+targetInfo.impliedArity, endLength), elementTypes[startLength+1])
								}
							} else if elementFlags[startLength]&ElementFlagsVariadic != 0 && elementFlags[startLength+1]&ElementFlagsRest != 0 {
								// Middle of target is [...T, ...rest] and source is tuple type
								// if T is constrained by a fixed-size tuple we might be able to use its arity to infer T
								param := getInferenceInfoForType(elementTypes[startLength]). /* ? */ typeParameter
								constraint := param && c.getBaseConstraintOfType(param)
								if constraint != nil && c.isTupleType(constraint) && constraint.target.combinedFlags&ElementFlagsVariable == 0 {
									impliedArity := constraint.target.fixedLength
									inferFromTypes(c.sliceTupleType(source, startLength, sourceArity-(startLength+impliedArity)), elementTypes[startLength])
									inferFromTypes(c.getElementTypeOfSliceOfTupleType(source, startLength+impliedArity, endLength), elementTypes[startLength+1])
								}
							} else if elementFlags[startLength]&ElementFlagsRest != 0 && elementFlags[startLength+1]&ElementFlagsVariadic != 0 {
								// Middle of target is [...rest, ...T] and source is tuple type
								// if T is constrained by a fixed-size tuple we might be able to use its arity to infer T
								param := getInferenceInfoForType(elementTypes[startLength+1]). /* ? */ typeParameter
								constraint := param && c.getBaseConstraintOfType(param)
								if constraint != nil && c.isTupleType(constraint) && constraint.target.combinedFlags&ElementFlagsVariable == 0 {
									impliedArity := constraint.target.fixedLength
									endIndex := sourceArity - c.getEndElementCount(target.target, ElementFlagsFixed)
									startIndex := endIndex - impliedArity
									trailingSlice := c.createTupleType(c.getTypeArguments(source).slice(startIndex, endIndex), source.target.elementFlags.slice(startIndex, endIndex), false /*readonly*/, source.target.labeledElementDeclarations && source.target.labeledElementDeclarations.slice(startIndex, endIndex))

									inferFromTypes(c.getElementTypeOfSliceOfTupleType(source, startLength, endLength+impliedArity), elementTypes[startLength])
									inferFromTypes(trailingSlice, elementTypes[startLength+1])
								}
							}
						} else if middleLength == 1 && elementFlags[startLength]&ElementFlagsVariadic != 0 {
							// Middle of target is exactly one variadic element. Infer the slice between the fixed parts in the source.
							// If target ends in optional element(s), make a lower priority a speculative inference.
							endsInOptional := target.target.elementFlags[targetArity-1] & ElementFlagsOptional
							sourceSlice := c.sliceTupleType(source, startLength, endLength)
							inferWithPriority(sourceSlice, elementTypes[startLength], ifElse(endsInOptional != 0, InferencePrioritySpeculativeTuple, 0))
						} else if middleLength == 1 && elementFlags[startLength]&ElementFlagsRest != 0 {
							// Middle of target is exactly one rest element. If middle of source is not empty, infer union of middle element types.
							restType := c.getElementTypeOfSliceOfTupleType(source, startLength, endLength)
							if restType != nil {
								inferFromTypes(restType, elementTypes[startLength])
							}
						}
					}
					// Infer between ending fixed elements
					for i := 0; i < endLength; i++ {
						inferFromTypes(c.getTypeArguments(source)[sourceArity-i-1], elementTypes[targetArity-i-1])
					}
					return
				}
				if c.isArrayType(target) {
					inferFromIndexTypes(source, target)
					return
				}
			}
			inferFromProperties(source, target)
			inferFromSignatures(source, target, SignatureKindCall)
			inferFromSignatures(source, target, SignatureKindConstruct)
			inferFromIndexTypes(source, target)
		}
	}

	inferFromProperties := func(source *Type, target *Type) {
		properties := c.getPropertiesOfObjectType(target)
		for _, targetProp := range properties {
			sourceProp := c.getPropertyOfType(source, targetProp.EscapedName)
			if sourceProp != nil && !core.Some(sourceProp.Declarations, c.hasSkipDirectInferenceFlag) {
				inferFromTypes(c.removeMissingType(c.getTypeOfSymbol(sourceProp), sourceProp.Flags&ast.SymbolFlagsOptional != 0), c.removeMissingType(c.getTypeOfSymbol(targetProp), targetProp.Flags&ast.SymbolFlagsOptional != 0))
			}
		}
	}

	inferFromSignatures := func(source *Type, target *Type, kind SignatureKind) {
		sourceSignatures := c.getSignaturesOfType(source, kind)
		sourceLen := sourceSignatures.length
		if sourceLen > 0 {
			// We match source and target signatures from the bottom up, and if the source has fewer signatures
			// than the target, we infer from the first source signature to the excess target signatures.
			targetSignatures := c.getSignaturesOfType(target, kind)
			targetLen := targetSignatures.length
			for i := 0; i < targetLen; i++ {
				sourceIndex := max(sourceLen-targetLen+i, 0)
				inferFromSignature(c.getBaseSignature(sourceSignatures[sourceIndex]), c.getErasedSignature(targetSignatures[i]))
			}
		}
	}

	inferFromSignature := func(source Signature, target Signature) {
		if source.flags&SignatureFlagsIsNonInferrable == 0 {
			saveBivariant := bivariant
			var kind /* TODO(TS-TO-GO) inferred type SyntaxKind.Unknown | SyntaxKind.MethodSignature | SyntaxKind.MethodDeclaration | SyntaxKind.Constructor | SyntaxKind.GetAccessor | SyntaxKind.SetAccessor | SyntaxKind.CallSignature | SyntaxKind.ConstructSignature | SyntaxKind.IndexSignature | SyntaxKind.FunctionType | SyntaxKind.ConstructorType | SyntaxKind.FunctionExpression | SyntaxKind.ArrowFunction | SyntaxKind.FunctionDeclaration | SyntaxKind.JSDocFunctionType | SyntaxKind.JSDocSignature */ any
			if target.declaration != nil {
				kind = target.declaration.Kind
			} else {
				kind = ast.KindUnknown
			}
			// Once we descend into a bivariant signature we remain bivariant for all nested inferences
			bivariant = bivariant || kind == ast.KindMethodDeclaration || kind == ast.KindMethodSignature || kind == ast.KindConstructor
			c.applyToParameterTypes(source, target, inferFromContravariantTypesIfStrictFunctionTypes)
			bivariant = saveBivariant
		}
		c.applyToReturnTypes(source, target, inferFromTypes)
	}

	inferFromIndexTypes := func(source *Type, target *Type) {
		// Inferences across mapped type index signatures are pretty much the same a inferences to homomorphic variables
		var priority /* TODO(TS-TO-GO) inferred type 0 | InferencePriority.HomomorphicMappedType */ any
		if getObjectFlags(source)&getObjectFlags(target)&ObjectFlagsMapped != 0 {
			priority = InferencePriorityHomomorphicMappedType
		} else {
			priority = 0
		}
		indexInfos := c.getIndexInfosOfType(target)
		if c.isObjectTypeWithInferableIndex(source) {
			for _, targetInfo := range indexInfos {
				var propTypes []*Type = []never{}
				for _, prop := range c.getPropertiesOfType(source) {
					if c.isApplicableIndexType(c.getLiteralTypeFromProperty(prop, TypeFlagsStringOrNumberLiteralOrUnique), targetInfo.keyType) {
						propType := c.getTypeOfSymbol(prop)
						propTypes.push(ifElse(prop.Flags&ast.SymbolFlagsOptional != 0, c.removeMissingOrUndefinedType(propType), propType))
					}
				}
				for _, info := range c.getIndexInfosOfType(source) {
					if c.isApplicableIndexType(info.keyType, targetInfo.keyType) {
						propTypes.push(info.type_)
					}
				}
				if propTypes.length != 0 {
					inferWithPriority(c.getUnionType(propTypes), targetInfo.type_, priority)
				}
			}
		}
		for _, targetInfo := range indexInfos {
			sourceInfo := c.getApplicableIndexInfo(source, targetInfo.keyType)
			if sourceInfo != nil {
				inferWithPriority(sourceInfo.type_, targetInfo.type_, priority)
			}
		}
	}

}

func (c *Checker) isTypeOrBaseIdenticalTo(s *Type, t *Type) bool {
	if t == c.missingType {
		return s == t
	} else {
		return (c.isTypeIdenticalTo(s, t) || t.flags&TypeFlagsString != 0 && s.flags&TypeFlagsStringLiteral != 0 || t.flags&TypeFlagsNumber != 0 && s.flags&TypeFlagsNumberLiteral != 0)
	}
}

func (c *Checker) isTypeCloselyMatchedBy(s *Type, t *Type) bool {
	return s.flags&TypeFlagsObject != 0 && t.flags&TypeFlagsObject != 0 && s.symbol && s.symbol == t.symbol || s.aliasSymbol != nil && s.aliasTypeArguments != nil && s.aliasSymbol == t.aliasSymbol
}

func (c *Checker) hasPrimitiveConstraint(t TypeParameter) bool {
	constraint := c.getConstraintOfTypeParameter(t)
	return constraint != nil && c.maybeTypeOfKind(ifElse(constraint.flags&TypeFlagsConditional != 0, c.getDefaultConstraintOfConditionalType(constraint.AsConditionalType()), constraint), TypeFlagsPrimitive|TypeFlagsIndex|TypeFlagsTemplateLiteral|TypeFlagsStringMapping)
}

func (c *Checker) isObjectLiteralType(t *Type) bool {
	return getObjectFlags(t)&ObjectFlagsObjectLiteral != 0
}

func (c *Checker) isObjectOrArrayLiteralType(t *Type) bool {
	return getObjectFlags(t)&(ObjectFlagsObjectLiteral|ObjectFlagsArrayLiteral) != 0
}

func (c *Checker) unionObjectAndArrayLiteralCandidates(candidates []*Type) []*Type {
	if candidates.length > 1 {
		objectLiterals := core.Filter(candidates, c.isObjectOrArrayLiteralType)
		if objectLiterals.length != 0 {
			literalsType := c.getUnionType(objectLiterals, UnionReductionSubtype)
			return core.Concatenate(core.Filter(candidates, func(t *Type) bool {
				return !c.isObjectOrArrayLiteralType(t)
			}), []*Type{literalsType})
		}
	}
	return candidates
}

func (c *Checker) getContravariantInference(inference InferenceInfo) *Type {
	if inference.priority&InferencePriorityPriorityImpliesCombination != 0 {
		return c.getIntersectionType(inference.contraCandidates)
	} else {
		return c.getCommonSubtype(inference.contraCandidates)
	}
}

func (c *Checker) getCovariantInference(inference InferenceInfo, signature Signature) *Type {
	// Extract all object and array literal types and replace them with a single widened and normalized type.
	candidates := c.unionObjectAndArrayLiteralCandidates(inference.candidates)
	// We widen inferred literal types if
	// all inferences were made to top-level occurrences of the type parameter, and
	// the type parameter has no constraint or its constraint includes no primitive or literal types, and
	// the type parameter was fixed during inference or does not occur at top-level in the return type.
	primitiveConstraint := c.hasPrimitiveConstraint(inference.typeParameter) || c.isConstTypeVariable(inference.typeParameter)
	widenLiteralTypes := !primitiveConstraint && inference.topLevel && (inference.isFixed || !c.isTypeParameterAtTopLevelInReturnType(signature, inference.typeParameter))
	var baseCandidates []*Type
	switch {
	case primitiveConstraint:
		baseCandidates = core.SameMap(candidates, c.getRegularTypeOfLiteralType)
	case widenLiteralTypes:
		baseCandidates = core.SameMap(candidates, c.getWidenedLiteralType)
	default:
		baseCandidates = candidates
	}
	// If all inferences were made from a position that implies a combined result, infer a union type.
	// Otherwise, infer a common supertype.
	var unwidenedType *Type
	if inference.priority&InferencePriorityPriorityImpliesCombination != 0 {
		unwidenedType = c.getUnionType(baseCandidates, UnionReductionSubtype)
	} else {
		unwidenedType = c.getCommonSupertype(baseCandidates)
	}
	return c.getWidenedType(unwidenedType)
}

func (c *Checker) getInferredType(context InferenceContext, index number) *Type {
	inference := context.inferences[index]
	if inference.inferredType == nil {
		var inferredType *Type
		var fallbackType *Type
		if context.signature != nil {
			var inferredCovariantType *Type
			if inference.candidates != nil {
				inferredCovariantType = c.getCovariantInference(inference, context.signature)
			} else {
				inferredCovariantType = nil
			}
			var inferredContravariantType *Type
			if inference.contraCandidates != nil {
				inferredContravariantType = c.getContravariantInference(inference)
			} else {
				inferredContravariantType = nil
			}
			if inferredCovariantType != nil || inferredContravariantType != nil {
				// If we have both co- and contra-variant inferences, we prefer the co-variant inference if it is not 'never',
				// all co-variant inferences are assignable to it (i.e. it isn't one of a conflicting set of candidates), it is
				// assignable to some contra-variant inference, and no other type parameter is constrained to this type parameter
				// and has inferences that would conflict. Otherwise, we prefer the contra-variant inference.
				// Similarly ignore co-variant `any` inference when both are available as almost everything is assignable to it
				// and it would spoil the overall inference.
				preferCovariantType := inferredCovariantType && (inferredContravariantType == nil || inferredCovariantType.flags&(TypeFlagsNever|TypeFlagsAny) == 0 && core.Some(inference.contraCandidates, func(t *Type) bool {
					return c.isTypeAssignableTo(inferredCovariantType, t)
				}) && core.Every(context.inferences, func(other InferenceInfo) bool {
					return other != inference && c.getConstraintOfTypeParameter(other.typeParameter) != inference.typeParameter || core.Every(other.candidates, func(t *Type) bool {
						return c.isTypeAssignableTo(t, inferredCovariantType)
					})
				}))
				if preferCovariantType {
					inferredType = inferredCovariantType
				} else {
					inferredType = inferredContravariantType
				}
				if preferCovariantType {
					fallbackType = inferredContravariantType
				} else {
					fallbackType = inferredCovariantType
				}
			} else if context.flags&InferenceFlagsNoDefault != 0 {
				// We use silentNeverType as the wildcard that signals no inferences.
				inferredType = c.silentNeverType
			} else {
				// Infer either the default or the empty object type when no inferences were
				// made. It is important to remember that in this case, inference still
				// succeeds, meaning there is no error for not having inference candidates. An
				// inference error only occurs when there are *conflicting* candidates, i.e.
				// candidates with no common supertype.
				defaultType := c.getDefaultFromTypeParameter(inference.typeParameter)
				if defaultType != nil {
					// Instantiate the default type. Any forward reference to a type
					// parameter should be instantiated to the empty object type.
					inferredType = c.instantiateType(defaultType, c.mergeTypeMappers(c.createBackreferenceMapper(context, index), context.nonFixingMapper))
				}
			}
		} else {
			inferredType = c.getTypeFromInference(inference)
		}

		inference.inferredType = inferredType || c.getDefaultTypeArgumentType(context.flags&InferenceFlagsAnyDefault != 0)

		constraint := c.getConstraintOfTypeParameter(inference.typeParameter)
		if constraint != nil {
			instantiatedConstraint := c.instantiateType(constraint, context.nonFixingMapper)
			if inferredType == nil || context.compareTypes(inferredType, c.getTypeWithThisArgument(instantiatedConstraint, inferredType)) == 0 {
				// If the fallback type satisfies the constraint, we pick it. Otherwise, we pick the constraint.
				if fallbackType != nil && context.compareTypes(fallbackType, c.getTypeWithThisArgument(instantiatedConstraint, fallbackType)) != 0 {
					inference.inferredType = fallbackType
				} else {
					inference.inferredType = instantiatedConstraint
				}
			}
		}
	}

	return inference.inferredType
}

func (c *Checker) getDefaultTypeArgumentType(isInJavaScriptFile bool) *Type {
	if isInJavaScriptFile {
		return c.anyType
	} else {
		return c.unknownType
	}
}

func (c *Checker) getInferredTypes(context InferenceContext) []*Type {
	var result []*Type = []never{}
	for i := 0; i < context.inferences.length; i++ {
		result.push(c.getInferredType(context, i))
	}
	return result
}

// EXPRESSION TYPE CHECKING

func (c *Checker) getCannotFindNameDiagnosticForName(node Identifier) DiagnosticMessage {
	switch node.EscapedText {
	case "document",
		"console":
		return Diagnostics.Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_include_dom
	case "$":
		if c.compilerOptions.types != nil {
			return Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slashjquery_and_then_add_jquery_to_the_types_field_in_your_tsconfig
		} else {
			return Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slashjquery
		}
	case "describe",
		"suite",
		"it",
		"test":
		if c.compilerOptions.types != nil {
			return Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_types_Slashjest_or_npm_i_save_dev_types_Slashmocha_and_then_add_jest_or_mocha_to_the_types_field_in_your_tsconfig
		} else {
			return Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_types_Slashjest_or_npm_i_save_dev_types_Slashmocha
		}
	case "process",
		"require",
		"Buffer",
		"module":
		if c.compilerOptions.types != nil {
			return Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashnode_and_then_add_node_to_the_types_field_in_your_tsconfig
		} else {
			return Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashnode
		}
	case "Bun":
		if c.compilerOptions.types != nil {
			return Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_Bun_Try_npm_i_save_dev_types_Slashbun_and_then_add_bun_to_the_types_field_in_your_tsconfig
		} else {
			return Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_Bun_Try_npm_i_save_dev_types_Slashbun
		}
	case "Map",
		"Set",
		"Promise",
		"Symbol",
		"WeakMap",
		"WeakSet",
		"Iterator",
		"AsyncIterator",
		"SharedArrayBuffer",
		"Atomics",
		"AsyncIterable",
		"AsyncIterableIterator",
		"AsyncGenerator",
		"AsyncGeneratorFunction",
		"BigInt",
		"Reflect",
		"BigInt64Array",
		"BigUint64Array":
		return Diagnostics.Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_1_or_later
	case "await":
		if isCallExpression(node.Parent) {
			return Diagnostics.Cannot_find_name_0_Did_you_mean_to_write_this_in_an_async_function
		}
		fallthrough
	default:
		if node.Parent.Kind == ast.KindShorthandPropertyAssignment {
			return Diagnostics.No_value_exists_in_scope_for_the_shorthand_property_0_Either_declare_one_or_provide_an_initializer
		} else {
			return Diagnostics.Cannot_find_name_0
		}
	}
}

func (c *Checker) getResolvedSymbol(node Identifier) *ast.Symbol {
	links := c.getNodeLinks(node)
	if links.resolvedSymbol == nil {
		links.resolvedSymbol = !nodeIsMissing(node) && c.resolveName(node, node, ast.SymbolFlagsValue|ast.SymbolFlagsExportValue, c.getCannotFindNameDiagnosticForName(node), !isWriteOnlyAccess(node), false) || c.unknownSymbol
	}
	return links.resolvedSymbol
}

func (c *Checker) isInAmbientOrTypeNode(node *ast.Node) bool {
	return node.Flags&ast.NodeFlagsAmbient != 0 || findAncestor(node, func(n *ast.Node) bool {
		return isInterfaceDeclaration(n) || isTypeAliasDeclaration(n) || isTypeLiteralNode(n)
	}) != nil
}

// Return the flow cache key for a "dotted name" (i.e. a sequence of identifiers
// separated by dots). The key consists of the id of the symbol referenced by the
// leftmost identifier followed by zero or more property names separated by dots.
// The result is undefined if the reference isn't a dotted name.
func (c *Checker) getFlowCacheKey(node *ast.Node, declaredType *Type, initialType *Type, flowContainer *ast.Node) *string {
	switch node.Kind {
	case ast.KindIdentifier:
		if !isThisInTypeQuery(node) {
			symbol := c.getResolvedSymbol(node.AsIdentifier())
			if symbol != c.unknownSymbol {
				return __TEMPLATE__(ifElse(flowContainer != nil, getNodeId(flowContainer), "-1"), "|", c.getTypeId(declaredType), "|", c.getTypeId(initialType), "|", getSymbolId(symbol))
			} else {
				return nil
			}
		}
		fallthrough
	case ast.KindThisKeyword:
		return __TEMPLATE__("0|", ifElse(flowContainer != nil, getNodeId(flowContainer), "-1"), "|", c.getTypeId(declaredType), "|", c.getTypeId(initialType))
	case ast.KindNonNullExpression,
		ast.KindParenthesizedExpression:
		return c.getFlowCacheKey((node /* as NonNullExpression | ParenthesizedExpression */).Expression, declaredType, initialType, flowContainer)
	case ast.KindQualifiedName:
		left := c.getFlowCacheKey(node.AsQualifiedName().Left, declaredType, initialType, flowContainer)
		return left && __TEMPLATE__(left, ".", node.AsQualifiedName().Right.EscapedText)
	case ast.KindPropertyAccessExpression,
		ast.KindElementAccessExpression:
		propName := c.getAccessedPropertyName(node.AsAccessExpression())
		if propName != nil {
			key := c.getFlowCacheKey(node.AsAccessExpression().Expression, declaredType, initialType, flowContainer)
			return key && __TEMPLATE__(key, ".", propName)
		}
		if isElementAccessExpression(node) && isIdentifier(node.ArgumentExpression) {
			symbol := c.getResolvedSymbol(node.ArgumentExpression)
			if c.isConstantVariable(symbol) || c.isParameterOrMutableLocalVariable(symbol) && !c.isSymbolAssigned(symbol) {
				key := c.getFlowCacheKey(node.AsAccessExpression().Expression, declaredType, initialType, flowContainer)
				return key && __TEMPLATE__(key, ".@", getSymbolId(symbol))
			}
		}
	case ast.KindObjectBindingPattern,
		ast.KindArrayBindingPattern,
		ast.KindFunctionDeclaration,
		ast.KindFunctionExpression,
		ast.KindArrowFunction,
		ast.KindMethodDeclaration:
		// Handle pseudo-references originating in getNarrowedTypeOfSymbol.
		return __TEMPLATE__(getNodeId(node), "#", c.getTypeId(declaredType))
	}
	return nil
}

func (c *Checker) isMatchingReference(source *ast.Node, target *ast.Node) bool {
	switch target.Kind {
	case ast.KindParenthesizedExpression,
		ast.KindNonNullExpression:
		return c.isMatchingReference(source, (target /* as NonNullExpression | ParenthesizedExpression */).Expression)
	case ast.KindBinaryExpression:
		return (isAssignmentExpression(target) && c.isMatchingReference(source, target.Left)) || (isBinaryExpression(target) && target.OperatorToken.Kind == ast.KindCommaToken && c.isMatchingReference(source, target.Right))
	}
	switch source.Kind {
	case ast.KindMetaProperty:
		return target.Kind == ast.KindMetaProperty && source.AsMetaProperty().KeywordToken == target.AsMetaProperty().KeywordToken && source.AsMetaProperty().Name.EscapedText == target.AsMetaProperty().Name.EscapedText
	case ast.KindIdentifier,
		ast.KindPrivateIdentifier:
		if isThisInTypeQuery(source) {
			return target.Kind == ast.KindThisKeyword
		} else {
			return target.Kind == ast.KindIdentifier && c.getResolvedSymbol(source.AsIdentifier()) == c.getResolvedSymbol(target.AsIdentifier()) || (isVariableDeclaration(target) || isBindingElement(target)) && c.getExportSymbolOfValueSymbolIfExported(c.getResolvedSymbol(source.AsIdentifier())) == c.getSymbolOfDeclaration(target)
		}
	case ast.KindThisKeyword:
		return target.Kind == ast.KindThisKeyword
	case ast.KindSuperKeyword:
		return target.Kind == ast.KindSuperKeyword
	case ast.KindNonNullExpression,
		ast.KindParenthesizedExpression:
		return c.isMatchingReference((source /* as NonNullExpression | ParenthesizedExpression */).Expression, target)
	case ast.KindPropertyAccessExpression,
		ast.KindElementAccessExpression:
		sourcePropertyName := c.getAccessedPropertyName(source.AsAccessExpression())
		if sourcePropertyName != nil {
			var targetPropertyName *string
			if isAccessExpression(target) {
				targetPropertyName = c.getAccessedPropertyName(target)
			} else {
				targetPropertyName = nil
			}
			if targetPropertyName != nil {
				return targetPropertyName == sourcePropertyName && c.isMatchingReference(source.AsAccessExpression().Expression, target.AsAccessExpression().Expression)
			}
		}
		if isElementAccessExpression(source) && isElementAccessExpression(target) && isIdentifier(source.ArgumentExpression) && isIdentifier(target.ArgumentExpression) {
			symbol := c.getResolvedSymbol(source.ArgumentExpression)
			if symbol == c.getResolvedSymbol(target.ArgumentExpression) && (c.isConstantVariable(symbol) || c.isParameterOrMutableLocalVariable(symbol) && !c.isSymbolAssigned(symbol)) {
				return c.isMatchingReference(source.Expression, target.Expression)
			}
		}
	case ast.KindQualifiedName:
		return isAccessExpression(target) && source.AsQualifiedName().Right.EscapedText == c.getAccessedPropertyName(target) && c.isMatchingReference(source.AsQualifiedName().Left, target.Expression)
	case ast.KindBinaryExpression:
		return isBinaryExpression(source) && source.OperatorToken.Kind == ast.KindCommaToken && c.isMatchingReference(source.Right, target)
	}
	return false
}

func (c *Checker) getAccessedPropertyName(access Union[AccessExpression, BindingElement, ParameterDeclaration]) *string {
	if isPropertyAccessExpression(access) {
		return access.Name.EscapedText
	}
	if isElementAccessExpression(access) {
		return c.tryGetElementAccessExpressionName(access)
	}
	if isBindingElement(access) {
		name := c.getDestructuringPropertyName(access)
		if name {
			return escapeLeadingUnderscores(name)
		} else {
			return nil
		}
	}
	if isParameter(access) {
		return ("" + access.Parent.Parameters.indexOf(access)).(string)
	}
	return nil
}

func (c *Checker) tryGetNameFromType(t *Type) *string {
	switch {
	case t.flags&TypeFlagsUniqueESSymbol != 0:
		return t.AsUniqueESSymbolType().escapedName
	case t.flags&TypeFlagsStringOrNumberLiteral != 0:
		return escapeLeadingUnderscores("" + (t /* as StringLiteralType | NumberLiteralType */).value)
	default:
		return nil
	}
}

func (c *Checker) tryGetElementAccessExpressionName(node ElementAccessExpression) *string {
	switch {
	case isStringOrNumericLiteralLike(node.ArgumentExpression):
		return escapeLeadingUnderscores(node.ArgumentExpression.Text)
	case isEntityNameExpression(node.ArgumentExpression):
		return c.tryGetNameFromEntityNameExpression(node.ArgumentExpression)
	default:
		return nil
	}
}

func (c *Checker) tryGetNameFromEntityNameExpression(node EntityNameOrEntityNameExpression) *string {
	symbol := c.resolveEntityName(node, ast.SymbolFlagsValue, true /*ignoreErrors*/)
	if symbol == nil || !(c.isConstantVariable(symbol) || (symbol.Flags&ast.SymbolFlagsEnumMember != 0)) {
		return nil
	}

	declaration := symbol.ValueDeclaration
	if declaration == nil {
		return nil
	}

	t := c.tryGetTypeFromEffectiveTypeNode(declaration)
	if t {
		name := c.tryGetNameFromType(t)
		if name != nil {
			return name
		}
	}
	if hasOnlyExpressionInitializer(declaration) && c.isBlockScopedNameDeclaredBeforeUse(declaration, node) {
		initializer := getEffectiveInitializer(declaration)
		if initializer != nil {
			var initializerType *Type
			if isBindingPattern(declaration.Parent) {
				initializerType = c.getTypeForBindingElement(declaration.AsBindingElement())
			} else {
				initializerType = c.getTypeOfExpression(initializer)
			}
			return initializerType && c.tryGetNameFromType(initializerType)
		}
		if isEnumMember(declaration) {
			return getTextOfPropertyName(declaration.Name)
		}
	}
	return nil
}

func (c *Checker) containsMatchingReference(source *ast.Node, target *ast.Node) bool {
	for isAccessExpression(source) {
		source = source.Expression
		if c.isMatchingReference(source, target) {
			return true
		}
	}
	return false
}

func (c *Checker) optionalChainContainsReference(source *ast.Node, target *ast.Node) bool {
	for isOptionalChain(source) {
		source = source.Expression
		if c.isMatchingReference(source, target) {
			return true
		}
	}
	return false
}

func (c *Checker) isDiscriminantProperty(t *Type, name string) bool {
	if t && t.flags&TypeFlagsUnion != 0 {
		prop := c.getUnionOrIntersectionProperty(t.AsUnionType(), name)
		if prop != nil && getCheckFlags(prop)&ast.CheckFlagsSyntheticProperty != 0 {
			// NOTE: cast to TransientSymbol should be safe because only TransientSymbols can have CheckFlags.SyntheticProperty
			if (prop.(TransientSymbol)).Links.isDiscriminantProperty == nil {
				(prop.(TransientSymbol)).Links.isDiscriminantProperty = ((prop.(TransientSymbol)).Links.checkFlags&ast.CheckFlagsDiscriminant) == ast.CheckFlagsDiscriminant && !c.isGenericType(c.getTypeOfSymbol(prop))
			}
			return (prop.(TransientSymbol)).Links.isDiscriminantProperty
		}
	}
	return false
}

func (c *Checker) findDiscriminantProperties(sourceProperties []*ast.Symbol, target *Type) *[]*ast.Symbol {
	var result *[]*ast.Symbol
	for _, sourceProperty := range sourceProperties {
		if c.isDiscriminantProperty(target, sourceProperty.EscapedName) {
			if result != nil {
				result.push(sourceProperty)
				continue
			}
			result = []*ast.Symbol{sourceProperty}
		}
	}
	return result
}

// Given a set of constituent types and a property name, create and return a map keyed by the literal
// types of the property by that name in each constituent type. No map is returned if some key property
// has a non-literal type or if less than 10 or less than 50% of the constituents have a unique key.
// Entries with duplicate keys have unknownType as the value.
func (c *Checker) mapTypesByKeyProperty(types []*Type, name string) *Map[number, *Type] {
	map_ := NewMap[TypeId, *Type]()
	count := 0
	for _, type_ := range types {
		if type_.flags&(TypeFlagsObject|TypeFlagsIntersection|TypeFlagsInstantiableNonPrimitive) != 0 {
			discriminant := c.getTypeOfPropertyOfType(type_, name)
			if discriminant != nil {
				if !c.isLiteralType(discriminant) {
					return nil
				}
				duplicate := false
				c.forEachType(discriminant, func(t *Type) {
					id := c.getTypeId(c.getRegularTypeOfLiteralType(t))
					existing := map_.get(id)
					if existing == nil {
						map_.set(id, type_)
					} else if existing != c.unknownType {
						map_.set(id, c.unknownType)
						duplicate = true
					}
				})
				if !duplicate {
					count++
				}
			}
		}
	}
	if count >= 10 && count*2 >= types.length {
		return map_
	} else {
		return nil
	}
}

// Return the name of a discriminant property for which it was possible and feasible to construct a map of
// constituent types keyed by the literal types of the property by that name in each constituent type.
func (c *Checker) getKeyPropertyName(unionType UnionType) *string {
	types := unionType.types
	// We only construct maps for unions with many non-primitive constituents.
	if types.length < 10 || getObjectFlags(unionType)&ObjectFlagsPrimitiveUnion != 0 || core.CountWhere(types, func(t *Type) bool {
		return t.flags&(TypeFlagsObject|TypeFlagsInstantiableNonPrimitive) != 0
	}) < 10 {
		return nil
	}
	if unionType.keyPropertyName == nil {
		// The candidate key property name is the name of the first property with a unit type in one of the
		// constituent types.
		keyPropertyName := forEach(types, func(t *Type) * /* TODO(TS-TO-GO) inferred type (string & { __escapedIdentifier: void; }) | (void & { __escapedIdentifier: void; }) | InternalSymbolName */ any {
			if t.flags&(TypeFlagsObject|TypeFlagsInstantiableNonPrimitive) != 0 {
				return forEach(c.getPropertiesOfType(t), func(p *ast.Symbol) *string {
					if c.isUnitType(c.getTypeOfSymbol(p)) {
						return p.EscapedName
					} else {
						return nil
					}
				})
			} else {
				return nil
			}
		})
		mapByKeyProperty := keyPropertyName && c.mapTypesByKeyProperty(types, keyPropertyName)
		if mapByKeyProperty != nil {
			unionType.keyPropertyName = keyPropertyName
		} else {
			unionType.keyPropertyName = "" /* as __String */
		}
		unionType.constituentMap = mapByKeyProperty
	}
	if (unionType.keyPropertyName /* as string */).length != 0 {
		return unionType.keyPropertyName
	} else {
		return nil
	}
}

// Given a union type for which getKeyPropertyName returned a non-undefined result, return the constituent
// that corresponds to the given key type for that property name.
func (c *Checker) getConstituentTypeForKeyType(unionType UnionType, keyType *Type) *Type {
	result := unionType.constituentMap. /* ? */ get(c.getTypeId(c.getRegularTypeOfLiteralType(keyType)))
	if result != c.unknownType {
		return result
	} else {
		return nil
	}
}

func (c *Checker) getMatchingUnionConstituentForType(unionType UnionType, t *Type) *Type {
	keyPropertyName := c.getKeyPropertyName(unionType)
	propType := keyPropertyName && c.getTypeOfPropertyOfType(t, keyPropertyName)
	return propType && c.getConstituentTypeForKeyType(unionType, propType)
}

func (c *Checker) getMatchingUnionConstituentForObjectLiteral(unionType UnionType, node ObjectLiteralExpression) *Type {
	keyPropertyName := c.getKeyPropertyName(unionType)
	propNode := keyPropertyName && core.Find(node.Properties, func(p /* TODO(TS-TO-GO) inferred type MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | PropertyAssignment | ShorthandPropertyAssignment | SpreadAssignment */ any) bool {
		return p.Symbol && p.Kind == ast.KindPropertyAssignment && p.Symbol.EscapedName == keyPropertyName && c.isPossiblyDiscriminantValue(p.Initializer)
	})
	propType := propNode && c.getContextFreeTypeOfExpression(propNode.AsPropertyAssignment().Initializer)
	return propType && c.getConstituentTypeForKeyType(unionType, propType)
}

func (c *Checker) isOrContainsMatchingReference(source *ast.Node, target *ast.Node) bool {
	return c.isMatchingReference(source, target) || c.containsMatchingReference(source, target)
}

func (c *Checker) hasMatchingArgument(expression Union[CallExpression, NewExpression], reference *ast.Node) bool {
	if expression.Arguments != nil {
		for _, argument := range expression.Arguments {
			if c.isOrContainsMatchingReference(reference, argument) || c.optionalChainContainsReference(argument, reference) {
				return true
			}
		}
	}
	if expression.Expression.Kind == ast.KindPropertyAccessExpression && c.isOrContainsMatchingReference(reference, expression.Expression.AsPropertyAccessExpression().Expression) {
		return true
	}
	return false
}

func (c *Checker) getFlowNodeId(flow FlowNode) number {
	if flow.id <= 0 {
		flow.id = nextFlowId
		nextFlowId++
	}
	return flow.id
}

func (c *Checker) typeMaybeAssignableTo(source *Type, target *Type) bool {
	if source.flags&TypeFlagsUnion == 0 {
		return c.isTypeAssignableTo(source, target)
	}
	for _, t := range source.AsUnionType().types {
		if c.isTypeAssignableTo(t, target) {
			return true
		}
	}
	return false
}

// Remove those constituent types of declaredType to which no constituent type of assignedType is assignable.
// For example, when a variable of type number | string | boolean is assigned a value of type number | boolean,
// we remove type string.
func (c *Checker) getAssignmentReducedType(declaredType UnionType, assignedType *Type) *Type {
	if declaredType == assignedType {
		return declaredType
	}
	if assignedType.flags&TypeFlagsNever != 0 {
		return assignedType
	}
	key := __TEMPLATE__("A", c.getTypeId(declaredType), ",", c.getTypeId(assignedType))
	return ifNotNilElse(c.getCachedType(key), c.setCachedType(key, c.getAssignmentReducedTypeWorker(declaredType, assignedType)))
}

func (c *Checker) getAssignmentReducedTypeWorker(declaredType UnionType, assignedType *Type) *Type {
	filteredType := c.filterType(declaredType, func(t *Type) bool {
		return c.typeMaybeAssignableTo(assignedType, t)
	})
	// Ensure that we narrow to fresh types if the assignment is a fresh boolean literal type.
	var reducedType *Type
	if assignedType.flags&TypeFlagsBooleanLiteral != 0 && c.isFreshLiteralType(assignedType) {
		reducedType = c.mapType(filteredType, c.getFreshTypeOfLiteralType)
	} else {
		reducedType = filteredType
	}
	// Our crude heuristic produces an invalid result in some cases: see GH#26130.
	// For now, when that happens, we give up and don't narrow at all.  (This also
	// means we'll never narrow for erroneous assignments where the assigned type
	// is not assignable to the declared type.)
	if c.isTypeAssignableTo(assignedType, reducedType) {
		return reducedType
	} else {
		return declaredType
	}
}

func (c *Checker) isFunctionObjectType(t ObjectType) bool {
	if getObjectFlags(t)&ObjectFlagsEvolvingArray != 0 {
		return false
	}
	// We do a quick check for a "bind" property before performing the more expensive subtype
	// check. This gives us a quicker out in the common case where an object type is not a function.
	resolved := c.resolveStructuredTypeMembers(t)
	return resolved.callSignatures.length != 0 || resolved.constructSignatures.length != 0 || resolved.members.get("bind" /* as __String */) != nil && c.isTypeSubtypeOf(t, c.globalFunctionType)
}

func (c *Checker) getTypeFacts(t *Type, mask TypeFacts) TypeFacts {
	return c.getTypeFactsWorker(t, mask) & mask
}

func (c *Checker) hasTypeFacts(t *Type, mask TypeFacts) bool {
	return c.getTypeFacts(t, mask) != 0
}

func (c *Checker) getTypeFactsWorker(t *Type, callerOnlyNeeds TypeFacts) TypeFacts {
	if t.flags&(TypeFlagsIntersection|TypeFlagsInstantiable) != 0 {
		t = c.getBaseConstraintOfType(t) || c.unknownType
	}
	flags := t.flags
	if flags&(TypeFlagsString|TypeFlagsStringMapping) != 0 {
		if c.strictNullChecks {
			return TypeFactsStringStrictFacts
		} else {
			return TypeFactsStringFacts
		}
	}
	if flags&(TypeFlagsStringLiteral|TypeFlagsTemplateLiteral) != 0 {
		isEmpty := flags&TypeFlagsStringLiteral && t.AsStringLiteralType().value == ""
		switch {
		case c.strictNullChecks:
			if isEmpty {
				return TypeFactsEmptyStringStrictFacts
			} else {
				return TypeFactsNonEmptyStringStrictFacts
			}
		case isEmpty:
			return TypeFactsEmptyStringFacts
		default:
			return TypeFactsNonEmptyStringFacts
		}
	}
	if flags&(TypeFlagsNumber|TypeFlagsEnum) != 0 {
		if c.strictNullChecks {
			return TypeFactsNumberStrictFacts
		} else {
			return TypeFactsNumberFacts
		}
	}
	if flags&TypeFlagsNumberLiteral != 0 {
		isZero := t.AsNumberLiteralType().value == 0
		switch {
		case c.strictNullChecks:
			if isZero {
				return TypeFactsZeroNumberStrictFacts
			} else {
				return TypeFactsNonZeroNumberStrictFacts
			}
		case isZero:
			return TypeFactsZeroNumberFacts
		default:
			return TypeFactsNonZeroNumberFacts
		}
	}
	if flags&TypeFlagsBigInt != 0 {
		if c.strictNullChecks {
			return TypeFactsBigIntStrictFacts
		} else {
			return TypeFactsBigIntFacts
		}
	}
	if flags&TypeFlagsBigIntLiteral != 0 {
		isZero := c.isZeroBigInt(t.AsBigIntLiteralType())
		switch {
		case c.strictNullChecks:
			if isZero {
				return TypeFactsZeroBigIntStrictFacts
			} else {
				return TypeFactsNonZeroBigIntStrictFacts
			}
		case isZero:
			return TypeFactsZeroBigIntFacts
		default:
			return TypeFactsNonZeroBigIntFacts
		}
	}
	if flags&TypeFlagsBoolean != 0 {
		if c.strictNullChecks {
			return TypeFactsBooleanStrictFacts
		} else {
			return TypeFactsBooleanFacts
		}
	}
	if flags&TypeFlagsBooleanLike != 0 {
		switch {
		case c.strictNullChecks:
			if t == c.falseType || t == c.regularFalseType {
				return TypeFactsFalseStrictFacts
			} else {
				return TypeFactsTrueStrictFacts
			}
		case (t == c.falseType || t == c.regularFalseType):
			return TypeFactsFalseFacts
		default:
			return TypeFactsTrueFacts
		}
	}
	if flags&TypeFlagsObject != 0 {
		var possibleFacts number
		if c.strictNullChecks {
			possibleFacts = TypeFactsEmptyObjectStrictFacts | TypeFactsFunctionStrictFacts | TypeFactsObjectStrictFacts
		} else {
			possibleFacts = TypeFactsEmptyObjectFacts | TypeFactsFunctionFacts | TypeFactsObjectFacts
		}

		if (callerOnlyNeeds & possibleFacts) == 0 {
			// If the caller doesn't care about any of the facts that we could possibly produce,
			// return zero so we can skip resolving members.
			return 0
		}

		switch {
		case getObjectFlags(t)&ObjectFlagsAnonymous != 0 && c.isEmptyObjectType(t.AsObjectType()):
			if c.strictNullChecks {
				return TypeFactsEmptyObjectStrictFacts
			} else {
				return TypeFactsEmptyObjectFacts
			}
		case c.isFunctionObjectType(t.AsObjectType()):
			if c.strictNullChecks {
				return TypeFactsFunctionStrictFacts
			} else {
				return TypeFactsFunctionFacts
			}
		case c.strictNullChecks:
			return TypeFactsObjectStrictFacts
		default:
			return TypeFactsObjectFacts
		}
	}
	if flags&TypeFlagsVoid != 0 {
		return TypeFactsVoidFacts
	}
	if flags&TypeFlagsUndefined != 0 {
		return TypeFactsUndefinedFacts
	}
	if flags&TypeFlagsNull != 0 {
		return TypeFactsNullFacts
	}
	if flags&TypeFlagsESSymbolLike != 0 {
		if c.strictNullChecks {
			return TypeFactsSymbolStrictFacts
		} else {
			return TypeFactsSymbolFacts
		}
	}
	if flags&TypeFlagsNonPrimitive != 0 {
		if c.strictNullChecks {
			return TypeFactsObjectStrictFacts
		} else {
			return TypeFactsObjectFacts
		}
	}
	if flags&TypeFlagsNever != 0 {
		return TypeFactsNone
	}
	if flags&TypeFlagsUnion != 0 {
		return reduceLeft(t.AsUnionType().types, func(facts number, t *Type) number {
			return facts | c.getTypeFactsWorker(t, callerOnlyNeeds)
		}, TypeFactsNone)
	}
	if flags&TypeFlagsIntersection != 0 {
		return c.getIntersectionTypeFacts(t.AsIntersectionType(), callerOnlyNeeds)
	}
	return TypeFactsUnknownFacts
}

func (c *Checker) getIntersectionTypeFacts(type_ IntersectionType, callerOnlyNeeds TypeFacts) TypeFacts {
	// When an intersection contains a primitive type we ignore object type constituents as they are
	// presumably type tags. For example, in string & { __kind__: "name" } we ignore the object type.
	ignoreObjects := c.maybeTypeOfKind(type_, TypeFlagsPrimitive)
	// When computing the type facts of an intersection type, certain type facts are computed as `and`
	// and others are computed as `or`.
	oredFacts := TypeFactsNone
	andedFacts := TypeFactsAll
	for _, t := range type_.types {
		if !(ignoreObjects && t.flags&TypeFlagsObject != 0) {
			f := c.getTypeFactsWorker(t, callerOnlyNeeds)
			oredFacts |= f
			andedFacts &= f
		}
	}
	return oredFacts&TypeFactsOrFactsMask | andedFacts&TypeFactsAndFactsMask
}

func (c *Checker) getTypeWithFacts(t *Type, include TypeFacts) *Type {
	return c.filterType(t, func(t *Type) bool {
		return c.hasTypeFacts(t, include)
	})
}

// This function is similar to getTypeWithFacts, except that in strictNullChecks mode it replaces type
// unknown with the union {} | null | undefined (and reduces that accordingly), and it intersects remaining
// instantiable types with {}, {} | null, or {} | undefined in order to remove null and/or undefined.
func (c *Checker) getAdjustedTypeWithFacts(t *Type, facts TypeFacts) *Type {
	reduced := c.recombineUnknownType(c.getTypeWithFacts(ifElse(c.strictNullChecks && t.flags&TypeFlagsUnknown != 0, c.unknownUnionType, t), facts))
	if c.strictNullChecks {
		switch facts {
		case TypeFactsNEUndefined:
			return c.removeNullableByIntersection(reduced, TypeFactsEQUndefined, TypeFactsEQNull, TypeFactsIsNull, c.nullType)
		case TypeFactsNENull:
			return c.removeNullableByIntersection(reduced, TypeFactsEQNull, TypeFactsEQUndefined, TypeFactsIsUndefined, c.undefinedType)
		case TypeFactsNEUndefinedOrNull,
			TypeFactsTruthy:
			return c.mapType(reduced, func(t *Type) *Type {
				if c.hasTypeFacts(t, TypeFactsEQUndefinedOrNull) {
					return c.getGlobalNonNullableTypeInstantiation(t)
				} else {
					return t
				}
			})
		}
	}
	return reduced
}

func (c *Checker) removeNullableByIntersection(t *Type, targetFacts TypeFacts, otherFacts TypeFacts, otherIncludesFacts TypeFacts, otherType *Type) *Type {
	facts := c.getTypeFacts(t, TypeFactsEQUndefined|TypeFactsEQNull|TypeFactsIsUndefined|TypeFactsIsNull)
	// Simply return the type if it never compares equal to the target nullable.
	if facts&targetFacts == 0 {
		return t
	}
	// By default we intersect with a union of {} and the opposite nullable.
	emptyAndOtherUnion := c.getUnionType([]*Type{c.emptyObjectType, otherType})
	// For each constituent type that can compare equal to the target nullable, intersect with the above union
	// if the type doesn't already include the opppsite nullable and the constituent can compare equal to the
	// opposite nullable; otherwise, just intersect with {}.
	return c.mapType(t, func(t *Type) *Type {
		if c.hasTypeFacts(t, targetFacts) {
			return c.getIntersectionType([]*Type{t, ifElse(facts&otherIncludesFacts == 0 && c.hasTypeFacts(t, otherFacts), emptyAndOtherUnion, c.emptyObjectType)})
		} else {
			return t
		}
	})
}

func (c *Checker) recombineUnknownType(t *Type) *Type {
	if t == c.unknownUnionType {
		return c.unknownType
	} else {
		return t
	}
}

func (c *Checker) getTypeWithDefault(t *Type, defaultExpression Expression) *Type {
	if defaultExpression {
		return c.getUnionType([]*Type{c.getNonUndefinedType(t), c.getTypeOfExpression(defaultExpression)})
	} else {
		return t
	}
}

func (c *Checker) getTypeOfDestructuredProperty(t *Type, name PropertyName) *Type {
	nameType := c.getLiteralTypeFromPropertyName(name)
	if !isTypeUsableAsPropertyName(nameType) {
		return c.errorType
	}
	text := getPropertyNameFromType(nameType)
	return c.getTypeOfPropertyOfType(t, text) || c.includeUndefinedInIndexSignature(c.getApplicableIndexInfoForName(t, text). /* ? */ type_) || c.errorType
}

func (c *Checker) getTypeOfDestructuredArrayElement(t *Type, index number) *Type {
	return c.everyType(t, c.isTupleLikeType) && c.getTupleElementType(t, index) || c.includeUndefinedInIndexSignature(c.checkIteratedTypeOrElementType(IterationUseDestructuring, t, c.undefinedType, nil /*errorNode*/)) || c.errorType
}

func (c *Checker) includeUndefinedInIndexSignature(t *Type) *Type {
	if !(t) {
		return t
	}
	if c.compilerOptions.noUncheckedIndexedAccess {
		return c.getUnionType([]*Type{t, c.missingType})
	} else {
		return t
	}
}

func (c *Checker) getTypeOfDestructuredSpreadExpression(t *Type) ObjectType {
	return c.createArrayType(c.checkIteratedTypeOrElementType(IterationUseDestructuring, t, c.undefinedType, nil /*errorNode*/) || c.errorType)
}

func (c *Checker) getAssignedTypeOfBinaryExpression(node BinaryExpression) *Type {
	isDestructuringDefaultAssignment := node.Parent.Kind == ast.KindArrayLiteralExpression && c.isDestructuringAssignmentTarget(node.Parent) || node.Parent.Kind == ast.KindPropertyAssignment && c.isDestructuringAssignmentTarget(node.Parent.Parent)
	if isDestructuringDefaultAssignment {
		return c.getTypeWithDefault(c.getAssignedType(node), node.Right)
	} else {
		return c.getTypeOfExpression(node.Right)
	}
}

func (c *Checker) isDestructuringAssignmentTarget(parent *ast.Node) bool {
	return parent.Parent.Kind == ast.KindBinaryExpression && parent.Parent.AsBinaryExpression().Left == parent || parent.Parent.Kind == ast.KindForOfStatement && parent.Parent.AsForOfStatement().Initializer == parent
}

func (c *Checker) getAssignedTypeOfArrayLiteralElement(node ArrayLiteralExpression, element Expression) *Type {
	return c.getTypeOfDestructuredArrayElement(c.getAssignedType(node), node.Elements.indexOf(element))
}

func (c *Checker) getAssignedTypeOfSpreadExpression(node SpreadElement) *Type {
	return c.getTypeOfDestructuredSpreadExpression(c.getAssignedType(node.Parent.AsArrayLiteralExpression()))
}

func (c *Checker) getAssignedTypeOfPropertyAssignment(node Union[PropertyAssignment, ShorthandPropertyAssignment]) *Type {
	return c.getTypeOfDestructuredProperty(c.getAssignedType(node.Parent), node.Name)
}

func (c *Checker) getAssignedTypeOfShorthandPropertyAssignment(node ShorthandPropertyAssignment) *Type {
	return c.getTypeWithDefault(c.getAssignedTypeOfPropertyAssignment(node), node.ObjectAssignmentInitializer)
}

func (c *Checker) getAssignedType(node Expression) *Type {
	TODO_IDENTIFIER := node
	switch parent.Kind {
	case ast.KindForInStatement:
		return c.stringType
	case ast.KindForOfStatement:
		return c.checkRightHandSideOfForOf(parent.AsForOfStatement()) || c.errorType
	case ast.KindBinaryExpression:
		return c.getAssignedTypeOfBinaryExpression(parent.AsBinaryExpression())
	case ast.KindDeleteExpression:
		return c.undefinedType
	case ast.KindArrayLiteralExpression:
		return c.getAssignedTypeOfArrayLiteralElement(parent.AsArrayLiteralExpression(), node)
	case ast.KindSpreadElement:
		return c.getAssignedTypeOfSpreadExpression(parent.AsSpreadElement())
	case ast.KindPropertyAssignment:
		return c.getAssignedTypeOfPropertyAssignment(parent.AsPropertyAssignment())
	case ast.KindShorthandPropertyAssignment:
		return c.getAssignedTypeOfShorthandPropertyAssignment(parent.AsShorthandPropertyAssignment())
	}
	return c.errorType
}

func (c *Checker) getInitialTypeOfBindingElement(node BindingElement) *Type {
	pattern := node.Parent
	parentType := c.getInitialType(pattern.Parent /* as VariableDeclaration | BindingElement */)
	var t *Type
	switch {
	case pattern.Kind == ast.KindObjectBindingPattern:
		t = c.getTypeOfDestructuredProperty(parentType, node.PropertyName || node.Name.AsIdentifier())
	case node.DotDotDotToken == nil:
		t = c.getTypeOfDestructuredArrayElement(parentType, pattern.Elements.indexOf(node))
	default:
		t = c.getTypeOfDestructuredSpreadExpression(parentType)
	}
	return c.getTypeWithDefault(t, node.Initializer)
}

func (c *Checker) getTypeOfInitializer(node Expression) *Type {
	// Return the cached type if one is available. If the type of the variable was inferred
	// from its initializer, we'll already have cached the type. Otherwise we compute it now
	// without caching such that transient types are reflected.
	links := c.getNodeLinks(node)
	return links.resolvedType || c.getTypeOfExpression(node)
}

func (c *Checker) getInitialTypeOfVariableDeclaration(node VariableDeclaration) *Type {
	if node.Initializer != nil {
		return c.getTypeOfInitializer(node.Initializer)
	}
	if node.Parent.Parent.Kind == ast.KindForInStatement {
		return c.stringType
	}
	if node.Parent.Parent.Kind == ast.KindForOfStatement {
		return c.checkRightHandSideOfForOf(node.Parent.Parent) || c.errorType
	}
	return c.errorType
}

func (c *Checker) getInitialType(node Union[VariableDeclaration, BindingElement]) *Type {
	if node.Kind == ast.KindVariableDeclaration {
		return c.getInitialTypeOfVariableDeclaration(node)
	} else {
		return c.getInitialTypeOfBindingElement(node)
	}
}

func (c *Checker) isEmptyArrayAssignment(node Union[VariableDeclaration, BindingElement, Expression]) bool {
	return node.Kind == ast.KindVariableDeclaration && node.AsVariableDeclaration().Initializer && c.isEmptyArrayLiteral(node.AsVariableDeclaration().Initializer) || node.Kind != ast.KindBindingElement && node.Parent.Kind == ast.KindBinaryExpression && c.isEmptyArrayLiteral(node.Parent.AsBinaryExpression().Right)
}

func (c *Checker) getReferenceCandidate(node Expression) Expression {
	switch node.Kind {
	case ast.KindParenthesizedExpression:
		return c.getReferenceCandidate(node.AsParenthesizedExpression().Expression)
	case ast.KindBinaryExpression:
		switch node.AsBinaryExpression().OperatorToken.Kind {
		case ast.KindEqualsToken,
			ast.KindBarBarEqualsToken,
			ast.KindAmpersandAmpersandEqualsToken,
			ast.KindQuestionQuestionEqualsToken:
			return c.getReferenceCandidate(node.AsBinaryExpression().Left)
		case ast.KindCommaToken:
			return c.getReferenceCandidate(node.AsBinaryExpression().Right)
		}
	}
	return node
}

func (c *Checker) getReferenceRoot(node *ast.Node) *ast.Node {
	TODO_IDENTIFIER := node
	if parent.Kind == ast.KindParenthesizedExpression || parent.Kind == ast.KindBinaryExpression && parent.AsBinaryExpression().OperatorToken.Kind == ast.KindEqualsToken && parent.AsBinaryExpression().Left == node || parent.Kind == ast.KindBinaryExpression && parent.AsBinaryExpression().OperatorToken.Kind == ast.KindCommaToken && parent.AsBinaryExpression().Right == node {
		return c.getReferenceRoot(parent)
	} else {
		return node
	}
}

func (c *Checker) getTypeOfSwitchClause(clause Union[CaseClause, DefaultClause]) *Type {
	if clause.Kind == ast.KindCaseClause {
		return c.getRegularTypeOfLiteralType(c.getTypeOfExpression(clause.Expression))
	}
	return c.neverType
}

func (c *Checker) getSwitchClauseTypes(switchStatement SwitchStatement) []*Type {
	links := c.getNodeLinks(switchStatement)
	if links.switchTypes == nil {
		links.switchTypes = []never{}
		for _, clause := range switchStatement.CaseBlock.Clauses {
			links.switchTypes.push(c.getTypeOfSwitchClause(clause))
		}
	}
	return links.switchTypes
}

// Get the type names from all cases in a switch on `typeof`. The default clause and/or duplicate type names are
// represented as undefined. Return undefined if one or more case clause expressions are not string literals.
func (c *Checker) getSwitchClauseTypeOfWitnesses(switchStatement SwitchStatement) *[]*string {
	if core.Some(switchStatement.CaseBlock.Clauses, func(clause /* TODO(TS-TO-GO) inferred type CaseClause | DefaultClause */ any) bool {
		return clause.Kind == ast.KindCaseClause && !isStringLiteralLike(clause.Expression)
	}) {
		return nil
	}
	var witnesses []*string = []never{}
	for _, clause := range switchStatement.CaseBlock.Clauses {
		var text *string
		if clause.Kind == ast.KindCaseClause {
			text = clause.Expression.AsStringLiteralLike().Text
		} else {
			text = nil
		}
		witnesses.push(ifElse(text && !contains(witnesses, text), text, nil))
	}
	return witnesses
}

func (c *Checker) eachTypeContainedIn(source *Type, types []*Type) bool {
	if source.flags&TypeFlagsUnion != 0 {
		return !forEach(source.AsUnionType().types, func(t *Type) bool {
			return !contains(types, t)
		})
	} else {
		return contains(types, source)
	}
}

func (c *Checker) isTypeSubsetOf(source *Type, target *Type) bool {
	return source == target || source.flags&TypeFlagsNever != 0 || target.flags&TypeFlagsUnion != 0 && c.isTypeSubsetOfUnion(source, target.AsUnionType())
}

func (c *Checker) isTypeSubsetOfUnion(source *Type, target UnionType) bool {
	if source.flags&TypeFlagsUnion != 0 {
		for _, t := range source.AsUnionType().types {
			if !c.containsType(target.types, t) {
				return false
			}
		}
		return true
	}
	if source.flags&TypeFlagsEnumLike != 0 && c.getBaseTypeOfEnumLikeType(source.AsLiteralType()) == target {
		return true
	}
	return c.containsType(target.types, source)
}

func (c *Checker) forEachType(t *Type, f func(t *Type) *T) *T {
	if t.flags&TypeFlagsUnion != 0 {
		return forEach(t.AsUnionType().types, f)
	} else {
		return f(t)
	}
}

func (c *Checker) someType(t *Type, f func(t *Type) bool) bool {
	if t.flags&TypeFlagsUnion != 0 {
		return core.Some(t.AsUnionType().types, f)
	} else {
		return f(t)
	}
}

func (c *Checker) everyType(t *Type, f func(t *Type) bool) bool {
	if t.flags&TypeFlagsUnion != 0 {
		return core.Every(t.AsUnionType().types, f)
	} else {
		return f(t)
	}
}

func (c *Checker) everyContainedType(t *Type, f func(t *Type) bool) bool {
	if t.flags&TypeFlagsUnionOrIntersection != 0 {
		return core.Every(t.AsUnionOrIntersectionType().types, f)
	} else {
		return f(t)
	}
}

func (c *Checker) filterType(t *Type, f func(t *Type) bool) *Type {
	if t.flags&TypeFlagsUnion != 0 {
		types := t.AsUnionType().types
		filtered := core.Filter(types, f)
		if filtered == types {
			return t
		}
		origin := t.AsUnionType().origin
		var newOrigin *Type
		if origin != nil && origin.flags&TypeFlagsUnion != 0 {
			// If the origin type is a (denormalized) union type, filter its non-union constituents. If that ends
			// up removing a smaller number of types than in the normalized constituent set (meaning some of the
			// filtered types are within nested unions in the origin), then we can't construct a new origin type.
			// Otherwise, if we have exactly one type left in the origin set, return that as the filtered type.
			// Otherwise, construct a new filtered origin type.
			originTypes := origin.AsUnionType().types
			originFiltered := core.Filter(originTypes, func(t *Type) bool {
				return t.flags&TypeFlagsUnion != 0 || f(t)
			})
			if originTypes.length-originFiltered.length == types.length-filtered.length {
				if originFiltered.length == 1 {
					return originFiltered[0]
				}
				newOrigin = c.createOriginUnionOrIntersectionType(TypeFlagsUnion, originFiltered)
			}
		}
		// filtering could remove intersections so `ContainsIntersections` might be forwarded "incorrectly"
		// it is purely an optimization hint so there is no harm in accidentally forwarding it
		return c.getUnionTypeFromSortedList(filtered, t.AsUnionType().objectFlags&(ObjectFlagsPrimitiveUnion|ObjectFlagsContainsIntersections), nil /*aliasSymbol*/, nil /*aliasTypeArguments*/, newOrigin)
	}
	if t.flags&TypeFlagsNever != 0 || f(t) {
		return t
	} else {
		return c.neverType
	}
}

func (c *Checker) removeType(t *Type, targetType *Type) *Type {
	return c.filterType(t, func(t *Type) bool {
		return t != targetType
	})
}

func (c *Checker) countTypes(t *Type) number {
	if t.flags&TypeFlagsUnion != 0 {
		return t.AsUnionType().types.length
	} else {
		return 1
	}
}

// Apply a mapping function to a type and return the resulting type. If the source type
// is a union type, the mapping function is applied to each constituent type and a union
// of the resulting types is returned.
/* OVERLOAD: function mapType(type: Type, mapper: (t: Type) => Type, noReductions?: boolean): Type; */
/* OVERLOAD: function mapType(type: Type, mapper: (t: Type) => Type | undefined, noReductions?: boolean): Type | undefined; */
func (c *Checker) mapType(t *Type, mapper func(t *Type) *Type, noReductions bool) *Type {
	if t.flags&TypeFlagsNever != 0 {
		return t
	}
	if t.flags&TypeFlagsUnion == 0 {
		return mapper(t)
	}
	origin := t.AsUnionType().origin
	var types []*Type
	if origin != nil && origin.flags&TypeFlagsUnion != 0 {
		types = origin.AsUnionType().types
	} else {
		types = t.AsUnionType().types
	}
	var mappedTypes *[]*Type
	changed := false
	for _, t := range types {
		var mapped *Type
		if t.flags&TypeFlagsUnion != 0 {
			mapped = c.mapType(t, mapper, noReductions)
		} else {
			mapped = mapper(t)
		}
		changed = changed || t != mapped
		if mapped != nil {
			if mappedTypes == nil {
				mappedTypes = []*Type{mapped}
			} else {
				mappedTypes.push(mapped)
			}
		}
	}
	if changed {
		return mappedTypes && c.getUnionType(mappedTypes, ifElse(noReductions, UnionReductionNone, UnionReductionLiteral))
	} else {
		return t
	}
}

func (c *Checker) mapTypeWithAlias(t *Type, mapper func(t *Type) *Type, aliasSymbol *ast.Symbol, aliasTypeArguments *[]*Type) *Type {
	if t.flags&TypeFlagsUnion != 0 && aliasSymbol != nil {
		return c.getUnionType(core.Map(t.AsUnionType().types, mapper), UnionReductionLiteral, aliasSymbol, aliasTypeArguments)
	} else {
		return c.mapType(t, mapper)
	}
}

func (c *Checker) extractTypesOfKind(t *Type, kind TypeFlags) *Type {
	return c.filterType(t, func(t *Type) bool {
		return (t.flags & kind) != 0
	})
}

// Return a new type in which occurrences of the string, number and bigint primitives and placeholder template
// literal types in typeWithPrimitives have been replaced with occurrences of compatible and more specific types
// from typeWithLiterals. This is essentially a limited form of intersection between the two types. We avoid a
// true intersection because it is more costly and, when applied to union types, generates a large number of
// types we don't actually care about.
func (c *Checker) replacePrimitivesWithLiterals(typeWithPrimitives *Type, typeWithLiterals *Type) *Type {
	if c.maybeTypeOfKind(typeWithPrimitives, TypeFlagsString|TypeFlagsTemplateLiteral|TypeFlagsNumber|TypeFlagsBigInt) && c.maybeTypeOfKind(typeWithLiterals, TypeFlagsStringLiteral|TypeFlagsTemplateLiteral|TypeFlagsStringMapping|TypeFlagsNumberLiteral|TypeFlagsBigIntLiteral) {
		return c.mapType(typeWithPrimitives, func(t *Type) *Type {
			switch {
			case t.flags&TypeFlagsString != 0:
				return c.extractTypesOfKind(typeWithLiterals, TypeFlagsString|TypeFlagsStringLiteral|TypeFlagsTemplateLiteral|TypeFlagsStringMapping)
			case c.isPatternLiteralType(t) && !c.maybeTypeOfKind(typeWithLiterals, TypeFlagsString|TypeFlagsTemplateLiteral|TypeFlagsStringMapping):
				return c.extractTypesOfKind(typeWithLiterals, TypeFlagsStringLiteral)
			case t.flags&TypeFlagsNumber != 0:
				return c.extractTypesOfKind(typeWithLiterals, TypeFlagsNumber|TypeFlagsNumberLiteral)
			case t.flags&TypeFlagsBigInt != 0:
				return c.extractTypesOfKind(typeWithLiterals, TypeFlagsBigInt|TypeFlagsBigIntLiteral)
			default:
				return t
			}
		})
	}
	return typeWithPrimitives
}

func (c *Checker) isIncomplete(flowType FlowType) bool {
	return flowType.flags == 0
}

func (c *Checker) getTypeFromFlowType(flowType FlowType) *Type {
	if flowType.flags == 0 {
		return flowType.type_
	} else {
		return flowType.AsType()
	}
}

func (c *Checker) createFlowType(t *Type, incomplete bool) FlowType {
	if incomplete {
		return FlowType{
			flags: 0,
			t:     ifElse(t.flags&TypeFlagsNever != 0, c.silentNeverType, t),
		}
	} else {
		return t
	}
}

// An evolving array type tracks the element types that have so far been seen in an
// 'x.push(value)' or 'x[n] = value' operation along the control flow graph. Evolving
// array types are ultimately converted into manifest array types (using getFinalArrayType)
// and never escape the getFlowTypeOfReference function.
func (c *Checker) createEvolvingArrayType(elementType *Type) EvolvingArrayType {
	result := c.createObjectType(ObjectFlagsEvolvingArray).AsEvolvingArrayType()
	result.elementType = elementType
	return result
}

func (c *Checker) getEvolvingArrayType(elementType *Type) EvolvingArrayType {
	return c.evolvingArrayTypes[elementType.id] || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: evolvingArrayTypes[elementType.id] = createEvolvingArrayType(elementType) */ TODO)
}

// When adding evolving array element types we do not perform subtype reduction. Instead,
// we defer subtype reduction until the evolving array type is finalized into a manifest
// array type.
func (c *Checker) addEvolvingArrayElementType(evolvingArrayType EvolvingArrayType, node Expression) EvolvingArrayType {
	elementType := c.getRegularTypeOfObjectLiteral(c.getBaseTypeOfLiteralType(c.getContextFreeTypeOfExpression(node)))
	if c.isTypeSubsetOf(elementType, evolvingArrayType.elementType) {
		return evolvingArrayType
	} else {
		return c.getEvolvingArrayType(c.getUnionType([]*Type{evolvingArrayType.elementType, elementType}))
	}
}

func (c *Checker) createFinalArrayType(elementType *Type) *Type {
	if elementType.flags&TypeFlagsNever != 0 {
		return c.autoArrayType
	} else {
		return c.createArrayType(ifElse(elementType.flags&TypeFlagsUnion != 0, c.getUnionType(elementType.AsUnionType().types, UnionReductionSubtype), elementType))
	}
}

// We perform subtype reduction upon obtaining the final array type from an evolving array type.
func (c *Checker) getFinalArrayType(evolvingArrayType EvolvingArrayType) *Type {
	return evolvingArrayType.finalArrayType || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: evolvingArrayType.finalArrayType = createFinalArrayType(evolvingArrayType.elementType) */ TODO)
}

func (c *Checker) finalizeEvolvingArrayType(t *Type) *Type {
	if getObjectFlags(t)&ObjectFlagsEvolvingArray != 0 {
		return c.getFinalArrayType(t.AsEvolvingArrayType())
	} else {
		return t
	}
}

func (c *Checker) getElementTypeOfEvolvingArrayType(t *Type) *Type {
	if getObjectFlags(t)&ObjectFlagsEvolvingArray != 0 {
		return t.AsEvolvingArrayType().elementType
	} else {
		return c.neverType
	}
}

func (c *Checker) isEvolvingArrayTypeList(types []*Type) bool {
	hasEvolvingArrayType := false
	for _, t := range types {
		if t.flags&TypeFlagsNever == 0 {
			if getObjectFlags(t)&ObjectFlagsEvolvingArray == 0 {
				return false
			}
			hasEvolvingArrayType = true
		}
	}
	return hasEvolvingArrayType
}

// Return true if the given node is 'x' in an 'x.length', x.push(value)', 'x.unshift(value)' or
// 'x[n] = value' operation, where 'n' is an expression of type any, undefined, or a number-like type.
func (c *Checker) isEvolvingArrayOperationTarget(node *ast.Node) bool {
	root := c.getReferenceRoot(node)
	parent := root.Parent
	isLengthPushOrUnshift := isPropertyAccessExpression(parent) && (parent.Name.EscapedText == "length" || parent.Parent.Kind == ast.KindCallExpression && isIdentifier(parent.Name) && isPushOrUnshiftIdentifier(parent.Name))
	isElementAssignment := parent.Kind == ast.KindElementAccessExpression && parent.AsElementAccessExpression().Expression == root && parent.Parent.Kind == ast.KindBinaryExpression && parent.Parent.AsBinaryExpression().OperatorToken.Kind == ast.KindEqualsToken && parent.Parent.AsBinaryExpression().Left == parent && !isAssignmentTarget(parent.Parent) && c.isTypeAssignableToKind(c.getTypeOfExpression(parent.AsElementAccessExpression().ArgumentExpression), TypeFlagsNumberLike)
	return isLengthPushOrUnshift || isElementAssignment
}

func (c *Checker) isDeclarationWithExplicitTypeAnnotation(node Declaration) bool {
	return (isVariableDeclaration(node) || isPropertyDeclaration(node) || isPropertySignature(node) || isParameter(node)) && getEffectiveTypeAnnotationNode(node) != nil || isInJSFile(node) && hasInitializer(node) && node.Initializer != nil && isFunctionExpressionOrArrowFunction(node.Initializer) && getEffectiveReturnTypeNode(node.Initializer) != nil
}

func (c *Checker) getExplicitTypeOfSymbol(symbol *ast.Symbol, diagnostic Diagnostic) *Type {
	symbol = c.resolveSymbol(symbol)
	if symbol.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsMethod|ast.SymbolFlagsClass|ast.SymbolFlagsValueModule) != 0 {
		return c.getTypeOfSymbol(symbol)
	}
	if symbol.Flags&(ast.SymbolFlagsVariable|ast.SymbolFlagsProperty) != 0 {
		if getCheckFlags(symbol)&ast.CheckFlagsMapped != 0 {
			origin := (symbol.(MappedSymbol)).Links.syntheticOrigin
			if origin != nil && c.getExplicitTypeOfSymbol(origin) != nil {
				return c.getTypeOfSymbol(symbol)
			}
		}
		declaration := symbol.ValueDeclaration
		if declaration != nil {
			if c.isDeclarationWithExplicitTypeAnnotation(declaration) {
				return c.getTypeOfSymbol(symbol)
			}
			if isVariableDeclaration(declaration) && declaration.Parent.Parent.Kind == ast.KindForOfStatement {
				statement := declaration.Parent.Parent
				expressionType := c.getTypeOfDottedName(statement.Expression, nil /*diagnostic*/)
				if expressionType != nil {
					var use /* TODO(TS-TO-GO) inferred type IterationUse.ForOf | IterationUse.ForAwaitOf */ any
					if statement.AwaitModifier != nil {
						use = IterationUseForAwaitOf
					} else {
						use = IterationUseForOf
					}
					return c.checkIteratedTypeOrElementType(use, expressionType, c.undefinedType, nil /*errorNode*/)
				}
			}
			if diagnostic != nil {
				addRelatedInfo(diagnostic, createDiagnosticForNode(declaration, Diagnostics._0_needs_an_explicit_type_annotation, c.symbolToString(symbol)))
			}
		}
	}
}

// We require the dotted function name in an assertion expression to be comprised of identifiers
// that reference function, method, class or value module symbols; or variable, property or
// parameter symbols with declarations that have explicit type annotations. Such references are
// resolvable with no possibility of triggering circularities in control flow analysis.
func (c *Checker) getTypeOfDottedName(node Expression, diagnostic *Diagnostic) *Type {
	if node.Flags&ast.NodeFlagsInWithStatement == 0 {
		switch node.Kind {
		case ast.KindIdentifier:
			symbol := c.getExportSymbolOfValueSymbolIfExported(c.getResolvedSymbol(node.AsIdentifier()))
			return c.getExplicitTypeOfSymbol(symbol, diagnostic)
		case ast.KindThisKeyword:
			return c.getExplicitThisType(node)
		case ast.KindSuperKeyword:
			return c.checkSuperExpression(node)
		case ast.KindPropertyAccessExpression:
			t := c.getTypeOfDottedName(node.AsPropertyAccessExpression().Expression, diagnostic)
			if t {
				name := node.AsPropertyAccessExpression().Name
				var prop *ast.Symbol
				if isPrivateIdentifier(name) {
					if !t.symbol {
						return nil
					}
					prop = c.getPropertyOfType(t, getSymbolNameForPrivateIdentifier(t.symbol, name.EscapedText))
				} else {
					prop = c.getPropertyOfType(t, name.EscapedText)
				}
				return prop && c.getExplicitTypeOfSymbol(prop, diagnostic)
			}
			return nil
		case ast.KindParenthesizedExpression:
			return c.getTypeOfDottedName(node.AsParenthesizedExpression().Expression, diagnostic)
		}
	}
}

func (c *Checker) getEffectsSignature(node Union[CallExpression, InstanceofExpression]) *Signature {
	links := c.getNodeLinks(node)
	signature := links.effectsSignature
	if signature == nil {
		// A call expression parented by an expression statement is a potential assertion. Other call
		// expressions are potential type predicate function calls. In order to avoid triggering
		// circularities in control flow analysis, we use getTypeOfDottedName when resolving the call
		// target expression of an assertion.
		var funcType *Type
		if isBinaryExpression(node) {
			rightType := c.checkNonNullExpression(node.Right)
			funcType = c.getSymbolHasInstanceMethodOfObjectType(rightType)
		} else if node.Parent.Kind == ast.KindExpressionStatement {
			funcType = c.getTypeOfDottedName(node.Expression, nil /*diagnostic*/)
		} else if node.Expression.Kind != ast.KindSuperKeyword {
			if isOptionalChain(node) {
				funcType = c.checkNonNullType(c.getOptionalExpressionType(c.checkExpression(node.Expression), node.Expression), node.Expression)
			} else {
				funcType = c.checkNonNullExpression(node.Expression)
			}
		}
		signatures := c.getSignaturesOfType(funcType && c.getApparentType(funcType) || c.unknownType, SignatureKindCall)
		var candidate *Signature
		switch {
		case signatures.length == 1 && signatures[0].typeParameters == nil:
			candidate = signatures[0]
		case core.Some(signatures, c.hasTypePredicateOrNeverReturnType):
			candidate = c.getResolvedSignature(node)
		default:
			candidate = nil
		}
		signature = /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.effectsSignature = candidate && hasTypePredicateOrNeverReturnType(candidate) ? candidate : unknownSignature */ TODO
	}
	if signature == c.unknownSignature {
		return nil
	} else {
		return signature
	}
}

func (c *Checker) hasTypePredicateOrNeverReturnType(signature Signature) bool {
	return c.getTypePredicateOfSignature(signature) != nil || signature.declaration != nil && (c.getReturnTypeFromAnnotation(signature.declaration) || c.unknownType).flags&TypeFlagsNever != 0
}

func (c *Checker) getTypePredicateArgument(predicate TypePredicate, callExpression CallExpression) Expression {
	if predicate.kind == TypePredicateKindIdentifier || predicate.kind == TypePredicateKindAssertsIdentifier {
		return callExpression.Arguments[predicate.parameterIndex]
	}
	invokedExpression := skipParentheses(callExpression.Expression)
	if isAccessExpression(invokedExpression) {
		return skipParentheses(invokedExpression.Expression)
	} else {
		return nil
	}
}

func (c *Checker) reportFlowControlError(node *ast.Node) {
	block := findAncestor(node, isFunctionOrModuleBlock) /* as Block | ModuleBlock | SourceFile */
	sourceFile := getSourceFileOfNode(node)
	span := getSpanOfTokenAtPosition(sourceFile, block.Statements.pos)
	c.diagnostics.add(createFileDiagnostic(sourceFile, span.start, span.length, Diagnostics.The_containing_function_or_module_body_is_too_large_for_control_flow_analysis))
}

func (c *Checker) isReachableFlowNode(flow FlowNode) bool {
	result := c.isReachableFlowNodeWorker(flow, false /*noCacheCheck*/)
	c.lastFlowNode = flow
	c.lastFlowNodeReachable = result
	return result
}

func (c *Checker) isFalseExpression(expr Expression) bool {
	node := skipParentheses(expr, true /*excludeJSDocTypeAssertions*/)
	return node.Kind == ast.KindFalseKeyword || node.Kind == ast.KindBinaryExpression && (node.AsBinaryExpression().OperatorToken.Kind == ast.KindAmpersandAmpersandToken && (c.isFalseExpression(node.AsBinaryExpression().Left) || c.isFalseExpression(node.AsBinaryExpression().Right)) || node.AsBinaryExpression().OperatorToken.Kind == ast.KindBarBarToken && c.isFalseExpression(node.AsBinaryExpression().Left) && c.isFalseExpression(node.AsBinaryExpression().Right))
}

func (c *Checker) isReachableFlowNodeWorker(flow FlowNode, noCacheCheck bool) bool {
	for true {
		if flow == c.lastFlowNode {
			return c.lastFlowNodeReachable
		}
		flags := flow.flags
		if flags&FlowFlagsShared != 0 {
			if !noCacheCheck {
				id := c.getFlowNodeId(flow)
				reachable := c.flowNodeReachable[id]
				if reachable != nil {
					return reachable
				} else {
					return ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: flowNodeReachable[id] = isReachableFlowNodeWorker(flow, /*noCacheCheck* / true) */ TODO)
				}
			}
			noCacheCheck = false
		}
		if flags&(FlowFlagsAssignment|FlowFlagsCondition|FlowFlagsArrayMutation) != 0 {
			flow = (flow /* as FlowAssignment | FlowCondition | FlowArrayMutation */).antecedent
		} else if flags&FlowFlagsCall != 0 {
			signature := c.getEffectsSignature((flow.(FlowCall)).node)
			if signature != nil {
				predicate := c.getTypePredicateOfSignature(signature)
				if predicate != nil && predicate.kind == TypePredicateKindAssertsIdentifier && predicate.type_ == nil {
					predicateArgument := (flow.(FlowCall)).node.Arguments[predicate.parameterIndex]
					if predicateArgument && c.isFalseExpression(predicateArgument) {
						return false
					}
				}
				if c.getReturnTypeOfSignature(signature).flags&TypeFlagsNever != 0 {
					return false
				}
			}
			flow = (flow.(FlowCall)).antecedent
		} else if flags&FlowFlagsBranchLabel != 0 {
			// A branching point is reachable if any branch is reachable.
			return core.Some((flow.(FlowLabel)).antecedent, func(f FlowNode) bool {
				return c.isReachableFlowNodeWorker(f, false /*noCacheCheck*/)
			})
		} else if flags&FlowFlagsLoopLabel != 0 {
			antecedents := (flow.(FlowLabel)).antecedent
			if antecedents == nil || antecedents.length == 0 {
				return false
			}
			// A loop is reachable if the control flow path that leads to the top is reachable.
			flow = antecedents[0]
		} else if flags&FlowFlagsSwitchClause != 0 {
			// The control flow path representing an unmatched value in a switch statement with
			// no default clause is unreachable if the switch statement is exhaustive.
			data := (flow.(FlowSwitchClause)).node
			if data.clauseStart == data.clauseEnd && c.isExhaustiveSwitchStatement(data.switchStatement) {
				return false
			}
			flow = (flow.(FlowSwitchClause)).antecedent
		} else if flags&FlowFlagsReduceLabel != 0 {
			// Cache is unreliable once we start adjusting labels
			c.lastFlowNode = nil
			target := (flow.(FlowReduceLabel)).node.target
			saveAntecedents := target.antecedent
			target.antecedent = (flow.(FlowReduceLabel)).node.antecedents
			result := c.isReachableFlowNodeWorker((flow.(FlowReduceLabel)).antecedent, false /*noCacheCheck*/)
			target.antecedent = saveAntecedents
			return result
		} else {
			return flags&FlowFlagsUnreachable == 0
		}
	}
}

// Return true if the given flow node is preceded by a 'super(...)' call in every possible code path
// leading to the node.
func (c *Checker) isPostSuperFlowNode(flow FlowNode, noCacheCheck bool) bool {
	for true {
		flags := flow.flags
		if flags&FlowFlagsShared != 0 {
			if !noCacheCheck {
				id := c.getFlowNodeId(flow)
				postSuper := c.flowNodePostSuper[id]
				if postSuper != nil {
					return postSuper
				} else {
					return ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: flowNodePostSuper[id] = isPostSuperFlowNode(flow, /*noCacheCheck* / true) */ TODO)
				}
			}
			noCacheCheck = false
		}
		if flags&(FlowFlagsAssignment|FlowFlagsCondition|FlowFlagsArrayMutation|FlowFlagsSwitchClause) != 0 {
			flow = (flow /* as FlowAssignment | FlowCondition | FlowArrayMutation | FlowSwitchClause */).antecedent
		} else if flags&FlowFlagsCall != 0 {
			if (flow.(FlowCall)).node.Expression.Kind == ast.KindSuperKeyword {
				return true
			}
			flow = (flow.(FlowCall)).antecedent
		} else if flags&FlowFlagsBranchLabel != 0 {
			// A branching point is post-super if every branch is post-super.
			return core.Every((flow.(FlowLabel)).antecedent, func(f FlowNode) bool {
				return c.isPostSuperFlowNode(f, false /*noCacheCheck*/)
			})
		} else if flags&FlowFlagsLoopLabel != 0 {
			// A loop is post-super if the control flow path that leads to the top is post-super.
			flow = (flow.(FlowLabel)).antecedent[0]
		} else if flags&FlowFlagsReduceLabel != 0 {
			target := (flow.(FlowReduceLabel)).node.target
			saveAntecedents := target.antecedent
			target.antecedent = (flow.(FlowReduceLabel)).node.antecedents
			result := c.isPostSuperFlowNode((flow.(FlowReduceLabel)).antecedent, false /*noCacheCheck*/)
			target.antecedent = saveAntecedents
			return result
		} else {
			// Unreachable nodes are considered post-super to silence errors
			return flags&FlowFlagsUnreachable != 0
		}
	}
}

func (c *Checker) isConstantReference(node *ast.Node) bool {
	switch node.Kind {
	case ast.KindThisKeyword:
		return true
	case ast.KindIdentifier:
		if !isThisInTypeQuery(node) {
			symbol := c.getResolvedSymbol(node.AsIdentifier())
			return c.isConstantVariable(symbol) || c.isParameterOrMutableLocalVariable(symbol) && !c.isSymbolAssigned(symbol) || symbol.ValueDeclaration != nil && isFunctionExpression(symbol.ValueDeclaration)
		}
	case ast.KindPropertyAccessExpression,
		ast.KindElementAccessExpression:
		// The resolvedSymbol property is initialized by checkPropertyAccess or checkElementAccess before we get here.
		return c.isConstantReference(node.AsAccessExpression().Expression) && c.isReadonlySymbol(c.getNodeLinks(node).resolvedSymbol || c.unknownSymbol)
	case ast.KindObjectBindingPattern,
		ast.KindArrayBindingPattern:
		rootDeclaration := getRootDeclaration(node.Parent)
		if isParameter(rootDeclaration) || isCatchClauseVariableDeclaration(rootDeclaration) {
			return !c.isSomeSymbolAssigned(rootDeclaration)
		} else {
			return isVariableDeclaration(rootDeclaration) && c.isVarConstLike(rootDeclaration)
		}
	}
	return false
}

func (c *Checker) getFlowTypeOfReference(reference *ast.Node, declaredType *Type, initialType *Type /*  = declaredType */, flowContainer *ast.Node, flowNode *FlowNode /*  = tryCast(reference, canHaveFlowNode)?.flowNode */) *Type {
	var key *string
	isKeySet := false
	flowDepth := 0
	if c.flowAnalysisDisabled {
		return c.errorType
	}
	if flowNode == nil {
		return declaredType
	}
	c.flowInvocationCount++
	sharedFlowStart := c.sharedFlowCount
	evolvedType := c.getTypeFromFlowType(getTypeAtFlowNode(flowNode))
	c.sharedFlowCount = sharedFlowStart
	// When the reference is 'x' in an 'x.length', 'x.push(value)', 'x.unshift(value)' or x[n] = value' operation,
	// we give type 'any[]' to 'x' instead of using the type determined by control flow analysis such that operations
	// on empty arrays are possible without implicit any errors and new element types can be inferred without
	// type mismatch errors.
	var resultType *Type
	if getObjectFlags(evolvedType)&ObjectFlagsEvolvingArray != 0 && c.isEvolvingArrayOperationTarget(reference) {
		resultType = c.autoArrayType
	} else {
		resultType = c.finalizeEvolvingArrayType(evolvedType)
	}
	if resultType == c.unreachableNeverType || reference.Parent && reference.Parent.Kind == ast.KindNonNullExpression && resultType.flags&TypeFlagsNever == 0 && c.getTypeWithFacts(resultType, TypeFactsNEUndefinedOrNull).flags&TypeFlagsNever != 0 {
		return declaredType
	}
	return resultType

	getOrSetCacheKey := func() *string {
		if isKeySet {
			return key
		}
		isKeySet = true
		key = c.getFlowCacheKey(reference, declaredType, initialType, flowContainer)
		return key
	}

	getTypeAtFlowNode := func(flow FlowNode) FlowType {
		if flowDepth == 2000 {
			// We have made 2000 recursive invocations. To avoid overflowing the call stack we report an error
			// and disable further control flow analysis in the containing function or module body.
			tracing. /* ? */ instant(tracing.Phase.CheckTypes, "getTypeAtFlowNode_DepthLimit", &Args{
				flowId: flow.id,
			})
			c.flowAnalysisDisabled = true
			c.reportFlowControlError(reference)
			return c.errorType
		}
		flowDepth++
		var sharedFlow *FlowNode
		for true {
			flags := flow.flags
			if flags&FlowFlagsShared != 0 {
				// We cache results of flow type resolution for shared nodes that were previously visited in
				// the same getFlowTypeOfReference invocation. A node is considered shared when it is the
				// antecedent of more than one node.
				for i := sharedFlowStart; i < c.sharedFlowCount; i++ {
					if c.sharedFlowNodes[i] == flow {
						flowDepth--
						return c.sharedFlowTypes[i]
					}
				}
				sharedFlow = flow
			}
			var t *FlowType
			if flags&FlowFlagsAssignment != 0 {
				t = getTypeAtFlowAssignment(flow.(FlowAssignment))
				if !(t) {
					flow = (flow.(FlowAssignment)).antecedent
					continue
				}
			} else if flags&FlowFlagsCall != 0 {
				t = getTypeAtFlowCall(flow.(FlowCall))
				if !(t) {
					flow = (flow.(FlowCall)).antecedent
					continue
				}
			} else if flags&FlowFlagsCondition != 0 {
				t = getTypeAtFlowCondition(flow.(FlowCondition))
			} else if flags&FlowFlagsSwitchClause != 0 {
				t = getTypeAtSwitchClause(flow.(FlowSwitchClause))
			} else if flags&FlowFlagsLabel != 0 {
				if (flow.(FlowLabel)).antecedent.length == 1 {
					flow = (flow.(FlowLabel)).antecedent[0]
					continue
				}
				if flags&FlowFlagsBranchLabel != 0 {
					t = getTypeAtFlowBranchLabel(flow.(FlowLabel))
				} else {
					t = getTypeAtFlowLoopLabel(flow.(FlowLabel))
				}
			} else if flags&FlowFlagsArrayMutation != 0 {
				t = getTypeAtFlowArrayMutation(flow.(FlowArrayMutation))
				if !(t) {
					flow = (flow.(FlowArrayMutation)).antecedent
					continue
				}
			} else if flags&FlowFlagsReduceLabel != 0 {
				target := (flow.(FlowReduceLabel)).node.target
				saveAntecedents := target.antecedent
				target.antecedent = (flow.(FlowReduceLabel)).node.antecedents
				t = getTypeAtFlowNode((flow.(FlowReduceLabel)).antecedent)
				target.antecedent = saveAntecedents
			} else if flags&FlowFlagsStart != 0 {
				// Check if we should continue with the control flow of the containing function.
				container := (flow.(FlowStart)).node
				if container != nil && container != flowContainer && reference.Kind != ast.KindPropertyAccessExpression && reference.Kind != ast.KindElementAccessExpression && !(reference.Kind == ast.KindThisKeyword && container.Kind != ast.KindArrowFunction) {
					flow = container.FlowNode
					continue
				}
				// At the top of the flow we have the initial type.
				t = initialType
			} else {
				// Unreachable code errors are reported in the binding phase. Here we
				// simply return the non-auto declared type to reduce follow-on errors.
				t = c.convertAutoToAny(declaredType)
			}
			if sharedFlow != nil {
				// Record visited node and the associated type in the cache.
				c.sharedFlowNodes[c.sharedFlowCount] = sharedFlow
				c.sharedFlowTypes[c.sharedFlowCount] = t
				c.sharedFlowCount++
			}
			flowDepth--
			return t
		}
	}

	getInitialOrAssignedType := func(flow FlowAssignment) *Type {
		node := flow.node
		return c.getNarrowableTypeForReference(ifElse(node.Kind == ast.KindVariableDeclaration || node.Kind == ast.KindBindingElement, c.getInitialType(node /* as VariableDeclaration | BindingElement */), c.getAssignedType(node)), reference)
	}

	getTypeAtFlowAssignment := func(flow FlowAssignment) *FlowType {
		node := flow.node
		// Assignments only narrow the computed type if the declared type is a union type. Thus, we
		// only need to evaluate the assigned type if the declared type is a union type.
		if c.isMatchingReference(reference, node) {
			if !c.isReachableFlowNode(flow) {
				return c.unreachableNeverType
			}
			if getAssignmentTargetKind(node) == AssignmentKindCompound {
				flowType := getTypeAtFlowNode(flow.antecedent)
				return c.createFlowType(c.getBaseTypeOfLiteralType(c.getTypeFromFlowType(flowType)), c.isIncomplete(flowType))
			}
			if declaredType == c.autoType || declaredType == c.autoArrayType {
				if c.isEmptyArrayAssignment(node) {
					return c.getEvolvingArrayType(c.neverType)
				}
				assignedType := c.getWidenedLiteralType(getInitialOrAssignedType(flow))
				if c.isTypeAssignableTo(assignedType, declaredType) {
					return assignedType
				} else {
					return c.anyArrayType
				}
			}
			var t *Type
			if isInCompoundLikeAssignment(node) {
				t = c.getBaseTypeOfLiteralType(declaredType)
			} else {
				t = declaredType
			}
			if t.flags&TypeFlagsUnion != 0 {
				return c.getAssignmentReducedType(t.AsUnionType(), getInitialOrAssignedType(flow))
			}
			return t
		}
		// We didn't have a direct match. However, if the reference is a dotted name, this
		// may be an assignment to a left hand part of the reference. For example, for a
		// reference 'x.y.z', we may be at an assignment to 'x.y' or 'x'. In that case,
		// return the declared type.
		if c.containsMatchingReference(reference, node) {
			if !c.isReachableFlowNode(flow) {
				return c.unreachableNeverType
			}
			// A matching dotted name might also be an expando property on a function *expression*,
			// in which case we continue control flow analysis back to the function's declaration
			if isVariableDeclaration(node) && (isInJSFile(node) || c.isVarConstLike(node)) {
				init := getDeclaredExpandoInitializer(node)
				if init != nil && (init.Kind == ast.KindFunctionExpression || init.Kind == ast.KindArrowFunction) {
					return getTypeAtFlowNode(flow.antecedent)
				}
			}
			return declaredType
		}
		// for (const _ in ref) acts as a nonnull on ref
		if isVariableDeclaration(node) && node.Parent.Parent.Kind == ast.KindForInStatement && (c.isMatchingReference(reference, node.Parent.Parent.Expression) || c.optionalChainContainsReference(node.Parent.Parent.Expression, reference)) {
			return c.getNonNullableTypeIfNeeded(c.finalizeEvolvingArrayType(c.getTypeFromFlowType(getTypeAtFlowNode(flow.antecedent))))
		}
		// Assignment doesn't affect reference
		return nil
	}

	narrowTypeByAssertion := func(t *Type, expr Expression) *Type {
		node := skipParentheses(expr, true /*excludeJSDocTypeAssertions*/)
		if node.Kind == ast.KindFalseKeyword {
			return c.unreachableNeverType
		}
		if node.Kind == ast.KindBinaryExpression {
			if node.AsBinaryExpression().OperatorToken.Kind == ast.KindAmpersandAmpersandToken {
				return narrowTypeByAssertion(narrowTypeByAssertion(t, node.AsBinaryExpression().Left), node.AsBinaryExpression().Right)
			}
			if node.AsBinaryExpression().OperatorToken.Kind == ast.KindBarBarToken {
				return c.getUnionType([]*Type{narrowTypeByAssertion(t, node.AsBinaryExpression().Left), narrowTypeByAssertion(t, node.AsBinaryExpression().Right)})
			}
		}
		return narrowType(t, node, true /*assumeTrue*/)
	}

	getTypeAtFlowCall := func(flow FlowCall) *FlowType {
		signature := c.getEffectsSignature(flow.node)
		if signature != nil {
			predicate := c.getTypePredicateOfSignature(signature)
			if predicate != nil && (predicate.kind == TypePredicateKindAssertsThis || predicate.kind == TypePredicateKindAssertsIdentifier) {
				flowType := getTypeAtFlowNode(flow.antecedent)
				t := c.finalizeEvolvingArrayType(c.getTypeFromFlowType(flowType))
				var narrowedType *Type
				switch {
				case predicate.type_ != nil:
					narrowedType = narrowTypeByTypePredicate(t, predicate, flow.node, true /*assumeTrue*/)
				case predicate.kind == TypePredicateKindAssertsIdentifier && predicate.parameterIndex >= 0 && predicate.parameterIndex < flow.node.Arguments.length:
					narrowedType = narrowTypeByAssertion(t, flow.node.Arguments[predicate.parameterIndex])
				default:
					narrowedType = t
				}
				if narrowedType == t {
					return flowType
				} else {
					return c.createFlowType(narrowedType, c.isIncomplete(flowType))
				}
			}
			if c.getReturnTypeOfSignature(signature).flags&TypeFlagsNever != 0 {
				return c.unreachableNeverType
			}
		}
		return nil
	}

	getTypeAtFlowArrayMutation := func(flow FlowArrayMutation) *FlowType {
		if declaredType == c.autoType || declaredType == c.autoArrayType {
			node := flow.node
			var expr LeftHandSideExpression
			if node.Kind == ast.KindCallExpression {
				expr = node.Expression.AsPropertyAccessExpression().Expression
			} else {
				expr = node.Left.AsElementAccessExpression().Expression
			}
			if c.isMatchingReference(reference, c.getReferenceCandidate(expr)) {
				flowType := getTypeAtFlowNode(flow.antecedent)
				t := c.getTypeFromFlowType(flowType)
				if getObjectFlags(t)&ObjectFlagsEvolvingArray != 0 {
					evolvedType := t.AsEvolvingArrayType()
					if node.Kind == ast.KindCallExpression {
						for _, arg := range node.Arguments {
							evolvedType = c.addEvolvingArrayElementType(evolvedType, arg)
						}
					} else {
						// We must get the context free expression type so as to not recur in an uncached fashion on the LHS (which causes exponential blowup in compile time)
						indexType := c.getContextFreeTypeOfExpression(node.Left.AsElementAccessExpression().ArgumentExpression)
						if c.isTypeAssignableToKind(indexType, TypeFlagsNumberLike) {
							evolvedType = c.addEvolvingArrayElementType(evolvedType, node.Right)
						}
					}
					if evolvedType == t {
						return flowType
					} else {
						return c.createFlowType(evolvedType, c.isIncomplete(flowType))
					}
				}
				return flowType
			}
		}
		return nil
	}

	getTypeAtFlowCondition := func(flow FlowCondition) FlowType {
		flowType := getTypeAtFlowNode(flow.antecedent)
		t := c.getTypeFromFlowType(flowType)
		if t.flags&TypeFlagsNever != 0 {
			return flowType
		}
		// If we have an antecedent type (meaning we're reachable in some way), we first
		// attempt to narrow the antecedent type. If that produces the never type, and if
		// the antecedent type is incomplete (i.e. a transient type in a loop), then we
		// take the type guard as an indication that control *could* reach here once we
		// have the complete type. We proceed by switching to the silent never type which
		// doesn't report errors when operators are applied to it. Note that this is the
		// *only* place a silent never type is ever generated.
		assumeTrue := (flow.flags & FlowFlagsTrueCondition) != 0
		nonEvolvingType := c.finalizeEvolvingArrayType(t)
		narrowedType := narrowType(nonEvolvingType, flow.node, assumeTrue)
		if narrowedType == nonEvolvingType {
			return flowType
		}
		return c.createFlowType(narrowedType, c.isIncomplete(flowType))
	}

	getTypeAtSwitchClause := func(flow FlowSwitchClause) FlowType {
		expr := skipParentheses(flow.node.switchStatement.Expression)
		flowType := getTypeAtFlowNode(flow.antecedent)
		t := c.getTypeFromFlowType(flowType)
		if c.isMatchingReference(reference, expr) {
			t = narrowTypeBySwitchOnDiscriminant(t, flow.node)
		} else if expr.Kind == ast.KindTypeOfExpression && c.isMatchingReference(reference, expr.AsTypeOfExpression().Expression) {
			t = narrowTypeBySwitchOnTypeOf(t, flow.node)
		} else if expr.Kind == ast.KindTrueKeyword {
			t = narrowTypeBySwitchOnTrue(t, flow.node)
		} else {
			if c.strictNullChecks {
				if c.optionalChainContainsReference(expr, reference) {
					t = narrowTypeBySwitchOptionalChainContainment(t, flow.node, func(t *Type) bool {
						return t.flags&(TypeFlagsUndefined|TypeFlagsNever) == 0
					})
				} else if expr.Kind == ast.KindTypeOfExpression && c.optionalChainContainsReference(expr.AsTypeOfExpression().Expression, reference) {
					t = narrowTypeBySwitchOptionalChainContainment(t, flow.node, func(t *Type) bool {
						return !(t.flags&TypeFlagsNever != 0 || t.flags&TypeFlagsStringLiteral != 0 && t.AsStringLiteralType().value == "undefined")
					})
				}
			}
			access := getDiscriminantPropertyAccess(expr, t)
			if access != nil {
				t = narrowTypeBySwitchOnDiscriminantProperty(t, access, flow.node)
			}
		}
		return c.createFlowType(t, c.isIncomplete(flowType))
	}

	getTypeAtFlowBranchLabel := func(flow FlowLabel) FlowType {
		var antecedentTypes []*Type = []never{}
		subtypeReduction := false
		seenIncomplete := false
		var bypassFlow *FlowSwitchClause
		for _, antecedent := range flow.antecedent {
			if bypassFlow == nil && antecedent.flags&FlowFlagsSwitchClause != 0 && (antecedent.(FlowSwitchClause)).node.clauseStart == (antecedent.(FlowSwitchClause)).node.clauseEnd {
				// The antecedent is the bypass branch of a potentially exhaustive switch statement.
				bypassFlow = antecedent.(FlowSwitchClause)
				continue
			}
			flowType := getTypeAtFlowNode(antecedent)
			t := c.getTypeFromFlowType(flowType)
			// If the type at a particular antecedent path is the declared type and the
			// reference is known to always be assigned (i.e. when declared and initial types
			// are the same), there is no reason to process more antecedents since the only
			// possible outcome is subtypes that will be removed in the final union type anyway.
			if t == declaredType && declaredType == initialType {
				return t
			}
			pushIfUnique(antecedentTypes, t)
			// If an antecedent type is not a subset of the declared type, we need to perform
			// subtype reduction. This happens when a "foreign" type is injected into the control
			// flow using the instanceof operator or a user defined type predicate.
			if !c.isTypeSubsetOf(t, initialType) {
				subtypeReduction = true
			}
			if c.isIncomplete(flowType) {
				seenIncomplete = true
			}
		}
		if bypassFlow != nil {
			flowType := getTypeAtFlowNode(bypassFlow)
			t := c.getTypeFromFlowType(flowType)
			// If the bypass flow contributes a type we haven't seen yet and the switch statement
			// isn't exhaustive, process the bypass flow type. Since exhaustiveness checks increase
			// the risk of circularities, we only want to perform them when they make a difference.
			if t.flags&TypeFlagsNever == 0 && !contains(antecedentTypes, t) && !c.isExhaustiveSwitchStatement(bypassFlow.node.switchStatement) {
				if t == declaredType && declaredType == initialType {
					return t
				}
				antecedentTypes.push(t)
				if !c.isTypeSubsetOf(t, initialType) {
					subtypeReduction = true
				}
				if c.isIncomplete(flowType) {
					seenIncomplete = true
				}
			}
		}
		return c.createFlowType(getUnionOrEvolvingArrayType(antecedentTypes, ifElse(subtypeReduction, UnionReductionSubtype, UnionReductionLiteral)), seenIncomplete)
	}

	getTypeAtFlowLoopLabel := func(flow FlowLabel) FlowType {
		// If we have previously computed the control flow type for the reference at
		// this flow loop junction, return the cached type.
		id := c.getFlowNodeId(flow)
		cache := c.flowLoopCaches[id] || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: flowLoopCaches[id] = new Map<string, Type>() */ TODO)
		key := getOrSetCacheKey()
		if !key {
			// No cache key is generated when binding patterns are in unnarrowable situations
			return declaredType
		}
		cached := cache.get(key)
		if cached != nil {
			return cached
		}
		// If this flow loop junction and reference are already being processed, return
		// the union of the types computed for each branch so far, marked as incomplete.
		// It is possible to see an empty array in cases where loops are nested and the
		// back edge of the outer loop reaches an inner loop that is already being analyzed.
		// In such cases we restart the analysis of the inner loop, which will then see
		// a non-empty in-process array for the outer loop and eventually terminate because
		// the first antecedent of a loop junction is always the non-looping control flow
		// path that leads to the top.
		for i := c.flowLoopStart; i < c.flowLoopCount; i++ {
			if c.flowLoopNodes[i] == flow && c.flowLoopKeys[i] == key && c.flowLoopTypes[i].length != 0 {
				return c.createFlowType(getUnionOrEvolvingArrayType(c.flowLoopTypes[i], UnionReductionLiteral), true /*incomplete*/)
			}
		}
		// Add the flow loop junction and reference to the in-process stack and analyze
		// each antecedent code path.
		var antecedentTypes []*Type = []never{}
		subtypeReduction := false
		var firstAntecedentType *FlowType
		for _, antecedent := range flow.antecedent {
			var flowType TODO
			if firstAntecedentType == nil {
				// The first antecedent of a loop junction is always the non-looping control
				// flow path that leads to the top.
				flowType = /* TODO(TS-TO-GO) EqualsToken BinaryExpression: firstAntecedentType = getTypeAtFlowNode(antecedent) */ TODO
			} else {
				// All but the first antecedent are the looping control flow paths that lead
				// back to the loop junction. We track these on the flow loop stack.
				c.flowLoopNodes[c.flowLoopCount] = flow
				c.flowLoopKeys[c.flowLoopCount] = key
				c.flowLoopTypes[c.flowLoopCount] = antecedentTypes
				c.flowLoopCount++
				saveFlowTypeCache := c.flowTypeCache
				c.flowTypeCache = nil
				flowType = getTypeAtFlowNode(antecedent)
				c.flowTypeCache = saveFlowTypeCache
				c.flowLoopCount--
				// If we see a value appear in the cache it is a sign that control flow analysis
				// was restarted and completed by checkExpressionCached. We can simply pick up
				// the resulting type and bail out.
				cached := cache.get(key)
				if cached != nil {
					return cached
				}
			}
			t := c.getTypeFromFlowType(flowType)
			pushIfUnique(antecedentTypes, t)
			// If an antecedent type is not a subset of the declared type, we need to perform
			// subtype reduction. This happens when a "foreign" type is injected into the control
			// flow using the instanceof operator or a user defined type predicate.
			if !c.isTypeSubsetOf(t, initialType) {
				subtypeReduction = true
			}
			// If the type at a particular antecedent path is the declared type there is no
			// reason to process more antecedents since the only possible outcome is subtypes
			// that will be removed in the final union type anyway.
			if t == declaredType {
				break
			}
		}
		// The result is incomplete if the first antecedent (the non-looping control flow path)
		// is incomplete.
		result := getUnionOrEvolvingArrayType(antecedentTypes, ifElse(subtypeReduction, UnionReductionSubtype, UnionReductionLiteral))
		if c.isIncomplete(firstAntecedentType) {
			return c.createFlowType(result, true /*incomplete*/)
		}
		cache.set(key, result)
		return result
	}

	// At flow control branch or loop junctions, if the type along every antecedent code path
	// is an evolving array type, we construct a combined evolving array type. Otherwise we
	// finalize all evolving array types.
	getUnionOrEvolvingArrayType := func(types []*Type, subtypeReduction UnionReduction) *Type {
		if c.isEvolvingArrayTypeList(types) {
			return c.getEvolvingArrayType(c.getUnionType(core.Map(types, c.getElementTypeOfEvolvingArrayType)))
		}
		result := c.recombineUnknownType(c.getUnionType(core.SameMap(types, c.finalizeEvolvingArrayType), subtypeReduction))
		if result != declaredType && result.flags&declaredType.flags&TypeFlagsUnion != 0 && arrayIsEqualTo(result.AsUnionType().types, declaredType.AsUnionType().types) {
			return declaredType
		}
		return result
	}

	getCandidateDiscriminantPropertyAccess := func(expr Expression) * /* TODO(TS-TO-GO) inferred type ParameterDeclaration | BindingElement | AccessExpression */ any {
		if isBindingPattern(reference) || isFunctionExpressionOrArrowFunction(reference) || isObjectLiteralMethod(reference) {
			// When the reference is a binding pattern or function or arrow expression, we are narrowing a pesudo-reference in
			// getNarrowedTypeOfSymbol. An identifier for a destructuring variable declared in the same binding pattern or
			// parameter declared in the same parameter list is a candidate.
			if isIdentifier(expr) {
				symbol := c.getResolvedSymbol(expr)
				declaration := symbol.ValueDeclaration
				if declaration != nil && (isBindingElement(declaration) || isParameter(declaration)) && reference == declaration.Parent && declaration.Initializer == nil && declaration.DotDotDotToken == nil {
					return declaration
				}
			}
		} else if isAccessExpression(expr) {
			// An access expression is a candidate if the reference matches the left hand expression.
			if c.isMatchingReference(reference, expr.Expression) {
				return expr
			}
		} else if isIdentifier(expr) {
			symbol := c.getResolvedSymbol(expr)
			if c.isConstantVariable(symbol) {
				declaration := symbol.ValueDeclaration
				// Given 'const x = obj.kind', allow 'x' as an alias for 'obj.kind'
				if isVariableDeclaration(declaration) && declaration.Type_ == nil && declaration.Initializer != nil && isAccessExpression(declaration.Initializer) && c.isMatchingReference(reference, declaration.Initializer.Expression) {
					return declaration.Initializer
				}
				// Given 'const { kind: x } = obj', allow 'x' as an alias for 'obj.kind'
				if isBindingElement(declaration) && declaration.Initializer == nil {
					parent := declaration.Parent.Parent
					if isVariableDeclaration(parent) && parent.Type_ == nil && parent.Initializer != nil && (isIdentifier(parent.Initializer) || isAccessExpression(parent.Initializer)) && c.isMatchingReference(reference, parent.Initializer) {
						return declaration
					}
				}
			}
		}
		return nil
	}

	getDiscriminantPropertyAccess := func(expr Expression, computedType *Type) * /* TODO(TS-TO-GO) inferred type ParameterDeclaration | BindingElement | AccessExpression */ any {
		// As long as the computed type is a subset of the declared type, we use the full declared type to detect
		// a discriminant property. In cases where the computed type isn't a subset, e.g because of a preceding type
		// predicate narrowing, we use the actual computed type.
		if declaredType.flags&TypeFlagsUnion != 0 || computedType.flags&TypeFlagsUnion != 0 {
			access := getCandidateDiscriminantPropertyAccess(expr)
			if access != nil {
				name := c.getAccessedPropertyName(access)
				if name {
					var t *Type
					if declaredType.flags&TypeFlagsUnion != 0 && c.isTypeSubsetOf(computedType, declaredType) {
						t = declaredType
					} else {
						t = computedType
					}
					if c.isDiscriminantProperty(t, name) {
						return access
					}
				}
			}
		}
		return nil
	}

	narrowTypeByDiscriminant := func(t *Type, access Union[AccessExpression, BindingElement, ParameterDeclaration], narrowType func(t *Type) *Type) *Type {
		propName := c.getAccessedPropertyName(access)
		if propName == nil {
			return t
		}
		optionalChain := isOptionalChain(access)
		removeNullable := c.strictNullChecks && (optionalChain || isNonNullAccess(access)) && c.maybeTypeOfKind(t, TypeFlagsNullable)
		propType := c.getTypeOfPropertyOfType(ifElse(removeNullable, c.getTypeWithFacts(t, TypeFactsNEUndefinedOrNull), t), propName)
		if propType == nil {
			return t
		}
		if removeNullable && optionalChain {
			propType = c.getOptionalType(propType)
		} else {
			propType = propType
		}
		narrowedPropType := narrowType(propType)
		return c.filterType(t, func(t *Type) bool {
			discriminantType := c.getTypeOfPropertyOrIndexSignatureOfType(t, propName) || c.unknownType
			return discriminantType.flags&TypeFlagsNever == 0 && narrowedPropType.flags&TypeFlagsNever == 0 && c.areTypesComparable(narrowedPropType, discriminantType)
		})
	}

	narrowTypeByDiscriminantProperty := func(t *Type, access Union[AccessExpression, BindingElement, ParameterDeclaration], operator SyntaxKind, value Expression, assumeTrue bool) *Type {
		if (operator == ast.KindEqualsEqualsEqualsToken || operator == ast.KindExclamationEqualsEqualsToken) && t.flags&TypeFlagsUnion != 0 {
			keyPropertyName := c.getKeyPropertyName(t.AsUnionType())
			if keyPropertyName && keyPropertyName == c.getAccessedPropertyName(access) {
				candidate := c.getConstituentTypeForKeyType(t.AsUnionType(), c.getTypeOfExpression(value))
				if candidate != nil {
					switch {
					case operator == (ifElse(assumeTrue, ast.KindEqualsEqualsEqualsToken, ast.KindExclamationEqualsEqualsToken)):
						return candidate
					case c.isUnitType(c.getTypeOfPropertyOfType(candidate, keyPropertyName) || c.unknownType):
						return c.removeType(t, candidate)
					default:
						return t
					}
				}
			}
		}
		return narrowTypeByDiscriminant(t, access, func(t *Type) *Type {
			return narrowTypeByEquality(t, operator, value, assumeTrue)
		})
	}

	narrowTypeBySwitchOnDiscriminantProperty := func(type_ *Type, access Union[AccessExpression, BindingElement, ParameterDeclaration], data FlowSwitchClauseData) *Type {
		if data.clauseStart < data.clauseEnd && type_.flags&TypeFlagsUnion != 0 && c.getKeyPropertyName(type_.AsUnionType()) == c.getAccessedPropertyName(access) {
			clauseTypes := c.getSwitchClauseTypes(data.switchStatement).slice(data.clauseStart, data.clauseEnd)
			candidate := c.getUnionType(core.Map(clauseTypes, func(t *Type) *Type {
				return c.getConstituentTypeForKeyType(type_.AsUnionType(), t) || c.unknownType
			}))
			if candidate != c.unknownType {
				return candidate
			}
		}
		return narrowTypeByDiscriminant(type_, access, func(t *Type) *Type {
			return narrowTypeBySwitchOnDiscriminant(t, data)
		})
	}

	narrowTypeByTruthiness := func(t *Type, expr Expression, assumeTrue bool) *Type {
		if c.isMatchingReference(reference, expr) {
			return c.getAdjustedTypeWithFacts(t, ifElse(assumeTrue, TypeFactsTruthy, TypeFactsFalsy))
		}
		if c.strictNullChecks && assumeTrue && c.optionalChainContainsReference(expr, reference) {
			t = c.getAdjustedTypeWithFacts(t, TypeFactsNEUndefinedOrNull)
		}
		access := getDiscriminantPropertyAccess(expr, t)
		if access != nil {
			return narrowTypeByDiscriminant(t, access, func(t *Type) *Type {
				return c.getTypeWithFacts(t, ifElse(assumeTrue, TypeFactsTruthy, TypeFactsFalsy))
			})
		}
		return t
	}

	isTypePresencePossible := func(t *Type, propName string, assumeTrue bool) bool {
		prop := c.getPropertyOfType(t, propName)
		if prop != nil {
			return prop.Flags&ast.SymbolFlagsOptional != 0 || getCheckFlags(prop)&ast.CheckFlagsPartial != 0 || assumeTrue
		} else {
			return c.getApplicableIndexInfoForName(t, propName) != nil || !assumeTrue
		}
	}

	narrowTypeByInKeyword := func(t *Type, nameType Union[StringLiteralType, NumberLiteralType, UniqueESSymbolType], assumeTrue bool) *Type {
		name := getPropertyNameFromType(nameType)
		isKnownProperty := c.someType(t, func(t *Type) bool {
			return isTypePresencePossible(t, name, true /*assumeTrue*/)
		})
		if isKnownProperty {
			// If the check is for a known property (i.e. a property declared in some constituent of
			// the target type), we filter the target type by presence of absence of the property.
			return c.filterType(t, func(t *Type) bool {
				return isTypePresencePossible(t, name, assumeTrue)
			})
		}
		if assumeTrue {
			// If the check is for an unknown property, we intersect the target type with `Record<X, unknown>`,
			// where X is the name of the property.
			recordSymbol := c.getGlobalRecordSymbol()
			if recordSymbol != nil {
				return c.getIntersectionType([]*Type{t, c.getTypeAliasInstantiation(recordSymbol, [] /* TODO(TS-TO-GO) inferred type IntrinsicType | StringLiteralType | NumberLiteralType | UniqueESSymbolType */ any{nameType, c.unknownType})})
			}
		}
		return t
	}

	narrowTypeByBooleanComparison := func(t *Type, expr Expression, bool BooleanLiteral, operator BinaryOperator, assumeTrue bool) *Type {
		assumeTrue = (assumeTrue != (bool.Kind == ast.KindTrueKeyword)) != (operator != ast.KindExclamationEqualsEqualsToken && operator != ast.KindExclamationEqualsToken)
		return narrowType(t, expr, assumeTrue)
	}

	narrowTypeByBinaryExpression := func(t *Type, expr BinaryExpression, assumeTrue bool) *Type {
		switch expr.OperatorToken.Kind {
		case ast.KindEqualsToken,
			ast.KindBarBarEqualsToken,
			ast.KindAmpersandAmpersandEqualsToken,
			ast.KindQuestionQuestionEqualsToken:
			return narrowTypeByTruthiness(narrowType(t, expr.Right, assumeTrue), expr.Left, assumeTrue)
		case ast.KindEqualsEqualsToken,
			ast.KindExclamationEqualsToken,
			ast.KindEqualsEqualsEqualsToken,
			ast.KindExclamationEqualsEqualsToken:
			operator := expr.OperatorToken.Kind
			left := c.getReferenceCandidate(expr.Left)
			right := c.getReferenceCandidate(expr.Right)
			if left.Kind == ast.KindTypeOfExpression && isStringLiteralLike(right) {
				return narrowTypeByTypeof(t, left.AsTypeOfExpression(), operator, right, assumeTrue)
			}
			if right.Kind == ast.KindTypeOfExpression && isStringLiteralLike(left) {
				return narrowTypeByTypeof(t, right.AsTypeOfExpression(), operator, left, assumeTrue)
			}
			if c.isMatchingReference(reference, left) {
				return narrowTypeByEquality(t, operator, right, assumeTrue)
			}
			if c.isMatchingReference(reference, right) {
				return narrowTypeByEquality(t, operator, left, assumeTrue)
			}
			if c.strictNullChecks {
				if c.optionalChainContainsReference(left, reference) {
					t = narrowTypeByOptionalChainContainment(t, operator, right, assumeTrue)
				} else if c.optionalChainContainsReference(right, reference) {
					t = narrowTypeByOptionalChainContainment(t, operator, left, assumeTrue)
				}
			}
			leftAccess := getDiscriminantPropertyAccess(left, t)
			if leftAccess != nil {
				return narrowTypeByDiscriminantProperty(t, leftAccess, operator, right, assumeTrue)
			}
			rightAccess := getDiscriminantPropertyAccess(right, t)
			if rightAccess != nil {
				return narrowTypeByDiscriminantProperty(t, rightAccess, operator, left, assumeTrue)
			}
			if isMatchingConstructorReference(left) {
				return narrowTypeByConstructor(t, operator, right, assumeTrue)
			}
			if isMatchingConstructorReference(right) {
				return narrowTypeByConstructor(t, operator, left, assumeTrue)
			}
			if isBooleanLiteral(right) && !isAccessExpression(left) {
				return narrowTypeByBooleanComparison(t, left, right, operator, assumeTrue)
			}
			if isBooleanLiteral(left) && !isAccessExpression(right) {
				return narrowTypeByBooleanComparison(t, right, left, operator, assumeTrue)
			}
		case ast.KindInstanceOfKeyword:
			return narrowTypeByInstanceof(t, expr.AsInstanceofExpression(), assumeTrue)
		case ast.KindInKeyword:
			if isPrivateIdentifier(expr.Left) {
				return narrowTypeByPrivateIdentifierInInExpression(t, expr, assumeTrue)
			}
			target := c.getReferenceCandidate(expr.Right)
			if c.containsMissingType(t) && isAccessExpression(reference) && c.isMatchingReference(reference.Expression, target) {
				leftType := c.getTypeOfExpression(expr.Left)
				if isTypeUsableAsPropertyName(leftType) && c.getAccessedPropertyName(reference) == getPropertyNameFromType(leftType) {
					return c.getTypeWithFacts(t, ifElse(assumeTrue, TypeFactsNEUndefined, TypeFactsEQUndefined))
				}
			}
			if c.isMatchingReference(reference, target) {
				leftType := c.getTypeOfExpression(expr.Left)
				if isTypeUsableAsPropertyName(leftType) {
					return narrowTypeByInKeyword(t, leftType, assumeTrue)
				}
			}
		case ast.KindCommaToken:
			return narrowType(t, expr.Right, assumeTrue)
			// Ordinarily we won't see && and || expressions in control flow analysis because the Binder breaks those
			// expressions down to individual conditional control flows. However, we may encounter them when analyzing
			// aliased conditional expressions.
		case ast.KindAmpersandAmpersandToken:
			if assumeTrue {
				return narrowType(narrowType(t, expr.Left, true /*assumeTrue*/), expr.Right, true /*assumeTrue*/)
			} else {
				return c.getUnionType([]*Type{narrowType(t, expr.Left, false /*assumeTrue*/), narrowType(t, expr.Right, false /*assumeTrue*/)})
			}
		case ast.KindBarBarToken:
			if assumeTrue {
				return c.getUnionType([]*Type{narrowType(t, expr.Left, true /*assumeTrue*/), narrowType(t, expr.Right, true /*assumeTrue*/)})
			} else {
				return narrowType(narrowType(t, expr.Left, false /*assumeTrue*/), expr.Right, false /*assumeTrue*/)
			}
		}
		return t
	}

	narrowTypeByPrivateIdentifierInInExpression := func(t *Type, expr BinaryExpression, assumeTrue bool) *Type {
		target := c.getReferenceCandidate(expr.Right)
		if !c.isMatchingReference(reference, target) {
			return t
		}

		Debug.assertNode(expr.Left, isPrivateIdentifier)
		symbol := c.getSymbolForPrivateIdentifierExpression(expr.Left)
		if symbol == nil {
			return t
		}
		classSymbol := symbol.Parent
		var targetType *Type
		if hasStaticModifier(Debug.checkDefined(symbol.ValueDeclaration, "should always have a declaration")) {
			targetType = c.getTypeOfSymbol(classSymbol).AsInterfaceType()
		} else {
			targetType = c.getDeclaredTypeOfSymbol(classSymbol)
		}
		return getNarrowedType(t, targetType, assumeTrue, true /*checkDerived*/)
	}

	narrowTypeByOptionalChainContainment := func(t *Type, operator SyntaxKind, value Expression, assumeTrue bool) *Type {
		// We are in a branch of obj?.foo === value (or any one of the other equality operators). We narrow obj as follows:
		// When operator is === and type of value excludes undefined, null and undefined is removed from type of obj in true branch.
		// When operator is !== and type of value excludes undefined, null and undefined is removed from type of obj in false branch.
		// When operator is == and type of value excludes null and undefined, null and undefined is removed from type of obj in true branch.
		// When operator is != and type of value excludes null and undefined, null and undefined is removed from type of obj in false branch.
		// When operator is === and type of value is undefined, null and undefined is removed from type of obj in false branch.
		// When operator is !== and type of value is undefined, null and undefined is removed from type of obj in true branch.
		// When operator is == and type of value is null or undefined, null and undefined is removed from type of obj in false branch.
		// When operator is != and type of value is null or undefined, null and undefined is removed from type of obj in true branch.
		equalsOperator := operator == ast.KindEqualsEqualsToken || operator == ast.KindEqualsEqualsEqualsToken
		var nullableFlags /* TODO(TS-TO-GO) inferred type TypeFlags.Undefined | TypeFlags.Nullable */ any
		if operator == ast.KindEqualsEqualsToken || operator == ast.KindExclamationEqualsToken {
			nullableFlags = TypeFlagsNullable
		} else {
			nullableFlags = TypeFlagsUndefined
		}
		valueType := c.getTypeOfExpression(value)
		// Note that we include any and unknown in the exclusion test because their domain includes null and undefined.
		removeNullable := equalsOperator != assumeTrue && c.everyType(valueType, func(t *Type) bool {
			return t.flags&nullableFlags != 0
		}) || equalsOperator == assumeTrue && c.everyType(valueType, func(t *Type) bool {
			return t.flags&(TypeFlagsAnyOrUnknown|nullableFlags) == 0
		})
		if removeNullable {
			return c.getAdjustedTypeWithFacts(t, TypeFactsNEUndefinedOrNull)
		} else {
			return t
		}
	}

	narrowTypeByEquality := func(t *Type, operator SyntaxKind, value Expression, assumeTrue bool) *Type {
		if t.flags&TypeFlagsAny != 0 {
			return t
		}
		if operator == ast.KindExclamationEqualsToken || operator == ast.KindExclamationEqualsEqualsToken {
			assumeTrue = !assumeTrue
		}
		valueType := c.getTypeOfExpression(value)
		doubleEquals := operator == ast.KindEqualsEqualsToken || operator == ast.KindExclamationEqualsToken
		if valueType.flags&TypeFlagsNullable != 0 {
			if !c.strictNullChecks {
				return t
			}
			var facts /* TODO(TS-TO-GO) inferred type TypeFacts.EQUndefined | TypeFacts.EQNull | TypeFacts.EQUndefinedOrNull | TypeFacts.NEUndefined | TypeFacts.NENull | TypeFacts.NEUndefinedOrNull */ any
			switch {
			case doubleEquals:
				if assumeTrue {
					facts = TypeFactsEQUndefinedOrNull
				} else {
					facts = TypeFactsNEUndefinedOrNull
				}
			case valueType.flags&TypeFlagsNull != 0:
				if assumeTrue {
					facts = TypeFactsEQNull
				} else {
					facts = TypeFactsNENull
				}
			case assumeTrue:
				facts = TypeFactsEQUndefined
			default:
				facts = TypeFactsNEUndefined
			}
			return c.getAdjustedTypeWithFacts(t, facts)
		}
		if assumeTrue {
			if !doubleEquals && (t.flags&TypeFlagsUnknown != 0 || c.someType(t, c.isEmptyAnonymousObjectType)) {
				if valueType.flags&(TypeFlagsPrimitive|TypeFlagsNonPrimitive) != 0 || c.isEmptyAnonymousObjectType(valueType) {
					return valueType
				}
				if valueType.flags&TypeFlagsObject != 0 {
					return c.nonPrimitiveType
				}
			}
			filteredType := c.filterType(t, func(t *Type) bool {
				return c.areTypesComparable(t, valueType) || doubleEquals && c.isCoercibleUnderDoubleEquals(t, valueType)
			})
			return c.replacePrimitivesWithLiterals(filteredType, valueType)
		}
		if c.isUnitType(valueType) {
			return c.filterType(t, func(t *Type) bool {
				return !(c.isUnitLikeType(t) && c.areTypesComparable(t, valueType))
			})
		}
		return t
	}

	narrowTypeByTypeof := func(t *Type, typeOfExpr TypeOfExpression, operator SyntaxKind, literal LiteralExpression, assumeTrue bool) *Type {
		// We have '==', '!=', '===', or !==' operator with 'typeof xxx' and string literal operands
		if operator == ast.KindExclamationEqualsToken || operator == ast.KindExclamationEqualsEqualsToken {
			assumeTrue = !assumeTrue
		}
		target := c.getReferenceCandidate(typeOfExpr.Expression)
		if !c.isMatchingReference(reference, target) {
			if c.strictNullChecks && c.optionalChainContainsReference(target, reference) && assumeTrue == (literal.Text != "undefined") {
				t = c.getAdjustedTypeWithFacts(t, TypeFactsNEUndefinedOrNull)
			}
			propertyAccess := getDiscriminantPropertyAccess(target, t)
			if propertyAccess != nil {
				return narrowTypeByDiscriminant(t, propertyAccess, func(t *Type) *Type {
					return narrowTypeByLiteralExpression(t, literal, assumeTrue)
				})
			}
			return t
		}
		return narrowTypeByLiteralExpression(t, literal, assumeTrue)
	}

	narrowTypeByLiteralExpression := func(t *Type, literal LiteralExpression, assumeTrue bool) *Type {
		if assumeTrue {
			return narrowTypeByTypeName(t, literal.Text)
		} else {
			return c.getAdjustedTypeWithFacts(t, typeofNEFacts.get(literal.Text) || TypeFactsTypeofNEHostObject)
		}
	}

	narrowTypeBySwitchOptionalChainContainment := func(t *Type, TODO_IDENTIFIER FlowSwitchClauseData, clauseCheck func(t *Type) bool) *Type {
		everyClauseChecks := clauseStart != clauseEnd && core.Every(c.getSwitchClauseTypes(switchStatement).slice(clauseStart, clauseEnd), clauseCheck)
		if everyClauseChecks {
			return c.getTypeWithFacts(t, TypeFactsNEUndefinedOrNull)
		} else {
			return t
		}
	}

	narrowTypeBySwitchOnDiscriminant := func(type_ *Type, TODO_IDENTIFIER FlowSwitchClauseData) *Type {
		// We only narrow if all case expressions specify
		// values with unit types, except for the case where
		// `type` is unknown. In this instance we map object
		// types to the nonPrimitive type and narrow with that.
		switchTypes := c.getSwitchClauseTypes(switchStatement)
		if switchTypes.length == 0 {
			return type_
		}
		clauseTypes := switchTypes.slice(clauseStart, clauseEnd)
		hasDefaultClause := clauseStart == clauseEnd || contains(clauseTypes, c.neverType)
		if (type_.flags&TypeFlagsUnknown != 0) && !hasDefaultClause {
			var groundClauseTypes *[]*Type
			for i := 0; i < clauseTypes.length; i += 1 {
				t := clauseTypes[i]
				if t.flags&(TypeFlagsPrimitive|TypeFlagsNonPrimitive) != 0 {
					if groundClauseTypes != nil {
						groundClauseTypes.push(t)
					}
				} else if t.flags&TypeFlagsObject != 0 {
					if groundClauseTypes == nil {
						groundClauseTypes = clauseTypes.slice(0, i)
					}
					groundClauseTypes.push(c.nonPrimitiveType)
				} else {
					return type_
				}
			}
			return c.getUnionType(ifElse(groundClauseTypes == nil, clauseTypes, groundClauseTypes))
		}
		discriminantType := c.getUnionType(clauseTypes)
		var caseType *Type
		if discriminantType.flags&TypeFlagsNever != 0 {
			caseType = c.neverType
		} else {
			caseType = c.replacePrimitivesWithLiterals(c.filterType(type_, func(t *Type) bool {
				return c.areTypesComparable(discriminantType, t)
			}), discriminantType)
		}
		if !hasDefaultClause {
			return caseType
		}
		defaultType := c.filterType(type_, func(t *Type) bool {
			return !(c.isUnitLikeType(t) && contains(switchTypes, ifElse(t.flags&TypeFlagsUndefined != 0, c.undefinedType, c.getRegularTypeOfLiteralType(c.extractUnitType(t)))))
		})
		if caseType.flags&TypeFlagsNever != 0 {
			return defaultType
		} else {
			return c.getUnionType([]*Type{caseType, defaultType})
		}
	}

	narrowTypeByTypeName := func(t *Type, typeName string) *Type {
		switch typeName {
		case "string":
			return narrowTypeByTypeFacts(t, c.stringType, TypeFactsTypeofEQString)
		case "number":
			return narrowTypeByTypeFacts(t, c.numberType, TypeFactsTypeofEQNumber)
		case "bigint":
			return narrowTypeByTypeFacts(t, c.bigintType, TypeFactsTypeofEQBigInt)
		case "boolean":
			return narrowTypeByTypeFacts(t, c.booleanType, TypeFactsTypeofEQBoolean)
		case "symbol":
			return narrowTypeByTypeFacts(t, c.esSymbolType, TypeFactsTypeofEQSymbol)
		case "object":
			if t.flags&TypeFlagsAny != 0 {
				return t
			} else {
				return c.getUnionType([]*Type{narrowTypeByTypeFacts(t, c.nonPrimitiveType, TypeFactsTypeofEQObject), narrowTypeByTypeFacts(t, c.nullType, TypeFactsEQNull)})
			}
		case "function":
			if t.flags&TypeFlagsAny != 0 {
				return t
			} else {
				return narrowTypeByTypeFacts(t, c.globalFunctionType, TypeFactsTypeofEQFunction)
			}
		case "undefined":
			return narrowTypeByTypeFacts(t, c.undefinedType, TypeFactsEQUndefined)
		}
		return narrowTypeByTypeFacts(t, c.nonPrimitiveType, TypeFactsTypeofEQHostObject)
	}

	narrowTypeByTypeFacts := func(t *Type, impliedType *Type, facts TypeFacts) *Type {
		return c.mapType(t, func(t *Type) *Type {
			switch {
			case c.isTypeRelatedTo(t, impliedType, c.strictSubtypeRelation):
				if c.hasTypeFacts(t, facts) {
					return t
				} else {
					return c.neverType
				}
			case c.isTypeSubtypeOf(impliedType, t):
				return impliedType
			case c.hasTypeFacts(t, facts):
				return c.getIntersectionType([]*Type{t, impliedType})
			default:
				return c.neverType
			}
		})
	}

	narrowTypeBySwitchOnTypeOf := func(t *Type, TODO_IDENTIFIER FlowSwitchClauseData) *Type {
		witnesses := c.getSwitchClauseTypeOfWitnesses(switchStatement)
		if witnesses == nil {
			return t
		}
		// Equal start and end denotes implicit fallthrough; undefined marks explicit default clause.
		defaultIndex := core.FindIndex(switchStatement.CaseBlock.Clauses, func(clause /* TODO(TS-TO-GO) inferred type CaseClause | DefaultClause */ any) bool {
			return clause.Kind == ast.KindDefaultClause
		})
		hasDefaultClause := clauseStart == clauseEnd || (defaultIndex >= clauseStart && defaultIndex < clauseEnd)
		if hasDefaultClause {
			// In the default clause we filter constituents down to those that are not-equal to all handled cases.
			notEqualFacts := c.getNotEqualFactsFromTypeofSwitch(clauseStart, clauseEnd, witnesses)
			return c.filterType(t, func(t *Type) bool {
				return c.getTypeFacts(t, notEqualFacts) == notEqualFacts
			})
		}
		// In the non-default cause we create a union of the type narrowed by each of the listed cases.
		clauseWitnesses := witnesses.slice(clauseStart, clauseEnd)
		return c.getUnionType(core.Map(clauseWitnesses, func(text *string) *Type {
			if text {
				return narrowTypeByTypeName(t, text)
			} else {
				return c.neverType
			}
		}))
	}

	narrowTypeBySwitchOnTrue := func(t *Type, TODO_IDENTIFIER FlowSwitchClauseData) *Type {
		defaultIndex := core.FindIndex(switchStatement.CaseBlock.Clauses, func(clause /* TODO(TS-TO-GO) inferred type CaseClause | DefaultClause */ any) bool {
			return clause.Kind == ast.KindDefaultClause
		})
		hasDefaultClause := clauseStart == clauseEnd || (defaultIndex >= clauseStart && defaultIndex < clauseEnd)

		// First, narrow away all of the cases that preceded this set of cases.
		for i := 0; i < clauseStart; i++ {
			clause := switchStatement.CaseBlock.Clauses[i]
			if clause.Kind == ast.KindCaseClause {
				t = narrowType(t, clause.Expression, false /*assumeTrue*/)
			}
		}

		// If our current set has a default, then none the other cases were hit either.
		// There's no point in narrowing by the the other cases in the set, since we can
		// get here through other paths.
		if hasDefaultClause {
			for i := clauseEnd; i < switchStatement.CaseBlock.Clauses.length; i++ {
				clause := switchStatement.CaseBlock.Clauses[i]
				if clause.Kind == ast.KindCaseClause {
					t = narrowType(t, clause.Expression, false /*assumeTrue*/)
				}
			}
			return t
		}

		// Now, narrow based on the cases in this set.
		clauses := switchStatement.CaseBlock.Clauses.slice(clauseStart, clauseEnd)
		return c.getUnionType(core.Map(clauses, func(clause CaseOrDefaultClause) *Type {
			if clause.Kind == ast.KindCaseClause {
				return narrowType(t, clause.Expression, true /*assumeTrue*/)
			} else {
				return c.neverType
			}
		}))
	}

	isMatchingConstructorReference := func(expr Expression) bool {
		return (isPropertyAccessExpression(expr) && idText(expr.Name) == "constructor" || isElementAccessExpression(expr) && isStringLiteralLike(expr.ArgumentExpression) && expr.ArgumentExpression.Text == "constructor") && c.isMatchingReference(reference, expr.Expression)
	}

	narrowTypeByConstructor := func(t *Type, operator SyntaxKind, identifier Expression, assumeTrue bool) *Type {
		// Do not narrow when checking inequality.
		if ifElse(assumeTrue, (operator != ast.KindEqualsEqualsToken && operator != ast.KindEqualsEqualsEqualsToken), (operator != ast.KindExclamationEqualsToken && operator != ast.KindExclamationEqualsEqualsToken)) {
			return t
		}

		// Get the type of the constructor identifier expression, if it is not a function then do not narrow.
		identifierType := c.getTypeOfExpression(identifier)
		if !c.isFunctionType(identifierType) && !c.isConstructorType(identifierType) {
			return t
		}

		// Get the prototype property of the type identifier so we can find out its type.
		prototypeProperty := c.getPropertyOfType(identifierType, "prototype" /* as __String */)
		if prototypeProperty == nil {
			return t
		}

		// Get the type of the prototype, if it is undefined, or the global `Object` or `Function` types then do not narrow.
		prototypeType := c.getTypeOfSymbol(prototypeProperty)
		var candidate *Type
		if !c.isTypeAny(prototypeType) {
			candidate = prototypeType
		} else {
			candidate = nil
		}
		if candidate == nil || candidate == c.globalObjectType || candidate == c.globalFunctionType {
			return t
		}

		// If the type that is being narrowed is `any` then just return the `candidate` type since every type is a subtype of `any`.
		if c.isTypeAny(t) {
			return candidate
		}

		// Filter out types that are not considered to be "constructed by" the `candidate` type.
		return c.filterType(t, func(t *Type) bool {
			return isConstructedBy(t, candidate)
		})

		isConstructedBy := func(source *Type, target *Type) bool {
			// If either the source or target type are a class type then we need to check that they are the same exact type.
			// This is because you may have a class `A` that defines some set of properties, and another class `B`
			// that defines the same set of properties as class `A`, in that case they are structurally the same
			// type, but when you do something like `instanceOfA.constructor === B` it will return false.
			if source.flags&TypeFlagsObject != 0 && getObjectFlags(source)&ObjectFlagsClass != 0 || target.flags&TypeFlagsObject != 0 && getObjectFlags(target)&ObjectFlagsClass != 0 {
				return source.symbol == target.symbol
			}

			// For all other types just check that the `source` type is a subtype of the `target` type.
			return c.isTypeSubtypeOf(source, target)
		}

	}

	narrowTypeByInstanceof := func(t *Type, expr InstanceofExpression, assumeTrue bool) *Type {
		left := c.getReferenceCandidate(expr.Left)
		if !c.isMatchingReference(reference, left) {
			if assumeTrue && c.strictNullChecks && c.optionalChainContainsReference(left, reference) {
				return c.getAdjustedTypeWithFacts(t, TypeFactsNEUndefinedOrNull)
			}
			return t
		}
		right := expr.Right
		rightType := c.getTypeOfExpression(right)
		if !c.isTypeDerivedFrom(rightType, c.globalObjectType) {
			return t
		}

		// if the right-hand side has an object type with a custom `[Symbol.hasInstance]` method, and that method
		// has a type predicate, use the type predicate to perform narrowing. This allows normal `object` types to
		// participate in `instanceof`, as per Step 2 of https://tc39.es/ecma262/#sec-instanceofoperator.
		signature := c.getEffectsSignature(expr)
		predicate := signature && c.getTypePredicateOfSignature(signature)
		if predicate != nil && predicate.kind == TypePredicateKindIdentifier && predicate.parameterIndex == 0 {
			return getNarrowedType(t, predicate.type_, assumeTrue, true /*checkDerived*/)
		}
		if !c.isTypeDerivedFrom(rightType, c.globalFunctionType) {
			return t
		}
		instanceType := c.mapType(rightType, getInstanceType)
		// Don't narrow from `any` if the target type is exactly `Object` or `Function`, and narrow
		// in the false branch only if the target is a non-empty object type.
		if c.isTypeAny(t) && (instanceType == c.globalObjectType || instanceType == c.globalFunctionType) || !assumeTrue && !(instanceType.flags&TypeFlagsObject != 0 && !c.isEmptyAnonymousObjectType(instanceType)) {
			return t
		}
		return getNarrowedType(t, instanceType, assumeTrue, true /*checkDerived*/)
	}

	getInstanceType := func(constructorType *Type) *Type {
		prototypePropertyType := c.getTypeOfPropertyOfType(constructorType, "prototype" /* as __String */)
		if prototypePropertyType != nil && !c.isTypeAny(prototypePropertyType) {
			return prototypePropertyType
		}
		constructSignatures := c.getSignaturesOfType(constructorType, SignatureKindConstruct)
		if constructSignatures.length != 0 {
			return c.getUnionType(core.Map(constructSignatures, func(signature Signature) *Type {
				return c.getReturnTypeOfSignature(c.getErasedSignature(signature))
			}))
		}
		// We use the empty object type to indicate we don't know the type of objects created by
		// this constructor function.
		return c.emptyObjectType
	}

	getNarrowedType := func(t *Type, candidate *Type, assumeTrue bool, checkDerived bool) *Type {
		var key *string
		if t.flags&TypeFlagsUnion != 0 {
			key = __TEMPLATE__("N", c.getTypeId(t), ",", c.getTypeId(candidate), ",", (ifElse(assumeTrue, 1, 0))|(ifElse(checkDerived, 2, 0)))
		} else {
			key = nil
		}
		return ifNotNilElse(c.getCachedType(key), c.setCachedType(key, getNarrowedTypeWorker(t, candidate, assumeTrue, checkDerived)))
	}

	getNarrowedTypeWorker := func(t *Type, candidate *Type, assumeTrue bool, checkDerived bool) *Type {
		if !assumeTrue {
			if t == candidate {
				return c.neverType
			}
			if checkDerived {
				return c.filterType(t, func(t *Type) bool {
					return !c.isTypeDerivedFrom(t, candidate)
				})
			}
			trueType := getNarrowedType(t, candidate, true /*assumeTrue*/, false /*checkDerived*/)
			return c.filterType(t, func(t *Type) bool {
				return !c.isTypeSubsetOf(t, trueType)
			})
		}
		if t.flags&TypeFlagsAnyOrUnknown != 0 {
			return candidate
		}
		if t == candidate {
			return candidate
		}

		// We first attempt to filter the current type, narrowing constituents as appropriate and removing
		// constituents that are unrelated to the candidate.
		var isRelated /* TODO(TS-TO-GO) inferred type (source: Type, target: Type) => boolean */ any
		if checkDerived {
			isRelated = c.isTypeDerivedFrom
		} else {
			isRelated = c.isTypeSubtypeOf
		}
		var keyPropertyName *string
		if t.flags&TypeFlagsUnion != 0 {
			keyPropertyName = c.getKeyPropertyName(t.AsUnionType())
		} else {
			keyPropertyName = nil
		}
		narrowedType := c.mapType(candidate, func(c *Type) *Type {
			// If a discriminant property is available, use that to reduce the type.
			discriminant := keyPropertyName && c.getTypeOfPropertyOfType(c, keyPropertyName)
			matching := discriminant && c.getConstituentTypeForKeyType(t.AsUnionType(), discriminant)
			// For each constituent t in the current type, if t and and c are directly related, pick the most
			// specific of the two. When t and c are related in both directions, we prefer c for type predicates
			// because that is the asserted type, but t for `instanceof` because generics aren't reflected in
			// prototype object types.
			directlyRelated := c.mapType(matching || t, ifElse(checkDerived, func(t *Type) *Type {
				switch {
				case c.isTypeDerivedFrom(t, c):
					return t
				case c.isTypeDerivedFrom(c, t):
					return c
				default:
					return c.neverType
				}
			}, func(t *Type) *Type {
				switch {
				case c.isTypeStrictSubtypeOf(t, c):
					return t
				case c.isTypeStrictSubtypeOf(c, t):
					return c
				case c.isTypeSubtypeOf(t, c):
					return t
				case c.isTypeSubtypeOf(c, t):
					return c
				default:
					return c.neverType
				}
			}))
			// If no constituents are directly related, create intersections for any generic constituents that
			// are related by constraint.
			if directlyRelated.flags&TypeFlagsNever != 0 {
				return c.mapType(t, func(t *Type) *Type {
					if c.maybeTypeOfKind(t, TypeFlagsInstantiable) && isRelated(c, c.getBaseConstraintOfType(t) || c.unknownType) {
						return c.getIntersectionType([]*Type{t, c})
					} else {
						return c.neverType
					}
				})
			} else {
				return directlyRelated
			}
		})
		// If filtering produced a non-empty type, return that. Otherwise, pick the most specific of the two
		// based on assignability, or as a last resort produce an intersection.
		switch {
		case narrowedType.flags&TypeFlagsNever == 0:
			return narrowedType
		case c.isTypeSubtypeOf(candidate, t):
			return candidate
		case c.isTypeAssignableTo(t, candidate):
			return t
		case c.isTypeAssignableTo(candidate, t):
			return candidate
		default:
			return c.getIntersectionType([]*Type{t, candidate})
		}
	}

	narrowTypeByCallExpression := func(t *Type, callExpression CallExpression, assumeTrue bool) *Type {
		if c.hasMatchingArgument(callExpression, reference) {
			var signature *Signature
			if assumeTrue || !isCallChain(callExpression) {
				signature = c.getEffectsSignature(callExpression)
			} else {
				signature = nil
			}
			predicate := signature && c.getTypePredicateOfSignature(signature)
			if predicate != nil && (predicate.kind == TypePredicateKindThis || predicate.kind == TypePredicateKindIdentifier) {
				return narrowTypeByTypePredicate(t, predicate, callExpression, assumeTrue)
			}
		}
		if c.containsMissingType(t) && isAccessExpression(reference) && isPropertyAccessExpression(callExpression.Expression) {
			callAccess := callExpression.Expression
			if c.isMatchingReference(reference.Expression, c.getReferenceCandidate(callAccess.Expression)) && isIdentifier(callAccess.Name) && callAccess.Name.EscapedText == "hasOwnProperty" && callExpression.Arguments.length == 1 {
				argument := callExpression.Arguments[0]
				if isStringLiteralLike(argument) && c.getAccessedPropertyName(reference) == escapeLeadingUnderscores(argument.Text) {
					return c.getTypeWithFacts(t, ifElse(assumeTrue, TypeFactsNEUndefined, TypeFactsEQUndefined))
				}
			}
		}
		return t
	}

	narrowTypeByTypePredicate := func(t *Type, predicate TypePredicate, callExpression CallExpression, assumeTrue bool) *Type {
		// Don't narrow from 'any' if the predicate type is exactly 'Object' or 'Function'
		if predicate.type_ != nil && !(c.isTypeAny(t) && (predicate.type_ == c.globalObjectType || predicate.type_ == c.globalFunctionType)) {
			predicateArgument := c.getTypePredicateArgument(predicate, callExpression)
			if predicateArgument != nil {
				if c.isMatchingReference(reference, predicateArgument) {
					return getNarrowedType(t, predicate.type_, assumeTrue, false /*checkDerived*/)
				}
				if c.strictNullChecks && c.optionalChainContainsReference(predicateArgument, reference) && (assumeTrue && !(c.hasTypeFacts(predicate.type_, TypeFactsEQUndefined)) || !assumeTrue && c.everyType(predicate.type_, c.isNullableType)) {
					t = c.getAdjustedTypeWithFacts(t, TypeFactsNEUndefinedOrNull)
				}
				access := getDiscriminantPropertyAccess(predicateArgument, t)
				if access != nil {
					return narrowTypeByDiscriminant(t, access, func(t *Type) *Type {
						return getNarrowedType(t, predicate.type_, assumeTrue, false /*checkDerived*/)
					})
				}
			}
		}
		return t
	}

	// Narrow the given type based on the given expression having the assumed boolean value. The returned type
	// will be a subtype or the same type as the argument.
	narrowType := func(t *Type, expr Expression, assumeTrue bool) *Type {
		// for `a?.b`, we emulate a synthetic `a !== null && a !== undefined` condition for `a`
		if isExpressionOfOptionalChainRoot(expr) || isBinaryExpression(expr.Parent) && (expr.Parent.OperatorToken.Kind == ast.KindQuestionQuestionToken || expr.Parent.OperatorToken.Kind == ast.KindQuestionQuestionEqualsToken) && expr.Parent.Left == expr {
			return narrowTypeByOptionality(t, expr, assumeTrue)
		}
		switch expr.Kind {
		case ast.KindIdentifier:
			// When narrowing a reference to a const variable, non-assigned parameter, or readonly property, we inline
			// up to five levels of aliased conditional expressions that are themselves declared as const variables.
			if !c.isMatchingReference(reference, expr) && c.inlineLevel < 5 {
				symbol := c.getResolvedSymbol(expr.AsIdentifier())
				if c.isConstantVariable(symbol) {
					declaration := symbol.ValueDeclaration
					if declaration != nil && isVariableDeclaration(declaration) && declaration.Type_ == nil && declaration.Initializer != nil && c.isConstantReference(reference) {
						c.inlineLevel++
						result := narrowType(t, declaration.Initializer, assumeTrue)
						c.inlineLevel--
						return result
					}
				}
			}
			fallthrough
		case ast.KindThisKeyword,
			ast.KindSuperKeyword,
			ast.KindPropertyAccessExpression,
			ast.KindElementAccessExpression:
			return narrowTypeByTruthiness(t, expr, assumeTrue)
		case ast.KindCallExpression:
			return narrowTypeByCallExpression(t, expr.AsCallExpression(), assumeTrue)
		case ast.KindParenthesizedExpression,
			ast.KindNonNullExpression:
			return narrowType(t, (expr /* as ParenthesizedExpression | NonNullExpression */).Expression, assumeTrue)
		case ast.KindBinaryExpression:
			return narrowTypeByBinaryExpression(t, expr.AsBinaryExpression(), assumeTrue)
		case ast.KindPrefixUnaryExpression:
			if expr.AsPrefixUnaryExpression().Operator == ast.KindExclamationToken {
				return narrowType(t, expr.AsPrefixUnaryExpression().Operand, !assumeTrue)
			}
		}
		return t
	}

	narrowTypeByOptionality := func(t *Type, expr Expression, assumePresent bool) *Type {
		if c.isMatchingReference(reference, expr) {
			return c.getAdjustedTypeWithFacts(t, ifElse(assumePresent, TypeFactsNEUndefinedOrNull, TypeFactsEQUndefinedOrNull))
		}
		access := getDiscriminantPropertyAccess(expr, t)
		if access != nil {
			return narrowTypeByDiscriminant(t, access, func(t *Type) *Type {
				return c.getTypeWithFacts(t, ifElse(assumePresent, TypeFactsNEUndefinedOrNull, TypeFactsEQUndefinedOrNull))
			})
		}
		return t
	}

}

func (c *Checker) getTypeOfSymbolAtLocation(symbol *ast.Symbol, location *ast.Node) *Type {
	symbol = c.getExportSymbolOfValueSymbolIfExported(symbol)

	// If we have an identifier or a property access at the given location, if the location is
	// an dotted name expression, and if the location is not an assignment target, obtain the type
	// of the expression (which will reflect control flow analysis). If the expression indeed
	// resolved to the given symbol, return the narrowed type.
	if location.Kind == ast.KindIdentifier || location.Kind == ast.KindPrivateIdentifier {
		if isRightSideOfQualifiedNameOrPropertyAccess(location) {
			location = location.Parent
		}
		if isExpressionNode(location) && (!isAssignmentTarget(location) || isWriteAccess(location)) {
			t := c.removeOptionalTypeMarker(ifElse(isWriteAccess(location) && location.Kind == ast.KindPropertyAccessExpression, c.checkPropertyAccessExpression(location.AsPropertyAccessExpression(), nil /*checkMode*/, true /*writeOnly*/), c.getTypeOfExpression(location.AsExpression())))
			if c.getExportSymbolOfValueSymbolIfExported(c.getNodeLinks(location).resolvedSymbol) == symbol {
				return t
			}
		}
	}
	if isDeclarationName(location) && isSetAccessor(location.Parent) && c.getAnnotatedAccessorTypeNode(location.Parent) != nil {
		return c.getWriteTypeOfAccessors(location.Parent.Symbol)
	}
	// The location isn't a reference to the given symbol, meaning we're being asked
	// a hypothetical question of what type the symbol would have if there was a reference
	// to it at the given location. Since we have no control flow information for the
	// hypothetical reference (control flow information is created and attached by the
	// binder), we simply return the declared type of the symbol.
	if isRightSideOfAccessExpression(location) && isWriteAccess(location.Parent) {
		return c.getWriteTypeOfSymbol(symbol)
	} else {
		return c.getNonMissingTypeOfSymbol(symbol)
	}
}

func (c *Checker) getControlFlowContainer(node *ast.Node) *ast.Node {
	return findAncestor(node.Parent, func(node *ast.Node) bool {
		return isFunctionLike(node) && getImmediatelyInvokedFunctionExpression(node) == nil || node.Kind == ast.KindModuleBlock || node.Kind == ast.KindSourceFile || node.Kind == ast.KindPropertyDeclaration
	})
}

// Check if a parameter, catch variable, or mutable local variable is assigned anywhere definitely
func (c *Checker) isSymbolAssignedDefinitely(symbol *ast.Symbol) bool {
	if symbol.LastAssignmentPos != nil {
		return symbol.LastAssignmentPos < 0
	}
	return c.isSymbolAssigned(symbol) && symbol.LastAssignmentPos != nil && symbol.LastAssignmentPos < 0
}

// Check if a parameter, catch variable, or mutable local variable is assigned anywhere
func (c *Checker) isSymbolAssigned(symbol *ast.Symbol) bool {
	return !c.isPastLastAssignment(symbol, nil /*location*/)
}

// Return true if there are no assignments to the given symbol or if the given location
// is past the last assignment to the symbol.
func (c *Checker) isPastLastAssignment(symbol *ast.Symbol, location *ast.Node) *bool {
	parent := findAncestor(symbol.ValueDeclaration, c.isFunctionOrSourceFile)
	if parent == nil {
		return false
	}
	links := c.getNodeLinks(parent)
	if links.flags&NodeCheckFlagsAssignmentsMarked == 0 {
		links.flags |= NodeCheckFlagsAssignmentsMarked
		if !c.hasParentWithAssignmentsMarked(parent) {
			c.markNodeAssignments(parent)
		}
	}
	return !symbol.LastAssignmentPos || location && Math.abs(symbol.LastAssignmentPos) < location.Pos
}

// Check if a parameter or catch variable (or their bindings elements) is assigned anywhere
func (c *Checker) isSomeSymbolAssigned(rootDeclaration *ast.Node) bool {
	Debug.assert(isVariableDeclaration(rootDeclaration) || isParameter(rootDeclaration))
	return c.isSomeSymbolAssignedWorker(rootDeclaration.Name)
}

func (c *Checker) isSomeSymbolAssignedWorker(node BindingName) bool {
	if node.Kind == ast.KindIdentifier {
		return c.isSymbolAssigned(c.getSymbolOfDeclaration(node.Parent.AsDeclaration()))
	}

	return core.Some(node.Elements, func(e /* TODO(TS-TO-GO) inferred type BindingElement | OmittedExpression */ any) bool {
		return e.Kind != ast.KindOmittedExpression && c.isSomeSymbolAssignedWorker(e.Name)
	})
}

func (c *Checker) hasParentWithAssignmentsMarked(node *ast.Node) bool {
	return findAncestor(node.Parent, func(node *ast.Node) bool {
		return c.isFunctionOrSourceFile(node) && c.getNodeLinks(node).flags&NodeCheckFlagsAssignmentsMarked != 0
	}) != nil
}

func (c *Checker) isFunctionOrSourceFile(node *ast.Node) bool {
	return isFunctionLikeDeclaration(node) || isSourceFile(node)
}

// For all assignments within the given root node, record the last assignment source position for all
// referenced parameters and mutable local variables. When assignments occur in nested functions  or
// references occur in export specifiers, record Number.MAX_VALUE as the assignment position. When
// assignments occur in compound statements, record the ending source position of the compound statement
// as the assignment position (this is more conservative than full control flow analysis, but requires
// only a single walk over the AST).
func (c *Checker) markNodeAssignments(node *ast.Node) {
	switch node.Kind {
	case ast.KindIdentifier:
		assigmentTarget := getAssignmentTargetKind(node)
		if assigmentTarget != AssignmentKindNone {
			symbol := c.getResolvedSymbol(node.AsIdentifier())
			hasDefiniteAssignment := assigmentTarget == AssignmentKindDefinite || (symbol.LastAssignmentPos != nil && symbol.LastAssignmentPos < 0)
			if c.isParameterOrMutableLocalVariable(symbol) {
				if symbol.LastAssignmentPos == nil || Math.abs(symbol.LastAssignmentPos) != Number.MAX_VALUE {
					referencingFunction := findAncestor(node, c.isFunctionOrSourceFile)
					declaringFunction := findAncestor(symbol.ValueDeclaration, c.isFunctionOrSourceFile)
					if referencingFunction == declaringFunction {
						symbol.LastAssignmentPos = c.extendAssignmentPosition(node, symbol.ValueDeclaration)
					} else {
						symbol.LastAssignmentPos = Number.MAX_VALUE
					}
				}
				if hasDefiniteAssignment && symbol.LastAssignmentPos > 0 {
					symbol.LastAssignmentPos *= -1
				}
			}
		}
		return
	case ast.KindExportSpecifier:
		exportDeclaration := node.AsExportSpecifier().Parent.Parent
		name := node.AsExportSpecifier().PropertyName || node.AsExportSpecifier().Name
		if !node.AsExportSpecifier().IsTypeOnly && !exportDeclaration.IsTypeOnly && exportDeclaration.ModuleSpecifier == nil && name.Kind != ast.KindStringLiteral {
			symbol := c.resolveEntityName(name, ast.SymbolFlagsValue, true /*ignoreErrors*/, true /*dontResolveAlias*/)
			if symbol != nil && c.isParameterOrMutableLocalVariable(symbol) {
				var sign /* TODO(TS-TO-GO) inferred type 1 | -1 */ any
				if symbol.LastAssignmentPos != nil && symbol.LastAssignmentPos < 0 {
					sign = -1
				} else {
					sign = 1
				}
				symbol.LastAssignmentPos = sign * Number.MAX_VALUE
			}
		}
		return
	case ast.KindInterfaceDeclaration,
		ast.KindTypeAliasDeclaration,
		ast.KindEnumDeclaration:
		return
	}
	if isTypeNode(node) {
		return
	}
	forEachChild(node, c.markNodeAssignments)
}

// Extend the position of the given assignment target node to the end of any intervening variable statement,
// expression statement, compound statement, or class declaration occurring between the node and the given
// declaration node.
func (c *Checker) extendAssignmentPosition(node *ast.Node, declaration Declaration) number {
	pos := node.Pos
	for node && node.Pos > declaration.Pos {
		switch node.Kind {
		case ast.KindVariableStatement,
			ast.KindExpressionStatement,
			ast.KindIfStatement,
			ast.KindDoStatement,
			ast.KindWhileStatement,
			ast.KindForStatement,
			ast.KindForInStatement,
			ast.KindForOfStatement,
			ast.KindWithStatement,
			ast.KindSwitchStatement,
			ast.KindTryStatement,
			ast.KindClassDeclaration:
			pos = node.End
		}
		node = node.Parent
	}
	return pos
}

func (c *Checker) isConstantVariable(symbol *ast.Symbol) /* TODO(TS-TO-GO) inferred type boolean | 0 */ any {
	return symbol.Flags&ast.SymbolFlagsVariable && (c.getDeclarationNodeFlagsFromSymbol(symbol)&ast.NodeFlagsConstant) != 0
}

func (c *Checker) isParameterOrMutableLocalVariable(symbol *ast.Symbol) bool {
	// Return true if symbol is a parameter, a catch clause variable, or a mutable local variable
	declaration := symbol.ValueDeclaration && getRootDeclaration(symbol.ValueDeclaration)
	return declaration != nil && (isParameter(declaration) || isVariableDeclaration(declaration) && (isCatchClause(declaration.Parent) || c.isMutableLocalVariableDeclaration(declaration)))
}

func (c *Checker) isMutableLocalVariableDeclaration(declaration VariableDeclaration) bool {
	// Return true if symbol is a non-exported and non-global `let` variable
	return declaration.Parent.Flags&ast.NodeFlagsLet != 0 && !(getCombinedModifierFlags(declaration)&ast.ModifierFlagsExport != 0 || declaration.Parent.Parent.Kind == ast.KindVariableStatement && isGlobalSourceFile(declaration.Parent.Parent.Parent))
}

func (c *Checker) parameterInitializerContainsUndefined(declaration ParameterDeclaration) bool {
	links := c.getNodeLinks(declaration)

	if links.parameterInitializerContainsUndefined == nil {
		if !c.pushTypeResolution(declaration, TypeSystemPropertyNameParameterInitializerContainsUndefined) {
			c.reportCircularityError(declaration.Symbol)
			return true
		}

		containsUndefined := c.hasTypeFacts(c.checkDeclarationInitializer(declaration, CheckModeNormal), TypeFactsIsUndefined)

		if !c.popTypeResolution() {
			c.reportCircularityError(declaration.Symbol)
			return true
		}

		if links.parameterInitializerContainsUndefined == nil {
			links.parameterInitializerContainsUndefined = containsUndefined
		}
	}

	return links.parameterInitializerContainsUndefined
}

/** remove undefined from the annotated type of a parameter when there is an initializer (that doesn't include undefined) */

func (c *Checker) removeOptionalityFromDeclaredType(declaredType *Type, declaration VariableLikeDeclaration) *Type {
	removeUndefined := c.strictNullChecks && declaration.Kind == ast.KindParameter && declaration.Initializer && c.hasTypeFacts(declaredType, TypeFactsIsUndefined) && !c.parameterInitializerContainsUndefined(declaration)

	if removeUndefined {
		return c.getTypeWithFacts(declaredType, TypeFactsNEUndefined)
	} else {
		return declaredType
	}
}

func (c *Checker) isConstraintPosition(t *Type, node *ast.Node) bool {
	parent := node.Parent
	// In an element access obj[x], we consider obj to be in a constraint position, except when obj is of
	// a generic type without a nullable constraint and x is a generic type. This is because when both obj
	// and x are of generic types T and K, we want the resulting type to be T[K].
	return parent.Kind == ast.KindPropertyAccessExpression || parent.Kind == ast.KindQualifiedName || parent.Kind == ast.KindCallExpression && parent.AsCallExpression().Expression == node || parent.Kind == ast.KindNewExpression && parent.AsNewExpression().Expression == node || parent.Kind == ast.KindElementAccessExpression && parent.AsElementAccessExpression().Expression == node && !(c.someType(t, c.isGenericTypeWithoutNullableConstraint) && c.isGenericIndexType(c.getTypeOfExpression(parent.AsElementAccessExpression().ArgumentExpression)))
}

func (c *Checker) isGenericTypeWithUnionConstraint(t *Type) bool {
	if t.flags&TypeFlagsIntersection != 0 {
		return core.Some(t.AsIntersectionType().types, c.isGenericTypeWithUnionConstraint)
	} else {
		return t.flags&TypeFlagsInstantiable != 0 && c.getBaseConstraintOrType(t).flags&(TypeFlagsNullable|TypeFlagsUnion) != 0
	}
}

func (c *Checker) isGenericTypeWithoutNullableConstraint(t *Type) bool {
	if t.flags&TypeFlagsIntersection != 0 {
		return core.Some(t.AsIntersectionType().types, c.isGenericTypeWithoutNullableConstraint)
	} else {
		return t.flags&TypeFlagsInstantiable != 0 && !c.maybeTypeOfKind(c.getBaseConstraintOrType(t), TypeFlagsNullable)
	}
}

func (c *Checker) hasContextualTypeWithNoGenericTypes(node *ast.Node, checkMode *CheckMode) *bool {
	// Computing the contextual type for a child of a JSX element involves resolving the type of the
	// element's tag name, so we exclude that here to avoid circularities.
	// If check mode has `CheckMode.RestBindingElement`, we skip binding pattern contextual types,
	// as we want the type of a rest element to be generic when possible.
	contextualType := (isIdentifier(node) || isPropertyAccessExpression(node) || isElementAccessExpression(node)) && !((isJsxOpeningElement(node.Parent) || isJsxSelfClosingElement(node.Parent)) && node.Parent.TagName == node) && (ifElse(checkMode && checkMode&CheckModeRestBindingElement != 0, c.getContextualType(node, ContextFlagsSkipBindingPatterns), c.getContextualType(node, nil /*contextFlags*/)))
	return contextualType && !c.isGenericType(contextualType)
}

func (c *Checker) getNarrowableTypeForReference(t *Type, reference *ast.Node, checkMode CheckMode) *Type {
	if c.isNoInferType(t) {
		t = t.AsSubstitutionType().baseType
	}
	// When the type of a reference is or contains an instantiable type with a union type constraint, and
	// when the reference is in a constraint position (where it is known we'll obtain the apparent type) or
	// has a contextual type containing no top-level instantiables (meaning constraints will determine
	// assignability), we substitute constraints for all instantiables in the type of the reference to give
	// control flow analysis an opportunity to narrow it further. For example, for a reference of a type
	// parameter type 'T extends string | undefined' with a contextual type 'string', we substitute
	// 'string | undefined' to give control flow analysis the opportunity to narrow to type 'string'.
	substituteConstraints := !(checkMode && checkMode&CheckModeInferential != 0) && c.someType(t, c.isGenericTypeWithUnionConstraint) && (c.isConstraintPosition(t, reference) || c.hasContextualTypeWithNoGenericTypes(reference, checkMode))
	if substituteConstraints {
		return c.mapType(t, c.getBaseConstraintOrType)
	} else {
		return t
	}
}

func (c *Checker) isExportOrExportExpression(location *ast.Node) bool {
	return findAncestor(location, func(n *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
		parent := n.Parent
		if parent == nil {
			return "quit"
		}
		if isExportAssignment(parent) {
			return parent.Expression == n && isEntityNameExpression(n)
		}
		if isExportSpecifier(parent) {
			return parent.Name == n || parent.PropertyName == n
		}
		return false
	}) != nil
}

/**
 * This function marks all the imports the given location refers to as `.referenced` in `NodeLinks` (transitively through local import aliases).
 * (This corresponds to not getting elided in JS emit.)
 * It can be called on *most* nodes in the AST with `ReferenceHint.Unspecified` and will filter its inputs, but care should be taken to avoid calling it on the RHS of an `import =` or specifiers in a `import {} from "..."`,
 * unless you *really* want to *definitely* mark those as referenced.
 * These shouldn't be directly marked, and should only get marked transitively by the internals of this function.
 *
 * @param location The location to mark js import refernces for
 * @param hint The kind of reference `location` has already been checked to be
 * @param propSymbol The optional symbol of the property we're looking up - this is used for property accesses when `const enum`s do not count as references (no `isolatedModules`, no `preserveConstEnums` + export). It will be calculated if not provided.
 * @param parentType The optional type of the parent of the LHS of the property access - this will be recalculated if not provided (but is costly).
 */

/* OVERLOAD: function markLinkedReferences(location: PropertyAccessExpression | QualifiedName, hint: ReferenceHint.Property, propSymbol: Symbol | undefined, parentType: Type): void; */
/* OVERLOAD: function markLinkedReferences(location: Identifier, hint: ReferenceHint.Identifier): void; */
/* OVERLOAD: function markLinkedReferences(location: ExportAssignment, hint: ReferenceHint.ExportAssignment): void; */
/* OVERLOAD: function markLinkedReferences(location: JsxOpeningLikeElement | JsxOpeningFragment, hint: ReferenceHint.Jsx): void; */
/* OVERLOAD: function markLinkedReferences(location: FunctionLikeDeclaration | MethodSignature, hint: ReferenceHint.AsyncFunction): void; */
/* OVERLOAD: function markLinkedReferences(location: ImportEqualsDeclaration, hint: ReferenceHint.ExportImportEquals): void; */
/* OVERLOAD: function markLinkedReferences(location: ExportSpecifier, hint: ReferenceHint.ExportSpecifier): void; */
/* OVERLOAD: function markLinkedReferences(location: HasDecorators, hint: ReferenceHint.Decorator): void; */
/* OVERLOAD: function markLinkedReferences(location: Node, hint: ReferenceHint.Unspecified, propSymbol?: Symbol, parentType?: Type): void; */
func (c *Checker) markLinkedReferences(location *ast.Node, hint ReferenceHint, propSymbol *ast.Symbol, parentType *Type) {
	if !c.canCollectSymbolAliasAccessabilityData {
		return
	}
	if location.Flags&ast.NodeFlagsAmbient != 0 && !isPropertySignature(location) && !isPropertyDeclaration(location) {
		// References within types and declaration files are never going to contribute to retaining a JS import,
		// except for properties (which can be decorated).
		return
	}
	switch hint {
	case ReferenceHintIdentifier:
		return c.markIdentifierAliasReferenced(location.AsIdentifier())
	case ReferenceHintProperty:
		return c.markPropertyAliasReferenced(location /* as PropertyAccessExpression | QualifiedName */, propSymbol, parentType)
	case ReferenceHintExportAssignment:
		return c.markExportAssignmentAliasReferenced(location.AsExportAssignment())
	case ReferenceHintJsx:
		return c.markJsxAliasReferenced(location /* as JsxOpeningLikeElement | JsxOpeningFragment */)
	case ReferenceHintAsyncFunction:
		return c.markAsyncFunctionAliasReferenced(location /* as FunctionLikeDeclaration | MethodSignature */)
	case ReferenceHintExportImportEquals:
		return c.markImportEqualsAliasReferenced(location.AsImportEqualsDeclaration())
	case ReferenceHintExportSpecifier:
		return c.markExportSpecifierAliasReferenced(location.AsExportSpecifier())
	case ReferenceHintDecorator:
		return c.markDecoratorAliasReferenced(location.AsHasDecorators())
	case ReferenceHintUnspecified:
		// Identifiers in expression contexts are emitted, so we need to follow their referenced aliases and mark them as used
		// Some non-expression identifiers are also treated as expression identifiers for this purpose, eg, `a` in `b = {a}` or `q` in `import r = q`
		// This is the exception, rather than the rule - most non-expression identifiers are declaration names.
		if isIdentifier(location) && (isExpressionNode(location) || isShorthandPropertyAssignment(location.Parent) || (isImportEqualsDeclaration(location.Parent) && location.Parent.ModuleReference == location)) && c.shouldMarkIdentifierAliasReferenced(location) {
			if isPropertyAccessOrQualifiedName(location.Parent) {
				var left /* TODO(TS-TO-GO) inferred type LeftHandSideExpression | QualifiedName */ any
				if isPropertyAccessExpression(location.Parent) {
					left = location.Parent.Expression
				} else {
					left = location.Parent.Left
				}
				if left != location {
					return
					// Only mark the LHS (the RHS is a property lookup)
				}
				// Only mark the LHS (the RHS is a property lookup)
			}
			c.markIdentifierAliasReferenced(location)
			return
		}
		if isPropertyAccessOrQualifiedName(location) {
			var topProp *ast.Node = location
			for isPropertyAccessOrQualifiedName(topProp) {
				if isPartOfTypeNode(topProp) {
					return
				}
				topProp = topProp.Parent
			}
			return c.markPropertyAliasReferenced(location)
		}
		if isExportAssignment(location) {
			return c.markExportAssignmentAliasReferenced(location)
		}
		if isJsxOpeningLikeElement(location) || isJsxOpeningFragment(location) {
			return c.markJsxAliasReferenced(location)
		}
		if isImportEqualsDeclaration(location) {
			if isInternalModuleImportEqualsDeclaration(location) || c.checkExternalImportOrExportDeclaration(location) {
				return c.markImportEqualsAliasReferenced(location)
			}
			return
		}
		if isExportSpecifier(location) {
			return c.markExportSpecifierAliasReferenced(location)
		}
		if isFunctionLikeDeclaration(location) || isMethodSignature(location) {
			c.markAsyncFunctionAliasReferenced(location)
			// Might be decorated, fall through to decorator final case
		}
		if !c.compilerOptions.emitDecoratorMetadata {
			return
		}
		if !canHaveDecorators(location) || !hasDecorators(location) || location.Modifiers == nil || !nodeCanBeDecorated(c.legacyDecorators, location, location.Parent, location.Parent.Parent) {
			return
		}

		return c.markDecoratorAliasReferenced(location)
	default:
		Debug.assertNever(hint, __TEMPLATE__("Unhandled reference hint: ", hint))
	}
}

func (c *Checker) markIdentifierAliasReferenced(location Identifier) {
	symbol := c.getResolvedSymbol(location)
	if symbol && symbol != c.argumentsSymbol && symbol != c.unknownSymbol && !isThisInTypeQuery(location) {
		c.markAliasReferenced(symbol, location)
	}
}

func (c *Checker) markPropertyAliasReferenced(location Union[PropertyAccessExpression, QualifiedName], propSymbol *ast.Symbol, parentType *Type) {
	var left /* TODO(TS-TO-GO) inferred type LeftHandSideExpression | QualifiedName */ any
	if isPropertyAccessExpression(location) {
		left = location.Expression
	} else {
		left = location.Left
	}
	if isThisIdentifier(left) || !isIdentifier(left) {
		return
	}
	parentSymbol := c.getResolvedSymbol(left)
	if !parentSymbol || parentSymbol == c.unknownSymbol {
		return
	}
	// In `Foo.Bar.Baz`, 'Foo' is not referenced if 'Bar' is a const enum or a module containing only const enums.
	// `Foo` is also not referenced in `enum FooCopy { Bar = Foo.Bar }`, because the enum member value gets inlined
	// here even if `Foo` is not a const enum.
	//
	// The exceptions are:
	//   1. if 'isolatedModules' is enabled, because the const enum value will not be inlined, and
	//   2. if 'preserveConstEnums' is enabled and the expression is itself an export, e.g. `export = Foo.Bar.Baz`.
	//
	// The property lookup is deferred as much as possible, in as many situations as possible, to avoid alias marking
	// pulling on types/symbols it doesn't strictly need to.
	if getIsolatedModules(c.compilerOptions) || (shouldPreserveConstEnums(c.compilerOptions) && c.isExportOrExportExpression(location)) {
		c.markAliasReferenced(parentSymbol, location)
		return
	}
	// Hereafter, this relies on type checking - but every check prior to this only used symbol information
	leftType := parentType || c.checkExpressionCached(left)
	if c.isTypeAny(leftType) || leftType == c.silentNeverType {
		c.markAliasReferenced(parentSymbol, location)
		return
	}
	prop := propSymbol
	if prop == nil && parentType == nil {
		var right MemberName
		if isPropertyAccessExpression(location) {
			right = location.Name
		} else {
			right = location.Right
		}
		lexicallyScopedSymbol := isPrivateIdentifier(right) && c.lookupSymbolForPrivateIdentifierDeclaration(right.EscapedText, right)
		assignmentKind := getAssignmentTargetKind(location)
		apparentType := c.getApparentType(ifElse(assignmentKind != AssignmentKindNone || c.isMethodAccessForCall(location), c.getWidenedType(leftType), leftType))
		if isPrivateIdentifier(right) {
			prop = lexicallyScopedSymbol && c.getPrivateIdentifierPropertyOfType(apparentType, lexicallyScopedSymbol) || nil
		} else {
			prop = c.getPropertyOfType(apparentType, right.EscapedText)
		}
	}
	if !(prop != nil && (c.isConstEnumOrConstEnumOnlyModule(prop) || prop.Flags&ast.SymbolFlagsEnumMember != 0 && location.Parent.Kind == ast.KindEnumMember)) {
		c.markAliasReferenced(parentSymbol, location)
	}
	return
}

func (c *Checker) markExportAssignmentAliasReferenced(location ExportAssignment) {
	if isIdentifier(location.Expression) {
		id := location.Expression
		sym := c.getExportSymbolOfValueSymbolIfExported(c.resolveEntityName(id, ast.SymbolFlagsAll, true /*ignoreErrors*/, true /*dontResolveAlias*/, location))
		if sym != nil {
			c.markAliasReferenced(sym, id)
		}
	}
}

func (c *Checker) markJsxAliasReferenced(node Union[JsxOpeningLikeElement, JsxOpeningFragment]) {
	if c.getJsxNamespaceContainerForImplicitImport(node) == nil {
		// The reactNamespace/jsxFactory's root symbol should be marked as 'used' so we don't incorrectly elide its import.
		// And if there is no reactNamespace/jsxFactory's symbol in scope when targeting React emit, we should issue an error.
		var jsxFactoryRefErr any
		if c.diagnostics && c.compilerOptions.jsx == JsxEmitReact {
			jsxFactoryRefErr = Diagnostics.This_JSX_tag_requires_0_to_be_in_scope_but_it_could_not_be_found
		} else {
			jsxFactoryRefErr = nil
		}
		jsxFactoryNamespace := c.getJsxNamespace(node)
		var jsxFactoryLocation /* TODO(TS-TO-GO) inferred type JsxTagNameExpression | JsxOpeningFragment */ any
		if isJsxOpeningLikeElement(node) {
			jsxFactoryLocation = node.TagName
		} else {
			jsxFactoryLocation = node
		}

		// allow null as jsxFragmentFactory
		var jsxFactorySym *ast.Symbol
		if !(isJsxOpeningFragment(node) && jsxFactoryNamespace == "null") {
			jsxFactorySym = c.resolveName(jsxFactoryLocation, jsxFactoryNamespace, ast.SymbolFlagsValue, jsxFactoryRefErr, true /*isUse*/)
		}

		if jsxFactorySym != nil {
			// Mark local symbol as referenced here because it might not have been marked
			// if jsx emit was not jsxFactory as there wont be error being emitted
			jsxFactorySym.IsReferenced = ast.SymbolFlagsAll

			// If react/jsxFactory symbol is alias, mark it as refereced
			if c.canCollectSymbolAliasAccessabilityData && jsxFactorySym.Flags&ast.SymbolFlagsAlias != 0 && c.getTypeOnlyAliasDeclaration(jsxFactorySym) == nil {
				c.markAliasSymbolAsReferenced(jsxFactorySym)
			}
		}

		// For JsxFragment, mark jsx pragma as referenced via resolveName
		if isJsxOpeningFragment(node) {
			file := getSourceFileOfNode(node)
			localJsxNamespace := c.getLocalJsxNamespace(file)
			if localJsxNamespace {
				c.resolveName(jsxFactoryLocation, localJsxNamespace, ast.SymbolFlagsValue, jsxFactoryRefErr, true /*isUse*/)
			}
		}
	}
	return
}

func (c *Checker) markAsyncFunctionAliasReferenced(location Union[FunctionLikeDeclaration, MethodSignature]) {
	if c.languageVersion < ScriptTargetES2015 {
		if getFunctionFlags(location)&FunctionFlagsAsync != 0 {
			returnTypeNode := getEffectiveReturnTypeNode(location)
			c.markTypeNodeAsReferenced(returnTypeNode)
		}
	}
}

func (c *Checker) markImportEqualsAliasReferenced(location ImportEqualsDeclaration) {
	if hasSyntacticModifier(location, ast.ModifierFlagsExport) {
		c.markExportAsReferenced(location)
	}
}

func (c *Checker) markExportSpecifierAliasReferenced(location ExportSpecifier) {
	if location.Parent.Parent.ModuleSpecifier == nil && !location.IsTypeOnly && !location.Parent.Parent.IsTypeOnly {
		exportedName := location.PropertyName || location.Name
		if exportedName.Kind == ast.KindStringLiteral {
			return
			// Skip for invalid syntax like this: export { "x" }
		}
		symbol := c.resolveName(exportedName, exportedName.EscapedText, ast.SymbolFlagsValue|ast.SymbolFlagsType|ast.SymbolFlagsNamespace|ast.SymbolFlagsAlias, nil /*nameNotFoundMessage*/, true /*isUse*/)
		if symbol != nil && (symbol == c.undefinedSymbol || symbol == c.globalThisSymbol || symbol.Declarations != nil && isGlobalSourceFile(c.getDeclarationContainer(symbol.Declarations[0]))) {
			// Do nothing, non-local symbol
		} else {
			target := symbol && (ifElse(symbol.Flags&ast.SymbolFlagsAlias != 0, c.resolveAlias(symbol), symbol))
			if target == nil || c.getSymbolFlags(target)&ast.SymbolFlagsValue != 0 {
				c.markExportAsReferenced(location)
				// marks export as used
				c.markIdentifierAliasReferenced(exportedName)
				// marks target of export as used
			}
		}
		return
	}
}

func (c *Checker) markDecoratorAliasReferenced(node HasDecorators) {
	if c.compilerOptions.emitDecoratorMetadata {
		firstDecorator := core.Find(node.Modifiers, isDecorator)
		if firstDecorator == nil {
			return
		}

		c.checkExternalEmitHelpers(firstDecorator, ExternalEmitHelpersMetadata)

		// we only need to perform these checks if we are emitting serialized type metadata for the target of a decorator.
		switch node.Kind {
		case ast.KindClassDeclaration:
			constructor := getFirstConstructorWithBody(node)
			if constructor != nil {
				for _, parameter := range constructor.Parameters {
					c.markDecoratorMedataDataTypeNodeAsReferenced(c.getParameterTypeNodeForDecoratorCheck(parameter))
				}
			}
		case ast.KindGetAccessor,
			ast.KindSetAccessor:
			var otherKind /* TODO(TS-TO-GO) inferred type SyntaxKind.GetAccessor | SyntaxKind.SetAccessor */ any
			if node.Kind == ast.KindGetAccessor {
				otherKind = ast.KindSetAccessor
			} else {
				otherKind = ast.KindGetAccessor
			}
			otherAccessor := getDeclarationOfKind(c.getSymbolOfDeclaration(node), otherKind)
			c.markDecoratorMedataDataTypeNodeAsReferenced(c.getAnnotatedAccessorTypeNode(node) || otherAccessor && c.getAnnotatedAccessorTypeNode(otherAccessor))
		case ast.KindMethodDeclaration:
			for _, parameter := range node.Parameters {
				c.markDecoratorMedataDataTypeNodeAsReferenced(c.getParameterTypeNodeForDecoratorCheck(parameter))
			}

			c.markDecoratorMedataDataTypeNodeAsReferenced(getEffectiveReturnTypeNode(node))
		case ast.KindPropertyDeclaration:
			c.markDecoratorMedataDataTypeNodeAsReferenced(getEffectiveTypeAnnotationNode(node))
		case ast.KindParameter:
			c.markDecoratorMedataDataTypeNodeAsReferenced(c.getParameterTypeNodeForDecoratorCheck(node))
			containingSignature := node.Parent
			for _, parameter := range containingSignature.Parameters {
				c.markDecoratorMedataDataTypeNodeAsReferenced(c.getParameterTypeNodeForDecoratorCheck(parameter))
			}
			c.markDecoratorMedataDataTypeNodeAsReferenced(getEffectiveReturnTypeNode(containingSignature))
		}
	}
}

func (c *Checker) markAliasReferenced(symbol *ast.Symbol, location *ast.Node) {
	if !c.canCollectSymbolAliasAccessabilityData {
		return
	}
	if c.isNonLocalAlias(symbol, ast.SymbolFlagsValue /*excludes*/) && !isInTypeQuery(location) {
		target := c.resolveAlias(symbol)
		if c.getSymbolFlags(symbol, true /*excludeTypeOnlyMeanings*/)&(ast.SymbolFlagsValue|ast.SymbolFlagsExportValue) != 0 {
			// An alias resolving to a const enum cannot be elided if (1) 'isolatedModules' is enabled
			// (because the const enum value will not be inlined), or if (2) the alias is an export
			// of a const enum declaration that will be preserved.
			if getIsolatedModules(c.compilerOptions) || shouldPreserveConstEnums(c.compilerOptions) && c.isExportOrExportExpression(location) || !c.isConstEnumOrConstEnumOnlyModule(c.getExportSymbolOfValueSymbolIfExported(target)) {
				c.markAliasSymbolAsReferenced(symbol)
			}
		}
	}
}

// When an alias symbol is referenced, we need to mark the entity it references as referenced and in turn repeat that until
// we reach a non-alias or an exported entity (which is always considered referenced). We do this by checking the target of
// the alias as an expression (which recursively takes us back here if the target references another alias).
func (c *Checker) markAliasSymbolAsReferenced(symbol *ast.Symbol) undefined {
	Debug.assert(c.canCollectSymbolAliasAccessabilityData)
	links := c.getSymbolLinks(symbol)
	if !links.referenced {
		links.referenced = true
		node := c.getDeclarationOfAliasSymbol(symbol)
		if node == nil {
			return Debug.fail()
		}
		// We defer checking of the reference of an `import =` until the import itself is referenced,
		// This way a chain of imports can be elided if ultimately the final input is only used in a type
		// position.
		if isInternalModuleImportEqualsDeclaration(node) {
			if c.getSymbolFlags(c.resolveSymbol(symbol))&ast.SymbolFlagsValue != 0 {
				// import foo = <symbol>
				left := getFirstIdentifier(node.ModuleReference.AsEntityNameExpression())
				c.markIdentifierAliasReferenced(left)
			}
		}
	}
}

func (c *Checker) markExportAsReferenced(node Union[ImportEqualsDeclaration, ExportSpecifier]) {
	symbol := c.getSymbolOfDeclaration(node)
	target := c.resolveAlias(symbol)
	if target {
		markAlias := target == c.unknownSymbol || ((c.getSymbolFlags(symbol, true /*excludeTypeOnlyMeanings*/) & ast.SymbolFlagsValue) && !c.isConstEnumOrConstEnumOnlyModule(target))

		if markAlias {
			c.markAliasSymbolAsReferenced(symbol)
		}
	}
}

func (c *Checker) markEntityNameOrEntityExpressionAsReference(typeName *EntityNameOrEntityNameExpression, forDecoratorMetadata bool) {
	if typeName == nil {
		return
	}

	rootName := getFirstIdentifier(typeName)
	meaning := (ifElse(typeName.Kind == ast.KindIdentifier, ast.SymbolFlagsType, ast.SymbolFlagsNamespace)) | ast.SymbolFlagsAlias
	rootSymbol := c.resolveName(rootName, rootName.EscapedText, meaning, nil /*nameNotFoundMessage*/, true /*isUse*/)
	if rootSymbol != nil && rootSymbol.Flags&ast.SymbolFlagsAlias != 0 {
		if c.canCollectSymbolAliasAccessabilityData && c.symbolIsValue(rootSymbol) && !c.isConstEnumOrConstEnumOnlyModule(c.resolveAlias(rootSymbol)) && c.getTypeOnlyAliasDeclaration(rootSymbol) == nil {
			c.markAliasSymbolAsReferenced(rootSymbol)
		} else if forDecoratorMetadata && getIsolatedModules(c.compilerOptions) && getEmitModuleKind(c.compilerOptions) >= ModuleKindES2015 && !c.symbolIsValue(rootSymbol) && !core.Some(rootSymbol.Declarations, isTypeOnlyImportOrExportDeclaration) {
			diag := c.error(typeName, Diagnostics.A_type_referenced_in_a_decorated_signature_must_be_imported_with_import_type_or_a_namespace_import_when_isolatedModules_and_emitDecoratorMetadata_are_enabled)
			aliasDeclaration := core.Find(rootSymbol.Declarations || emptyArray, c.isAliasSymbolDeclaration)
			if aliasDeclaration != nil {
				addRelatedInfo(diag, createDiagnosticForNode(aliasDeclaration, Diagnostics._0_was_imported_here, idText(rootName)))
			}
		}
	}
}

/**
 * If a TypeNode can be resolved to a value symbol imported from an external module, it is
 * marked as referenced to prevent import elision.
 */

func (c *Checker) markTypeNodeAsReferenced(node *TypeNode) {
	c.markEntityNameOrEntityExpressionAsReference(node && getEntityNameFromTypeNode(node), false /*forDecoratorMetadata*/)
}

/**
 * This function marks the type used for metadata decorator as referenced if it is import
 * from external module.
 * This is different from markTypeNodeAsReferenced because it tries to simplify type nodes in
 * union and intersection type
 * @param node
 */

func (c *Checker) markDecoratorMedataDataTypeNodeAsReferenced(node *TypeNode) {
	entityName := c.getEntityNameForDecoratorMetadata(node)
	if entityName != nil && isEntityName(entityName) {
		c.markEntityNameOrEntityExpressionAsReference(entityName, true /*forDecoratorMetadata*/)
	}
}

func (c *Checker) getNarrowedTypeOfSymbol(symbol *ast.Symbol, location Identifier) *Type {
	t := c.getTypeOfSymbol(symbol)
	declaration := symbol.ValueDeclaration
	if declaration != nil {
		// If we have a non-rest binding element with no initializer declared as a const variable or a const-like
		// parameter (a parameter for which there are no assignments in the function body), and if the parent type
		// for the destructuring is a union type, one or more of the binding elements may represent discriminant
		// properties, and we want the effects of conditional checks on such discriminants to affect the types of
		// other binding elements from the same destructuring. Consider:
		//
		//   type Action =
		//       | { kind: 'A', payload: number }
		//       | { kind: 'B', payload: string };
		//
		//   function f({ kind, payload }: Action) {
		//       if (kind === 'A') {
		//           payload.toFixed();
		//       }
		//       if (kind === 'B') {
		//           payload.toUpperCase();
		//       }
		//   }
		//
		// Above, we want the conditional checks on 'kind' to affect the type of 'payload'. To facilitate this, we use
		// the binding pattern AST instance for '{ kind, payload }' as a pseudo-reference and narrow this reference
		// as if it occurred in the specified location. We then recompute the narrowed binding element type by
		// destructuring from the narrowed parent type.
		if isBindingElement(declaration) && declaration.Initializer == nil && declaration.DotDotDotToken == nil && declaration.Parent.Elements.length >= 2 {
			parent := declaration.Parent.Parent
			rootDeclaration := getRootDeclaration(parent)
			if rootDeclaration.Kind == ast.KindVariableDeclaration && c.getCombinedNodeFlagsCached(rootDeclaration)&ast.NodeFlagsConstant != 0 || rootDeclaration.Kind == ast.KindParameter {
				links := c.getNodeLinks(parent)
				if links.flags&NodeCheckFlagsInCheckIdentifier == 0 {
					links.flags |= NodeCheckFlagsInCheckIdentifier
					parentType := c.getTypeForBindingElementParent(parent, CheckModeNormal)
					parentTypeConstraint := parentType && c.mapType(parentType, c.getBaseConstraintOrType)
					links.flags &^= NodeCheckFlagsInCheckIdentifier
					if parentTypeConstraint != nil && parentTypeConstraint.flags&TypeFlagsUnion != 0 && !(rootDeclaration.Kind == ast.KindParameter && c.isSomeSymbolAssigned(rootDeclaration)) {
						pattern := declaration.Parent
						narrowedType := c.getFlowTypeOfReference(pattern, parentTypeConstraint, parentTypeConstraint, nil /*flowContainer*/, location.FlowNode)
						if narrowedType.flags&TypeFlagsNever != 0 {
							return c.neverType
						}
						// Destructurings are validated against the parent type elsewhere. Here we disable tuple bounds
						// checks because the narrowed type may have lower arity than the full parent type. For example,
						// for the declaration [x, y]: [1, 2] | [3], we may have narrowed the parent type to just [3].
						return c.getBindingElementTypeFromParentType(declaration, narrowedType, true /*noTupleBoundsCheck*/)
					}
				}
			}
		}
		// If we have a const-like parameter with no type annotation or initializer, and if the parameter is contextually
		// typed by a signature with a single rest parameter of a union of tuple types, one or more of the parameters may
		// represent discriminant tuple elements, and we want the effects of conditional checks on such discriminants to
		// affect the types of other parameters in the same parameter list. Consider:
		//
		//   type Action = [kind: 'A', payload: number] | [kind: 'B', payload: string];
		//
		//   const f: (...args: Action) => void = (kind, payload) => {
		//       if (kind === 'A') {
		//           payload.toFixed();
		//       }
		//       if (kind === 'B') {
		//           payload.toUpperCase();
		//       }
		//   }
		//
		// Above, we want the conditional checks on 'kind' to affect the type of 'payload'. To facilitate this, we use
		// the arrow function AST node for '(kind, payload) => ...' as a pseudo-reference and narrow this reference as
		// if it occurred in the specified location. We then recompute the narrowed parameter type by indexing into the
		// narrowed tuple type.
		if isParameter(declaration) && declaration.Type_ == nil && declaration.Initializer == nil && declaration.DotDotDotToken == nil {
			func_ := declaration.Parent
			if func_.Parameters.length >= 2 && c.isContextSensitiveFunctionOrObjectLiteralMethod(func_) {
				contextualSignature := c.getContextualSignature(func_)
				if contextualSignature != nil && contextualSignature.parameters.length == 1 && signatureHasRestParameter(contextualSignature) {
					restType := c.getReducedApparentType(c.instantiateType(c.getTypeOfSymbol(contextualSignature.parameters[0]), c.getInferenceContext(func_). /* ? */ nonFixingMapper))
					if restType.flags&TypeFlagsUnion != 0 && c.everyType(restType, c.isTupleType) && !core.Some(func_.Parameters, c.isSomeSymbolAssigned) {
						narrowedType := c.getFlowTypeOfReference(func_, restType, restType, nil /*flowContainer*/, location.FlowNode)
						index := func_.Parameters.indexOf(declaration) - (ifElse(getThisParameter(func_) != nil, 1, 0))
						return c.getIndexedAccessType(narrowedType, c.getNumberLiteralType(index))
					}
				}
			}
		}
	}
	return t
}

/**
 * This part of `checkIdentifier` is kept seperate from the rest, so `NodeCheckFlags` (and related diagnostics) can be lazily calculated
 * without calculating the flow type of the identifier.
 */

func (c *Checker) checkIdentifierCalculateNodeCheckFlags(node Identifier, symbol *ast.Symbol) {
	if isThisInTypeQuery(node) {
		return
	}

	// As noted in ECMAScript 6 language spec, arrow functions never have an arguments objects.
	// Although in down-level emit of arrow function, we emit it using function expression which means that
	// arguments objects will be bound to the inner object; emitting arrow function natively in ES6, arguments objects
	// will be bound to non-arrow function that contain this arrow function. This results in inconsistent behavior.
	// To avoid that we will give an error to users if they use arguments objects in arrow function so that they
	// can explicitly bound arguments objects
	if symbol == c.argumentsSymbol {
		if c.isInPropertyInitializerOrClassStaticBlock(node) {
			c.error(node, Diagnostics.arguments_cannot_be_referenced_in_property_initializers)
			return
		}

		container := getContainingFunction(node)
		if container != nil {
			if c.languageVersion < ScriptTargetES2015 {
				if container.Kind == ast.KindArrowFunction {
					c.error(node, Diagnostics.The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES5_Consider_using_a_standard_function_expression)
				} else if hasSyntacticModifier(container, ast.ModifierFlagsAsync) {
					c.error(node, Diagnostics.The_arguments_object_cannot_be_referenced_in_an_async_function_or_method_in_ES5_Consider_using_a_standard_function_or_method)
				}
			}

			c.getNodeLinks(container).flags |= NodeCheckFlagsCaptureArguments
			for container != nil && isArrowFunction(container) {
				container = getContainingFunction(container)
				if container != nil {
					c.getNodeLinks(container).flags |= NodeCheckFlagsCaptureArguments
				}
			}
		}
		return
	}

	localOrExportSymbol := c.getExportSymbolOfValueSymbolIfExported(symbol)
	targetSymbol := c.resolveAliasWithDeprecationCheck(localOrExportSymbol, node)
	if c.isDeprecatedSymbol(targetSymbol) && c.isUncalledFunctionReference(node, targetSymbol) && targetSymbol.Declarations != nil {
		c.addDeprecatedSuggestion(node, targetSymbol.Declarations, node.EscapedText /* as string */)
	}

	declaration := localOrExportSymbol.ValueDeclaration
	if declaration != nil && localOrExportSymbol.Flags&ast.SymbolFlagsClass != 0 {
		// When we downlevel classes we may emit some code outside of the class body. Due to the fact the
		// class name is double-bound, we must ensure we mark references to the class name so that we can
		// emit an alias to the class later.
		if isClassLike(declaration) && declaration.Name != node {
			container := getThisContainer(node, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)
			for container.Kind != ast.KindSourceFile && container.Parent != declaration {
				container = getThisContainer(container, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)
			}

			if container.Kind != ast.KindSourceFile {
				c.getNodeLinks(declaration).flags |= NodeCheckFlagsContainsConstructorReference
				c.getNodeLinks(container).flags |= NodeCheckFlagsContainsConstructorReference
				c.getNodeLinks(node).flags |= NodeCheckFlagsConstructorReference
			}
		}
	}

	c.checkNestedBlockScopedBinding(node, symbol)
}

func (c *Checker) checkIdentifier(node Identifier, checkMode *CheckMode) *Type {
	if isThisInTypeQuery(node) {
		return c.checkThisExpression(node)
	}

	symbol := c.getResolvedSymbol(node)
	if symbol == c.unknownSymbol {
		return c.errorType
	}

	c.checkIdentifierCalculateNodeCheckFlags(node, symbol)

	if symbol == c.argumentsSymbol {
		if c.isInPropertyInitializerOrClassStaticBlock(node) {
			return c.errorType
		}
		return c.getTypeOfSymbol(symbol)
	}

	if c.shouldMarkIdentifierAliasReferenced(node) {
		c.markLinkedReferences(node, ReferenceHintIdentifier)
	}

	localOrExportSymbol := c.getExportSymbolOfValueSymbolIfExported(symbol)
	declaration := localOrExportSymbol.ValueDeclaration
	immediateDeclaration := declaration

	// If the identifier is declared in a binding pattern for which we're currently computing the implied type and the
	// reference occurs with the same binding pattern, return the non-inferrable any type. This for example occurs in
	// 'const [a, b = a + 1] = [2]' when we're computing the contextual type for the array literal '[2]'.
	if declaration != nil && declaration.Kind == ast.KindBindingElement && contains(c.contextualBindingPatterns, declaration.Parent) && findAncestor(node, func(parent *ast.Node) bool {
		return parent == declaration.Parent
	}) != nil {
		return c.nonInferrableAnyType
	}

	t := c.getNarrowedTypeOfSymbol(localOrExportSymbol, node)
	assignmentKind := getAssignmentTargetKind(node)

	if assignmentKind != 0 {
		if localOrExportSymbol.Flags&ast.SymbolFlagsVariable == 0 && !(isInJSFile(node) && localOrExportSymbol.Flags&ast.SymbolFlagsValueModule != 0) {
			var assignmentError any
			switch {
			case localOrExportSymbol.Flags&ast.SymbolFlagsEnum != 0:
				assignmentError = Diagnostics.Cannot_assign_to_0_because_it_is_an_enum
			case localOrExportSymbol.Flags&ast.SymbolFlagsClass != 0:
				assignmentError = Diagnostics.Cannot_assign_to_0_because_it_is_a_class
			case localOrExportSymbol.Flags&ast.SymbolFlagsModule != 0:
				assignmentError = Diagnostics.Cannot_assign_to_0_because_it_is_a_namespace
			case localOrExportSymbol.Flags&ast.SymbolFlagsFunction != 0:
				assignmentError = Diagnostics.Cannot_assign_to_0_because_it_is_a_function
			case localOrExportSymbol.Flags&ast.SymbolFlagsAlias != 0:
				assignmentError = Diagnostics.Cannot_assign_to_0_because_it_is_an_import
			default:
				assignmentError = Diagnostics.Cannot_assign_to_0_because_it_is_not_a_variable
			}

			c.error(node, assignmentError, c.symbolToString(symbol))
			return c.errorType
		}
		if c.isReadonlySymbol(localOrExportSymbol) {
			if localOrExportSymbol.Flags&ast.SymbolFlagsVariable != 0 {
				c.error(node, Diagnostics.Cannot_assign_to_0_because_it_is_a_constant, c.symbolToString(symbol))
			} else {
				c.error(node, Diagnostics.Cannot_assign_to_0_because_it_is_a_read_only_property, c.symbolToString(symbol))
			}
			return c.errorType
		}
	}

	isAlias := localOrExportSymbol.Flags & ast.SymbolFlagsAlias

	// We only narrow variables and parameters occurring in a non-assignment position. For all other
	// entities we simply return the declared type.
	if localOrExportSymbol.Flags&ast.SymbolFlagsVariable != 0 {
		if assignmentKind == AssignmentKindDefinite {
			if isInCompoundLikeAssignment(node) {
				return c.getBaseTypeOfLiteralType(t)
			} else {
				return t
			}
		}
	} else if isAlias != 0 {
		declaration = c.getDeclarationOfAliasSymbol(symbol)
	} else {
		return t
	}

	if declaration == nil {
		return t
	}

	t = c.getNarrowableTypeForReference(t, node, checkMode)

	// The declaration container is the innermost function that encloses the declaration of the variable
	// or parameter. The flow container is the innermost function starting with which we analyze the control
	// flow graph to determine the control flow based type.
	isParameter := getRootDeclaration(declaration).Kind == ast.KindParameter
	declarationContainer := c.getControlFlowContainer(declaration)
	flowContainer := c.getControlFlowContainer(node)
	isOuterVariable := flowContainer != declarationContainer
	isSpreadDestructuringAssignmentTarget := node.Parent && node.Parent.Parent && isSpreadAssignment(node.Parent) && c.isDestructuringAssignmentTarget(node.Parent.Parent)
	isModuleExports := symbol.Flags & ast.SymbolFlagsModuleExports
	typeIsAutomatic := t == c.autoType || t == c.autoArrayType
	isAutomaticTypeInNonNull := typeIsAutomatic && node.Parent.Kind == ast.KindNonNullExpression
	// When the control flow originates in a function expression, arrow function, method, or accessor, and
	// we are referencing a closed-over const variable or parameter or mutable local variable past its last
	// assignment, we extend the origin of the control flow analysis to include the immediately enclosing
	// control flow container.
	for flowContainer != declarationContainer && (flowContainer.Kind == ast.KindFunctionExpression || flowContainer.Kind == ast.KindArrowFunction || isObjectLiteralOrClassExpressionMethodOrAccessor(flowContainer)) && (c.isConstantVariable(localOrExportSymbol) && t != c.autoArrayType || c.isParameterOrMutableLocalVariable(localOrExportSymbol) && c.isPastLastAssignment(localOrExportSymbol, node)) {
		flowContainer = c.getControlFlowContainer(flowContainer)
	}
	// We only look for uninitialized variables in strict null checking mode, and only when we can analyze
	// the entire control flow graph from the variable's declaration (i.e. when the flow container and
	// declaration container are the same).
	isNeverInitialized := immediateDeclaration && isVariableDeclaration(immediateDeclaration) && immediateDeclaration.Initializer == nil && immediateDeclaration.ExclamationToken == nil && c.isMutableLocalVariableDeclaration(immediateDeclaration) && !c.isSymbolAssignedDefinitely(symbol)
	assumeInitialized := isParameter || isAlias || (isOuterVariable && !isNeverInitialized) || isSpreadDestructuringAssignmentTarget || isModuleExports || c.isSameScopedBindingElement(node, declaration) || t != c.autoType && t != c.autoArrayType && (!c.strictNullChecks || (t.flags&(TypeFlagsAnyOrUnknown|TypeFlagsVoid)) != 0 || isInTypeQuery(node) || c.isInAmbientOrTypeNode(node) || node.Parent.Kind == ast.KindExportSpecifier) || node.Parent.Kind == ast.KindNonNullExpression || declaration.Kind == ast.KindVariableDeclaration && declaration.AsVariableDeclaration().ExclamationToken || declaration.Flags&ast.NodeFlagsAmbient
	var initialType *Type
	switch {
	case isAutomaticTypeInNonNull:
		initialType = c.undefinedType
	case assumeInitialized:
		initialType = (ifElse(isParameter, c.removeOptionalityFromDeclaredType(t, declaration.AsVariableLikeDeclaration()), t))
	case typeIsAutomatic:
		initialType = c.undefinedType
	default:
		initialType = c.getOptionalType(t)
	}
	var flowType *Type
	if isAutomaticTypeInNonNull {
		flowType = c.getNonNullableType(c.getFlowTypeOfReference(node, t, initialType, flowContainer))
	} else {
		flowType = c.getFlowTypeOfReference(node, t, initialType, flowContainer)
	}
	// A variable is considered uninitialized when it is possible to analyze the entire control flow graph
	// from declaration to use, and when the variable's declared type doesn't include undefined but the
	// control flow based type does include undefined.
	if !c.isEvolvingArrayOperationTarget(node) && (t == c.autoType || t == c.autoArrayType) {
		if flowType == c.autoType || flowType == c.autoArrayType {
			if c.noImplicitAny {
				c.error(getNameOfDeclaration(declaration), Diagnostics.Variable_0_implicitly_has_type_1_in_some_locations_where_its_type_cannot_be_determined, c.symbolToString(symbol), c.typeToString(flowType))
				c.error(node, Diagnostics.Variable_0_implicitly_has_an_1_type, c.symbolToString(symbol), c.typeToString(flowType))
			}
			return c.convertAutoToAny(flowType)
		}
	} else if !assumeInitialized && !c.containsUndefinedType(t) && c.containsUndefinedType(flowType) {
		c.error(node, Diagnostics.Variable_0_is_used_before_being_assigned, c.symbolToString(symbol))
		// Return the declared type to reduce follow-on errors
		return t
	}
	if assignmentKind != 0 {
		return c.getBaseTypeOfLiteralType(flowType)
	} else {
		return flowType
	}
}

func (c *Checker) isSameScopedBindingElement(node Identifier, declaration Declaration) *bool {
	if isBindingElement(declaration) {
		bindingElement := findAncestor(node, isBindingElement)
		return bindingElement && getRootDeclaration(bindingElement) == getRootDeclaration(declaration)
	}
}

func (c *Checker) shouldMarkIdentifierAliasReferenced(node Identifier) bool {
	parent := node.Parent
	if parent {
		// A property access expression LHS? checkPropertyAccessExpression will handle that.
		if isPropertyAccessExpression(parent) && parent.Expression == node {
			return false
		}
		// Next two check for an identifier inside a type only export.
		if isExportSpecifier(parent) && parent.IsTypeOnly {
			return false
		}
		greatGrandparent := parent.Parent. /* ? */ Parent
		if greatGrandparent && isExportDeclaration(greatGrandparent) && greatGrandparent.IsTypeOnly {
			return false
		}
	}
	return true
}

func (c *Checker) isInsideFunctionOrInstancePropertyInitializer(node *ast.Node, threshold *ast.Node) bool {
	return findAncestor(node, func(n *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
		if n == threshold {
			return "quit"
		} else {
			return isFunctionLike(n) || (n.Parent && isPropertyDeclaration(n.Parent) && !hasStaticModifier(n.Parent) && n.Parent.Initializer == n)
		}
	}) != nil
}

func (c *Checker) getPartOfForStatementContainingNode(node *ast.Node, container ForStatement) *ast.Node {
	return findAncestor(node, func(n *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
		if n == container {
			return "quit"
		} else {
			return n == container.Initializer || n == container.Condition || n == container.Incrementor || n == container.Statement
		}
	})
}

func (c *Checker) getEnclosingIterationStatement(node *ast.Node) *ast.Node {
	return findAncestor(node, func(n *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
		if !n || nodeStartsNewLexicalEnvironment(n) {
			return "quit"
		} else {
			return isIterationStatement(n, false /*lookInLabeledStatements*/)
		}
	})
}

func (c *Checker) checkNestedBlockScopedBinding(node Identifier, symbol *ast.Symbol) {
	if c.languageVersion >= ScriptTargetES2015 || (symbol.Flags&(ast.SymbolFlagsBlockScopedVariable|ast.SymbolFlagsClass)) == 0 || symbol.ValueDeclaration == nil || isSourceFile(symbol.ValueDeclaration) || symbol.ValueDeclaration.Parent.Kind == ast.KindCatchClause {
		return
	}

	// 1. walk from the use site up to the declaration and check
	// if there is anything function like between declaration and use-site (is binding/class is captured in function).
	// 2. walk from the declaration up to the boundary of lexical environment and check
	// if there is an iteration statement in between declaration and boundary (is binding/class declared inside iteration statement)

	container := getEnclosingBlockScopeContainer(symbol.ValueDeclaration)
	isCaptured := c.isInsideFunctionOrInstancePropertyInitializer(node, container)

	enclosingIterationStatement := c.getEnclosingIterationStatement(container)
	if enclosingIterationStatement != nil {
		if isCaptured {
			// mark iteration statement as containing block-scoped binding captured in some function
			capturesBlockScopeBindingInLoopBody := true
			if isForStatement(container) {
				varDeclList := getAncestor(symbol.ValueDeclaration, ast.KindVariableDeclarationList)
				if varDeclList != nil && varDeclList.Parent == container {
					part := c.getPartOfForStatementContainingNode(node.Parent, container)
					if part != nil {
						links := c.getNodeLinks(part)
						links.flags |= NodeCheckFlagsContainsCapturedBlockScopeBinding

						capturedBindings := links.capturedBlockScopeBindings || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.capturedBlockScopeBindings = [] */ TODO)
						pushIfUnique(capturedBindings, symbol)

						if part == container.Initializer {
							capturesBlockScopeBindingInLoopBody = false
							// Initializer is outside of loop body
						}
					}
				}
			}
			if capturesBlockScopeBindingInLoopBody {
				c.getNodeLinks(enclosingIterationStatement).flags |= NodeCheckFlagsLoopWithCapturedBlockScopedBinding
			}
		}

		// mark variables that are declared in loop initializer and reassigned inside the body of ForStatement.
		// if body of ForStatement will be converted to function then we'll need a extra machinery to propagate reassigned values back.
		if isForStatement(container) {
			varDeclList := getAncestor(symbol.ValueDeclaration, ast.KindVariableDeclarationList)
			if varDeclList != nil && varDeclList.Parent == container && c.isAssignedInBodyOfForStatement(node, container) {
				c.getNodeLinks(symbol.ValueDeclaration).flags |= NodeCheckFlagsNeedsLoopOutParameter
			}
		}

		// set 'declared inside loop' bit on the block-scoped binding
		c.getNodeLinks(symbol.ValueDeclaration).flags |= NodeCheckFlagsBlockScopedBindingInLoop
	}

	if isCaptured {
		c.getNodeLinks(symbol.ValueDeclaration).flags |= NodeCheckFlagsCapturedBlockScopedBinding
	}
}

func (c *Checker) isBindingCapturedByNode(node *ast.Node, decl Union[VariableDeclaration, BindingElement]) bool {
	links := c.getNodeLinks(node)
	return links && contains(links.capturedBlockScopeBindings, c.getSymbolOfDeclaration(decl))
}

func (c *Checker) isAssignedInBodyOfForStatement(node Identifier, container ForStatement) bool {
	// skip parenthesized nodes
	var current *ast.Node = node
	for current.Parent.Kind == ast.KindParenthesizedExpression {
		current = current.Parent
	}

	// check if node is used as LHS in some assignment expression
	isAssigned := false
	if isAssignmentTarget(current) {
		isAssigned = true
	} else if current.Parent.Kind == ast.KindPrefixUnaryExpression || current.Parent.Kind == ast.KindPostfixUnaryExpression {
		expr := current.Parent /* as PrefixUnaryExpression | PostfixUnaryExpression */
		isAssigned = expr.Operator == ast.KindPlusPlusToken || expr.Operator == ast.KindMinusMinusToken
	}

	if !isAssigned {
		return false
	}

	// at this point we know that node is the target of assignment
	// now check that modification happens inside the statement part of the ForStatement
	return findAncestor(current, func(n *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
		if n == container {
			return "quit"
		} else {
			return n == container.Statement
		}
	}) != nil
}

func (c *Checker) captureLexicalThis(node *ast.Node, container *ast.Node) {
	c.getNodeLinks(node).flags |= NodeCheckFlagsLexicalThis
	if container.Kind == ast.KindPropertyDeclaration || container.Kind == ast.KindConstructor {
		classNode := container.Parent
		c.getNodeLinks(classNode).flags |= NodeCheckFlagsCaptureThis
	} else {
		c.getNodeLinks(container).flags |= NodeCheckFlagsCaptureThis
	}
}

func (c *Checker) findFirstSuperCall(node *ast.Node) *SuperCall {
	switch {
	case isSuperCall(node):
		return node
	case isFunctionLike(node):
		return nil
	default:
		return forEachChild(node, c.findFirstSuperCall)
	}
}

/**
 * Check if the given class-declaration extends null then return true.
 * Otherwise, return false
 * @param classDecl a class declaration to check if it extends null
 */

func (c *Checker) classDeclarationExtendsNull(classDecl ClassLikeDeclaration) bool {
	classSymbol := c.getSymbolOfDeclaration(classDecl)
	classInstanceType := c.getDeclaredTypeOfSymbol(classSymbol).AsInterfaceType()
	baseConstructorType := c.getBaseConstructorTypeOfClass(classInstanceType)

	return baseConstructorType == c.nullWideningType
}

func (c *Checker) checkThisBeforeSuper(node *ast.Node, container *ast.Node, diagnosticMessage DiagnosticMessage) {
	containingClassDecl := container.Parent.AsClassDeclaration()
	baseTypeNode := getClassExtendsHeritageElement(containingClassDecl)

	// If a containing class does not have extends clause or the class extends null
	// skip checking whether super statement is called before "this" accessing.
	if baseTypeNode != nil && !c.classDeclarationExtendsNull(containingClassDecl) {
		if canHaveFlowNode(node) && node.FlowNode != nil && !c.isPostSuperFlowNode(node.FlowNode, false /*noCacheCheck*/) {
			c.error(node, diagnosticMessage)
		}
	}
}

func (c *Checker) checkThisInStaticClassFieldInitializerInDecoratedClass(thisExpression *ast.Node, container *ast.Node) {
	if isPropertyDeclaration(container) && hasStaticModifier(container) && c.legacyDecorators && container.Initializer != nil && textRangeContainsPositionInclusive(container.Initializer, thisExpression.Pos) && hasDecorators(container.Parent) {
		c.error(thisExpression, Diagnostics.Cannot_use_this_in_a_static_property_initializer_of_a_decorated_class)
	}
}

func (c *Checker) checkThisExpression(node *ast.Node) *Type {
	isNodeInTypeQuery := isInTypeQuery(node)
	// Stop at the first arrow function so that we can
	// tell whether 'this' needs to be captured.
	container := getThisContainer(node, true /*includeArrowFunctions*/, true /*includeClassComputedPropertyName*/)
	capturedByArrowFunction := false
	thisInComputedPropertyName := false

	if container.Kind == ast.KindConstructor {
		c.checkThisBeforeSuper(node, container, Diagnostics.super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class)
	}

	for true {
		// Now skip arrow functions to get the "real" owner of 'this'.
		if container.Kind == ast.KindArrowFunction {
			container = getThisContainer(container, false /*includeArrowFunctions*/, !thisInComputedPropertyName)
			capturedByArrowFunction = true
		}

		if container.Kind == ast.KindComputedPropertyName {
			container = getThisContainer(container, !capturedByArrowFunction, false /*includeClassComputedPropertyName*/)
			thisInComputedPropertyName = true
			continue
		}

		break
	}

	c.checkThisInStaticClassFieldInitializerInDecoratedClass(node, container)
	if thisInComputedPropertyName {
		c.error(node, Diagnostics.this_cannot_be_referenced_in_a_computed_property_name)
	} else {
		switch container.Kind {
		case ast.KindModuleDeclaration:
			c.error(node, Diagnostics.this_cannot_be_referenced_in_a_module_or_namespace_body)
			// do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks
		case ast.KindEnumDeclaration:
			c.error(node, Diagnostics.this_cannot_be_referenced_in_current_location)
			// do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks
		}
	}

	// When targeting es6, mark that we'll need to capture `this` in its lexically bound scope.
	if !isNodeInTypeQuery && capturedByArrowFunction && c.languageVersion < ScriptTargetES2015 {
		c.captureLexicalThis(node, container)
	}

	t := c.tryGetThisTypeAt(node, true /*includeGlobalThis*/, container)
	if c.noImplicitThis {
		globalThisType := c.getTypeOfSymbol(c.globalThisSymbol)
		if t == globalThisType && capturedByArrowFunction {
			c.error(node, Diagnostics.The_containing_arrow_function_captures_the_global_value_of_this)
		} else if !(t) {
			// With noImplicitThis, functions may not reference 'this' if it has type 'any'
			diag := c.error(node, Diagnostics.this_implicitly_has_type_any_because_it_does_not_have_a_type_annotation)
			if !isSourceFile(container) {
				outsideThis := c.tryGetThisTypeAt(container)
				if outsideThis != nil && outsideThis != globalThisType {
					addRelatedInfo(diag, createDiagnosticForNode(container, Diagnostics.An_outer_value_of_this_is_shadowed_by_this_container))
				}
			}
		}
	}
	return t || c.anyType
}

func (c *Checker) tryGetThisTypeAt(node *ast.Node, includeGlobalThis bool /*  = true */, container ThisContainer /*  = getThisContainer(node, /*includeArrowFunctions* / false, /*includeClassComputedPropertyName* / false) */) *Type {
	isInJS := isInJSFile(node)
	if isFunctionLike(container) && (!c.isInParameterInitializerBeforeContainingFunction(node) || getThisParameter(container) != nil) {
		thisType := c.getThisTypeOfDeclaration(container) || isInJS && c.getTypeForThisExpressionFromJSDoc(container)
		// Note: a parameter initializer should refer to class-this unless function-this is explicitly annotated.
		// If this is a function in a JS file, it might be a class method.
		if !thisType {
			className := c.getClassNameFromPrototypeMethod(container)
			if isInJS && className != nil {
				classSymbol := c.checkExpression(className).symbol
				if classSymbol && classSymbol.Members != nil && (classSymbol.Flags&ast.SymbolFlagsFunction != 0) {
					thisType = c.getDeclaredTypeOfSymbol(classSymbol).AsInterfaceType().thisType
				}
			} else if c.isJSConstructor(container) {
				thisType = c.getDeclaredTypeOfSymbol(c.getMergedSymbol(container.Symbol)).AsInterfaceType().thisType
			}
			thisType = thisType || c.getContextualThisParameterType(container)
		}

		if thisType != nil {
			return c.getFlowTypeOfReference(node, thisType)
		}
	}

	if isClassLike(container.Parent) {
		symbol := c.getSymbolOfDeclaration(container.Parent)
		var t *Type
		if isStatic(container) {
			t = c.getTypeOfSymbol(symbol)
		} else {
			t = c.getDeclaredTypeOfSymbol(symbol).AsInterfaceType().thisType
		}
		return c.getFlowTypeOfReference(node, t)
	}

	if isSourceFile(container) {
		// look up in the source file's locals or exports
		if container.CommonJsModuleIndicator != nil {
			fileSymbol := c.getSymbolOfDeclaration(container)
			return fileSymbol && c.getTypeOfSymbol(fileSymbol)
		} else if container.ExternalModuleIndicator {
			// TODO: Maybe issue a better error than 'object is possibly undefined'
			return c.undefinedType
		} else if includeGlobalThis {
			return c.getTypeOfSymbol(c.globalThisSymbol)
		}
	}
}

func (c *Checker) getExplicitThisType(node Expression) *Type {
	container := getThisContainer(node, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)
	if isFunctionLike(container) {
		signature := c.getSignatureFromDeclaration(container)
		if signature.thisParameter != nil {
			return c.getExplicitTypeOfSymbol(signature.thisParameter)
		}
	}
	if isClassLike(container.Parent) {
		symbol := c.getSymbolOfDeclaration(container.Parent)
		if isStatic(container) {
			return c.getTypeOfSymbol(symbol)
		} else {
			return c.getDeclaredTypeOfSymbol(symbol).AsInterfaceType().thisType
		}
	}
}

func (c *Checker) getClassNameFromPrototypeMethod(container *ast.Node) *LeftHandSideExpression {
	// Check if it's the RHS of a x.prototype.y = function [name]() { .... }
	if container.Kind == ast.KindFunctionExpression && isBinaryExpression(container.Parent) && getAssignmentDeclarationKind(container.Parent) == AssignmentDeclarationKindPrototypeProperty {
		// Get the 'x' of 'x.prototype.y = container'
		return (container.Parent.Left.AsPropertyAccessExpression()).Expression.AsPropertyAccessExpression().Expression
		// x
	} else if container.Kind == ast.KindMethodDeclaration && container.Parent.Kind == ast.KindObjectLiteralExpression && isBinaryExpression(container.Parent.Parent) && getAssignmentDeclarationKind(container.Parent.Parent) == AssignmentDeclarationKindPrototype {
		return container.Parent.Parent.Left.AsPropertyAccessExpression().Expression
	} else if container.Kind == ast.KindFunctionExpression && container.Parent.Kind == ast.KindPropertyAssignment && container.Parent.Parent.Kind == ast.KindObjectLiteralExpression && isBinaryExpression(container.Parent.Parent.Parent) && getAssignmentDeclarationKind(container.Parent.Parent.Parent) == AssignmentDeclarationKindPrototype {
		return container.Parent.Parent.Parent.Left.AsPropertyAccessExpression().Expression
	} else if container.Kind == ast.KindFunctionExpression && isPropertyAssignment(container.Parent) && isIdentifier(container.Parent.Name) && (container.Parent.Name.EscapedText == "value" || container.Parent.Name.EscapedText == "get" || container.Parent.Name.EscapedText == "set") && isObjectLiteralExpression(container.Parent.Parent) && isCallExpression(container.Parent.Parent.Parent) && container.Parent.Parent.Parent.Arguments[2] == container.Parent.Parent && getAssignmentDeclarationKind(container.Parent.Parent.Parent) == AssignmentDeclarationKindObjectDefinePrototypeProperty {
		return container.Parent.Parent.Parent.Arguments[0].AsPropertyAccessExpression().Expression
	} else if isMethodDeclaration(container) && isIdentifier(container.Name) && (container.Name.EscapedText == "value" || container.Name.EscapedText == "get" || container.Name.EscapedText == "set") && isObjectLiteralExpression(container.Parent) && isCallExpression(container.Parent.Parent) && container.Parent.Parent.Arguments[2] == container.Parent && getAssignmentDeclarationKind(container.Parent.Parent) == AssignmentDeclarationKindObjectDefinePrototypeProperty {
		return container.Parent.Parent.Arguments[0].AsPropertyAccessExpression().Expression
	}
}

func (c *Checker) getTypeForThisExpressionFromJSDoc(node SignatureDeclaration) *Type {
	thisTag := getJSDocThisTag(node)
	if thisTag != nil && thisTag.TypeExpression {
		return c.getTypeFromTypeNode(thisTag.TypeExpression)
	}
	signature := c.getSignatureOfTypeTag(node)
	if signature != nil {
		return c.getThisTypeOfSignature(signature)
	}
}

func (c *Checker) isInConstructorArgumentInitializer(node *ast.Node, constructorDecl *ast.Node) bool {
	return findAncestor(node, func(n *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
		if isFunctionLikeDeclaration(n) {
			return "quit"
		} else {
			return n.Kind == ast.KindParameter && n.Parent == constructorDecl
		}
	}) != nil
}

func (c *Checker) checkSuperExpression(node *ast.Node) *Type {
	isCallExpression := node.Parent.Kind == ast.KindCallExpression && node.Parent.AsCallExpression().Expression == node

	immediateContainer := getSuperContainer(node, true /*stopOnFunctions*/)
	container := immediateContainer
	needToCaptureLexicalThis := false
	inAsyncFunction := false

	// adjust the container reference in case if super is used inside arrow functions with arbitrarily deep nesting
	if !isCallExpression {
		for container != nil && container.Kind == ast.KindArrowFunction {
			if hasSyntacticModifier(container, ast.ModifierFlagsAsync) {
				inAsyncFunction = true
			}
			container = getSuperContainer(container, true /*stopOnFunctions*/)
			needToCaptureLexicalThis = c.languageVersion < ScriptTargetES2015
		}
		if container != nil && hasSyntacticModifier(container, ast.ModifierFlagsAsync) {
			inAsyncFunction = true
		}
	}

	var nodeCheckFlag NodeCheckFlags = 0

	if container == nil || !isLegalUsageOfSuperExpression(container) {
		// issue more specific error if super is used in computed property name
		// class A { foo() { return "1" }}
		// class B {
		//     [super.foo()]() {}
		// }
		current := findAncestor(node, func(n *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
			if n == container {
				return "quit"
			} else {
				return n.Kind == ast.KindComputedPropertyName
			}
		})
		if current != nil && current.Kind == ast.KindComputedPropertyName {
			c.error(node, Diagnostics.super_cannot_be_referenced_in_a_computed_property_name)
		} else if isCallExpression {
			c.error(node, Diagnostics.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors)
		} else if container == nil || !container.Parent || !(isClassLike(container.Parent) || container.Parent.Kind == ast.KindObjectLiteralExpression) {
			c.error(node, Diagnostics.super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions)
		} else {
			c.error(node, Diagnostics.super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class)
		}
		return c.errorType
	}

	if !isCallExpression && immediateContainer.Kind == ast.KindConstructor {
		c.checkThisBeforeSuper(node, container, Diagnostics.super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class)
	}

	if isStatic(container) || isCallExpression {
		nodeCheckFlag = NodeCheckFlagsSuperStatic
		if !isCallExpression && c.languageVersion >= ScriptTargetES2015 && c.languageVersion <= ScriptTargetES2021 && (isPropertyDeclaration(container) || isClassStaticBlockDeclaration(container)) {
			// for `super.x` or `super[x]` in a static initializer, mark all enclosing
			// block scope containers so that we can report potential collisions with
			// `Reflect`.
			forEachEnclosingBlockScopeContainer(node.Parent, func(current *ast.Node) {
				if !isSourceFile(current) || isExternalOrCommonJsModule(current) {
					c.getNodeLinks(current).flags |= NodeCheckFlagsContainsSuperPropertyInStaticInitializer
				}
			})
		}
	} else {
		nodeCheckFlag = NodeCheckFlagsSuperInstance
	}

	c.getNodeLinks(node).flags |= nodeCheckFlag

	// Due to how we emit async functions, we need to specialize the emit for an async method that contains a `super` reference.
	// This is due to the fact that we emit the body of an async function inside of a generator function. As generator
	// functions cannot reference `super`, we emit a helper inside of the method body, but outside of the generator. This helper
	// uses an arrow function, which is permitted to reference `super`.
	//
	// There are two primary ways we can access `super` from within an async method. The first is getting the value of a property
	// or indexed access on super, either as part of a right-hand-side expression or call expression. The second is when setting the value
	// of a property or indexed access, either as part of an assignment expression or destructuring assignment.
	//
	// The simplest case is reading a value, in which case we will emit something like the following:
	//
	//  // ts
	//  ...
	//  async asyncMethod() {
	//    let x = await super.asyncMethod();
	//    return x;
	//  }
	//  ...
	//
	//  // js
	//  ...
	//  asyncMethod() {
	//      const _super = Object.create(null, {
	//        asyncMethod: { get: () => super.asyncMethod },
	//      });
	//      return __awaiter(this, arguments, Promise, function *() {
	//          let x = yield _super.asyncMethod.call(this);
	//          return x;
	//      });
	//  }
	//  ...
	//
	// The more complex case is when we wish to assign a value, especially as part of a destructuring assignment. As both cases
	// are legal in ES6, but also likely less frequent, we only emit setters if there is an assignment:
	//
	//  // ts
	//  ...
	//  async asyncMethod(ar: Promise<any[]>) {
	//      [super.a, super.b] = await ar;
	//  }
	//  ...
	//
	//  // js
	//  ...
	//  asyncMethod(ar) {
	//      const _super = Object.create(null, {
	//        a: { get: () => super.a, set: (v) => super.a = v },
	//        b: { get: () => super.b, set: (v) => super.b = v }
	//      };
	//      return __awaiter(this, arguments, Promise, function *() {
	//          [_super.a, _super.b] = yield ar;
	//      });
	//  }
	//  ...
	//
	// Creating an object that has getter and setters instead of just an accessor function is required for destructuring assignments
	// as a call expression cannot be used as the target of a destructuring assignment while a property access can.
	//
	// For element access expressions (`super[x]`), we emit a generic helper that forwards the element access in both situations.
	if container.Kind == ast.KindMethodDeclaration && inAsyncFunction {
		if isSuperProperty(node.Parent) && isAssignmentTarget(node.Parent) {
			c.getNodeLinks(container).flags |= NodeCheckFlagsMethodWithSuperPropertyAssignmentInAsync
		} else {
			c.getNodeLinks(container).flags |= NodeCheckFlagsMethodWithSuperPropertyAccessInAsync
		}
	}

	if needToCaptureLexicalThis {
		// call expressions are allowed only in constructors so they should always capture correct 'this'
		// super property access expressions can also appear in arrow functions -
		// in this case they should also use correct lexical this
		c.captureLexicalThis(node.Parent, container)
	}

	if container.Parent.Kind == ast.KindObjectLiteralExpression {
		if c.languageVersion < ScriptTargetES2015 {
			c.error(node, Diagnostics.super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_higher)
			return c.errorType
		} else {
			// for object literal assume that type of 'super' is 'any'
			return c.anyType
		}
	}

	// at this point the only legal case for parent is ClassLikeDeclaration
	classLikeDeclaration := container.Parent.AsClassLikeDeclaration()
	if getClassExtendsHeritageElement(classLikeDeclaration) == nil {
		c.error(node, Diagnostics.super_can_only_be_referenced_in_a_derived_class)
		return c.errorType
	}

	if c.classDeclarationExtendsNull(classLikeDeclaration) {
		if isCallExpression {
			return c.errorType
		} else {
			return c.nullWideningType
		}
	}

	classType := c.getDeclaredTypeOfSymbol(c.getSymbolOfDeclaration(classLikeDeclaration)).AsInterfaceType()
	baseClassType := classType && c.getBaseTypes(classType)[0]
	if !baseClassType {
		return c.errorType
	}

	if container.Kind == ast.KindConstructor && c.isInConstructorArgumentInitializer(node, container) {
		// issue custom error message for super property access in constructor arguments (to be aligned with old compiler)
		c.error(node, Diagnostics.super_cannot_be_referenced_in_constructor_arguments)
		return c.errorType
	}

	if nodeCheckFlag == NodeCheckFlagsSuperStatic {
		return c.getBaseConstructorTypeOfClass(classType)
	} else {
		return c.getTypeWithThisArgument(baseClassType, classType.thisType)
	}

	isLegalUsageOfSuperExpression := func(container *ast.Node) bool {
		if isCallExpression {
			// TS 1.0 SPEC (April 2014): 4.8.1
			// Super calls are only permitted in constructors of derived classes
			return container.Kind == ast.KindConstructor
		} else {
			// TS 1.0 SPEC (April 2014)
			// 'super' property access is allowed
			// - In a constructor, instance member function, instance member accessor, or instance member variable initializer where this references a derived class instance
			// - In a static member function or static member accessor

			// topmost container must be something that is directly nested in the class declaration\object literal expression
			if isClassLike(container.Parent) || container.Parent.Kind == ast.KindObjectLiteralExpression {
				if isStatic(container) {
					return container.Kind == ast.KindMethodDeclaration || container.Kind == ast.KindMethodSignature || container.Kind == ast.KindGetAccessor || container.Kind == ast.KindSetAccessor || container.Kind == ast.KindPropertyDeclaration || container.Kind == ast.KindClassStaticBlockDeclaration
				} else {
					return container.Kind == ast.KindMethodDeclaration || container.Kind == ast.KindMethodSignature || container.Kind == ast.KindGetAccessor || container.Kind == ast.KindSetAccessor || container.Kind == ast.KindPropertyDeclaration || container.Kind == ast.KindPropertySignature || container.Kind == ast.KindConstructor
				}
			}
		}

		return false
	}

}

func (c *Checker) getContainingObjectLiteral(func_ SignatureDeclaration) *ObjectLiteralExpression {
	switch {
	case (func_.Kind == ast.KindMethodDeclaration || func_.Kind == ast.KindGetAccessor || func_.Kind == ast.KindSetAccessor) && func_.Parent.Kind == ast.KindObjectLiteralExpression:
		return func_.Parent
	case func_.Kind == ast.KindFunctionExpression && func_.Parent.Kind == ast.KindPropertyAssignment:
		return func_.Parent.Parent.AsObjectLiteralExpression()
	default:
		return nil
	}
}

func (c *Checker) getThisTypeArgument(t *Type) *Type {
	if getObjectFlags(t)&ObjectFlagsReference != 0 && t.AsTypeReference().target == c.globalThisType {
		return c.getTypeArguments(t.AsTypeReference())[0]
	} else {
		return nil
	}
}

func (c *Checker) getThisTypeFromContextualType(t *Type) *Type {
	return c.mapType(t, func(t *Type) *Type {
		if t.flags&TypeFlagsIntersection != 0 {
			return forEach(t.AsIntersectionType().types, c.getThisTypeArgument)
		} else {
			return c.getThisTypeArgument(t)
		}
	})
}

func (c *Checker) getThisTypeOfObjectLiteralFromContextualType(containingLiteral ObjectLiteralExpression, contextualType *Type) *Type {
	literal := containingLiteral
	t := contextualType
	for t {
		thisType := c.getThisTypeFromContextualType(t)
		if thisType != nil {
			return thisType
		}
		if literal.Parent.Kind != ast.KindPropertyAssignment {
			break
		}
		literal = literal.Parent.Parent.AsObjectLiteralExpression()
		t = c.getApparentTypeOfContextualType(literal, nil /*contextFlags*/)
	}
}

func (c *Checker) getContextualThisParameterType(func_ SignatureDeclaration) *Type {
	if func_.Kind == ast.KindArrowFunction {
		return nil
	}
	if c.isContextSensitiveFunctionOrObjectLiteralMethod(func_) {
		contextualSignature := c.getContextualSignature(func_)
		if contextualSignature != nil {
			thisParameter := contextualSignature.thisParameter
			if thisParameter != nil {
				return c.getTypeOfSymbol(thisParameter)
			}
		}
	}
	inJs := isInJSFile(func_)
	if c.noImplicitThis || inJs {
		containingLiteral := c.getContainingObjectLiteral(func_)
		if containingLiteral != nil {
			// We have an object literal method. Check if the containing object literal has a contextual type
			// that includes a ThisType<T>. If so, T is the contextual type for 'this'. We continue looking in
			// any directly enclosing object literals.
			contextualType := c.getApparentTypeOfContextualType(containingLiteral, nil /*contextFlags*/)
			thisType := c.getThisTypeOfObjectLiteralFromContextualType(containingLiteral, contextualType)
			if thisType != nil {
				return c.instantiateType(thisType, c.getMapperFromContext(c.getInferenceContext(containingLiteral)))
			}
			// There was no contextual ThisType<T> for the containing object literal, so the contextual type
			// for 'this' is the non-null form of the contextual type for the containing object literal or
			// the type of the object literal itself.
			return c.getWidenedType(ifElse(contextualType != nil, c.getNonNullableType(contextualType), c.checkExpressionCached(containingLiteral)))
		}
		// In an assignment of the form 'obj.xxx = function(...)' or 'obj[xxx] = function(...)', the
		// contextual type for 'this' is 'obj'.
		parent := walkUpParenthesizedExpressions(func_.Parent)
		if isAssignmentExpression(parent) {
			target := parent.Left
			if isAccessExpression(target) {
				TODO_IDENTIFIER := target
				// Don't contextually type `this` as `exports` in `exports.Point = function(x, y) { this.x = x; this.y = y; }`
				if inJs && isIdentifier(expression) {
					sourceFile := getSourceFileOfNode(parent)
					if sourceFile.CommonJsModuleIndicator != nil && c.getResolvedSymbol(expression) == sourceFile.Symbol {
						return nil
					}
				}

				return c.getWidenedType(c.checkExpressionCached(expression))
			}
		}
	}
	return nil
}

// Return contextual type of parameter or undefined if no contextual type is available
func (c *Checker) getContextuallyTypedParameterType(parameter ParameterDeclaration) *Type {
	func_ := parameter.Parent
	if !c.isContextSensitiveFunctionOrObjectLiteralMethod(func_) {
		return nil
	}
	iife := getImmediatelyInvokedFunctionExpression(func_)
	if iife != nil && iife.Arguments {
		args := c.getEffectiveCallArguments(iife)
		indexOfParameter := func_.Parameters.indexOf(parameter)
		if parameter.DotDotDotToken != nil {
			return c.getSpreadArgumentType(args, indexOfParameter, args.length, c.anyType, nil /*context*/, CheckModeNormal)
		}
		links := c.getNodeLinks(iife)
		cached := links.resolvedSignature
		links.resolvedSignature = c.anySignature
		var t *Type
		switch {
		case indexOfParameter < args.length:
			t = c.getWidenedLiteralType(c.checkExpression(args[indexOfParameter]))
		case parameter.Initializer != nil:
			t = nil
		default:
			t = c.undefinedWideningType
		}
		links.resolvedSignature = cached
		return t
	}
	contextualSignature := c.getContextualSignature(func_)
	if contextualSignature != nil {
		index := func_.Parameters.indexOf(parameter) - (ifElse(getThisParameter(func_) != nil, 1, 0))
		if parameter.DotDotDotToken != nil && lastOrUndefined(func_.Parameters) == parameter {
			return c.getRestTypeAtPosition(contextualSignature, index)
		} else {
			return c.tryGetTypeAtPosition(contextualSignature, index)
		}
	}
}

func (c *Checker) getContextualTypeForVariableLikeDeclaration(declaration VariableLikeDeclaration, contextFlags *ContextFlags) *Type {
	typeNode := getEffectiveTypeAnnotationNode(declaration) || (ifElse(isInJSFile(declaration), tryGetJSDocSatisfiesTypeNode(declaration), nil))
	if typeNode != nil {
		return c.getTypeFromTypeNode(typeNode)
	}
	switch declaration.Kind {
	case ast.KindParameter:
		return c.getContextuallyTypedParameterType(declaration)
	case ast.KindBindingElement:
		return c.getContextualTypeForBindingElement(declaration, contextFlags)
	case ast.KindPropertyDeclaration:
		if isStatic(declaration) {
			return c.getContextualTypeForStaticPropertyDeclaration(declaration, contextFlags)
		}
		// By default, do nothing and return undefined - only the above cases have context implied by a parent
	}
}

func (c *Checker) getContextualTypeForBindingElement(declaration BindingElement, contextFlags *ContextFlags) *Type {
	parent := declaration.Parent.Parent
	name := declaration.PropertyName || declaration.Name
	parentType := c.getContextualTypeForVariableLikeDeclaration(parent, contextFlags) || parent.Kind != ast.KindBindingElement && parent.Initializer && c.checkDeclarationInitializer(parent, ifElse(declaration.DotDotDotToken != nil, CheckModeRestBindingElement, CheckModeNormal))
	if !parentType || isBindingPattern(name) || isComputedNonLiteralName(name) {
		return nil
	}
	if parent.Name.Kind == ast.KindArrayBindingPattern {
		index := indexOfNode(declaration.Parent.Elements, declaration)
		if index < 0 {
			return nil
		}
		return c.getContextualTypeForElementExpression(parentType, index)
	}
	nameType := c.getLiteralTypeFromPropertyName(name)
	if isTypeUsableAsPropertyName(nameType) {
		text := getPropertyNameFromType(nameType)
		return c.getTypeOfPropertyOfType(parentType, text)
	}
}

func (c *Checker) getContextualTypeForStaticPropertyDeclaration(declaration PropertyDeclaration, contextFlags *ContextFlags) *Type {
	parentType := isExpression(declaration.Parent) && c.getContextualType(declaration.Parent, contextFlags)
	if !parentType {
		return nil
	}
	return c.getTypeOfPropertyOfContextualType(parentType, c.getSymbolOfDeclaration(declaration).EscapedName)
}

// In a variable, parameter or property declaration with a type annotation,
//
//	the contextual type of an initializer expression is the type of the variable, parameter or property.
//
// Otherwise, in a parameter declaration of a contextually typed function expression,
//
//	the contextual type of an initializer expression is the contextual type of the parameter.
//
// Otherwise, in a variable or parameter declaration with a binding pattern name,
//
//	the contextual type of an initializer expression is the type implied by the binding pattern.
//
// Otherwise, in a binding pattern inside a variable or parameter declaration,
//
//	the contextual type of an initializer expression is the type annotation of the containing declaration, if present.
func (c *Checker) getContextualTypeForInitializerExpression(node Expression, contextFlags *ContextFlags) *Type {
	declaration := node.Parent.AsVariableLikeDeclaration()
	if hasInitializer(declaration) && node == declaration.Initializer {
		result := c.getContextualTypeForVariableLikeDeclaration(declaration, contextFlags)
		if result != nil {
			return result
		}
		if contextFlags&ContextFlagsSkipBindingPatterns == 0 && isBindingPattern(declaration.Name) && declaration.Name.Elements.length > 0 {
			return c.getTypeFromBindingPattern(declaration.Name, true /*includePatternInType*/, false /*reportErrors*/)
		}
	}
	return nil
}

func (c *Checker) getContextualTypeForReturnExpression(node Expression, contextFlags *ContextFlags) *Type {
	func_ := getContainingFunction(node)
	if func_ != nil {
		contextualReturnType := c.getContextualReturnType(func_, contextFlags)
		if contextualReturnType != nil {
			functionFlags := getFunctionFlags(func_)
			if functionFlags&FunctionFlagsGenerator != 0 {
				isAsyncGenerator := (functionFlags & FunctionFlagsAsync) != 0
				if contextualReturnType.flags&TypeFlagsUnion != 0 {
					contextualReturnType = c.filterType(contextualReturnType, func(t *Type) bool {
						return c.getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKindReturn, t, isAsyncGenerator) != nil
					})
				}
				iterationReturnType := c.getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKindReturn, contextualReturnType, (functionFlags&FunctionFlagsAsync) != 0)
				if iterationReturnType == nil {
					return nil
				}
				contextualReturnType = iterationReturnType
				// falls through to unwrap Promise for AsyncGenerators
			}

			if functionFlags&FunctionFlagsAsync != 0 {
				// Get the awaited type without the `Awaited<T>` alias
				contextualAwaitedType := c.mapType(contextualReturnType, c.getAwaitedTypeNoAlias)
				return contextualAwaitedType && c.getUnionType([]*Type{contextualAwaitedType, c.createPromiseLikeType(contextualAwaitedType)})
			}

			return contextualReturnType
			// Regular function or Generator function
		}
	}
	return nil
}

func (c *Checker) getContextualTypeForAwaitOperand(node AwaitExpression, contextFlags *ContextFlags) *Type {
	contextualType := c.getContextualType(node, contextFlags)
	if contextualType != nil {
		contextualAwaitedType := c.getAwaitedTypeNoAlias(contextualType)
		return contextualAwaitedType && c.getUnionType([]*Type{contextualAwaitedType, c.createPromiseLikeType(contextualAwaitedType)})
	}
	return nil
}

func (c *Checker) getContextualTypeForYieldOperand(node YieldExpression, contextFlags *ContextFlags) *Type {
	func_ := getContainingFunction(node)
	if func_ != nil {
		functionFlags := getFunctionFlags(func_)
		contextualReturnType := c.getContextualReturnType(func_, contextFlags)
		if contextualReturnType != nil {
			isAsyncGenerator := (functionFlags & FunctionFlagsAsync) != 0
			if node.AsteriskToken == nil && contextualReturnType.flags&TypeFlagsUnion != 0 {
				contextualReturnType = c.filterType(contextualReturnType, func(t *Type) bool {
					return c.getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKindReturn, t, isAsyncGenerator) != nil
				})
			}
			if node.AsteriskToken != nil {
				iterationTypes := c.getIterationTypesOfGeneratorFunctionReturnType(contextualReturnType, isAsyncGenerator)
				yieldType := ifNotNilElse(iterationTypes. /* ? */ yieldType, c.silentNeverType)
				returnType := ifNotNilElse(c.getContextualType(node, contextFlags), c.silentNeverType)
				nextType := ifNotNilElse(iterationTypes. /* ? */ nextType, c.unknownType)
				generatorType := c.createGeneratorType(yieldType, returnType, nextType, false /*isAsyncGenerator*/)
				if isAsyncGenerator {
					asyncGeneratorType := c.createGeneratorType(yieldType, returnType, nextType, true /*isAsyncGenerator*/)
					return c.getUnionType([]ObjectType{generatorType, asyncGeneratorType})
				}
				return generatorType
			}
			return c.getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKindYield, contextualReturnType, isAsyncGenerator)
		}
	}

	return nil
}

func (c *Checker) isInParameterInitializerBeforeContainingFunction(node *ast.Node) bool {
	inBindingInitializer := false
	for node.Parent && !isFunctionLike(node.Parent) {
		if isParameter(node.Parent) && (inBindingInitializer || node.Parent.Initializer == node) {
			return true
		}
		if isBindingElement(node.Parent) && node.Parent.Initializer == node {
			inBindingInitializer = true
		}

		node = node.Parent
	}

	return false
}

func (c *Checker) getContextualIterationType(kind IterationTypeKind, functionDecl SignatureDeclaration) *Type {
	isAsync := getFunctionFlags(functionDecl)&FunctionFlagsAsync != 0
	contextualReturnType := c.getContextualReturnType(functionDecl, nil /*contextFlags*/)
	if contextualReturnType != nil {
		return c.getIterationTypeOfGeneratorFunctionReturnType(kind, contextualReturnType, isAsync) || nil
	}

	return nil
}

func (c *Checker) getContextualReturnType(functionDecl SignatureDeclaration, contextFlags *ContextFlags) *Type {
	// If the containing function has a return type annotation, is a constructor, or is a get accessor whose
	// corresponding set accessor has a type annotation, return statements in the function are contextually typed
	returnType := c.getReturnTypeFromAnnotation(functionDecl)
	if returnType != nil {
		return returnType
	}
	// Otherwise, if the containing function is contextually typed by a function type with exactly one call signature
	// and that call signature is non-generic, return statements are contextually typed by the return type of the signature
	signature := c.getContextualSignatureForFunctionLikeDeclaration(functionDecl.AsFunctionExpression())
	if signature != nil && !c.isResolvingReturnTypeOfSignature(signature) {
		returnType := c.getReturnTypeOfSignature(signature)
		functionFlags := getFunctionFlags(functionDecl)
		if functionFlags&FunctionFlagsGenerator != 0 {
			return c.filterType(returnType, func(t *Type) bool {
				return t.flags&(TypeFlagsAnyOrUnknown|TypeFlagsVoid|TypeFlagsInstantiableNonPrimitive) != 0 || c.checkGeneratorInstantiationAssignabilityToReturnType(t, functionFlags, nil /*errorNode*/)
			})
		}
		if functionFlags&FunctionFlagsAsync != 0 {
			return c.filterType(returnType, func(t *Type) bool {
				return t.flags&(TypeFlagsAnyOrUnknown|TypeFlagsVoid|TypeFlagsInstantiableNonPrimitive) != 0 || c.getAwaitedTypeOfPromise(t) != nil
			})
		}
		return returnType
	}
	iife := getImmediatelyInvokedFunctionExpression(functionDecl)
	if iife != nil {
		return c.getContextualType(iife, contextFlags)
	}
	return nil
}

// In a typed function call, an argument or substitution expression is contextually typed by the type of the corresponding parameter.
func (c *Checker) getContextualTypeForArgument(callTarget CallLikeExpression, arg Expression) *Type {
	args := c.getEffectiveCallArguments(callTarget)
	argIndex := args.indexOf(arg)
	// -1 for e.g. the expression of a CallExpression, or the tag of a TaggedTemplateExpression
	if argIndex == -1 {
		return nil
	} else {
		return c.getContextualTypeForArgumentAtIndex(callTarget, argIndex)
	}
}

func (c *Checker) getContextualTypeForArgumentAtIndex(callTarget CallLikeExpression, argIndex number) *Type {
	if isImportCall(callTarget) {
		switch {
		case argIndex == 0:
			return c.stringType
		case argIndex == 1:
			return c.getGlobalImportCallOptionsType(false)
		default:
			return c.anyType
		}
	}

	// If we're already in the process of resolving the given signature, don't resolve again as
	// that could cause infinite recursion. Instead, return anySignature.
	var signature Signature
	if c.getNodeLinks(callTarget).resolvedSignature == c.resolvingSignature {
		signature = c.resolvingSignature
	} else {
		signature = c.getResolvedSignature(callTarget)
	}

	if isJsxOpeningLikeElement(callTarget) && argIndex == 0 {
		return c.getEffectiveFirstArgumentForJsxSignature(signature, callTarget)
	}
	restIndex := signature.parameters.length - 1
	if signatureHasRestParameter(signature) && argIndex >= restIndex {
		return c.getIndexedAccessType(c.getTypeOfSymbol(signature.parameters[restIndex]), c.getNumberLiteralType(argIndex-restIndex), AccessFlagsContextual)
	} else {
		return c.getTypeAtPosition(signature, argIndex)
	}
}

func (c *Checker) getContextualTypeForDecorator(decorator Decorator) *Type {
	signature := c.getDecoratorCallSignature(decorator)
	if signature != nil {
		return c.getOrCreateTypeFromSignature(signature)
	} else {
		return nil
	}
}

func (c *Checker) getContextualTypeForSubstitutionExpression(template TemplateExpression, substitutionExpression Expression) *Type {
	if template.Parent.Kind == ast.KindTaggedTemplateExpression {
		return c.getContextualTypeForArgument(template.Parent.AsTaggedTemplateExpression(), substitutionExpression)
	}

	return nil
}

func (c *Checker) getContextualTypeForBinaryOperand(node Expression, contextFlags *ContextFlags) *Type {
	binaryExpression := node.Parent.AsBinaryExpression()
	TODO_IDENTIFIER := binaryExpression
	switch operatorToken.Kind {
	case ast.KindEqualsToken,
		ast.KindAmpersandAmpersandEqualsToken,
		ast.KindBarBarEqualsToken,
		ast.KindQuestionQuestionEqualsToken:
		if node == right {
			return c.getContextualTypeForAssignmentDeclaration(binaryExpression)
		} else {
			return nil
		}
	case ast.KindBarBarToken,
		ast.KindQuestionQuestionToken:
		// When an || expression has a contextual type, the operands are contextually typed by that type, except
		// when that type originates in a binding pattern, the right operand is contextually typed by the type of
		// the left operand. When an || expression has no contextual type, the right operand is contextually typed
		// by the type of the left operand, except for the special case of Javascript declarations of the form
		// `namespace.prop = namespace.prop || {}`.
		t := c.getContextualType(binaryExpression, contextFlags)
		if node == right && (t && t.pattern != nil || !(t) && !isDefaultedExpandoInitializer(binaryExpression)) {
			return c.getTypeOfExpression(left)
		} else {
			return t
		}
	case ast.KindAmpersandAmpersandToken,
		ast.KindCommaToken:
		if node == right {
			return c.getContextualType(binaryExpression, contextFlags)
		} else {
			return nil
		}
	default:
		return nil
	}
}

/**
 * Try to find a resolved symbol for an expression without also resolving its type, as
 * getSymbolAtLocation would (as that could be reentrant into contextual typing)
 */

func (c *Checker) getSymbolForExpression(e Expression) *ast.Symbol {
	if canHaveSymbol(e) && e.Symbol {
		return e.Symbol
	}
	if isIdentifier(e) {
		return c.getResolvedSymbol(e)
	}
	if isPropertyAccessExpression(e) {
		lhsType := c.getTypeOfExpression(e.Expression)
		if isPrivateIdentifier(e.Name) {
			return tryGetPrivateIdentifierPropertyOfType(lhsType, e.Name)
		} else {
			return c.getPropertyOfType(lhsType, e.Name.EscapedText)
		}
	}
	if isElementAccessExpression(e) {
		propType := c.checkExpressionCached(e.ArgumentExpression)
		if !isTypeUsableAsPropertyName(propType) {
			return nil
		}
		lhsType := c.getTypeOfExpression(e.Expression)
		return c.getPropertyOfType(lhsType, getPropertyNameFromType(propType))
	}
	return nil

	tryGetPrivateIdentifierPropertyOfType := func(t *Type, id PrivateIdentifier) *ast.Symbol {
		lexicallyScopedSymbol := c.lookupSymbolForPrivateIdentifierDeclaration(id.EscapedText, id)
		return lexicallyScopedSymbol && c.getPrivateIdentifierPropertyOfType(t, lexicallyScopedSymbol)
	}

}

// In an assignment expression, the right operand is contextually typed by the type of the left operand.
// Don't do this for assignment declarations unless there is a type tag on the assignment, to avoid circularity from checking the right operand.
func (c *Checker) getContextualTypeForAssignmentDeclaration(binaryExpression BinaryExpression) *Type {
	kind := getAssignmentDeclarationKind(binaryExpression)
	switch kind {
	case AssignmentDeclarationKindNone,
		AssignmentDeclarationKindThisProperty:
		lhsSymbol := c.getSymbolForExpression(binaryExpression.Left)
		decl := lhsSymbol && lhsSymbol.ValueDeclaration
		// Unannotated, uninitialized property declarations have a type implied by their usage in the constructor.
		// We avoid calling back into `getTypeOfExpression` and reentering contextual typing to avoid a bogus circularity error in that case.
		if decl != nil && (isPropertyDeclaration(decl) || isPropertySignature(decl)) {
			overallAnnotation := getEffectiveTypeAnnotationNode(decl)
			return (overallAnnotation && c.instantiateType(c.getTypeFromTypeNode(overallAnnotation), c.getSymbolLinks(lhsSymbol).mapper)) || (ifElse(isPropertyDeclaration(decl), decl.Initializer && c.getTypeOfExpression(binaryExpression.Left), nil))
		}
		if kind == AssignmentDeclarationKindNone {
			return c.getTypeOfExpression(binaryExpression.Left)
		}
		return c.getContextualTypeForThisPropertyAssignment(binaryExpression)
	case AssignmentDeclarationKindProperty:
		if c.isPossiblyAliasedThisProperty(binaryExpression, kind) {
			return c.getContextualTypeForThisPropertyAssignment(binaryExpression)
		} else if !canHaveSymbol(binaryExpression.Left) || !binaryExpression.Left.Symbol {
			return c.getTypeOfExpression(binaryExpression.Left)
		} else {
			decl := binaryExpression.Left.Symbol.ValueDeclaration
			if decl == nil {
				return nil
			}
			lhs := cast(binaryExpression.Left, isAccessExpression)
			overallAnnotation := getEffectiveTypeAnnotationNode(decl)
			if overallAnnotation != nil {
				return c.getTypeFromTypeNode(overallAnnotation)
			} else if isIdentifier(lhs.Expression) {
				id := lhs.Expression
				parentSymbol := c.resolveName(id, id.EscapedText, ast.SymbolFlagsValue, nil /*nameNotFoundMessage*/, true /*isUse*/)
				if parentSymbol != nil {
					annotated := parentSymbol.ValueDeclaration && getEffectiveTypeAnnotationNode(parentSymbol.ValueDeclaration)
					if annotated != nil {
						nameStr := getElementOrPropertyAccessName(lhs)
						if nameStr != nil {
							return c.getTypeOfPropertyOfContextualType(c.getTypeFromTypeNode(annotated), nameStr)
						}
					}
					return nil
				}
			}
			if isInJSFile(decl) || decl == binaryExpression.Left {
				return nil
			} else {
				return c.getTypeOfExpression(binaryExpression.Left)
			}
		}
		fallthrough
	case AssignmentDeclarationKindExportsProperty,
		AssignmentDeclarationKindPrototype,
		AssignmentDeclarationKindPrototypeProperty,
		AssignmentDeclarationKindModuleExports:
		var valueDeclaration Declaration
		if kind != AssignmentDeclarationKindModuleExports {
			if canHaveSymbol(binaryExpression.Left) {
				valueDeclaration = binaryExpression.Left.Symbol. /* ? */ ValueDeclaration
			} else {
				valueDeclaration = nil
			}
		}
		valueDeclaration = valueDeclaration || binaryExpression.Symbol. /* ? */ ValueDeclaration
		annotated := valueDeclaration && getEffectiveTypeAnnotationNode(valueDeclaration)
		if annotated != nil {
			return c.getTypeFromTypeNode(annotated)
		} else {
			return nil
		}
	case AssignmentDeclarationKindObjectDefinePropertyValue,
		AssignmentDeclarationKindObjectDefinePropertyExports,
		AssignmentDeclarationKindObjectDefinePrototypeProperty:
		return Debug.fail("Does not apply")
	default:
		return Debug.assertNever(kind)
	}
}

func (c *Checker) isPossiblyAliasedThisProperty(declaration BinaryExpression, kind AssignmentDeclarationKind /*  = getAssignmentDeclarationKind(declaration) */) bool {
	if kind == AssignmentDeclarationKindThisProperty {
		return true
	}
	if !isInJSFile(declaration) || kind != AssignmentDeclarationKindProperty || !isIdentifier(declaration.Left.AsAccessExpression().Expression) {
		return false
	}
	name := (declaration.Left.AsAccessExpression()).Expression.AsIdentifier().EscapedText
	symbol := c.resolveName(declaration.Left, name, ast.SymbolFlagsValue, nil /*nameNotFoundMessage*/, true /*isUse*/, true /*excludeGlobals*/)
	return isThisInitializedDeclaration(symbol. /* ? */ valueDeclaration)
}

func (c *Checker) getContextualTypeForThisPropertyAssignment(binaryExpression BinaryExpression) *Type {
	if !binaryExpression.Symbol {
		return c.getTypeOfExpression(binaryExpression.Left)
	}
	if binaryExpression.Symbol.ValueDeclaration != nil {
		annotated := getEffectiveTypeAnnotationNode(binaryExpression.Symbol.ValueDeclaration)
		if annotated != nil {
			t := c.getTypeFromTypeNode(annotated)
			if t {
				return t
			}
		}
	}
	thisAccess := cast(binaryExpression.Left, isAccessExpression)
	if !isObjectLiteralMethod(getThisContainer(thisAccess.Expression, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)) {
		return nil
	}
	thisType := c.checkThisExpression(thisAccess.Expression)
	nameStr := getElementOrPropertyAccessName(thisAccess)
	return nameStr != nil && c.getTypeOfPropertyOfContextualType(thisType, nameStr) || nil
}

func (c *Checker) isCircularMappedProperty(symbol *ast.Symbol) bool {
	return getCheckFlags(symbol)&ast.CheckFlagsMapped != 0 && (symbol.(MappedSymbol)).Links.type_ == nil && c.findResolutionCycleStartIndex(symbol, TypeSystemPropertyNameType) >= 0
}

func (c *Checker) isExcludedMappedPropertyName(constraint *Type, propertyNameType *Type) bool {
	if constraint.flags&TypeFlagsConditional != 0 {
		t := constraint.AsConditionalType()
		return c.getReducedType(c.getTrueTypeFromConditionalType(t)).flags&TypeFlagsNever != 0 && c.getActualTypeVariable(c.getFalseTypeFromConditionalType(t)) == c.getActualTypeVariable(t.checkType) && c.isTypeAssignableTo(propertyNameType, t.extendsType)
	}
	if constraint.flags&TypeFlagsIntersection != 0 {
		return core.Some(constraint.AsIntersectionType().types, func(t *Type) bool {
			return c.isExcludedMappedPropertyName(t, propertyNameType)
		})
	}
	return false
}

func (c *Checker) getTypeOfPropertyOfContextualType(t *Type, name string, nameType *Type) *Type {
	return c.mapType(t, func(t *Type) *Type {
		if t.flags&TypeFlagsIntersection != 0 {
			var types *[]*Type
			var indexInfoCandidates *[]*Type
			ignoreIndexInfos := false
			for _, constituentType := range t.AsIntersectionType().types {
				if constituentType.flags&TypeFlagsObject == 0 {
					continue
				}
				if c.isGenericMappedType(constituentType) && c.getMappedTypeNameTypeKind(constituentType) != MappedTypeNameTypeKindRemapping {
					substitutedType := c.getIndexedMappedTypeSubstitutedTypeOfContextualType(constituentType, name, nameType)
					types = c.appendContextualPropertyTypeConstituent(types, substitutedType)
					continue
				}
				propertyType := c.getTypeOfConcretePropertyOfContextualType(constituentType, name)
				if propertyType == nil {
					if !ignoreIndexInfos {
						indexInfoCandidates = append(indexInfoCandidates, constituentType)
					}
					continue
				}
				ignoreIndexInfos = true
				indexInfoCandidates = nil
				types = c.appendContextualPropertyTypeConstituent(types, propertyType)
			}
			if indexInfoCandidates != nil {
				for _, candidate := range indexInfoCandidates {
					indexInfoType := c.getTypeFromIndexInfosOfContextualType(candidate, name, nameType)
					types = c.appendContextualPropertyTypeConstituent(types, indexInfoType)
				}
			}
			if types == nil {
				return
			}
			if types.length == 1 {
				return types[0]
			}
			return c.getIntersectionType(types)
		}
		if t.flags&TypeFlagsObject == 0 {
			return
		}
		if c.isGenericMappedType(t) && c.getMappedTypeNameTypeKind(t) != MappedTypeNameTypeKindRemapping {
			return c.getIndexedMappedTypeSubstitutedTypeOfContextualType(t, name, nameType)
		} else {
			return ifNotNilElse(c.getTypeOfConcretePropertyOfContextualType(t, name), c.getTypeFromIndexInfosOfContextualType(t, name, nameType))
		}
	}, true /*noReductions*/)
}

func (c *Checker) appendContextualPropertyTypeConstituent(types *[]*Type, t *Type) *[]*Type {
	// any doesn't provide any contextual information but could spoil the overall result by nullifying contextual information provided by other intersection constituents
	// so it gets replaced with `unknown` as `T & unknown` is just `T` and all types computed based on the contextual information provided by other constituens are still assignable to any
	if t {
		return append(types, ifElse(t.flags&TypeFlagsAny != 0, c.unknownType, t))
	} else {
		return types
	}
}

func (c *Checker) getIndexedMappedTypeSubstitutedTypeOfContextualType(t MappedType, name string, nameType *Type) *Type {
	propertyNameType := nameType || c.getStringLiteralType(unescapeLeadingUnderscores(name))
	constraint := c.getConstraintTypeFromMappedType(t)
	// special case for conditional types pretending to be negated types
	if t.nameType != nil && c.isExcludedMappedPropertyName(t.nameType, propertyNameType) || c.isExcludedMappedPropertyName(constraint, propertyNameType) {
		return
	}
	constraintOfConstraint := c.getBaseConstraintOfType(constraint) || constraint
	if !c.isTypeAssignableTo(propertyNameType, constraintOfConstraint) {
		return
	}
	return c.substituteIndexedMappedType(t, propertyNameType)
}

func (c *Checker) getTypeOfConcretePropertyOfContextualType(t *Type, name string) *Type {
	prop := c.getPropertyOfType(t, name)
	if prop == nil || c.isCircularMappedProperty(prop) {
		return
	}
	return c.removeMissingType(c.getTypeOfSymbol(prop), prop.Flags&ast.SymbolFlagsOptional != 0)
}

func (c *Checker) getTypeFromIndexInfosOfContextualType(t *Type, name string, nameType *Type) *Type {
	if c.isTupleType(t) && isNumericLiteralName(name) && +name >= 0 {
		restType := c.getElementTypeOfSliceOfTupleType(t, t.target.fixedLength, 0 /*endSkipCount*/, false /*writing*/, true /*noReductions*/)
		if restType != nil {
			return restType
		}
	}
	return c.findApplicableIndexInfo(c.getIndexInfosOfStructuredType(t), nameType || c.getStringLiteralType(unescapeLeadingUnderscores(name))). /* ? */ type_
}

// In an object literal contextually typed by a type T, the contextual type of a property assignment is the type of
// the matching property in T, if one exists. Otherwise, it is the type of the numeric index signature in T, if one
// exists. Otherwise, it is the type of the string index signature in T, if one exists.
func (c *Checker) getContextualTypeForObjectLiteralMethod(node MethodDeclaration, contextFlags *ContextFlags) *Type {
	Debug.assert(isObjectLiteralMethod(node))
	if node.Flags&ast.NodeFlagsInWithStatement != 0 {
		// We cannot answer semantic questions within a with block, do not proceed any further
		return nil
	}
	return c.getContextualTypeForObjectLiteralElement(node, contextFlags)
}

func (c *Checker) getContextualTypeForObjectLiteralElement(element ObjectLiteralElementLike, contextFlags *ContextFlags) *Type {
	objectLiteral := element.Parent.AsObjectLiteralExpression()
	propertyAssignmentType := isPropertyAssignment(element) && c.getContextualTypeForVariableLikeDeclaration(element, contextFlags)
	if propertyAssignmentType {
		return propertyAssignmentType
	}
	t := c.getApparentTypeOfContextualType(objectLiteral, contextFlags)
	if t {
		if c.hasBindableName(element) {
			// For a (non-symbol) computed property, there is no reason to look up the name
			// in the type. It will just be "__computed", which does not appear in any
			// SymbolTable.
			symbol := c.getSymbolOfDeclaration(element)
			return c.getTypeOfPropertyOfContextualType(t, symbol.EscapedName, c.getSymbolLinks(symbol).nameType)
		}
		if hasDynamicName(element) {
			name := getNameOfDeclaration(element)
			if name != nil && isComputedPropertyName(name) {
				exprType := c.checkExpression(name.Expression)
				propType := isTypeUsableAsPropertyName(exprType) && c.getTypeOfPropertyOfContextualType(t, getPropertyNameFromType(exprType))
				if propType {
					return propType
				}
			}
		}
		if element.Name != nil {
			nameType := c.getLiteralTypeFromPropertyName(element.Name)
			// We avoid calling getApplicableIndexInfo here because it performs potentially expensive intersection reduction.
			return c.mapType(t, func(t *Type) *Type {
				return c.findApplicableIndexInfo(c.getIndexInfosOfStructuredType(t), nameType). /* ? */ type_
			}, true /*noReductions*/)
		}
	}
	return nil
}

func (c *Checker) getSpreadIndices(elements []*ast.Node) /* TODO(TS-TO-GO) inferred type { first: number | undefined; last: number | undefined; } */ any {
	var first TODO
	var last TODO
	for i := 0; i < elements.length; i++ {
		if isSpreadElement(elements[i]) {
			if first == nil {
				first = i
			}
			last = i
		}
	}
	return map[any]any{ /* TODO(TS-TO-GO): was object literal */
		"first": first,
		"last":  last,
	}
}

func (c *Checker) getContextualTypeForElementExpression(t *Type, index number, length number, firstSpreadIndex number, lastSpreadIndex number) *Type {
	return t && c.mapType(t, func(t *Type) *Type {
		if c.isTupleType(t) {
			// If index is before any spread element and within the fixed part of the contextual tuple type, return
			// the type of the contextual tuple element.
			if (firstSpreadIndex == nil || index < firstSpreadIndex) && index < t.target.fixedLength {
				return c.removeMissingType(c.getTypeArguments(t)[index], t.target.elementFlags[index] != 0 && ElementFlagsOptional)
			}
			// When the length is known and the index is after all spread elements we compute the offset from the element
			// to the end and the number of ending fixed elements in the contextual tuple type.
			var offset number
			if length != nil && (lastSpreadIndex == nil || index > lastSpreadIndex) {
				offset = length - index
			} else {
				offset = 0
			}
			var fixedEndLength number
			if offset > 0 && (t.target.combinedFlags&ElementFlagsVariable != 0) {
				fixedEndLength = c.getEndElementCount(t.target, ElementFlagsFixed)
			} else {
				fixedEndLength = 0
			}
			// If the offset is within the ending fixed part of the contextual tuple type, return the type of the contextual
			// tuple element.
			if offset > 0 && offset <= fixedEndLength {
				return c.getTypeArguments(t)[c.getTypeReferenceArity(t)-offset]
			}
			// Return a union of the possible contextual element types with no subtype reduction.
			return c.getElementTypeOfSliceOfTupleType(t, ifElse(firstSpreadIndex == nil, t.target.fixedLength, min(t.target.fixedLength, firstSpreadIndex)), ifElse(length == nil || lastSpreadIndex == nil, fixedEndLength, min(fixedEndLength, length-lastSpreadIndex)), false /*writing*/, true /*noReductions*/)
		}
		// If element index is known and a contextual property with that name exists, return it. Otherwise return the
		// iterated or element type of the contextual type.
		return (!firstSpreadIndex || index < firstSpreadIndex) && c.getTypeOfPropertyOfContextualType(t, ""+index.(string)) || c.getIteratedTypeOrElementType(IterationUseElement, t, c.undefinedType, nil /*errorNode*/, false /*checkAssignability*/)
	}, true /*noReductions*/)
}

// In a contextually typed conditional expression, the true/false expressions are contextually typed by the same type.
func (c *Checker) getContextualTypeForConditionalOperand(node Expression, contextFlags *ContextFlags) *Type {
	conditional := node.Parent.AsConditionalExpression()
	if node == conditional.WhenTrue || node == conditional.WhenFalse {
		return c.getContextualType(conditional, contextFlags)
	} else {
		return nil
	}
}

func (c *Checker) getContextualTypeForChildJsxExpression(node JsxElement, child JsxChild, contextFlags *ContextFlags) *Type {
	attributesType := c.getApparentTypeOfContextualType(node.OpeningElement.Attributes, contextFlags)
	// JSX expression is in children of JSX Element, we will look for an "children" attribute (we get the name from JSX.ElementAttributesProperty)
	jsxChildrenPropertyName := c.getJsxElementChildrenPropertyName(c.getJsxNamespaceAt(node))
	if !(attributesType != nil && !c.isTypeAny(attributesType) && jsxChildrenPropertyName && jsxChildrenPropertyName != "") {
		return nil
	}
	realChildren := getSemanticJsxChildren(node.Children)
	childIndex := realChildren.indexOf(child)
	childFieldType := c.getTypeOfPropertyOfContextualType(attributesType, jsxChildrenPropertyName)
	return childFieldType && (ifElse(realChildren.length == 1, childFieldType, c.mapType(childFieldType, func(t *Type) *Type {
		if c.isArrayLikeType(t) {
			return c.getIndexedAccessType(t, c.getNumberLiteralType(childIndex))
		} else {
			return t
		}
	}, true /*noReductions*/)))
}

func (c *Checker) getContextualTypeForJsxExpression(node JsxExpression, contextFlags *ContextFlags) *Type {
	exprParent := node.Parent
	switch {
	case isJsxAttributeLike(exprParent):
		return c.getContextualType(node, contextFlags)
	case isJsxElement(exprParent):
		return c.getContextualTypeForChildJsxExpression(exprParent, node, contextFlags)
	default:
		return nil
	}
}

func (c *Checker) getContextualTypeForJsxAttribute(attribute Union[JsxAttribute, JsxSpreadAttribute], contextFlags *ContextFlags) *Type {
	// When we trying to resolve JsxOpeningLikeElement as a stateless function element, we will already give its attributes a contextual type
	// which is a type of the parameter of the signature we are trying out.
	// If there is no contextual type (e.g. we are trying to resolve stateful component), get attributes type from resolving element's tagName
	if isJsxAttribute(attribute) {
		attributesType := c.getApparentTypeOfContextualType(attribute.Parent, contextFlags)
		if attributesType == nil || c.isTypeAny(attributesType) {
			return nil
		}
		return c.getTypeOfPropertyOfContextualType(attributesType, getEscapedTextOfJsxAttributeName(attribute.Name))
	} else {
		return c.getContextualType(attribute.Parent, contextFlags)
	}
}

// Return true if the given expression is possibly a discriminant value. We limit the kinds of
// expressions we check to those that don't depend on their contextual type in order not to cause
// recursive (and possibly infinite) invocations of getContextualType.
func (c *Checker) isPossiblyDiscriminantValue(node Expression) bool {
	switch node.Kind {
	case ast.KindStringLiteral,
		ast.KindNumericLiteral,
		ast.KindBigIntLiteral,
		ast.KindNoSubstitutionTemplateLiteral,
		ast.KindTemplateExpression,
		ast.KindTrueKeyword,
		ast.KindFalseKeyword,
		ast.KindNullKeyword,
		ast.KindIdentifier,
		ast.KindUndefinedKeyword:
		return true
	case ast.KindPropertyAccessExpression,
		ast.KindParenthesizedExpression:
		return c.isPossiblyDiscriminantValue((node /* as PropertyAccessExpression | ParenthesizedExpression */).Expression)
	case ast.KindJsxExpression:
		return node.AsJsxExpression().Expression == nil || c.isPossiblyDiscriminantValue(node.AsJsxExpression().Expression)
	}
	return false
}

func (c *Checker) discriminateContextualTypeByObjectMembers(node ObjectLiteralExpression, contextualType UnionType) *Type {
	key := __TEMPLATE__("D", getNodeId(node), ",", c.getTypeId(contextualType))
	return ifNotNilElse(c.getCachedType(key), c.setCachedType(key, ifNotNilElse(c.getMatchingUnionConstituentForObjectLiteral(contextualType, node), c.discriminateTypeByDiscriminableItems(contextualType, core.Concatenate(core.Map(core.Filter(node.Properties, func(p /* TODO(TS-TO-GO) inferred type MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | PropertyAssignment | ShorthandPropertyAssignment | SpreadAssignment */ any) bool {
		if !p.Symbol {
			return false
		}
		if p.Kind == ast.KindPropertyAssignment {
			return c.isPossiblyDiscriminantValue(p.Initializer) && c.isDiscriminantProperty(contextualType, p.Symbol.EscapedName)
		}
		if p.Kind == ast.KindShorthandPropertyAssignment {
			return c.isDiscriminantProperty(contextualType, p.Symbol.EscapedName)
		}
		return false
	}), func(prop /* TODO(TS-TO-GO) inferred type PropertyAssignment | ShorthandPropertyAssignment */ any) /* TODO(TS-TO-GO) inferred type [() => Type, __String] */ any {
		return []any{func() *Type {
			return c.getContextFreeTypeOfExpression(ifElse(prop.Kind == ast.KindPropertyAssignment, prop.Initializer, prop.Name))
		}, prop.Symbol.EscapedName}
	}), core.Map(core.Filter(c.getPropertiesOfType(contextualType), func(s *ast.Symbol) bool {
		return s.Flags&ast.SymbolFlagsOptional != 0 && node. /* ? */ Symbol. /* ? */ Members != nil && !node.Symbol.Members.has(s.EscapedName) && c.isDiscriminantProperty(contextualType, s.EscapedName)
	}), func(s *ast.Symbol) /* TODO(TS-TO-GO) inferred type [() => IntrinsicType, __String] */ any {
		return []any{func() IntrinsicType {
			return c.undefinedType
		}, s.EscapedName}
	})), c.isTypeAssignableTo))))
}

func (c *Checker) discriminateContextualTypeByJSXAttributes(node JsxAttributes, contextualType UnionType) *Type {
	key := __TEMPLATE__("D", getNodeId(node), ",", c.getTypeId(contextualType))
	cached := c.getCachedType(key)
	if cached != nil {
		return cached
	}
	jsxChildrenPropertyName := c.getJsxElementChildrenPropertyName(c.getJsxNamespaceAt(node))
	return c.setCachedType(key, c.discriminateTypeByDiscriminableItems(contextualType, core.Concatenate(core.Map(core.Filter(node.Properties, func(p /* TODO(TS-TO-GO) inferred type JsxAttribute | JsxSpreadAttribute */ any) bool {
		return p.Symbol && p.Kind == ast.KindJsxAttribute && c.isDiscriminantProperty(contextualType, p.Symbol.EscapedName) && (p.Initializer == nil || c.isPossiblyDiscriminantValue(p.Initializer))
	}), func(prop /* TODO(TS-TO-GO) inferred type JsxAttribute | JsxSpreadAttribute */ any) /* TODO(TS-TO-GO) inferred type [() => Type, __String] */ any {
		return []any{ifElse(prop.AsJsxAttribute().Initializer == nil, (func() FreshableIntrinsicType {
			return c.trueType
		}), (func() *Type {
			return c.getContextFreeTypeOfExpression(prop.AsJsxAttribute().Initializer)
		})), prop.Symbol.EscapedName}
	}), core.Map(core.Filter(c.getPropertiesOfType(contextualType), func(s *ast.Symbol) bool {
		if s.Flags&ast.SymbolFlagsOptional == 0 || node. /* ? */ Symbol. /* ? */ Members == nil {
			return false
		}
		element := node.Parent.Parent
		if s.EscapedName == jsxChildrenPropertyName && isJsxElement(element) && getSemanticJsxChildren(element.Children).length != 0 {
			return false
		}
		return !node.Symbol.Members.has(s.EscapedName) && c.isDiscriminantProperty(contextualType, s.EscapedName)
	}), func(s *ast.Symbol) /* TODO(TS-TO-GO) inferred type [() => IntrinsicType, __String] */ any {
		return []any{func() IntrinsicType {
			return c.undefinedType
		}, s.EscapedName}
	})), c.isTypeAssignableTo))
}

// Return the contextual type for a given expression node. During overload resolution, a contextual type may temporarily
// be "pushed" onto a node using the contextualType property.
func (c *Checker) getApparentTypeOfContextualType(node Union[Expression, MethodDeclaration], contextFlags *ContextFlags) *Type {
	var contextualType *Type
	if isObjectLiteralMethod(node) {
		contextualType = c.getContextualTypeForObjectLiteralMethod(node, contextFlags)
	} else {
		contextualType = c.getContextualType(node, contextFlags)
	}
	instantiatedType := c.instantiateContextualType(contextualType, node, contextFlags)
	if instantiatedType != nil && !(contextFlags && contextFlags&ContextFlagsNoConstraints != 0 && instantiatedType.flags&TypeFlagsTypeVariable != 0) {
		apparentType := c.mapType(instantiatedType, func(t *Type) *Type {
			if getObjectFlags(t)&ObjectFlagsMapped != 0 {
				return t
			} else {
				return c.getApparentType(t)
			}
		}, true)
		switch {
		case apparentType.flags&TypeFlagsUnion != 0 && isObjectLiteralExpression(node):
			return c.discriminateContextualTypeByObjectMembers(node, apparentType.AsUnionType())
		case apparentType.flags&TypeFlagsUnion != 0 && isJsxAttributes(node):
			return c.discriminateContextualTypeByJSXAttributes(node, apparentType.AsUnionType())
		default:
			return apparentType
		}
	}
}

// If the given contextual type contains instantiable types and if a mapper representing
// return type inferences is available, instantiate those types using that mapper.
func (c *Checker) instantiateContextualType(contextualType *Type, node *ast.Node, contextFlags *ContextFlags) *Type {
	if contextualType != nil && c.maybeTypeOfKind(contextualType, TypeFlagsInstantiable) {
		inferenceContext := c.getInferenceContext(node)
		// If no inferences have been made, and none of the type parameters for which we are inferring
		// specify default types, nothing is gained from instantiating as type parameters would just be
		// replaced with their constraints similar to the apparent type.
		if inferenceContext != nil && contextFlags&ContextFlagsSignature != 0 && core.Some(inferenceContext.inferences, c.hasInferenceCandidatesOrDefault) {
			// For contextual signatures we incorporate all inferences made so far, e.g. from return
			// types as well as arguments to the left in a function call.
			return c.instantiateInstantiableTypes(contextualType, inferenceContext.nonFixingMapper)
		}
		if inferenceContext. /* ? */ returnMapper != nil {
			// For other purposes (e.g. determining whether to produce literal types) we only
			// incorporate inferences made from the return type in a function call. We remove
			// the 'boolean' type from the contextual type such that contextually typed boolean
			// literals actually end up widening to 'boolean' (see #48363).
			t := c.instantiateInstantiableTypes(contextualType, inferenceContext.returnMapper)
			if t.flags&TypeFlagsUnion != 0 && c.containsType(t.AsUnionType().types, c.regularFalseType) && c.containsType(t.AsUnionType().types, c.regularTrueType) {
				return c.filterType(t, func(t *Type) bool {
					return t != c.regularFalseType && t != c.regularTrueType
				})
			} else {
				return t
			}
		}
	}
	return contextualType
}

// This function is similar to instantiateType, except that (a) it only instantiates types that
// are classified as instantiable (i.e. it doesn't instantiate object types), and (b) it performs
// no reductions on instantiated union types.
func (c *Checker) instantiateInstantiableTypes(t *Type, mapper TypeMapper) *Type {
	if t.flags&TypeFlagsInstantiable != 0 {
		return c.instantiateType(t, mapper)
	}
	if t.flags&TypeFlagsUnion != 0 {
		return c.getUnionType(core.Map(t.AsUnionType().types, func(t *Type) *Type {
			return c.instantiateInstantiableTypes(t, mapper)
		}), UnionReductionNone)
	}
	if t.flags&TypeFlagsIntersection != 0 {
		return c.getIntersectionType(core.Map(t.AsIntersectionType().types, func(t *Type) *Type {
			return c.instantiateInstantiableTypes(t, mapper)
		}))
	}
	return t
}

/**
 * Whoa! Do you really want to use this function?
 *
 * Unless you're trying to get the *non-apparent* type for a
 * value-literal type or you're authoring relevant portions of this algorithm,
 * you probably meant to use 'getApparentTypeOfContextualType'.
 * Otherwise this may not be very useful.
 *
 * In cases where you *are* working on this function, you should understand
 * when it is appropriate to use 'getContextualType' and 'getApparentTypeOfContextualType'.
 *
 *   - Use 'getContextualType' when you are simply going to propagate the result to the expression.
 *   - Use 'getApparentTypeOfContextualType' when you're going to need the members of the type.
 *
 * @param node the expression whose contextual type will be returned.
 * @returns the contextual type of an expression.
 */

func (c *Checker) getContextualType(node Expression, contextFlags *ContextFlags) *Type {
	if node.Flags&ast.NodeFlagsInWithStatement != 0 {
		// We cannot answer semantic questions within a with block, do not proceed any further
		return nil
	}
	// Cached contextual types are obtained with no ContextFlags, so we can only consult them for
	// requests with no ContextFlags.
	index := c.findContextualNode(node, !contextFlags /*includeCaches*/)
	if index >= 0 {
		return c.contextualTypes[index]
	}
	TODO_IDENTIFIER := node
	switch parent.Kind {
	case ast.KindVariableDeclaration,
		ast.KindParameter,
		ast.KindPropertyDeclaration,
		ast.KindPropertySignature,
		ast.KindBindingElement:
		return c.getContextualTypeForInitializerExpression(node, contextFlags)
	case ast.KindArrowFunction,
		ast.KindReturnStatement:
		return c.getContextualTypeForReturnExpression(node, contextFlags)
	case ast.KindYieldExpression:
		return c.getContextualTypeForYieldOperand(parent.AsYieldExpression(), contextFlags)
	case ast.KindAwaitExpression:
		return c.getContextualTypeForAwaitOperand(parent.AsAwaitExpression(), contextFlags)
	case ast.KindCallExpression,
		ast.KindNewExpression:
		return c.getContextualTypeForArgument(parent /* as CallExpression | NewExpression | Decorator */, node)
	case ast.KindDecorator:
		return c.getContextualTypeForDecorator(parent.AsDecorator())
	case ast.KindTypeAssertionExpression,
		ast.KindAsExpression:
		if isConstTypeReference(parent.AsAssertionExpression().Type_) {
			return c.getContextualType(parent.AsAssertionExpression(), contextFlags)
		} else {
			return c.getTypeFromTypeNode(parent.AsAssertionExpression().Type_)
		}
	case ast.KindBinaryExpression:
		return c.getContextualTypeForBinaryOperand(node, contextFlags)
	case ast.KindPropertyAssignment,
		ast.KindShorthandPropertyAssignment:
		return c.getContextualTypeForObjectLiteralElement(parent /* as PropertyAssignment | ShorthandPropertyAssignment */, contextFlags)
	case ast.KindSpreadAssignment:
		return c.getContextualType(parent.Parent.AsObjectLiteralExpression(), contextFlags)
	case ast.KindArrayLiteralExpression:
		arrayLiteral := parent.AsArrayLiteralExpression()
		t := c.getApparentTypeOfContextualType(arrayLiteral, contextFlags)
		elementIndex := indexOfNode(arrayLiteral.Elements, node)
		spreadIndices := /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: getNodeLinks(arrayLiteral).spreadIndices ??= getSpreadIndices(arrayLiteral.elements) */ TODO
		return c.getContextualTypeForElementExpression(t, elementIndex, arrayLiteral.Elements.length, spreadIndices.first, spreadIndices.last)
	case ast.KindConditionalExpression:
		return c.getContextualTypeForConditionalOperand(node, contextFlags)
	case ast.KindTemplateSpan:
		Debug.assert(parent.Parent.Kind == ast.KindTemplateExpression)
		return c.getContextualTypeForSubstitutionExpression(parent.Parent.AsTemplateExpression(), node)
	case ast.KindParenthesizedExpression:
		if isInJSFile(parent) {
			if isJSDocSatisfiesExpression(parent) {
				return c.getTypeFromTypeNode(getJSDocSatisfiesExpressionType(parent))
			}
			// Like in `checkParenthesizedExpression`, an `/** @type {xyz} */` comment before a parenthesized expression acts as a type cast.
			typeTag := getJSDocTypeTag(parent)
			if typeTag != nil && !isConstTypeReference(typeTag.TypeExpression.Type_) {
				return c.getTypeFromTypeNode(typeTag.TypeExpression.Type_)
			}
		}
		return c.getContextualType(parent.AsParenthesizedExpression(), contextFlags)
	case ast.KindNonNullExpression:
		return c.getContextualType(parent.AsNonNullExpression(), contextFlags)
	case ast.KindSatisfiesExpression:
		return c.getTypeFromTypeNode(parent.AsSatisfiesExpression().Type_)
	case ast.KindExportAssignment:
		return c.tryGetTypeFromEffectiveTypeNode(parent.AsExportAssignment())
	case ast.KindJsxExpression:
		return c.getContextualTypeForJsxExpression(parent.AsJsxExpression(), contextFlags)
	case ast.KindJsxAttribute,
		ast.KindJsxSpreadAttribute:
		return c.getContextualTypeForJsxAttribute(parent /* as JsxAttribute | JsxSpreadAttribute */, contextFlags)
	case ast.KindJsxOpeningElement,
		ast.KindJsxSelfClosingElement:
		return c.getContextualJsxElementAttributesType(parent.AsJsxOpeningLikeElement(), contextFlags)
	case ast.KindImportAttribute:
		return c.getContextualImportAttributeType(parent.AsImportAttribute())
	}
	return nil
}

func (c *Checker) pushCachedContextualType(node Expression) {
	c.pushContextualType(node, c.getContextualType(node, nil /*contextFlags*/), true /*isCache*/)
}

func (c *Checker) pushContextualType(node Expression, t *Type, isCache bool) {
	c.contextualTypeNodes[c.contextualTypeCount] = node
	c.contextualTypes[c.contextualTypeCount] = t
	c.contextualIsCache[c.contextualTypeCount] = isCache
	c.contextualTypeCount++
}

func (c *Checker) popContextualType() {
	c.contextualTypeCount--
}

func (c *Checker) findContextualNode(node *ast.Node, includeCaches bool) number {
	for i := c.contextualTypeCount - 1; i >= 0; i-- {
		if node == c.contextualTypeNodes[i] && (includeCaches || !c.contextualIsCache[i]) {
			return i
		}
	}
	return -1
}

func (c *Checker) pushInferenceContext(node *ast.Node, inferenceContext *InferenceContext) {
	c.inferenceContextNodes[c.inferenceContextCount] = node
	c.inferenceContexts[c.inferenceContextCount] = inferenceContext
	c.inferenceContextCount++
}

func (c *Checker) popInferenceContext() {
	c.inferenceContextCount--
}

func (c *Checker) getInferenceContext(node *ast.Node) *InferenceContext {
	for i := c.inferenceContextCount - 1; i >= 0; i-- {
		if isNodeDescendantOf(node, c.inferenceContextNodes[i]) {
			return c.inferenceContexts[i]
		}
	}
}

func (c *Checker) getContextualImportAttributeType(node ImportAttribute) *Type {
	return c.getTypeOfPropertyOfContextualType(c.getGlobalImportAttributesType(false), getNameFromImportAttribute(node))
}

func (c *Checker) getContextualJsxElementAttributesType(node JsxOpeningLikeElement, contextFlags *ContextFlags) *Type {
	if isJsxOpeningElement(node) && contextFlags != ContextFlagsCompletions {
		index := c.findContextualNode(node.Parent, !contextFlags /*includeCaches*/)
		if index >= 0 {
			// Contextually applied type is moved from attributes up to the outer jsx attributes so when walking up from the children they get hit
			// _However_ to hit them from the _attributes_ we must look for them here; otherwise we'll used the declared type
			// (as below) instead!
			return c.contextualTypes[index]
		}
	}
	return c.getContextualTypeForArgumentAtIndex(node, 0)
}

func (c *Checker) getEffectiveFirstArgumentForJsxSignature(signature Signature, node JsxOpeningLikeElement) *Type {
	if c.getJsxReferenceKind(node) != JsxReferenceKindComponent {
		return c.getJsxPropsTypeFromCallSignature(signature, node)
	} else {
		return c.getJsxPropsTypeFromClassType(signature, node)
	}
}

func (c *Checker) getJsxPropsTypeFromCallSignature(sig Signature, context JsxOpeningLikeElement) *Type {
	propsType := c.getTypeOfFirstParameterOfSignatureWithFallback(sig, c.unknownType)
	propsType = c.getJsxManagedAttributesFromLocatedAttributes(context, c.getJsxNamespaceAt(context), propsType)
	intrinsicAttribs := c.getJsxType(JsxNames.IntrinsicAttributes, context)
	if !c.isErrorType(intrinsicAttribs) {
		propsType = c.intersectTypes(intrinsicAttribs, propsType)
	}
	return propsType
}

func (c *Checker) getJsxPropsTypeForSignatureFromMember(sig Signature, forcedLookupLocation string) *Type {
	if sig.compositeSignatures != nil {
		// JSX Elements using the legacy `props`-field based lookup (eg, react class components) need to treat the `props` member as an input
		// instead of an output position when resolving the signature. We need to go back to the input signatures of the composite signature,
		// get the type of `props` on each return type individually, and then _intersect them_, rather than union them (as would normally occur
		// for a union signature). It's an unfortunate quirk of looking in the output of the signature for the type we want to use for the input.
		// The default behavior of `getTypeOfFirstParameterOfSignatureWithFallback` when no `props` member name is defined is much more sane.
		var results []*Type = []never{}
		for _, signature := range sig.compositeSignatures {
			instance := c.getReturnTypeOfSignature(signature)
			if c.isTypeAny(instance) {
				return instance
			}
			propType := c.getTypeOfPropertyOfType(instance, forcedLookupLocation)
			if propType == nil {
				return
			}
			results.push(propType)
		}
		return c.getIntersectionType(results)
		// Same result for both union and intersection signatures
	}
	instanceType := c.getReturnTypeOfSignature(sig)
	if c.isTypeAny(instanceType) {
		return instanceType
	} else {
		return c.getTypeOfPropertyOfType(instanceType, forcedLookupLocation)
	}
}

func (c *Checker) getStaticTypeOfReferencedJsxConstructor(context JsxOpeningLikeElement) *Type {
	if c.isJsxIntrinsicTagName(context.TagName) {
		result := c.getIntrinsicAttributesTypeFromJsxOpeningLikeElement(context)
		fakeSignature := c.createSignatureForJSXIntrinsic(context, result)
		return c.getOrCreateTypeFromSignature(fakeSignature)
	}
	tagType := c.checkExpressionCached(context.TagName)
	if tagType.flags&TypeFlagsStringLiteral != 0 {
		result := c.getIntrinsicAttributesTypeFromStringLiteralType(tagType.AsStringLiteralType(), context)
		if result == nil {
			return c.errorType
		}
		fakeSignature := c.createSignatureForJSXIntrinsic(context, result)
		return c.getOrCreateTypeFromSignature(fakeSignature)
	}
	return tagType
}

func (c *Checker) getJsxManagedAttributesFromLocatedAttributes(context JsxOpeningLikeElement, ns *ast.Symbol, attributesType *Type) *Type {
	managedSym := c.getJsxLibraryManagedAttributes(ns)
	if managedSym != nil {
		ctorType := c.getStaticTypeOfReferencedJsxConstructor(context)
		result := c.instantiateAliasOrInterfaceWithDefaults(managedSym, isInJSFile(context), ctorType, attributesType)
		if result != nil {
			return result
		}
	}
	return attributesType
}

func (c *Checker) getJsxPropsTypeFromClassType(sig Signature, context JsxOpeningLikeElement) *Type {
	ns := c.getJsxNamespaceAt(context)
	forcedLookupLocation := c.getJsxElementPropertiesName(ns)
	var attributesType *Type
	switch {
	case forcedLookupLocation == nil:
		attributesType = c.getTypeOfFirstParameterOfSignatureWithFallback(sig, c.unknownType)
	case forcedLookupLocation == "":
		attributesType = c.getReturnTypeOfSignature(sig)
	default:
		attributesType = c.getJsxPropsTypeForSignatureFromMember(sig, forcedLookupLocation)
	}

	if attributesType == nil {
		// There is no property named 'props' on this instance type
		if forcedLookupLocation && length(context.Attributes.Properties) != 0 {
			c.error(context, Diagnostics.JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property, unescapeLeadingUnderscores(forcedLookupLocation))
		}
		return c.unknownType
	}

	attributesType = c.getJsxManagedAttributesFromLocatedAttributes(context, ns, attributesType)

	if c.isTypeAny(attributesType) {
		// Props is of type 'any' or unknown
		return attributesType
	} else {
		// Normal case -- add in IntrinsicClassElements<T> and IntrinsicElements
		apparentAttributesType := attributesType
		intrinsicClassAttribs := c.getJsxType(JsxNames.IntrinsicClassAttributes, context)
		if !c.isErrorType(intrinsicClassAttribs) {
			typeParams := c.getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(intrinsicClassAttribs.symbol)
			hostClassType := c.getReturnTypeOfSignature(sig)
			var libraryManagedAttributeType *Type
			if typeParams != nil {
				// apply JSX.IntrinsicClassElements<hostClassType, ...>
				inferredArgs := c.fillMissingTypeArguments([]*Type{hostClassType}, typeParams, c.getMinTypeArgumentCount(typeParams), isInJSFile(context))
				libraryManagedAttributeType = c.instantiateType(intrinsicClassAttribs, c.createTypeMapper(typeParams, inferredArgs))
			} else {
				libraryManagedAttributeType = intrinsicClassAttribs
			}
			apparentAttributesType = c.intersectTypes(libraryManagedAttributeType, apparentAttributesType)
		}

		intrinsicAttribs := c.getJsxType(JsxNames.IntrinsicAttributes, context)
		if !c.isErrorType(intrinsicAttribs) {
			apparentAttributesType = c.intersectTypes(intrinsicAttribs, apparentAttributesType)
		}

		return apparentAttributesType
	}
}

func (c *Checker) getIntersectedSignatures(signatures []Signature) *Signature {
	if getStrictOptionValue(c.compilerOptions, "noImplicitAny") {
		return reduceLeft(signatures, func(left *Signature, right *Signature) *Signature {
			switch {
			case left == right || left == nil:
				return left
			case c.compareTypeParametersIdentical(left.typeParameters, right.typeParameters):
				return c.combineSignaturesOfIntersectionMembers(left, right)
			default:
				return nil
			}
		})
	} else {
		return nil
	}
}

func (c *Checker) combineIntersectionThisParam(left *ast.Symbol, right *ast.Symbol, mapper *TypeMapper) *ast.Symbol {
	if left == nil || right == nil {
		return left || right
	}
	// A signature `this` type might be a read or a write position... It's very possible that it should be invariant
	// and we should refuse to merge signatures if there are `this` types and they do not match. However, so as to be
	// pessimistic when contextual typing, for now, we'll union the `this` types.
	thisType := c.getUnionType([]*Type{c.getTypeOfSymbol(left), c.instantiateType(c.getTypeOfSymbol(right), mapper)})
	return c.createSymbolWithType(left, thisType)
}

func (c *Checker) combineIntersectionParameters(left Signature, right Signature, mapper *TypeMapper) []*ast.Symbol {
	leftCount := c.getParameterCount(left)
	rightCount := c.getParameterCount(right)
	var longest Signature
	if leftCount >= rightCount {
		longest = left
	} else {
		longest = right
	}
	var shorter Signature
	if longest == left {
		shorter = right
	} else {
		shorter = left
	}
	var longestCount number
	if longest == left {
		longestCount = leftCount
	} else {
		longestCount = rightCount
	}
	eitherHasEffectiveRest := c.hasEffectiveRestParameter(left) || c.hasEffectiveRestParameter(right)
	needsExtraRestElement := eitherHasEffectiveRest && !c.hasEffectiveRestParameter(longest)
	params := NewArray[*ast.Symbol](longestCount + (ifElse(needsExtraRestElement, 1, 0)))
	for i := 0; i < longestCount; i++ {
		longestParamType := c.tryGetTypeAtPosition(longest, i)
		if longest == right {
			longestParamType = c.instantiateType(longestParamType, mapper)
		}
		shorterParamType := c.tryGetTypeAtPosition(shorter, i) || c.unknownType
		if shorter == right {
			shorterParamType = c.instantiateType(shorterParamType, mapper)
		}
		unionParamType := c.getUnionType([]*Type{longestParamType, shorterParamType})
		isRestParam := eitherHasEffectiveRest && !needsExtraRestElement && i == (longestCount-1)
		isOptional := i >= c.getMinArgumentCount(longest) && i >= c.getMinArgumentCount(shorter)
		var leftName *string
		if i >= leftCount {
			leftName = nil
		} else {
			leftName = c.getParameterNameAtPosition(left, i)
		}
		var rightName *string
		if i >= rightCount {
			rightName = nil
		} else {
			rightName = c.getParameterNameAtPosition(right, i)
		}

		var paramName *string
		switch {
		case leftName == rightName:
			paramName = leftName
		case !leftName:
			paramName = rightName
		case !rightName:
			paramName = leftName
		default:
			paramName = nil
		}
		paramSymbol := c.createSymbol(ast.SymbolFlagsFunctionScopedVariable|(ifElse(isOptional && !isRestParam, ast.SymbolFlagsOptional, 0)), paramName || __TEMPLATE__("arg", i).(string), ifElse(isRestParam, ast.CheckFlagsRestParameter, ifElse(isOptional, ast.CheckFlagsOptionalParameter, 0)))
		if isRestParam {
			paramSymbol.Links.type_ = c.createArrayType(unionParamType)
		} else {
			paramSymbol.Links.type_ = unionParamType
		}
		params[i] = paramSymbol
	}
	if needsExtraRestElement {
		restParamSymbol := c.createSymbol(ast.SymbolFlagsFunctionScopedVariable, "args" /* as __String */, ast.CheckFlagsRestParameter)
		restParamSymbol.Links.type_ = c.createArrayType(c.getTypeAtPosition(shorter, longestCount))
		if shorter == right {
			restParamSymbol.Links.type_ = c.instantiateType(restParamSymbol.Links.type_, mapper)
		}
		params[longestCount] = restParamSymbol
	}
	return params
}

func (c *Checker) combineSignaturesOfIntersectionMembers(left Signature, right Signature) Signature {
	typeParams := left.typeParameters || right.typeParameters
	var paramMapper *TypeMapper
	if left.typeParameters != nil && right.typeParameters != nil {
		paramMapper = c.createTypeMapper(right.typeParameters, left.typeParameters)
		// We just use the type parameter defaults from the first signature
	}
	flags := (left.flags | right.flags) & (SignatureFlagsPropagatingFlags & ^SignatureFlagsHasRestParameter)
	declaration := left.declaration
	params := c.combineIntersectionParameters(left, right, paramMapper)
	lastParam := lastOrUndefined(params)
	if lastParam != nil && getCheckFlags(lastParam)&ast.CheckFlagsRestParameter != 0 {
		flags |= SignatureFlagsHasRestParameter
	}
	thisParam := c.combineIntersectionThisParam(left.thisParameter, right.thisParameter, paramMapper)
	minArgCount := max(left.minArgumentCount, right.minArgumentCount)
	result := c.createSignature(declaration, typeParams, thisParam, params, nil, nil, minArgCount, flags)
	result.compositeKind = TypeFlagsIntersection
	result.compositeSignatures = core.Concatenate(left.compositeKind == TypeFlagsIntersection && left.compositeSignatures || []Signature{left}, []Signature{right})
	if paramMapper != nil {
		if left.compositeKind == TypeFlagsIntersection && left.mapper != nil && left.compositeSignatures != nil {
			result.mapper = c.combineTypeMappers(left.mapper, paramMapper)
		} else {
			result.mapper = paramMapper
		}
	}
	return result
}

// If the given type is an object or union type with a single signature, and if that signature has at
// least as many parameters as the given function, return the signature. Otherwise return undefined.
func (c *Checker) getContextualCallSignature(t *Type, node SignatureDeclaration) *Signature {
	signatures := c.getSignaturesOfType(t, SignatureKindCall)
	applicableByArity := core.Filter(signatures, func(s Signature) bool {
		return !c.isAritySmaller(s, node)
	})
	if applicableByArity.length == 1 {
		return applicableByArity[0]
	} else {
		return c.getIntersectedSignatures(applicableByArity)
	}
}

/** If the contextual signature has fewer parameters than the function expression, do not use it */

func (c *Checker) isAritySmaller(signature Signature, target SignatureDeclaration) bool {
	targetParameterCount := 0
	for ; targetParameterCount < target.Parameters.length; targetParameterCount++ {
		param := target.Parameters[targetParameterCount]
		if param.Initializer != nil || param.QuestionToken != nil || param.DotDotDotToken != nil || isJSDocOptionalParameter(param) {
			break
		}
	}
	if target.Parameters.length != 0 && parameterIsThisKeyword(target.Parameters[0]) {
		targetParameterCount--
	}
	return !c.hasEffectiveRestParameter(signature) && c.getParameterCount(signature) < targetParameterCount
}

func (c *Checker) getContextualSignatureForFunctionLikeDeclaration(node FunctionLikeDeclaration) *Signature {
	// Only function expressions, arrow functions, and object literal methods are contextually typed.
	if isFunctionExpressionOrArrowFunction(node) || isObjectLiteralMethod(node) {
		return c.getContextualSignature(node.AsFunctionExpression())
	} else {
		return nil
	}
}

// Return the contextual signature for a given expression node. A contextual type provides a
// contextual signature if it has a single call signature and if that call signature is non-generic.
// If the contextual type is a union type, get the signature from each type possible and if they are
// all identical ignoring their return type, the result is same signature but with return type as
// union type of return types from these signatures
func (c *Checker) getContextualSignature(node Union[FunctionExpression, ArrowFunction, MethodDeclaration]) *Signature {
	Debug.assert(node.Kind != ast.KindMethodDeclaration || isObjectLiteralMethod(node))
	typeTagSignature := c.getSignatureOfTypeTag(node)
	if typeTagSignature != nil {
		return typeTagSignature
	}
	t := c.getApparentTypeOfContextualType(node, ContextFlagsSignature)
	if !(t) {
		return nil
	}
	if t.flags&TypeFlagsUnion == 0 {
		return c.getContextualCallSignature(t, node)
	}
	var signatureList *[]Signature
	types := t.AsUnionType().types
	for _, current := range types {
		signature := c.getContextualCallSignature(current, node)
		if signature != nil {
			if signatureList == nil {
				// This signature will contribute to contextual union signature
				signatureList = []Signature{signature}
			} else if c.compareSignaturesIdentical(signatureList[0], signature, false /*partialMatch*/, true /*ignoreThisTypes*/, true /*ignoreReturnTypes*/, c.compareTypesIdentical) == 0 {
				// Signatures aren't identical, do not use
				return nil
			} else {
				// Use this signature for contextual union signature
				signatureList.push(signature)
			}
		}
	}
	// Result is union of signatures collected (return type is union of return types of this signature set)
	if signatureList != nil {
		if signatureList.length == 1 {
			return signatureList[0]
		} else {
			return c.createUnionSignature(signatureList[0], signatureList)
		}
	}
}

func (c *Checker) checkGrammarRegularExpressionLiteral(node RegularExpressionLiteral) bool {
	sourceFile := getSourceFileOfNode(node)
	if !c.hasParseDiagnostics(sourceFile) && !node.IsUnterminated {
		var lastError *DiagnosticWithLocation
		if c.scanner == nil {
			c.scanner = createScanner(ScriptTargetESNext, true /*skipTrivia*/)
		}
		c.scanner.setScriptTarget(sourceFile.LanguageVersion)
		c.scanner.setLanguageVariant(sourceFile.LanguageVariant)
		c.scanner.setOnError(func(message DiagnosticMessage, length number, arg0 any) {
			// For providing spelling suggestions
			start := c.scanner.getTokenEnd()
			if message.category == DiagnosticCategoryMessage && lastError != nil && start == lastError.start && length == lastError.length {
				error := createDetachedDiagnostic(sourceFile.FileName, sourceFile.Text, start, length, message, arg0)
				addRelatedInfo(lastError, error)
			} else if lastError == nil || start != lastError.start {
				lastError = createFileDiagnostic(sourceFile, start, length, message, arg0)
				c.diagnostics.add(lastError)
			}
		})
		c.scanner.setText(sourceFile.Text, node.Pos, node.End-node.Pos)
		{ // try
			c.scanner.scan()
			Debug.assert(c.scanner.reScanSlashToken(true) == ast.KindRegularExpressionLiteral, "Expected scanner to rescan RegularExpressionLiteral")
			return lastError != nil
		}
		{ // finally
			c.scanner.setText("")
			c.scanner.setOnError(nil)
		}
	}
	return false
}

func (c *Checker) checkRegularExpressionLiteral(node RegularExpressionLiteral) ObjectType {
	nodeLinks := c.getNodeLinks(node)
	if nodeLinks.flags&NodeCheckFlagsTypeChecked == 0 {
		nodeLinks.flags |= NodeCheckFlagsTypeChecked
		c.addLazyDiagnostic(func() bool {
			return c.checkGrammarRegularExpressionLiteral(node)
		})
	}
	return c.globalRegExpType
}

func (c *Checker) checkSpreadExpression(node SpreadElement, checkMode CheckMode) *Type {
	if c.languageVersion < LanguageFeatureMinimumTarget.SpreadElements {
		c.checkExternalEmitHelpers(node, ifElse(c.compilerOptions.downlevelIteration, ExternalEmitHelpersSpreadIncludes, ExternalEmitHelpersSpreadArray))
	}

	arrayOrIterableType := c.checkExpression(node.Expression, checkMode)
	return c.checkIteratedTypeOrElementType(IterationUseSpread, arrayOrIterableType, c.undefinedType, node.Expression)
}

func (c *Checker) checkSyntheticExpression(node SyntheticExpression) *Type {
	if node.IsSpread {
		return c.getIndexedAccessType(node.Type_, c.numberType)
	} else {
		return node.Type_
	}
}

func (c *Checker) hasDefaultValue(node Union[BindingElement, ObjectLiteralElementLike, Expression]) bool {
	return node.Kind == ast.KindBindingElement && node.AsBindingElement().Initializer != nil || node.Kind == ast.KindPropertyAssignment && c.hasDefaultValue(node.AsPropertyAssignment().Initializer) || node.Kind == ast.KindShorthandPropertyAssignment && node.AsShorthandPropertyAssignment().ObjectAssignmentInitializer != nil || node.Kind == ast.KindBinaryExpression && node.AsBinaryExpression().OperatorToken.Kind == ast.KindEqualsToken
}

func (c *Checker) isSpreadIntoCallOrNew(node ArrayLiteralExpression) bool {
	parent := walkUpParenthesizedExpressions(node.Parent)
	return isSpreadElement(parent) && isCallOrNewExpression(parent.Parent)
}

func (c *Checker) checkArrayLiteral(node ArrayLiteralExpression, checkMode *CheckMode, forceTuple *bool) *Type {
	elements := node.Elements
	elementCount := elements.length
	var elementTypes []*Type = []never{}
	var elementFlags []ElementFlags = []never{}
	c.pushCachedContextualType(node)
	inDestructuringPattern := isAssignmentTarget(node)
	inConstContext := c.isConstContext(node)
	contextualType := c.getApparentTypeOfContextualType(node, nil /*contextFlags*/)
	inTupleContext := c.isSpreadIntoCallOrNew(node) || contextualType != nil && c.someType(contextualType, func(t *Type) bool {
		return c.isTupleLikeType(t) || c.isGenericMappedType(t) && t.nameType == nil && c.getHomomorphicTypeVariable(t.target.AsMappedType() || t) != nil
	})

	hasOmittedExpression := false
	for i := 0; i < elementCount; i++ {
		e := elements[i]
		if e.Kind == ast.KindSpreadElement {
			if c.languageVersion < LanguageFeatureMinimumTarget.SpreadElements {
				c.checkExternalEmitHelpers(e, ifElse(c.compilerOptions.downlevelIteration, ExternalEmitHelpersSpreadIncludes, ExternalEmitHelpersSpreadArray))
			}
			spreadType := c.checkExpression(e.AsSpreadElement().Expression, checkMode, forceTuple)
			if c.isArrayLikeType(spreadType) {
				elementTypes.push(spreadType)
				elementFlags.push(ElementFlagsVariadic)
			} else if inDestructuringPattern {
				// Given the following situation:
				//    var c: {};
				//    [...c] = ["", 0];
				//
				// c is represented in the tree as a spread element in an array literal.
				// But c really functions as a rest element, and its purpose is to provide
				// a contextual type for the right hand side of the assignment. Therefore,
				// instead of calling checkExpression on "...c", which will give an error
				// if c is not iterable/array-like, we need to act as if we are trying to
				// get the contextual element type from it. So we do something similar to
				// getContextualTypeForElementExpression, which will crucially not error
				// if there is no index type / iterated type.
				restElementType := c.getIndexTypeOfType(spreadType, c.numberType) || c.getIteratedTypeOrElementType(IterationUseDestructuring, spreadType, c.undefinedType, nil /*errorNode*/, false /*checkAssignability*/) || c.unknownType
				elementTypes.push(restElementType)
				elementFlags.push(ElementFlagsRest)
			} else {
				elementTypes.push(c.checkIteratedTypeOrElementType(IterationUseSpread, spreadType, c.undefinedType, e.AsSpreadElement().Expression))
				elementFlags.push(ElementFlagsRest)
			}
		} else if c.exactOptionalPropertyTypes && e.Kind == ast.KindOmittedExpression {
			hasOmittedExpression = true
			elementTypes.push(c.undefinedOrMissingType)
			elementFlags.push(ElementFlagsOptional)
		} else {
			t := c.checkExpressionForMutableLocation(e, checkMode, forceTuple)
			elementTypes.push(c.addOptionality(t, true /*isProperty*/, hasOmittedExpression))
			elementFlags.push(ifElse(hasOmittedExpression, ElementFlagsOptional, ElementFlagsRequired))
			if inTupleContext && checkMode && checkMode&CheckModeInferential != 0 && checkMode&CheckModeSkipContextSensitive == 0 && c.isContextSensitive(e) {
				inferenceContext := c.getInferenceContext(node)
				Debug.assert(inferenceContext)
				// In CheckMode.Inferential we should always have an inference context
				c.addIntraExpressionInferenceSite(inferenceContext, e, t)
			}
		}
	}
	c.popContextualType()
	if inDestructuringPattern {
		return c.createTupleType(elementTypes, elementFlags)
	}
	if forceTuple || inConstContext || inTupleContext {
		return c.createArrayLiteralType(c.createTupleType(elementTypes, elementFlags, inConstContext && !(contextualType != nil && c.someType(contextualType, c.isMutableArrayLikeType)) /*readonly*/))
	}
	return c.createArrayLiteralType(c.createArrayType(ifElse(elementTypes.length != 0, c.getUnionType(core.SameMap(elementTypes, func(t *Type, i number) *Type {
		if elementFlags[i]&ElementFlagsVariadic != 0 {
			return c.getIndexedAccessTypeOrUndefined(t, c.numberType) || c.anyType
		} else {
			return t
		}
	}), UnionReductionSubtype), ifElse(c.strictNullChecks, c.implicitNeverType, c.undefinedWideningType)), inConstContext))
}

func (c *Checker) createArrayLiteralType(t *Type) *Type {
	if getObjectFlags(t)&ObjectFlagsReference == 0 {
		return t
	}
	literalType := t.AsTypeReference().literalType
	if literalType == nil {
		literalType = /* TODO(TS-TO-GO) EqualsToken BinaryExpression: (type as TypeReference).literalType = cloneTypeReference(type as TypeReference) */ TODO
		literalType.objectFlags |= ObjectFlagsArrayLiteral | ObjectFlagsContainsObjectOrArrayLiteral
	}
	return literalType
}

func (c *Checker) isNumericName(name DeclarationName) bool {
	switch name.Kind {
	case ast.KindComputedPropertyName:
		return c.isNumericComputedName(name)
	case ast.KindIdentifier:
		return isNumericLiteralName(name.EscapedText)
	case ast.KindNumericLiteral,
		ast.KindStringLiteral:
		return isNumericLiteralName(name.Text)
	default:
		return false
	}
}

func (c *Checker) isNumericComputedName(name ComputedPropertyName) bool {
	// It seems odd to consider an expression of type Any to result in a numeric name,
	// but this behavior is consistent with checkIndexedAccess
	return c.isTypeAssignableToKind(c.checkComputedPropertyName(name), TypeFlagsNumberLike)
}

func (c *Checker) checkComputedPropertyName(node ComputedPropertyName) *Type {
	links := c.getNodeLinks(node.Expression)
	if links.resolvedType == nil {
		if (isTypeLiteralNode(node.Parent.Parent) || isClassLike(node.Parent.Parent) || isInterfaceDeclaration(node.Parent.Parent)) && isBinaryExpression(node.Expression) && node.Expression.OperatorToken.Kind == ast.KindInKeyword && node.Parent.Kind != ast.KindGetAccessor && node.Parent.Kind != ast.KindSetAccessor {
			links.resolvedType = c.errorType
			return links.resolvedType
		}
		links.resolvedType = c.checkExpression(node.Expression)
		// The computed property name of a non-static class field within a loop must be stored in a block-scoped binding.
		// (It needs to be bound at class evaluation time.)
		if isPropertyDeclaration(node.Parent) && !hasStaticModifier(node.Parent) && isClassExpression(node.Parent.Parent) {
			container := getEnclosingBlockScopeContainer(node.Parent.Parent)
			enclosingIterationStatement := c.getEnclosingIterationStatement(container)
			if enclosingIterationStatement != nil {
				// The computed field name will use a block scoped binding which can be unique for each iteration of the loop.
				c.getNodeLinks(enclosingIterationStatement).flags |= NodeCheckFlagsLoopWithCapturedBlockScopedBinding
				// The generated variable which stores the computed field name must be block-scoped.
				c.getNodeLinks(node).flags |= NodeCheckFlagsBlockScopedBindingInLoop
				// The generated variable which stores the class must be block-scoped.
				c.getNodeLinks(node.Parent.Parent).flags |= NodeCheckFlagsBlockScopedBindingInLoop
			}
		}
		// This will allow types number, string, symbol or any. It will also allow enums, the unknown
		// type, and any union of these types (like string | number).
		if links.resolvedType.flags&TypeFlagsNullable != 0 || !c.isTypeAssignableToKind(links.resolvedType, TypeFlagsStringLike|TypeFlagsNumberLike|TypeFlagsESSymbolLike) && !c.isTypeAssignableTo(links.resolvedType, c.stringNumberSymbolType) {
			c.error(node, Diagnostics.A_computed_property_name_must_be_of_type_string_number_symbol_or_any)
		}
	}

	return links.resolvedType
}

func (c *Checker) isSymbolWithNumericName(symbol *ast.Symbol) *bool {
	firstDecl := symbol.Declarations[0]
	return isNumericLiteralName(symbol.EscapedName) || (firstDecl && isNamedDeclaration(firstDecl) && c.isNumericName(firstDecl.Name))
}

func (c *Checker) isSymbolWithSymbolName(symbol *ast.Symbol) *bool {
	firstDecl := symbol.Declarations[0]
	return isKnownSymbol(symbol) || (firstDecl && isNamedDeclaration(firstDecl) && isComputedPropertyName(firstDecl.Name) && c.isTypeAssignableToKind(c.checkComputedPropertyName(firstDecl.Name), TypeFlagsESSymbol))
}

// NOTE: currently does not make pattern literal indexers, eg `${number}px`
func (c *Checker) getObjectLiteralIndexInfo(isReadonly bool, offset number, properties []*ast.Symbol, keyType *Type) IndexInfo {
	var propTypes []*Type = []never{}
	for i := offset; i < properties.length; i++ {
		prop := properties[i]
		if keyType == c.stringType && !c.isSymbolWithSymbolName(prop) || keyType == c.numberType && c.isSymbolWithNumericName(prop) || keyType == c.esSymbolType && c.isSymbolWithSymbolName(prop) {
			propTypes.push(c.getTypeOfSymbol(properties[i]))
		}
	}
	var unionType *Type
	if propTypes.length != 0 {
		unionType = c.getUnionType(propTypes, UnionReductionSubtype)
	} else {
		unionType = c.undefinedType
	}
	return c.createIndexInfo(keyType, unionType, isReadonly)
}

func (c *Checker) getImmediateAliasedSymbol(symbol *ast.Symbol) *ast.Symbol {
	Debug.assert((symbol.Flags&ast.SymbolFlagsAlias) != 0, "Should only get Alias here.")
	links := c.getSymbolLinks(symbol)
	if links.immediateTarget == nil {
		node := c.getDeclarationOfAliasSymbol(symbol)
		if node == nil {
			return Debug.fail()
		}
		links.immediateTarget = c.getTargetOfAliasDeclaration(node, true /*dontRecursivelyResolve*/)
	}

	return links.immediateTarget
}

func (c *Checker) checkObjectLiteral(node ObjectLiteralExpression, checkMode CheckMode /*  = CheckMode.Normal */) *Type {
	inDestructuringPattern := isAssignmentTarget(node)
	// Grammar checking
	c.checkGrammarObjectLiteralExpression(node, inDestructuringPattern)

	var allPropertiesTable *SymbolTable
	if c.strictNullChecks {
		allPropertiesTable = createSymbolTable()
	} else {
		allPropertiesTable = nil
	}
	propertiesTable := createSymbolTable()
	var propertiesArray []*ast.Symbol = []never{}
	var spread *Type = c.emptyObjectType

	c.pushCachedContextualType(node)
	contextualType := c.getApparentTypeOfContextualType(node, nil /*contextFlags*/)
	contextualTypeHasPattern := contextualType && contextualType.pattern && (contextualType.pattern.Kind == ast.KindObjectBindingPattern || contextualType.pattern.Kind == ast.KindObjectLiteralExpression)
	inConstContext := c.isConstContext(node)
	var checkFlags /* TODO(TS-TO-GO) inferred type 0 | CheckFlags.Readonly */ any
	if inConstContext {
		checkFlags = ast.CheckFlagsReadonly
	} else {
		checkFlags = 0
	}
	isInJavascript := isInJSFile(node) && !isInJsonFile(node)
	var enumTag *JSDocEnumTag
	if isInJavascript {
		enumTag = getJSDocEnumTag(node)
	} else {
		enumTag = nil
	}
	isJSObjectLiteral := contextualType == nil && isInJavascript && enumTag == nil
	var objectFlags ObjectFlags = ObjectFlagsFreshLiteral
	patternWithComputedProperties := false
	hasComputedStringProperty := false
	hasComputedNumberProperty := false
	hasComputedSymbolProperty := false

	// Spreads may cause an early bail; ensure computed names are always checked (this is cached)
	// As otherwise they may not be checked until exports for the type at this position are retrieved,
	// which may never occur.
	for _, elem := range node.Properties {
		if elem.Name != nil && isComputedPropertyName(elem.Name) {
			c.checkComputedPropertyName(elem.Name)
		}
	}

	offset := 0
	for _, memberDecl := range node.Properties {
		member := c.getSymbolOfDeclaration(memberDecl)
		var computedNameType *Type
		if memberDecl.Name != nil && memberDecl.Name.Kind == ast.KindComputedPropertyName {
			computedNameType = c.checkComputedPropertyName(memberDecl.Name)
		} else {
			computedNameType = nil
		}
		if memberDecl.Kind == ast.KindPropertyAssignment || memberDecl.Kind == ast.KindShorthandPropertyAssignment || isObjectLiteralMethod(memberDecl) {
			var t *Type
			switch {
			case memberDecl.Kind == ast.KindPropertyAssignment:
				t = c.checkPropertyAssignment(memberDecl, checkMode)
			case memberDecl.Kind == ast.KindShorthandPropertyAssignment:
				t = c.checkExpressionForMutableLocation(ifElse(!inDestructuringPattern && memberDecl.ObjectAssignmentInitializer != nil, memberDecl.ObjectAssignmentInitializer, memberDecl.Name), checkMode)
			default:
				t = c.checkObjectLiteralMethod(memberDecl, checkMode)
			}
			if isInJavascript {
				jsDocType := c.getTypeForDeclarationFromJSDocComment(memberDecl)
				if jsDocType != nil {
					c.checkTypeAssignableTo(t, jsDocType, memberDecl)
					t = jsDocType
				} else if enumTag != nil && enumTag.TypeExpression {
					c.checkTypeAssignableTo(t, c.getTypeFromTypeNode(enumTag.TypeExpression), memberDecl)
				}
			}
			objectFlags |= getObjectFlags(t) & ObjectFlagsPropagatingFlags
			var nameType * /* TODO(TS-TO-GO) inferred type StringLiteralType | NumberLiteralType | UniqueESSymbolType */ any
			if computedNameType != nil && isTypeUsableAsPropertyName(computedNameType) {
				nameType = computedNameType
			} else {
				nameType = nil
			}
			var prop TransientSymbol
			if nameType != nil {
				prop = c.createSymbol(ast.SymbolFlagsProperty|member.Flags, getPropertyNameFromType(nameType), checkFlags|ast.CheckFlagsLate)
			} else {
				prop = c.createSymbol(ast.SymbolFlagsProperty|member.Flags, member.EscapedName, checkFlags)
			}
			if nameType != nil {
				prop.Links.nameType = nameType
			}

			if inDestructuringPattern && c.hasDefaultValue(memberDecl) {
				// If object literal is an assignment pattern and if the assignment pattern specifies a default value
				// for the property, make the property optional.
				prop.Flags |= ast.SymbolFlagsOptional
			} else if contextualTypeHasPattern && getObjectFlags(contextualType)&ObjectFlagsObjectLiteralPatternWithComputedProperties == 0 {
				// If object literal is contextually typed by the implied type of a binding pattern, and if the
				// binding pattern specifies a default value for the property, make the property optional.
				impliedProp := c.getPropertyOfType(contextualType, member.EscapedName)
				if impliedProp != nil {
					prop.Flags |= impliedProp.Flags & ast.SymbolFlagsOptional
				} else if c.getIndexInfoOfType(contextualType, c.stringType) == nil {
					c.error(memberDecl.Name, Diagnostics.Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1, c.symbolToString(member), c.typeToString(contextualType))
				}
			}

			prop.Declarations = member.Declarations
			prop.Parent = member.Parent
			if member.ValueDeclaration != nil {
				prop.ValueDeclaration = member.ValueDeclaration
			}

			prop.Links.type_ = t
			prop.Links.target = member
			member = prop
			allPropertiesTable. /* ? */ set(prop.EscapedName, prop)

			if contextualType != nil && checkMode&CheckModeInferential != 0 && checkMode&CheckModeSkipContextSensitive == 0 && (memberDecl.Kind == ast.KindPropertyAssignment || memberDecl.Kind == ast.KindMethodDeclaration) && c.isContextSensitive(memberDecl) {
				inferenceContext := c.getInferenceContext(node)
				Debug.assert(inferenceContext)
				// In CheckMode.Inferential we should always have an inference context
				var inferenceNode /* TODO(TS-TO-GO) inferred type Expression | MethodDeclaration */ any
				if memberDecl.Kind == ast.KindPropertyAssignment {
					inferenceNode = memberDecl.Initializer
				} else {
					inferenceNode = memberDecl
				}
				c.addIntraExpressionInferenceSite(inferenceContext, inferenceNode, t)
			}
		} else if memberDecl.Kind == ast.KindSpreadAssignment {
			if c.languageVersion < LanguageFeatureMinimumTarget.ObjectAssign {
				c.checkExternalEmitHelpers(memberDecl, ExternalEmitHelpersAssign)
			}
			if propertiesArray.length > 0 {
				spread = c.getSpreadType(spread, createObjectLiteralType(), node.Symbol, objectFlags, inConstContext)
				propertiesArray = []never{}
				propertiesTable = createSymbolTable()
				hasComputedStringProperty = false
				hasComputedNumberProperty = false
				hasComputedSymbolProperty = false
			}
			t := c.getReducedType(c.checkExpression(memberDecl.Expression, checkMode&CheckModeInferential))
			if c.isValidSpreadType(t) {
				mergedType := c.tryMergeUnionOfObjectTypeAndEmptyObject(t, inConstContext)
				if allPropertiesTable != nil {
					c.checkSpreadPropOverrides(mergedType, allPropertiesTable, memberDecl)
				}
				offset = propertiesArray.length
				if c.isErrorType(spread) {
					continue
				}
				spread = c.getSpreadType(spread, mergedType, node.Symbol, objectFlags, inConstContext)
			} else {
				c.error(memberDecl, Diagnostics.Spread_types_may_only_be_created_from_object_types)
				spread = c.errorType
			}
			continue
		} else {
			// TypeScript 1.0 spec (April 2014)
			// A get accessor declaration is processed in the same manner as
			// an ordinary function declaration(section 6.1) with no parameters.
			// A set accessor declaration is processed in the same manner
			// as an ordinary function declaration with a single parameter and a Void return type.
			Debug.assert(memberDecl.Kind == ast.KindGetAccessor || memberDecl.Kind == ast.KindSetAccessor)
			c.checkNodeDeferred(memberDecl)
		}

		if computedNameType != nil && computedNameType.flags&TypeFlagsStringOrNumberLiteralOrUnique == 0 {
			if c.isTypeAssignableTo(computedNameType, c.stringNumberSymbolType) {
				if c.isTypeAssignableTo(computedNameType, c.numberType) {
					hasComputedNumberProperty = true
				} else if c.isTypeAssignableTo(computedNameType, c.esSymbolType) {
					hasComputedSymbolProperty = true
				} else {
					hasComputedStringProperty = true
				}
				if inDestructuringPattern {
					patternWithComputedProperties = true
				}
			}
		} else {
			propertiesTable.set(member.EscapedName, member)
		}
		propertiesArray.push(member)
	}
	c.popContextualType()

	if c.isErrorType(spread) {
		return c.errorType
	}

	if spread != c.emptyObjectType {
		if propertiesArray.length > 0 {
			spread = c.getSpreadType(spread, createObjectLiteralType(), node.Symbol, objectFlags, inConstContext)
			propertiesArray = []never{}
			propertiesTable = createSymbolTable()
			hasComputedStringProperty = false
			hasComputedNumberProperty = false
		}
		// remap the raw emptyObjectType fed in at the top into a fresh empty object literal type, unique to this use site
		return c.mapType(spread, func(t *Type) *Type {
			if t == c.emptyObjectType {
				return createObjectLiteralType()
			} else {
				return t
			}
		})
	}

	return createObjectLiteralType()

	createObjectLiteralType := func() ResolvedType {
		indexInfos := []never{}
		isReadonly := c.isConstContext(node)
		if hasComputedStringProperty {
			indexInfos.push(c.getObjectLiteralIndexInfo(isReadonly, offset, propertiesArray, c.stringType))
		}
		if hasComputedNumberProperty {
			indexInfos.push(c.getObjectLiteralIndexInfo(isReadonly, offset, propertiesArray, c.numberType))
		}
		if hasComputedSymbolProperty {
			indexInfos.push(c.getObjectLiteralIndexInfo(isReadonly, offset, propertiesArray, c.esSymbolType))
		}
		result := c.createAnonymousType(node.Symbol, propertiesTable, emptyArray, emptyArray, indexInfos)
		result.objectFlags |= objectFlags | ObjectFlagsObjectLiteral | ObjectFlagsContainsObjectOrArrayLiteral
		if isJSObjectLiteral {
			result.objectFlags |= ObjectFlagsJSLiteral
		}
		if patternWithComputedProperties {
			result.objectFlags |= ObjectFlagsObjectLiteralPatternWithComputedProperties
		}
		if inDestructuringPattern {
			result.pattern = node
		}
		return result
	}

}

func (c *Checker) isValidSpreadType(type_ *Type) bool {
	t := c.removeDefinitelyFalsyTypes(c.mapType(type_, c.getBaseConstraintOrType))
	return t.flags&(TypeFlagsAny|TypeFlagsNonPrimitive|TypeFlagsObject|TypeFlagsInstantiableNonPrimitive) != 0 || t.flags&TypeFlagsUnionOrIntersection != 0 && core.Every(t.AsUnionOrIntersectionType().types, c.isValidSpreadType)
}

func (c *Checker) checkJsxSelfClosingElementDeferred(node JsxSelfClosingElement) {
	c.checkJsxOpeningLikeElementOrOpeningFragment(node)
}

func (c *Checker) checkJsxSelfClosingElement(node JsxSelfClosingElement, _checkMode *CheckMode) *Type {
	c.checkNodeDeferred(node)
	return c.getJsxElementTypeAt(node) || c.anyType
}

func (c *Checker) checkJsxElementDeferred(node JsxElement) {
	// Check attributes
	c.checkJsxOpeningLikeElementOrOpeningFragment(node.OpeningElement)

	// Perform resolution on the closing tag so that rename/go to definition/etc work
	if c.isJsxIntrinsicTagName(node.ClosingElement.TagName) {
		c.getIntrinsicTagSymbol(node.ClosingElement)
	} else {
		c.checkExpression(node.ClosingElement.TagName)
	}

	c.checkJsxChildren(node)
}

func (c *Checker) checkJsxElement(node JsxElement, _checkMode *CheckMode) *Type {
	c.checkNodeDeferred(node)

	return c.getJsxElementTypeAt(node) || c.anyType
}

func (c *Checker) checkJsxFragment(node JsxFragment) *Type {
	c.checkJsxOpeningLikeElementOrOpeningFragment(node.OpeningFragment)

	// by default, jsx:'react' will use jsxFactory = React.createElement and jsxFragmentFactory = React.Fragment
	// if jsxFactory compiler option is provided, ensure jsxFragmentFactory compiler option or @jsxFrag pragma is provided too
	nodeSourceFile := getSourceFileOfNode(node)
	if getJSXTransformEnabled(c.compilerOptions) && (c.compilerOptions.jsxFactory || nodeSourceFile.Pragmas.has("jsx")) && !c.compilerOptions.jsxFragmentFactory && !nodeSourceFile.Pragmas.has("jsxfrag") {
		c.error(node, ifElse(c.compilerOptions.jsxFactory, Diagnostics.The_jsxFragmentFactory_compiler_option_must_be_provided_to_use_JSX_fragments_with_the_jsxFactory_compiler_option, Diagnostics.An_jsxFrag_pragma_is_required_when_using_an_jsx_pragma_with_JSX_fragments))
	}

	c.checkJsxChildren(node)
	return c.getJsxElementTypeAt(node) || c.anyType
}

func (c *Checker) isHyphenatedJsxName(name Union[string, string]) bool {
	return (name /* as string */).includes("-")
}

/**
 * Returns true iff React would emit this tag name as a string rather than an identifier or qualified name
 */

func (c *Checker) isJsxIntrinsicTagName(tagName *ast.Node) bool {
	return isIdentifier(tagName) && isIntrinsicJsxName(tagName.EscapedText) || isJsxNamespacedName(tagName)
}

func (c *Checker) checkJsxAttribute(node JsxAttribute, checkMode CheckMode) *Type {
	if node.Initializer != nil {
		return c.checkExpressionForMutableLocation(node.Initializer, checkMode)
	} else {
		return c.trueType
	}
	// <Elem attr /> is sugar for <Elem attr={true} />
}

/**
 * Get attributes type of the JSX opening-like element. The result is from resolving "attributes" property of the opening-like element.
 *
 * @param openingLikeElement a JSX opening-like element
 * @param filter a function to remove attributes that will not participate in checking whether attributes are assignable
 * @return an anonymous type (similar to the one returned by checkObjectLiteral) in which its properties are attributes property.
 * @remarks Because this function calls getSpreadType, it needs to use the same checks as checkObjectLiteral,
 * which also calls getSpreadType.
 */

func (c *Checker) createJsxAttributesTypeFromAttributesProperty(openingLikeElement JsxOpeningLikeElement, checkMode CheckMode /*  = CheckMode.Normal */) *Type {
	attributes := openingLikeElement.Attributes
	contextualType := c.getContextualType(attributes, ContextFlagsNone)
	var allAttributesTable *SymbolTable
	if c.strictNullChecks {
		allAttributesTable = createSymbolTable()
	} else {
		allAttributesTable = nil
	}
	attributesTable := createSymbolTable()
	var spread *Type = c.emptyJsxObjectType
	hasSpreadAnyType := false
	var typeToIntersect *Type
	explicitlySpecifyChildrenAttribute := false
	var objectFlags ObjectFlags = ObjectFlagsJsxAttributes
	jsxChildrenPropertyName := c.getJsxElementChildrenPropertyName(c.getJsxNamespaceAt(openingLikeElement))

	for _, attributeDecl := range attributes.Properties {
		member := attributeDecl.Symbol
		if isJsxAttribute(attributeDecl) {
			exprType := c.checkJsxAttribute(attributeDecl, checkMode)
			objectFlags |= getObjectFlags(exprType) & ObjectFlagsPropagatingFlags

			attributeSymbol := c.createSymbol(ast.SymbolFlagsProperty|member.Flags, member.EscapedName)
			attributeSymbol.Declarations = member.Declarations
			attributeSymbol.Parent = member.Parent
			if member.ValueDeclaration != nil {
				attributeSymbol.ValueDeclaration = member.ValueDeclaration
			}
			attributeSymbol.Links.type_ = exprType
			attributeSymbol.Links.target = member
			attributesTable.set(attributeSymbol.EscapedName, attributeSymbol)
			allAttributesTable. /* ? */ set(attributeSymbol.EscapedName, attributeSymbol)
			if getEscapedTextOfJsxAttributeName(attributeDecl.Name) == jsxChildrenPropertyName {
				explicitlySpecifyChildrenAttribute = true
			}
			if contextualType != nil {
				prop := c.getPropertyOfType(contextualType, member.EscapedName)
				if prop != nil && prop.Declarations != nil && c.isDeprecatedSymbol(prop) && isIdentifier(attributeDecl.Name) {
					c.addDeprecatedSuggestion(attributeDecl.Name, prop.Declarations, attributeDecl.Name.EscapedText /* as string */)
				}
			}
			if contextualType != nil && checkMode&CheckModeInferential != 0 && checkMode&CheckModeSkipContextSensitive == 0 && c.isContextSensitive(attributeDecl) {
				inferenceContext := c.getInferenceContext(attributes)
				Debug.assert(inferenceContext)
				// In CheckMode.Inferential we should always have an inference context
				inferenceNode := attributeDecl.Initializer.AsJsxExpression().Expression
				c.addIntraExpressionInferenceSite(inferenceContext, inferenceNode, exprType)
			}
		} else {
			Debug.assert(attributeDecl.Kind == ast.KindJsxSpreadAttribute)
			if attributesTable.size > 0 {
				spread = c.getSpreadType(spread, createJsxAttributesType(), attributes.Symbol, objectFlags, false /*readonly*/)
				attributesTable = createSymbolTable()
			}
			exprType := c.getReducedType(c.checkExpression(attributeDecl.Expression, checkMode&CheckModeInferential))
			if c.isTypeAny(exprType) {
				hasSpreadAnyType = true
			}
			if c.isValidSpreadType(exprType) {
				spread = c.getSpreadType(spread, exprType, attributes.Symbol, objectFlags, false /*readonly*/)
				if allAttributesTable != nil {
					c.checkSpreadPropOverrides(exprType, allAttributesTable, attributeDecl)
				}
			} else {
				c.error(attributeDecl.Expression, Diagnostics.Spread_types_may_only_be_created_from_object_types)
				if typeToIntersect != nil {
					typeToIntersect = c.getIntersectionType([]*Type{typeToIntersect, exprType})
				} else {
					typeToIntersect = exprType
				}
			}
		}
	}

	if !hasSpreadAnyType {
		if attributesTable.size > 0 {
			spread = c.getSpreadType(spread, createJsxAttributesType(), attributes.Symbol, objectFlags, false /*readonly*/)
		}
	}

	// Handle children attribute
	var parent *JsxElement
	if openingLikeElement.Parent.Kind == ast.KindJsxElement {
		parent = openingLikeElement.Parent.AsJsxElement()
	} else {
		parent = nil
	}
	// We have to check that openingElement of the parent is the one we are visiting as this may not be true for selfClosingElement
	if parent != nil && parent.OpeningElement == openingLikeElement && getSemanticJsxChildren(parent.Children).length > 0 {
		var childrenTypes []*Type = c.checkJsxChildren(parent, checkMode)

		if !hasSpreadAnyType && jsxChildrenPropertyName && jsxChildrenPropertyName != "" {
			// Error if there is a attribute named "children" explicitly specified and children element.
			// This is because children element will overwrite the value from attributes.
			// Note: we will not warn "children" attribute overwritten if "children" attribute is specified in object spread.
			if explicitlySpecifyChildrenAttribute {
				c.error(attributes, Diagnostics._0_are_specified_twice_The_attribute_named_0_will_be_overwritten, unescapeLeadingUnderscores(jsxChildrenPropertyName))
			}

			contextualType := c.getApparentTypeOfContextualType(openingLikeElement.Attributes, nil /*contextFlags*/)
			childrenContextualType := contextualType && c.getTypeOfPropertyOfContextualType(contextualType, jsxChildrenPropertyName)
			// If there are children in the body of JSX element, create dummy attribute "children" with the union of children types so that it will pass the attribute checking process
			childrenPropSymbol := c.createSymbol(ast.SymbolFlagsProperty, jsxChildrenPropertyName)
			switch {
			case childrenTypes.length == 1:
				childrenPropSymbol.Links.type_ = childrenTypes[0]
			case childrenContextualType != nil && c.someType(childrenContextualType, c.isTupleLikeType):
				childrenPropSymbol.Links.type_ = c.createTupleType(childrenTypes)
			default:
				childrenPropSymbol.Links.type_ = c.createArrayType(c.getUnionType(childrenTypes))
			}
			// Fake up a property declaration for the children
			childrenPropSymbol.ValueDeclaration = factory.createPropertySignature(nil, unescapeLeadingUnderscores(jsxChildrenPropertyName), nil /*questionToken*/, nil /*type*/)
			setParent(childrenPropSymbol.ValueDeclaration, attributes)
			childrenPropSymbol.ValueDeclaration.Symbol = childrenPropSymbol
			childPropMap := createSymbolTable()
			childPropMap.set(jsxChildrenPropertyName, childrenPropSymbol)
			spread = c.getSpreadType(spread, c.createAnonymousType(attributes.Symbol, childPropMap, emptyArray, emptyArray, emptyArray), attributes.Symbol, objectFlags, false /*readonly*/)
		}
	}

	if hasSpreadAnyType {
		return c.anyType
	}
	if typeToIntersect != nil && spread != c.emptyJsxObjectType {
		return c.getIntersectionType([]*Type{typeToIntersect, spread})
	}
	return typeToIntersect || (ifElse(spread == c.emptyJsxObjectType, createJsxAttributesType(), spread))
	/**
	 * Create anonymous type from given attributes symbol table.
	 * @param symbol a symbol of JsxAttributes containing attributes corresponding to attributesTable
	 * @param attributesTable a symbol table of attributes property
	 */

	createJsxAttributesType := func() ResolvedType {
		objectFlags |= ObjectFlagsFreshLiteral
		result := c.createAnonymousType(attributes.Symbol, attributesTable, emptyArray, emptyArray, emptyArray)
		result.objectFlags |= objectFlags | ObjectFlagsObjectLiteral | ObjectFlagsContainsObjectOrArrayLiteral
		return result
	}

}

func (c *Checker) checkJsxChildren(node Union[JsxElement, JsxFragment], checkMode CheckMode) []*Type {
	var childrenTypes []*Type = []never{}
	for _, child := range node.Children {
		// In React, JSX text that contains only whitespaces will be ignored so we don't want to type-check that
		// because then type of children property will have constituent of string type.
		if child.Kind == ast.KindJsxText {
			if !child.ContainsOnlyTriviaWhiteSpaces {
				childrenTypes.push(c.stringType)
			}
		} else if child.Kind == ast.KindJsxExpression && child.Expression == nil {
			continue
			// empty jsx expressions don't *really* count as present children
		} else {
			childrenTypes.push(c.checkExpressionForMutableLocation(child, checkMode))
		}
	}
	return childrenTypes
}

func (c *Checker) checkSpreadPropOverrides(t *Type, props SymbolTable, spread Union[SpreadAssignment, JsxSpreadAttribute]) {
	for _, right := range c.getPropertiesOfType(t) {
		if right.Flags&ast.SymbolFlagsOptional == 0 {
			left := props.get(right.EscapedName)
			if left != nil {
				diagnostic := c.error(left.ValueDeclaration, Diagnostics._0_is_specified_more_than_once_so_this_usage_will_be_overwritten, unescapeLeadingUnderscores(left.EscapedName))
				addRelatedInfo(diagnostic, createDiagnosticForNode(spread, Diagnostics.This_spread_always_overwrites_this_property))
			}
		}
	}
}

/**
 * Check attributes property of opening-like element. This function is called during chooseOverload to get call signature of a JSX opening-like element.
 * (See "checkApplicableSignatureForJsxOpeningLikeElement" for how the function is used)
 * @param node a JSXAttributes to be resolved of its type
 */

func (c *Checker) checkJsxAttributes(node JsxAttributes, checkMode *CheckMode) *Type {
	return c.createJsxAttributesTypeFromAttributesProperty(node.Parent, checkMode)
}

func (c *Checker) getJsxType(name string, location *ast.Node) *Type {
	namespace := c.getJsxNamespaceAt(location)
	exports := namespace && c.getExportsOfSymbol(namespace)
	typeSymbol := exports && c.getSymbol(exports, name, ast.SymbolFlagsType)
	if typeSymbol != nil {
		return c.getDeclaredTypeOfSymbol(typeSymbol)
	} else {
		return c.errorType
	}
}

/**
 * Looks up an intrinsic tag name and returns a symbol that either points to an intrinsic
 * property (in which case nodeLinks.jsxFlags will be IntrinsicNamedElement) or an intrinsic
 * string index signature (in which case nodeLinks.jsxFlags will be IntrinsicIndexedElement).
 * May also return unknownSymbol if both of these lookups fail.
 */

func (c *Checker) getIntrinsicTagSymbol(node Union[JsxOpeningLikeElement, JsxClosingElement]) *ast.Symbol {
	links := c.getNodeLinks(node)
	if links.resolvedSymbol == nil {
		intrinsicElementsType := c.getJsxType(JsxNames.IntrinsicElements, node)
		if !c.isErrorType(intrinsicElementsType) {
			// Property case
			if !isIdentifier(node.TagName) && !isJsxNamespacedName(node.TagName) {
				return Debug.fail()
			}
			var propName string
			if isJsxNamespacedName(node.TagName) {
				propName = getEscapedTextOfJsxNamespacedName(node.TagName)
			} else {
				propName = node.TagName.EscapedText
			}
			intrinsicProp := c.getPropertyOfType(intrinsicElementsType, propName)
			if intrinsicProp != nil {
				links.jsxFlags |= JsxFlagsIntrinsicNamedElement
				links.resolvedSymbol = intrinsicProp
				return links.resolvedSymbol
			}

			// Intrinsic string indexer case
			indexSymbol := c.getApplicableIndexSymbol(intrinsicElementsType, c.getStringLiteralType(unescapeLeadingUnderscores(propName)))
			if indexSymbol != nil {
				links.jsxFlags |= JsxFlagsIntrinsicIndexedElement
				links.resolvedSymbol = indexSymbol
				return links.resolvedSymbol
			}

			if c.getTypeOfPropertyOrIndexSignatureOfType(intrinsicElementsType, propName) != nil {
				links.jsxFlags |= JsxFlagsIntrinsicIndexedElement
				links.resolvedSymbol = intrinsicElementsType.symbol
				return links.resolvedSymbol
			}

			// Wasn't found
			c.error(node, Diagnostics.Property_0_does_not_exist_on_type_1, intrinsicTagNameToString(node.TagName), "JSX."+JsxNames.IntrinsicElements)
			links.resolvedSymbol = c.unknownSymbol
			return links.resolvedSymbol
		} else {
			if c.noImplicitAny {
				c.error(node, Diagnostics.JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists, unescapeLeadingUnderscores(JsxNames.IntrinsicElements))
			}
			links.resolvedSymbol = c.unknownSymbol
			return links.resolvedSymbol
		}
	}
	return links.resolvedSymbol
}

func (c *Checker) getJsxNamespaceContainerForImplicitImport(location *ast.Node) *ast.Symbol {
	file := location && getSourceFileOfNode(location)
	links := file && c.getNodeLinks(file)
	if links != nil && links.jsxImplicitImportContainer == false {
		return nil
	}
	if links != nil && links.jsxImplicitImportContainer {
		return links.jsxImplicitImportContainer
	}
	runtimeImportSpecifier := getJSXRuntimeImport(getJSXImplicitImportBase(c.compilerOptions, file), c.compilerOptions)
	if !runtimeImportSpecifier {
		return nil
	}
	isClassic := getEmitModuleResolutionKind(c.compilerOptions) == ModuleResolutionKindClassic
	var errorMessage any
	if isClassic {
		errorMessage = Diagnostics.Cannot_find_module_0_Did_you_mean_to_set_the_moduleResolution_option_to_nodenext_or_to_add_aliases_to_the_paths_option
	} else {
		errorMessage = Diagnostics.This_JSX_tag_requires_the_module_path_0_to_exist_but_none_could_be_found_Make_sure_you_have_types_for_the_appropriate_package_installed
	}
	specifier := c.getJSXRuntimeImportSpecifier(file, runtimeImportSpecifier)
	mod := c.resolveExternalModule(specifier || location, runtimeImportSpecifier, errorMessage, location)
	var result *ast.Symbol
	if mod != nil && mod != c.unknownSymbol {
		result = c.getMergedSymbol(c.resolveSymbol(mod))
	} else {
		result = nil
	}
	if links != nil {
		links.jsxImplicitImportContainer = result || false
	}
	return result
}

func (c *Checker) getJsxNamespaceAt(location *ast.Node) *ast.Symbol {
	links := location && c.getNodeLinks(location)
	if links != nil && links.jsxNamespace {
		return links.jsxNamespace
	}
	if links == nil || links.jsxNamespace != false {
		resolvedNamespace := c.getJsxNamespaceContainerForImplicitImport(location)

		if resolvedNamespace == nil || resolvedNamespace == c.unknownSymbol {
			namespaceName := c.getJsxNamespace(location)
			resolvedNamespace = c.resolveName(location, namespaceName, ast.SymbolFlagsNamespace, nil /*nameNotFoundMessage*/, false /*isUse*/)
		}

		if resolvedNamespace != nil {
			candidate := c.resolveSymbol(c.getSymbol(c.getExportsOfSymbol(c.resolveSymbol(resolvedNamespace)), JsxNames.JSX, ast.SymbolFlagsNamespace))
			if candidate != nil && candidate != c.unknownSymbol {
				if links != nil {
					links.jsxNamespace = candidate
				}
				return candidate
			}
		}
		if links != nil {
			links.jsxNamespace = false
		}
	}
	// JSX global fallback
	s := c.resolveSymbol(c.getGlobalSymbol(JsxNames.JSX, ast.SymbolFlagsNamespace, nil /*diagnostic*/))
	if s == c.unknownSymbol {
		return nil
		// TODO: GH#18217
	}
	return s
	// TODO: GH#18217
}

/**
 * Look into JSX namespace and then look for container with matching name as nameOfAttribPropContainer.
 * Get a single property from that container if existed. Report an error if there are more than one property.
 *
 * @param nameOfAttribPropContainer a string of value JsxNames.ElementAttributesPropertyNameContainer or JsxNames.ElementChildrenAttributeNameContainer
 *          if other string is given or the container doesn't exist, return undefined.
 */

func (c *Checker) getNameFromJsxElementAttributesContainer(nameOfAttribPropContainer string, jsxNamespace *ast.Symbol) *string {
	// JSX.ElementAttributesProperty | JSX.ElementChildrenAttribute [symbol]
	jsxElementAttribPropInterfaceSym := jsxNamespace && c.getSymbol(jsxNamespace.Exports, nameOfAttribPropContainer, ast.SymbolFlagsType)
	// JSX.ElementAttributesProperty | JSX.ElementChildrenAttribute [type]
	jsxElementAttribPropInterfaceType := jsxElementAttribPropInterfaceSym && c.getDeclaredTypeOfSymbol(jsxElementAttribPropInterfaceSym)
	// The properties of JSX.ElementAttributesProperty | JSX.ElementChildrenAttribute
	propertiesOfJsxElementAttribPropInterface := jsxElementAttribPropInterfaceType && c.getPropertiesOfType(jsxElementAttribPropInterfaceType)
	if propertiesOfJsxElementAttribPropInterface != nil {
		// Element Attributes has zero properties, so the element attributes type will be the class instance type
		if propertiesOfJsxElementAttribPropInterface.length == 0 {
			return "" /* as __String */
		} else if propertiesOfJsxElementAttribPropInterface.length == 1 {
			return propertiesOfJsxElementAttribPropInterface[0].EscapedName
		} else if propertiesOfJsxElementAttribPropInterface.length > 1 && jsxElementAttribPropInterfaceSym.Declarations != nil {
			// More than one property on ElementAttributesProperty is an error
			c.error(jsxElementAttribPropInterfaceSym.Declarations[0], Diagnostics.The_global_type_JSX_0_may_not_have_more_than_one_property, unescapeLeadingUnderscores(nameOfAttribPropContainer))
		}
	}
	return nil
}

func (c *Checker) getJsxLibraryManagedAttributes(jsxNamespace *ast.Symbol) *ast.Symbol {
	// JSX.LibraryManagedAttributes [symbol]
	return jsxNamespace && c.getSymbol(jsxNamespace.Exports, JsxNames.LibraryManagedAttributes, ast.SymbolFlagsType)
}

func (c *Checker) getJsxElementTypeSymbol(jsxNamespace *ast.Symbol) *ast.Symbol {
	// JSX.ElementType [symbol]
	return jsxNamespace && c.getSymbol(jsxNamespace.Exports, JsxNames.ElementType, ast.SymbolFlagsType)
}

// / e.g. "props" for React.d.ts,
// / or 'undefined' if ElementAttributesProperty doesn't exist (which means all
// /     non-intrinsic elements' attributes type is 'any'),
// / or ” if it has 0 properties (which means every
// /     non-intrinsic elements' attributes type is the element instance type)
func (c *Checker) getJsxElementPropertiesName(jsxNamespace *ast.Symbol) *string {
	return c.getNameFromJsxElementAttributesContainer(JsxNames.ElementAttributesPropertyNameContainer, jsxNamespace)
}

func (c *Checker) getJsxElementChildrenPropertyName(jsxNamespace *ast.Symbol) *string {
	return c.getNameFromJsxElementAttributesContainer(JsxNames.ElementChildrenAttributeNameContainer, jsxNamespace)
}

func (c *Checker) getUninstantiatedJsxSignaturesOfType(elementType *Type, caller JsxOpeningLikeElement) []Signature {
	if elementType.flags&TypeFlagsString != 0 {
		return []Signature{c.anySignature}
	} else if elementType.flags&TypeFlagsStringLiteral != 0 {
		intrinsicType := c.getIntrinsicAttributesTypeFromStringLiteralType(elementType.AsStringLiteralType(), caller)
		if intrinsicType == nil {
			c.error(caller, Diagnostics.Property_0_does_not_exist_on_type_1, elementType.AsStringLiteralType().value, "JSX."+JsxNames.IntrinsicElements)
			return emptyArray
		} else {
			fakeSignature := c.createSignatureForJSXIntrinsic(caller, intrinsicType)
			return []Signature{fakeSignature}
		}
	}
	apparentElemType := c.getApparentType(elementType)
	// Resolve the signatures, preferring constructor
	signatures := c.getSignaturesOfType(apparentElemType, SignatureKindConstruct)
	if signatures.length == 0 {
		// No construct signatures, try call signatures
		signatures = c.getSignaturesOfType(apparentElemType, SignatureKindCall)
	}
	if signatures.length == 0 && apparentElemType.flags&TypeFlagsUnion != 0 {
		// If each member has some combination of new/call signatures; make a union signature list for those
		signatures = c.getUnionSignatures(core.Map(apparentElemType.AsUnionType().types, func(t *Type) []Signature {
			return c.getUninstantiatedJsxSignaturesOfType(t, caller)
		}))
	}
	return signatures
}

func (c *Checker) getIntrinsicAttributesTypeFromStringLiteralType(t StringLiteralType, location *ast.Node) *Type {
	// If the elemType is a stringLiteral type, we can then provide a check to make sure that the string literal type is one of the Jsx intrinsic element type
	// For example:
	//      var CustomTag: "h1" = "h1";
	//      <CustomTag> Hello World </CustomTag>
	intrinsicElementsType := c.getJsxType(JsxNames.IntrinsicElements, location)
	if !c.isErrorType(intrinsicElementsType) {
		stringLiteralTypeName := t.value
		intrinsicProp := c.getPropertyOfType(intrinsicElementsType, escapeLeadingUnderscores(stringLiteralTypeName))
		if intrinsicProp != nil {
			return c.getTypeOfSymbol(intrinsicProp)
		}
		indexSignatureType := c.getIndexTypeOfType(intrinsicElementsType, c.stringType)
		if indexSignatureType != nil {
			return indexSignatureType
		}
		return nil
	}
	// If we need to report an error, we already done so here. So just return any to prevent any more error downstream
	return c.anyType
}

func (c *Checker) checkJsxReturnAssignableToAppropriateBound(refKind JsxReferenceKind, elemInstanceType *Type, openingLikeElement JsxOpeningLikeElement) {
	if refKind == JsxReferenceKindFunction {
		sfcReturnConstraint := c.getJsxStatelessElementTypeAt(openingLikeElement)
		if sfcReturnConstraint != nil {
			c.checkTypeRelatedTo(elemInstanceType, sfcReturnConstraint, c.assignableRelation, openingLikeElement.TagName, Diagnostics.Its_return_type_0_is_not_a_valid_JSX_element, generateInitialErrorChain)
		}
	} else if refKind == JsxReferenceKindComponent {
		classConstraint := c.getJsxElementClassTypeAt(openingLikeElement)
		if classConstraint != nil {
			// Issue an error if this return type isn't assignable to JSX.ElementClass, failing that
			c.checkTypeRelatedTo(elemInstanceType, classConstraint, c.assignableRelation, openingLikeElement.TagName, Diagnostics.Its_instance_type_0_is_not_a_valid_JSX_element, generateInitialErrorChain)
		}
	} else {
		sfcReturnConstraint := c.getJsxStatelessElementTypeAt(openingLikeElement)
		classConstraint := c.getJsxElementClassTypeAt(openingLikeElement)
		if sfcReturnConstraint == nil || classConstraint == nil {
			return
		}
		combined := c.getUnionType([]*Type{sfcReturnConstraint, classConstraint})
		c.checkTypeRelatedTo(elemInstanceType, combined, c.assignableRelation, openingLikeElement.TagName, Diagnostics.Its_element_type_0_is_not_a_valid_JSX_element, generateInitialErrorChain)
	}

	generateInitialErrorChain := func() DiagnosticMessageChain {
		componentName := getTextOfNode(openingLikeElement.TagName)
		return chainDiagnosticMessages(nil, Diagnostics._0_cannot_be_used_as_a_JSX_component, componentName)
	}

}

/**
 * Get attributes type of the given intrinsic opening-like Jsx element by resolving the tag name.
 * The function is intended to be called from a function which has checked that the opening element is an intrinsic element.
 * @param node an intrinsic JSX opening-like element
 */

func (c *Checker) getIntrinsicAttributesTypeFromJsxOpeningLikeElement(node JsxOpeningLikeElement) *Type {
	Debug.assert(c.isJsxIntrinsicTagName(node.TagName))
	links := c.getNodeLinks(node)
	if links.resolvedJsxElementAttributesType == nil {
		symbol := c.getIntrinsicTagSymbol(node)
		if links.jsxFlags&JsxFlagsIntrinsicNamedElement != 0 {
			links.resolvedJsxElementAttributesType = c.getTypeOfSymbol(symbol) || c.errorType
			return links.resolvedJsxElementAttributesType
		} else if links.jsxFlags&JsxFlagsIntrinsicIndexedElement != 0 {
			var propName string
			if isJsxNamespacedName(node.TagName) {
				propName = getEscapedTextOfJsxNamespacedName(node.TagName)
			} else {
				propName = node.TagName.EscapedText
			}
			links.resolvedJsxElementAttributesType = c.getApplicableIndexInfoForName(c.getJsxType(JsxNames.IntrinsicElements, node), propName). /* ? */ type_ || c.errorType
			return links.resolvedJsxElementAttributesType
		} else {
			links.resolvedJsxElementAttributesType = c.errorType
			return links.resolvedJsxElementAttributesType
		}
	}
	return links.resolvedJsxElementAttributesType
}

func (c *Checker) getJsxElementClassTypeAt(location *ast.Node) *Type {
	t := c.getJsxType(JsxNames.ElementClass, location)
	if c.isErrorType(t) {
		return nil
	}
	return t
}

func (c *Checker) getJsxElementTypeAt(location *ast.Node) *Type {
	return c.getJsxType(JsxNames.Element, location)
}

func (c *Checker) getJsxStatelessElementTypeAt(location *ast.Node) *Type {
	jsxElementType := c.getJsxElementTypeAt(location)
	if jsxElementType {
		return c.getUnionType([]*Type{jsxElementType, c.nullType})
	}
}

func (c *Checker) getJsxElementTypeTypeAt(location *ast.Node) *Type {
	ns := c.getJsxNamespaceAt(location)
	if !ns {
		return nil
	}
	sym := c.getJsxElementTypeSymbol(ns)
	if sym == nil {
		return nil
	}
	t := c.instantiateAliasOrInterfaceWithDefaults(sym, isInJSFile(location))
	if !(t) || c.isErrorType(t) {
		return nil
	}
	return t
}

func (c *Checker) instantiateAliasOrInterfaceWithDefaults(managedSym *ast.Symbol, inJs bool, typeArguments []*Type) *Type {
	declaredManagedType := c.getDeclaredTypeOfSymbol(managedSym)
	// fetches interface type, or initializes symbol links type parmaeters
	if managedSym.Flags&ast.SymbolFlagsTypeAlias != 0 {
		params := c.getSymbolLinks(managedSym).typeParameters
		if length(params) >= typeArguments.length {
			args := c.fillMissingTypeArguments(typeArguments, params, typeArguments.length, inJs)
			if length(args) == 0 {
				return declaredManagedType
			} else {
				return c.getTypeAliasInstantiation(managedSym, args)
			}
		}
	}
	if length(declaredManagedType.AsGenericType().typeParameters) >= typeArguments.length {
		args := c.fillMissingTypeArguments(typeArguments, declaredManagedType.AsGenericType().typeParameters, typeArguments.length, inJs)
		return c.createTypeReference(declaredManagedType.AsGenericType(), args)
	}
	return nil
}

/**
 * Returns all the properties of the Jsx.IntrinsicElements interface
 */

func (c *Checker) getJsxIntrinsicTagNamesAt(location *ast.Node) []*ast.Symbol {
	intrinsics := c.getJsxType(JsxNames.IntrinsicElements, location)
	if intrinsics {
		return c.getPropertiesOfType(intrinsics)
	} else {
		return emptyArray
	}
}

func (c *Checker) checkJsxPreconditions(errorNode *ast.Node) {
	// Preconditions for using JSX
	if (c.compilerOptions.jsx || JsxEmitNone) == JsxEmitNone {
		c.error(errorNode, Diagnostics.Cannot_use_JSX_unless_the_jsx_flag_is_provided)
	}

	if c.getJsxElementTypeAt(errorNode) == nil {
		if c.noImplicitAny {
			c.error(errorNode, Diagnostics.JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist)
		}
	}
}

func (c *Checker) checkJsxOpeningLikeElementOrOpeningFragment(node Union[JsxOpeningLikeElement, JsxOpeningFragment]) {
	isNodeOpeningLikeElement := isJsxOpeningLikeElement(node)

	if isNodeOpeningLikeElement {
		c.checkGrammarJsxElement(node)
	}

	c.checkJsxPreconditions(node)

	c.markJsxAliasReferenced(node)

	if isNodeOpeningLikeElement {
		jsxOpeningLikeNode := node
		sig := c.getResolvedSignature(jsxOpeningLikeNode)
		c.checkDeprecatedSignature(sig, node)

		elementTypeConstraint := c.getJsxElementTypeTypeAt(jsxOpeningLikeNode)
		if elementTypeConstraint != nil {
			tagName := jsxOpeningLikeNode.TagName
			var tagType *Type
			if c.isJsxIntrinsicTagName(tagName) {
				tagType = c.getStringLiteralType(intrinsicTagNameToString(tagName))
			} else {
				tagType = c.checkExpression(tagName)
			}
			c.checkTypeRelatedTo(tagType, elementTypeConstraint, c.assignableRelation, tagName, Diagnostics.Its_type_0_is_not_a_valid_JSX_element_type, func() DiagnosticMessageChain {
				componentName := getTextOfNode(tagName)
				return chainDiagnosticMessages(nil, Diagnostics._0_cannot_be_used_as_a_JSX_component, componentName)
			})
		} else {
			c.checkJsxReturnAssignableToAppropriateBound(c.getJsxReferenceKind(jsxOpeningLikeNode), c.getReturnTypeOfSignature(sig), jsxOpeningLikeNode)
		}
	}
}

/**
 * Check if a property with the given name is known anywhere in the given type. In an object type, a property
 * is considered known if
 * 1. the object type is empty and the check is for assignability, or
 * 2. if the object type has index signatures, or
 * 3. if the property is actually declared in the object type
 *    (this means that 'toString', for example, is not usually a known property).
 * 4. In a union or intersection type,
 *    a property is considered known if it is known in any constituent type.
 * @param targetType a type to search a given name in
 * @param name a property name to search
 * @param isComparingJsxAttributes a boolean flag indicating whether we are searching in JsxAttributesType
 */

func (c *Checker) isKnownProperty(targetType *Type, name string, isComparingJsxAttributes bool) bool {
	if targetType.flags&TypeFlagsObject != 0 {
		// For backwards compatibility a symbol-named property is satisfied by a string index signature. This
		// is incorrect and inconsistent with element access expressions, where it is an error, so eventually
		// we should remove this exception.
		if c.getPropertyOfObjectType(targetType, name) != nil || c.getApplicableIndexInfoForName(targetType, name) != nil || c.isLateBoundName(name) && c.getIndexInfoOfType(targetType, c.stringType) != nil || isComparingJsxAttributes && c.isHyphenatedJsxName(name) {
			// For JSXAttributes, if the attribute has a hyphenated name, consider that the attribute to be known.
			return true
		}
	}
	if targetType.flags&TypeFlagsSubstitution != 0 {
		return c.isKnownProperty(targetType.AsSubstitutionType().baseType, name, isComparingJsxAttributes)
	}
	if targetType.flags&TypeFlagsUnionOrIntersection != 0 && c.isExcessPropertyCheckTarget(targetType) {
		for _, t := range targetType.AsUnionOrIntersectionType().types {
			if c.isKnownProperty(t, name, isComparingJsxAttributes) {
				return true
			}
		}
	}
	return false
}

func (c *Checker) isExcessPropertyCheckTarget(t *Type) bool {
	return t.flags&TypeFlagsObject != 0 && getObjectFlags(t)&ObjectFlagsObjectLiteralPatternWithComputedProperties == 0 || t.flags&TypeFlagsNonPrimitive != 0 || t.flags&TypeFlagsSubstitution != 0 && c.isExcessPropertyCheckTarget(t.AsSubstitutionType().baseType) || t.flags&TypeFlagsUnion != 0 && core.Some(t.AsUnionType().types, c.isExcessPropertyCheckTarget) || t.flags&TypeFlagsIntersection != 0 && core.Every(t.AsIntersectionType().types, c.isExcessPropertyCheckTarget)
}

func (c *Checker) checkJsxExpression(node JsxExpression, checkMode CheckMode) *Type {
	c.checkGrammarJsxExpression(node)
	if node.Expression != nil {
		t := c.checkExpression(node.Expression, checkMode)
		if node.DotDotDotToken != nil && t != c.anyType && !c.isArrayType(t) {
			c.error(node, Diagnostics.JSX_spread_child_must_be_an_array_type)
		}
		return t
	} else {
		return c.errorType
	}
}

func (c *Checker) getDeclarationNodeFlagsFromSymbol(s *ast.Symbol) NodeFlags {
	if s.ValueDeclaration != nil {
		return c.getCombinedNodeFlagsCached(s.ValueDeclaration)
	} else {
		return 0
	}
}

/**
 * Return whether this symbol is a member of a prototype somewhere
 * Note that this is not tracked well within the compiler, so the answer may be incorrect.
 */

func (c *Checker) isPrototypeProperty(symbol *ast.Symbol) *bool {
	if symbol.Flags&ast.SymbolFlagsMethod != 0 || getCheckFlags(symbol)&ast.CheckFlagsSyntheticMethod != 0 {
		return true
	}
	if isInJSFile(symbol.ValueDeclaration) {
		parent := symbol.ValueDeclaration.Parent
		return parent && isBinaryExpression(parent) && getAssignmentDeclarationKind(parent) == AssignmentDeclarationKindPrototypeProperty
	}
}

/**
 * Check whether the requested property access is valid.
 * Returns true if node is a valid property access, and false otherwise.
 * @param node The node to be checked.
 * @param isSuper True if the access is from `super.`.
 * @param type The type of the object whose property is being accessed. (Not the type of the property.)
 * @param prop The symbol for the property being accessed.
 */

func (c *Checker) checkPropertyAccessibility(node Union[PropertyAccessExpression, QualifiedName, PropertyAccessExpression, VariableDeclaration, ParameterDeclaration, ImportTypeNode, PropertyAssignment, ShorthandPropertyAssignment, BindingElement], isSuper bool, writing bool, t *Type, prop *ast.Symbol, reportError bool /*  = true */) bool {
	var errorNode * /* TODO(TS-TO-GO) inferred type ObjectBindingPattern | ArrayBindingPattern | PropertyName | ImportTypeNode */ any
	switch {
	case !reportError:
		errorNode = nil
	case node.Kind == ast.KindQualifiedName:
		errorNode = node.Right
	case node.Kind == ast.KindImportType:
		errorNode = node
	case node.Kind == ast.KindBindingElement && node.PropertyName != nil:
		errorNode = node.PropertyName
	default:
		errorNode = node.Name
	}

	return c.checkPropertyAccessibilityAtLocation(node, isSuper, writing, t, prop, errorNode)
}

/**
 * Check whether the requested property can be accessed at the requested location.
 * Returns true if node is a valid property access, and false otherwise.
 * @param location The location node where we want to check if the property is accessible.
 * @param isSuper True if the access is from `super.`.
 * @param writing True if this is a write property access, false if it is a read property access.
 * @param containingType The type of the object whose property is being accessed. (Not the type of the property.)
 * @param prop The symbol for the property being accessed.
 * @param errorNode The node where we should report an invalid property access error, or undefined if we should not report errors.
 */

func (c *Checker) checkPropertyAccessibilityAtLocation(location *ast.Node, isSuper bool, writing bool, containingType *Type, prop *ast.Symbol, errorNode *ast.Node) bool {
	flags := getDeclarationModifierFlagsFromSymbol(prop, writing)

	if isSuper {
		// TS 1.0 spec (April 2014): 4.8.2
		// - In a constructor, instance member function, instance member accessor, or
		//   instance member variable initializer where this references a derived class instance,
		//   a super property access is permitted and must specify a public instance member function of the base class.
		// - In a static member function or static member accessor
		//   where this references the constructor function object of a derived class,
		//   a super property access is permitted and must specify a public static member function of the base class.
		if c.languageVersion < ScriptTargetES2015 {
			if c.symbolHasNonMethodDeclaration(prop) {
				if errorNode != nil {
					c.error(errorNode, Diagnostics.Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword)
				}
				return false
			}
		}
		if flags&ast.ModifierFlagsAbstract != 0 {
			// A method cannot be accessed in a super property access if the method is abstract.
			// This error could mask a private property access error. But, a member
			// cannot simultaneously be private and abstract, so this will trigger an
			// additional error elsewhere.
			if errorNode != nil {
				c.error(errorNode, Diagnostics.Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression, c.symbolToString(prop), c.typeToString(c.getDeclaringClass(prop)))
			}
			return false
		}
		// A class field cannot be accessed via super.* from a derived class.
		// This is true for both [[Set]] (old) and [[Define]] (ES spec) semantics.
		if flags&ast.ModifierFlagsStatic == 0 && prop.Declarations. /* ? */ some(isClassInstanceProperty) {
			if errorNode != nil {
				c.error(errorNode, Diagnostics.Class_field_0_defined_by_the_parent_class_is_not_accessible_in_the_child_class_via_super, c.symbolToString(prop))
			}
			return false
		}
	}

	// Referencing abstract properties within their own constructors is not allowed
	if (flags&ast.ModifierFlagsAbstract != 0) && c.symbolHasNonMethodDeclaration(prop) && (isThisProperty(location) || isThisInitializedObjectBindingExpression(location) || isObjectBindingPattern(location.Parent) && isThisInitializedDeclaration(location.Parent.Parent)) {
		declaringClassDeclaration := getClassLikeDeclarationOfSymbol(c.getParentOfSymbol(prop))
		if declaringClassDeclaration != nil && c.isNodeUsedDuringClassInitialization(location) {
			if errorNode != nil {
				c.error(errorNode, Diagnostics.Abstract_property_0_in_class_1_cannot_be_accessed_in_the_constructor, c.symbolToString(prop), getTextOfIdentifierOrLiteral(declaringClassDeclaration.Name))
			}
			return false
		}
	}

	// Public properties are otherwise accessible.
	if flags&ast.ModifierFlagsNonPublicAccessibilityModifier == 0 {
		return true
	}

	// Property is known to be private or protected at this point

	// Private property is accessible if the property is within the declaring class
	if flags&ast.ModifierFlagsPrivate != 0 {
		declaringClassDeclaration := getClassLikeDeclarationOfSymbol(c.getParentOfSymbol(prop))
		if !c.isNodeWithinClass(location, declaringClassDeclaration) {
			if errorNode != nil {
				c.error(errorNode, Diagnostics.Property_0_is_private_and_only_accessible_within_class_1, c.symbolToString(prop), c.typeToString(c.getDeclaringClass(prop)))
			}
			return false
		}
		return true
	}

	// Property is known to be protected at this point

	// All protected properties of a supertype are accessible in a super access
	if isSuper {
		return true
	}

	// Find the first enclosing class that has the declaring classes of the protected constituents
	// of the property as base classes
	enclosingClass := c.forEachEnclosingClass(location, func(enclosingDeclaration ClassLikeDeclaration) *InterfaceType {
		enclosingClass := c.getDeclaredTypeOfSymbol(c.getSymbolOfDeclaration(enclosingDeclaration)).AsInterfaceType()
		return c.isClassDerivedFromDeclaringClasses(enclosingClass, prop, writing)
	})
	// A protected property is accessible if the property is within the declaring class or classes derived from it
	if enclosingClass == nil {
		// allow PropertyAccessibility if context is in function with this parameter
		// static member access is disallowed
		enclosingClass = c.getEnclosingClassFromThisParameter(location)
		enclosingClass = enclosingClass && c.isClassDerivedFromDeclaringClasses(enclosingClass, prop, writing)
		if flags&ast.ModifierFlagsStatic != 0 || enclosingClass == nil {
			if errorNode != nil {
				c.error(errorNode, Diagnostics.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses, c.symbolToString(prop), c.typeToString(c.getDeclaringClass(prop) || containingType))
			}
			return false
		}
	}
	// No further restrictions for static properties
	if flags&ast.ModifierFlagsStatic != 0 {
		return true
	}
	if containingType.flags&TypeFlagsTypeParameter != 0 {
		// get the original type -- represented as the type constraint of the 'this' type
		if containingType.AsTypeParameter().isThisType {
			containingType = c.getConstraintOfTypeParameter(containingType.AsTypeParameter())
		} else {
			containingType = c.getBaseConstraintOfType(containingType.AsTypeParameter())
		}
		// TODO: GH#18217 Use a different variable that's allowed to be undefined
	}
	if !containingType || !c.hasBaseType(containingType, enclosingClass) {
		if errorNode != nil {
			c.error(errorNode, Diagnostics.Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1_This_is_an_instance_of_class_2, c.symbolToString(prop), c.typeToString(enclosingClass), c.typeToString(containingType))
		}
		return false
	}
	return true
}

func (c *Checker) getEnclosingClassFromThisParameter(node *ast.Node) *InterfaceType {
	// 'this' type for a node comes from, in priority order...
	// 1. The type of a syntactic 'this' parameter in the enclosing function scope
	thisParameter := c.getThisParameterFromNodeContext(node)
	thisType := thisParameter. /* ? */ type_ && c.getTypeFromTypeNode(thisParameter.Type_)
	if thisType != nil {
		// 2. The constraint of a type parameter used for an explicit 'this' parameter
		if thisType.flags&TypeFlagsTypeParameter != 0 {
			thisType = c.getConstraintOfTypeParameter(thisType.AsTypeParameter())
		}
	} else {
		// 3. The 'this' parameter of a contextual type
		thisContainer := getThisContainer(node, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)
		if isFunctionLike(thisContainer) {
			thisType = c.getContextualThisParameterType(thisContainer)
		}
	}
	if thisType != nil && getObjectFlags(thisType)&(ObjectFlagsClassOrInterface|ObjectFlagsReference) != 0 {
		return c.getTargetType(thisType).AsInterfaceType()
	}
	return nil
}

func (c *Checker) getThisParameterFromNodeContext(node *ast.Node) *ParameterDeclaration {
	thisContainer := getThisContainer(node, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)
	if thisContainer && isFunctionLike(thisContainer) {
		return getThisParameter(thisContainer)
	} else {
		return nil
	}
}

func (c *Checker) symbolHasNonMethodDeclaration(symbol *ast.Symbol) bool {
	return c.forEachProperty(symbol, func(prop *ast.Symbol) bool {
		return prop.Flags&ast.SymbolFlagsMethod == 0
	})
}

func (c *Checker) checkNonNullExpression(node Union[Expression, QualifiedName]) *Type {
	return c.checkNonNullType(c.checkExpression(node), node)
}

func (c *Checker) isNullableType(t *Type) bool {
	return c.hasTypeFacts(t, TypeFactsIsUndefinedOrNull)
}

func (c *Checker) getNonNullableTypeIfNeeded(t *Type) *Type {
	if c.isNullableType(t) {
		return c.getNonNullableType(t)
	} else {
		return t
	}
}

func (c *Checker) reportObjectPossiblyNullOrUndefinedError(node *ast.Node, facts TypeFacts) {
	var nodeText *string
	if isEntityNameExpression(node) {
		nodeText = entityNameToString(node)
	} else {
		nodeText = nil
	}
	if node.Kind == ast.KindNullKeyword {
		c.error(node, Diagnostics.The_value_0_cannot_be_used_here, "null")
		return
	}
	if nodeText != nil && nodeText.length < 100 {
		if isIdentifier(node) && nodeText == "undefined" {
			c.error(node, Diagnostics.The_value_0_cannot_be_used_here, "undefined")
			return
		}
		c.error(node, ifElse(facts&TypeFactsIsUndefined != 0, ifElse(facts&TypeFactsIsNull != 0, Diagnostics._0_is_possibly_null_or_undefined, Diagnostics._0_is_possibly_undefined), Diagnostics._0_is_possibly_null), nodeText)
	} else {
		c.error(node, ifElse(facts&TypeFactsIsUndefined != 0, ifElse(facts&TypeFactsIsNull != 0, Diagnostics.Object_is_possibly_null_or_undefined, Diagnostics.Object_is_possibly_undefined), Diagnostics.Object_is_possibly_null))
	}
}

func (c *Checker) reportCannotInvokePossiblyNullOrUndefinedError(node *ast.Node, facts TypeFacts) {
	c.error(node, ifElse(facts&TypeFactsIsUndefined != 0, ifElse(facts&TypeFactsIsNull != 0, Diagnostics.Cannot_invoke_an_object_which_is_possibly_null_or_undefined, Diagnostics.Cannot_invoke_an_object_which_is_possibly_undefined), Diagnostics.Cannot_invoke_an_object_which_is_possibly_null))
}

func (c *Checker) checkNonNullTypeWithReporter(type_ *Type, node *ast.Node, reportError func(node *ast.Node, facts TypeFacts)) *Type {
	if c.strictNullChecks && type_.flags&TypeFlagsUnknown != 0 {
		if isEntityNameExpression(node) {
			nodeText := entityNameToString(node)
			if nodeText.length < 100 {
				c.error(node, Diagnostics._0_is_of_type_unknown, nodeText)
				return c.errorType
			}
		}
		c.error(node, Diagnostics.Object_is_of_type_unknown)
		return c.errorType
	}
	facts := c.getTypeFacts(type_, TypeFactsIsUndefinedOrNull)
	if facts&TypeFactsIsUndefinedOrNull != 0 {
		reportError(node, facts)
		t := c.getNonNullableType(type_)
		if t.flags&(TypeFlagsNullable|TypeFlagsNever) != 0 {
			return c.errorType
		} else {
			return t
		}
	}
	return type_
}

func (c *Checker) checkNonNullType(t *Type, node *ast.Node) *Type {
	return c.checkNonNullTypeWithReporter(t, node, c.reportObjectPossiblyNullOrUndefinedError)
}

func (c *Checker) checkNonNullNonVoidType(t *Type, node *ast.Node) *Type {
	nonNullType := c.checkNonNullType(t, node)
	if nonNullType.flags&TypeFlagsVoid != 0 {
		if isEntityNameExpression(node) {
			nodeText := entityNameToString(node)
			if isIdentifier(node) && nodeText == "undefined" {
				c.error(node, Diagnostics.The_value_0_cannot_be_used_here, nodeText)
				return nonNullType
			}
			if nodeText.length < 100 {
				c.error(node, Diagnostics._0_is_possibly_undefined, nodeText)
				return nonNullType
			}
		}
		c.error(node, Diagnostics.Object_is_possibly_undefined)
	}
	return nonNullType
}

func (c *Checker) checkPropertyAccessExpression(node PropertyAccessExpression, checkMode *CheckMode, writeOnly bool) *Type {
	if node.Flags&ast.NodeFlagsOptionalChain != 0 {
		return c.checkPropertyAccessChain(node.AsPropertyAccessChain(), checkMode)
	} else {
		return c.checkPropertyAccessExpressionOrQualifiedName(node, node.Expression, c.checkNonNullExpression(node.Expression), node.Name, checkMode, writeOnly)
	}
}

func (c *Checker) checkPropertyAccessChain(node PropertyAccessChain, checkMode *CheckMode) *Type {
	leftType := c.checkExpression(node.Expression)
	nonOptionalType := c.getOptionalExpressionType(leftType, node.Expression)
	return c.propagateOptionalTypeMarker(c.checkPropertyAccessExpressionOrQualifiedName(node, node.Expression, c.checkNonNullType(nonOptionalType, node.Expression), node.Name, checkMode), node, nonOptionalType != leftType)
}

func (c *Checker) checkQualifiedName(node QualifiedName, checkMode *CheckMode) *Type {
	var leftType *Type
	if isPartOfTypeQuery(node) && isThisIdentifier(node.Left) {
		leftType = c.checkNonNullType(c.checkThisExpression(node.Left), node.Left)
	} else {
		leftType = c.checkNonNullExpression(node.Left)
	}
	return c.checkPropertyAccessExpressionOrQualifiedName(node, node.Left, leftType, node.Right, checkMode)
}

func (c *Checker) isMethodAccessForCall(node *ast.Node) bool {
	for node.Parent.Kind == ast.KindParenthesizedExpression {
		node = node.Parent
	}
	return isCallOrNewExpression(node.Parent) && node.Parent.Expression == node
}

// Lookup the private identifier lexically.
func (c *Checker) lookupSymbolForPrivateIdentifierDeclaration(propName string, location *ast.Node) *ast.Symbol {
	for containingClass := getContainingClassExcludingClassDecorators(location); containingClass != nil; containingClass = getContainingClass(containingClass) {
		TODO_IDENTIFIER := containingClass
		name := getSymbolNameForPrivateIdentifier(symbol, propName)
		prop := (symbol.Members && symbol.Members.get(name)) || (symbol.Exports && symbol.Exports.get(name))
		if prop != nil {
			return prop
		}
	}
}

func (c *Checker) checkGrammarPrivateIdentifierExpression(privId PrivateIdentifier) bool {
	if getContainingClass(privId) == nil {
		return c.grammarErrorOnNode(privId, Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies)
	}

	if !isForInStatement(privId.Parent) {
		if !isExpressionNode(privId) {
			return c.grammarErrorOnNode(privId, Diagnostics.Private_identifiers_are_only_allowed_in_class_bodies_and_may_only_be_used_as_part_of_a_class_member_declaration_property_access_or_on_the_left_hand_side_of_an_in_expression)
		}

		isInOperation := isBinaryExpression(privId.Parent) && privId.Parent.OperatorToken.Kind == ast.KindInKeyword
		if c.getSymbolForPrivateIdentifierExpression(privId) == nil && !isInOperation {
			return c.grammarErrorOnNode(privId, Diagnostics.Cannot_find_name_0, idText(privId))
		}
	}

	return false
}

func (c *Checker) checkPrivateIdentifierExpression(privId PrivateIdentifier) *Type {
	c.checkGrammarPrivateIdentifierExpression(privId)
	symbol := c.getSymbolForPrivateIdentifierExpression(privId)
	if symbol != nil {
		c.markPropertyAsReferenced(symbol, nil /*nodeForCheckWriteOnly*/, false /*isSelfTypeAccess*/)
	}
	return c.anyType
}

func (c *Checker) getSymbolForPrivateIdentifierExpression(privId PrivateIdentifier) *ast.Symbol {
	if !isExpressionNode(privId) {
		return nil
	}

	links := c.getNodeLinks(privId)
	if links.resolvedSymbol == nil {
		links.resolvedSymbol = c.lookupSymbolForPrivateIdentifierDeclaration(privId.EscapedText, privId)
	}
	return links.resolvedSymbol
}

func (c *Checker) getPrivateIdentifierPropertyOfType(leftType *Type, lexicallyScopedIdentifier *ast.Symbol) *ast.Symbol {
	return c.getPropertyOfType(leftType, lexicallyScopedIdentifier.EscapedName)
}

func (c *Checker) checkPrivateIdentifierPropertyAccess(leftType *Type, right PrivateIdentifier, lexicallyScopedIdentifier *ast.Symbol) bool {
	// Either the identifier could not be looked up in the lexical scope OR the lexically scoped identifier did not exist on the type.
	// Find a private identifier with the same description on the type.
	var propertyOnType *ast.Symbol
	properties := c.getPropertiesOfType(leftType)
	if properties {
		forEach(properties, func(symbol *ast.Symbol) *true {
			decl := symbol.ValueDeclaration
			if decl != nil && isNamedDeclaration(decl) && isPrivateIdentifier(decl.Name) && decl.Name.EscapedText == right.EscapedText {
				propertyOnType = symbol
				return true
			}
		})
	}
	diagName := c.diagnosticName(right)
	if propertyOnType != nil {
		typeValueDecl := Debug.checkDefined(propertyOnType.ValueDeclaration)
		typeClass := Debug.checkDefined(getContainingClass(typeValueDecl))
		// We found a private identifier property with the same description.
		// Either:
		// - There is a lexically scoped private identifier AND it shadows the one we found on the type.
		// - It is an attempt to access the private identifier outside of the class.
		if lexicallyScopedIdentifier. /* ? */ valueDeclaration != nil {
			lexicalValueDecl := lexicallyScopedIdentifier.ValueDeclaration
			lexicalClass := getContainingClass(lexicalValueDecl)
			Debug.assert(lexicalClass != nil)
			if findAncestor(lexicalClass, func(n *ast.Node) bool {
				return typeClass == n
			}) != nil {
				diagnostic := c.error(right, Diagnostics.The_property_0_cannot_be_accessed_on_type_1_within_this_class_because_it_is_shadowed_by_another_private_identifier_with_the_same_spelling, diagName, c.typeToString(leftType))

				addRelatedInfo(diagnostic, createDiagnosticForNode(lexicalValueDecl, Diagnostics.The_shadowing_declaration_of_0_is_defined_here, diagName), createDiagnosticForNode(typeValueDecl, Diagnostics.The_declaration_of_0_that_you_probably_intended_to_use_is_defined_here, diagName))
				return true
			}
		}
		c.error(right, Diagnostics.Property_0_is_not_accessible_outside_class_1_because_it_has_a_private_identifier, diagName, c.diagnosticName(typeClass.Name || anon))
		return true
	}
	return false
}

func (c *Checker) isThisPropertyAccessInConstructor(node Union[ElementAccessExpression, PropertyAccessExpression, QualifiedName], prop *ast.Symbol) *bool {
	return (c.isConstructorDeclaredProperty(prop) || isThisProperty(node) && c.isAutoTypedProperty(prop)) && getThisContainer(node, true /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/) == c.getDeclaringConstructor(prop)
}

func (c *Checker) checkPropertyAccessExpressionOrQualifiedName(node Union[PropertyAccessExpression, QualifiedName], left Union[Expression, QualifiedName], leftType *Type, right Union[Identifier, PrivateIdentifier], checkMode *CheckMode, writeOnly bool) *Type {
	parentSymbol := c.getNodeLinks(left).resolvedSymbol
	assignmentKind := getAssignmentTargetKind(node)
	apparentType := c.getApparentType(ifElse(assignmentKind != AssignmentKindNone || c.isMethodAccessForCall(node), c.getWidenedType(leftType), leftType))
	isAnyLike := c.isTypeAny(apparentType) || apparentType == c.silentNeverType
	var prop *ast.Symbol
	if isPrivateIdentifier(right) {
		if c.languageVersion < LanguageFeatureMinimumTarget.PrivateNamesAndClassStaticBlocks || c.languageVersion < LanguageFeatureMinimumTarget.ClassAndClassElementDecorators || !c.useDefineForClassFields {
			if assignmentKind != AssignmentKindNone {
				c.checkExternalEmitHelpers(node, ExternalEmitHelpersClassPrivateFieldSet)
			}
			if assignmentKind != AssignmentKindDefinite {
				c.checkExternalEmitHelpers(node, ExternalEmitHelpersClassPrivateFieldGet)
			}
		}

		lexicallyScopedSymbol := c.lookupSymbolForPrivateIdentifierDeclaration(right.EscapedText, right)
		if assignmentKind != 0 && lexicallyScopedSymbol != nil && lexicallyScopedSymbol.ValueDeclaration != nil && isMethodDeclaration(lexicallyScopedSymbol.ValueDeclaration) {
			c.grammarErrorOnNode(right, Diagnostics.Cannot_assign_to_private_method_0_Private_methods_are_not_writable, idText(right))
		}
		if isAnyLike {
			if lexicallyScopedSymbol != nil {
				if c.isErrorType(apparentType) {
					return c.errorType
				} else {
					return apparentType
				}
			}
			if getContainingClassExcludingClassDecorators(right) == nil {
				c.grammarErrorOnNode(right, Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies)
				return c.anyType
			}
		}

		prop = lexicallyScopedSymbol && c.getPrivateIdentifierPropertyOfType(leftType, lexicallyScopedSymbol)
		if prop == nil {
			// Check for private-identifier-specific shadowing and lexical-scoping errors.
			if c.checkPrivateIdentifierPropertyAccess(leftType, right, lexicallyScopedSymbol) {
				return c.errorType
			}
			containingClass := getContainingClassExcludingClassDecorators(right)
			if containingClass != nil && isPlainJsFile(getSourceFileOfNode(containingClass), c.compilerOptions.checkJs) {
				c.grammarErrorOnNode(right, Diagnostics.Private_field_0_must_be_declared_in_an_enclosing_class, idText(right))
			}
		} else {
			isSetonlyAccessor := prop.Flags&ast.SymbolFlagsSetAccessor && prop.Flags&ast.SymbolFlagsGetAccessor == 0
			if isSetonlyAccessor && assignmentKind != AssignmentKindDefinite {
				c.error(node, Diagnostics.Private_accessor_was_defined_without_a_getter)
			}
		}
	} else {
		if isAnyLike {
			if isIdentifier(left) && parentSymbol != nil {
				c.markLinkedReferences(node, ReferenceHintProperty, nil /*propSymbol*/, leftType)
			}
			if c.isErrorType(apparentType) {
				return c.errorType
			} else {
				return apparentType
			}
		}
		prop = c.getPropertyOfType(apparentType, right.EscapedText, c.isConstEnumObjectType(apparentType) /*skipObjectFunctionPropertyAugment*/, node.Kind == ast.KindQualifiedName /*includeTypeOnlyMembers*/)
	}
	c.markLinkedReferences(node, ReferenceHintProperty, prop, leftType)

	var propType *Type
	if prop == nil {
		var indexInfo *IndexInfo
		if !isPrivateIdentifier(right) && (assignmentKind == AssignmentKindNone || !c.isGenericObjectType(leftType) || isThisTypeParameter(leftType)) {
			indexInfo = c.getApplicableIndexInfoForName(apparentType, right.EscapedText)
		} else {
			indexInfo = nil
		}
		if !(indexInfo != nil && indexInfo.type_) {
			isUncheckedJS := c.isUncheckedJSSuggestion(node, leftType.symbol, true /*excludeClasses*/)
			if !isUncheckedJS && c.isJSLiteralType(leftType) {
				return c.anyType
			}
			if leftType.symbol == c.globalThisSymbol {
				if c.globalThisSymbol.Exports.has(right.EscapedText) && (c.globalThisSymbol.Exports.get(right.EscapedText).Flags&ast.SymbolFlagsBlockScoped != 0) {
					c.error(right, Diagnostics.Property_0_does_not_exist_on_type_1, unescapeLeadingUnderscores(right.EscapedText), c.typeToString(leftType))
				} else if c.noImplicitAny {
					c.error(right, Diagnostics.Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature, c.typeToString(leftType))
				}
				return c.anyType
			}
			if right.EscapedText && !c.checkAndReportErrorForExtendingInterface(node) {
				c.reportNonexistentProperty(right, ifElse(isThisTypeParameter(leftType), apparentType, leftType), isUncheckedJS)
			}
			return c.errorType
		}
		if indexInfo.isReadonly && (isAssignmentTarget(node) || isDeleteTarget(node)) {
			c.error(node, Diagnostics.Index_signature_in_type_0_only_permits_reading, c.typeToString(apparentType))
		}

		propType = indexInfo.type_
		if c.compilerOptions.noUncheckedIndexedAccess && getAssignmentTargetKind(node) != AssignmentKindDefinite {
			propType = c.getUnionType([]*Type{propType, c.missingType})
		}
		if c.compilerOptions.noPropertyAccessFromIndexSignature && isPropertyAccessExpression(node) {
			c.error(right, Diagnostics.Property_0_comes_from_an_index_signature_so_it_must_be_accessed_with_0, unescapeLeadingUnderscores(right.EscapedText))
		}
		if indexInfo.declaration != nil && c.isDeprecatedDeclaration(indexInfo.declaration) {
			c.addDeprecatedSuggestion(right, []IndexSignatureDeclaration{indexInfo.declaration}, right.EscapedText /* as string */)
		}
	} else {
		targetPropSymbol := c.resolveAliasWithDeprecationCheck(prop, right)
		if c.isDeprecatedSymbol(targetPropSymbol) && c.isUncalledFunctionReference(node, targetPropSymbol) && targetPropSymbol.Declarations != nil {
			c.addDeprecatedSuggestion(right, targetPropSymbol.Declarations, right.EscapedText /* as string */)
		}
		c.checkPropertyNotUsedBeforeDeclaration(prop, node, right)
		c.markPropertyAsReferenced(prop, node, c.isSelfTypeAccess(left, parentSymbol))
		c.getNodeLinks(node).resolvedSymbol = prop
		c.checkPropertyAccessibility(node, left.Kind == ast.KindSuperKeyword, isWriteAccess(node), apparentType, prop)
		if c.isAssignmentToReadonlyEntity(node.AsExpression(), prop, assignmentKind) {
			c.error(right, Diagnostics.Cannot_assign_to_0_because_it_is_a_read_only_property, idText(right))
			return c.errorType
		}

		switch {
		case c.isThisPropertyAccessInConstructor(node, prop):
			propType = c.autoType
		case writeOnly || isWriteOnlyAccess(node):
			propType = c.getWriteTypeOfSymbol(prop)
		default:
			propType = c.getTypeOfSymbol(prop)
		}
	}

	return c.getFlowTypeOfAccessExpression(node, prop, propType, right, checkMode)
}

/**
 * Determines whether a did-you-mean error should be a suggestion in an unchecked JS file.
 * Only applies to unchecked JS files without checkJS, // @ts-check or // @ts-nocheck
 * It does not suggest when the suggestion:
 * - Is from a global file that is different from the reference file, or
 * - (optionally) Is a class, or is a this.x property access expression
 */

func (c *Checker) isUncheckedJSSuggestion(node *ast.Node, suggestion *ast.Symbol, excludeClasses bool) bool {
	file := getSourceFileOfNode(node)
	if file != nil {
		if c.compilerOptions.checkJs == nil && file.CheckJsDirective == nil && (file.ScriptKind == ScriptKindJS || file.ScriptKind == ScriptKindJSX) {
			declarationFile := forEach(suggestion. /* ? */ declarations, getSourceFileOfNode)
			suggestionHasNoExtendsOrDecorators := suggestion. /* ? */ valueDeclaration == nil || !isClassLike(suggestion.ValueDeclaration) || suggestion.ValueDeclaration.HeritageClauses. /* ? */ length || classOrConstructorParameterIsDecorated(false, suggestion.ValueDeclaration)
			return !(file != declarationFile && declarationFile != nil && isGlobalSourceFile(declarationFile)) && !(excludeClasses && suggestion != nil && suggestion.Flags&ast.SymbolFlagsClass != 0 && suggestionHasNoExtendsOrDecorators) && !(node != nil && excludeClasses && isPropertyAccessExpression(node) && node.Expression.Kind == ast.KindThisKeyword && suggestionHasNoExtendsOrDecorators)
		}
	}
	return false
}

func (c *Checker) getFlowTypeOfAccessExpression(node Union[ElementAccessExpression, PropertyAccessExpression, QualifiedName], prop *ast.Symbol, propType *Type, errorNode *ast.Node, checkMode *CheckMode) *Type {
	// Only compute control flow type if this is a property access expression that isn't an
	// assignment target, and the referenced property was declared as a variable, property,
	// accessor, or optional method.
	assignmentKind := getAssignmentTargetKind(node)
	if assignmentKind == AssignmentKindDefinite {
		return c.removeMissingType(propType, prop != nil && prop.Flags&ast.SymbolFlagsOptional != 0)
	}
	if prop != nil && prop.Flags&(ast.SymbolFlagsVariable|ast.SymbolFlagsProperty|ast.SymbolFlagsAccessor) == 0 && !(prop.Flags&ast.SymbolFlagsMethod != 0 && propType.flags&TypeFlagsUnion != 0) && !c.isDuplicatedCommonJSExport(prop.Declarations) {
		return propType
	}
	if propType == c.autoType {
		return c.getFlowTypeOfProperty(node, prop)
	}
	propType = c.getNarrowableTypeForReference(propType, node, checkMode)
	// If strict null checks and strict property initialization checks are enabled, if we have
	// a this.xxx property access, if the property is an instance property without an initializer,
	// and if we are in a constructor of the same class as the property declaration, assume that
	// the property is uninitialized at the top of the control flow.
	assumeUninitialized := false
	if c.strictNullChecks && c.strictPropertyInitialization && isAccessExpression(node) && node.Expression.Kind == ast.KindThisKeyword {
		declaration := prop && prop.ValueDeclaration
		if declaration != nil && c.isPropertyWithoutInitializer(declaration) {
			if !isStatic(declaration) {
				flowContainer := c.getControlFlowContainer(node)
				if flowContainer.Kind == ast.KindConstructor && flowContainer.Parent == declaration.Parent && declaration.Flags&ast.NodeFlagsAmbient == 0 {
					assumeUninitialized = true
				}
			}
		}
	} else if c.strictNullChecks && prop != nil && prop.ValueDeclaration != nil && isPropertyAccessExpression(prop.ValueDeclaration) && getAssignmentDeclarationPropertyAccessKind(prop.ValueDeclaration) != 0 && c.getControlFlowContainer(node) == c.getControlFlowContainer(prop.ValueDeclaration) {
		assumeUninitialized = true
	}
	flowType := c.getFlowTypeOfReference(node, propType, ifElse(assumeUninitialized, c.getOptionalType(propType), propType))
	if assumeUninitialized && !c.containsUndefinedType(propType) && c.containsUndefinedType(flowType) {
		c.error(errorNode, Diagnostics.Property_0_is_used_before_being_assigned, c.symbolToString(prop))
		// Return the declared type to reduce follow-on errors
		return propType
	}
	if assignmentKind {
		return c.getBaseTypeOfLiteralType(flowType)
	} else {
		return flowType
	}
}

func (c *Checker) checkPropertyNotUsedBeforeDeclaration(prop *ast.Symbol, node Union[PropertyAccessExpression, QualifiedName], right Union[Identifier, PrivateIdentifier]) {
	TODO_IDENTIFIER := prop
	if valueDeclaration == nil || getSourceFileOfNode(node).IsDeclarationFile {
		return
	}

	var diagnosticMessage TODO
	declarationName := idText(right)
	if c.isInPropertyInitializerOrClassStaticBlock(node) && !c.isOptionalPropertyDeclaration(valueDeclaration) && !(isAccessExpression(node) && isAccessExpression(node.Expression)) && !c.isBlockScopedNameDeclaredBeforeUse(valueDeclaration, right) && !(isMethodDeclaration(valueDeclaration) && c.getCombinedModifierFlagsCached(valueDeclaration)&ast.ModifierFlagsStatic != 0) && (c.useDefineForClassFields || !c.isPropertyDeclaredInAncestorClass(prop)) {
		diagnosticMessage = c.error(right, Diagnostics.Property_0_is_used_before_its_initialization, declarationName)
	} else if valueDeclaration.Kind == ast.KindClassDeclaration && node.Parent.Kind != ast.KindTypeReference && valueDeclaration.Flags&ast.NodeFlagsAmbient == 0 && !c.isBlockScopedNameDeclaredBeforeUse(valueDeclaration, right) {
		diagnosticMessage = c.error(right, Diagnostics.Class_0_used_before_its_declaration, declarationName)
	}

	if diagnosticMessage != nil {
		addRelatedInfo(diagnosticMessage, createDiagnosticForNode(valueDeclaration, Diagnostics._0_is_declared_here, declarationName))
	}
}

func (c *Checker) isInPropertyInitializerOrClassStaticBlock(node *ast.Node) bool {
	return findAncestor(node, func(node *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
		switch node.Kind {
		case ast.KindPropertyDeclaration:
			return true
		case ast.KindPropertyAssignment,
			ast.KindMethodDeclaration,
			ast.KindGetAccessor,
			ast.KindSetAccessor,
			ast.KindSpreadAssignment,
			ast.KindComputedPropertyName,
			ast.KindTemplateSpan,
			ast.KindJsxExpression,
			ast.KindJsxAttribute,
			ast.KindJsxAttributes,
			ast.KindJsxSpreadAttribute,
			ast.KindJsxOpeningElement,
			ast.KindExpressionWithTypeArguments,
			ast.KindHeritageClause:
			return false
		case ast.KindArrowFunction,
			ast.KindExpressionStatement:
			if isBlock(node.Parent) && isClassStaticBlockDeclaration(node.Parent.Parent) {
				return true
			} else {
				return "quit"
			}
		default:
			if isExpressionNode(node) {
				return false
			} else {
				return "quit"
			}
		}
	}) != nil
}

/**
 * It's possible that "prop.valueDeclaration" is a local declaration, but the property was also declared in a superclass.
 * In that case we won't consider it used before its declaration, because it gets its value from the superclass' declaration.
 */

func (c *Checker) isPropertyDeclaredInAncestorClass(prop *ast.Symbol) bool {
	if prop.Parent.Flags&ast.SymbolFlagsClass == 0 {
		return false
	}
	var classType *InterfaceType = c.getTypeOfSymbol(prop.Parent).AsInterfaceType()
	for true {
		classType = classType.symbol && c.getSuperClass(classType) /* as InterfaceType | undefined */
		if classType == nil {
			return false
		}
		superProperty := c.getPropertyOfType(classType, prop.EscapedName)
		if superProperty != nil && superProperty.ValueDeclaration != nil {
			return true
		}
	}
}

func (c *Checker) getSuperClass(classType InterfaceType) *Type {
	x := c.getBaseTypes(classType)
	if x.length == 0 {
		return nil
	}
	return c.getIntersectionType(x)
}

func (c *Checker) reportNonexistentProperty(propNode Union[Identifier, PrivateIdentifier], containingType *Type, isUncheckedJS bool) {
	var errorInfo *DiagnosticMessageChain
	var relatedInfo *Diagnostic
	if !isPrivateIdentifier(propNode) && containingType.flags&TypeFlagsUnion != 0 && containingType.flags&TypeFlagsPrimitive == 0 {
		for _, subtype := range containingType.AsUnionType().types {
			if c.getPropertyOfType(subtype, propNode.EscapedText) == nil && c.getApplicableIndexInfoForName(subtype, propNode.EscapedText) == nil {
				errorInfo = chainDiagnosticMessages(errorInfo, Diagnostics.Property_0_does_not_exist_on_type_1, declarationNameToString(propNode), c.typeToString(subtype))
				break
			}
		}
	}
	if c.typeHasStaticProperty(propNode.EscapedText, containingType) {
		propName := declarationNameToString(propNode)
		typeName := c.typeToString(containingType)
		errorInfo = chainDiagnosticMessages(errorInfo, Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_to_access_the_static_member_2_instead, propName, typeName, typeName+"."+propName)
	} else {
		promisedType := c.getPromisedTypeOfPromise(containingType)
		if promisedType != nil && c.getPropertyOfType(promisedType, propNode.EscapedText) != nil {
			errorInfo = chainDiagnosticMessages(errorInfo, Diagnostics.Property_0_does_not_exist_on_type_1, declarationNameToString(propNode), c.typeToString(containingType))
			relatedInfo = createDiagnosticForNode(propNode, Diagnostics.Did_you_forget_to_use_await)
		} else {
			missingProperty := declarationNameToString(propNode)
			container := c.typeToString(containingType)
			libSuggestion := c.getSuggestedLibForNonExistentProperty(missingProperty, containingType)
			if libSuggestion != nil {
				errorInfo = chainDiagnosticMessages(errorInfo, Diagnostics.Property_0_does_not_exist_on_type_1_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_2_or_later, missingProperty, container, libSuggestion)
			} else {
				suggestion := c.getSuggestedSymbolForNonexistentProperty(propNode, containingType)
				if suggestion != nil {
					suggestedName := symbolName(suggestion)
					var message any
					if isUncheckedJS {
						message = Diagnostics.Property_0_may_not_exist_on_type_1_Did_you_mean_2
					} else {
						message = Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_2
					}
					errorInfo = chainDiagnosticMessages(errorInfo, message, missingProperty, container, suggestedName)
					relatedInfo = suggestion.ValueDeclaration && createDiagnosticForNode(suggestion.ValueDeclaration, Diagnostics._0_is_declared_here, suggestedName)
				} else {
					var diagnostic any
					if c.containerSeemsToBeEmptyDomElement(containingType) {
						diagnostic = Diagnostics.Property_0_does_not_exist_on_type_1_Try_changing_the_lib_compiler_option_to_include_dom
					} else {
						diagnostic = Diagnostics.Property_0_does_not_exist_on_type_1
					}
					errorInfo = chainDiagnosticMessages(c.elaborateNeverIntersection(errorInfo, containingType), diagnostic, missingProperty, container)
				}
			}
		}
	}
	resultDiagnostic := createDiagnosticForNodeFromMessageChain(getSourceFileOfNode(propNode), propNode, errorInfo)
	if relatedInfo != nil {
		addRelatedInfo(resultDiagnostic, relatedInfo)
	}
	c.addErrorOrSuggestion(!isUncheckedJS || errorInfo.code != Diagnostics.Property_0_may_not_exist_on_type_1_Did_you_mean_2.code, resultDiagnostic)
}

func (c *Checker) containerSeemsToBeEmptyDomElement(containingType *Type) *bool {
	return (c.compilerOptions.lib && !c.compilerOptions.lib.includes("dom")) && c.everyContainedType(containingType, func(t *Type) bool {
		return t.symbol && regexp.MustParse(`^(?:EventTarget|Node|(?:HTML[a-zA-Z]*)?Element)$`).test(unescapeLeadingUnderscores(t.symbol.EscapedName))
	}) && c.isEmptyObjectType(containingType)
}

func (c *Checker) typeHasStaticProperty(propName string, containingType *Type) bool {
	prop := containingType.symbol && c.getPropertyOfType(c.getTypeOfSymbol(containingType.symbol), propName)
	return prop != nil && prop.ValueDeclaration != nil && isStatic(prop.ValueDeclaration)
}

func (c *Checker) getSuggestedLibForNonExistentName(name Union[string, Identifier]) *string {
	missingName := c.diagnosticName(name)
	allFeatures := getScriptTargetFeatures()
	typeFeatures := allFeatures.get(missingName)
	return typeFeatures && firstIterator(typeFeatures.keys())
}

func (c *Checker) getSuggestedLibForNonExistentProperty(missingProperty string, containingType *Type) *string {
	container := c.getApparentType(containingType).symbol
	if !container {
		return nil
	}
	containingTypeName := symbolName(container)
	allFeatures := getScriptTargetFeatures()
	typeFeatures := allFeatures.get(containingTypeName)
	if typeFeatures != nil {
		for _, TODO_IDENTIFIER := range typeFeatures {
			if contains(featuresOfType, missingProperty) {
				return libTarget
			}
		}
	}
}

func (c *Checker) getSuggestedSymbolForNonexistentClassMember(name string, baseType *Type) *ast.Symbol {
	return c.getSpellingSuggestionForName(name, c.getPropertiesOfType(baseType), ast.SymbolFlagsClassMember)
}

func (c *Checker) getSuggestedSymbolForNonexistentProperty(name Union[Identifier, PrivateIdentifier, string], containingType *Type) *ast.Symbol {
	props := c.getPropertiesOfType(containingType)
	if /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof name */ TODO != "string" {
		parent := name.Parent
		if isPropertyAccessExpression(parent) {
			props = core.Filter(props, func(prop *ast.Symbol) bool {
				return c.isValidPropertyAccessForCompletions(parent, containingType, prop)
			})
		}
		name = idText(name)
	}
	return c.getSpellingSuggestionForName(name, props, ast.SymbolFlagsValue)
}

func (c *Checker) getSuggestedSymbolForNonexistentJSXAttribute(name Union[Identifier, PrivateIdentifier, string], containingType *Type) *ast.Symbol {
	var strName string
	if isString(name) {
		strName = name
	} else {
		strName = idText(name)
	}
	properties := c.getPropertiesOfType(containingType)
	var jsxSpecific *ast.Symbol
	switch {
	case strName == "for":
		jsxSpecific = core.Find(properties, func(x *ast.Symbol) bool {
			return symbolName(x) == "htmlFor"
		})
	case strName == "class":
		jsxSpecific = core.Find(properties, func(x *ast.Symbol) bool {
			return symbolName(x) == "className"
		})
	default:
		jsxSpecific = nil
	}
	return ifNotNilElse(jsxSpecific, c.getSpellingSuggestionForName(strName, properties, ast.SymbolFlagsValue))
}

func (c *Checker) getSuggestionForNonexistentProperty(name Union[Identifier, PrivateIdentifier, string], containingType *Type) *string {
	suggestion := c.getSuggestedSymbolForNonexistentProperty(name, containingType)
	return suggestion && symbolName(suggestion)
}

func (c *Checker) getSuggestionForSymbolNameLookup(symbols SymbolTable, name string, meaning SymbolFlags) *ast.Symbol {
	symbol := c.getSymbol(symbols, name, meaning)
	// Sometimes the symbol is found when location is a return type of a function: `typeof x` and `x` is declared in the body of the function
	// So the table *contains* `x` but `x` isn't actually in scope.
	// However, resolveNameHelper will continue and call this callback again, so we'll eventually get a correct suggestion.
	if symbol != nil {
		return symbol
	}
	var candidates []*ast.Symbol
	if symbols == c.globals {
		primitives := mapDefined([]string{"string", "number", "boolean", "object", "bigint", "symbol"}, func(s string) *ast.Symbol {
			if symbols.has((s.charAt(0).toUpperCase() + s.slice(1)).(string)) {
				return c.createSymbol(ast.SymbolFlagsTypeAlias, s.(string)).(*ast.Symbol)
			} else {
				return nil
			}
		})
		candidates = primitives.concat(arrayFrom(symbols.values()))
	} else {
		candidates = arrayFrom(symbols.values())
	}
	return c.getSpellingSuggestionForName(unescapeLeadingUnderscores(name), candidates, meaning)
}

func (c *Checker) getSuggestedSymbolForNonexistentSymbol(location *ast.Node, outerName string, meaning SymbolFlags) *ast.Symbol {
	Debug.assert(outerName != nil, "outername should always be defined")
	result := c.resolveNameForSymbolSuggestion(location, outerName, meaning, nil /*nameNotFoundMessage*/, false /*isUse*/, false /*excludeGlobals*/)
	return result
}

func (c *Checker) getSuggestedSymbolForNonexistentModule(name Identifier, targetModule *ast.Symbol) *ast.Symbol {
	return targetModule.Exports && c.getSpellingSuggestionForName(idText(name), c.getExportsOfModuleAsArray(targetModule), ast.SymbolFlagsModuleMember)
}

func (c *Checker) getSuggestionForNonexistentIndexSignature(objectType *Type, expr ElementAccessExpression, keyedType *Type) *string {
	// check if object type has setter or getter
	hasProp := func(name Union[ /* TODO(TS-TO-GO) TypeNode LiteralType: "set" */ any /* TODO(TS-TO-GO) TypeNode LiteralType: "get" */, any]) bool {
		prop := c.getPropertyOfObjectType(objectType, name.(string))
		if prop != nil {
			s := c.getSingleCallSignature(c.getTypeOfSymbol(prop))
			return s != nil && c.getMinArgumentCount(s) >= 1 && c.isTypeAssignableTo(keyedType, c.getTypeAtPosition(s, 0))
		}
		return false
	}

	var suggestedMethod /* TODO(TS-TO-GO) inferred type "set" | "get" */ any
	if isAssignmentTarget(expr) {
		suggestedMethod = "set"
	} else {
		suggestedMethod = "get"
	}
	if !hasProp(suggestedMethod) {
		return nil
	}

	suggestion := tryGetPropertyAccessOrIdentifierToString(expr.Expression)
	if suggestion == nil {
		suggestion = suggestedMethod
	} else {
		suggestion += "." + suggestedMethod
	}

	return suggestion
}

func (c *Checker) getSuggestedTypeForNonexistentStringLiteralType(source StringLiteralType, target UnionType) *StringLiteralType {
	candidates := target.types.filter(func(t *Type) bool {
		return t.flags&TypeFlagsStringLiteral != 0
	})
	return getSpellingSuggestion(source.value, candidates, func(t StringLiteralType) string {
		return t.value
	})
}

/**
 * Given a name and a list of symbols whose names are *not* equal to the name, return a spelling suggestion if there is one that is close enough.
 * Names less than length 3 only check for case-insensitive equality, not levenshtein distance.
 *
 * If there is a candidate that's the same except for case, return that.
 * If there is a candidate that's within one edit of the name, return that.
 * Otherwise, return the candidate with the smallest Levenshtein distance,
 *    except for candidates:
 *      * With no name
 *      * Whose meaning doesn't match the `meaning` parameter.
 *      * Whose length differs from the target name by more than 0.34 of the length of the name.
 *      * Whose levenshtein distance is more than 0.4 of the length of the name
 *        (0.4 allows 1 substitution/transposition for every 5 characters,
 *         and 1 insertion/deletion at 3 characters)
 */

func (c *Checker) getSpellingSuggestionForName(name string, symbols []*ast.Symbol, meaning SymbolFlags) *ast.Symbol {
	return getSpellingSuggestion(name, symbols, getCandidateName)

	getCandidateName := func(candidate *ast.Symbol) *string {
		candidateName := symbolName(candidate)
		if startsWith(candidateName, "\"") {
			return nil
		}

		if candidate.Flags&meaning != 0 {
			return candidateName
		}

		if candidate.Flags&ast.SymbolFlagsAlias != 0 {
			alias := c.tryResolveAlias(candidate)
			if alias != nil && alias.Flags&meaning != 0 {
				return candidateName
			}
		}

		return nil
	}

}

func (c *Checker) markPropertyAsReferenced(prop *ast.Symbol, nodeForCheckWriteOnly *ast.Node, isSelfTypeAccess bool) {
	valueDeclaration := prop && (prop.Flags & ast.SymbolFlagsClassMember) && prop.ValueDeclaration
	if !valueDeclaration {
		return
	}
	hasPrivateModifier := hasEffectiveModifier(valueDeclaration, ast.ModifierFlagsPrivate)
	hasPrivateIdentifier := prop.ValueDeclaration && isNamedDeclaration(prop.ValueDeclaration) && isPrivateIdentifier(prop.ValueDeclaration.Name)
	if !hasPrivateModifier && !hasPrivateIdentifier {
		return
	}
	if nodeForCheckWriteOnly != nil && isWriteOnlyAccess(nodeForCheckWriteOnly) && prop.Flags&ast.SymbolFlagsSetAccessor == 0 {
		return
	}
	if c.isSelfTypeAccess {
		// Find any FunctionLikeDeclaration because those create a new 'this' binding. But this should only matter for methods (or getters/setters).
		containingMethod := findAncestor(nodeForCheckWriteOnly, isFunctionLikeDeclaration)
		if containingMethod != nil && containingMethod.Symbol == prop {
			return
		}
	}

	(ifElse(getCheckFlags(prop)&ast.CheckFlagsInstantiated != 0, c.getSymbolLinks(prop).target, prop)).IsReferenced = ast.SymbolFlagsAll
}

func (c *Checker) isSelfTypeAccess(name Union[Expression, QualifiedName], parent *ast.Symbol) bool {
	return name.Kind == ast.KindThisKeyword || parent != nil && isEntityNameExpression(name) && parent == c.getResolvedSymbol(getFirstIdentifier(name))
}

func (c *Checker) isValidPropertyAccess(node Union[PropertyAccessExpression, QualifiedName, ImportTypeNode], propertyName string) bool {
	switch node.Kind {
	case ast.KindPropertyAccessExpression:
		return c.isValidPropertyAccessWithType(node, node.Expression.Kind == ast.KindSuperKeyword, propertyName, c.getWidenedType(c.checkExpression(node.Expression)))
	case ast.KindQualifiedName:
		return c.isValidPropertyAccessWithType(node, false /*isSuper*/, propertyName, c.getWidenedType(c.checkExpression(node.Left)))
	case ast.KindImportType:
		return c.isValidPropertyAccessWithType(node, false /*isSuper*/, propertyName, c.getTypeFromTypeNode(node))
	}
}

/**
 * Checks if an existing property access is valid for completions purposes.
 * @param node a property access-like node where we want to check if we can access a property.
 * This node does not need to be an access of the property we are checking.
 * e.g. in completions, this node will often be an incomplete property access node, as in `foo.`.
 * Besides providing a location (i.e. scope) used to check property accessibility, we use this node for
 * computing whether this is a `super` property access.
 * @param type the type whose property we are checking.
 * @param property the accessed property's symbol.
 */

func (c *Checker) isValidPropertyAccessForCompletions(node Union[PropertyAccessExpression, ImportTypeNode, QualifiedName], t *Type, property *ast.Symbol) bool {
	return c.isPropertyAccessible(node, node.Kind == ast.KindPropertyAccessExpression && node.Expression.Kind == ast.KindSuperKeyword, false /*isWrite*/, t, property)
	// Previously we validated the 'this' type of methods but this adversely affected performance. See #31377 for more context.
}

func (c *Checker) isValidPropertyAccessWithType(node Union[PropertyAccessExpression, QualifiedName, ImportTypeNode], isSuper bool, propertyName string, t *Type) bool {
	// Short-circuiting for improved performance.
	if c.isTypeAny(t) {
		return true
	}

	prop := c.getPropertyOfType(t, propertyName)
	return prop != nil && c.isPropertyAccessible(node, isSuper, false /*isWrite*/, t, prop)
}

/**
 * Checks if a property can be accessed in a location.
 * The location is given by the `node` parameter.
 * The node does not need to be a property access.
 * @param node location where to check property accessibility
 * @param isSuper whether to consider this a `super` property access, e.g. `super.foo`.
 * @param isWrite whether this is a write access, e.g. `++foo.x`.
 * @param containingType type where the property comes from.
 * @param property property symbol.
 */

func (c *Checker) isPropertyAccessible(node *ast.Node, isSuper bool, isWrite bool, containingType *Type, property *ast.Symbol) bool {
	// Short-circuiting for improved performance.
	if c.isTypeAny(containingType) {
		return true
	}

	// A #private property access in an optional chain is an error dealt with by the parser.
	// The checker does not check for it, so we need to do our own check here.
	if property.ValueDeclaration != nil && isPrivateIdentifierClassElementDeclaration(property.ValueDeclaration) {
		declClass := getContainingClass(property.ValueDeclaration)
		return !isOptionalChain(node) && findAncestor(node, func(parent *ast.Node) bool {
			return parent == declClass
		}) != nil
	}

	return c.checkPropertyAccessibilityAtLocation(node, isSuper, isWrite, containingType, property)
}

/**
 * Return the symbol of the for-in variable declared or referenced by the given for-in statement.
 */

func (c *Checker) getForInVariableSymbol(node ForInStatement) *ast.Symbol {
	initializer := node.Initializer
	if initializer.Kind == ast.KindVariableDeclarationList {
		variable := initializer.AsVariableDeclarationList().Declarations[0]
		if variable && !isBindingPattern(variable.Name) {
			return c.getSymbolOfDeclaration(variable)
		}
	} else if initializer.Kind == ast.KindIdentifier {
		return c.getResolvedSymbol(initializer.AsIdentifier())
	}
	return nil
}

/**
 * Return true if the given type is considered to have numeric property names.
 */

func (c *Checker) hasNumericPropertyNames(t *Type) bool {
	return c.getIndexInfosOfType(t).length == 1 && c.getIndexInfoOfType(t, c.numberType) != nil
}

/**
 * Return true if given node is an expression consisting of an identifier (possibly parenthesized)
 * that references a for-in variable for an object with numeric property names.
 */

func (c *Checker) isForInVariableForNumericPropertyNames(expr Expression) bool {
	e := skipParentheses(expr)
	if e.Kind == ast.KindIdentifier {
		symbol := c.getResolvedSymbol(e.AsIdentifier())
		if symbol.Flags&ast.SymbolFlagsVariable != 0 {
			var child *ast.Node = expr
			node := expr.Parent
			for node {
				if node.Kind == ast.KindForInStatement && child == node.AsForInStatement().Statement && c.getForInVariableSymbol(node.AsForInStatement()) == symbol && c.hasNumericPropertyNames(c.getTypeOfExpression(node.AsForInStatement().Expression)) {
					return true
				}
				child = node
				node = node.Parent
			}
		}
	}
	return false
}

func (c *Checker) checkIndexedAccess(node ElementAccessExpression, checkMode *CheckMode) *Type {
	if node.Flags&ast.NodeFlagsOptionalChain != 0 {
		return c.checkElementAccessChain(node.AsElementAccessChain(), checkMode)
	} else {
		return c.checkElementAccessExpression(node, c.checkNonNullExpression(node.Expression), checkMode)
	}
}

func (c *Checker) checkElementAccessChain(node ElementAccessChain, checkMode *CheckMode) *Type {
	exprType := c.checkExpression(node.Expression)
	nonOptionalType := c.getOptionalExpressionType(exprType, node.Expression)
	return c.propagateOptionalTypeMarker(c.checkElementAccessExpression(node, c.checkNonNullType(nonOptionalType, node.Expression), checkMode), node, nonOptionalType != exprType)
}

func (c *Checker) checkElementAccessExpression(node ElementAccessExpression, exprType *Type, checkMode *CheckMode) *Type {
	var objectType *Type
	if getAssignmentTargetKind(node) != AssignmentKindNone || c.isMethodAccessForCall(node) {
		objectType = c.getWidenedType(exprType)
	} else {
		objectType = exprType
	}
	indexExpression := node.ArgumentExpression
	indexType := c.checkExpression(indexExpression)

	if c.isErrorType(objectType) || objectType == c.silentNeverType {
		return objectType
	}

	if c.isConstEnumObjectType(objectType) && !isStringLiteralLike(indexExpression) {
		c.error(indexExpression, Diagnostics.A_const_enum_member_can_only_be_accessed_using_a_string_literal)
		return c.errorType
	}

	var effectiveIndexType *Type
	if c.isForInVariableForNumericPropertyNames(indexExpression) {
		effectiveIndexType = c.numberType
	} else {
		effectiveIndexType = indexType
	}
	assignmentTargetKind := getAssignmentTargetKind(node)
	var accessFlags AccessFlags
	if assignmentTargetKind == AssignmentKindNone {
		accessFlags = AccessFlagsExpressionPosition
	} else {
		accessFlags = AccessFlagsWriting | (ifElse(c.isGenericObjectType(objectType) && !isThisTypeParameter(objectType), AccessFlagsNoIndexSignatures, 0))
		if assignmentTargetKind == AssignmentKindCompound {
			accessFlags |= AccessFlagsExpressionPosition
		}
	}
	indexedAccessType := c.getIndexedAccessTypeOrUndefined(objectType, effectiveIndexType, accessFlags, node) || c.errorType
	return c.checkIndexedAccessIndexType(c.getFlowTypeOfAccessExpression(node, c.getNodeLinks(node).resolvedSymbol, indexedAccessType, indexExpression, checkMode), node)
}

func (c *Checker) callLikeExpressionMayHaveTypeArguments(node CallLikeExpression) bool {
	return isCallOrNewExpression(node) || isTaggedTemplateExpression(node) || isJsxOpeningLikeElement(node)
}

func (c *Checker) resolveUntypedCall(node CallLikeExpression) Signature {
	if c.callLikeExpressionMayHaveTypeArguments(node) {
		// Check type arguments even though we will give an error that untyped calls may not accept type arguments.
		// This gets us diagnostics for the type arguments and marks them as referenced.
		forEach(node.TypeArguments, c.checkSourceElement)
	}

	if node.Kind == ast.KindTaggedTemplateExpression {
		c.checkExpression(node.Template)
	} else if isJsxOpeningLikeElement(node) {
		c.checkExpression(node.Attributes)
	} else if isBinaryExpression(node) {
		c.checkExpression(node.Left)
	} else if isCallOrNewExpression(node) {
		forEach(node.Arguments, func(argument Expression) {
			c.checkExpression(argument)
		})
	}
	return c.anySignature
}

func (c *Checker) resolveErrorCall(node CallLikeExpression) Signature {
	c.resolveUntypedCall(node)
	return c.unknownSignature
}

// Re-order candidate signatures into the result array. Assumes the result array to be empty.
// The candidate list orders groups in reverse, but within a group signatures are kept in declaration order
// A nit here is that we reorder only signatures that belong to the same symbol,
// so order how inherited signatures are processed is still preserved.
// interface A { (x: string): void }
// interface B extends A { (x: 'foo'): string }
// const b: B;
// b('foo') // <- here overloads should be processed as [(x:'foo'): string, (x: string): void]
func (c *Checker) reorderCandidates(signatures []Signature, result []Signature, callChainFlags SignatureFlags) {
	var lastParent *ast.Node
	var lastSymbol *ast.Symbol
	cutoffIndex := 0
	var index *number
	specializedIndex := -1
	var spliceIndex number
	Debug.assert(result.length == 0)
	for _, signature := range signatures {
		symbol := signature.declaration && c.getSymbolOfDeclaration(signature.declaration)
		parent := signature.declaration && signature.declaration.Parent
		if lastSymbol == nil || symbol == lastSymbol {
			if lastParent != nil && parent == lastParent {
				index = index + 1
			} else {
				lastParent = parent
				index = cutoffIndex
			}
		} else {
			// current declaration belongs to a different symbol
			// set cutoffIndex so re-orderings in the future won't change result set from 0 to cutoffIndex
			index = /* TODO(TS-TO-GO) EqualsToken BinaryExpression: cutoffIndex = result.length */ TODO
			lastParent = parent
		}
		lastSymbol = symbol

		// specialized signatures always need to be placed before non-specialized signatures regardless
		// of the cutoff position; see GH#1133
		if signatureHasLiteralTypes(signature) {
			specializedIndex++
			spliceIndex = specializedIndex
			// The cutoff index always needs to be greater than or equal to the specialized signature index
			// in order to prevent non-specialized signatures from being added before a specialized
			// signature.
			cutoffIndex++
		} else {
			spliceIndex = index
		}

		result.splice(spliceIndex, 0, ifElse(callChainFlags != 0, c.getOptionalCallSignature(signature, callChainFlags), signature))
	}
}

func (c *Checker) isSpreadArgument(arg Expression) bool {
	return arg != nil && (arg.Kind == ast.KindSpreadElement || arg.Kind == ast.KindSyntheticExpression && arg.AsSyntheticExpression().IsSpread)
}

func (c *Checker) getSpreadArgumentIndex(args []Expression) number {
	return core.FindIndex(args, c.isSpreadArgument)
}

func (c *Checker) acceptsVoid(t *Type) bool {
	return t.flags&TypeFlagsVoid != 0
}

func (c *Checker) acceptsVoidUndefinedUnknownOrAny(t *Type) bool {
	return t.flags&(TypeFlagsVoid|TypeFlagsUndefined|TypeFlagsUnknown|TypeFlagsAny) != 0
}

func (c *Checker) hasCorrectArity(node CallLikeExpression, args []Expression, signature Signature, signatureHelpTrailingComma bool /*  = false */) bool {
	var argCount number
	callIsIncomplete := false
	// In incomplete call we want to be lenient when we have too few arguments
	effectiveParameterCount := c.getParameterCount(signature)
	effectiveMinimumArguments := c.getMinArgumentCount(signature)

	if node.Kind == ast.KindTaggedTemplateExpression {
		argCount = args.length
		if node.Template.Kind == ast.KindTemplateExpression {
			// If a tagged template expression lacks a tail literal, the call is incomplete.
			// Specifically, a template only can end in a TemplateTail or a Missing literal.
			lastSpan := core.LastOrNil(node.Template.TemplateSpans)
			// we should always have at least one span.
			callIsIncomplete = nodeIsMissing(lastSpan.Literal) || lastSpan.Literal.IsUnterminated
		} else {
			// If the template didn't end in a backtick, or its beginning occurred right prior to EOF,
			// then this might actually turn out to be a TemplateHead in the future;
			// so we consider the call to be incomplete.
			templateLiteral := node.Template.AsLiteralExpression()
			Debug.assert(templateLiteral.Kind == ast.KindNoSubstitutionTemplateLiteral)
			callIsIncomplete = templateLiteral.IsUnterminated
		}
	} else if node.Kind == ast.KindDecorator {
		argCount = c.getDecoratorArgumentCount(node, signature)
	} else if node.Kind == ast.KindBinaryExpression {
		argCount = 1
	} else if isJsxOpeningLikeElement(node) {
		callIsIncomplete = node.Attributes.End == node.End
		if callIsIncomplete {
			return true
		}
		if effectiveMinimumArguments == 0 {
			argCount = args.length
		} else {
			argCount = 1
		}
		if args.length == 0 {
			effectiveParameterCount = effectiveParameterCount
		} else {
			effectiveParameterCount = 1
		}
		// class may have argumentless ctor functions - still resolve ctor and compare vs props member type
		effectiveMinimumArguments = min(effectiveMinimumArguments, 1)
		// sfc may specify context argument - handled by framework and not typechecked
	} else if node.Arguments == nil {
		// This only happens when we have something of the form: 'new C'
		Debug.assert(node.Kind == ast.KindNewExpression)
		return c.getMinArgumentCount(signature) == 0
	} else {
		if signatureHelpTrailingComma {
			argCount = args.length + 1
		} else {
			argCount = args.length
		}

		// If we are missing the close parenthesis, the call is incomplete.
		callIsIncomplete = node.Arguments.end == node.End

		// If a spread argument is present, check that it corresponds to a rest parameter or at least that it's in the valid range.
		spreadArgIndex := c.getSpreadArgumentIndex(args)
		if spreadArgIndex >= 0 {
			return spreadArgIndex >= c.getMinArgumentCount(signature) && (c.hasEffectiveRestParameter(signature) || spreadArgIndex < c.getParameterCount(signature))
		}
	}

	// Too many arguments implies incorrect arity.
	if !c.hasEffectiveRestParameter(signature) && argCount > effectiveParameterCount {
		return false
	}

	// If the call is incomplete, we should skip the lower bound check.
	// JSX signatures can have extra parameters provided by the library which we don't check
	if callIsIncomplete || argCount >= effectiveMinimumArguments {
		return true
	}
	for i := argCount; i < effectiveMinimumArguments; i++ {
		t := c.getTypeAtPosition(signature, i)
		if c.filterType(t, ifElse(isInJSFile(node) && !c.strictNullChecks, c.acceptsVoidUndefinedUnknownOrAny, c.acceptsVoid)).flags&TypeFlagsNever != 0 {
			return false
		}
	}
	return true
}

func (c *Checker) hasCorrectTypeArgumentArity(signature Signature, typeArguments *NodeArray[TypeNode]) bool {
	// If the user supplied type arguments, but the number of type arguments does not match
	// the declared number of type parameters, the call has an incorrect arity.
	numTypeParameters := length(signature.typeParameters)
	minTypeArgumentCount := c.getMinTypeArgumentCount(signature.typeParameters)
	return !core.Some(typeArguments) || (typeArguments.length >= minTypeArgumentCount && typeArguments.length <= numTypeParameters)
}

func (c *Checker) isInstantiatedGenericParameter(signature Signature, pos number) bool {
	var t TODO
	return signature.target != nil && ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: type = tryGetTypeAtPosition(signature.target, pos) */ TODO != nil) && c.isGenericType(t)
}

// If type has a single call signature and no other members, return that signature. Otherwise, return undefined.
func (c *Checker) getSingleCallSignature(t *Type) *Signature {
	return c.getSingleSignature(t, SignatureKindCall, false /*allowMembers*/)
}

func (c *Checker) getSingleCallOrConstructSignature(t *Type) *Signature {
	return c.getSingleSignature(t, SignatureKindCall, false /*allowMembers*/) || c.getSingleSignature(t, SignatureKindConstruct, false /*allowMembers*/)
}

func (c *Checker) getSingleSignature(t *Type, kind SignatureKind, allowMembers bool) *Signature {
	if t.flags&TypeFlagsObject != 0 {
		resolved := c.resolveStructuredTypeMembers(t.AsObjectType())
		if allowMembers || resolved.properties.length == 0 && resolved.indexInfos.length == 0 {
			if kind == SignatureKindCall && resolved.callSignatures.length == 1 && resolved.constructSignatures.length == 0 {
				return resolved.callSignatures[0]
			}
			if kind == SignatureKindConstruct && resolved.constructSignatures.length == 1 && resolved.callSignatures.length == 0 {
				return resolved.constructSignatures[0]
			}
		}
	}
	return nil
}

// Instantiate a generic signature in the context of a non-generic signature (section 3.8.5 in TypeScript spec)
func (c *Checker) instantiateSignatureInContextOf(signature Signature, contextualSignature Signature, inferenceContext InferenceContext, compareTypes TypeComparer) Signature {
	context := c.createInferenceContext(c.getTypeParametersForMapper(signature), signature, InferenceFlagsNone, compareTypes)
	// We clone the inferenceContext to avoid fixing. For example, when the source signature is <T>(x: T) => T[] and
	// the contextual signature is (...args: A) => B, we want to infer the element type of A's constraint (say 'any')
	// for T but leave it possible to later infer '[any]' back to A.
	restType := c.getEffectiveRestType(contextualSignature)
	mapper := inferenceContext && (ifElse(restType != nil && restType.flags&TypeFlagsTypeParameter != 0, inferenceContext.nonFixingMapper, inferenceContext.mapper))
	var sourceSignature Signature
	if mapper != nil {
		sourceSignature = c.instantiateSignature(contextualSignature, mapper)
	} else {
		sourceSignature = contextualSignature
	}
	c.applyToParameterTypes(sourceSignature, signature, func(source *Type, target *Type) {
		// Type parameters from outer context referenced by source type are fixed by instantiation of the source type
		c.inferTypes(context.inferences, source, target)
	})
	if inferenceContext == nil {
		c.applyToReturnTypes(contextualSignature, signature, func(source *Type, target *Type) {
			c.inferTypes(context.inferences, source, target, InferencePriorityReturnType)
		})
	}
	return c.getSignatureInstantiation(signature, c.getInferredTypes(context), isInJSFile(contextualSignature.declaration))
}

func (c *Checker) inferJsxTypeArguments(node JsxOpeningLikeElement, signature Signature, checkMode CheckMode, context InferenceContext) []*Type {
	paramType := c.getEffectiveFirstArgumentForJsxSignature(signature, node)
	checkAttrType := c.checkExpressionWithContextualType(node.Attributes, paramType, context, checkMode)
	c.inferTypes(context.inferences, checkAttrType, paramType)
	return c.getInferredTypes(context)
}

func (c *Checker) getThisArgumentType(thisArgumentNode Expression) *Type {
	if thisArgumentNode == nil {
		return c.voidType
	}
	thisArgumentType := c.checkExpression(thisArgumentNode)
	switch {
	case isRightSideOfInstanceofExpression(thisArgumentNode):
		return thisArgumentType
	case isOptionalChainRoot(thisArgumentNode.Parent):
		return c.getNonNullableType(thisArgumentType)
	case isOptionalChain(thisArgumentNode.Parent):
		return c.removeOptionalTypeMarker(thisArgumentType)
	default:
		return thisArgumentType
	}
}

func (c *Checker) inferTypeArguments(node CallLikeExpression, signature Signature, args []Expression, checkMode CheckMode, context InferenceContext) []*Type {
	if isJsxOpeningLikeElement(node) {
		return c.inferJsxTypeArguments(node, signature, checkMode, context)
	}

	// If a contextual type is available, infer from that type to the return type of the call expression. For
	// example, given a 'function wrap<T, U>(cb: (x: T) => U): (x: T) => U' and a call expression
	// 'let f: (x: string) => number = wrap(s => s.length)', we infer from the declared type of 'f' to the
	// return type of 'wrap'.
	if node.Kind != ast.KindDecorator && node.Kind != ast.KindBinaryExpression {
		skipBindingPatterns := core.Every(signature.typeParameters, func(p TypeParameter) bool {
			return c.getDefaultFromTypeParameter(p) != nil
		})
		contextualType := c.getContextualType(node, ifElse(skipBindingPatterns, ContextFlagsSkipBindingPatterns, ContextFlagsNone))
		if contextualType != nil {
			inferenceTargetType := c.getReturnTypeOfSignature(signature)
			if c.couldContainTypeVariables(inferenceTargetType) {
				outerContext := c.getInferenceContext(node)
				isFromBindingPattern := !skipBindingPatterns && c.getContextualType(node, ContextFlagsSkipBindingPatterns) != contextualType
				// A return type inference from a binding pattern can be used in instantiating the contextual
				// type of an argument later in inference, but cannot stand on its own as the final return type.
				// It is incorporated into `context.returnMapper` which is used in `instantiateContextualType`,
				// but doesn't need to go into `context.inferences`. This allows a an array binding pattern to
				// produce a tuple for `T` in
				//   declare function f<T>(cb: () => T): T;
				//   const [e1, e2, e3] = f(() => [1, "hi", true]);
				// but does not produce any inference for `T` in
				//   declare function f<T>(): T;
				//   const [e1, e2, e3] = f();
				if !isFromBindingPattern {
					// We clone the inference context to avoid disturbing a resolution in progress for an
					// outer call expression. Effectively we just want a snapshot of whatever has been
					// inferred for any outer call expression so far.
					outerMapper := c.getMapperFromContext(c.cloneInferenceContext(outerContext, InferenceFlagsNoDefault))
					instantiatedType := c.instantiateType(contextualType, outerMapper)
					// If the contextual type is a generic function type with a single call signature, we
					// instantiate the type with its own type parameters and type arguments. This ensures that
					// the type parameters are not erased to type any during type inference such that they can
					// be inferred as actual types from the contextual type. For example:
					//   declare function arrayMap<T, U>(f: (x: T) => U): (a: T[]) => U[];
					//   const boxElements: <A>(a: A[]) => { value: A }[] = arrayMap(value => ({ value }));
					// Above, the type of the 'value' parameter is inferred to be 'A'.
					contextualSignature := c.getSingleCallSignature(instantiatedType)
					var inferenceSourceType *Type
					if contextualSignature != nil && contextualSignature.typeParameters != nil {
						inferenceSourceType = c.getOrCreateTypeFromSignature(c.getSignatureInstantiationWithoutFillingInTypeArguments(contextualSignature, contextualSignature.typeParameters))
					} else {
						inferenceSourceType = instantiatedType
					}
					// Inferences made from return types have lower priority than all other inferences.
					c.inferTypes(context.inferences, inferenceSourceType, inferenceTargetType, InferencePriorityReturnType)
				}
				// Create a type mapper for instantiating generic contextual types using the inferences made
				// from the return type. We need a separate inference pass here because (a) instantiation of
				// the source type uses the outer context's return mapper (which excludes inferences made from
				// outer arguments), and (b) we don't want any further inferences going into this context.
				returnContext := c.createInferenceContext(signature.typeParameters, signature, context.flags)
				returnSourceType := c.instantiateType(contextualType, outerContext && outerContext.returnMapper)
				c.inferTypes(returnContext.inferences, returnSourceType, inferenceTargetType)
				if core.Some(returnContext.inferences, c.hasInferenceCandidates) {
					context.returnMapper = c.getMapperFromContext(c.cloneInferredPartOfContext(returnContext))
				} else {
					context.returnMapper = nil
				}
			}
		}
	}

	restType := c.getNonArrayRestType(signature)
	var argCount number
	if restType != nil {
		argCount = min(c.getParameterCount(signature)-1, args.length)
	} else {
		argCount = args.length
	}
	if restType != nil && restType.flags&TypeFlagsTypeParameter != 0 {
		info := core.Find(context.inferences, func(info InferenceInfo) bool {
			return info.typeParameter == restType
		})
		if info != nil {
			if core.FindIndex(args, c.isSpreadArgument, argCount) < 0 {
				info.impliedArity = args.length - argCount
			} else {
				info.impliedArity = nil
			}
		}
	}

	thisType := c.getThisTypeOfSignature(signature)
	if thisType != nil && c.couldContainTypeVariables(thisType) {
		thisArgumentNode := c.getThisArgumentOfCall(node)
		c.inferTypes(context.inferences, c.getThisArgumentType(thisArgumentNode), thisType)
	}

	for i := 0; i < argCount; i++ {
		arg := args[i]
		if arg.Kind != ast.KindOmittedExpression {
			paramType := c.getTypeAtPosition(signature, i)
			if c.couldContainTypeVariables(paramType) {
				argType := c.checkExpressionWithContextualType(arg, paramType, context, checkMode)
				c.inferTypes(context.inferences, argType, paramType)
			}
		}
	}

	if restType != nil && c.couldContainTypeVariables(restType) {
		spreadType := c.getSpreadArgumentType(args, argCount, args.length, restType, context, checkMode)
		c.inferTypes(context.inferences, spreadType, restType)
	}

	return c.getInferredTypes(context)
}

func (c *Checker) getMutableArrayOrTupleType(t *Type) *Type {
	switch {
	case t.flags&TypeFlagsUnion != 0:
		return c.mapType(t, c.getMutableArrayOrTupleType)
	case t.flags&TypeFlagsAny != 0 || c.isMutableArrayOrTuple(c.getBaseConstraintOfType(t) || t):
		return t
	case c.isTupleType(t):
		return c.createTupleType(c.getElementTypes(t), t.target.elementFlags, false /*readonly*/, t.target.labeledElementDeclarations)
	default:
		return c.createTupleType([]*Type{t}, [] /* TODO(TS-TO-GO) inferred type ElementFlags.Variadic */ any{ElementFlagsVariadic})
	}
}

func (c *Checker) getSpreadArgumentType(args []Expression, index number, argCount number, restType *Type, context *InferenceContext, checkMode CheckMode) *Type {
	inConstContext := c.isConstTypeVariable(restType)

	if index >= argCount-1 {
		arg := args[argCount-1]
		if c.isSpreadArgument(arg) {
			// We are inferring from a spread expression in the last argument position, i.e. both the parameter
			// and the argument are ...x forms.
			var spreadType *Type
			if arg.Kind == ast.KindSyntheticExpression {
				spreadType = arg.AsSyntheticExpression().Type_
			} else {
				spreadType = c.checkExpressionWithContextualType(arg.AsSpreadElement().Expression, restType, context, checkMode)
			}

			if c.isArrayLikeType(spreadType) {
				return c.getMutableArrayOrTupleType(spreadType)
			}

			return c.createArrayType(c.checkIteratedTypeOrElementType(IterationUseSpread, spreadType, c.undefinedType, ifElse(arg.Kind == ast.KindSpreadElement, arg.AsSpreadElement().Expression, arg)), inConstContext)
		}
	}
	types := []never{}
	flags := []never{}
	names := []never{}
	for i := index; i < argCount; i++ {
		arg := args[i]
		if c.isSpreadArgument(arg) {
			var spreadType *Type
			if arg.Kind == ast.KindSyntheticExpression {
				spreadType = arg.AsSyntheticExpression().Type_
			} else {
				spreadType = c.checkExpression(arg.AsSpreadElement().Expression)
			}
			if c.isArrayLikeType(spreadType) {
				types.push(spreadType)
				flags.push(ElementFlagsVariadic)
			} else {
				types.push(c.checkIteratedTypeOrElementType(IterationUseSpread, spreadType, c.undefinedType, ifElse(arg.Kind == ast.KindSpreadElement, arg.AsSpreadElement().Expression, arg)))
				flags.push(ElementFlagsRest)
			}
		} else {
			var contextualType *Type
			if c.isTupleType(restType) {
				contextualType = c.getContextualTypeForElementExpression(restType, i-index, argCount-index) || c.unknownType
			} else {
				contextualType = c.getIndexedAccessType(restType, c.getNumberLiteralType(i-index), AccessFlagsContextual)
			}
			argType := c.checkExpressionWithContextualType(arg, contextualType, context, checkMode)
			hasPrimitiveContextualType := inConstContext || c.maybeTypeOfKind(contextualType, TypeFlagsPrimitive|TypeFlagsIndex|TypeFlagsTemplateLiteral|TypeFlagsStringMapping)
			types.push(ifElse(hasPrimitiveContextualType, c.getRegularTypeOfLiteralType(argType), c.getWidenedLiteralType(argType)))
			flags.push(ElementFlagsRequired)
		}
		if arg.Kind == ast.KindSyntheticExpression && arg.AsSyntheticExpression().TupleNameSource != nil {
			names.push(arg.AsSyntheticExpression().TupleNameSource)
		} else {
			names.push(nil)
		}
	}
	return c.createTupleType(types, flags, inConstContext && !c.someType(restType, c.isMutableArrayLikeType), names)
}

func (c *Checker) checkTypeArguments(signature Signature, typeArgumentNodes []TypeNode, reportErrors bool, headMessage DiagnosticMessage) *[]*Type {
	isJavascript := isInJSFile(signature.declaration)
	typeParameters := signature.typeParameters
	typeArgumentTypes := c.fillMissingTypeArguments(core.Map(typeArgumentNodes, c.getTypeFromTypeNode), typeParameters, c.getMinTypeArgumentCount(typeParameters), isJavascript)
	var mapper *TypeMapper
	for i := 0; i < typeArgumentNodes.length; i++ {
		Debug.assert(typeParameters[i] != nil, "Should not call checkTypeArguments with too many type arguments")
		constraint := c.getConstraintOfTypeParameter(typeParameters[i])
		if constraint != nil {
			var errorInfo * /* TODO(TS-TO-GO) inferred type (() => DiagnosticMessageChain) */ any
			if reportErrors && headMessage != nil {
				errorInfo = (func() DiagnosticMessageChain {
					return chainDiagnosticMessages(nil, Diagnostics.Type_0_does_not_satisfy_the_constraint_1)
				})
			} else {
				errorInfo = nil
			}
			typeArgumentHeadMessage := headMessage || Diagnostics.Type_0_does_not_satisfy_the_constraint_1
			if mapper == nil {
				mapper = c.createTypeMapper(typeParameters, typeArgumentTypes)
			}
			typeArgument := typeArgumentTypes[i]
			if !c.checkTypeAssignableTo(typeArgument, c.getTypeWithThisArgument(c.instantiateType(constraint, mapper), typeArgument), ifElse(reportErrors, typeArgumentNodes[i], nil), typeArgumentHeadMessage, errorInfo) {
				return nil
			}
		}
	}
	return typeArgumentTypes
}

func (c *Checker) getJsxReferenceKind(node JsxOpeningLikeElement) JsxReferenceKind {
	if c.isJsxIntrinsicTagName(node.TagName) {
		return JsxReferenceKindMixed
	}
	tagType := c.getApparentType(c.checkExpression(node.TagName))
	if length(c.getSignaturesOfType(tagType, SignatureKindConstruct)) != 0 {
		return JsxReferenceKindComponent
	}
	if length(c.getSignaturesOfType(tagType, SignatureKindCall)) != 0 {
		return JsxReferenceKindFunction
	}
	return JsxReferenceKindMixed
}

/**
 * Check if the given signature can possibly be a signature called by the JSX opening-like element.
 * @param node a JSX opening-like element we are trying to figure its call signature
 * @param signature a candidate signature we are trying whether it is a call signature
 * @param relation a relationship to check parameter and argument type
 */

func (c *Checker) checkApplicableSignatureForJsxOpeningLikeElement(node JsxOpeningLikeElement, signature Signature, relation Map[string, RelationComparisonResult], checkMode CheckMode, reportErrors bool, containingMessageChain *func() *DiagnosticMessageChain, errorOutputContainer /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; skipLogging?: boolean; } */ any) bool {
	// Stateless function components can have maximum of three arguments: "props", "context", and "updater".
	// However "context" and "updater" are implicit and can't be specify by users. Only the first parameter, props,
	// can be specified by users through attributes property.
	paramType := c.getEffectiveFirstArgumentForJsxSignature(signature, node)
	attributesType := c.checkExpressionWithContextualType(node.Attributes, paramType, nil /*inferenceContext*/, checkMode)
	var checkAttributesType *Type
	if checkMode&CheckModeSkipContextSensitive != 0 {
		checkAttributesType = c.getRegularTypeOfObjectLiteral(attributesType)
	} else {
		checkAttributesType = attributesType
	}
	return checkTagNameDoesNotExpectTooManyArguments() && c.checkTypeRelatedToAndOptionallyElaborate(checkAttributesType, paramType, relation, ifElse(reportErrors, node.TagName, nil), node.Attributes, nil, containingMessageChain, errorOutputContainer)

	checkTagNameDoesNotExpectTooManyArguments := func() bool {
		if c.getJsxNamespaceContainerForImplicitImport(node) != nil {
			return true
			// factory is implicitly jsx/jsxdev - assume it fits the bill, since we don't strongly look for the jsx/jsxs/jsxDEV factory APIs anywhere else (at least not yet)
		}
		var tagType *Type
		if (isJsxOpeningElement(node) || isJsxSelfClosingElement(node)) && !(c.isJsxIntrinsicTagName(node.TagName) || isJsxNamespacedName(node.TagName)) {
			tagType = c.checkExpression(node.TagName)
		} else {
			tagType = nil
		}
		if tagType == nil {
			return true
		}
		tagCallSignatures := c.getSignaturesOfType(tagType, SignatureKindCall)
		if length(tagCallSignatures) == 0 {
			return true
		}
		factory := c.getJsxFactoryEntity(node)
		if factory == nil {
			return true
		}
		factorySymbol := c.resolveEntityName(factory, ast.SymbolFlagsValue, true /*ignoreErrors*/, false /*dontResolveAlias*/, node)
		if factorySymbol == nil {
			return true
		}

		factoryType := c.getTypeOfSymbol(factorySymbol)
		callSignatures := c.getSignaturesOfType(factoryType, SignatureKindCall)
		if length(callSignatures) == 0 {
			return true
		}

		hasFirstParamSignatures := false
		maxParamCount := 0
		// Check that _some_ first parameter expects a FC-like thing, and that some overload of the SFC expects an acceptable number of arguments
		for _, sig := range callSignatures {
			firstparam := c.getTypeAtPosition(sig, 0)
			signaturesOfParam := c.getSignaturesOfType(firstparam, SignatureKindCall)
			if length(signaturesOfParam) == 0 {
				continue
			}
			for _, paramSig := range signaturesOfParam {
				hasFirstParamSignatures = true
				if c.hasEffectiveRestParameter(paramSig) {
					return true
					// some signature has a rest param, so function components can have an arbitrary number of arguments
				}
				paramCount := c.getParameterCount(paramSig)
				if paramCount > maxParamCount {
					maxParamCount = paramCount
				}
			}
		}
		if !hasFirstParamSignatures {
			// Not a single signature had a first parameter which expected a signature - for back compat, and
			// to guard against generic factories which won't have signatures directly, do not error
			return true
		}
		absoluteMinArgCount := Infinity
		for _, tagSig := range tagCallSignatures {
			tagRequiredArgCount := c.getMinArgumentCount(tagSig)
			if tagRequiredArgCount < absoluteMinArgCount {
				absoluteMinArgCount = tagRequiredArgCount
			}
		}
		if absoluteMinArgCount <= maxParamCount {
			return true
			// some signature accepts the number of arguments the function component provides
		}

		if reportErrors {
			diag := createDiagnosticForNode(node.TagName, Diagnostics.Tag_0_expects_at_least_1_arguments_but_the_JSX_factory_2_provides_at_most_3, entityNameToString(node.TagName), absoluteMinArgCount, entityNameToString(factory), maxParamCount)
			tagNameDeclaration := c.getSymbolAtLocation(node.TagName). /* ? */ valueDeclaration
			if tagNameDeclaration != nil {
				addRelatedInfo(diag, createDiagnosticForNode(tagNameDeclaration, Diagnostics._0_is_declared_here, entityNameToString(node.TagName)))
			}
			if errorOutputContainer && errorOutputContainer.skipLogging {
				(errorOutputContainer.errors || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: errorOutputContainer.errors = [] */ TODO)).push(diag)
			}
			if !errorOutputContainer.skipLogging {
				c.diagnostics.add(diag)
			}
		}
		return false
	}

}

func (c *Checker) getEffectiveCheckNode(argument Expression) Expression {
	argument = skipParentheses(argument)
	if isSatisfiesExpression(argument) {
		return skipParentheses(argument.Expression)
	} else {
		return argument
	}
}

func (c *Checker) getSignatureApplicabilityError(node CallLikeExpression, args []Expression, signature Signature, relation Map[string, RelationComparisonResult], checkMode CheckMode, reportErrors bool, containingMessageChain *func() *DiagnosticMessageChain, inferenceContext *InferenceContext) *[]Diagnostic {
	var errorOutputContainer /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors?: Diagnostic[]; skipLogging?: boolean; } */ any = map[any]any{ /* TODO(TS-TO-GO): was object literal */
		"errors":      nil,
		"skipLogging": true,
	}
	if isJsxOpeningLikeElement(node) {
		if !c.checkApplicableSignatureForJsxOpeningLikeElement(node, signature, relation, checkMode, reportErrors, containingMessageChain, errorOutputContainer) {
			Debug.assert(!reportErrors || errorOutputContainer.errors != nil, "jsx should have errors when reporting errors")
			return errorOutputContainer.errors || emptyArray
		}
		return nil
	}
	thisType := c.getThisTypeOfSignature(signature)
	if thisType != nil && thisType != c.voidType && !(isNewExpression(node) || isCallExpression(node) && isSuperProperty(node.Expression)) {
		// If the called expression is not of the form `x.f` or `x["f"]`, then sourceType = voidType
		// If the signature's 'this' type is voidType, then the check is skipped -- anything is compatible.
		// If the expression is a new expression or super call expression, then the check is skipped.
		thisArgumentNode := c.getThisArgumentOfCall(node)
		thisArgumentType := c.getThisArgumentType(thisArgumentNode)
		var errorNode * /* TODO(TS-TO-GO) inferred type Expression | Decorator */ any
		if reportErrors {
			errorNode = (thisArgumentNode || node)
		} else {
			errorNode = nil
		}
		headMessage := Diagnostics.The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1
		if !c.checkTypeRelatedTo(thisArgumentType, thisType, relation, errorNode, headMessage, containingMessageChain, errorOutputContainer) {
			Debug.assert(!reportErrors || errorOutputContainer.errors != nil, "this parameter should have errors when reporting errors")
			return errorOutputContainer.errors || emptyArray
		}
	}
	headMessage := Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1
	restType := c.getNonArrayRestType(signature)
	var argCount number
	if restType != nil {
		argCount = min(c.getParameterCount(signature)-1, args.length)
	} else {
		argCount = args.length
	}
	for i := 0; i < argCount; i++ {
		arg := args[i]
		if arg.Kind != ast.KindOmittedExpression {
			paramType := c.getTypeAtPosition(signature, i)
			argType := c.checkExpressionWithContextualType(arg, paramType, nil /*inferenceContext*/, checkMode)
			// If one or more arguments are still excluded (as indicated by CheckMode.SkipContextSensitive),
			// we obtain the regular type of any object literal arguments because we may not have inferred complete
			// parameter types yet and therefore excess property checks may yield false positives (see #17041).
			var regularArgType *Type
			if checkMode&CheckModeSkipContextSensitive != 0 {
				regularArgType = c.getRegularTypeOfObjectLiteral(argType)
			} else {
				regularArgType = argType
			}
			// If this was inferred under a given inference context, we may need to instantiate the expression type to finish resolving
			// the type variables in the expression.
			var checkArgType *Type
			if inferenceContext != nil {
				checkArgType = c.instantiateType(regularArgType, inferenceContext.nonFixingMapper)
			} else {
				checkArgType = regularArgType
			}
			effectiveCheckArgumentNode := c.getEffectiveCheckNode(arg)
			if !c.checkTypeRelatedToAndOptionallyElaborate(checkArgType, paramType, relation, ifElse(reportErrors, effectiveCheckArgumentNode, nil), effectiveCheckArgumentNode, headMessage, containingMessageChain, errorOutputContainer) {
				Debug.assert(!reportErrors || errorOutputContainer.errors != nil, "parameter should have errors when reporting errors")
				maybeAddMissingAwaitInfo(arg, checkArgType, paramType)
				return errorOutputContainer.errors || emptyArray
			}
		}
	}
	if restType != nil {
		spreadType := c.getSpreadArgumentType(args, argCount, args.length, restType, nil /*context*/, checkMode)
		restArgCount := args.length - argCount
		var errorNode * /* TODO(TS-TO-GO) inferred type Expression | Decorator */ any
		switch {
		case !reportErrors:
			errorNode = nil
		case restArgCount == 0:
			errorNode = node
		case restArgCount == 1:
			errorNode = c.getEffectiveCheckNode(args[argCount])
		default:
			errorNode = setTextRangePosEnd(c.createSyntheticExpression(node, spreadType), args[argCount].Pos, args[args.length-1].End)
		}
		if !c.checkTypeRelatedTo(spreadType, restType, relation, errorNode, headMessage, nil /*containingMessageChain*/, errorOutputContainer) {
			Debug.assert(!reportErrors || errorOutputContainer.errors != nil, "rest parameter should have errors when reporting errors")
			maybeAddMissingAwaitInfo(errorNode, spreadType, restType)
			return errorOutputContainer.errors || emptyArray
		}
	}
	return nil

	maybeAddMissingAwaitInfo := func(errorNode *ast.Node, source *Type, target *Type) {
		if errorNode != nil && reportErrors && errorOutputContainer.errors != nil && errorOutputContainer.errors.length != 0 {
			// Bail if target is Promise-like---something else is wrong
			if c.getAwaitedTypeOfPromise(target) != nil {
				return
			}
			awaitedTypeOfSource := c.getAwaitedTypeOfPromise(source)
			if awaitedTypeOfSource != nil && c.isTypeRelatedTo(awaitedTypeOfSource, target, relation) {
				addRelatedInfo(errorOutputContainer.errors[0], createDiagnosticForNode(errorNode, Diagnostics.Did_you_forget_to_use_await))
			}
		}
	}

}

/**
 * Returns the this argument in calls like x.f(...) and x[f](...). Undefined otherwise.
 */

func (c *Checker) getThisArgumentOfCall(node CallLikeExpression) Expression {
	if node.Kind == ast.KindBinaryExpression {
		return node.Right
	}

	var expression *LeftHandSideExpression
	switch {
	case node.Kind == ast.KindCallExpression:
		expression = node.Expression
	case node.Kind == ast.KindTaggedTemplateExpression:
		expression = node.Tag
	case node.Kind == ast.KindDecorator && !c.legacyDecorators:
		expression = node.Expression
	default:
		expression = nil
	}
	if expression != nil {
		callee := skipOuterExpressions(expression)
		if isAccessExpression(callee) {
			return callee.Expression
		}
	}
}

func (c *Checker) createSyntheticExpression(parent *ast.Node, t *Type, isSpread bool, tupleNameSource Union[ParameterDeclaration, NamedTupleMember]) SyntheticExpression {
	result := parseNodeFactory.createSyntheticExpression(t, isSpread, tupleNameSource)
	setTextRangeWorker(result, parent)
	setParent(result, parent)
	return result
}

/**
 * Returns the effective arguments for an expression that works like a function invocation.
 */

func (c *Checker) getEffectiveCallArguments(node CallLikeExpression) []Expression {
	if node.Kind == ast.KindTaggedTemplateExpression {
		template := node.Template
		var args []Expression = []SyntheticExpression{c.createSyntheticExpression(template, c.getGlobalTemplateStringsArrayType())}
		if template.Kind == ast.KindTemplateExpression {
			forEach(template.TemplateSpans, func(span TemplateSpan) {
				args.push(span.Expression)
			})
		}
		return args
	}
	if node.Kind == ast.KindDecorator {
		return c.getEffectiveDecoratorArguments(node)
	}
	if node.Kind == ast.KindBinaryExpression {
		return []Expression{node.Left}
	}
	if isJsxOpeningLikeElement(node) {
		if node.Attributes.Properties.length > 0 || (isJsxOpeningElement(node) && node.Parent.Children.length > 0) {
			return []JsxAttributes{node.Attributes}
		} else {
			return emptyArray
		}
	}
	args := node.Arguments || emptyArray
	spreadIndex := c.getSpreadArgumentIndex(args)
	if spreadIndex >= 0 {
		// Create synthetic arguments from spreads of tuple types.
		effectiveArgs := args.slice(0, spreadIndex)
		for i := spreadIndex; i < args.length; i++ {
			arg := args[i]
			// We can call checkExpressionCached because spread expressions never have a contextual type.
			spreadType := arg.Kind == ast.KindSpreadElement && (ifElse(c.flowLoopCount != 0, c.checkExpression(arg.AsSpreadElement().Expression), c.checkExpressionCached(arg.AsSpreadElement().Expression)))
			if spreadType && c.isTupleType(spreadType) {
				forEach(c.getElementTypes(spreadType), func(t *Type, i number) {
					flags := spreadType.target.elementFlags[i]
					syntheticArg := c.createSyntheticExpression(arg, ifElse(flags&ElementFlagsRest != 0, c.createArrayType(t), t), flags&ElementFlagsVariable != 0, spreadType.target.labeledElementDeclarations[i])
					effectiveArgs.push(syntheticArg)
				})
			} else {
				effectiveArgs.push(arg)
			}
		}
		return effectiveArgs
	}
	return args
}

/**
 * Returns the synthetic argument list for a decorator invocation.
 */

func (c *Checker) getEffectiveDecoratorArguments(node Decorator) []Expression {
	expr := node.Expression
	signature := c.getDecoratorCallSignature(node)
	if signature != nil {
		var args []Expression = []never{}
		for _, param := range signature.parameters {
			t := c.getTypeOfSymbol(param)
			args.push(c.createSyntheticExpression(expr, t))
		}
		return args
	}
	return Debug.fail()
}

/**
 * Returns the argument count for a decorator node that works like a function invocation.
 */

func (c *Checker) getDecoratorArgumentCount(node Decorator, signature Signature) number {
	if c.compilerOptions.experimentalDecorators {
		return c.getLegacyDecoratorArgumentCount(node, signature)
	} else {
		return min(max(c.getParameterCount(signature), 1), 2)
	}
}

/**
 * Returns the argument count for a decorator node that works like a function invocation.
 */

func (c *Checker) getLegacyDecoratorArgumentCount(node Decorator, signature Signature) /* TODO(TS-TO-GO) inferred type 1 | 2 | 3 */ any {
	switch node.Parent.Kind {
	case ast.KindClassDeclaration,
		ast.KindClassExpression:
		return 1
	case ast.KindPropertyDeclaration:
		if hasAccessorModifier(node.Parent) {
			return 3
		} else {
			return 2
		}
	case ast.KindMethodDeclaration,
		ast.KindGetAccessor,
		ast.KindSetAccessor:
		// For decorators with only two parameters we supply only two arguments
		if signature.parameters.length <= 2 {
			return 2
		} else {
			return 3
		}
	case ast.KindParameter:
		return 3
	default:
		return Debug.fail()
	}
}

func (c *Checker) getDiagnosticSpanForCallNode(node CallExpression) /* TODO(TS-TO-GO) inferred type { start: number; length: number; sourceFile: SourceFile; } */ any {
	sourceFile := getSourceFileOfNode(node)
	TODO_IDENTIFIER := getErrorSpanForNode(sourceFile, ifElse(isPropertyAccessExpression(node.Expression), node.Expression.Name, node.Expression))
	return map[any]any{ /* TODO(TS-TO-GO): was object literal */
		"start":      start,
		"length":     length,
		"sourceFile": sourceFile,
	}
}

func (c *Checker) getDiagnosticForCallNode(node CallLikeExpression, message Union[DiagnosticMessage, DiagnosticMessageChain], args DiagnosticArguments) DiagnosticWithLocation {
	if isCallExpression(node) {
		TODO_IDENTIFIER := c.getDiagnosticSpanForCallNode(node)
		if /* TODO(TS-TO-GO) InKeyword BinaryExpression: "message" in message */ TODO {
			return createFileDiagnostic(sourceFile, start, length, message, args...)
		}
		return createDiagnosticForFileFromMessageChain(sourceFile, message)
	} else {
		if /* TODO(TS-TO-GO) InKeyword BinaryExpression: "message" in message */ TODO {
			return createDiagnosticForNode(node, message, args...)
		}
		return createDiagnosticForNodeFromMessageChain(getSourceFileOfNode(node), node, message)
	}
}

func (c *Checker) getErrorNodeForCallNode(callLike CallLikeExpression) *ast.Node {
	if isCallOrNewExpression(callLike) {
		if isPropertyAccessExpression(callLike.Expression) {
			return callLike.Expression.Name
		} else {
			return callLike.Expression
		}
	}
	if isTaggedTemplateExpression(callLike) {
		if isPropertyAccessExpression(callLike.Tag) {
			return callLike.Tag.Name
		} else {
			return callLike.Tag
		}
	}
	if isJsxOpeningLikeElement(callLike) {
		return callLike.TagName
	}
	return callLike
}

func (c *Checker) isPromiseResolveArityError(node CallLikeExpression) bool {
	if !isCallExpression(node) || !isIdentifier(node.Expression) {
		return false
	}

	symbol := c.resolveName(node.Expression, node.Expression.EscapedText, ast.SymbolFlagsValue, nil /*nameNotFoundMessage*/, false /*isUse*/)
	decl := symbol. /* ? */ valueDeclaration
	if decl == nil || !isParameter(decl) || !isFunctionExpressionOrArrowFunction(decl.Parent) || !isNewExpression(decl.Parent.Parent) || !isIdentifier(decl.Parent.Parent.Expression) {
		return false
	}

	globalPromiseSymbol := c.getGlobalPromiseConstructorSymbol(false)
	if globalPromiseSymbol == nil {
		return false
	}

	constructorSymbol := c.getSymbolAtLocation(decl.Parent.Parent.Expression, true /*ignoreErrors*/)
	return constructorSymbol == globalPromiseSymbol
}

func (c *Checker) getArgumentArityError(node CallLikeExpression, signatures []Signature, args []Expression, headMessage DiagnosticMessage) Diagnostic {
	spreadIndex := c.getSpreadArgumentIndex(args)
	if spreadIndex > -1 {
		return createDiagnosticForNode(args[spreadIndex], Diagnostics.A_spread_argument_must_either_have_a_tuple_type_or_be_passed_to_a_rest_parameter)
	}
	min := Number.POSITIVE_INFINITY
	// smallest parameter count
	max := Number.NEGATIVE_INFINITY
	// largest parameter count
	maxBelow := Number.NEGATIVE_INFINITY
	// largest parameter count that is smaller than the number of arguments
	minAbove := Number.POSITIVE_INFINITY
	// smallest parameter count that is larger than the number of arguments

	var closestSignature *Signature
	for _, sig := range signatures {
		minParameter := c.getMinArgumentCount(sig)
		maxParameter := c.getParameterCount(sig)
		// smallest/largest parameter counts
		if minParameter < min {
			min = minParameter
			closestSignature = sig
		}
		max = max(max, maxParameter)
		// shortest parameter count *longer than the call*/longest parameter count *shorter than the call*
		if minParameter < args.length && minParameter > maxBelow {
			maxBelow = minParameter
		}
		if args.length < maxParameter && maxParameter < minAbove {
			minAbove = maxParameter
		}
	}
	hasRestParameter := core.Some(signatures, c.hasEffectiveRestParameter)
	var parameterRange /* TODO(TS-TO-GO) inferred type string | number */ any
	switch {
	case hasRestParameter:
		parameterRange = min
	case min < max:
		parameterRange = min + "-" + max
	default:
		parameterRange = min
	}
	isVoidPromiseError := !hasRestParameter && parameterRange == 1 && args.length == 0 && c.isPromiseResolveArityError(node)
	if isVoidPromiseError && isInJSFile(node) {
		return c.getDiagnosticForCallNode(node, Diagnostics.Expected_1_argument_but_got_0_new_Promise_needs_a_JSDoc_hint_to_produce_a_resolve_that_can_be_called_without_arguments)
	}
	var error any
	switch {
	case isDecorator(node):
		if hasRestParameter {
			error = Diagnostics.The_runtime_will_invoke_the_decorator_with_1_arguments_but_the_decorator_expects_at_least_0
		} else {
			error = Diagnostics.The_runtime_will_invoke_the_decorator_with_1_arguments_but_the_decorator_expects_0
		}
	case hasRestParameter:
		error = Diagnostics.Expected_at_least_0_arguments_but_got_1
	case isVoidPromiseError:
		error = Diagnostics.Expected_0_arguments_but_got_1_Did_you_forget_to_include_void_in_your_type_argument_to_Promise
	default:
		error = Diagnostics.Expected_0_arguments_but_got_1
	}

	if min < args.length && args.length < max {
		// between min and max, but with no matching overload
		if headMessage != nil {
			chain := chainDiagnosticMessages(nil, Diagnostics.No_overload_expects_0_arguments_but_overloads_do_exist_that_expect_either_1_or_2_arguments, args.length, maxBelow, minAbove)
			chain = chainDiagnosticMessages(chain, headMessage)
			return c.getDiagnosticForCallNode(node, chain)
		}
		return c.getDiagnosticForCallNode(node, Diagnostics.No_overload_expects_0_arguments_but_overloads_do_exist_that_expect_either_1_or_2_arguments, args.length, maxBelow, minAbove)
	} else if args.length < min {
		// too short: put the error span on the call expression, not any of the args
		var diagnostic Diagnostic
		if headMessage != nil {
			chain := chainDiagnosticMessages(nil, error, parameterRange, args.length)
			chain = chainDiagnosticMessages(chain, headMessage)
			diagnostic = c.getDiagnosticForCallNode(node, chain)
		} else {
			diagnostic = c.getDiagnosticForCallNode(node, error, parameterRange, args.length)
		}
		parameter := closestSignature. /* ? */ declaration. /* ? */ parameters[ifElse(closestSignature.thisParameter != nil, args.length+1, args.length)]
		if parameter != nil {
			var messageAndArgs DiagnosticAndArguments
			switch {
			case isBindingPattern(parameter.Name):
				messageAndArgs = []any{Diagnostics.An_argument_matching_this_binding_pattern_was_not_provided}
			case isRestParameter(parameter):
				messageAndArgs = []any{Diagnostics.Arguments_for_the_rest_parameter_0_were_not_provided, idText(getFirstIdentifier(parameter.Name))}
			default:
				messageAndArgs = []any{Diagnostics.An_argument_for_0_was_not_provided, ifElse(!parameter.Name, args.length, idText(getFirstIdentifier(parameter.Name)))}
			}
			parameterError := createDiagnosticForNode(parameter, messageAndArgs...)
			return addRelatedInfo(diagnostic, parameterError)
		}
		return diagnostic
	} else {
		// too long; error goes on the excess parameters
		errorSpan := factory.createNodeArray(args.slice(max))
		pos := core.FirstOrNil(errorSpan).Pos
		end := core.LastOrNil(errorSpan).End
		if end == pos {
			end++
		}
		setTextRangePosEnd(errorSpan, pos, end)
		if headMessage != nil {
			chain := chainDiagnosticMessages(nil, error, parameterRange, args.length)
			chain = chainDiagnosticMessages(chain, headMessage)
			return createDiagnosticForNodeArrayFromMessageChain(getSourceFileOfNode(node), errorSpan, chain)
		}
		return createDiagnosticForNodeArray(getSourceFileOfNode(node), errorSpan, error, parameterRange, args.length)
	}
}

func (c *Checker) getTypeArgumentArityError(node *ast.Node, signatures []Signature, typeArguments NodeArray[TypeNode], headMessage DiagnosticMessage) DiagnosticWithLocation {
	argCount := typeArguments.length
	// No overloads exist
	if signatures.length == 1 {
		sig := signatures[0]
		min := c.getMinTypeArgumentCount(sig.typeParameters)
		max := length(sig.typeParameters)
		if headMessage != nil {
			chain := chainDiagnosticMessages(nil, Diagnostics.Expected_0_type_arguments_but_got_1, ifElse(min < max, min+"-"+max, min), argCount)
			chain = chainDiagnosticMessages(chain, headMessage)
			return createDiagnosticForNodeArrayFromMessageChain(getSourceFileOfNode(node), typeArguments, chain)
		}
		return createDiagnosticForNodeArray(getSourceFileOfNode(node), typeArguments, Diagnostics.Expected_0_type_arguments_but_got_1, ifElse(min < max, min+"-"+max, min), argCount)
	}
	// Overloads exist
	belowArgCount := -Infinity
	aboveArgCount := Infinity
	for _, sig := range signatures {
		min := c.getMinTypeArgumentCount(sig.typeParameters)
		max := length(sig.typeParameters)
		if min > argCount {
			aboveArgCount = min(aboveArgCount, min)
		} else if max < argCount {
			belowArgCount = max(belowArgCount, max)
		}
	}
	if belowArgCount != -Infinity && aboveArgCount != Infinity {
		if headMessage != nil {
			chain := chainDiagnosticMessages(nil, Diagnostics.No_overload_expects_0_type_arguments_but_overloads_do_exist_that_expect_either_1_or_2_type_arguments, argCount, belowArgCount, aboveArgCount)
			chain = chainDiagnosticMessages(chain, headMessage)
			return createDiagnosticForNodeArrayFromMessageChain(getSourceFileOfNode(node), typeArguments, chain)
		}
		return createDiagnosticForNodeArray(getSourceFileOfNode(node), typeArguments, Diagnostics.No_overload_expects_0_type_arguments_but_overloads_do_exist_that_expect_either_1_or_2_type_arguments, argCount, belowArgCount, aboveArgCount)
	}
	if headMessage != nil {
		chain := chainDiagnosticMessages(nil, Diagnostics.Expected_0_type_arguments_but_got_1, ifElse(belowArgCount == -Infinity, aboveArgCount, belowArgCount), argCount)
		chain = chainDiagnosticMessages(chain, headMessage)
		return createDiagnosticForNodeArrayFromMessageChain(getSourceFileOfNode(node), typeArguments, chain)
	}
	return createDiagnosticForNodeArray(getSourceFileOfNode(node), typeArguments, Diagnostics.Expected_0_type_arguments_but_got_1, ifElse(belowArgCount == -Infinity, aboveArgCount, belowArgCount), argCount)
}

func (c *Checker) resolveCall(node CallLikeExpression, signatures []Signature, candidatesOutArray *[]Signature, checkMode CheckMode, callChainFlags SignatureFlags, headMessage DiagnosticMessage) Signature {
	isTaggedTemplate := node.Kind == ast.KindTaggedTemplateExpression
	isDecorator := node.Kind == ast.KindDecorator
	isJsxOpeningOrSelfClosingElement := isJsxOpeningLikeElement(node)
	isInstanceof := node.Kind == ast.KindBinaryExpression
	reportErrors := !c.isInferencePartiallyBlocked && candidatesOutArray == nil

	var typeArguments *NodeArray[TypeNode]

	if !isDecorator && !isInstanceof && !isSuperCall(node) {
		typeArguments = node.AsCallExpression().TypeArguments

		// We already perform checking on the type arguments on the class declaration itself.
		if isTaggedTemplate || isJsxOpeningOrSelfClosingElement || node.AsCallExpression().Expression.Kind != ast.KindSuperKeyword {
			forEach(typeArguments, c.checkSourceElement)
		}
	}

	candidates := candidatesOutArray || []never{}
	// reorderCandidates fills up the candidates array directly
	c.reorderCandidates(signatures, candidates, callChainFlags)
	Debug.assert(candidates.length, "Revert #54442 and add a testcase with whatever triggered this")

	args := c.getEffectiveCallArguments(node)

	// The excludeArgument array contains true for each context sensitive argument (an argument
	// is context sensitive it is susceptible to a one-time permanent contextual typing).
	//
	// The idea is that we will perform type argument inference & assignability checking once
	// without using the susceptible parameters that are functions, and once more for those
	// parameters, contextually typing each as we go along.
	//
	// For a tagged template, then the first argument be 'undefined' if necessary because it
	// represents a TemplateStringsArray.
	//
	// For a decorator, no arguments are susceptible to contextual typing due to the fact
	// decorators are applied to a declaration by the emitter, and not to an expression.
	isSingleNonGenericCandidate := candidates.length == 1 && candidates[0].typeParameters == nil
	var argCheckMode CheckMode
	if !isDecorator && !isSingleNonGenericCandidate && core.Some(args, c.isContextSensitive) {
		argCheckMode = CheckModeSkipContextSensitive
	} else {
		argCheckMode = CheckModeNormal
	}

	// The following variables are captured and modified by calls to chooseOverload.
	// If overload resolution or type argument inference fails, we want to report the
	// best error possible. The best error is one which says that an argument was not
	// assignable to a parameter. This implies that everything else about the overload
	// was fine. So if there is any overload that is only incorrect because of an
	// argument, we will report an error on that one.
	//
	//     function foo(s: string): void;
	//     function foo(n: number): void; // Report argument error on this overload
	//     function foo(): void;
	//     foo(true);
	//
	// If none of the overloads even made it that far, there are two possibilities.
	// There was a problem with type arguments for some overload, in which case
	// report an error on that. Or none of the overloads even had correct arity,
	// in which case give an arity error.
	//
	//     function foo<T extends string>(x: T): void; // Report type argument error
	//     function foo(): void;
	//     foo<number>(0);
	//
	var candidatesForArgumentError *[]Signature
	var candidateForArgumentArityError *Signature
	var candidateForTypeArgumentError *Signature
	var result *Signature

	// If we are in signature help, a trailing comma indicates that we intend to provide another argument,
	// so we will only accept overloads with arity at least 1 higher than the current number of provided arguments.
	signatureHelpTrailingComma := checkMode&CheckModeIsForSignatureHelp != 0 && node.Kind == ast.KindCallExpression && node.Arguments.hasTrailingComma

	// Section 4.12.1:
	// if the candidate list contains one or more signatures for which the type of each argument
	// expression is a subtype of each corresponding parameter type, the return type of the first
	// of those signatures becomes the return type of the function call.
	// Otherwise, the return type of the first signature in the candidate list becomes the return
	// type of the function call.
	//
	// Whether the call is an error is determined by assignability of the arguments. The subtype pass
	// is just important for choosing the best signature. So in the case where there is only one
	// signature, the subtype pass is useless. So skipping it is an optimization.
	if candidates.length > 1 {
		result = chooseOverload(candidates, c.subtypeRelation, isSingleNonGenericCandidate, signatureHelpTrailingComma)
	}
	if result == nil {
		result = chooseOverload(candidates, c.assignableRelation, isSingleNonGenericCandidate, signatureHelpTrailingComma)
	}
	if result != nil {
		return result
	}

	result = c.getCandidateForOverloadFailure(node, candidates, args, candidatesOutArray != nil, checkMode)
	// Preemptively cache the result; getResolvedSignature will do this after we return, but
	// we need to ensure that the result is present for the error checks below so that if
	// this signature is encountered again, we handle the circularity (rather than producing a
	// different result which may produce no errors and assert). Callers of getResolvedSignature
	// don't hit this issue because they only observe this result after it's had a chance to
	// be cached, but the error reporting code below executes before getResolvedSignature sets
	// resolvedSignature.
	c.getNodeLinks(node).resolvedSignature = result

	// No signatures were applicable. Now report errors based on the last applicable signature with
	// no arguments excluded from assignability checks.
	// If candidate is undefined, it means that no candidates had a suitable arity. In that case,
	// skip the checkApplicableSignature check.
	if reportErrors {
		// If the call expression is a synthetic call to a `[Symbol.hasInstance]` method then we will produce a head
		// message when reporting diagnostics that explains how we got to `right[Symbol.hasInstance](left)` from
		// `left instanceof right`, as it pertains to "Argument" related messages reported for the call.
		if headMessage == nil && isInstanceof {
			headMessage = Diagnostics.The_left_hand_side_of_an_instanceof_expression_must_be_assignable_to_the_first_argument_of_the_right_hand_side_s_Symbol_hasInstance_method
		}
		if candidatesForArgumentError != nil {
			if candidatesForArgumentError.length == 1 || candidatesForArgumentError.length > 3 {
				last := candidatesForArgumentError[candidatesForArgumentError.length-1]
				var chain *DiagnosticMessageChain
				if candidatesForArgumentError.length > 3 {
					chain = chainDiagnosticMessages(chain, Diagnostics.The_last_overload_gave_the_following_error)
					chain = chainDiagnosticMessages(chain, Diagnostics.No_overload_matches_this_call)
				}
				if headMessage != nil {
					chain = chainDiagnosticMessages(chain, headMessage)
				}
				diags := c.getSignatureApplicabilityError(node, args, last, c.assignableRelation, CheckModeNormal, true /*reportErrors*/, func() *DiagnosticMessageChain {
					return chain
				}, nil /*inferenceContext*/)
				if diags != nil {
					for _, d := range diags {
						if last.declaration != nil && candidatesForArgumentError.length > 3 {
							addRelatedInfo(d, createDiagnosticForNode(last.declaration, Diagnostics.The_last_overload_is_declared_here))
						}
						addImplementationSuccessElaboration(last, d)
						c.diagnostics.add(d)
					}
				} else {
					Debug.fail("No error for last overload signature")
				}
			} else {
				var allDiagnostics [][]DiagnosticRelatedInformation = []never{}
				max := 0
				min := Number.MAX_VALUE
				minIndex := 0
				i := 0
				for _, c := range candidatesForArgumentError {
					chain := func() DiagnosticMessageChain {
						return chainDiagnosticMessages(nil, Diagnostics.Overload_0_of_1_2_gave_the_following_error, i+1, candidates.length, c.signatureToString(c))
					}
					diags := c.getSignatureApplicabilityError(node, args, c, c.assignableRelation, CheckModeNormal, true /*reportErrors*/, chain, nil /*inferenceContext*/)
					if diags != nil {
						if diags.length <= min {
							min = diags.length
							minIndex = i
						}
						max = max(max, diags.length)
						allDiagnostics.push(diags)
					} else {
						Debug.fail("No error for 3 or fewer overload signatures")
					}
					i++
				}

				var diags []DiagnosticRelatedInformation
				if max > 1 {
					diags = allDiagnostics[minIndex]
				} else {
					diags = flatten(allDiagnostics)
				}
				Debug.assert(diags.length > 0, "No errors reported for 3 or fewer overload signatures")
				chain := chainDiagnosticMessages(core.Map(diags, createDiagnosticMessageChainFromDiagnostic), Diagnostics.No_overload_matches_this_call)
				if headMessage != nil {
					chain = chainDiagnosticMessages(chain, headMessage)
				}
				// The below is a spread to guarantee we get a new (mutable) array - our `flatMap` helper tries to do "smart" optimizations where it reuses input
				// arrays and the emptyArray singleton where possible, which is decidedly not what we want while we're still constructing this diagnostic
				related := []DiagnosticRelatedInformation{ /* TODO(TS-TO-GO) Expression SpreadElement: ...flatMap(diags, d => (d as Diagnostic).relatedInformation) as DiagnosticRelatedInformation[] */ }
				var diag Diagnostic
				if core.Every(diags, func(d DiagnosticRelatedInformation) bool {
					return d.start == diags[0].start && d.length == diags[0].length && d.file == diags[0].file
				}) {
					TODO_IDENTIFIER := diags[0]
					diag = Diagnostic{
						file:               file,
						start:              start,
						length:             length,
						code:               chain.code,
						category:           chain.category,
						messageText:        chain,
						relatedInformation: related,
					}
				} else {
					diag = createDiagnosticForNodeFromMessageChain(getSourceFileOfNode(node), c.getErrorNodeForCallNode(node), chain, related)
				}
				addImplementationSuccessElaboration(candidatesForArgumentError[0], diag)
				c.diagnostics.add(diag)
			}
		} else if candidateForArgumentArityError != nil {
			c.diagnostics.add(c.getArgumentArityError(node, []Signature{candidateForArgumentArityError}, args, headMessage))
		} else if candidateForTypeArgumentError != nil {
			c.checkTypeArguments(candidateForTypeArgumentError, (node /* as CallExpression | TaggedTemplateExpression | JsxOpeningLikeElement */).TypeArguments, true /*reportErrors*/, headMessage)
		} else {
			signaturesWithCorrectTypeArgumentArity := core.Filter(signatures, func(s Signature) bool {
				return c.hasCorrectTypeArgumentArity(s, typeArguments)
			})
			if signaturesWithCorrectTypeArgumentArity.length == 0 {
				c.diagnostics.add(c.getTypeArgumentArityError(node, signatures, typeArguments, headMessage))
			} else {
				c.diagnostics.add(c.getArgumentArityError(node, signaturesWithCorrectTypeArgumentArity, args, headMessage))
			}
		}
	}

	return result

	addImplementationSuccessElaboration := func(failed Signature, diagnostic Diagnostic) {
		oldCandidatesForArgumentError := candidatesForArgumentError
		oldCandidateForArgumentArityError := candidateForArgumentArityError
		oldCandidateForTypeArgumentError := candidateForTypeArgumentError

		failedSignatureDeclarations := failed.declaration. /* ? */ symbol. /* ? */ declarations || emptyArray
		isOverload := failedSignatureDeclarations.length > 1
		var implDecl Declaration
		if isOverload {
			implDecl = core.Find(failedSignatureDeclarations, func(d Declaration) bool {
				return isFunctionLikeDeclaration(d) && nodeIsPresent(d.Body)
			})
		} else {
			implDecl = nil
		}
		if implDecl != nil {
			candidate := c.getSignatureFromDeclaration(implDecl.AsFunctionLikeDeclaration())
			isSingleNonGenericCandidate := candidate.typeParameters == nil
			if chooseOverload([]Signature{candidate}, c.assignableRelation, isSingleNonGenericCandidate) != nil {
				addRelatedInfo(diagnostic, createDiagnosticForNode(implDecl, Diagnostics.The_call_would_have_succeeded_against_this_implementation_but_implementation_signatures_of_overloads_are_not_externally_visible))
			}
		}

		candidatesForArgumentError = oldCandidatesForArgumentError
		candidateForArgumentArityError = oldCandidateForArgumentArityError
		candidateForTypeArgumentError = oldCandidateForTypeArgumentError
	}

	chooseOverload := func(candidates []Signature, relation Map[string, RelationComparisonResult], isSingleNonGenericCandidate bool, signatureHelpTrailingComma bool /*  = false */) *Signature {
		candidatesForArgumentError = nil
		candidateForArgumentArityError = nil
		candidateForTypeArgumentError = nil

		if isSingleNonGenericCandidate {
			candidate := candidates[0]
			if core.Some(typeArguments) || !c.hasCorrectArity(node, args, candidate, signatureHelpTrailingComma) {
				return nil
			}
			if c.getSignatureApplicabilityError(node, args, candidate, relation, CheckModeNormal, false /*reportErrors*/, nil /*containingMessageChain*/, nil /*inferenceContext*/) != nil {
				candidatesForArgumentError = []Signature{candidate}
				return nil
			}
			return candidate
		}

		for candidateIndex := 0; candidateIndex < candidates.length; candidateIndex++ {
			candidate := candidates[candidateIndex]
			if !c.hasCorrectTypeArgumentArity(candidate, typeArguments) || !c.hasCorrectArity(node, args, candidate, signatureHelpTrailingComma) {
				continue
			}

			var checkCandidate Signature
			var inferenceContext *InferenceContext

			if candidate.typeParameters != nil {
				// If we are *inside the body of candidate*, we need to create a clone of `candidate` with differing type parameter identities,
				// so our inference results for this call doesn't pollute expression types referencing the outer type parameter!
				paramLocation := candidate.typeParameters[0].symbol.Declarations[0]. /* ? */ parent
				candidateParameterContext := paramLocation || (ifElse(candidate.declaration != nil && isConstructorDeclaration(candidate.declaration), candidate.declaration.Parent, candidate.declaration))
				if candidateParameterContext != nil && findAncestor(node, func(a *ast.Node) bool {
					return a == candidateParameterContext
				}) != nil {
					candidate = c.getImplementationSignature(candidate)
				}
				var typeArgumentTypes *[]*Type
				if core.Some(typeArguments) {
					typeArgumentTypes = c.checkTypeArguments(candidate, typeArguments, false /*reportErrors*/)
					if typeArgumentTypes == nil {
						candidateForTypeArgumentError = candidate
						continue
					}
				} else {
					inferenceContext = c.createInferenceContext(candidate.typeParameters, candidate, ifElse(isInJSFile(node), InferenceFlagsAnyDefault, InferenceFlagsNone) /*flags*/)
					// The resulting type arguments are instantiated with the inference context mapper, as the inferred types may still contain references to the inference context's
					//  type variables via contextual projection. These are kept generic until all inferences are locked in, so the dependencies expressed can pass constraint checks.
					typeArgumentTypes = c.instantiateTypes(c.inferTypeArguments(node, candidate, args, argCheckMode|CheckModeSkipGenericFunctions, inferenceContext), inferenceContext.nonFixingMapper)
					if inferenceContext.flags&InferenceFlagsSkippedGenericFunction != 0 {
						argCheckMode |= CheckModeSkipGenericFunctions
					} else {
						argCheckMode |= CheckModeNormal
					}
				}
				checkCandidate = c.getSignatureInstantiation(candidate, typeArgumentTypes, isInJSFile(candidate.declaration), inferenceContext && inferenceContext.inferredTypeParameters)
				// If the original signature has a generic rest type, instantiation may produce a
				// signature with different arity and we need to perform another arity check.
				if c.getNonArrayRestType(candidate) != nil && !c.hasCorrectArity(node, args, checkCandidate, signatureHelpTrailingComma) {
					candidateForArgumentArityError = checkCandidate
					continue
				}
			} else {
				checkCandidate = candidate
			}
			if c.getSignatureApplicabilityError(node, args, checkCandidate, relation, argCheckMode, false /*reportErrors*/, nil /*containingMessageChain*/, inferenceContext) != nil {
				// Give preference to error candidates that have no rest parameters (as they are more specific)
				(candidatesForArgumentError || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: candidatesForArgumentError = [] */ TODO)).push(checkCandidate)
				continue
			}
			if argCheckMode != 0 {
				// If one or more context sensitive arguments were excluded, we start including
				// them now (and keeping do so for any subsequent candidates) and perform a second
				// round of type inference and applicability checking for this particular candidate.
				argCheckMode = CheckModeNormal
				if inferenceContext != nil {
					typeArgumentTypes := c.instantiateTypes(c.inferTypeArguments(node, candidate, args, argCheckMode, inferenceContext), inferenceContext.mapper)
					checkCandidate = c.getSignatureInstantiation(candidate, typeArgumentTypes, isInJSFile(candidate.declaration), inferenceContext.inferredTypeParameters)
					// If the original signature has a generic rest type, instantiation may produce a
					// signature with different arity and we need to perform another arity check.
					if c.getNonArrayRestType(candidate) != nil && !c.hasCorrectArity(node, args, checkCandidate, signatureHelpTrailingComma) {
						candidateForArgumentArityError = checkCandidate
						continue
					}
				}
				if c.getSignatureApplicabilityError(node, args, checkCandidate, relation, argCheckMode, false /*reportErrors*/, nil /*containingMessageChain*/, inferenceContext) != nil {
					// Give preference to error candidates that have no rest parameters (as they are more specific)
					(candidatesForArgumentError || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: candidatesForArgumentError = [] */ TODO)).push(checkCandidate)
					continue
				}
			}
			candidates[candidateIndex] = checkCandidate
			return checkCandidate
		}

		return nil
	}

}

// No signature was applicable. We have already reported the errors for the invalid signature.
func (c *Checker) getCandidateForOverloadFailure(node CallLikeExpression, candidates []Signature, args []Expression, hasCandidatesOutArray bool, checkMode CheckMode) Signature {
	Debug.assert(candidates.length > 0)
	// Else should not have called this.
	c.checkNodeDeferred(node)
	// Normally we will combine overloads. Skip this if they have type parameters since that's hard to combine.
	// Don't do this if there is a `candidatesOutArray`,
	// because then we want the chosen best candidate to be one of the overloads, not a combination.
	if hasCandidatesOutArray || candidates.length == 1 || candidates.some(func(c Signature) bool {
		return c.typeParameters != nil
	}) {
		return c.pickLongestCandidateSignature(node, candidates, args, checkMode)
	} else {
		return c.createUnionOfSignaturesForOverloadFailure(candidates)
	}
}

func (c *Checker) createUnionOfSignaturesForOverloadFailure(candidates []Signature) Signature {
	thisParameters := mapDefined(candidates, func(c Signature) *ast.Symbol {
		return c.thisParameter
	})
	var thisParameter *ast.Symbol
	if thisParameters.length != 0 {
		thisParameter = c.createCombinedSymbolFromTypes(thisParameters, thisParameters.map_(c.getTypeOfParameter))
	}
	TODO_IDENTIFIER := minAndMax(candidates, c.getNumNonRestParameters)
	var parameters []*ast.Symbol = []never{}
	for i := 0; i < maxNonRestParam; i++ {
		symbols := mapDefined(candidates, func(s Signature) *ast.Symbol {
			switch {
			case signatureHasRestParameter(s):
				if i < s.parameters.length-1 {
					return s.parameters[i]
				} else {
					return core.LastOrNil(s.parameters)
				}
			case i < s.parameters.length:
				return s.parameters[i]
			default:
				return nil
			}
		})
		Debug.assert(symbols.length != 0)
		parameters.push(c.createCombinedSymbolFromTypes(symbols, mapDefined(candidates, func(candidate Signature) *Type {
			return c.tryGetTypeAtPosition(candidate, i)
		})))
	}
	restParameterSymbols := mapDefined(candidates, func(c Signature) *ast.Symbol {
		if signatureHasRestParameter(c) {
			return core.LastOrNil(c.parameters)
		} else {
			return nil
		}
	})
	flags := SignatureFlagsIsSignatureCandidateForOverloadFailure
	if restParameterSymbols.length != 0 {
		t := c.createArrayType(c.getUnionType(mapDefined(candidates, c.tryGetRestTypeOfSignature), UnionReductionSubtype))
		parameters.push(c.createCombinedSymbolForOverloadFailure(restParameterSymbols, t))
		flags |= SignatureFlagsHasRestParameter
	}
	if candidates.some(signatureHasLiteralTypes) {
		flags |= SignatureFlagsHasLiteralTypes
	}
	return c.createSignature(candidates[0].declaration, nil, thisParameter, parameters, c.getIntersectionType(candidates.map_(c.getReturnTypeOfSignature)), nil, minArgumentCount, flags)
}

func (c *Checker) getNumNonRestParameters(signature Signature) number {
	numParams := signature.parameters.length
	if signatureHasRestParameter(signature) {
		return numParams - 1
	} else {
		return numParams
	}
}

func (c *Checker) createCombinedSymbolFromTypes(sources []*ast.Symbol, types []*Type) *ast.Symbol {
	return c.createCombinedSymbolForOverloadFailure(sources, c.getUnionType(types, UnionReductionSubtype))
}

func (c *Checker) createCombinedSymbolForOverloadFailure(sources []*ast.Symbol, t *Type) *ast.Symbol {
	// This function is currently only used for erroneous overloads, so it's good enough to just use the first source.
	return c.createSymbolWithType(core.FirstOrNil(sources), t)
}

func (c *Checker) pickLongestCandidateSignature(node CallLikeExpression, candidates []Signature, args []Expression, checkMode CheckMode) Signature {
	// Pick the longest signature. This way we can get a contextual type for cases like:
	//     declare function f(a: { xa: number; xb: number; }, b: number);
	//     f({ |
	// Also, use explicitly-supplied type arguments if they are provided, so we can get a contextual signature in cases like:
	//     declare function f<T>(k: keyof T);
	//     f<Foo>("
	bestIndex := c.getLongestCandidateIndex(candidates, ifElse(c.apparentArgumentCount == nil, args.length, c.apparentArgumentCount))
	candidate := candidates[bestIndex]
	TODO_IDENTIFIER := candidate
	if typeParameters == nil {
		return candidate
	}

	var typeArgumentNodes *[]TypeNode
	if c.callLikeExpressionMayHaveTypeArguments(node) {
		typeArgumentNodes = node.TypeArguments
	} else {
		typeArgumentNodes = nil
	}
	var instantiated Signature
	if typeArgumentNodes != nil {
		instantiated = c.createSignatureInstantiation(candidate, c.getTypeArgumentsFromNodes(typeArgumentNodes, typeParameters, isInJSFile(node)))
	} else {
		instantiated = c.inferSignatureInstantiationForOverloadFailure(node, typeParameters, candidate, args, checkMode)
	}
	candidates[bestIndex] = instantiated
	return instantiated
}

func (c *Checker) getTypeArgumentsFromNodes(typeArgumentNodes []TypeNode, typeParameters []TypeParameter, isJs bool) []*Type {
	typeArguments := typeArgumentNodes.map_(c.getTypeOfNode)
	for typeArguments.length > typeParameters.length {
		typeArguments.pop()
	}
	for typeArguments.length < typeParameters.length {
		typeArguments.push(c.getDefaultFromTypeParameter(typeParameters[typeArguments.length]) || c.getConstraintOfTypeParameter(typeParameters[typeArguments.length]) || c.getDefaultTypeArgumentType(isJs))
	}
	return typeArguments
}

func (c *Checker) inferSignatureInstantiationForOverloadFailure(node CallLikeExpression, typeParameters []TypeParameter, candidate Signature, args []Expression, checkMode CheckMode) Signature {
	inferenceContext := c.createInferenceContext(typeParameters, candidate, ifElse(isInJSFile(node), InferenceFlagsAnyDefault, InferenceFlagsNone) /*flags*/)
	typeArgumentTypes := c.inferTypeArguments(node, candidate, args, checkMode|CheckModeSkipContextSensitive|CheckModeSkipGenericFunctions, inferenceContext)
	return c.createSignatureInstantiation(candidate, typeArgumentTypes)
}

func (c *Checker) getLongestCandidateIndex(candidates []Signature, argsCount number) number {
	maxParamsIndex := -1
	maxParams := -1

	for i := 0; i < candidates.length; i++ {
		candidate := candidates[i]
		paramCount := c.getParameterCount(candidate)
		if c.hasEffectiveRestParameter(candidate) || paramCount >= argsCount {
			return i
		}
		if paramCount > maxParams {
			maxParams = paramCount
			maxParamsIndex = i
		}
	}

	return maxParamsIndex
}

func (c *Checker) resolveCallExpression(node CallExpression, candidatesOutArray *[]Signature, checkMode CheckMode) Signature {
	if node.Expression.Kind == ast.KindSuperKeyword {
		superType := c.checkSuperExpression(node.Expression)
		if c.isTypeAny(superType) {
			for _, arg := range node.Arguments {
				c.checkExpression(arg)
				// Still visit arguments so they get marked for visibility, etc
			}
			return c.anySignature
		}
		if !c.isErrorType(superType) {
			// In super call, the candidate signatures are the matching arity signatures of the base constructor function instantiated
			// with the type arguments specified in the extends clause.
			baseTypeNode := getEffectiveBaseTypeNode(getContainingClass(node))
			if baseTypeNode != nil {
				baseConstructors := c.getInstantiatedConstructorsForTypeArguments(superType, baseTypeNode.TypeArguments, baseTypeNode)
				return c.resolveCall(node, baseConstructors, candidatesOutArray, checkMode, SignatureFlagsNone)
			}
		}
		return c.resolveUntypedCall(node)
	}

	var callChainFlags SignatureFlags
	funcType := c.checkExpression(node.Expression)
	if isCallChain(node) {
		nonOptionalType := c.getOptionalExpressionType(funcType, node.Expression)
		switch {
		case nonOptionalType == funcType:
			callChainFlags = SignatureFlagsNone
		case isOutermostOptionalChain(node):
			callChainFlags = SignatureFlagsIsOuterCallChain
		default:
			callChainFlags = SignatureFlagsIsInnerCallChain
		}
		funcType = nonOptionalType
	} else {
		callChainFlags = SignatureFlagsNone
	}

	funcType = c.checkNonNullTypeWithReporter(funcType, node.Expression, c.reportCannotInvokePossiblyNullOrUndefinedError)

	if funcType == c.silentNeverType {
		return c.silentNeverSignature
	}

	apparentType := c.getApparentType(funcType)
	if c.isErrorType(apparentType) {
		// Another error has already been reported
		return c.resolveErrorCall(node)
	}

	// Technically, this signatures list may be incomplete. We are taking the apparent type,
	// but we are not including call signatures that may have been added to the Object or
	// Function interface, since they have none by default. This is a bit of a leap of faith
	// that the user will not add any.
	callSignatures := c.getSignaturesOfType(apparentType, SignatureKindCall)
	numConstructSignatures := c.getSignaturesOfType(apparentType, SignatureKindConstruct).length

	// TS 1.0 Spec: 4.12
	// In an untyped function call no TypeArgs are permitted, Args can be any argument list, no contextual
	// types are provided for the argument expressions, and the result is always of type Any.
	if c.isUntypedFunctionCall(funcType, apparentType, callSignatures.length, numConstructSignatures) {
		// The unknownType indicates that an error already occurred (and was reported).  No
		// need to report another error in this case.
		if !c.isErrorType(funcType) && node.TypeArguments != nil {
			c.error(node, Diagnostics.Untyped_function_calls_may_not_accept_type_arguments)
		}
		return c.resolveUntypedCall(node)
	}
	// If FuncExpr's apparent type(section 3.8.1) is a function type, the call is a typed function call.
	// TypeScript employs overload resolution in typed function calls in order to support functions
	// with multiple call signatures.
	if callSignatures.length == 0 {
		if numConstructSignatures != 0 {
			c.error(node, Diagnostics.Value_of_type_0_is_not_callable_Did_you_mean_to_include_new, c.typeToString(funcType))
		} else {
			var relatedInformation *DiagnosticRelatedInformation
			if node.Arguments.length == 1 {
				text := getSourceFileOfNode(node).Text
				if isLineBreak(text.charCodeAt(skipTrivia(text, node.Expression.End, true /*stopAfterLineBreak*/) - 1)) {
					relatedInformation = createDiagnosticForNode(node.Expression, Diagnostics.Are_you_missing_a_semicolon)
				}
			}
			c.invocationError(node.Expression, apparentType, SignatureKindCall, relatedInformation)
		}
		return c.resolveErrorCall(node)
	}
	// When a call to a generic function is an argument to an outer call to a generic function for which
	// inference is in process, we have a choice to make. If the inner call relies on inferences made from
	// its contextual type to its return type, deferring the inner call processing allows the best possible
	// contextual type to accumulate. But if the outer call relies on inferences made from the return type of
	// the inner call, the inner call should be processed early. There's no sure way to know which choice is
	// right (only a full unification algorithm can determine that), so we resort to the following heuristic:
	// If no type arguments are specified in the inner call and at least one call signature is generic and
	// returns a function type, we choose to defer processing. This narrowly permits function composition
	// operators to flow inferences through return types, but otherwise processes calls right away. We
	// use the resolvingSignature singleton to indicate that we deferred processing. This result will be
	// propagated out and eventually turned into silentNeverType (a type that is assignable to anything and
	// from which we never make inferences).
	if checkMode&CheckModeSkipGenericFunctions != 0 && node.TypeArguments == nil && callSignatures.some(c.isGenericFunctionReturningFunction) {
		c.skippedGenericFunction(node, checkMode)
		return c.resolvingSignature
	}
	// If the function is explicitly marked with `@class`, then it must be constructed.
	if callSignatures.some(func(sig Signature) bool {
		return isInJSFile(sig.declaration) && getJSDocClassTag(sig.declaration) != nil
	}) {
		c.error(node, Diagnostics.Value_of_type_0_is_not_callable_Did_you_mean_to_include_new, c.typeToString(funcType))
		return c.resolveErrorCall(node)
	}

	return c.resolveCall(node, callSignatures, candidatesOutArray, checkMode, callChainFlags)
}

func (c *Checker) isGenericFunctionReturningFunction(signature Signature) bool {
	return signature.typeParameters != nil && c.isFunctionType(c.getReturnTypeOfSignature(signature))
}

/**
 * TS 1.0 spec: 4.12
 * If FuncExpr is of type Any, or of an object type that has no call or construct signatures
 * but is a subtype of the Function interface, the call is an untyped function call.
 */

func (c *Checker) isUntypedFunctionCall(funcType *Type, apparentFuncType *Type, numCallSignatures number, numConstructSignatures number) bool {
	// We exclude union types because we may have a union of function types that happen to have no common signatures.
	return c.isTypeAny(funcType) || c.isTypeAny(apparentFuncType) && funcType.flags&TypeFlagsTypeParameter != 0 || numCallSignatures == 0 && numConstructSignatures == 0 && apparentFuncType.flags&TypeFlagsUnion == 0 && c.getReducedType(apparentFuncType).flags&TypeFlagsNever == 0 && c.isTypeAssignableTo(funcType, c.globalFunctionType)
}

func (c *Checker) resolveNewExpression(node NewExpression, candidatesOutArray *[]Signature, checkMode CheckMode) Signature {
	expressionType := c.checkNonNullExpression(node.Expression)
	if expressionType == c.silentNeverType {
		return c.silentNeverSignature
	}

	// If expressionType's apparent type(section 3.8.1) is an object type with one or
	// more construct signatures, the expression is processed in the same manner as a
	// function call, but using the construct signatures as the initial set of candidate
	// signatures for overload resolution. The result type of the function call becomes
	// the result type of the operation.
	expressionType = c.getApparentType(expressionType)
	if c.isErrorType(expressionType) {
		// Another error has already been reported
		return c.resolveErrorCall(node)
	}

	// TS 1.0 spec: 4.11
	// If expressionType is of type Any, Args can be any argument
	// list and the result of the operation is of type Any.
	if c.isTypeAny(expressionType) {
		if node.TypeArguments != nil {
			c.error(node, Diagnostics.Untyped_function_calls_may_not_accept_type_arguments)
		}
		return c.resolveUntypedCall(node)
	}

	// Technically, this signatures list may be incomplete. We are taking the apparent type,
	// but we are not including construct signatures that may have been added to the Object or
	// Function interface, since they have none by default. This is a bit of a leap of faith
	// that the user will not add any.
	constructSignatures := c.getSignaturesOfType(expressionType, SignatureKindConstruct)
	if constructSignatures.length != 0 {
		if !c.isConstructorAccessible(node, constructSignatures[0]) {
			return c.resolveErrorCall(node)
		}
		// If the expression is a class of abstract type, or an abstract construct signature,
		// then it cannot be instantiated.
		// In the case of a merged class-module or class-interface declaration,
		// only the class declaration node will have the Abstract flag set.
		if c.someSignature(constructSignatures, func(signature Signature) bool {
			return signature.flags&SignatureFlagsAbstract != 0
		}) {
			c.error(node, Diagnostics.Cannot_create_an_instance_of_an_abstract_class)
			return c.resolveErrorCall(node)
		}
		valueDecl := expressionType.symbol && getClassLikeDeclarationOfSymbol(expressionType.symbol)
		if valueDecl != nil && hasSyntacticModifier(valueDecl, ast.ModifierFlagsAbstract) {
			c.error(node, Diagnostics.Cannot_create_an_instance_of_an_abstract_class)
			return c.resolveErrorCall(node)
		}

		return c.resolveCall(node, constructSignatures, candidatesOutArray, checkMode, SignatureFlagsNone)
	}

	// If expressionType's apparent type is an object type with no construct signatures but
	// one or more call signatures, the expression is processed as a function call. A compile-time
	// error occurs if the result of the function call is not Void. The type of the result of the
	// operation is Any. It is an error to have a Void this type.
	callSignatures := c.getSignaturesOfType(expressionType, SignatureKindCall)
	if callSignatures.length != 0 {
		signature := c.resolveCall(node, callSignatures, candidatesOutArray, checkMode, SignatureFlagsNone)
		if !c.noImplicitAny {
			if signature.declaration != nil && !c.isJSConstructor(signature.declaration) && c.getReturnTypeOfSignature(signature) != c.voidType {
				c.error(node, Diagnostics.Only_a_void_function_can_be_called_with_the_new_keyword)
			}
			if c.getThisTypeOfSignature(signature) == c.voidType {
				c.error(node, Diagnostics.A_function_that_is_called_with_the_new_keyword_cannot_have_a_this_type_that_is_void)
			}
		}
		return signature
	}

	c.invocationError(node.Expression, expressionType, SignatureKindConstruct)
	return c.resolveErrorCall(node)
}

func (c *Checker) someSignature(signatures Union[Signature, []Signature], f func(s Signature) bool) bool {
	if isArray(signatures) {
		return core.Some(signatures, func(signature Signature) bool {
			return c.someSignature(signature, f)
		})
	}
	if signatures.compositeKind == TypeFlagsUnion {
		return core.Some(signatures.compositeSignatures, f)
	} else {
		return f(signatures)
	}
}

func (c *Checker) typeHasProtectedAccessibleBase(target *ast.Symbol, t InterfaceType) bool {
	baseTypes := c.getBaseTypes(t)
	if length(baseTypes) == 0 {
		return false
	}
	firstBase := baseTypes[0]
	if firstBase.flags&TypeFlagsIntersection != 0 {
		types := firstBase.AsIntersectionType().types
		mixinFlags := c.findMixins(types)
		i := 0
		for _, intersectionMember := range firstBase.AsIntersectionType().types {
			// We want to ignore mixin ctors
			if !mixinFlags[i] {
				if getObjectFlags(intersectionMember)&(ObjectFlagsClass|ObjectFlagsInterface) != 0 {
					if intersectionMember.symbol == target {
						return true
					}
					if c.typeHasProtectedAccessibleBase(target, intersectionMember.AsInterfaceType()) {
						return true
					}
				}
			}
			i++
		}
		return false
	}
	if firstBase.symbol == target {
		return true
	}
	return c.typeHasProtectedAccessibleBase(target, firstBase.AsInterfaceType())
}

func (c *Checker) isConstructorAccessible(node NewExpression, signature Signature) bool {
	if !signature || signature.declaration == nil {
		return true
	}

	declaration := signature.declaration
	modifiers := getSelectedEffectiveModifierFlags(declaration, ast.ModifierFlagsNonPublicAccessibilityModifier)

	// (1) Public constructors and (2) constructor functions are always accessible.
	if modifiers == 0 || declaration.Kind != ast.KindConstructor {
		return true
	}

	declaringClassDeclaration := getClassLikeDeclarationOfSymbol(declaration.Parent.Symbol)
	declaringClass := c.getDeclaredTypeOfSymbol(declaration.Parent.Symbol).AsInterfaceType()

	// A private or protected constructor can only be instantiated within its own class (or a subclass, for protected)
	if !c.isNodeWithinClass(node, declaringClassDeclaration) {
		containingClass := getContainingClass(node)
		if containingClass != nil && modifiers&ast.ModifierFlagsProtected != 0 {
			containingType := c.getTypeOfNode(containingClass)
			if c.typeHasProtectedAccessibleBase(declaration.Parent.Symbol, containingType.AsInterfaceType()) {
				return true
			}
		}
		if modifiers&ast.ModifierFlagsPrivate != 0 {
			c.error(node, Diagnostics.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration, c.typeToString(declaringClass))
		}
		if modifiers&ast.ModifierFlagsProtected != 0 {
			c.error(node, Diagnostics.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration, c.typeToString(declaringClass))
		}
		return false
	}

	return true
}

func (c *Checker) invocationErrorDetails(errorTarget *ast.Node, apparentType *Type, kind SignatureKind) /* TODO(TS-TO-GO) TypeNode TypeLiteral: { messageChain: DiagnosticMessageChain; relatedMessage: DiagnosticMessage | undefined; } */ any {
	var errorInfo *DiagnosticMessageChain
	isCall := kind == SignatureKindCall
	awaitedType := c.getAwaitedType(apparentType)
	maybeMissingAwait := awaitedType && c.getSignaturesOfType(awaitedType, kind).length > 0
	if apparentType.flags&TypeFlagsUnion != 0 {
		types := apparentType.AsUnionType().types
		hasSignatures := false
		for _, constituent := range types {
			signatures := c.getSignaturesOfType(constituent, kind)
			if signatures.length != 0 {
				hasSignatures = true
				if errorInfo != nil {
					// Bail early if we already have an error, no chance of "No constituent of type is callable"
					break
				}
			} else {
				// Error on the first non callable constituent only
				if errorInfo == nil {
					errorInfo = chainDiagnosticMessages(errorInfo, ifElse(isCall, Diagnostics.Type_0_has_no_call_signatures, Diagnostics.Type_0_has_no_construct_signatures), c.typeToString(constituent))
					errorInfo = chainDiagnosticMessages(errorInfo, ifElse(isCall, Diagnostics.Not_all_constituents_of_type_0_are_callable, Diagnostics.Not_all_constituents_of_type_0_are_constructable), c.typeToString(apparentType))
				}
				if hasSignatures {
					// Bail early if we already found a siganture, no chance of "No constituent of type is callable"
					break
				}
			}
		}
		if !hasSignatures {
			errorInfo = chainDiagnosticMessages(nil, ifElse(isCall, Diagnostics.No_constituent_of_type_0_is_callable, Diagnostics.No_constituent_of_type_0_is_constructable), c.typeToString(apparentType))
		}
		if errorInfo == nil {
			errorInfo = chainDiagnosticMessages(errorInfo, ifElse(isCall, Diagnostics.Each_member_of_the_union_type_0_has_signatures_but_none_of_those_signatures_are_compatible_with_each_other, Diagnostics.Each_member_of_the_union_type_0_has_construct_signatures_but_none_of_those_signatures_are_compatible_with_each_other), c.typeToString(apparentType))
		}
	} else {
		errorInfo = chainDiagnosticMessages(errorInfo, ifElse(isCall, Diagnostics.Type_0_has_no_call_signatures, Diagnostics.Type_0_has_no_construct_signatures), c.typeToString(apparentType))
	}

	var headMessage any
	if isCall {
		headMessage = Diagnostics.This_expression_is_not_callable
	} else {
		headMessage = Diagnostics.This_expression_is_not_constructable
	}

	// Diagnose get accessors incorrectly called as functions
	if isCallExpression(errorTarget.Parent) && errorTarget.Parent.Arguments.length == 0 {
		TODO_IDENTIFIER := c.getNodeLinks(errorTarget)
		if resolvedSymbol != nil && resolvedSymbol.Flags&ast.SymbolFlagsGetAccessor != 0 {
			headMessage = Diagnostics.This_expression_is_not_callable_because_it_is_a_get_accessor_Did_you_mean_to_use_it_without
		}
	}

	return map[any]any{ /* TODO(TS-TO-GO): was object literal */
		"messageChain":   chainDiagnosticMessages(errorInfo, headMessage),
		"relatedMessage": ifElse(maybeMissingAwait, Diagnostics.Did_you_forget_to_use_await, nil),
	}
}

func (c *Checker) invocationError(errorTarget *ast.Node, apparentType *Type, kind SignatureKind, relatedInformation DiagnosticRelatedInformation) {
	TODO_IDENTIFIER := c.invocationErrorDetails(errorTarget, apparentType, kind)
	diagnostic := createDiagnosticForNodeFromMessageChain(getSourceFileOfNode(errorTarget), errorTarget, messageChain)
	if relatedInfo != nil {
		addRelatedInfo(diagnostic, createDiagnosticForNode(errorTarget, relatedInfo))
	}
	if isCallExpression(errorTarget.Parent) {
		TODO_IDENTIFIER := c.getDiagnosticSpanForCallNode(errorTarget.Parent)
		diagnostic.start = start
		diagnostic.length = length
	}
	c.diagnostics.add(diagnostic)
	c.invocationErrorRecovery(apparentType, kind, ifElse(relatedInformation != nil, addRelatedInfo(diagnostic, relatedInformation), diagnostic))
}

func (c *Checker) invocationErrorRecovery(apparentType *Type, kind SignatureKind, diagnostic Diagnostic) {
	if !apparentType.symbol {
		return
	}
	importNode := c.getSymbolLinks(apparentType.symbol).originatingImport
	// Create a diagnostic on the originating import if possible onto which we can attach a quickfix
	//  An import call expression cannot be rewritten into another form to correct the error - the only solution is to use `.default` at the use-site
	if importNode != nil && !isImportCall(importNode) {
		sigs := c.getSignaturesOfType(c.getTypeOfSymbol(c.getSymbolLinks(apparentType.symbol).target), kind)
		if !sigs || sigs.length == 0 {
			return
		}

		addRelatedInfo(diagnostic, createDiagnosticForNode(importNode, Diagnostics.Type_originates_at_this_import_A_namespace_style_import_cannot_be_called_or_constructed_and_will_cause_a_failure_at_runtime_Consider_using_a_default_import_or_import_require_here_instead))
	}
}

func (c *Checker) resolveTaggedTemplateExpression(node TaggedTemplateExpression, candidatesOutArray *[]Signature, checkMode CheckMode) Signature {
	tagType := c.checkExpression(node.Tag)
	apparentType := c.getApparentType(tagType)

	if c.isErrorType(apparentType) {
		// Another error has already been reported
		return c.resolveErrorCall(node)
	}

	callSignatures := c.getSignaturesOfType(apparentType, SignatureKindCall)
	numConstructSignatures := c.getSignaturesOfType(apparentType, SignatureKindConstruct).length

	if c.isUntypedFunctionCall(tagType, apparentType, callSignatures.length, numConstructSignatures) {
		return c.resolveUntypedCall(node)
	}

	if callSignatures.length == 0 {
		if isArrayLiteralExpression(node.Parent) {
			diagnostic := createDiagnosticForNode(node.Tag, Diagnostics.It_is_likely_that_you_are_missing_a_comma_to_separate_these_two_template_expressions_They_form_a_tagged_template_expression_which_cannot_be_invoked)
			c.diagnostics.add(diagnostic)
			return c.resolveErrorCall(node)
		}

		c.invocationError(node.Tag, apparentType, SignatureKindCall)
		return c.resolveErrorCall(node)
	}

	return c.resolveCall(node, callSignatures, candidatesOutArray, checkMode, SignatureFlagsNone)
}

/**
 * Gets the localized diagnostic head message to use for errors when resolving a decorator as a call expression.
 */

func (c *Checker) getDiagnosticHeadMessageForDecoratorResolution(node Decorator) any {
	switch node.Parent.Kind {
	case ast.KindClassDeclaration,
		ast.KindClassExpression:
		return Diagnostics.Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression
	case ast.KindParameter:
		return Diagnostics.Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression
	case ast.KindPropertyDeclaration:
		return Diagnostics.Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression
	case ast.KindMethodDeclaration,
		ast.KindGetAccessor,
		ast.KindSetAccessor:
		return Diagnostics.Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression
	default:
		return Debug.fail()
	}
}

/**
 * Resolves a decorator as if it were a call expression.
 */

func (c *Checker) resolveDecorator(node Decorator, candidatesOutArray *[]Signature, checkMode CheckMode) Signature {
	funcType := c.checkExpression(node.Expression)
	apparentType := c.getApparentType(funcType)
	if c.isErrorType(apparentType) {
		return c.resolveErrorCall(node)
	}

	callSignatures := c.getSignaturesOfType(apparentType, SignatureKindCall)
	numConstructSignatures := c.getSignaturesOfType(apparentType, SignatureKindConstruct).length
	if c.isUntypedFunctionCall(funcType, apparentType, callSignatures.length, numConstructSignatures) {
		return c.resolveUntypedCall(node)
	}

	if c.isPotentiallyUncalledDecorator(node, callSignatures) && !isParenthesizedExpression(node.Expression) {
		nodeStr := getTextOfNode(node.Expression, false /*includeTrivia*/)
		c.error(node, Diagnostics._0_accepts_too_few_arguments_to_be_used_as_a_decorator_here_Did_you_mean_to_call_it_first_and_write_0, nodeStr)
		return c.resolveErrorCall(node)
	}

	headMessage := c.getDiagnosticHeadMessageForDecoratorResolution(node)
	if callSignatures.length == 0 {
		errorDetails := c.invocationErrorDetails(node.Expression, apparentType, SignatureKindCall)
		messageChain := chainDiagnosticMessages(errorDetails.messageChain, headMessage)
		diag := createDiagnosticForNodeFromMessageChain(getSourceFileOfNode(node.Expression), node.Expression, messageChain)
		if errorDetails.relatedMessage != nil {
			addRelatedInfo(diag, createDiagnosticForNode(node.Expression, errorDetails.relatedMessage))
		}
		c.diagnostics.add(diag)
		c.invocationErrorRecovery(apparentType, SignatureKindCall, diag)
		return c.resolveErrorCall(node)
	}

	return c.resolveCall(node, callSignatures, candidatesOutArray, checkMode, SignatureFlagsNone, headMessage)
}

func (c *Checker) createSignatureForJSXIntrinsic(node JsxOpeningLikeElement, result *Type) Signature {
	namespace := c.getJsxNamespaceAt(node)
	exports := namespace && c.getExportsOfSymbol(namespace)
	// We fake up a SFC signature for each intrinsic, however a more specific per-element signature drawn from the JSX declaration
	// file would probably be preferable.
	typeSymbol := exports && c.getSymbol(exports, JsxNames.Element, ast.SymbolFlagsType)
	returnNode := typeSymbol && c.nodeBuilder.symbolToEntityName(typeSymbol, ast.SymbolFlagsType, node)
	declaration := factory.createFunctionTypeNode(nil, []ParameterDeclaration{factory.createParameterDeclaration(nil, nil /*dotDotDotToken*/, "props", nil /*questionToken*/, c.nodeBuilder.typeToTypeNode(result, node))}, ifElse(returnNode != nil, factory.createTypeReferenceNode(returnNode, nil /*typeArguments*/), factory.createKeywordTypeNode(ast.KindAnyKeyword)))
	parameterSymbol := c.createSymbol(ast.SymbolFlagsFunctionScopedVariable, "props" /* as __String */)
	parameterSymbol.Links.type_ = result
	return c.createSignature(declaration, nil, nil, []TransientSymbol{parameterSymbol}, ifElse(typeSymbol != nil, c.getDeclaredTypeOfSymbol(typeSymbol), c.errorType), nil, 1, SignatureFlagsNone)
}

func (c *Checker) resolveJsxOpeningLikeElement(node JsxOpeningLikeElement, candidatesOutArray *[]Signature, checkMode CheckMode) Signature {
	if c.isJsxIntrinsicTagName(node.TagName) {
		result := c.getIntrinsicAttributesTypeFromJsxOpeningLikeElement(node)
		fakeSignature := c.createSignatureForJSXIntrinsic(node, result)
		c.checkTypeAssignableToAndOptionallyElaborate(c.checkExpressionWithContextualType(node.Attributes, c.getEffectiveFirstArgumentForJsxSignature(fakeSignature, node), nil /*inferenceContext*/, CheckModeNormal), result, node.TagName, node.Attributes)
		if length(node.TypeArguments) != 0 {
			forEach(node.TypeArguments, c.checkSourceElement)
			c.diagnostics.add(createDiagnosticForNodeArray(getSourceFileOfNode(node), node.TypeArguments, Diagnostics.Expected_0_type_arguments_but_got_1, 0, length(node.TypeArguments)))
		}
		return fakeSignature
	}
	exprTypes := c.checkExpression(node.TagName)
	apparentType := c.getApparentType(exprTypes)
	if c.isErrorType(apparentType) {
		return c.resolveErrorCall(node)
	}

	signatures := c.getUninstantiatedJsxSignaturesOfType(exprTypes, node)
	if c.isUntypedFunctionCall(exprTypes, apparentType, signatures.length, 0 /*constructSignatures*/) {
		return c.resolveUntypedCall(node)
	}

	if signatures.length == 0 {
		// We found no signatures at all, which is an error
		c.error(node.TagName, Diagnostics.JSX_element_type_0_does_not_have_any_construct_or_call_signatures, getTextOfNode(node.TagName))
		return c.resolveErrorCall(node)
	}

	return c.resolveCall(node, signatures, candidatesOutArray, checkMode, SignatureFlagsNone)
}

func (c *Checker) resolveInstanceofExpression(node InstanceofExpression, candidatesOutArray *[]Signature, checkMode CheckMode) Signature {
	// if rightType is an object type with a custom `[Symbol.hasInstance]` method, then it is potentially
	// valid on the right-hand side of the `instanceof` operator. This allows normal `object` types to
	// participate in `instanceof`, as per Step 2 of https://tc39.es/ecma262/#sec-instanceofoperator.
	rightType := c.checkExpression(node.Right)
	if !c.isTypeAny(rightType) {
		hasInstanceMethodType := c.getSymbolHasInstanceMethodOfObjectType(rightType)
		if hasInstanceMethodType != nil {
			apparentType := c.getApparentType(hasInstanceMethodType)
			if c.isErrorType(apparentType) {
				return c.resolveErrorCall(node)
			}

			callSignatures := c.getSignaturesOfType(apparentType, SignatureKindCall)
			constructSignatures := c.getSignaturesOfType(apparentType, SignatureKindConstruct)
			if c.isUntypedFunctionCall(hasInstanceMethodType, apparentType, callSignatures.length, constructSignatures.length) {
				return c.resolveUntypedCall(node)
			}

			if callSignatures.length != 0 {
				return c.resolveCall(node, callSignatures, candidatesOutArray, checkMode, SignatureFlagsNone)
			}
		} else if !(c.typeHasCallOrConstructSignatures(rightType) || c.isTypeSubtypeOf(rightType, c.globalFunctionType)) {
			c.error(node.Right, Diagnostics.The_right_hand_side_of_an_instanceof_expression_must_be_either_of_type_any_a_class_function_or_other_type_assignable_to_the_Function_interface_type_or_an_object_type_with_a_Symbol_hasInstance_method)
			return c.resolveErrorCall(node)
		}
	}
	// fall back to a default signature
	return c.anySignature
}

/**
 * Sometimes, we have a decorator that could accept zero arguments,
 * but is receiving too many arguments as part of the decorator invocation.
 * In those cases, a user may have meant to *call* the expression before using it as a decorator.
 */

func (c *Checker) isPotentiallyUncalledDecorator(decorator Decorator, signatures []Signature) /* TODO(TS-TO-GO) inferred type boolean | 0 */ any {
	return signatures.length && core.Every(signatures, func(signature Signature) bool {
		return signature.minArgumentCount == 0 && !signatureHasRestParameter(signature) && signature.parameters.length < c.getDecoratorArgumentCount(decorator, signature)
	})
}

func (c *Checker) resolveSignature(node CallLikeExpression, candidatesOutArray *[]Signature, checkMode CheckMode) Signature {
	switch node.Kind {
	case ast.KindCallExpression:
		return c.resolveCallExpression(node, candidatesOutArray, checkMode)
	case ast.KindNewExpression:
		return c.resolveNewExpression(node, candidatesOutArray, checkMode)
	case ast.KindTaggedTemplateExpression:
		return c.resolveTaggedTemplateExpression(node, candidatesOutArray, checkMode)
	case ast.KindDecorator:
		return c.resolveDecorator(node, candidatesOutArray, checkMode)
	case ast.KindJsxOpeningElement,
		ast.KindJsxSelfClosingElement:
		return c.resolveJsxOpeningLikeElement(node, candidatesOutArray, checkMode)
	case ast.KindBinaryExpression:
		return c.resolveInstanceofExpression(node, candidatesOutArray, checkMode)
	}
	Debug.assertNever(node, "Branch in 'resolveSignature' should be unreachable.")
}

/**
 * Resolve a signature of a given call-like expression.
 * @param node a call-like expression to try resolve a signature for
 * @param candidatesOutArray an array of signature to be filled in by the function. It is passed by signature help in the language service;
 *                           the function will fill it up with appropriate candidate signatures
 * @return a signature of the call-like expression or undefined if one can't be found
 */

func (c *Checker) getResolvedSignature(node CallLikeExpression, candidatesOutArray *[]Signature, checkMode CheckMode) Signature {
	links := c.getNodeLinks(node)
	// If getResolvedSignature has already been called, we will have cached the resolvedSignature.
	// However, it is possible that either candidatesOutArray was not passed in the first time,
	// or that a different candidatesOutArray was passed in. Therefore, we need to redo the work
	// to correctly fill the candidatesOutArray.
	cached := links.resolvedSignature
	if cached != nil && cached != c.resolvingSignature && candidatesOutArray == nil {
		return cached
	}
	saveResolutionStart := c.resolutionStart
	if cached == nil {
		// If we haven't already done so, temporarily reset the resolution stack. This allows us to
		// handle "inverted" situations where, for example, an API client asks for the type of a symbol
		// containined in a function call argument whose contextual type depends on the symbol itself
		// through resolution of the containing function call. By resetting the resolution stack we'll
		// retry the symbol type resolution with the resolvingSignature marker in place to suppress
		// the contextual type circularity.
		c.resolutionStart = c.resolutionTargets.length
	}
	links.resolvedSignature = c.resolvingSignature
	result := c.resolveSignature(node, candidatesOutArray, checkMode || CheckModeNormal)
	c.resolutionStart = saveResolutionStart
	// When CheckMode.SkipGenericFunctions is set we use resolvingSignature to indicate that call
	// resolution should be deferred.
	if result != c.resolvingSignature {
		// if the signature resolution originated on a node that itself depends on the contextual type
		// then it's possible that the resolved signature might not be the same as the one that would be computed in source order
		// since resolving such signature leads to resolving the potential outer signature, its arguments and thus the very same signature
		// it's possible that this inner resolution sets the resolvedSignature first.
		// In such a case we ignore the local result and reuse the correct one that was cached.
		if links.resolvedSignature != c.resolvingSignature {
			result = links.resolvedSignature
		}
		// If signature resolution originated in control flow type analysis (for example to compute the
		// assigned type in a flow assignment) we don't cache the result as it may be based on temporary
		// types from the control flow analysis.
		if c.flowLoopStart == c.flowLoopCount {
			links.resolvedSignature = result
		} else {
			links.resolvedSignature = cached
		}
	}
	return result
}

/**
 * Indicates whether a declaration can be treated as a constructor in a JavaScript
 * file.
 */

func (c *Checker) isJSConstructor(node *ast.Node) bool {
	if node == nil || !isInJSFile(node) {
		return false
	}
	var func_ * /* TODO(TS-TO-GO) inferred type FunctionDeclaration | FunctionExpression */ any
	switch {
	case isFunctionDeclaration(node) || isFunctionExpression(node):
		func_ = node
	case (isVariableDeclaration(node) || isPropertyAssignment(node)) && node.Initializer != nil && isFunctionExpression(node.Initializer):
		func_ = node.Initializer
	default:
		func_ = nil
	}
	if func_ != nil {
		// If the node has a @class or @constructor tag, treat it like a constructor.
		if getJSDocClassTag(node) != nil {
			return true
		}

		// If the node is a property of an object literal.
		if isPropertyAssignment(walkUpParenthesizedExpressions(func_.Parent)) {
			return false
		}

		// If the symbol of the node has members, treat it like a constructor.
		symbol := c.getSymbolOfDeclaration(func_)
		return symbol. /* ? */ Members. /* ? */ size
	}
	return false
}

func (c *Checker) mergeJSSymbols(target *ast.Symbol, source *ast.Symbol) *TransientSymbol {
	if source != nil {
		links := c.getSymbolLinks(source)
		if links.inferredClassSymbol == nil || !links.inferredClassSymbol.has(getSymbolId(target)) {
			var inferred TransientSymbol
			if isTransientSymbol(target) {
				inferred = target
			} else {
				inferred = c.cloneSymbol(target)
			}
			inferred.Exports = inferred.Exports || createSymbolTable()
			inferred.Members = inferred.Members || createSymbolTable()
			inferred.Flags |= source.Flags & ast.SymbolFlagsClass
			if source.Exports. /* ? */ size {
				c.mergeSymbolTable(inferred.Exports, source.Exports)
			}
			if source.Members. /* ? */ size {
				c.mergeSymbolTable(inferred.Members, source.Members)
			}
			(links.inferredClassSymbol || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.inferredClassSymbol = new Map() */ TODO)).set(getSymbolId(inferred), inferred)
			return inferred
		}
		return links.inferredClassSymbol.get(getSymbolId(target))
	}
}

func (c *Checker) getAssignedClassSymbol(decl Declaration) *ast.Symbol {
	assignmentSymbol := decl && c.getSymbolOfExpando(decl, true /*allowDeclaration*/)
	prototype := assignmentSymbol. /* ? */ exports. /* ? */ get("prototype" /* as __String */)
	init := prototype. /* ? */ valueDeclaration && c.getAssignedJSPrototype(prototype.ValueDeclaration)
	if init {
		return c.getSymbolOfDeclaration(init)
	} else {
		return nil
	}
}

func (c *Checker) getSymbolOfExpando(node *ast.Node, allowDeclaration bool) *ast.Symbol {
	if !node.Parent {
		return nil
	}
	var name Union[Expression, BindingName, undefined]
	var decl *ast.Node
	if isVariableDeclaration(node.Parent) && node.Parent.Initializer == node {
		if !isInJSFile(node) && !(c.isVarConstLike(node.Parent) && isFunctionLikeDeclaration(node)) {
			return nil
		}
		name = node.Parent.Name
		decl = node.Parent
	} else if isBinaryExpression(node.Parent) {
		parentNode := node.Parent
		parentNodeOperator := node.Parent.OperatorToken.Kind
		if parentNodeOperator == ast.KindEqualsToken && (allowDeclaration || parentNode.Right == node) {
			name = parentNode.Left
			decl = name
		} else if parentNodeOperator == ast.KindBarBarToken || parentNodeOperator == ast.KindQuestionQuestionToken {
			if isVariableDeclaration(parentNode.Parent) && parentNode.Parent.Initializer == parentNode {
				name = parentNode.Parent.Name
				decl = parentNode.Parent
			} else if isBinaryExpression(parentNode.Parent) && parentNode.Parent.OperatorToken.Kind == ast.KindEqualsToken && (allowDeclaration || parentNode.Parent.Right == parentNode) {
				name = parentNode.Parent.Left
				decl = name
			}

			if name == nil || !isBindableStaticNameExpression(name) || !isSameEntityName(name, parentNode.Left) {
				return nil
			}
		}
	} else if allowDeclaration && isFunctionDeclaration(node) {
		name = node.Name
		decl = node
	}

	if decl == nil || name == nil || (!allowDeclaration && getExpandoInitializer(node, isPrototypeAccess(name)) == nil) {
		return nil
	}
	return c.getSymbolOfNode(decl)
}

func (c *Checker) getAssignedJSPrototype(node *ast.Node) * /* TODO(TS-TO-GO) inferred type false | ObjectLiteralExpression */ any {
	if !node.Parent {
		return false
	}
	var parent *ast.Node = node.Parent
	for parent && parent.Kind == ast.KindPropertyAccessExpression {
		parent = parent.Parent
	}
	if parent && isBinaryExpression(parent) && isPrototypeAccess(parent.Left) && parent.OperatorToken.Kind == ast.KindEqualsToken {
		right := getInitializerOfBinaryExpression(parent)
		return isObjectLiteralExpression(right) && right
	}
}

/**
 * Syntactically and semantically checks a call or new expression.
 * @param node The call/new expression to be checked.
 * @returns On success, the expression's signature's return type. On failure, anyType.
 */

func (c *Checker) checkCallExpression(node Union[CallExpression, NewExpression], checkMode CheckMode) *Type {
	c.checkGrammarTypeArguments(node, node.TypeArguments)

	signature := c.getResolvedSignature(node, nil /*candidatesOutArray*/, checkMode)
	if signature == c.resolvingSignature {
		// CheckMode.SkipGenericFunctions is enabled and this is a call to a generic function that
		// returns a function type. We defer checking and return silentNeverType.
		return c.silentNeverType
	}

	c.checkDeprecatedSignature(signature, node)

	if node.Expression.Kind == ast.KindSuperKeyword {
		return c.voidType
	}

	if node.Kind == ast.KindNewExpression {
		declaration := signature.declaration

		if declaration != nil && declaration.Kind != ast.KindConstructor && declaration.Kind != ast.KindConstructSignature && declaration.Kind != ast.KindConstructorType && !(isJSDocSignature(declaration) && getJSDocRoot(declaration). /* ? */ parent. /* ? */ kind == ast.KindConstructor) && !isJSDocConstructSignature(declaration) && !c.isJSConstructor(declaration) {
			// When resolved signature is a call signature (and not a construct signature) the result type is any
			if c.noImplicitAny {
				c.error(node, Diagnostics.new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type)
			}
			return c.anyType
		}
	}

	// In JavaScript files, calls to any identifier 'require' are treated as external module imports
	if isInJSFile(node) && c.isCommonJsRequire(node) {
		return c.resolveExternalModuleTypeByLiteral(node.Arguments[0].AsStringLiteral())
	}

	returnType := c.getReturnTypeOfSignature(signature)
	// Treat any call to the global 'Symbol' function that is part of a const variable or readonly property
	// as a fresh unique symbol literal type.
	if returnType.flags&TypeFlagsESSymbolLike != 0 && c.isSymbolOrSymbolForCall(node) {
		return c.getESSymbolLikeTypeForNode(walkUpParenthesizedExpressions(node.Parent))
	}
	if node.Kind == ast.KindCallExpression && node.QuestionDotToken == nil && node.Parent.Kind == ast.KindExpressionStatement && returnType.flags&TypeFlagsVoid != 0 && c.getTypePredicateOfSignature(signature) != nil {
		if !isDottedName(node.Expression) {
			c.error(node.Expression, Diagnostics.Assertions_require_the_call_target_to_be_an_identifier_or_qualified_name)
		} else if c.getEffectsSignature(node) == nil {
			diagnostic := c.error(node.Expression, Diagnostics.Assertions_require_every_name_in_the_call_target_to_be_declared_with_an_explicit_type_annotation)
			c.getTypeOfDottedName(node.Expression, diagnostic)
		}
	}

	if isInJSFile(node) {
		jsSymbol := c.getSymbolOfExpando(node, false /*allowDeclaration*/)
		if jsSymbol. /* ? */ exports. /* ? */ size {
			jsAssignmentType := c.createAnonymousType(jsSymbol, jsSymbol.Exports, emptyArray, emptyArray, emptyArray)
			jsAssignmentType.objectFlags |= ObjectFlagsJSLiteral
			return c.getIntersectionType([]*Type{returnType, jsAssignmentType})
		}
	}

	return returnType
}

func (c *Checker) checkDeprecatedSignature(signature Signature, node CallLikeExpression) {
	if signature.flags&SignatureFlagsIsSignatureCandidateForOverloadFailure != 0 {
		return
	}
	if signature.declaration != nil && signature.declaration.Flags&ast.NodeFlagsDeprecated != 0 {
		suggestionNode := c.getDeprecatedSuggestionNode(node)
		name := tryGetPropertyAccessOrIdentifierToString(getInvokedExpression(node))
		c.addDeprecatedSuggestionWithSignature(suggestionNode, signature.declaration, name, c.signatureToString(signature))
	}
}

func (c *Checker) getDeprecatedSuggestionNode(node *ast.Node) *ast.Node {
	node = skipParentheses(node)
	switch node.Kind {
	case ast.KindCallExpression,
		ast.KindDecorator,
		ast.KindNewExpression:
		return c.getDeprecatedSuggestionNode((node /* as Decorator | CallExpression | NewExpression */).Expression)
	case ast.KindTaggedTemplateExpression:
		return c.getDeprecatedSuggestionNode(node.AsTaggedTemplateExpression().Tag)
	case ast.KindJsxOpeningElement,
		ast.KindJsxSelfClosingElement:
		return c.getDeprecatedSuggestionNode(node.AsJsxOpeningLikeElement().TagName)
	case ast.KindElementAccessExpression:
		return node.AsElementAccessExpression().ArgumentExpression
	case ast.KindPropertyAccessExpression:
		return node.AsPropertyAccessExpression().Name
	case ast.KindTypeReference:
		typeReference := node.AsTypeReferenceNode()
		if isQualifiedName(typeReference.TypeName) {
			return typeReference.TypeName.Right
		} else {
			return typeReference
		}
	default:
		return node
	}
}

func (c *Checker) isSymbolOrSymbolForCall(node *ast.Node) bool {
	if !isCallExpression(node) {
		return false
	}
	left := node.Expression
	if isPropertyAccessExpression(left) && left.Name.EscapedText == "for" {
		left = left.Expression
	}
	if !isIdentifier(left) || left.EscapedText != "Symbol" {
		return false
	}

	// make sure `Symbol` is the global symbol
	globalESSymbol := c.getGlobalESSymbolConstructorSymbol(false)
	if globalESSymbol == nil {
		return false
	}

	return globalESSymbol == c.resolveName(left, "Symbol" /* as __String */, ast.SymbolFlagsValue, nil /*nameNotFoundMessage*/, false /*isUse*/)
}

func (c *Checker) checkImportCallExpression(node ImportCall) *Type {
	// Check grammar of dynamic import
	c.checkGrammarImportCallExpression(node)

	if node.Arguments.length == 0 {
		return c.createPromiseReturnType(node, c.anyType)
	}

	specifier := node.Arguments[0]
	specifierType := c.checkExpressionCached(specifier)
	var optionsType *Type
	if node.Arguments.length > 1 {
		optionsType = c.checkExpressionCached(node.Arguments[1])
	} else {
		optionsType = nil
	}
	// Even though multiple arguments is grammatically incorrect, type-check extra arguments for completion
	for i := 2; i < node.Arguments.length; i++ {
		c.checkExpressionCached(node.Arguments[i])
	}

	if specifierType.flags&TypeFlagsUndefined != 0 || specifierType.flags&TypeFlagsNull != 0 || !c.isTypeAssignableTo(specifierType, c.stringType) {
		c.error(specifier, Diagnostics.Dynamic_import_s_specifier_must_be_of_type_string_but_here_has_type_0, c.typeToString(specifierType))
	}

	if optionsType != nil {
		importCallOptionsType := c.getGlobalImportCallOptionsType(true)
		if importCallOptionsType != c.emptyObjectType {
			c.checkTypeAssignableTo(optionsType, c.getNullableType(importCallOptionsType, TypeFlagsUndefined), node.Arguments[1])
		}
	}

	// resolveExternalModuleName will return undefined if the moduleReferenceExpression is not a string literal
	moduleSymbol := c.resolveExternalModuleName(node, specifier)
	if moduleSymbol != nil {
		esModuleSymbol := c.resolveESModuleSymbol(moduleSymbol, specifier, true /*dontResolveAlias*/, false /*suppressInteropError*/)
		if esModuleSymbol != nil {
			return c.createPromiseReturnType(node, c.getTypeWithSyntheticDefaultOnly(c.getTypeOfSymbol(esModuleSymbol), esModuleSymbol, moduleSymbol, specifier) || c.getTypeWithSyntheticDefaultImportType(c.getTypeOfSymbol(esModuleSymbol), esModuleSymbol, moduleSymbol, specifier))
		}
	}
	return c.createPromiseReturnType(node, c.anyType)
}

func (c *Checker) createDefaultPropertyWrapperForModule(symbol *ast.Symbol, originalSymbol *ast.Symbol, anonymousSymbol *ast.Symbol) ResolvedType {
	memberTable := createSymbolTable()
	newSymbol := c.createSymbol(ast.SymbolFlagsAlias, InternalSymbolNameDefault)
	newSymbol.Parent = originalSymbol
	newSymbol.Links.nameType = c.getStringLiteralType("default")
	newSymbol.Links.aliasTarget = c.resolveSymbol(symbol)
	memberTable.set(InternalSymbolNameDefault, newSymbol)
	return c.createAnonymousType(anonymousSymbol, memberTable, emptyArray, emptyArray, emptyArray)
}

func (c *Checker) getTypeWithSyntheticDefaultOnly(t *Type, symbol *ast.Symbol, originalSymbol *ast.Symbol, moduleSpecifier Expression) *Type {
	hasDefaultOnly := c.isOnlyImportableAsDefault(moduleSpecifier)
	if hasDefaultOnly && t && !c.isErrorType(t) {
		synthType := t.AsSyntheticDefaultModuleType()
		if synthType.defaultOnlyType == nil {
			t := c.createDefaultPropertyWrapperForModule(symbol, originalSymbol)
			synthType.defaultOnlyType = t
		}
		return synthType.defaultOnlyType
	}
	return nil
}

func (c *Checker) getTypeWithSyntheticDefaultImportType(t *Type, symbol *ast.Symbol, originalSymbol *ast.Symbol, moduleSpecifier Expression) *Type {
	if c.allowSyntheticDefaultImports && t && !c.isErrorType(t) {
		synthType := t.AsSyntheticDefaultModuleType()
		if synthType.syntheticType == nil {
			file := originalSymbol.Declarations. /* ? */ find(isSourceFile)
			hasSyntheticDefault := c.canHaveSyntheticDefault(file, originalSymbol, false /*dontResolveAlias*/, moduleSpecifier)
			if hasSyntheticDefault {
				anonymousSymbol := c.createSymbol(ast.SymbolFlagsTypeLiteral, InternalSymbolNameType)
				defaultContainingObject := c.createDefaultPropertyWrapperForModule(symbol, originalSymbol, anonymousSymbol)
				anonymousSymbol.Links.type_ = defaultContainingObject
				if c.isValidSpreadType(t) {
					synthType.syntheticType = c.getSpreadType(t, defaultContainingObject, anonymousSymbol, 0 /*objectFlags*/, false /*readonly*/)
				} else {
					synthType.syntheticType = defaultContainingObject
				}
			} else {
				synthType.syntheticType = t
			}
		}
		return synthType.syntheticType
	}
	return t
}

func (c *Checker) isCommonJsRequire(node *ast.Node) bool {
	if !isRequireCall(node, true /*requireStringLiteralLikeArgument*/) {
		return false
	}

	// Make sure require is not a local function
	if !isIdentifier(node.Expression) {
		return Debug.fail()
	}
	resolvedRequire := c.resolveName(node.Expression, node.Expression.EscapedText, ast.SymbolFlagsValue, nil /*nameNotFoundMessage*/, true /*isUse*/)
	// TODO: GH#18217
	if resolvedRequire == c.requireSymbol {
		return true
	}
	// project includes symbol named 'require' - make sure that it is ambient and local non-alias
	if resolvedRequire.Flags&ast.SymbolFlagsAlias != 0 {
		return false
	}

	var targetDeclarationKind /* TODO(TS-TO-GO) inferred type SyntaxKind.Unknown | SyntaxKind.VariableDeclaration | SyntaxKind.FunctionDeclaration */ any
	switch {
	case resolvedRequire.Flags&ast.SymbolFlagsFunction != 0:
		targetDeclarationKind = ast.KindFunctionDeclaration
	case resolvedRequire.Flags&ast.SymbolFlagsVariable != 0:
		targetDeclarationKind = ast.KindVariableDeclaration
	default:
		targetDeclarationKind = ast.KindUnknown
	}
	if targetDeclarationKind != ast.KindUnknown {
		decl := getDeclarationOfKind(resolvedRequire, targetDeclarationKind)
		// function/variable declaration should be ambient
		return decl && decl.Flags&ast.NodeFlagsAmbient != 0
	}
	return false
}

func (c *Checker) checkTaggedTemplateExpression(node TaggedTemplateExpression) *Type {
	if !c.checkGrammarTaggedTemplateChain(node) {
		c.checkGrammarTypeArguments(node, node.TypeArguments)
	}
	if c.languageVersion < LanguageFeatureMinimumTarget.TaggedTemplates {
		c.checkExternalEmitHelpers(node, ExternalEmitHelpersMakeTemplateObject)
	}
	signature := c.getResolvedSignature(node)
	c.checkDeprecatedSignature(signature, node)
	return c.getReturnTypeOfSignature(signature)
}

func (c *Checker) checkAssertion(node AssertionExpression, checkMode *CheckMode) *Type {
	if node.Kind == ast.KindTypeAssertionExpression {
		file := getSourceFileOfNode(node)
		if file && fileExtensionIsOneOf(file.FileName, []Extension{ExtensionCts, ExtensionMts}) {
			c.grammarErrorOnNode(node, Diagnostics.This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Use_an_as_expression_instead)
		}
	}
	return c.checkAssertionWorker(node, checkMode)
}

func (c *Checker) isValidConstAssertionArgument(node *ast.Node) bool {
	switch node.Kind {
	case ast.KindStringLiteral,
		ast.KindNoSubstitutionTemplateLiteral,
		ast.KindNumericLiteral,
		ast.KindBigIntLiteral,
		ast.KindTrueKeyword,
		ast.KindFalseKeyword,
		ast.KindArrayLiteralExpression,
		ast.KindObjectLiteralExpression,
		ast.KindTemplateExpression:
		return true
	case ast.KindParenthesizedExpression:
		return c.isValidConstAssertionArgument(node.AsParenthesizedExpression().Expression)
	case ast.KindPrefixUnaryExpression:
		op := node.AsPrefixUnaryExpression().Operator
		arg := node.AsPrefixUnaryExpression().Operand
		return op == ast.KindMinusToken && (arg.Kind == ast.KindNumericLiteral || arg.Kind == ast.KindBigIntLiteral) || op == ast.KindPlusToken && arg.Kind == ast.KindNumericLiteral
	case ast.KindPropertyAccessExpression,
		ast.KindElementAccessExpression:
		expr := skipParentheses((node /* as PropertyAccessExpression | ElementAccessExpression */).Expression)
		var symbol *ast.Symbol
		if isEntityNameExpression(expr) {
			symbol = c.resolveEntityName(expr, ast.SymbolFlagsValue, true /*ignoreErrors*/)
		} else {
			symbol = nil
		}
		return symbol != nil && symbol.Flags&ast.SymbolFlagsEnum != 0
	}
	return false
}

func (c *Checker) checkAssertionWorker(node Union[JSDocTypeAssertion, AssertionExpression], checkMode *CheckMode) *Type {
	TODO_IDENTIFIER := c.getAssertionTypeAndExpression(node)
	exprType := c.checkExpression(expression, checkMode)
	if isConstTypeReference(t) {
		if !c.isValidConstAssertionArgument(expression) {
			c.error(expression, Diagnostics.A_const_assertions_can_only_be_applied_to_references_to_enum_members_or_string_number_boolean_array_or_object_literals)
		}
		return c.getRegularTypeOfLiteralType(exprType)
	}
	links := c.getNodeLinks(node)
	links.assertionExpressionType = exprType
	c.checkSourceElement(t)
	c.checkNodeDeferred(node)
	return c.getTypeFromTypeNode(t)
}

func (c *Checker) getAssertionTypeAndExpression(node Union[JSDocTypeAssertion, AssertionExpression]) /* TODO(TS-TO-GO) inferred type { type: TypeNode; expression: Expression; } */ any {
	var t TypeNode
	var expression Expression
	switch node.Kind {
	case ast.KindAsExpression,
		ast.KindTypeAssertionExpression:
		t = node.Type_
		expression = node.Expression
	case ast.KindParenthesizedExpression:
		t = getJSDocTypeAssertionType(node)
		expression = node.Expression
	}

	return map[any]any{ /* TODO(TS-TO-GO): was object literal */
		"t":          t,
		"expression": expression,
	}
}

func (c *Checker) checkAssertionDeferred(node Union[JSDocTypeAssertion, AssertionExpression]) {
	TODO_IDENTIFIER := c.getAssertionTypeAndExpression(node)
	var errNode /* TODO(TS-TO-GO) inferred type TypeNode | AssertionExpression */ any
	if isParenthesizedExpression(node) {
		errNode = t
	} else {
		errNode = node
	}
	links := c.getNodeLinks(node)
	Debug.assertIsDefined(links.assertionExpressionType)
	exprType := c.getRegularTypeOfObjectLiteral(c.getBaseTypeOfLiteralType(links.assertionExpressionType))
	targetType := c.getTypeFromTypeNode(t)
	if !c.isErrorType(targetType) {
		c.addLazyDiagnostic(func() {
			widenedType := c.getWidenedType(exprType)
			if !c.isTypeComparableTo(targetType, widenedType) {
				c.checkTypeComparableTo(exprType, targetType, errNode, Diagnostics.Conversion_of_type_0_to_type_1_may_be_a_mistake_because_neither_type_sufficiently_overlaps_with_the_other_If_this_was_intentional_convert_the_expression_to_unknown_first)
			}
		})
	}
}

func (c *Checker) checkNonNullChain(node NonNullChain) *Type {
	leftType := c.checkExpression(node.Expression)
	nonOptionalType := c.getOptionalExpressionType(leftType, node.Expression)
	return c.propagateOptionalTypeMarker(c.getNonNullableType(nonOptionalType), node, nonOptionalType != leftType)
}

func (c *Checker) checkNonNullAssertion(node NonNullExpression) *Type {
	if node.Flags&ast.NodeFlagsOptionalChain != 0 {
		return c.checkNonNullChain(node.AsNonNullChain())
	} else {
		return c.getNonNullableType(c.checkExpression(node.Expression))
	}
}

func (c *Checker) checkExpressionWithTypeArguments(node Union[ExpressionWithTypeArguments, TypeQueryNode]) *Type {
	c.checkGrammarExpressionWithTypeArguments(node)
	forEach(node.TypeArguments, c.checkSourceElement)
	if node.Kind == ast.KindExpressionWithTypeArguments {
		parent := walkUpParenthesizedExpressions(node.Parent)
		if parent.Kind == ast.KindBinaryExpression && parent.AsBinaryExpression().OperatorToken.Kind == ast.KindInstanceOfKeyword && isNodeDescendantOf(node, parent.AsBinaryExpression().Right) {
			c.error(node, Diagnostics.The_right_hand_side_of_an_instanceof_expression_must_not_be_an_instantiation_expression)
		}
	}
	var exprType *Type
	switch {
	case node.Kind == ast.KindExpressionWithTypeArguments:
		exprType = c.checkExpression(node.Expression)
	case isThisIdentifier(node.ExprName):
		exprType = c.checkThisExpression(node.ExprName)
	default:
		exprType = c.checkExpression(node.ExprName)
	}
	return c.getInstantiationExpressionType(exprType, node)
}

func (c *Checker) getInstantiationExpressionType(exprType *Type, node NodeWithTypeArguments) *Type {
	typeArguments := node.TypeArguments
	if exprType == c.silentNeverType || c.isErrorType(exprType) || !core.Some(typeArguments) {
		return exprType
	}
	links := c.getNodeLinks(node)
	if links.instantiationExpressionTypes == nil {
		links.instantiationExpressionTypes = NewMap()
	}
	if links.instantiationExpressionTypes.has(exprType.id) {
		return links.instantiationExpressionTypes.get(exprType.id)
	}
	hasSomeApplicableSignature := false
	var nonApplicableType *Type
	result := getInstantiatedType(exprType)
	links.instantiationExpressionTypes.set(exprType.id, result)
	var errorType *Type
	if hasSomeApplicableSignature {
		errorType = nonApplicableType
	} else {
		errorType = exprType
	}
	if errorType != nil {
		c.diagnostics.add(createDiagnosticForNodeArray(getSourceFileOfNode(node), typeArguments, Diagnostics.Type_0_has_no_signatures_for_which_the_type_argument_list_is_applicable, c.typeToString(errorType)))
	}
	return result

	getInstantiatedType := func(t *Type) *Type {
		hasSignatures := false
		hasApplicableSignature := false
		result := getInstantiatedTypePart(t)
		hasSomeApplicableSignature = hasSomeApplicableSignature || hasApplicableSignature
		if hasSignatures && !hasApplicableSignature {
			if nonApplicableType == nil {
				nonApplicableType = t
			}
		}
		return result

		getInstantiatedTypePart := func(t *Type) *Type {
			if t.flags&TypeFlagsObject != 0 {
				resolved := c.resolveStructuredTypeMembers(t.AsObjectType())
				callSignatures := getInstantiatedSignatures(resolved.callSignatures)
				constructSignatures := getInstantiatedSignatures(resolved.constructSignatures)
				hasSignatures = hasSignatures || resolved.callSignatures.length != 0 || resolved.constructSignatures.length != 0
				hasApplicableSignature = hasApplicableSignature || callSignatures.length != 0 || constructSignatures.length != 0
				if callSignatures != resolved.callSignatures || constructSignatures != resolved.constructSignatures {
					result := c.createAnonymousType(c.createSymbol(ast.SymbolFlagsNone, InternalSymbolNameInstantiationExpression), resolved.members, callSignatures, constructSignatures, resolved.indexInfos) /* as ResolvedType & InstantiationExpressionType */
					result.objectFlags |= ObjectFlagsInstantiationExpressionType
					result.node = node
					return result
				}
			} else if t.flags&TypeFlagsInstantiableNonPrimitive != 0 {
				constraint := c.getBaseConstraintOfType(t)
				if constraint != nil {
					instantiated := getInstantiatedTypePart(constraint)
					if instantiated != constraint {
						return instantiated
					}
				}
			} else if t.flags&TypeFlagsUnion != 0 {
				return c.mapType(t, getInstantiatedType)
			} else if t.flags&TypeFlagsIntersection != 0 {
				return c.getIntersectionType(core.SameMap(t.AsIntersectionType().types, getInstantiatedTypePart))
			}
			return t
		}

	}

	getInstantiatedSignatures := func(signatures []Signature) []Signature {
		applicableSignatures := core.Filter(signatures, func(sig Signature) bool {
			return sig.typeParameters != nil && c.hasCorrectTypeArgumentArity(sig, typeArguments)
		})
		return core.SameMap(applicableSignatures, func(sig Signature) Signature {
			typeArgumentTypes := c.checkTypeArguments(sig, typeArguments, true /*reportErrors*/)
			if typeArgumentTypes != nil {
				return c.getSignatureInstantiation(sig, typeArgumentTypes, isInJSFile(sig.declaration))
			} else {
				return sig
			}
		})
	}

}

func (c *Checker) checkSatisfiesExpression(node SatisfiesExpression) *Type {
	c.checkSourceElement(node.Type_)
	return c.checkSatisfiesExpressionWorker(node.Expression, node.Type_)
}

func (c *Checker) checkSatisfiesExpressionWorker(expression Expression, target TypeNode, checkMode CheckMode) *Type {
	exprType := c.checkExpression(expression, checkMode)
	targetType := c.getTypeFromTypeNode(target)
	if c.isErrorType(targetType) {
		return targetType
	}
	errorNode := findAncestor(target.Parent, func(n *ast.Node) bool {
		return n.Kind == ast.KindSatisfiesExpression || n.Kind == ast.KindJSDocSatisfiesTag
	})
	c.checkTypeAssignableToAndOptionallyElaborate(exprType, targetType, errorNode, expression, Diagnostics.Type_0_does_not_satisfy_the_expected_type_1)
	return exprType
}

func (c *Checker) checkMetaProperty(node MetaProperty) *Type {
	c.checkGrammarMetaProperty(node)

	if node.KeywordToken == ast.KindNewKeyword {
		return c.checkNewTargetMetaProperty(node)
	}

	if node.KeywordToken == ast.KindImportKeyword {
		return c.checkImportMetaProperty(node)
	}

	return Debug.assertNever(node.KeywordToken)
}

func (c *Checker) checkMetaPropertyKeyword(node MetaProperty) *Type {
	switch node.KeywordToken {
	case ast.KindImportKeyword:
		return c.getGlobalImportMetaExpressionType()
	case ast.KindNewKeyword:
		t := c.checkNewTargetMetaProperty(node)
		if c.isErrorType(t) {
			return c.errorType
		} else {
			return c.createNewTargetExpressionType(t)
		}
	default:
		Debug.assertNever(node.KeywordToken)
	}
}

func (c *Checker) checkNewTargetMetaProperty(node MetaProperty) *Type {
	container := getNewTargetContainer(node)
	if container == nil {
		c.error(node, Diagnostics.Meta_property_0_is_only_allowed_in_the_body_of_a_function_declaration_function_expression_or_constructor, "new.target")
		return c.errorType
	} else if container.Kind == ast.KindConstructor {
		symbol := c.getSymbolOfDeclaration(container.Parent)
		return c.getTypeOfSymbol(symbol)
	} else {
		symbol := c.getSymbolOfDeclaration(container)
		return c.getTypeOfSymbol(symbol)
	}
}

func (c *Checker) checkImportMetaProperty(node MetaProperty) /* TODO(TS-TO-GO) inferred type IntrinsicType | ObjectType */ any {
	if c.moduleKind == ModuleKindNode16 || c.moduleKind == ModuleKindNodeNext {
		if getSourceFileOfNode(node).ImpliedNodeFormat != ModuleKindESNext {
			c.error(node, Diagnostics.The_import_meta_meta_property_is_not_allowed_in_files_which_will_build_into_CommonJS_output)
		}
	} else if c.moduleKind < ModuleKindES2020 && c.moduleKind != ModuleKindSystem {
		c.error(node, Diagnostics.The_import_meta_meta_property_is_only_allowed_when_the_module_option_is_es2020_es2022_esnext_system_node16_or_nodenext)
	}
	file := getSourceFileOfNode(node)
	Debug.assert(file.Flags&ast.NodeFlagsPossiblyContainsImportMeta != 0, "Containing file is missing import meta node flag.")
	if node.Name.EscapedText == "meta" {
		return c.getGlobalImportMetaType()
	} else {
		return c.errorType
	}
}

func (c *Checker) getTypeOfParameter(symbol *ast.Symbol) *Type {
	declaration := symbol.ValueDeclaration
	return c.addOptionality(c.getTypeOfSymbol(symbol), false, declaration != nil && (hasInitializer(declaration) || isOptionalDeclaration(declaration)))
}

/**
 * Gets a tuple element label by recursively walking `ArrayBindingPattern` nodes in a `BindingName`.
 * @param node The source node from which to derive a label
 * @param index The index into the tuple
 * @param elementFlags The {@see ElementFlags} of the tuple element
 */

func (c *Checker) getTupleElementLabelFromBindingElement(node Union[BindingElement, ParameterDeclaration], index number, elementFlags ElementFlags) string {
	switch node.Name.Kind {
	case ast.KindIdentifier:
		name := node.Name.EscapedText
		if node.DotDotDotToken != nil {
			// given
			//   (...[x, y, ...z]: [number, number, ...number[]]) => ...
			// this produces
			//   (x: number, y: number, ...z: number[]) => ...
			// which preserves rest elements of 'z'

			// given
			//   (...[x, y, ...z]: [number, number, ...[...number[], number]]) => ...
			// this produces
			//   (x: number, y: number, ...z: number[], z_1: number) => ...
			// which preserves rest elements of z but gives distinct numbers to fixed elements of 'z'
			if elementFlags&ElementFlagsVariable != 0 {
				return name
			} else {
				return __TEMPLATE__(name, "_", index).(string)
			}
		} else {
			// given
			//   (...[x]: [number]) => ...
			// this produces
			//   (x: number) => ...
			// which preserves fixed elements of 'x'

			// given
			//   (...[x]: ...number[]) => ...
			// this produces
			//   (x_0: number) => ...
			// which which numbers fixed elements of 'x' whose tuple element type is variable
			if elementFlags&ElementFlagsFixed != 0 {
				return name
			} else {
				return __TEMPLATE__(name, "_n").(string)
			}
		}
		fallthrough
	case ast.KindArrayBindingPattern:
		if node.DotDotDotToken != nil {
			elements := node.Name.Elements
			lastElement := tryCast(lastOrUndefined(elements), isBindingElement)
			elementCount := elements.length - (ifElse(lastElement. /* ? */ dotDotDotToken != nil, 1, 0))
			if index < elementCount {
				element := elements[index]
				if isBindingElement(element) {
					return c.getTupleElementLabelFromBindingElement(element, index, elementFlags)
				}
			} else if lastElement. /* ? */ dotDotDotToken != nil {
				return c.getTupleElementLabelFromBindingElement(lastElement, index-elementCount, elementFlags)
			}
		}
	}
	return __TEMPLATE__("arg_", index).(string)
}

/* OVERLOAD: function getTupleElementLabel(d: ParameterDeclaration | NamedTupleMember): __String; */
/* OVERLOAD: function getTupleElementLabel(d: ParameterDeclaration | NamedTupleMember | undefined, index: number, elementFlags: ElementFlags, restSymbol?: Symbol): __String; */
func (c *Checker) getTupleElementLabel(d Union[ParameterDeclaration, NamedTupleMember, undefined], index number /*  = 0 */, elementFlags ElementFlags /*  = ElementFlags.Fixed */, restSymbol *ast.Symbol) string {
	if d == nil {
		restParameter := tryCast(restSymbol. /* ? */ valueDeclaration, isParameter)
		if restParameter != nil {
			return c.getTupleElementLabelFromBindingElement(restParameter, index, elementFlags)
		} else {
			return __TEMPLATE__(ifNotNilElse(restSymbol. /* ? */ escapedName, "arg"), "_", index).(string)
		}
	}
	Debug.assert(isIdentifier(d.Name))
	// Parameter declarations could be binding patterns, but we only allow identifier names
	return d.Name.EscapedText
}

func (c *Checker) getParameterNameAtPosition(signature Signature, pos number, overrideRestType *Type) string {
	paramCount := signature.parameters.length - (ifElse(signatureHasRestParameter(signature), 1, 0))
	if pos < paramCount {
		return signature.parameters[pos].EscapedName
	}
	restParameter := signature.parameters[paramCount] || c.unknownSymbol
	restType := overrideRestType || c.getTypeOfSymbol(restParameter)
	if c.isTupleType(restType) {
		tupleType := restType.AsTypeReference().target.AsTupleType()
		index := pos - paramCount
		associatedName := tupleType.labeledElementDeclarations[index]
		elementFlags := tupleType.elementFlags[index]
		return c.getTupleElementLabel(associatedName, index, elementFlags, restParameter)
	}
	return restParameter.EscapedName
}

func (c *Checker) getParameterIdentifierInfoAtPosition(signature Signature, pos number) * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { parameter: Identifier; parameterName: __String; isRestParameter: boolean; } */ any {
	if signature.declaration. /* ? */ kind == ast.KindJSDocFunctionType {
		return nil
	}
	paramCount := signature.parameters.length - (ifElse(signatureHasRestParameter(signature), 1, 0))
	if pos < paramCount {
		param := signature.parameters[pos]
		paramIdent := c.getParameterDeclarationIdentifier(param)
		if paramIdent {
			return map[any]any{ /* TODO(TS-TO-GO): was object literal */
				"parameter":       paramIdent,
				"parameterName":   param.EscapedName,
				"isRestParameter": false,
			}
		} else {
			return nil
		}
	}

	restParameter := signature.parameters[paramCount] || c.unknownSymbol
	restIdent := c.getParameterDeclarationIdentifier(restParameter)
	if !restIdent {
		return nil
	}

	restType := c.getTypeOfSymbol(restParameter)
	if c.isTupleType(restType) {
		associatedNames := (restType.AsTypeReference()).target.AsTupleType().labeledElementDeclarations
		index := pos - paramCount
		associatedName := associatedNames[index]
		isRestTupleElement := associatedName. /* ? */ dotDotDotToken != nil

		if associatedName != nil {
			Debug.assert(isIdentifier(associatedName.Name))
			return map[any]any{ /* TODO(TS-TO-GO): was object literal */
				"parameter":       associatedName.Name,
				"parameterName":   associatedName.Name.EscapedText,
				"isRestParameter": isRestTupleElement,
			}
		}

		return nil
	}

	if pos == paramCount {
		return map[any]any{ /* TODO(TS-TO-GO): was object literal */
			"parameter":       restIdent,
			"parameterName":   restParameter.EscapedName,
			"isRestParameter": true,
		}
	}
	return nil
}

func (c *Checker) getParameterDeclarationIdentifier(symbol *ast.Symbol) * /* TODO(TS-TO-GO) inferred type false | Identifier */ any {
	return symbol.ValueDeclaration && isParameter(symbol.ValueDeclaration) && isIdentifier(symbol.ValueDeclaration.Name) && symbol.ValueDeclaration.Name
}

func (c *Checker) isValidDeclarationForTupleLabel(d Declaration) bool {
	return d.Kind == ast.KindNamedTupleMember || (isParameter(d) && d.Name && isIdentifier(d.Name))
}

func (c *Checker) getNameableDeclarationAtPosition(signature Signature, pos number) * /* TODO(TS-TO-GO) inferred type ParameterDeclaration | NamedTupleMember */ any {
	paramCount := signature.parameters.length - (ifElse(signatureHasRestParameter(signature), 1, 0))
	if pos < paramCount {
		decl := signature.parameters[pos].ValueDeclaration
		if decl != nil && c.isValidDeclarationForTupleLabel(decl) {
			return decl
		} else {
			return nil
		}
	}
	restParameter := signature.parameters[paramCount] || c.unknownSymbol
	restType := c.getTypeOfSymbol(restParameter)
	if c.isTupleType(restType) {
		associatedNames := (restType.AsTypeReference()).target.AsTupleType().labeledElementDeclarations
		index := pos - paramCount
		return associatedNames && associatedNames[index]
	}
	if restParameter.ValueDeclaration != nil && c.isValidDeclarationForTupleLabel(restParameter.ValueDeclaration) {
		return restParameter.ValueDeclaration
	} else {
		return nil
	}
}

func (c *Checker) getTypeAtPosition(signature Signature, pos number) *Type {
	return c.tryGetTypeAtPosition(signature, pos) || c.anyType
}

func (c *Checker) tryGetTypeAtPosition(signature Signature, pos number) *Type {
	paramCount := signature.parameters.length - (ifElse(signatureHasRestParameter(signature), 1, 0))
	if pos < paramCount {
		return c.getTypeOfParameter(signature.parameters[pos])
	}
	if signatureHasRestParameter(signature) {
		// We want to return the value undefined for an out of bounds parameter position,
		// so we need to check bounds here before calling getIndexedAccessType (which
		// otherwise would return the type 'undefined').
		restType := c.getTypeOfSymbol(signature.parameters[paramCount])
		index := pos - paramCount
		if !c.isTupleType(restType) || restType.target.combinedFlags&ElementFlagsVariable != 0 || index < restType.target.fixedLength {
			return c.getIndexedAccessType(restType, c.getNumberLiteralType(index))
		}
	}
	return nil
}

func (c *Checker) getRestTypeAtPosition(source Signature, pos number, readonly bool) *Type {
	parameterCount := c.getParameterCount(source)
	minArgumentCount := c.getMinArgumentCount(source)
	restType := c.getEffectiveRestType(source)
	if restType != nil && pos >= parameterCount-1 {
		if pos == parameterCount-1 {
			return restType
		} else {
			return c.createArrayType(c.getIndexedAccessType(restType, c.numberType))
		}
	}
	types := []never{}
	flags := []never{}
	names := []never{}
	for i := pos; i < parameterCount; i++ {
		if restType == nil || i < parameterCount-1 {
			types.push(c.getTypeAtPosition(source, i))
			flags.push(ifElse(i < minArgumentCount, ElementFlagsRequired, ElementFlagsOptional))
		} else {
			types.push(restType)
			flags.push(ElementFlagsVariadic)
		}
		names.push(c.getNameableDeclarationAtPosition(source, i))
	}
	return c.createTupleType(types, flags, readonly, names)
}

// Return the rest type at the given position, transforming `any[]` into just `any`. We do this because
// in signatures we want `any[]` in a rest position to be compatible with anything, but `any[]` isn't
// assignable to tuple types with required elements.
func (c *Checker) getRestOrAnyTypeAtPosition(source Signature, pos number) *Type {
	restType := c.getRestTypeAtPosition(source, pos)
	elementType := restType && c.getElementTypeOfArrayType(restType)
	if elementType != nil && c.isTypeAny(elementType) {
		return c.anyType
	} else {
		return restType
	}
}

// Return the number of parameters in a signature. The rest parameter, if present, counts as one
// parameter. For example, the parameter count of (x: number, y: number, ...z: string[]) is 3 and
// the parameter count of (x: number, ...args: [number, ...string[], boolean])) is also 3. In the
// latter example, the effective rest type is [...string[], boolean].
func (c *Checker) getParameterCount(signature Signature) number {
	length := signature.parameters.length
	if signatureHasRestParameter(signature) {
		restType := c.getTypeOfSymbol(signature.parameters[length-1])
		if c.isTupleType(restType) {
			return length + restType.target.fixedLength - (ifElse(restType.target.combinedFlags&ElementFlagsVariable != 0, 0, 1))
		}
	}
	return length
}

func (c *Checker) getMinArgumentCount(signature Signature, flags MinArgumentCountFlags) number {
	strongArityForUntypedJS := flags & MinArgumentCountFlagsStrongArityForUntypedJS
	voidIsNonOptional := flags & MinArgumentCountFlagsVoidIsNonOptional
	if voidIsNonOptional != 0 || signature.resolvedMinArgumentCount == nil {
		var minArgumentCount *number
		if signatureHasRestParameter(signature) {
			restType := c.getTypeOfSymbol(signature.parameters[signature.parameters.length-1])
			if c.isTupleType(restType) {
				firstOptionalIndex := core.FindIndex(restType.target.elementFlags, func(f ElementFlags) bool {
					return f&ElementFlagsRequired == 0
				})
				var requiredCount number
				if firstOptionalIndex < 0 {
					requiredCount = restType.target.fixedLength
				} else {
					requiredCount = firstOptionalIndex
				}
				if requiredCount > 0 {
					minArgumentCount = signature.parameters.length - 1 + requiredCount
				}
			}
		}
		if minArgumentCount == nil {
			if strongArityForUntypedJS == 0 && signature.flags&SignatureFlagsIsUntypedSignatureInJSFile != 0 {
				return 0
			}
			minArgumentCount = signature.minArgumentCount
		}
		if voidIsNonOptional != 0 {
			return minArgumentCount
		}
		for i := minArgumentCount - 1; i >= 0; i-- {
			t := c.getTypeAtPosition(signature, i)
			if c.filterType(t, c.acceptsVoid).flags&TypeFlagsNever != 0 {
				break
			}
			minArgumentCount = i
		}
		signature.resolvedMinArgumentCount = minArgumentCount
	}
	return signature.resolvedMinArgumentCount
}

func (c *Checker) hasEffectiveRestParameter(signature Signature) bool {
	if signatureHasRestParameter(signature) {
		restType := c.getTypeOfSymbol(signature.parameters[signature.parameters.length-1])
		return !c.isTupleType(restType) || restType.target.combinedFlags&ElementFlagsVariable != 0
	}
	return false
}

func (c *Checker) getEffectiveRestType(signature Signature) *Type {
	if signatureHasRestParameter(signature) {
		restType := c.getTypeOfSymbol(signature.parameters[signature.parameters.length-1])
		if !c.isTupleType(restType) {
			if c.isTypeAny(restType) {
				return c.anyArrayType
			} else {
				return restType
			}
		}
		if restType.target.combinedFlags&ElementFlagsVariable != 0 {
			return c.sliceTupleType(restType, restType.target.fixedLength)
		}
	}
	return nil
}

func (c *Checker) getNonArrayRestType(signature Signature) *Type {
	restType := c.getEffectiveRestType(signature)
	if restType != nil && !c.isArrayType(restType) && !c.isTypeAny(restType) {
		return restType
	} else {
		return nil
	}
}

func (c *Checker) getTypeOfFirstParameterOfSignature(signature Signature) *Type {
	return c.getTypeOfFirstParameterOfSignatureWithFallback(signature, c.neverType)
}

func (c *Checker) getTypeOfFirstParameterOfSignatureWithFallback(signature Signature, fallbackType *Type) *Type {
	if signature.parameters.length > 0 {
		return c.getTypeAtPosition(signature, 0)
	} else {
		return fallbackType
	}
}

func (c *Checker) inferFromAnnotatedParameters(signature Signature, context Signature, inferenceContext InferenceContext) {
	len := signature.parameters.length - (ifElse(signatureHasRestParameter(signature), 1, 0))
	for i := 0; i < len; i++ {
		declaration := signature.parameters[i].ValueDeclaration.AsParameterDeclaration()
		typeNode := getEffectiveTypeAnnotationNode(declaration)
		if typeNode != nil {
			source := c.addOptionality(c.getTypeFromTypeNode(typeNode), false /*isProperty*/, isOptionalDeclaration(declaration))
			target := c.getTypeAtPosition(context, i)
			c.inferTypes(inferenceContext.inferences, source, target)
		}
	}
}

func (c *Checker) assignContextualParameterTypes(signature Signature, context Signature) {
	if context.typeParameters != nil {
		if signature.typeParameters == nil {
			signature.typeParameters = context.typeParameters
		} else {
			return
			// This signature has already has a contextual inference performed and cached on it!
		}
	}
	if context.thisParameter != nil {
		parameter := signature.thisParameter
		if parameter == nil || parameter.ValueDeclaration != nil && parameter.ValueDeclaration.AsParameterDeclaration().Type_ == nil {
			if parameter == nil {
				signature.thisParameter = c.createSymbolWithType(context.thisParameter, nil /*type*/)
			}
			c.assignParameterType(signature.thisParameter, c.getTypeOfSymbol(context.thisParameter))
		}
	}
	len := signature.parameters.length - (ifElse(signatureHasRestParameter(signature), 1, 0))
	for i := 0; i < len; i++ {
		parameter := signature.parameters[i]
		declaration := parameter.ValueDeclaration.AsParameterDeclaration()
		if getEffectiveTypeAnnotationNode(declaration) == nil {
			t := c.tryGetTypeAtPosition(context, i)
			if t && declaration.Initializer != nil {
				initializerType := c.checkDeclarationInitializer(declaration, CheckModeNormal)
				if !c.isTypeAssignableTo(initializerType, t) && c.isTypeAssignableTo(t /* TODO(TS-TO-GO) EqualsToken BinaryExpression: initializerType = widenTypeInferredFromInitializer(declaration, initializerType) */, TODO) {
					t = initializerType
				}
			}
			c.assignParameterType(parameter, t)
		}
	}
	if signatureHasRestParameter(signature) {
		// parameter might be a transient symbol generated by use of `arguments` in the function body.
		parameter := core.LastOrNil(signature.parameters)
		if ifElse(parameter.ValueDeclaration != nil, getEffectiveTypeAnnotationNode(parameter.ValueDeclaration.AsParameterDeclaration()) == nil, getCheckFlags(parameter)&ast.CheckFlagsDeferredType != 0) {
			contextualParameterType := c.getRestTypeAtPosition(context, len)
			c.assignParameterType(parameter, contextualParameterType)
		}
	}
}

func (c *Checker) assignNonContextualParameterTypes(signature Signature) {
	if signature.thisParameter != nil {
		c.assignParameterType(signature.thisParameter)
	}
	for _, parameter := range signature.parameters {
		c.assignParameterType(parameter)
	}
}

func (c *Checker) assignParameterType(parameter *ast.Symbol, contextualType *Type) {
	links := c.getSymbolLinks(parameter)
	if links.type_ == nil {
		declaration := parameter.ValueDeclaration /* as ParameterDeclaration | undefined */
		links.type_ = c.addOptionality(contextualType || (ifElse(declaration != nil, c.getWidenedTypeForVariableLikeDeclaration(declaration, true /*reportErrors*/), c.getTypeOfSymbol(parameter))), false, declaration != nil && declaration.Initializer == nil && isOptionalDeclaration(declaration))
		if declaration != nil && declaration.Name.Kind != ast.KindIdentifier {
			// if inference didn't come up with anything but unknown, fall back to the binding pattern if present.
			if links.type_ == c.unknownType {
				links.type_ = c.getTypeFromBindingPattern(declaration.Name)
			}
			c.assignBindingElementTypes(declaration.Name, links.type_)
		}
	} else if contextualType != nil {
		Debug.assertEqual(links.type_, contextualType, "Parameter symbol already has a cached type which differs from newly assigned type")
	}
}

// When contextual typing assigns a type to a parameter that contains a binding pattern, we also need to push
// the destructured type into the contained binding elements.
func (c *Checker) assignBindingElementTypes(pattern BindingPattern, parentType *Type) {
	for _, element := range pattern.Elements {
		if !isOmittedExpression(element) {
			t := c.getBindingElementTypeFromParentType(element, parentType, false /*noTupleBoundsCheck*/)
			if element.Name.Kind == ast.KindIdentifier {
				c.getSymbolLinks(c.getSymbolOfDeclaration(element)).type_ = t
			} else {
				c.assignBindingElementTypes(element.Name, t)
			}
		}
	}
}

func (c *Checker) createClassDecoratorContextType(classType *Type) *Type {
	return c.tryCreateTypeReference(c.getGlobalClassDecoratorContextType(true), []*Type{classType})
}

func (c *Checker) createClassMethodDecoratorContextType(thisType *Type, valueType *Type) *Type {
	return c.tryCreateTypeReference(c.getGlobalClassMethodDecoratorContextType(true), []*Type{thisType, valueType})
}

func (c *Checker) createClassGetterDecoratorContextType(thisType *Type, valueType *Type) *Type {
	return c.tryCreateTypeReference(c.getGlobalClassGetterDecoratorContextType(true), []*Type{thisType, valueType})
}

func (c *Checker) createClassSetterDecoratorContextType(thisType *Type, valueType *Type) *Type {
	return c.tryCreateTypeReference(c.getGlobalClassSetterDecoratorContextType(true), []*Type{thisType, valueType})
}

func (c *Checker) createClassAccessorDecoratorContextType(thisType *Type, valueType *Type) *Type {
	return c.tryCreateTypeReference(c.getGlobalClassAccessorDecoratorContextType(true), []*Type{thisType, valueType})
}

func (c *Checker) createClassFieldDecoratorContextType(thisType *Type, valueType *Type) *Type {
	return c.tryCreateTypeReference(c.getGlobalClassFieldDecoratorContextType(true), []*Type{thisType, valueType})
}

/**
 * Gets a type like `{ name: "foo", private: false, static: true }` that is used to provided member-specific
 * details that will be intersected with a decorator context type.
 */

func (c *Checker) getClassMemberDecoratorContextOverrideType(nameType *Type, isPrivate bool, isStatic bool) *Type {
	key := __TEMPLATE__(ifElse(isPrivate, "p", "P"), ifElse(isStatic, "s", "S"), nameType.id)
	overrideType := c.decoratorContextOverrideTypeCache.get(key)
	if overrideType == nil {
		members := createSymbolTable()
		members.set("name" /* as __String */, c.createProperty("name" /* as __String */, nameType))
		members.set("private" /* as __String */, c.createProperty("private" /* as __String */, ifElse(isPrivate, c.trueType, c.falseType)))
		members.set("static" /* as __String */, c.createProperty("static" /* as __String */, ifElse(isStatic, c.trueType, c.falseType)))
		overrideType = c.createAnonymousType(nil, members, emptyArray, emptyArray, emptyArray)
		c.decoratorContextOverrideTypeCache.set(key, overrideType)
	}
	return overrideType
}

func (c *Checker) createClassMemberDecoratorContextTypeForNode(node Union[MethodDeclaration, AccessorDeclaration, PropertyDeclaration], thisType *Type, valueType *Type) *Type {
	isStatic := hasStaticModifier(node)
	isPrivate := isPrivateIdentifier(node.Name)
	var nameType *Type
	if isPrivate {
		nameType = c.getStringLiteralType(idText(node.Name))
	} else {
		nameType = c.getLiteralTypeFromPropertyName(node.Name)
	}
	var contextType *Type
	switch {
	case isMethodDeclaration(node):
		contextType = c.createClassMethodDecoratorContextType(thisType, valueType)
	case isGetAccessorDeclaration(node):
		contextType = c.createClassGetterDecoratorContextType(thisType, valueType)
	case isSetAccessorDeclaration(node):
		contextType = c.createClassSetterDecoratorContextType(thisType, valueType)
	case isAutoAccessorPropertyDeclaration(node):
		contextType = c.createClassAccessorDecoratorContextType(thisType, valueType)
	case isPropertyDeclaration(node):
		contextType = c.createClassFieldDecoratorContextType(thisType, valueType)
	default:
		contextType = Debug.failBadSyntaxKind(node)
	}
	overrideType := c.getClassMemberDecoratorContextOverrideType(nameType, isPrivate, isStatic)
	return c.getIntersectionType([]*Type{contextType, overrideType})
}

func (c *Checker) createClassAccessorDecoratorTargetType(thisType *Type, valueType *Type) *Type {
	return c.tryCreateTypeReference(c.getGlobalClassAccessorDecoratorTargetType(true), []*Type{thisType, valueType})
}

func (c *Checker) createClassAccessorDecoratorResultType(thisType *Type, valueType *Type) *Type {
	return c.tryCreateTypeReference(c.getGlobalClassAccessorDecoratorResultType(true), []*Type{thisType, valueType})
}

func (c *Checker) createClassFieldDecoratorInitializerMutatorType(thisType *Type, valueType *Type) ObjectType {
	thisParam := c.createParameter("this" /* as __String */, thisType)
	valueParam := c.createParameter("value" /* as __String */, valueType)
	return c.createFunctionType(nil, thisParam, []TransientSymbol{valueParam}, valueType, nil /*typePredicate*/, 1)
}

/**
 * Creates a call signature for an ES Decorator. This method is used by the semantics of
 * `getESDecoratorCallSignature`, which you should probably be using instead.
 */

func (c *Checker) createESDecoratorCallSignature(targetType *Type, contextType *Type, nonOptionalReturnType *Type) Signature {
	targetParam := c.createParameter("target" /* as __String */, targetType)
	contextParam := c.createParameter("context" /* as __String */, contextType)
	returnType := c.getUnionType([]*Type{nonOptionalReturnType, c.voidType})
	return c.createCallSignature(nil, nil /*thisParameter*/, []TransientSymbol{targetParam, contextParam}, returnType)
}

/**
 * Gets a call signature that should be used when resolving `decorator` as a call. This does not use the value
 * of the decorator itself, but instead uses the declaration on which it is placed along with its relative
 * position amongst other decorators on the same declaration to determine the applicable signature. The
 * resulting signature can be used for call resolution, inference, and contextual typing.
 */

func (c *Checker) getESDecoratorCallSignature(decorator Decorator) *Signature {
	// We are considering a future change that would allow the type of a decorator to affect the type of the
	// class and its members, such as a `@Stringify` decorator changing the type of a `number` field to `string`, or
	// a `@Callable` decorator adding a call signature to a `class`. The type arguments for the various context
	// types may eventually change to reflect such mutations.
	//
	// In some cases we describe such potential mutations as coming from a "prior decorator application". It is
	// important to note that, while decorators are *evaluated* left to right, they are *applied* right to left
	// to preserve f ৹ g -> f(g(x)) application order. In these cases, a "prior" decorator usually means the
	// next decorator following this one in document order.
	//
	// The "original type" of a class or member is the type it was declared as, or the type we infer from
	// initializers, before _any_ decorators are applied.
	//
	// The type of a class or member that is a result of a prior decorator application represents the
	// "current type", i.e., the type for the declaration at the time the decorator is _applied_.
	//
	// The type of a class or member that is the result of the application of *all* relevant decorators is the
	// "final type".
	//
	// Any decorator that allows mutation or replacement will also refer to an "input type" and an
	// "output type". The "input type" corresponds to the "current type" of the declaration, while the
	// "output type" will become either the "input type/current type" for a subsequent decorator application,
	// or the "final type" for the decorated declaration.
	//
	// It is important to understand decorator application order as it relates to how the "current", "input",
	// "output", and "final" types will be determined:
	//
	//  @E2 @E1 class SomeClass {
	//      @A2 @A1 static f() {}
	//      @B2 @B1 g() {}
	//      @C2 @C1 static x;
	//      @D2 @D1 y;
	//  }
	//
	// Per [the specification][1], decorators are applied in the following order:
	//
	// 1. For each static method (incl. get/set methods and `accessor` fields), in document order:
	//    a. Apply each decorator for that method, in reverse order (`A1`, `A2`).
	// 2. For each instance method (incl. get/set methods and `accessor` fields), in document order:
	//    a. Apply each decorator for that method, in reverse order (`B1`, `B2`).
	// 3. For each static field (excl. auto-accessors), in document order:
	//    a. Apply each decorator for that field, in reverse order (`C1`, `C2`).
	// 4. For each instance field (excl. auto-accessors), in document order:
	//    a. Apply each decorator for that field, in reverse order (`D1`, `D2`).
	// 5. Apply each decorator for the class, in reverse order (`E1`, `E2`).
	//
	// As a result, "current" types at each decorator application are as follows:
	// - For `A1`, the "current" types of the class and method are their "original" types.
	// - For `A2`, the "current type" of the method is the "output type" of `A1`, and the "current type" of the
	//   class is the type of `SomeClass` where `f` is the "output type" of `A1`. This becomes the "final type"
	//   of `f`.
	// - For `B1`, the "current type" of the method is its "original type", and the "current type" of the class
	//   is the type of `SomeClass` where `f` now has its "final type".
	// - etc.
	//
	// [1]: https://arai-a.github.io/ecma262-compare/?pr=2417&id=sec-runtime-semantics-classdefinitionevaluation
	//
	// This seems complicated at first glance, but is not unlike our existing inference for functions:
	//
	//  declare function pipe<Original, A1, A2, B1, B2, C1, C2, D1, D2, E1, E2>(
	//      original: Original,
	//      a1: (input: Original, context: Context<E2>) => A1,
	//      a2: (input: A1, context: Context<E2>) => A2,
	//      b1: (input: A2, context: Context<E2>) => B1,
	//      b2: (input: B1, context: Context<E2>) => B2,
	//      c1: (input: B2, context: Context<E2>) => C1,
	//      c2: (input: C1, context: Context<E2>) => C2,
	//      d1: (input: C2, context: Context<E2>) => D1,
	//      d2: (input: D1, context: Context<E2>) => D2,
	//      e1: (input: D2, context: Context<E2>) => E1,
	//      e2: (input: E1, context: Context<E2>) => E2,
	//  ): E2;

	// When a decorator is applied, it is passed two arguments: "target", which is a value representing the
	// thing being decorated (constructors for classes, functions for methods/accessors, `undefined` for fields,
	// and a `{ get, set }` object for auto-accessors), and "context", which is an object that provides
	// reflection information about the decorated element, as well as the ability to add additional "extra"
	// initializers. In most cases, the "target" argument corresponds to the "input type" in some way, and the
	// return value similarly corresponds to the "output type" (though if the "output type" is `void` or
	// `undefined` then the "output type" is the "input type").

	TODO_IDENTIFIER := decorator
	links := c.getNodeLinks(parent)
	if links.decoratorSignature == nil {
		links.decoratorSignature = c.anySignature
		switch parent.Kind {
		case ast.KindClassDeclaration,
			ast.KindClassExpression:
			// Class decorators have a `context` of `ClassDecoratorContext<Class>`, where the `Class` type
			// argument will be the "final type" of the class after all decorators are applied.

			node := parent /* as ClassDeclaration | ClassExpression */
			targetType := c.getTypeOfSymbol(c.getSymbolOfDeclaration(node))
			contextType := c.createClassDecoratorContextType(targetType)
			links.decoratorSignature = c.createESDecoratorCallSignature(targetType, contextType, targetType)
		case ast.KindMethodDeclaration,
			ast.KindGetAccessor,
			ast.KindSetAccessor:
			node := parent /* as MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration */
			if !isClassLike(node.Parent) {
				break
			}

			// Method decorators have a `context` of `ClassMethodDecoratorContext<This, Value>`, where the
			// `Value` type argument corresponds to the "final type" of the method.
			//
			// Getter decorators have a `context` of `ClassGetterDecoratorContext<This, Value>`, where the
			// `Value` type argument corresponds to the "final type" of the value returned by the getter.
			//
			// Setter decorators have a `context` of `ClassSetterDecoratorContext<This, Value>`, where the
			// `Value` type argument corresponds to the "final type" of the parameter of the setter.
			//
			// In all three cases, the `This` type argument is the "final type" of either the class or
			// instance, depending on whether the member was `static`.

			var valueType *Type
			if isMethodDeclaration(node) {
				valueType = c.getOrCreateTypeFromSignature(c.getSignatureFromDeclaration(node))
			} else {
				valueType = c.getTypeOfNode(node)
			}

			var thisType *Type
			if hasStaticModifier(node) {
				thisType = c.getTypeOfSymbol(c.getSymbolOfDeclaration(node.Parent))
			} else {
				thisType = c.getDeclaredTypeOfClassOrInterface(c.getSymbolOfDeclaration(node.Parent))
			}

			// We wrap the "input type", if necessary, to match the decoration target. For getters this is
			// something like `() => inputType`, for setters it's `(value: inputType) => void` and for
			// methods it is just the input type.
			var targetType *Type
			switch {
			case isGetAccessorDeclaration(node):
				targetType = c.createGetterFunctionType(valueType)
			case isSetAccessorDeclaration(node):
				targetType = c.createSetterFunctionType(valueType)
			default:
				targetType = valueType
			}

			contextType := c.createClassMemberDecoratorContextTypeForNode(node, thisType, valueType)

			// We also wrap the "output type", as needed.
			var returnType *Type
			switch {
			case isGetAccessorDeclaration(node):
				returnType = c.createGetterFunctionType(valueType)
			case isSetAccessorDeclaration(node):
				returnType = c.createSetterFunctionType(valueType)
			default:
				returnType = valueType
			}

			links.decoratorSignature = c.createESDecoratorCallSignature(targetType, contextType, returnType)
		case ast.KindPropertyDeclaration:
			node := parent.AsPropertyDeclaration()
			if !isClassLike(node.Parent) {
				break
			}

			// Field decorators have a `context` of `ClassFieldDecoratorContext<This, Value>` and
			// auto-accessor decorators have a `context` of `ClassAccessorDecoratorContext<This, Value>. In
			// both cases, the `This` type argument is the "final type" of either the class or instance,
			// depending on whether the member was `static`, and the `Value` type argument corresponds to
			// the "final type" of the value stored in the field.

			valueType := c.getTypeOfNode(node)
			var thisType *Type
			if hasStaticModifier(node) {
				thisType = c.getTypeOfSymbol(c.getSymbolOfDeclaration(node.Parent))
			} else {
				thisType = c.getDeclaredTypeOfClassOrInterface(c.getSymbolOfDeclaration(node.Parent))
			}

			// The `target` of an auto-accessor decorator is a `{ get, set }` object, representing the
			// runtime-generated getter and setter that are added to the class/prototype. The `target` of a
			// regular field decorator is always `undefined` as it isn't installed until it is initialized.
			var targetType *Type
			if hasAccessorModifier(node) {
				targetType = c.createClassAccessorDecoratorTargetType(thisType, valueType)
			} else {
				targetType = c.undefinedType
			}

			contextType := c.createClassMemberDecoratorContextTypeForNode(node, thisType, valueType)

			// We wrap the "output type" depending on the declaration. For auto-accessors, we wrap the
			// "output type" in a `ClassAccessorDecoratorResult<This, In, Out>` type, which allows for
			// mutation of the runtime-generated getter and setter, as well as the injection of an
			// initializer mutator. For regular fields, we wrap the "output type" in an initializer mutator.
			var returnType *Type
			if hasAccessorModifier(node) {
				returnType = c.createClassAccessorDecoratorResultType(thisType, valueType)
			} else {
				returnType = c.createClassFieldDecoratorInitializerMutatorType(thisType, valueType)
			}

			links.decoratorSignature = c.createESDecoratorCallSignature(targetType, contextType, returnType)
		}
	}
	if links.decoratorSignature == c.anySignature {
		return nil
	} else {
		return links.decoratorSignature
	}
}

func (c *Checker) getLegacyDecoratorCallSignature(decorator Decorator) *Signature {
	TODO_IDENTIFIER := decorator
	links := c.getNodeLinks(parent)
	if links.decoratorSignature == nil {
		links.decoratorSignature = c.anySignature
		switch parent.Kind {
		case ast.KindClassDeclaration,
			ast.KindClassExpression:
			node := parent /* as ClassDeclaration | ClassExpression */
			// For a class decorator, the `target` is the type of the class (e.g. the
			// "static" or "constructor" side of the class).
			targetType := c.getTypeOfSymbol(c.getSymbolOfDeclaration(node))
			targetParam := c.createParameter("target" /* as __String */, targetType)
			links.decoratorSignature = c.createCallSignature(nil, nil, []TransientSymbol{targetParam}, c.getUnionType([]*Type{targetType, c.voidType}))
		case ast.KindParameter:
			node := parent.AsParameterDeclaration()
			if !isConstructorDeclaration(node.Parent) && !(isMethodDeclaration(node.Parent) || isSetAccessorDeclaration(node.Parent) && isClassLike(node.Parent.Parent)) {
				break
			}

			if getThisParameter(node.Parent) == node {
				break
			}

			var index number
			if getThisParameter(node.Parent) != nil {
				index = node.Parent.Parameters.indexOf(node) - 1
			} else {
				index = node.Parent.Parameters.indexOf(node)
			}
			Debug.assert(index >= 0)

			// A parameter declaration decorator will have three arguments (see `ParameterDecorator` in
			// core.d.ts).

			var targetType *Type
			if isConstructorDeclaration(node.Parent) {
				targetType = c.getTypeOfSymbol(c.getSymbolOfDeclaration(node.Parent.Parent))
			} else {
				targetType = c.getParentTypeOfClassElement(node.Parent)
			}

			var keyType *Type
			if isConstructorDeclaration(node.Parent) {
				keyType = c.undefinedType
			} else {
				keyType = c.getClassElementPropertyKeyType(node.Parent)
			}

			indexType := c.getNumberLiteralType(index)

			targetParam := c.createParameter("target" /* as __String */, targetType)
			keyParam := c.createParameter("propertyKey" /* as __String */, keyType)
			indexParam := c.createParameter("parameterIndex" /* as __String */, indexType)
			links.decoratorSignature = c.createCallSignature(nil, nil, []TransientSymbol{targetParam, keyParam, indexParam}, c.voidType)
		case ast.KindMethodDeclaration,
			ast.KindGetAccessor,
			ast.KindSetAccessor,
			ast.KindPropertyDeclaration:
			node := parent /* as MethodDeclaration | AccessorDeclaration | PropertyDeclaration */
			if !isClassLike(node.Parent) {
				break
			}

			// A method or accessor declaration decorator will have either two or three arguments (see
			// `PropertyDecorator` and `MethodDecorator` in core.d.ts).

			targetType := c.getParentTypeOfClassElement(node)
			targetParam := c.createParameter("target" /* as __String */, targetType)

			keyType := c.getClassElementPropertyKeyType(node)
			keyParam := c.createParameter("propertyKey" /* as __String */, keyType)

			var returnType *Type
			if isPropertyDeclaration(node) {
				returnType = c.voidType
			} else {
				returnType = c.createTypedPropertyDescriptorType(c.getTypeOfNode(node))
			}

			hasPropDesc := !isPropertyDeclaration(parent) || hasAccessorModifier(parent)
			if hasPropDesc {
				descriptorType := c.createTypedPropertyDescriptorType(c.getTypeOfNode(node))
				descriptorParam := c.createParameter("descriptor" /* as __String */, descriptorType)
				links.decoratorSignature = c.createCallSignature(nil, nil, []TransientSymbol{targetParam, keyParam, descriptorParam}, c.getUnionType([]*Type{returnType, c.voidType}))
			} else {
				links.decoratorSignature = c.createCallSignature(nil, nil, []TransientSymbol{targetParam, keyParam}, c.getUnionType([]*Type{returnType, c.voidType}))
			}
		}
	}
	if links.decoratorSignature == c.anySignature {
		return nil
	} else {
		return links.decoratorSignature
	}
}

func (c *Checker) getDecoratorCallSignature(decorator Decorator) *Signature {
	if c.legacyDecorators {
		return c.getLegacyDecoratorCallSignature(decorator)
	} else {
		return c.getESDecoratorCallSignature(decorator)
	}
}

func (c *Checker) createPromiseType(promisedType *Type) *Type {
	// creates a `Promise<T>` type where `T` is the promisedType argument
	globalPromiseType := c.getGlobalPromiseType(true)
	if globalPromiseType != c.emptyGenericType {
		// if the promised type is itself a promise, get the underlying type; otherwise, fallback to the promised type
		// Unwrap an `Awaited<T>` to `T` to improve inference.
		promisedType = c.getAwaitedTypeNoAlias(c.unwrapAwaitedType(promisedType)) || c.unknownType
		return c.createTypeReference(globalPromiseType, []*Type{promisedType})
	}

	return c.unknownType
}

func (c *Checker) createPromiseLikeType(promisedType *Type) *Type {
	// creates a `PromiseLike<T>` type where `T` is the promisedType argument
	globalPromiseLikeType := c.getGlobalPromiseLikeType(true)
	if globalPromiseLikeType != c.emptyGenericType {
		// if the promised type is itself a promise, get the underlying type; otherwise, fallback to the promised type
		// Unwrap an `Awaited<T>` to `T` to improve inference.
		promisedType = c.getAwaitedTypeNoAlias(c.unwrapAwaitedType(promisedType)) || c.unknownType
		return c.createTypeReference(globalPromiseLikeType, []*Type{promisedType})
	}

	return c.unknownType
}

func (c *Checker) createPromiseReturnType(func_ Union[FunctionLikeDeclaration, ImportCall], promisedType *Type) *Type {
	promiseType := c.createPromiseType(promisedType)
	if promiseType == c.unknownType {
		c.error(func_, ifElse(isImportCall(func_), Diagnostics.A_dynamic_import_call_returns_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES2015_in_your_lib_option, Diagnostics.An_async_function_or_method_must_return_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES2015_in_your_lib_option))
		return c.errorType
	} else if c.getGlobalPromiseConstructorSymbol(true) == nil {
		c.error(func_, ifElse(isImportCall(func_), Diagnostics.A_dynamic_import_call_in_ES5_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option, Diagnostics.An_async_function_or_method_in_ES5_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option))
	}

	return promiseType
}

func (c *Checker) createNewTargetExpressionType(targetType *Type) *Type {
	// Create a synthetic type `NewTargetExpression { target: TargetType; }`
	symbol := c.createSymbol(ast.SymbolFlagsNone, "NewTargetExpression" /* as __String */)

	targetPropertySymbol := c.createSymbol(ast.SymbolFlagsProperty, "target" /* as __String */, ast.CheckFlagsReadonly)
	targetPropertySymbol.Parent = symbol
	targetPropertySymbol.Links.type_ = targetType

	members := createSymbolTable([]TransientSymbol{targetPropertySymbol})
	symbol.Members = members
	return c.createAnonymousType(symbol, members, emptyArray, emptyArray, emptyArray)
}

func (c *Checker) getReturnTypeFromBody(func_ FunctionLikeDeclaration, checkMode CheckMode) *Type {
	if func_.Body == nil {
		return c.errorType
	}

	functionFlags := getFunctionFlags(func_)
	isAsync := (functionFlags & FunctionFlagsAsync) != 0
	isGenerator := (functionFlags & FunctionFlagsGenerator) != 0

	var returnType *Type
	var yieldType *Type
	var nextType *Type
	var fallbackReturnType *Type = c.voidType
	if func_.Body.Kind != ast.KindBlock {
		returnType = c.checkExpressionCached(func_.Body, checkMode && checkMode & ^CheckModeSkipGenericFunctions)
		if isAsync {
			// From within an async function you can return either a non-promise value or a promise. Any
			// Promise/A+ compatible implementation will always assimilate any foreign promise, so the
			// return type of the body should be unwrapped to its awaited type, which we will wrap in
			// the native Promise<T> type later in this function.
			returnType = c.unwrapAwaitedType(c.checkAwaitedType(returnType, false /*withAlias*/, func_ /*errorNode*/, Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member))
		}
	} else if isGenerator {
		returnTypes := c.checkAndAggregateReturnExpressionTypes(func_, checkMode)
		if returnTypes == nil {
			fallbackReturnType = c.neverType
		} else if returnTypes.length > 0 {
			returnType = c.getUnionType(returnTypes, UnionReductionSubtype)
		}
		TODO_IDENTIFIER := c.checkAndAggregateYieldOperandTypes(func_, checkMode)
		if core.Some(yieldTypes) {
			yieldType = c.getUnionType(yieldTypes, UnionReductionSubtype)
		} else {
			yieldType = nil
		}
		if core.Some(nextTypes) {
			nextType = c.getIntersectionType(nextTypes)
		} else {
			nextType = nil
		}
	} else {
		types := c.checkAndAggregateReturnExpressionTypes(func_, checkMode)
		if types == nil {
			// For an async function, the return type will not be never, but rather a Promise for never.
			if functionFlags&FunctionFlagsAsync != 0 {
				return c.createPromiseReturnType(func_, c.neverType)
			} else {
				return c.neverType
			}
			// Normal function
		}
		if types.length == 0 {
			// For an async function, the return type will not be void/undefined, but rather a Promise for void/undefined.
			contextualReturnType := c.getContextualReturnType(func_, nil /*contextFlags*/)
			var returnType IntrinsicType
			if contextualReturnType != nil && (c.unwrapReturnType(contextualReturnType, functionFlags) || c.voidType).flags&TypeFlagsUndefined != 0 {
				returnType = c.undefinedType
			} else {
				returnType = c.voidType
			}
			if functionFlags&FunctionFlagsAsync != 0 {
				return c.createPromiseReturnType(func_, returnType)
			} else {
				return returnType
			}
			// Normal function
		}

		// Return a union of the return expression types.
		returnType = c.getUnionType(types, UnionReductionSubtype)
	}

	if returnType != nil || yieldType != nil || nextType != nil {
		if yieldType != nil {
			c.reportErrorsFromWidening(func_, yieldType, WideningKindGeneratorYield)
		}
		if returnType != nil {
			c.reportErrorsFromWidening(func_, returnType, WideningKindFunctionReturn)
		}
		if nextType != nil {
			c.reportErrorsFromWidening(func_, nextType, WideningKindGeneratorNext)
		}
		if returnType != nil && c.isUnitType(returnType) || yieldType != nil && c.isUnitType(yieldType) || nextType != nil && c.isUnitType(nextType) {
			contextualSignature := c.getContextualSignatureForFunctionLikeDeclaration(func_)
			var contextualType *Type
			switch {
			case contextualSignature == nil:
				contextualType = nil
			case contextualSignature == c.getSignatureFromDeclaration(func_):
				if isGenerator {
					contextualType = nil
				} else {
					contextualType = returnType
				}
			default:
				contextualType = c.instantiateContextualType(c.getReturnTypeOfSignature(contextualSignature), func_, nil /*contextFlags*/)
			}
			if isGenerator {
				yieldType = c.getWidenedLiteralLikeTypeForContextualIterationTypeIfNeeded(yieldType, contextualType, IterationTypeKindYield, isAsync)
				returnType = c.getWidenedLiteralLikeTypeForContextualIterationTypeIfNeeded(returnType, contextualType, IterationTypeKindReturn, isAsync)
				nextType = c.getWidenedLiteralLikeTypeForContextualIterationTypeIfNeeded(nextType, contextualType, IterationTypeKindNext, isAsync)
			} else {
				returnType = c.getWidenedLiteralLikeTypeForContextualReturnTypeIfNeeded(returnType, contextualType, isAsync)
			}
		}

		if yieldType != nil {
			yieldType = c.getWidenedType(yieldType)
		}
		if returnType != nil {
			returnType = c.getWidenedType(returnType)
		}
		if nextType != nil {
			nextType = c.getWidenedType(nextType)
		}
	}

	if isGenerator {
		return c.createGeneratorType(yieldType || c.neverType, returnType || fallbackReturnType, nextType || c.getContextualIterationType(IterationTypeKindNext, func_) || c.unknownType, isAsync)
	} else {
		// From within an async function you can return either a non-promise value or a promise. Any
		// Promise/A+ compatible implementation will always assimilate any foreign promise, so the
		// return type of the body is awaited type of the body, wrapped in a native Promise<T> type.
		if isAsync {
			return c.createPromiseType(returnType || fallbackReturnType)
		} else {
			return returnType || fallbackReturnType
		}
	}
}

func (c *Checker) createGeneratorType(yieldType *Type, returnType *Type, nextType *Type, isAsyncGenerator bool) ObjectType {
	var resolver IterationTypesResolver
	if isAsyncGenerator {
		resolver = c.asyncIterationTypesResolver
	} else {
		resolver = c.syncIterationTypesResolver
	}
	globalGeneratorType := resolver.getGlobalGeneratorType(false)
	yieldType = resolver.resolveIterationType(yieldType, nil /*errorNode*/) || c.unknownType
	returnType = resolver.resolveIterationType(returnType, nil /*errorNode*/) || c.unknownType
	if globalGeneratorType == c.emptyGenericType {
		// Fall back to the global IterableIterator type.
		globalIterableIteratorType := resolver.getGlobalIterableIteratorType(false)
		if globalIterableIteratorType != c.emptyGenericType {
			return c.createTypeFromGenericGlobalType(globalIterableIteratorType, []*Type{yieldType, returnType, nextType})
		}

		// The global Generator type doesn't exist, so report an error
		resolver.getGlobalIterableIteratorType(true)
		return c.emptyObjectType
	}

	return c.createTypeFromGenericGlobalType(globalGeneratorType, []*Type{yieldType, returnType, nextType})
}

func (c *Checker) checkAndAggregateYieldOperandTypes(func_ FunctionLikeDeclaration, checkMode *CheckMode) /* TODO(TS-TO-GO) inferred type { yieldTypes: Type[]; nextTypes: Type[]; } */ any {
	var yieldTypes []*Type = []never{}
	var nextTypes []*Type = []never{}
	isAsync := (getFunctionFlags(func_) & FunctionFlagsAsync) != 0
	forEachYieldExpression(func_.Body.AsBlock(), func(yieldExpression YieldExpression) {
		var yieldExpressionType *Type
		if yieldExpression.Expression != nil {
			yieldExpressionType = c.checkExpression(yieldExpression.Expression, checkMode)
		} else {
			yieldExpressionType = c.undefinedWideningType
		}
		pushIfUnique(yieldTypes, c.getYieldedTypeOfYieldExpression(yieldExpression, yieldExpressionType, c.anyType, isAsync))
		var nextType *Type
		if yieldExpression.AsteriskToken != nil {
			iterationTypes := c.getIterationTypesOfIterable(yieldExpressionType, ifElse(isAsync, IterationUseAsyncYieldStar, IterationUseYieldStar), yieldExpression.Expression)
			nextType = iterationTypes && iterationTypes.nextType
		} else {
			nextType = c.getContextualType(yieldExpression, nil /*contextFlags*/)
		}
		if nextType != nil {
			pushIfUnique(nextTypes, nextType)
		}
	})
	return map[any]any{ /* TODO(TS-TO-GO): was object literal */
		"yieldTypes": yieldTypes,
		"nextTypes":  nextTypes,
	}
}

func (c *Checker) getYieldedTypeOfYieldExpression(node YieldExpression, expressionType *Type, sentType *Type, isAsync bool) *Type {
	errorNode := node.Expression || node
	// A `yield*` expression effectively yields everything that its operand yields
	var yieldedType *Type
	if node.AsteriskToken != nil {
		yieldedType = c.checkIteratedTypeOrElementType(ifElse(isAsync, IterationUseAsyncYieldStar, IterationUseYieldStar), expressionType, sentType, errorNode)
	} else {
		yieldedType = expressionType
	}
	if !isAsync {
		return yieldedType
	} else {
		return c.getAwaitedType(yieldedType, errorNode, ifElse(node.AsteriskToken != nil, Diagnostics.Type_of_iterated_elements_of_a_yield_Asterisk_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member, Diagnostics.Type_of_yield_operand_in_an_async_generator_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member))
	}
}

// Return the combined not-equal type facts for all cases except those between the start and end indices.
func (c *Checker) getNotEqualFactsFromTypeofSwitch(start number, end number, witnesses []*string) TypeFacts {
	var facts TypeFacts = TypeFactsNone
	for i := 0; i < witnesses.length; i++ {
		var witness *string
		if i < start || i >= end {
			witness = witnesses[i]
		} else {
			witness = nil
		}
		if witness != nil {
			facts |= typeofNEFacts.get(witness) || TypeFactsTypeofNEHostObject
		} else {
			facts |= 0
		}
	}
	return facts
}

func (c *Checker) isExhaustiveSwitchStatement(node SwitchStatement) bool {
	links := c.getNodeLinks(node)
	if links.isExhaustive == nil {
		links.isExhaustive = 0
		// Indicate resolution is in process
		exhaustive := c.computeExhaustiveSwitchStatement(node)
		if links.isExhaustive == 0 {
			links.isExhaustive = exhaustive
		}
	} else if links.isExhaustive == 0 {
		links.isExhaustive = false
		// Resolve circularity to false
	}
	return links.isExhaustive
}

func (c *Checker) computeExhaustiveSwitchStatement(node SwitchStatement) bool {
	if node.Expression.Kind == ast.KindTypeOfExpression {
		witnesses := c.getSwitchClauseTypeOfWitnesses(node)
		if witnesses == nil {
			return false
		}
		operandConstraint := c.getBaseConstraintOrType(c.checkExpressionCached(node.Expression.AsTypeOfExpression().Expression))
		// Get the not-equal flags for all handled cases.
		notEqualFacts := c.getNotEqualFactsFromTypeofSwitch(0, 0, witnesses)
		if operandConstraint.flags&TypeFlagsAnyOrUnknown != 0 {
			// We special case the top types to be exhaustive when all cases are handled.
			return (TypeFactsAllTypeofNE & notEqualFacts) == TypeFactsAllTypeofNE
		}
		// A missing not-equal flag indicates that the type wasn't handled by some case.
		return !c.someType(operandConstraint, func(t *Type) bool {
			return c.getTypeFacts(t, notEqualFacts) == notEqualFacts
		})
	}
	t := c.checkExpressionCached(node.Expression)
	if !c.isLiteralType(t) {
		return false
	}
	switchTypes := c.getSwitchClauseTypes(node)
	if switchTypes.length == 0 || core.Some(switchTypes, c.isNeitherUnitTypeNorNever) {
		return false
	}
	return c.eachTypeContainedIn(c.mapType(t, c.getRegularTypeOfLiteralType), switchTypes)
}

func (c *Checker) functionHasImplicitReturn(func_ FunctionLikeDeclaration) *bool {
	return func_.EndFlowNode && c.isReachableFlowNode(func_.EndFlowNode)
}

/** NOTE: Return value of `[]` means a different thing than `undefined`. `[]` means func returns `void`, `undefined` means it returns `never`. */

func (c *Checker) checkAndAggregateReturnExpressionTypes(func_ FunctionLikeDeclaration, checkMode *CheckMode) *[]*Type {
	functionFlags := getFunctionFlags(func_)
	var aggregatedTypes []*Type = []never{}
	hasReturnWithNoExpression := c.functionHasImplicitReturn(func_)
	hasReturnOfTypeNever := false
	forEachReturnStatement(func_.Body.AsBlock(), func(returnStatement ReturnStatement) {
		expr := returnStatement.Expression
		if expr != nil {
			expr = skipParentheses(expr, true /*excludeJSDocTypeAssertions*/)
			// Bare calls to this same function don't contribute to inference
			// and `return await` is also safe to unwrap here
			if functionFlags&FunctionFlagsAsync != 0 && expr.Kind == ast.KindAwaitExpression {
				expr = skipParentheses(expr.AsAwaitExpression().Expression, true /*excludeJSDocTypeAssertions*/)
			}
			if expr.Kind == ast.KindCallExpression && expr.AsCallExpression().Expression.Kind == ast.KindIdentifier && c.checkExpressionCached(expr.AsCallExpression().Expression).symbol == c.getMergedSymbol(func_.Symbol) && (!isFunctionExpressionOrArrowFunction(func_.Symbol.ValueDeclaration) || c.isConstantReference(expr.AsCallExpression().Expression)) {
				hasReturnOfTypeNever = true
				return
			}

			t := c.checkExpressionCached(expr, checkMode && checkMode & ^CheckModeSkipGenericFunctions)
			if functionFlags&FunctionFlagsAsync != 0 {
				// From within an async function you can return either a non-promise value or a promise. Any
				// Promise/A+ compatible implementation will always assimilate any foreign promise, so the
				// return type of the body should be unwrapped to its awaited type, which should be wrapped in
				// the native Promise<T> type by the caller.
				t = c.unwrapAwaitedType(c.checkAwaitedType(t, false /*withAlias*/, func_, Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member))
			}
			if t.flags&TypeFlagsNever != 0 {
				hasReturnOfTypeNever = true
			}
			pushIfUnique(aggregatedTypes, t)
		} else {
			hasReturnWithNoExpression = true
		}
	})
	if aggregatedTypes.length == 0 && !hasReturnWithNoExpression && (hasReturnOfTypeNever || c.mayReturnNever(func_)) {
		return nil
	}
	if c.strictNullChecks && aggregatedTypes.length != 0 && hasReturnWithNoExpression && !(c.isJSConstructor(func_) && aggregatedTypes.some(func(t *Type) bool {
		return t.symbol == func_.Symbol
	})) {
		// Javascript "callable constructors", containing eg `if (!(this instanceof A)) return new A()` should not add undefined
		pushIfUnique(aggregatedTypes, c.undefinedType)
	}
	return aggregatedTypes
}

func (c *Checker) mayReturnNever(func_ FunctionLikeDeclaration) bool {
	switch func_.Kind {
	case ast.KindFunctionExpression,
		ast.KindArrowFunction:
		return true
	case ast.KindMethodDeclaration:
		return func_.Parent.Kind == ast.KindObjectLiteralExpression
	default:
		return false
	}
}

func (c *Checker) getTypePredicateFromBody(func_ FunctionLikeDeclaration) *TypePredicate {
	switch func_.Kind {
	case ast.KindConstructor,
		ast.KindGetAccessor,
		ast.KindSetAccessor:
		return nil
	}
	functionFlags := getFunctionFlags(func_)
	if functionFlags != FunctionFlagsNormal {
		return nil
	}

	// Only attempt to infer a type predicate if there's exactly one return.
	var singleReturn Expression
	if func_.Body != nil && func_.Body.Kind != ast.KindBlock {
		singleReturn = func_.Body
		// arrow function
	} else {
		bailedEarly := forEachReturnStatement(func_.Body.AsBlock(), func(returnStatement ReturnStatement) *true {
			if singleReturn != nil || returnStatement.Expression == nil {
				return true
			}
			singleReturn = returnStatement.Expression
		})
		if bailedEarly || singleReturn == nil || c.functionHasImplicitReturn(func_) {
			return nil
		}
	}
	return c.checkIfExpressionRefinesAnyParameter(func_, singleReturn)
}

func (c *Checker) checkIfExpressionRefinesAnyParameter(func_ FunctionLikeDeclaration, expr Expression) *TypePredicate {
	expr = skipParentheses(expr, true /*excludeJSDocTypeAssertions*/)
	returnType := c.checkExpressionCached(expr)
	if returnType.flags&TypeFlagsBoolean == 0 {
		return nil
	}

	return forEach(func_.Parameters, func(param ParameterDeclaration, i number) *TypePredicate {
		initType := c.getTypeOfSymbol(param.Symbol)
		if !initType || initType.flags&TypeFlagsBoolean != 0 || !isIdentifier(param.Name) || c.isSymbolAssigned(param.Symbol) || isRestParameter(param) {
			// Refining "x: boolean" to "x is true" or "x is false" isn't useful.
			return
		}
		trueType := c.checkIfExpressionRefinesParameter(func_, expr, param, initType)
		if trueType != nil {
			return c.createTypePredicate(TypePredicateKindIdentifier, unescapeLeadingUnderscores(param.Name.EscapedText), i, trueType)
		}
	})
}

func (c *Checker) checkIfExpressionRefinesParameter(func_ FunctionLikeDeclaration, expr Expression, param ParameterDeclaration, initType *Type) *Type {
	antecedent := (expr /* as Expression & { flowNode?: FlowNode; } */).FlowNode || expr.Parent.Kind == ast.KindReturnStatement && expr.Parent.AsReturnStatement().FlowNode || createFlowNode(FlowFlagsStart, nil /*node*/, nil /*antecedent*/)
	trueCondition := createFlowNode(FlowFlagsTrueCondition, expr, antecedent)

	trueType := c.getFlowTypeOfReference(param.Name, initType, initType, func_, trueCondition)
	if trueType == initType {
		return nil
	}

	// "x is T" means that x is T if and only if it returns true. If it returns false then x is not T.
	// This means that if the function is called with an argument of type trueType, there can't be anything left in the `else` branch. It must reduce to `never`.
	falseCondition := createFlowNode(FlowFlagsFalseCondition, expr, antecedent)
	falseSubtype := c.getFlowTypeOfReference(param.Name, initType, trueType, func_, falseCondition)
	if falseSubtype.flags&TypeFlagsNever != 0 {
		return trueType
	} else {
		return nil
	}
}

/**
 * TypeScript Specification 1.0 (6.3) - July 2014
 *   An explicitly typed function whose return type isn't the Void type,
 *   the Any type, or a union type containing the Void or Any type as a constituent
 *   must have at least one return statement somewhere in its body.
 *   An exception to this rule is if the function implementation consists of a single 'throw' statement.
 *
 * @param returnType - return type of the function, can be undefined if return type is not explicitly specified
 */

func (c *Checker) checkAllCodePathsInNonVoidFunctionReturnOrThrow(func_ Union[FunctionLikeDeclaration, MethodSignature], returnType *Type) {
	c.addLazyDiagnostic(checkAllCodePathsInNonVoidFunctionReturnOrThrowDiagnostics)
	return

	checkAllCodePathsInNonVoidFunctionReturnOrThrowDiagnostics := func() {
		functionFlags := getFunctionFlags(func_)
		t := returnType && c.unwrapReturnType(returnType, functionFlags)

		// Functions with an explicitly specified return type that includes `void` or is exactly `any` or `undefined` don't
		// need any return statements.
		if t && (c.maybeTypeOfKind(t, TypeFlagsVoid) || t.flags&(TypeFlagsAny|TypeFlagsUndefined) != 0) {
			return
		}

		// If all we have is a function signature, or an arrow function with an expression body, then there is nothing to check.
		// also if HasImplicitReturn flag is not set this means that all codepaths in function body end with return or throw
		if func_.Kind == ast.KindMethodSignature || nodeIsMissing(func_.Body) || func_.Body.Kind != ast.KindBlock || !c.functionHasImplicitReturn(func_) {
			return
		}

		hasExplicitReturn := func_.Flags & ast.NodeFlagsHasExplicitReturn
		errorNode := getEffectiveReturnTypeNode(func_) || func_

		if t && t.flags&TypeFlagsNever != 0 {
			c.error(errorNode, Diagnostics.A_function_returning_never_cannot_have_a_reachable_end_point)
		} else if t && hasExplicitReturn == 0 {
			// minimal check: function has syntactic return type annotation and no explicit return statements in the body
			// this function does not conform to the specification.
			c.error(errorNode, Diagnostics.A_function_whose_declared_type_is_neither_undefined_void_nor_any_must_return_a_value)
		} else if t && c.strictNullChecks && !c.isTypeAssignableTo(c.undefinedType, t) {
			c.error(errorNode, Diagnostics.Function_lacks_ending_return_statement_and_return_type_does_not_include_undefined)
		} else if c.compilerOptions.noImplicitReturns {
			if !(t) {
				// If return type annotation is omitted check if function has any explicit return statements.
				// If it does not have any - its inferred return type is void - don't do any checks.
				// Otherwise get inferred return type from function body and report error only if it is not void / anytype
				if hasExplicitReturn == 0 {
					return
				}
				inferredReturnType := c.getReturnTypeOfSignature(c.getSignatureFromDeclaration(func_))
				if c.isUnwrappedReturnTypeUndefinedVoidOrAny(func_, inferredReturnType) {
					return
				}
			}
			c.error(errorNode, Diagnostics.Not_all_code_paths_return_a_value)
		}
	}

}

func (c *Checker) checkFunctionExpressionOrObjectLiteralMethod(node Union[FunctionExpression, ArrowFunction, MethodDeclaration], checkMode CheckMode) *Type {
	Debug.assert(node.Kind != ast.KindMethodDeclaration || isObjectLiteralMethod(node))
	c.checkNodeDeferred(node)

	if isFunctionExpression(node) {
		c.checkCollisionsForDeclarationName(node, node.Name)
	}

	// The identityMapper object is used to indicate that function expressions are wildcards
	if checkMode && checkMode&CheckModeSkipContextSensitive != 0 && c.isContextSensitive(node) {
		// Skip parameters, return signature with return type that retains noncontextual parts so inferences can still be drawn in an early stage
		if getEffectiveReturnTypeNode(node) == nil && !hasContextSensitiveParameters(node) {
			// Return plain anyFunctionType if there is no possibility we'll make inferences from the return type
			contextualSignature := c.getContextualSignature(node)
			if contextualSignature != nil && c.couldContainTypeVariables(c.getReturnTypeOfSignature(contextualSignature)) {
				links := c.getNodeLinks(node)
				if links.contextFreeType != nil {
					return links.contextFreeType
				}
				returnType := c.getReturnTypeFromBody(node, checkMode)
				returnOnlySignature := c.createSignature(nil, nil /*typeParameters*/, nil /*thisParameter*/, emptyArray, returnType, nil /*resolvedTypePredicate*/, 0, SignatureFlagsIsNonInferrable)
				returnOnlyType := c.createAnonymousType(node.Symbol, c.emptySymbols, []Signature{returnOnlySignature}, emptyArray, emptyArray)
				returnOnlyType.objectFlags |= ObjectFlagsNonInferrableType
				links.contextFreeType = returnOnlyType
				return links.contextFreeType
			}
		}
		return c.anyFunctionType
	}

	// Grammar checking
	hasGrammarError := c.checkGrammarFunctionLikeDeclaration(node)
	if !hasGrammarError && node.Kind == ast.KindFunctionExpression {
		c.checkGrammarForGenerator(node)
	}

	c.contextuallyCheckFunctionExpressionOrObjectLiteralMethod(node, checkMode)

	return c.getTypeOfSymbol(c.getSymbolOfDeclaration(node))
}

func (c *Checker) contextuallyCheckFunctionExpressionOrObjectLiteralMethod(node Union[FunctionExpression, ArrowFunction, MethodDeclaration], checkMode CheckMode) {
	links := c.getNodeLinks(node)
	// Check if function expression is contextually typed and assign parameter types if so.
	if links.flags&NodeCheckFlagsContextChecked == 0 {
		contextualSignature := c.getContextualSignature(node)
		// If a type check is started at a function expression that is an argument of a function call, obtaining the
		// contextual type may recursively get back to here during overload resolution of the call. If so, we will have
		// already assigned contextual types.
		if links.flags&NodeCheckFlagsContextChecked == 0 {
			links.flags |= NodeCheckFlagsContextChecked
			signature := firstOrUndefined(c.getSignaturesOfType(c.getTypeOfSymbol(c.getSymbolOfDeclaration(node)), SignatureKindCall))
			if signature == nil {
				return
			}
			if c.isContextSensitive(node) {
				if contextualSignature != nil {
					inferenceContext := c.getInferenceContext(node)
					var instantiatedContextualSignature *Signature
					if checkMode && checkMode&CheckModeInferential != 0 {
						c.inferFromAnnotatedParameters(signature, contextualSignature, inferenceContext)
						restType := c.getEffectiveRestType(contextualSignature)
						if restType != nil && restType.flags&TypeFlagsTypeParameter != 0 {
							instantiatedContextualSignature = c.instantiateSignature(contextualSignature, inferenceContext.nonFixingMapper)
						}
					}
					if inferenceContext != nil {
						instantiatedContextualSignature = instantiatedContextualSignature || c.instantiateSignature(contextualSignature, inferenceContext.mapper)
					} else {
						instantiatedContextualSignature = instantiatedContextualSignature || contextualSignature
					}
					c.assignContextualParameterTypes(signature, instantiatedContextualSignature)
				} else {
					// Force resolution of all parameter types such that the absence of a contextual type is consistently reflected.
					c.assignNonContextualParameterTypes(signature)
				}
			} else if contextualSignature != nil && node.TypeParameters == nil && contextualSignature.parameters.length > node.Parameters.length {
				inferenceContext := c.getInferenceContext(node)
				if checkMode && checkMode&CheckModeInferential != 0 {
					c.inferFromAnnotatedParameters(signature, contextualSignature, inferenceContext)
				}
			}
			if contextualSignature != nil && c.getReturnTypeFromAnnotation(node) == nil && signature.resolvedReturnType == nil {
				returnType := c.getReturnTypeFromBody(node, checkMode)
				if !signature.resolvedReturnType {
					signature.resolvedReturnType = returnType
				}
			}
			c.checkSignatureDeclaration(node)
		}
	}
}

func (c *Checker) checkFunctionExpressionOrObjectLiteralMethodDeferred(node Union[ArrowFunction, FunctionExpression, MethodDeclaration]) {
	Debug.assert(node.Kind != ast.KindMethodDeclaration || isObjectLiteralMethod(node))

	functionFlags := getFunctionFlags(node)
	returnType := c.getReturnTypeFromAnnotation(node)
	c.checkAllCodePathsInNonVoidFunctionReturnOrThrow(node, returnType)

	if node.Body != nil {
		if getEffectiveReturnTypeNode(node) == nil {
			// There are some checks that are only performed in getReturnTypeFromBody, that may produce errors
			// we need. An example is the noImplicitAny errors resulting from widening the return expression
			// of a function. Because checking of function expression bodies is deferred, there was never an
			// appropriate time to do this during the main walk of the file (see the comment at the top of
			// checkFunctionExpressionBodies). So it must be done now.
			c.getReturnTypeOfSignature(c.getSignatureFromDeclaration(node))
		}

		if node.Body.Kind == ast.KindBlock {
			c.checkSourceElement(node.Body)
		} else {
			// From within an async function you can return either a non-promise value or a promise. Any
			// Promise/A+ compatible implementation will always assimilate any foreign promise, so we
			// should not be checking assignability of a promise to the return type. Instead, we need to
			// check assignability of the awaited type of the expression body against the promised type of
			// its return type annotation.
			exprType := c.checkExpression(node.Body)
			returnOrPromisedType := returnType && c.unwrapReturnType(returnType, functionFlags)
			if returnOrPromisedType != nil {
				effectiveCheckNode := c.getEffectiveCheckNode(node.Body)
				if (functionFlags & FunctionFlagsAsyncGenerator) == FunctionFlagsAsync {
					awaitedType := c.checkAwaitedType(exprType, false /*withAlias*/, effectiveCheckNode, Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member)
					c.checkTypeAssignableToAndOptionallyElaborate(awaitedType, returnOrPromisedType, effectiveCheckNode, effectiveCheckNode)
				} else {
					c.checkTypeAssignableToAndOptionallyElaborate(exprType, returnOrPromisedType, effectiveCheckNode, effectiveCheckNode)
				}
			}
		}
	}
}

func (c *Checker) checkArithmeticOperandType(operand *ast.Node, t *Type, diagnostic DiagnosticMessage, isAwaitValid bool /*  = false */) bool {
	if !c.isTypeAssignableTo(t, c.numberOrBigIntType) {
		awaitedType := isAwaitValid && c.getAwaitedTypeOfPromise(t)
		c.errorAndMaybeSuggestAwait(operand, awaitedType && c.isTypeAssignableTo(awaitedType, c.numberOrBigIntType), diagnostic)
		return false
	}
	return true
}

func (c *Checker) isReadonlyAssignmentDeclaration(d Declaration) bool {
	if !isCallExpression(d) {
		return false
	}
	if !isBindableObjectDefinePropertyCall(d) {
		return false
	}
	objectLitType := c.checkExpressionCached(d.Arguments[2])
	valueType := c.getTypeOfPropertyOfType(objectLitType, "value" /* as __String */)
	if valueType != nil {
		writableProp := c.getPropertyOfType(objectLitType, "writable" /* as __String */)
		writableType := writableProp && c.getTypeOfSymbol(writableProp)
		if writableType == nil || writableType == c.falseType || writableType == c.regularFalseType {
			return true
		}
		// We include this definition whereupon we walk back and check the type at the declaration because
		// The usual definition of `Object.defineProperty` will _not_ cause literal types to be preserved in the
		// argument types, should the type be contextualized by the call itself.
		if writableProp && writableProp.ValueDeclaration != nil && isPropertyAssignment(writableProp.ValueDeclaration) {
			initializer := writableProp.ValueDeclaration.Initializer
			rawOriginalType := c.checkExpression(initializer)
			if rawOriginalType == c.falseType || rawOriginalType == c.regularFalseType {
				return true
			}
		}
		return false
	}
	setProp := c.getPropertyOfType(objectLitType, "set" /* as __String */)
	return setProp == nil
}

func (c *Checker) isReadonlySymbol(symbol *ast.Symbol) bool {
	// The following symbols are considered read-only:
	// Properties with a 'readonly' modifier
	// Variables declared with 'const'
	// Get accessors without matching set accessors
	// Enum members
	// Object.defineProperty assignments with writable false or no setter
	// Unions and intersections of the above (unions and intersections eagerly set isReadonly on creation)
	return getCheckFlags(symbol)&ast.CheckFlagsReadonly != 0 || symbol.Flags&ast.SymbolFlagsProperty != 0 && getDeclarationModifierFlagsFromSymbol(symbol)&ast.ModifierFlagsReadonly != 0 || symbol.Flags&ast.SymbolFlagsVariable != 0 && c.getDeclarationNodeFlagsFromSymbol(symbol)&ast.NodeFlagsConstant != 0 || symbol.Flags&ast.SymbolFlagsAccessor != 0 && symbol.Flags&ast.SymbolFlagsSetAccessor == 0 || symbol.Flags&ast.SymbolFlagsEnumMember != 0 || core.Some(symbol.Declarations, c.isReadonlyAssignmentDeclaration)
}

func (c *Checker) isAssignmentToReadonlyEntity(expr Expression, symbol *ast.Symbol, assignmentKind AssignmentKind) bool {
	if assignmentKind == AssignmentKindNone {
		// no assigment means it doesn't matter whether the entity is readonly
		return false
	}
	if c.isReadonlySymbol(symbol) {
		// Allow assignments to readonly properties within constructors of the same class declaration.
		if symbol.Flags&ast.SymbolFlagsProperty != 0 && isAccessExpression(expr) && expr.Expression.Kind == ast.KindThisKeyword {
			// Look for if this is the constructor for the class that `symbol` is a property of.
			ctor := getContainingFunction(expr)
			if !(ctor != nil && (ctor.Kind == ast.KindConstructor || c.isJSConstructor(ctor))) {
				return true
			}
			if symbol.ValueDeclaration != nil {
				isAssignmentDeclaration := isBinaryExpression(symbol.ValueDeclaration)
				isLocalPropertyDeclaration := ctor.Parent == symbol.ValueDeclaration.Parent
				isLocalParameterProperty := ctor == symbol.ValueDeclaration.Parent
				isLocalThisPropertyAssignment := isAssignmentDeclaration && symbol.Parent. /* ? */ valueDeclaration == ctor.Parent
				isLocalThisPropertyAssignmentConstructorFunction := isAssignmentDeclaration && symbol.Parent. /* ? */ valueDeclaration == ctor
				isWriteableSymbol := isLocalPropertyDeclaration || isLocalParameterProperty || isLocalThisPropertyAssignment || isLocalThisPropertyAssignmentConstructorFunction
				return !isWriteableSymbol
			}
		}
		return true
	}
	if isAccessExpression(expr) {
		// references through namespace import should be readonly
		node := skipParentheses(expr.Expression)
		if node.Kind == ast.KindIdentifier {
			symbol := c.getNodeLinks(node).resolvedSymbol
			if symbol.Flags&ast.SymbolFlagsAlias != 0 {
				declaration := c.getDeclarationOfAliasSymbol(symbol)
				return declaration != nil && declaration.Kind == ast.KindNamespaceImport
			}
		}
	}
	return false
}

func (c *Checker) checkReferenceExpression(expr Expression, invalidReferenceMessage DiagnosticMessage, invalidOptionalChainMessage DiagnosticMessage) bool {
	// References are combinations of identifiers, parentheses, and property accesses.
	node := skipOuterExpressions(expr, OuterExpressionKindsAssertions|OuterExpressionKindsParentheses)
	if node.Kind != ast.KindIdentifier && !isAccessExpression(node) {
		c.error(expr, invalidReferenceMessage)
		return false
	}
	if node.Flags&ast.NodeFlagsOptionalChain != 0 {
		c.error(expr, invalidOptionalChainMessage)
		return false
	}
	return true
}

func (c *Checker) checkDeleteExpression(node DeleteExpression) *Type {
	c.checkExpression(node.Expression)
	expr := skipParentheses(node.Expression)
	if !isAccessExpression(expr) {
		c.error(expr, Diagnostics.The_operand_of_a_delete_operator_must_be_a_property_reference)
		return c.booleanType
	}
	if isPropertyAccessExpression(expr) && isPrivateIdentifier(expr.Name) {
		c.error(expr, Diagnostics.The_operand_of_a_delete_operator_cannot_be_a_private_identifier)
	}
	links := c.getNodeLinks(expr)
	symbol := c.getExportSymbolOfValueSymbolIfExported(links.resolvedSymbol)
	if symbol != nil {
		if c.isReadonlySymbol(symbol) {
			c.error(expr, Diagnostics.The_operand_of_a_delete_operator_cannot_be_a_read_only_property)
		} else {
			c.checkDeleteExpressionMustBeOptional(expr, symbol)
		}
	}
	return c.booleanType
}

func (c *Checker) checkDeleteExpressionMustBeOptional(expr AccessExpression, symbol *ast.Symbol) {
	t := c.getTypeOfSymbol(symbol)
	if c.strictNullChecks && t.flags&(TypeFlagsAnyOrUnknown|TypeFlagsNever) == 0 && !(ifElse(c.exactOptionalPropertyTypes, symbol.Flags&ast.SymbolFlagsOptional != 0, c.hasTypeFacts(t, TypeFactsIsUndefined))) {
		c.error(expr, Diagnostics.The_operand_of_a_delete_operator_must_be_optional)
	}
}

func (c *Checker) checkTypeOfExpression(node TypeOfExpression) *Type {
	c.checkExpression(node.Expression)
	return c.typeofType
}

func (c *Checker) checkVoidExpression(node VoidExpression) *Type {
	c.checkNodeDeferred(node)
	return c.undefinedWideningType
}

func (c *Checker) checkAwaitGrammar(node Union[AwaitExpression, VariableDeclarationList]) bool {
	// Grammar checking
	hasError := false
	container := getContainingFunctionOrClassStaticBlock(node)
	if container != nil && isClassStaticBlockDeclaration(container) {
		// NOTE: We report this regardless as to whether there are parse diagnostics.
		var message any
		if isAwaitExpression(node) {
			message = Diagnostics.await_expression_cannot_be_used_inside_a_class_static_block
		} else {
			message = Diagnostics.await_using_statements_cannot_be_used_inside_a_class_static_block
		}
		c.error(node, message)
		hasError = true
	} else if node.Flags&ast.NodeFlagsAwaitContext == 0 {
		if isInTopLevelContext(node) {
			sourceFile := getSourceFileOfNode(node)
			if !c.hasParseDiagnostics(sourceFile) {
				var span *TextSpan
				if !isEffectiveExternalModule(sourceFile, c.compilerOptions) {
					if span == nil {
						span = getSpanOfTokenAtPosition(sourceFile, node.Pos)
					}
					var message any
					if isAwaitExpression(node) {
						message = Diagnostics.await_expressions_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module
					} else {
						message = Diagnostics.await_using_statements_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module
					}
					diagnostic := createFileDiagnostic(sourceFile, span.start, span.length, message)
					c.diagnostics.add(diagnostic)
					hasError = true
				}
				switch c.moduleKind {
				case ModuleKindNode16,
					ModuleKindNodeNext:
					if sourceFile.ImpliedNodeFormat == ModuleKindCommonJS {
						if span == nil {
							span = getSpanOfTokenAtPosition(sourceFile, node.Pos)
						}
						c.diagnostics.add(createFileDiagnostic(sourceFile, span.start, span.length, Diagnostics.The_current_file_is_a_CommonJS_module_and_cannot_use_await_at_the_top_level))
						hasError = true
						break
					}
					fallthrough
				case ModuleKindES2022,
					ModuleKindESNext,
					ModuleKindPreserve,
					ModuleKindSystem:
					if c.languageVersion >= ScriptTargetES2017 {
						break
					}
					fallthrough
				default:
					if span == nil {
						span = getSpanOfTokenAtPosition(sourceFile, node.Pos)
					}
					var message any
					if isAwaitExpression(node) {
						message = Diagnostics.Top_level_await_expressions_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_node16_nodenext_or_preserve_and_the_target_option_is_set_to_es2017_or_higher
					} else {
						message = Diagnostics.Top_level_await_using_statements_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_node16_nodenext_or_preserve_and_the_target_option_is_set_to_es2017_or_higher
					}
					c.diagnostics.add(createFileDiagnostic(sourceFile, span.start, span.length, message))
					hasError = true
				}
			}
		} else {
			// use of 'await' in non-async function
			sourceFile := getSourceFileOfNode(node)
			if !c.hasParseDiagnostics(sourceFile) {
				span := getSpanOfTokenAtPosition(sourceFile, node.Pos)
				var message any
				if isAwaitExpression(node) {
					message = Diagnostics.await_expressions_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules
				} else {
					message = Diagnostics.await_using_statements_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules
				}
				diagnostic := createFileDiagnostic(sourceFile, span.start, span.length, message)
				if container != nil && container.Kind != ast.KindConstructor && (getFunctionFlags(container)&FunctionFlagsAsync) == 0 {
					relatedInfo := createDiagnosticForNode(container, Diagnostics.Did_you_mean_to_mark_this_function_as_async)
					addRelatedInfo(diagnostic, relatedInfo)
				}
				c.diagnostics.add(diagnostic)
				hasError = true
			}
		}
	}

	if isAwaitExpression(node) && c.isInParameterInitializerBeforeContainingFunction(node) {
		// NOTE: We report this regardless as to whether there are parse diagnostics.
		c.error(node, Diagnostics.await_expressions_cannot_be_used_in_a_parameter_initializer)
		hasError = true
	}

	return hasError
}

func (c *Checker) checkAwaitExpression(node AwaitExpression) *Type {
	c.addLazyDiagnostic(func() bool {
		return c.checkAwaitGrammar(node)
	})

	operandType := c.checkExpression(node.Expression)
	awaitedType := c.checkAwaitedType(operandType, true /*withAlias*/, node, Diagnostics.Type_of_await_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member)
	if awaitedType == operandType && !c.isErrorType(awaitedType) && operandType.flags&TypeFlagsAnyOrUnknown == 0 {
		c.addErrorOrSuggestion(false, createDiagnosticForNode(node, Diagnostics.await_has_no_effect_on_the_type_of_this_expression))
	}
	return awaitedType
}

func (c *Checker) checkPrefixUnaryExpression(node PrefixUnaryExpression) *Type {
	operandType := c.checkExpression(node.Operand)
	if operandType == c.silentNeverType {
		return c.silentNeverType
	}
	switch node.Operand.Kind {
	case ast.KindNumericLiteral:
		switch node.Operator {
		case ast.KindMinusToken:
			return c.getFreshTypeOfLiteralType(c.getNumberLiteralType(-node.Operand.AsNumericLiteral().Text))
		case ast.KindPlusToken:
			return c.getFreshTypeOfLiteralType(c.getNumberLiteralType(+node.Operand.AsNumericLiteral().Text))
		}
	case ast.KindBigIntLiteral:
		if node.Operator == ast.KindMinusToken {
			return c.getFreshTypeOfLiteralType(c.getBigIntLiteralType(PseudoBigInt{
				negative:    true,
				base10Value: parsePseudoBigInt(node.Operand.AsBigIntLiteral().Text),
			}))
		}
	}
	switch node.Operator {
	case ast.KindPlusToken,
		ast.KindMinusToken,
		ast.KindTildeToken:
		c.checkNonNullType(operandType, node.Operand)
		if c.maybeTypeOfKindConsideringBaseConstraint(operandType, TypeFlagsESSymbolLike) {
			c.error(node.Operand, Diagnostics.The_0_operator_cannot_be_applied_to_type_symbol, tokenToString(node.Operator))
		}
		if node.Operator == ast.KindPlusToken {
			if c.maybeTypeOfKindConsideringBaseConstraint(operandType, TypeFlagsBigIntLike) {
				c.error(node.Operand, Diagnostics.Operator_0_cannot_be_applied_to_type_1, tokenToString(node.Operator), c.typeToString(c.getBaseTypeOfLiteralType(operandType)))
			}
			return c.numberType
		}
		return c.getUnaryResultType(operandType)
	case ast.KindExclamationToken:
		c.checkTruthinessOfType(operandType, node.Operand)
		facts := c.getTypeFacts(operandType, TypeFactsTruthy|TypeFactsFalsy)
		switch {
		case facts == TypeFactsTruthy:
			return c.falseType
		case facts == TypeFactsFalsy:
			return c.trueType
		default:
			return c.booleanType
		}
	case ast.KindPlusPlusToken,
		ast.KindMinusMinusToken:
		ok := c.checkArithmeticOperandType(node.Operand, c.checkNonNullType(operandType, node.Operand), Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type)
		if ok {
			// run check only if former checks succeeded to avoid reporting cascading errors
			c.checkReferenceExpression(node.Operand, Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access, Diagnostics.The_operand_of_an_increment_or_decrement_operator_may_not_be_an_optional_property_access)
		}
		return c.getUnaryResultType(operandType)
	}
	return c.errorType
}

func (c *Checker) checkPostfixUnaryExpression(node PostfixUnaryExpression) *Type {
	operandType := c.checkExpression(node.Operand)
	if operandType == c.silentNeverType {
		return c.silentNeverType
	}
	ok := c.checkArithmeticOperandType(node.Operand, c.checkNonNullType(operandType, node.Operand), Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type)
	if ok {
		// run check only if former checks succeeded to avoid reporting cascading errors
		c.checkReferenceExpression(node.Operand, Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access, Diagnostics.The_operand_of_an_increment_or_decrement_operator_may_not_be_an_optional_property_access)
	}
	return c.getUnaryResultType(operandType)
}

func (c *Checker) getUnaryResultType(operandType *Type) *Type {
	if c.maybeTypeOfKind(operandType, TypeFlagsBigIntLike) {
		if c.isTypeAssignableToKind(operandType, TypeFlagsAnyOrUnknown) || c.maybeTypeOfKind(operandType, TypeFlagsNumberLike) {
			return c.numberOrBigIntType
		} else {
			return c.bigintType
		}
	}
	// If it's not a bigint type, implicit coercion will result in a number
	return c.numberType
}

func (c *Checker) maybeTypeOfKindConsideringBaseConstraint(t *Type, kind TypeFlags) bool {
	if c.maybeTypeOfKind(t, kind) {
		return true
	}

	baseConstraint := c.getBaseConstraintOrType(t)
	return baseConstraint && c.maybeTypeOfKind(baseConstraint, kind)
}

// Return true if type might be of the given kind. A union or intersection type might be of a given
// kind if at least one constituent type is of the given kind.
func (c *Checker) maybeTypeOfKind(t *Type, kind TypeFlags) bool {
	if t.flags&kind != 0 {
		return true
	}
	if t.flags&TypeFlagsUnionOrIntersection != 0 {
		types := t.AsUnionOrIntersectionType().types
		for _, t := range types {
			if c.maybeTypeOfKind(t, kind) {
				return true
			}
		}
	}
	return false
}

func (c *Checker) isTypeAssignableToKind(source *Type, kind TypeFlags, strict bool) bool {
	if source.flags&kind != 0 {
		return true
	}
	if strict && source.flags&(TypeFlagsAnyOrUnknown|TypeFlagsVoid|TypeFlagsUndefined|TypeFlagsNull) != 0 {
		return false
	}
	return kind&TypeFlagsNumberLike != 0 && c.isTypeAssignableTo(source, c.numberType) || kind&TypeFlagsBigIntLike != 0 && c.isTypeAssignableTo(source, c.bigintType) || kind&TypeFlagsStringLike != 0 && c.isTypeAssignableTo(source, c.stringType) || kind&TypeFlagsBooleanLike != 0 && c.isTypeAssignableTo(source, c.booleanType) || kind&TypeFlagsVoid != 0 && c.isTypeAssignableTo(source, c.voidType) || kind&TypeFlagsNever != 0 && c.isTypeAssignableTo(source, c.neverType) || kind&TypeFlagsNull != 0 && c.isTypeAssignableTo(source, c.nullType) || kind&TypeFlagsUndefined != 0 && c.isTypeAssignableTo(source, c.undefinedType) || kind&TypeFlagsESSymbol != 0 && c.isTypeAssignableTo(source, c.esSymbolType) || kind&TypeFlagsNonPrimitive != 0 && c.isTypeAssignableTo(source, c.nonPrimitiveType)
}

func (c *Checker) allTypesAssignableToKind(source *Type, kind TypeFlags, strict bool) bool {
	if source.flags&TypeFlagsUnion != 0 {
		return core.Every(source.AsUnionType().types, func(subType *Type) bool {
			return c.allTypesAssignableToKind(subType, kind, strict)
		})
	} else {
		return c.isTypeAssignableToKind(source, kind, strict)
	}
}

func (c *Checker) isConstEnumObjectType(t *Type) bool {
	return getObjectFlags(t)&ObjectFlagsAnonymous != 0 && t.symbol && c.isConstEnumSymbol(t.symbol)
}

func (c *Checker) isConstEnumSymbol(symbol *ast.Symbol) bool {
	return (symbol.Flags & ast.SymbolFlagsConstEnum) != 0
}

/**
 * Get the type of the `[Symbol.hasInstance]` method of an object type.
 */

func (c *Checker) getSymbolHasInstanceMethodOfObjectType(t *Type) *Type {
	hasInstancePropertyName := c.getPropertyNameForKnownSymbolName("hasInstance")
	if c.allTypesAssignableToKind(t, TypeFlagsNonPrimitive) {
		hasInstanceProperty := c.getPropertyOfType(t, hasInstancePropertyName)
		if hasInstanceProperty != nil {
			hasInstancePropertyType := c.getTypeOfSymbol(hasInstanceProperty)
			if hasInstancePropertyType && c.getSignaturesOfType(hasInstancePropertyType, SignatureKindCall).length != 0 {
				return hasInstancePropertyType
			}
		}
	}
}

func (c *Checker) checkInstanceOfExpression(left Expression, right Expression, leftType *Type, rightType *Type, checkMode CheckMode) *Type {
	if leftType == c.silentNeverType || rightType == c.silentNeverType {
		return c.silentNeverType
	}

	// TypeScript 1.0 spec (April 2014): 4.15.4
	// The instanceof operator requires the left operand to be of type Any, an object type, or a type parameter type,
	// and the right operand to be of type Any, a subtype of the 'Function' interface type, or have a call or construct signature.
	// The result is always of the Boolean primitive type.
	// NOTE: do not raise error if leftType is unknown as related error was already reported
	if !c.isTypeAny(leftType) && c.allTypesAssignableToKind(leftType, TypeFlagsPrimitive) {
		c.error(left, Diagnostics.The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter)
	}

	Debug.assert(isInstanceOfExpression(left.Parent))
	signature := c.getResolvedSignature(left.Parent, nil /*candidatesOutArray*/, checkMode)
	if signature == c.resolvingSignature {
		// CheckMode.SkipGenericFunctions is enabled and this is a call to a generic function that
		// returns a function type. We defer checking and return silentNeverType.
		return c.silentNeverType
	}

	// If rightType has a `[Symbol.hasInstance]` method that is not `(value: unknown) => boolean`, we
	// must check the expression as if it were a call to `right[Symbol.hasInstance](left)`. The call to
	// `getResolvedSignature`, below, will check that leftType is assignable to the type of the first
	// parameter.
	returnType := c.getReturnTypeOfSignature(signature)

	// We also verify that the return type of the `[Symbol.hasInstance]` method is assignable to
	// `boolean`. According to the spec, the runtime will actually perform `ToBoolean` on the result,
	// but this is more type-safe.
	c.checkTypeAssignableTo(returnType, c.booleanType, right, Diagnostics.An_object_s_Symbol_hasInstance_method_must_return_a_boolean_value_for_it_to_be_used_on_the_right_hand_side_of_an_instanceof_expression)

	return c.booleanType
}

func (c *Checker) hasEmptyObjectIntersection(t *Type) bool {
	return c.someType(t, func(t *Type) bool {
		return t == c.unknownEmptyObjectType || t.flags&TypeFlagsIntersection != 0 && c.isEmptyAnonymousObjectType(c.getBaseConstraintOrType(t))
	})
}

func (c *Checker) checkInExpression(left Expression, right Expression, leftType *Type, rightType *Type) *Type {
	if leftType == c.silentNeverType || rightType == c.silentNeverType {
		return c.silentNeverType
	}
	if isPrivateIdentifier(left) {
		if c.languageVersion < LanguageFeatureMinimumTarget.PrivateNamesAndClassStaticBlocks || c.languageVersion < LanguageFeatureMinimumTarget.ClassAndClassElementDecorators || !c.useDefineForClassFields {
			c.checkExternalEmitHelpers(left, ExternalEmitHelpersClassPrivateFieldIn)
		}
		// Unlike in 'checkPrivateIdentifierExpression' we now have access to the RHS type
		// which provides us with the opportunity to emit more detailed errors
		if c.getNodeLinks(left).resolvedSymbol == nil && getContainingClass(left) != nil {
			isUncheckedJS := c.isUncheckedJSSuggestion(left, rightType.symbol, true /*excludeClasses*/)
			c.reportNonexistentProperty(left, rightType, isUncheckedJS)
		}
	} else {
		// The type of the lef operand must be assignable to string, number, or symbol.
		c.checkTypeAssignableTo(c.checkNonNullType(leftType, left), c.stringNumberSymbolType, left)
	}
	// The type of the right operand must be assignable to 'object'.
	if c.checkTypeAssignableTo(c.checkNonNullType(rightType, right), c.nonPrimitiveType, right) {
		// The {} type is assignable to the object type, yet {} might represent a primitive type. Here we
		// detect and error on {} that results from narrowing the unknown type, as well as intersections
		// that include {} (we know that the other types in such intersections are assignable to object
		// since we already checked for that).
		if c.hasEmptyObjectIntersection(rightType) {
			c.error(right, Diagnostics.Type_0_may_represent_a_primitive_value_which_is_not_permitted_as_the_right_operand_of_the_in_operator, c.typeToString(rightType))
		}
	}
	// The result is always of the Boolean primitive type.
	return c.booleanType
}

func (c *Checker) checkObjectLiteralAssignment(node ObjectLiteralExpression, sourceType *Type, rightIsThis bool) *Type {
	properties := node.Properties
	if c.strictNullChecks && properties.length == 0 {
		return c.checkNonNullType(sourceType, node)
	}
	for i := 0; i < properties.length; i++ {
		c.checkObjectLiteralDestructuringPropertyAssignment(node, sourceType, i, properties, rightIsThis)
	}
	return sourceType
}

/** Note: If property cannot be a SpreadAssignment, then allProperties does not need to be provided */

func (c *Checker) checkObjectLiteralDestructuringPropertyAssignment(node ObjectLiteralExpression, objectLiteralType *Type, propertyIndex number, allProperties NodeArray[ObjectLiteralElementLike], rightIsThis bool /*  = false */) *Type {
	properties := node.Properties
	property := properties[propertyIndex]
	if property.Kind == ast.KindPropertyAssignment || property.Kind == ast.KindShorthandPropertyAssignment {
		name := property.Name
		exprType := c.getLiteralTypeFromPropertyName(name)
		if isTypeUsableAsPropertyName(exprType) {
			text := getPropertyNameFromType(exprType)
			prop := c.getPropertyOfType(objectLiteralType, text)
			if prop != nil {
				c.markPropertyAsReferenced(prop, property, rightIsThis)
				c.checkPropertyAccessibility(property, false /*isSuper*/, true /*writing*/, objectLiteralType, prop)
			}
		}
		elementType := c.getIndexedAccessType(objectLiteralType, exprType, AccessFlagsExpressionPosition|(ifElse(c.hasDefaultValue(property), AccessFlagsAllowMissing, 0)), name)
		t := c.getFlowTypeOfDestructuring(property, elementType)
		return c.checkDestructuringAssignment(ifElse(property.Kind == ast.KindShorthandPropertyAssignment, property, property.Initializer), t)
	} else if property.Kind == ast.KindSpreadAssignment {
		if propertyIndex < properties.length-1 {
			c.error(property, Diagnostics.A_rest_element_must_be_last_in_a_destructuring_pattern)
		} else {
			if c.languageVersion < LanguageFeatureMinimumTarget.ObjectSpreadRest {
				c.checkExternalEmitHelpers(property, ExternalEmitHelpersRest)
			}
			var nonRestNames []PropertyName = []never{}
			if allProperties != nil {
				for _, otherProperty := range allProperties {
					if !isSpreadAssignment(otherProperty) {
						nonRestNames.push(otherProperty.Name)
					}
				}
			}
			t := c.getRestType(objectLiteralType, nonRestNames, objectLiteralType.symbol)
			c.checkGrammarForDisallowedTrailingComma(allProperties, Diagnostics.A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma)
			return c.checkDestructuringAssignment(property.Expression, t)
		}
	} else {
		c.error(property, Diagnostics.Property_assignment_expected)
	}
}

func (c *Checker) checkArrayLiteralAssignment(node ArrayLiteralExpression, sourceType *Type, checkMode CheckMode) *Type {
	elements := node.Elements
	if c.languageVersion < LanguageFeatureMinimumTarget.DestructuringAssignment && c.compilerOptions.downlevelIteration {
		c.checkExternalEmitHelpers(node, ExternalEmitHelpersRead)
	}
	// This elementType will be used if the specific property corresponding to this index is not
	// present (aka the tuple element property). This call also checks that the parentType is in
	// fact an iterable or array (depending on target language).
	possiblyOutOfBoundsType := c.checkIteratedTypeOrElementType(IterationUseDestructuring|IterationUsePossiblyOutOfBounds, sourceType, c.undefinedType, node) || c.errorType
	var inBoundsType *Type
	if c.compilerOptions.noUncheckedIndexedAccess {
		inBoundsType = nil
	} else {
		inBoundsType = possiblyOutOfBoundsType
	}
	for i := 0; i < elements.length; i++ {
		t := possiblyOutOfBoundsType
		if node.Elements[i].Kind == ast.KindSpreadElement {
			t = /* TODO(TS-TO-GO) EqualsToken BinaryExpression: inBoundsType = inBoundsType ?? (checkIteratedTypeOrElementType(IterationUse.Destructuring, sourceType, undefinedType, node) || errorType) */ TODO
		}
		c.checkArrayLiteralDestructuringElementAssignment(node, sourceType, i, t, checkMode)
	}
	return sourceType
}

func (c *Checker) checkArrayLiteralDestructuringElementAssignment(node ArrayLiteralExpression, sourceType *Type, elementIndex number, elementType *Type, checkMode CheckMode) *Type {
	elements := node.Elements
	element := elements[elementIndex]
	if element.Kind != ast.KindOmittedExpression {
		if element.Kind != ast.KindSpreadElement {
			indexType := c.getNumberLiteralType(elementIndex)
			if c.isArrayLikeType(sourceType) {
				// We create a synthetic expression so that getIndexedAccessType doesn't get confused
				// when the element is a SyntaxKind.ElementAccessExpression.
				accessFlags := AccessFlagsExpressionPosition | (ifElse(c.hasDefaultValue(element), AccessFlagsAllowMissing, 0))
				elementType := c.getIndexedAccessTypeOrUndefined(sourceType, indexType, accessFlags, c.createSyntheticExpression(element, indexType)) || c.errorType
				var assignedType *Type
				if c.hasDefaultValue(element) {
					assignedType = c.getTypeWithFacts(elementType, TypeFactsNEUndefined)
				} else {
					assignedType = elementType
				}
				t := c.getFlowTypeOfDestructuring(element, assignedType)
				return c.checkDestructuringAssignment(element, t, checkMode)
			}
			return c.checkDestructuringAssignment(element, elementType, checkMode)
		}
		if elementIndex < elements.length-1 {
			c.error(element, Diagnostics.A_rest_element_must_be_last_in_a_destructuring_pattern)
		} else {
			restExpression := element.AsSpreadElement().Expression
			if restExpression.Kind == ast.KindBinaryExpression && restExpression.AsBinaryExpression().OperatorToken.Kind == ast.KindEqualsToken {
				c.error(restExpression.AsBinaryExpression().OperatorToken, Diagnostics.A_rest_element_cannot_have_an_initializer)
			} else {
				c.checkGrammarForDisallowedTrailingComma(node.Elements, Diagnostics.A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma)
				var t *Type
				if c.everyType(sourceType, c.isTupleType) {
					t = c.mapType(sourceType, func(t *Type) *Type {
						return c.sliceTupleType(t.AsTupleTypeReference(), elementIndex)
					})
				} else {
					t = c.createArrayType(elementType)
				}
				return c.checkDestructuringAssignment(restExpression, t, checkMode)
			}
		}
	}
	return nil
}

func (c *Checker) checkDestructuringAssignment(exprOrAssignment Union[Expression, ShorthandPropertyAssignment], sourceType *Type, checkMode CheckMode, rightIsThis bool) *Type {
	var target Expression
	if exprOrAssignment.Kind == ast.KindShorthandPropertyAssignment {
		prop := exprOrAssignment.AsShorthandPropertyAssignment()
		if prop.ObjectAssignmentInitializer != nil {
			// In strict null checking mode, if a default value of a non-undefined type is specified, remove
			// undefined from the final type.
			if c.strictNullChecks && !(c.hasTypeFacts(c.checkExpression(prop.ObjectAssignmentInitializer), TypeFactsIsUndefined)) {
				sourceType = c.getTypeWithFacts(sourceType, TypeFactsNEUndefined)
			}
			c.checkBinaryLikeExpression(prop.Name, prop.EqualsToken, prop.ObjectAssignmentInitializer, checkMode)
		}
		target = exprOrAssignment.AsShorthandPropertyAssignment().Name
	} else {
		target = exprOrAssignment
	}

	if target.Kind == ast.KindBinaryExpression && target.AsBinaryExpression().OperatorToken.Kind == ast.KindEqualsToken {
		c.checkBinaryExpression(target.AsBinaryExpression(), checkMode)
		target = target.AsBinaryExpression().Left
		// A default value is specified, so remove undefined from the final type.
		if c.strictNullChecks {
			sourceType = c.getTypeWithFacts(sourceType, TypeFactsNEUndefined)
		}
	}
	if target.Kind == ast.KindObjectLiteralExpression {
		return c.checkObjectLiteralAssignment(target.AsObjectLiteralExpression(), sourceType, rightIsThis)
	}
	if target.Kind == ast.KindArrayLiteralExpression {
		return c.checkArrayLiteralAssignment(target.AsArrayLiteralExpression(), sourceType, checkMode)
	}
	return c.checkReferenceAssignment(target, sourceType, checkMode)
}

func (c *Checker) checkReferenceAssignment(target Expression, sourceType *Type, checkMode CheckMode) *Type {
	targetType := c.checkExpression(target, checkMode)
	var error any
	if target.Parent.Kind == ast.KindSpreadAssignment {
		error = Diagnostics.The_target_of_an_object_rest_assignment_must_be_a_variable_or_a_property_access
	} else {
		error = Diagnostics.The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access
	}
	var optionalError any
	if target.Parent.Kind == ast.KindSpreadAssignment {
		optionalError = Diagnostics.The_target_of_an_object_rest_assignment_may_not_be_an_optional_property_access
	} else {
		optionalError = Diagnostics.The_left_hand_side_of_an_assignment_expression_may_not_be_an_optional_property_access
	}
	if c.checkReferenceExpression(target, error, optionalError) {
		c.checkTypeAssignableToAndOptionallyElaborate(sourceType, targetType, target, target)
	}
	if isPrivateIdentifierPropertyAccessExpression(target) {
		// NOTE: we do not limit this to LanguageFeatureTargets.PrivateNames as some other feature downleveling still requires this.
		c.checkExternalEmitHelpers(target.Parent, ExternalEmitHelpersClassPrivateFieldSet)
	}
	return sourceType
}

/**
 * This is a *shallow* check: An expression is side-effect-free if the
 * evaluation of the expression *itself* cannot produce side effects.
 * For example, x++ / 3 is side-effect free because the / operator
 * does not have side effects.
 * The intent is to "smell test" an expression for correctness in positions where
 * its value is discarded (e.g. the left side of the comma operator).
 */

func (c *Checker) isSideEffectFree(node *ast.Node) bool {
	node = skipParentheses(node)
	switch node.Kind {
	case ast.KindIdentifier,
		ast.KindStringLiteral,
		ast.KindRegularExpressionLiteral,
		ast.KindTaggedTemplateExpression,
		ast.KindTemplateExpression,
		ast.KindNoSubstitutionTemplateLiteral,
		ast.KindNumericLiteral,
		ast.KindBigIntLiteral,
		ast.KindTrueKeyword,
		ast.KindFalseKeyword,
		ast.KindNullKeyword,
		ast.KindUndefinedKeyword,
		ast.KindFunctionExpression,
		ast.KindClassExpression,
		ast.KindArrowFunction,
		ast.KindArrayLiteralExpression,
		ast.KindObjectLiteralExpression,
		ast.KindTypeOfExpression,
		ast.KindNonNullExpression,
		ast.KindJsxSelfClosingElement,
		ast.KindJsxElement:
		return true
	case ast.KindConditionalExpression:
		return c.isSideEffectFree(node.AsConditionalExpression().WhenTrue) && c.isSideEffectFree(node.AsConditionalExpression().WhenFalse)
	case ast.KindBinaryExpression:
		if isAssignmentOperator(node.AsBinaryExpression().OperatorToken.Kind) {
			return false
		}
		return c.isSideEffectFree(node.AsBinaryExpression().Left) && c.isSideEffectFree(node.AsBinaryExpression().Right)
	case ast.KindPrefixUnaryExpression,
		ast.KindPostfixUnaryExpression:
		// Unary operators ~, !, +, and - have no side effects.
		// The rest do.
		switch node.AsPrefixUnaryExpression().Operator {
		case ast.KindExclamationToken,
			ast.KindPlusToken,
			ast.KindMinusToken,
			ast.KindTildeToken:
			return true
		}
		return false

		// Some forms listed here for clarity
	case ast.KindVoidExpression,
		ast.KindTypeAssertionExpression,
		ast.KindAsExpression:
	default:
		return false
	}
}

func (c *Checker) isTypeEqualityComparableTo(source *Type, target *Type) bool {
	return (target.flags&TypeFlagsNullable) != 0 || c.isTypeComparableTo(source, target)
}

func (c *Checker) createCheckBinaryExpression() /* TODO(TS-TO-GO) inferred type (node: BinaryExpression, checkMode: CheckMode | undefined) => Type */ any {
	type WorkArea struct {
		checkMode  *CheckMode
		skip       bool
		stackIndex number
		typeStack  []*Type
	}

	trampoline := createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState)

	return func(node BinaryExpression, checkMode *CheckMode) *Type {
		result := trampoline(node, checkMode)
		Debug.assertIsDefined(result)
		return result
	}

	onEnter := func(node BinaryExpression, state *WorkArea, checkMode *CheckMode) WorkArea {
		if state != nil {
			state.stackIndex++
			state.skip = false
			setLeftType(state, nil /*type*/)
			setLastResult(state, nil /*type*/)
		} else {
			state = &WorkArea{
				checkMode:  checkMode,
				skip:       false,
				stackIndex: 0,
				typeStack:  []undefined{nil, nil},
			}
		}

		if isInJSFile(node) && getAssignedExpandoInitializer(node) != nil {
			state.skip = true
			setLastResult(state, c.checkExpression(node.Right, checkMode))
			return state
		}

		c.checkNullishCoalesceOperands(node)

		operator := node.OperatorToken.Kind
		if operator == ast.KindEqualsToken && (node.Left.Kind == ast.KindObjectLiteralExpression || node.Left.Kind == ast.KindArrayLiteralExpression) {
			state.skip = true
			setLastResult(state, c.checkDestructuringAssignment(node.Left, c.checkExpression(node.Right, checkMode), checkMode, node.Right.Kind == ast.KindThisKeyword))
			return state
		}

		return state
	}

	onLeft := func(left Expression, state WorkArea, _node BinaryExpression) *BinaryExpression {
		if !state.skip {
			return maybeCheckExpression(state, left)
		}
	}

	onOperator := func(operatorToken BinaryOperatorToken, state WorkArea, node BinaryExpression) {
		if !state.skip {
			leftType := getLastResult(state)
			Debug.assertIsDefined(leftType)
			setLeftType(state, leftType)
			setLastResult(state, nil /*type*/)
			operator := operatorToken.Kind
			if isLogicalOrCoalescingBinaryOperator(operator) {
				parent := node.Parent
				for parent.Kind == ast.KindParenthesizedExpression || isLogicalOrCoalescingBinaryExpression(parent) {
					parent = parent.Parent
				}
				if operator == ast.KindAmpersandAmpersandToken || isIfStatement(parent) {
					c.checkTestingKnownTruthyCallableOrAwaitableOrEnumMemberType(node.Left, leftType, ifElse(isIfStatement(parent), parent.ThenStatement, nil))
				}
				if isBinaryLogicalOperator(operator) {
					c.checkTruthinessOfType(leftType, node.Left)
				}
			}
		}
	}

	onRight := func(right Expression, state WorkArea, _node BinaryExpression) *BinaryExpression {
		if !state.skip {
			return maybeCheckExpression(state, right)
		}
	}

	onExit := func(node BinaryExpression, state WorkArea) *Type {
		var result *Type
		if state.skip {
			result = getLastResult(state)
		} else {
			leftType := getLeftType(state)
			Debug.assertIsDefined(leftType)

			rightType := getLastResult(state)
			Debug.assertIsDefined(rightType)

			result = c.checkBinaryLikeExpressionWorker(node.Left, node.OperatorToken, node.Right, leftType, rightType, state.checkMode, node)
		}

		state.skip = false
		setLeftType(state, nil /*type*/)
		setLastResult(state, nil /*type*/)
		state.stackIndex--
		return result
	}

	foldState := func(state WorkArea, result *Type, _side Union[ /* TODO(TS-TO-GO) TypeNode LiteralType: "left" */ any /* TODO(TS-TO-GO) TypeNode LiteralType: "right" */, any]) WorkArea {
		setLastResult(state, result)
		return state
	}

	maybeCheckExpression := func(state WorkArea, node Expression) *BinaryExpression {
		if isBinaryExpression(node) {
			return node
		}
		setLastResult(state, c.checkExpression(node, state.checkMode))
	}

	getLeftType := func(state WorkArea) *Type {
		return state.typeStack[state.stackIndex]
	}

	setLeftType := func(state WorkArea, t *Type) {
		state.typeStack[state.stackIndex] = t
	}

	getLastResult := func(state WorkArea) *Type {
		return state.typeStack[state.stackIndex+1]
	}

	setLastResult := func(state WorkArea, t *Type) {
		// To reduce overhead, reuse the next stack entry to store the
		// last result. This avoids the overhead of an additional property
		// on `WorkArea` and reuses empty stack entries as we walk back up
		// the stack.
		state.typeStack[state.stackIndex+1] = t
	}

}

func (c *Checker) checkNullishCoalesceOperands(node BinaryExpression) {
	TODO_IDENTIFIER := node
	if operatorToken.Kind == ast.KindQuestionQuestionToken {
		if isBinaryExpression(left) && (left.OperatorToken.Kind == ast.KindBarBarToken || left.OperatorToken.Kind == ast.KindAmpersandAmpersandToken) {
			c.grammarErrorOnNode(left, Diagnostics._0_and_1_operations_cannot_be_mixed_without_parentheses, tokenToString(left.OperatorToken.Kind), tokenToString(operatorToken.Kind))
		}
		if isBinaryExpression(right) && (right.OperatorToken.Kind == ast.KindBarBarToken || right.OperatorToken.Kind == ast.KindAmpersandAmpersandToken) {
			c.grammarErrorOnNode(right, Diagnostics._0_and_1_operations_cannot_be_mixed_without_parentheses, tokenToString(right.OperatorToken.Kind), tokenToString(operatorToken.Kind))
		}

		leftTarget := skipOuterExpressions(left, OuterExpressionKindsAll)
		nullishSemantics := c.getSyntacticNullishnessSemantics(leftTarget)
		if nullishSemantics != PredicateSemanticsSometimes {
			if node.Parent.Kind == ast.KindBinaryExpression {
				c.error(leftTarget, Diagnostics.This_binary_expression_is_never_nullish_Are_you_missing_parentheses)
			} else {
				if nullishSemantics == PredicateSemanticsAlways {
					c.error(leftTarget, Diagnostics.This_expression_is_always_nullish)
				} else {
					c.error(leftTarget, Diagnostics.Right_operand_of_is_unreachable_because_the_left_operand_is_never_nullish)
				}
			}
		}
	}
}

func (c *Checker) getSyntacticNullishnessSemantics(node *ast.Node) PredicateSemantics {
	node = skipOuterExpressions(node)
	switch node.Kind {
	case ast.KindAwaitExpression,
		ast.KindCallExpression,
		ast.KindElementAccessExpression,
		ast.KindNewExpression,
		ast.KindPropertyAccessExpression,
		ast.KindYieldExpression,
		ast.KindThisKeyword:
		return PredicateSemanticsSometimes
	case ast.KindBinaryExpression:
		// List of operators that can produce null/undefined:
		// = ??= ?? || ||= && &&=
		switch node.AsBinaryExpression().OperatorToken.Kind {
		case ast.KindEqualsToken,
			ast.KindQuestionQuestionToken,
			ast.KindQuestionQuestionEqualsToken,
			ast.KindBarBarToken,
			ast.KindBarBarEqualsToken,
			ast.KindAmpersandAmpersandToken,
			ast.KindAmpersandAmpersandEqualsToken:
			return PredicateSemanticsSometimes
		}
		return PredicateSemanticsNever
	case ast.KindConditionalExpression:
		return c.getSyntacticNullishnessSemantics(node.AsConditionalExpression().WhenTrue) | c.getSyntacticNullishnessSemantics(node.AsConditionalExpression().WhenFalse)
	case ast.KindNullKeyword:
		return PredicateSemanticsAlways
	case ast.KindIdentifier:
		if c.getResolvedSymbol(node.AsIdentifier()) == c.undefinedSymbol {
			return PredicateSemanticsAlways
		}
		return PredicateSemanticsSometimes
	}
	return PredicateSemanticsNever
}

// Note that this and `checkBinaryExpression` above should behave mostly the same, except this elides some
// expression-wide checks and does not use a work stack to fold nested binary expressions into the same callstack frame
func (c *Checker) checkBinaryLikeExpression(left Expression, operatorToken BinaryOperatorToken, right Expression, checkMode CheckMode, errorNode *ast.Node) *Type {
	operator := operatorToken.Kind
	if operator == ast.KindEqualsToken && (left.Kind == ast.KindObjectLiteralExpression || left.Kind == ast.KindArrayLiteralExpression) {
		return c.checkDestructuringAssignment(left, c.checkExpression(right, checkMode), checkMode, right.Kind == ast.KindThisKeyword)
	}
	var leftType *Type
	if isBinaryLogicalOperator(operator) {
		leftType = c.checkTruthinessExpression(left, checkMode)
	} else {
		leftType = c.checkExpression(left, checkMode)
	}

	rightType := c.checkExpression(right, checkMode)
	return c.checkBinaryLikeExpressionWorker(left, operatorToken, right, leftType, rightType, checkMode, errorNode)
}

func (c *Checker) checkBinaryLikeExpressionWorker(left Expression, operatorToken BinaryOperatorToken, right Expression, leftType *Type, rightType *Type, checkMode CheckMode, errorNode *ast.Node) *Type {
	operator := operatorToken.Kind
	switch operator {
	case ast.KindAsteriskToken,
		ast.KindAsteriskAsteriskToken,
		ast.KindAsteriskEqualsToken,
		ast.KindAsteriskAsteriskEqualsToken,
		ast.KindSlashToken,
		ast.KindSlashEqualsToken,
		ast.KindPercentToken,
		ast.KindPercentEqualsToken,
		ast.KindMinusToken,
		ast.KindMinusEqualsToken,
		ast.KindLessThanLessThanToken,
		ast.KindLessThanLessThanEqualsToken,
		ast.KindGreaterThanGreaterThanToken,
		ast.KindGreaterThanGreaterThanEqualsToken,
		ast.KindGreaterThanGreaterThanGreaterThanToken,
		ast.KindGreaterThanGreaterThanGreaterThanEqualsToken,
		ast.KindBarToken,
		ast.KindBarEqualsToken,
		ast.KindCaretToken,
		ast.KindCaretEqualsToken,
		ast.KindAmpersandToken,
		ast.KindAmpersandEqualsToken:
		if leftType == c.silentNeverType || rightType == c.silentNeverType {
			return c.silentNeverType
		}

		leftType = c.checkNonNullType(leftType, left)
		rightType = c.checkNonNullType(rightType, right)

		var suggestedOperator *PunctuationSyntaxKind
		// if a user tries to apply a bitwise operator to 2 boolean operands
		// try and return them a helpful suggestion
		if (leftType.flags&TypeFlagsBooleanLike != 0) && (rightType.flags&TypeFlagsBooleanLike != 0) && ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: suggestedOperator = getSuggestedBooleanOperator(operatorToken.kind) */ TODO) != nil {
			c.error(errorNode || operatorToken, Diagnostics.The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead, tokenToString(operatorToken.Kind), tokenToString(suggestedOperator))
			return c.numberType
		} else {
			// otherwise just check each operand separately and report errors as normal
			leftOk := c.checkArithmeticOperandType(left, leftType, Diagnostics.The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type, true /*isAwaitValid*/)
			rightOk := c.checkArithmeticOperandType(right, rightType, Diagnostics.The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type, true /*isAwaitValid*/)
			var resultType *Type
			// If both are any or unknown, allow operation; assume it will resolve to number
			if (c.isTypeAssignableToKind(leftType, TypeFlagsAnyOrUnknown) && c.isTypeAssignableToKind(rightType, TypeFlagsAnyOrUnknown)) || !(c.maybeTypeOfKind(leftType, TypeFlagsBigIntLike) || c.maybeTypeOfKind(rightType, TypeFlagsBigIntLike)) {
				resultType = c.numberType
			} else if bothAreBigIntLike(leftType, rightType) {
				switch operator {
				case ast.KindGreaterThanGreaterThanGreaterThanToken,
					ast.KindGreaterThanGreaterThanGreaterThanEqualsToken:
					reportOperatorError()
				case ast.KindAsteriskAsteriskToken,
					ast.KindAsteriskAsteriskEqualsToken:
					if c.languageVersion < ScriptTargetES2016 {
						c.error(errorNode, Diagnostics.Exponentiation_cannot_be_performed_on_bigint_values_unless_the_target_option_is_set_to_es2016_or_later)
					}
				}
				resultType = c.bigintType
			} else {
				reportOperatorError(bothAreBigIntLike)
				resultType = c.errorType
			}
			if leftOk && rightOk {
				checkAssignmentOperator(resultType)
				switch operator {
				case ast.KindLessThanLessThanToken,
					ast.KindLessThanLessThanEqualsToken,
					ast.KindGreaterThanGreaterThanToken,
					ast.KindGreaterThanGreaterThanEqualsToken,
					ast.KindGreaterThanGreaterThanGreaterThanToken,
					ast.KindGreaterThanGreaterThanGreaterThanEqualsToken:
					rhsEval := c.evaluate(right)
					if /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof rhsEval.value */ TODO == "number" && Math.abs(rhsEval.value) >= 32 {
						c.errorOrSuggestion(isEnumMember(walkUpParenthesizedExpressions(right.Parent.Parent)), errorNode || operatorToken, Diagnostics.This_operation_can_be_simplified_This_shift_is_identical_to_0_1_2, getTextOfNode(left), tokenToString(operator), rhsEval.value%32)
					}
				default:
				}
			}
			return resultType
		}
		fallthrough
	case ast.KindPlusToken,
		ast.KindPlusEqualsToken:
		if leftType == c.silentNeverType || rightType == c.silentNeverType {
			return c.silentNeverType
		}

		if !c.isTypeAssignableToKind(leftType, TypeFlagsStringLike) && !c.isTypeAssignableToKind(rightType, TypeFlagsStringLike) {
			leftType = c.checkNonNullType(leftType, left)
			rightType = c.checkNonNullType(rightType, right)
		}

		var resultType *Type
		if c.isTypeAssignableToKind(leftType, TypeFlagsNumberLike, true /*strict*/) && c.isTypeAssignableToKind(rightType, TypeFlagsNumberLike, true /*strict*/) {
			// Operands of an enum type are treated as having the primitive type Number.
			// If both operands are of the Number primitive type, the result is of the Number primitive type.
			resultType = c.numberType
		} else if c.isTypeAssignableToKind(leftType, TypeFlagsBigIntLike, true /*strict*/) && c.isTypeAssignableToKind(rightType, TypeFlagsBigIntLike, true /*strict*/) {
			// If both operands are of the BigInt primitive type, the result is of the BigInt primitive type.
			resultType = c.bigintType
		} else if c.isTypeAssignableToKind(leftType, TypeFlagsStringLike, true /*strict*/) || c.isTypeAssignableToKind(rightType, TypeFlagsStringLike, true /*strict*/) {
			// If one or both operands are of the String primitive type, the result is of the String primitive type.
			resultType = c.stringType
		} else if c.isTypeAny(leftType) || c.isTypeAny(rightType) {
			// Otherwise, the result is of type Any.
			// NOTE: unknown type here denotes error type. Old compiler treated this case as any type so do we.
			if c.isErrorType(leftType) || c.isErrorType(rightType) {
				resultType = c.errorType
			} else {
				resultType = c.anyType
			}
		}

		// Symbols are not allowed at all in arithmetic expressions
		if resultType != nil && !checkForDisallowedESSymbolOperand(operator) {
			return resultType
		}

		if resultType == nil {
			// Types that have a reasonably good chance of being a valid operand type.
			// If both types have an awaited type of one of these, we'll assume the user
			// might be missing an await without doing an exhaustive check that inserting
			// await(s) will actually be a completely valid binary expression.
			closeEnoughKind := TypeFlagsNumberLike | TypeFlagsBigIntLike | TypeFlagsStringLike | TypeFlagsAnyOrUnknown
			reportOperatorError(func(left *Type, right *Type) bool {
				return c.isTypeAssignableToKind(left, closeEnoughKind) && c.isTypeAssignableToKind(right, closeEnoughKind)
			})
			return c.anyType
		}

		if operator == ast.KindPlusEqualsToken {
			checkAssignmentOperator(resultType)
		}
		return resultType
	case ast.KindLessThanToken,
		ast.KindGreaterThanToken,
		ast.KindLessThanEqualsToken,
		ast.KindGreaterThanEqualsToken:
		if checkForDisallowedESSymbolOperand(operator) {
			leftType = c.getBaseTypeOfLiteralTypeForComparison(c.checkNonNullType(leftType, left))
			rightType = c.getBaseTypeOfLiteralTypeForComparison(c.checkNonNullType(rightType, right))
			reportOperatorErrorUnless(func(left *Type, right *Type) bool {
				if c.isTypeAny(left) || c.isTypeAny(right) {
					return true
				}
				leftAssignableToNumber := c.isTypeAssignableTo(left, c.numberOrBigIntType)
				rightAssignableToNumber := c.isTypeAssignableTo(right, c.numberOrBigIntType)
				return leftAssignableToNumber && rightAssignableToNumber || !leftAssignableToNumber && !rightAssignableToNumber && c.areTypesComparable(left, right)
			})
		}
		return c.booleanType
	case ast.KindEqualsEqualsToken,
		ast.KindExclamationEqualsToken,
		ast.KindEqualsEqualsEqualsToken,
		ast.KindExclamationEqualsEqualsToken:
		// We suppress errors in CheckMode.TypeOnly (meaning the invocation came from getTypeOfExpression). During
		// control flow analysis it is possible for operands to temporarily have narrower types, and those narrower
		// types may cause the operands to not be comparable. We don't want such errors reported (see #46475).
		if !(checkMode && checkMode&CheckModeTypeOnly != 0) {
			if (isLiteralExpressionOfObject(left) || isLiteralExpressionOfObject(right)) && (!isInJSFile(left) || (operator == ast.KindEqualsEqualsEqualsToken || operator == ast.KindExclamationEqualsEqualsToken)) {
				eqType := operator == ast.KindEqualsEqualsToken || operator == ast.KindEqualsEqualsEqualsToken
				c.error(errorNode, Diagnostics.This_condition_will_always_return_0_since_JavaScript_compares_objects_by_reference_not_value, ifElse(eqType, "false", "true"))
			}
			checkNaNEquality(errorNode, operator, left, right)
			reportOperatorErrorUnless(func(left *Type, right *Type) bool {
				return c.isTypeEqualityComparableTo(left, right) || c.isTypeEqualityComparableTo(right, left)
			})
		}
		return c.booleanType
	case ast.KindInstanceOfKeyword:
		return c.checkInstanceOfExpression(left, right, leftType, rightType, checkMode)
	case ast.KindInKeyword:
		return c.checkInExpression(left, right, leftType, rightType)
	case ast.KindAmpersandAmpersandToken,
		ast.KindAmpersandAmpersandEqualsToken:
		var resultType *Type
		if c.hasTypeFacts(leftType, TypeFactsTruthy) {
			resultType = c.getUnionType([]*Type{c.extractDefinitelyFalsyTypes(ifElse(c.strictNullChecks, leftType, c.getBaseTypeOfLiteralType(rightType))), rightType})
		} else {
			resultType = leftType
		}
		if operator == ast.KindAmpersandAmpersandEqualsToken {
			checkAssignmentOperator(rightType)
		}
		return resultType
	case ast.KindBarBarToken,
		ast.KindBarBarEqualsToken:
		var resultType *Type
		if c.hasTypeFacts(leftType, TypeFactsFalsy) {
			resultType = c.getUnionType([]*Type{c.getNonNullableType(c.removeDefinitelyFalsyTypes(leftType)), rightType}, UnionReductionSubtype)
		} else {
			resultType = leftType
		}
		if operator == ast.KindBarBarEqualsToken {
			checkAssignmentOperator(rightType)
		}
		return resultType
	case ast.KindQuestionQuestionToken,
		ast.KindQuestionQuestionEqualsToken:
		var resultType *Type
		if c.hasTypeFacts(leftType, TypeFactsEQUndefinedOrNull) {
			resultType = c.getUnionType([]*Type{c.getNonNullableType(leftType), rightType}, UnionReductionSubtype)
		} else {
			resultType = leftType
		}
		if operator == ast.KindQuestionQuestionEqualsToken {
			checkAssignmentOperator(rightType)
		}
		return resultType
	case ast.KindEqualsToken:
		var declKind AssignmentDeclarationKind
		if isBinaryExpression(left.Parent) {
			declKind = getAssignmentDeclarationKind(left.Parent)
		} else {
			declKind = AssignmentDeclarationKindNone
		}
		checkAssignmentDeclaration(declKind, rightType)
		if isAssignmentDeclaration(declKind) {
			if rightType.flags&TypeFlagsObject == 0 || declKind != AssignmentDeclarationKindModuleExports && declKind != AssignmentDeclarationKindPrototype && !c.isEmptyObjectType(rightType) && !c.isFunctionObjectType(rightType.AsObjectType()) && getObjectFlags(rightType)&ObjectFlagsClass == 0 {
				// don't check assignability of module.exports=, C.prototype=, or expando types because they will necessarily be incomplete
				checkAssignmentOperator(rightType)
			}
			return leftType
		} else {
			checkAssignmentOperator(rightType)
			return rightType
		}
		fallthrough
	case ast.KindCommaToken:
		if !c.compilerOptions.allowUnreachableCode && c.isSideEffectFree(left) && !isIndirectCall(left.Parent.AsBinaryExpression()) {
			sf := getSourceFileOfNode(left)
			sourceText := sf.Text
			start := skipTrivia(sourceText, left.Pos)
			isInDiag2657 := sf.ParseDiagnostics.some(func(diag DiagnosticWithLocation) bool {
				if diag.code != Diagnostics.JSX_expressions_must_have_one_parent_element.code {
					return false
				}
				return textSpanContainsPosition(diag, start)
			})
			if !isInDiag2657 {
				c.error(left, Diagnostics.Left_side_of_comma_operator_is_unused_and_has_no_side_effects)
			}
		}
		return rightType
	default:
		return Debug.fail()
	}

	bothAreBigIntLike := func(left *Type, right *Type) bool {
		return c.isTypeAssignableToKind(left, TypeFlagsBigIntLike) && c.isTypeAssignableToKind(right, TypeFlagsBigIntLike)
	}

	checkAssignmentDeclaration := func(kind AssignmentDeclarationKind, rightType *Type) {
		if kind == AssignmentDeclarationKindModuleExports {
			for _, prop := range c.getPropertiesOfObjectType(rightType) {
				propType := c.getTypeOfSymbol(prop)
				if propType.symbol && propType.symbol.Flags&ast.SymbolFlagsClass != 0 {
					name := prop.EscapedName
					symbol := c.resolveName(prop.ValueDeclaration, name, ast.SymbolFlagsType, nil /*nameNotFoundMessage*/, false /*isUse*/)
					if symbol. /* ? */ declarations != nil && symbol.Declarations.some(isJSDocTypedefTag) {
						c.addDuplicateDeclarationErrorsForSymbols(symbol, Diagnostics.Duplicate_identifier_0, unescapeLeadingUnderscores(name), prop)
						c.addDuplicateDeclarationErrorsForSymbols(prop, Diagnostics.Duplicate_identifier_0, unescapeLeadingUnderscores(name), symbol)
					}
				}
			}
		}
	}

	// Return true for "indirect calls", (i.e. `(0, x.f)(...)` or `(0, eval)(...)`), which prevents passing `this`.
	isIndirectCall := func(node BinaryExpression) bool {
		return node.Parent.Kind == ast.KindParenthesizedExpression && isNumericLiteral(node.Left) && node.Left.Text == "0" && (isCallExpression(node.Parent.Parent) && node.Parent.Parent.Expression == node.Parent || node.Parent.Parent.Kind == ast.KindTaggedTemplateExpression) && (isAccessExpression(node.Right) || isIdentifier(node.Right) && node.Right.EscapedText == "eval")
	}

	// Return true if there was no error, false if there was an error.
	checkForDisallowedESSymbolOperand := func(operator PunctuationSyntaxKind) bool {
		var offendingSymbolOperand Expression
		switch {
		case c.maybeTypeOfKindConsideringBaseConstraint(leftType, TypeFlagsESSymbolLike):
			offendingSymbolOperand = left
		case c.maybeTypeOfKindConsideringBaseConstraint(rightType, TypeFlagsESSymbolLike):
			offendingSymbolOperand = right
		default:
			offendingSymbolOperand = nil
		}

		if offendingSymbolOperand != nil {
			c.error(offendingSymbolOperand, Diagnostics.The_0_operator_cannot_be_applied_to_type_symbol, tokenToString(operator))
			return false
		}

		return true
	}

	getSuggestedBooleanOperator := func(operator SyntaxKind) *PunctuationSyntaxKind {
		switch operator {
		case ast.KindBarToken,
			ast.KindBarEqualsToken:
			return ast.KindBarBarToken
		case ast.KindCaretToken,
			ast.KindCaretEqualsToken:
			return ast.KindExclamationEqualsEqualsToken
		case ast.KindAmpersandToken,
			ast.KindAmpersandEqualsToken:
			return ast.KindAmpersandAmpersandToken
		default:
			return nil
		}
	}

	checkAssignmentOperator := func(valueType *Type) {
		if isAssignmentOperator(operator) {
			c.addLazyDiagnostic(checkAssignmentOperatorWorker)
		}

		checkAssignmentOperatorWorker := func() {
			assigneeType := leftType

			// getters can be a subtype of setters, so to check for assignability we use the setter's type instead
			if isCompoundAssignment(operatorToken.Kind) && left.Kind == ast.KindPropertyAccessExpression {
				assigneeType = c.checkPropertyAccessExpression(left.AsPropertyAccessExpression(), nil /*checkMode*/, true /*writeOnly*/)
			}

			// TypeScript 1.0 spec (April 2014): 4.17
			// An assignment of the form
			//    VarExpr = ValueExpr
			// requires VarExpr to be classified as a reference
			// A compound assignment furthermore requires VarExpr to be classified as a reference (section 4.1)
			// and the type of the non-compound operation to be assignable to the type of VarExpr.

			if c.checkReferenceExpression(left, Diagnostics.The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access, Diagnostics.The_left_hand_side_of_an_assignment_expression_may_not_be_an_optional_property_access) {
				var headMessage *DiagnosticMessage
				if c.exactOptionalPropertyTypes && isPropertyAccessExpression(left) && c.maybeTypeOfKind(valueType, TypeFlagsUndefined) {
					target := c.getTypeOfPropertyOfType(c.getTypeOfExpression(left.Expression), left.Name.EscapedText)
					if c.isExactOptionalPropertyMismatch(valueType, target) {
						headMessage = Diagnostics.Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_type_of_the_target
					}
				}
				// to avoid cascading errors check assignability only if 'isReference' check succeeded and no errors were reported
				c.checkTypeAssignableToAndOptionallyElaborate(valueType, assigneeType, left, right, headMessage)
			}
		}

	}

	isAssignmentDeclaration := func(kind AssignmentDeclarationKind) bool {
		switch kind {
		case AssignmentDeclarationKindModuleExports:
			return true
		case AssignmentDeclarationKindExportsProperty,
			AssignmentDeclarationKindProperty,
			AssignmentDeclarationKindPrototype,
			AssignmentDeclarationKindPrototypeProperty,
			AssignmentDeclarationKindThisProperty:
			symbol := c.getSymbolOfNode(left)
			init := getAssignedExpandoInitializer(right)
			return init != nil && isObjectLiteralExpression(init) && symbol. /* ? */ exports. /* ? */ size
		default:
			return false
		}
	}

	/**
	 * Returns true if an error is reported
	 */

	reportOperatorErrorUnless := func(typesAreCompatible func(left *Type, right *Type) bool) bool {
		if !typesAreCompatible(leftType, rightType) {
			reportOperatorError(typesAreCompatible)
			return true
		}
		return false
	}

	reportOperatorError := func(isRelated func(left *Type, right *Type) bool) {
		wouldWorkWithAwait := false
		errNode := errorNode || operatorToken
		if isRelated != nil {
			awaitedLeftType := c.getAwaitedTypeNoAlias(leftType)
			awaitedRightType := c.getAwaitedTypeNoAlias(rightType)
			wouldWorkWithAwait = !(awaitedLeftType == leftType && awaitedRightType == rightType) && awaitedLeftType != nil && awaitedRightType != nil && isRelated(awaitedLeftType, awaitedRightType)
		}

		effectiveLeft := leftType
		effectiveRight := rightType
		if !wouldWorkWithAwait && isRelated != nil {
			[]any{effectiveLeft, effectiveRight} = c.getBaseTypesIfUnrelated(leftType, rightType, isRelated)
		}
		TODO_IDENTIFIER := c.getTypeNamesForErrorDisplay(effectiveLeft, effectiveRight)
		if tryGiveBetterPrimaryError(errNode, wouldWorkWithAwait, leftStr, rightStr) == nil {
			c.errorAndMaybeSuggestAwait(errNode, wouldWorkWithAwait, Diagnostics.Operator_0_cannot_be_applied_to_types_1_and_2, tokenToString(operatorToken.Kind), leftStr, rightStr)
		}
	}

	tryGiveBetterPrimaryError := func(errNode *ast.Node, maybeMissingAwait bool, leftStr string, rightStr string) *Diagnostic {
		switch operatorToken.Kind {
		case ast.KindEqualsEqualsEqualsToken,
			ast.KindEqualsEqualsToken,
			ast.KindExclamationEqualsEqualsToken,
			ast.KindExclamationEqualsToken:
			return c.errorAndMaybeSuggestAwait(errNode, maybeMissingAwait, Diagnostics.This_comparison_appears_to_be_unintentional_because_the_types_0_and_1_have_no_overlap, leftStr, rightStr)
		default:
			return nil
		}
	}

	checkNaNEquality := func(errorNode *ast.Node, operator SyntaxKind, left Expression, right Expression) {
		isLeftNaN := isGlobalNaN(skipParentheses(left))
		isRightNaN := isGlobalNaN(skipParentheses(right))
		if isLeftNaN || isRightNaN {
			err := c.error(errorNode, Diagnostics.This_condition_will_always_return_0, tokenToString(ifElse(operator == ast.KindEqualsEqualsEqualsToken || operator == ast.KindEqualsEqualsToken, ast.KindFalseKeyword, ast.KindTrueKeyword)))
			if isLeftNaN && isRightNaN {
				return
			}
			var operatorString string
			if operator == ast.KindExclamationEqualsEqualsToken || operator == ast.KindExclamationEqualsToken {
				operatorString = tokenToString(ast.KindExclamationToken)
			} else {
				operatorString = ""
			}
			var location Expression
			if isLeftNaN {
				location = right
			} else {
				location = left
			}
			expression := skipParentheses(location)
			addRelatedInfo(err, createDiagnosticForNode(location, Diagnostics.Did_you_mean_0, __TEMPLATE__(operatorString, "Number.isNaN(", ifElse(isEntityNameExpression(expression), entityNameToString(expression), "..."), ")")))
		}
	}

	isGlobalNaN := func(expr Expression) bool {
		if isIdentifier(expr) && expr.EscapedText == "NaN" {
			globalNaNSymbol := c.getGlobalNaNSymbol()
			return globalNaNSymbol != nil && globalNaNSymbol == c.getResolvedSymbol(expr)
		}
		return false
	}

}

func (c *Checker) getBaseTypesIfUnrelated(leftType *Type, rightType *Type, isRelated func(left *Type, right *Type) bool) /* TODO(TS-TO-GO) TypeNode TupleType: [Type, Type] */ any {
	effectiveLeft := leftType
	effectiveRight := rightType
	leftBase := c.getBaseTypeOfLiteralType(leftType)
	rightBase := c.getBaseTypeOfLiteralType(rightType)
	if !isRelated(leftBase, rightBase) {
		effectiveLeft = leftBase
		effectiveRight = rightBase
	}
	return []any{effectiveLeft, effectiveRight}
}

func (c *Checker) checkYieldExpression(node YieldExpression) *Type {
	c.addLazyDiagnostic(checkYieldExpressionGrammar)

	func_ := getContainingFunction(node)
	if func_ == nil {
		return c.anyType
	}
	functionFlags := getFunctionFlags(func_)

	if functionFlags&FunctionFlagsGenerator == 0 {
		// If the user's code is syntactically correct, the func should always have a star. After all, we are in a yield context.
		return c.anyType
	}

	isAsync := (functionFlags & FunctionFlagsAsync) != 0
	if node.AsteriskToken != nil {
		// Async generator functions prior to ES2018 require the __await, __asyncDelegator,
		// and __asyncValues helpers
		if isAsync && c.languageVersion < LanguageFeatureMinimumTarget.AsyncGenerators {
			c.checkExternalEmitHelpers(node, ExternalEmitHelpersAsyncDelegatorIncludes)
		}

		// Generator functions prior to ES2015 require the __values helper
		if !isAsync && c.languageVersion < LanguageFeatureMinimumTarget.Generators && c.compilerOptions.downlevelIteration {
			c.checkExternalEmitHelpers(node, ExternalEmitHelpersValues)
		}
	}

	// There is no point in doing an assignability check if the function
	// has no explicit return type because the return type is directly computed
	// from the yield expressions.
	returnType := c.getReturnTypeFromAnnotation(func_)
	if returnType != nil && returnType.flags&TypeFlagsUnion != 0 {
		returnType = c.filterType(returnType, func(t *Type) bool {
			return c.checkGeneratorInstantiationAssignabilityToReturnType(t, functionFlags, nil /*errorNode*/)
		})
	}
	iterationTypes := returnType && c.getIterationTypesOfGeneratorFunctionReturnType(returnType, isAsync)
	signatureYieldType := iterationTypes && iterationTypes.yieldType || c.anyType
	signatureNextType := iterationTypes && iterationTypes.nextType || c.anyType
	var yieldExpressionType *Type
	if node.Expression != nil {
		yieldExpressionType = c.checkExpression(node.Expression)
	} else {
		yieldExpressionType = c.undefinedWideningType
	}
	yieldedType := c.getYieldedTypeOfYieldExpression(node, yieldExpressionType, signatureNextType, isAsync)
	if returnType != nil && yieldedType != nil {
		c.checkTypeAssignableToAndOptionallyElaborate(yieldedType, signatureYieldType, node.Expression || node, node.Expression)
	}

	if node.AsteriskToken != nil {
		var use /* TODO(TS-TO-GO) inferred type IterationUse.YieldStar | IterationUse.AsyncYieldStar */ any
		if isAsync {
			use = IterationUseAsyncYieldStar
		} else {
			use = IterationUseYieldStar
		}
		return c.getIterationTypeOfIterable(use, IterationTypeKindReturn, yieldExpressionType, node.Expression) || c.anyType
	} else if returnType != nil {
		return c.getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKindNext, returnType, isAsync) || c.anyType
	}
	t := c.getContextualIterationType(IterationTypeKindNext, func_)
	if !(t) {
		t = c.anyType
		c.addLazyDiagnostic(func() {
			if c.noImplicitAny && !expressionResultIsUnused(node) {
				contextualType := c.getContextualType(node, nil /*contextFlags*/)
				if contextualType == nil || c.isTypeAny(contextualType) {
					c.error(node, Diagnostics.yield_expression_implicitly_results_in_an_any_type_because_its_containing_generator_lacks_a_return_type_annotation)
				}
			}
		})
	}
	return t

	checkYieldExpressionGrammar := func() {
		if node.Flags&ast.NodeFlagsYieldContext == 0 {
			c.grammarErrorOnFirstToken(node, Diagnostics.A_yield_expression_is_only_allowed_in_a_generator_body)
		}

		if c.isInParameterInitializerBeforeContainingFunction(node) {
			c.error(node, Diagnostics.yield_expressions_cannot_be_used_in_a_parameter_initializer)
		}
	}

}

func (c *Checker) checkConditionalExpression(node ConditionalExpression, checkMode CheckMode) *Type {
	t := c.checkTruthinessExpression(node.Condition, checkMode)
	c.checkTestingKnownTruthyCallableOrAwaitableOrEnumMemberType(node.Condition, t, node.WhenTrue)
	type1 := c.checkExpression(node.WhenTrue, checkMode)
	type2 := c.checkExpression(node.WhenFalse, checkMode)
	return c.getUnionType([]*Type{type1, type2}, UnionReductionSubtype)
}

func (c *Checker) isTemplateLiteralContext(node *ast.Node) bool {
	parent := node.Parent
	return isParenthesizedExpression(parent) && c.isTemplateLiteralContext(parent) || isElementAccessExpression(parent) && parent.ArgumentExpression == node
}

func (c *Checker) checkTemplateExpression(node TemplateExpression) *Type {
	texts := []string{node.Head.Text}
	types := []never{}
	for _, span := range node.TemplateSpans {
		t := c.checkExpression(span.Expression)
		if c.maybeTypeOfKindConsideringBaseConstraint(t, TypeFlagsESSymbolLike) {
			c.error(span.Expression, Diagnostics.Implicit_conversion_of_a_symbol_to_a_string_will_fail_at_runtime_Consider_wrapping_this_expression_in_String)
		}
		texts.push(span.Literal.Text)
		types.push(ifElse(c.isTypeAssignableTo(t, c.templateConstraintType), t, c.stringType))
	}
	evaluated := node.Parent.Kind != ast.KindTaggedTemplateExpression && c.evaluate(node).value
	if evaluated {
		return c.getFreshTypeOfLiteralType(c.getStringLiteralType(evaluated))
	}
	if c.isConstContext(node) || c.isTemplateLiteralContext(node) || c.someType(c.getContextualType(node, nil /*contextFlags*/) || c.unknownType, c.isTemplateLiteralContextualType) {
		return c.getTemplateLiteralType(texts, types)
	}
	return c.stringType
}

func (c *Checker) isTemplateLiteralContextualType(t *Type) bool {
	return t.flags&(TypeFlagsStringLiteral|TypeFlagsTemplateLiteral) != 0 || t.flags&TypeFlagsInstantiableNonPrimitive != 0 && c.maybeTypeOfKind(c.getBaseConstraintOfType(t) || c.unknownType, TypeFlagsStringLike)
}

func (c *Checker) getContextNode(node Expression) Expression {
	if isJsxAttributes(node) && !isJsxSelfClosingElement(node.Parent) {
		return node.Parent.Parent
		// Needs to be the root JsxElement, so it encompasses the attributes _and_ the children (which are essentially part of the attributes)
	}
	return node
}

func (c *Checker) checkExpressionWithContextualType(node Expression, contextualType *Type, inferenceContext *InferenceContext, checkMode CheckMode) *Type {
	contextNode := c.getContextNode(node)
	c.pushContextualType(contextNode, contextualType, false /*isCache*/)
	c.pushInferenceContext(contextNode, inferenceContext)
	t := c.checkExpression(node, checkMode|CheckModeContextual|(ifElse(inferenceContext != nil, CheckModeInferential, 0)))
	// In CheckMode.Inferential we collect intra-expression inference sites to process before fixing any type
	// parameters. This information is no longer needed after the call to checkExpression.
	if inferenceContext != nil && inferenceContext.intraExpressionInferenceSites != nil {
		inferenceContext.intraExpressionInferenceSites = nil
	}
	// We strip literal freshness when an appropriate contextual type is present such that contextually typed
	// literals always preserve their literal types (otherwise they might widen during type inference). An alternative
	// here would be to not mark contextually typed literals as fresh in the first place.
	var result *Type
	if c.maybeTypeOfKind(t, TypeFlagsLiteral) && c.isLiteralOfContextualType(t, c.instantiateContextualType(contextualType, node, nil /*contextFlags*/)) {
		result = c.getRegularTypeOfLiteralType(t)
	} else {
		result = t
	}
	c.popInferenceContext()
	c.popContextualType()
	return result
}

func (c *Checker) checkExpressionCached(node Union[Expression, QualifiedName], checkMode CheckMode) *Type {
	if checkMode {
		return c.checkExpression(node, checkMode)
	}
	links := c.getNodeLinks(node)
	if links.resolvedType == nil {
		// When computing a type that we're going to cache, we need to ignore any ongoing control flow
		// analysis because variables may have transient types in indeterminable states. Moving flowLoopStart
		// to the top of the stack ensures all transient types are computed from a known point.
		saveFlowLoopStart := c.flowLoopStart
		saveFlowTypeCache := c.flowTypeCache
		c.flowLoopStart = c.flowLoopCount
		c.flowTypeCache = nil
		links.resolvedType = c.checkExpression(node, checkMode)
		c.flowTypeCache = saveFlowTypeCache
		c.flowLoopStart = saveFlowLoopStart
	}
	return links.resolvedType
}

func (c *Checker) isTypeAssertion(node Expression) bool {
	node = skipParentheses(node, true /*excludeJSDocTypeAssertions*/)
	return node.Kind == ast.KindTypeAssertionExpression || node.Kind == ast.KindAsExpression || isJSDocTypeAssertion(node)
}

func (c *Checker) checkDeclarationInitializer(declaration HasExpressionInitializer, checkMode CheckMode, contextualType *Type) *Type {
	initializer := getEffectiveInitializer(declaration)
	if isInJSFile(declaration) {
		typeNode := tryGetJSDocSatisfiesTypeNode(declaration)
		if typeNode != nil {
			return c.checkSatisfiesExpressionWorker(initializer, typeNode, checkMode)
		}
	}
	t := c.getQuickTypeOfExpression(initializer) || (ifElse(contextualType != nil, c.checkExpressionWithContextualType(initializer, contextualType, nil /*inferenceContext*/, checkMode || CheckModeNormal), c.checkExpressionCached(initializer, checkMode)))
	if isParameter(ifElse(isBindingElement(declaration), walkUpBindingElementsAndPatterns(declaration), declaration)) {
		if declaration.Name.Kind == ast.KindObjectBindingPattern && c.isObjectLiteralType(t) {
			return c.padObjectLiteralType(t.AsObjectType(), declaration.Name)
		}
		if declaration.Name.Kind == ast.KindArrayBindingPattern && c.isTupleType(t) {
			return c.padTupleType(t, declaration.Name)
		}
	}
	return t
}

func (c *Checker) padObjectLiteralType(t ObjectType, pattern ObjectBindingPattern) *Type {
	var missingElements *[]BindingElement
	for _, e := range pattern.Elements {
		if e.Initializer != nil {
			name := c.getPropertyNameFromBindingElement(e)
			if name && c.getPropertyOfType(t, name) == nil {
				missingElements = append(missingElements, e)
			}
		}
	}
	if missingElements == nil {
		return t
	}
	members := createSymbolTable()
	for _, prop := range c.getPropertiesOfObjectType(t) {
		members.set(prop.EscapedName, prop)
	}
	for _, e := range missingElements {
		symbol := c.createSymbol(ast.SymbolFlagsProperty|ast.SymbolFlagsOptional, c.getPropertyNameFromBindingElement(e))
		symbol.Links.type_ = c.getTypeFromBindingElement(e, false /*includePatternInType*/, false /*reportErrors*/)
		members.set(symbol.EscapedName, symbol)
	}
	result := c.createAnonymousType(t.symbol, members, emptyArray, emptyArray, c.getIndexInfosOfType(t))
	result.objectFlags = t.objectFlags
	return result
}

func (c *Checker) getPropertyNameFromBindingElement(e BindingElement) *string {
	exprType := c.getLiteralTypeFromPropertyName(e.PropertyName || e.Name.AsIdentifier())
	if isTypeUsableAsPropertyName(exprType) {
		return getPropertyNameFromType(exprType)
	} else {
		return nil
	}
}

func (c *Checker) padTupleType(t TupleTypeReference, pattern ArrayBindingPattern) *Type {
	if t.target.combinedFlags&ElementFlagsVariable != 0 || c.getTypeReferenceArity(t) >= pattern.Elements.length {
		return t
	}
	patternElements := pattern.Elements
	elementTypes := c.getElementTypes(t).slice()
	elementFlags := t.target.elementFlags.slice()
	for i := c.getTypeReferenceArity(t); i < patternElements.length; i++ {
		e := patternElements[i]
		if i < patternElements.length-1 || !(e.Kind == ast.KindBindingElement && e.DotDotDotToken != nil) {
			elementTypes.push(ifElse(!isOmittedExpression(e) && c.hasDefaultValue(e), c.getTypeFromBindingElement(e, false /*includePatternInType*/, false /*reportErrors*/), c.anyType))
			elementFlags.push(ElementFlagsOptional)
			if !isOmittedExpression(e) && !c.hasDefaultValue(e) {
				c.reportImplicitAny(e, c.anyType)
			}
		}
	}
	return c.createTupleType(elementTypes, elementFlags, t.target.readonly)
}

func (c *Checker) widenTypeInferredFromInitializer(declaration HasExpressionInitializer, t *Type) *Type {
	var widened *Type
	if c.getCombinedNodeFlagsCached(declaration)&ast.NodeFlagsConstant != 0 || isDeclarationReadonly(declaration) {
		widened = t
	} else {
		widened = c.getWidenedLiteralType(t)
	}
	if isInJSFile(declaration) {
		if c.isEmptyLiteralType(widened) {
			c.reportImplicitAny(declaration, c.anyType)
			return c.anyType
		} else if c.isEmptyArrayLiteralType(widened) {
			c.reportImplicitAny(declaration, c.anyArrayType)
			return c.anyArrayType
		}
	}
	return widened
}

func (c *Checker) isLiteralOfContextualType(candidateType *Type, contextualType *Type) bool {
	if contextualType != nil {
		if contextualType.flags&TypeFlagsUnionOrIntersection != 0 {
			types := contextualType.AsUnionType().types
			return core.Some(types, func(t *Type) bool {
				return c.isLiteralOfContextualType(candidateType, t)
			})
		}
		if contextualType.flags&TypeFlagsInstantiableNonPrimitive != 0 {
			// If the contextual type is a type variable constrained to a primitive type, consider
			// this a literal context for literals of that primitive type. For example, given a
			// type parameter 'T extends string', infer string literal types for T.
			constraint := c.getBaseConstraintOfType(contextualType) || c.unknownType
			return c.maybeTypeOfKind(constraint, TypeFlagsString) && c.maybeTypeOfKind(candidateType, TypeFlagsStringLiteral) || c.maybeTypeOfKind(constraint, TypeFlagsNumber) && c.maybeTypeOfKind(candidateType, TypeFlagsNumberLiteral) || c.maybeTypeOfKind(constraint, TypeFlagsBigInt) && c.maybeTypeOfKind(candidateType, TypeFlagsBigIntLiteral) || c.maybeTypeOfKind(constraint, TypeFlagsESSymbol) && c.maybeTypeOfKind(candidateType, TypeFlagsUniqueESSymbol) || c.isLiteralOfContextualType(candidateType, constraint)
		}
		// If the contextual type is a literal of a particular primitive type, we consider this a
		// literal context for all literals of that primitive type.
		return contextualType.flags&(TypeFlagsStringLiteral|TypeFlagsIndex|TypeFlagsTemplateLiteral|TypeFlagsStringMapping) != 0 && c.maybeTypeOfKind(candidateType, TypeFlagsStringLiteral) || contextualType.flags&TypeFlagsNumberLiteral != 0 && c.maybeTypeOfKind(candidateType, TypeFlagsNumberLiteral) || contextualType.flags&TypeFlagsBigIntLiteral != 0 && c.maybeTypeOfKind(candidateType, TypeFlagsBigIntLiteral) || contextualType.flags&TypeFlagsBooleanLiteral != 0 && c.maybeTypeOfKind(candidateType, TypeFlagsBooleanLiteral) || contextualType.flags&TypeFlagsUniqueESSymbol != 0 && c.maybeTypeOfKind(candidateType, TypeFlagsUniqueESSymbol)
	}
	return false
}

func (c *Checker) isConstContext(node Expression) bool {
	parent := node.Parent
	return isAssertionExpression(parent) && isConstTypeReference(parent.Type_) || isJSDocTypeAssertion(parent) && isConstTypeReference(getJSDocTypeAssertionType(parent)) || c.isValidConstAssertionArgument(node) && c.isConstTypeVariable(c.getContextualType(node, ContextFlagsNone)) || (isParenthesizedExpression(parent) || isArrayLiteralExpression(parent) || isSpreadElement(parent)) && c.isConstContext(parent) || (isPropertyAssignment(parent) || isShorthandPropertyAssignment(parent) || isTemplateSpan(parent)) && c.isConstContext(parent.Parent)
}

func (c *Checker) checkExpressionForMutableLocation(node Expression, checkMode *CheckMode, forceTuple bool) *Type {
	t := c.checkExpression(node, checkMode, forceTuple)
	switch {
	case c.isConstContext(node) || isCommonJsExportedExpression(node):
		return c.getRegularTypeOfLiteralType(t)
	case c.isTypeAssertion(node):
		return t
	default:
		return c.getWidenedLiteralLikeTypeForContextualType(t, c.instantiateContextualType(c.getContextualType(node, nil /*contextFlags*/), node, nil /*contextFlags*/))
	}
}

func (c *Checker) checkPropertyAssignment(node PropertyAssignment, checkMode CheckMode) *Type {
	// Do not use hasDynamicName here, because that returns false for well known symbols.
	// We want to perform checkComputedPropertyName for all computed properties, including
	// well known symbols.
	if node.Name.Kind == ast.KindComputedPropertyName {
		c.checkComputedPropertyName(node.Name)
	}

	return c.checkExpressionForMutableLocation(node.Initializer, checkMode)
}

func (c *Checker) checkObjectLiteralMethod(node MethodDeclaration, checkMode CheckMode) *Type {
	// Grammar checking
	c.checkGrammarMethod(node)

	// Do not use hasDynamicName here, because that returns false for well known symbols.
	// We want to perform checkComputedPropertyName for all computed properties, including
	// well known symbols.
	if node.Name.Kind == ast.KindComputedPropertyName {
		c.checkComputedPropertyName(node.Name)
	}

	uninstantiatedType := c.checkFunctionExpressionOrObjectLiteralMethod(node, checkMode)
	return c.instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, checkMode)
}

func (c *Checker) instantiateTypeWithSingleGenericCallSignature(node Union[Expression, MethodDeclaration, QualifiedName], t *Type, checkMode CheckMode) *Type {
	if checkMode && checkMode&(CheckModeInferential|CheckModeSkipGenericFunctions) != 0 {
		callSignature := c.getSingleSignature(t, SignatureKindCall, true /*allowMembers*/)
		constructSignature := c.getSingleSignature(t, SignatureKindConstruct, true /*allowMembers*/)
		signature := callSignature || constructSignature
		if signature != nil && signature.typeParameters != nil {
			contextualType := c.getApparentTypeOfContextualType(node.AsExpression(), ContextFlagsNoConstraints)
			if contextualType != nil {
				contextualSignature := c.getSingleSignature(c.getNonNullableType(contextualType), ifElse(callSignature != nil, SignatureKindCall, SignatureKindConstruct), false /*allowMembers*/)
				if contextualSignature != nil && contextualSignature.typeParameters == nil {
					if checkMode&CheckModeSkipGenericFunctions != 0 {
						c.skippedGenericFunction(node, checkMode)
						return c.anyFunctionType
					}
					context := c.getInferenceContext(node)
					// We have an expression that is an argument of a generic function for which we are performing
					// type argument inference. The expression is of a function type with a single generic call
					// signature and a contextual function type with a single non-generic call signature. Now check
					// if the outer function returns a function type with a single non-generic call signature and
					// if some of the outer function type parameters have no inferences so far. If so, we can
					// potentially add inferred type parameters to the outer function return type.
					returnType := context.signature && c.getReturnTypeOfSignature(context.signature)
					returnSignature := returnType && c.getSingleCallOrConstructSignature(returnType)
					if returnSignature != nil && returnSignature.typeParameters == nil && !core.Every(context.inferences, c.hasInferenceCandidates) {
						// Instantiate the signature with its own type parameters as type arguments, possibly
						// renaming the type parameters to ensure they have unique names.
						uniqueTypeParameters := c.getUniqueTypeParameters(context, signature.typeParameters)
						instantiatedSignature := c.getSignatureInstantiationWithoutFillingInTypeArguments(signature, uniqueTypeParameters)
						// Infer from the parameters of the instantiated signature to the parameters of the
						// contextual signature starting with an empty set of inference candidates.
						inferences := core.Map(context.inferences, func(info InferenceInfo) InferenceInfo {
							return c.createInferenceInfo(info.typeParameter)
						})
						c.applyToParameterTypes(instantiatedSignature, contextualSignature, func(source *Type, target *Type) {
							c.inferTypes(inferences, source, target, 0 /*priority*/, true /*contravariant*/)
						})
						if core.Some(inferences, c.hasInferenceCandidates) {
							// We have inference candidates, indicating that one or more type parameters are referenced
							// in the parameter types of the contextual signature. Now also infer from the return type.
							c.applyToReturnTypes(instantiatedSignature, contextualSignature, func(source *Type, target *Type) {
								c.inferTypes(inferences, source, target)
							})
							// If the type parameters for which we produced candidates do not have any inferences yet,
							// we adopt the new inference candidates and add the type parameters of the expression type
							// to the set of inferred type parameters for the outer function return type.
							if !c.hasOverlappingInferences(context.inferences, inferences) {
								c.mergeInferences(context.inferences, inferences)
								context.inferredTypeParameters = core.Concatenate(context.inferredTypeParameters, uniqueTypeParameters)
								return c.getOrCreateTypeFromSignature(instantiatedSignature)
							}
						}
					}
					// TODO: The signature may reference any outer inference contexts, but we map pop off and then apply new inference contexts, and thus get different inferred types.
					// That this is cached on the *first* such attempt is not currently an issue, since expression types *also* get cached on the first pass. If we ever properly speculate, though,
					// the cached "isolatedSignatureType" signature field absolutely needs to be included in the list of speculative caches.
					return c.getOrCreateTypeFromSignature(c.instantiateSignatureInContextOf(signature, contextualSignature, context), flatMap(c.inferenceContexts, func(c *InferenceContext) *[]TypeParameter {
						return c && core.Map(c.inferences, func(i InferenceInfo) TypeParameter {
							return i.typeParameter
						})
					}).slice())
				}
			}
		}
	}
	return t
}

func (c *Checker) skippedGenericFunction(node *ast.Node, checkMode CheckMode) {
	if checkMode&CheckModeInferential != 0 {
		// We have skipped a generic function during inferential typing. Obtain the inference context and
		// indicate this has occurred such that we know a second pass of inference is be needed.
		context := c.getInferenceContext(node)
		context.flags |= InferenceFlagsSkippedGenericFunction
	}
}

func (c *Checker) hasInferenceCandidates(info InferenceInfo) bool {
	return info.candidates != nil || info.contraCandidates != nil
}

func (c *Checker) hasInferenceCandidatesOrDefault(info InferenceInfo) bool {
	return info.candidates != nil || info.contraCandidates != nil || c.hasTypeParameterDefault(info.typeParameter)
}

func (c *Checker) hasOverlappingInferences(a []InferenceInfo, b []InferenceInfo) bool {
	for i := 0; i < a.length; i++ {
		if c.hasInferenceCandidates(a[i]) && c.hasInferenceCandidates(b[i]) {
			return true
		}
	}
	return false
}

func (c *Checker) mergeInferences(target []InferenceInfo, source []InferenceInfo) {
	for i := 0; i < target.length; i++ {
		if !c.hasInferenceCandidates(target[i]) && c.hasInferenceCandidates(source[i]) {
			target[i] = source[i]
		}
	}
}

func (c *Checker) getUniqueTypeParameters(context InferenceContext, typeParameters []TypeParameter) []TypeParameter {
	var result []TypeParameter = []never{}
	var oldTypeParameters *[]TypeParameter
	var newTypeParameters *[]TypeParameter
	for _, tp := range typeParameters {
		name := tp.symbol.EscapedName
		if c.hasTypeParameterByName(context.inferredTypeParameters, name) || c.hasTypeParameterByName(result, name) {
			newName := c.getUniqueTypeParameterName(core.Concatenate(context.inferredTypeParameters, result), name)
			symbol := c.createSymbol(ast.SymbolFlagsTypeParameter, newName)
			newTypeParameter := c.createTypeParameter(symbol)
			newTypeParameter.target = tp
			oldTypeParameters = append(oldTypeParameters, tp)
			newTypeParameters = append(newTypeParameters, newTypeParameter)
			result.push(newTypeParameter)
		} else {
			result.push(tp)
		}
	}
	if newTypeParameters != nil {
		mapper := c.createTypeMapper(oldTypeParameters, newTypeParameters)
		for _, tp := range newTypeParameters {
			tp.mapper = mapper
		}
	}
	return result
}

func (c *Checker) hasTypeParameterByName(typeParameters *[]TypeParameter, name string) bool {
	return core.Some(typeParameters, func(tp TypeParameter) bool {
		return tp.symbol.EscapedName == name
	})
}

func (c *Checker) getUniqueTypeParameterName(typeParameters []TypeParameter, baseName string) string {
	len := (baseName /* as string */).length
	for len > 1 && (baseName /* as string */).charCodeAt(len-1) >= CharacterCodes_0 && (baseName /* as string */).charCodeAt(len-1) <= CharacterCodes_9 {
		len--
	}
	s := (baseName /* as string */).slice(0, len)
	for index := 1; true; index++ {
		augmentedName := s + index.(string)
		if !c.hasTypeParameterByName(typeParameters, augmentedName) {
			return augmentedName
		}
	}
}

func (c *Checker) getReturnTypeOfSingleNonGenericCallSignature(funcType *Type) *Type {
	signature := c.getSingleCallSignature(funcType)
	if signature != nil && signature.typeParameters == nil {
		return c.getReturnTypeOfSignature(signature)
	}
}

func (c *Checker) getReturnTypeOfSingleNonGenericSignatureOfCallChain(expr CallChain) *Type {
	funcType := c.checkExpression(expr.Expression)
	nonOptionalType := c.getOptionalExpressionType(funcType, expr.Expression)
	returnType := c.getReturnTypeOfSingleNonGenericCallSignature(funcType)
	return returnType && c.propagateOptionalTypeMarker(returnType, expr, nonOptionalType != funcType)
}

/**
 * Returns the type of an expression. Unlike checkExpression, this function is simply concerned
 * with computing the type and may not fully check all contained sub-expressions for errors.
 */

func (c *Checker) getTypeOfExpression(node Expression) *Type {
	// Don't bother caching types that require no flow analysis and are quick to compute.
	quickType := c.getQuickTypeOfExpression(node)
	if quickType != nil {
		return quickType
	}
	// If a type has been cached for the node, return it.
	if node.Flags&ast.NodeFlagsTypeCached != 0 && c.flowTypeCache != nil {
		cachedType := c.flowTypeCache[getNodeId(node)]
		if cachedType {
			return cachedType
		}
	}
	startInvocationCount := c.flowInvocationCount
	t := c.checkExpression(node, CheckModeTypeOnly)
	// If control flow analysis was required to determine the type, it is worth caching.
	if c.flowInvocationCount != startInvocationCount {
		cache := c.flowTypeCache || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: flowTypeCache = [] */ TODO)
		cache[getNodeId(node)] = t
		setNodeFlags(node, node.Flags|ast.NodeFlagsTypeCached)
	}
	return t
}

func (c *Checker) getQuickTypeOfExpression(node Expression) *Type {
	expr := skipParentheses(node, true /*excludeJSDocTypeAssertions*/)
	if isJSDocTypeAssertion(expr) {
		t := getJSDocTypeAssertionType(expr)
		if !isConstTypeReference(t) {
			return c.getTypeFromTypeNode(t)
		}
	}
	expr = skipParentheses(node)
	if isAwaitExpression(expr) {
		t := c.getQuickTypeOfExpression(expr.Expression)
		if t {
			return c.getAwaitedType(t)
		} else {
			return nil
		}
	}
	// Optimize for the common case of a call to a function with a single non-generic call
	// signature where we can just fetch the return type without checking the arguments.
	if isCallExpression(expr) && expr.Expression.Kind != ast.KindSuperKeyword && !isRequireCall(expr, true /*requireStringLiteralLikeArgument*/) && !c.isSymbolOrSymbolForCall(expr) {
		if isCallChain(expr) {
			return c.getReturnTypeOfSingleNonGenericSignatureOfCallChain(expr)
		} else {
			return c.getReturnTypeOfSingleNonGenericCallSignature(c.checkNonNullExpression(expr.Expression))
		}
	} else if isAssertionExpression(expr) && !isConstTypeReference(expr.Type_) {
		return c.getTypeFromTypeNode(expr.AsTypeAssertion().Type_)
	} else if isLiteralExpression(node) || isBooleanLiteral(node) {
		return c.checkExpression(node)
	}
	return nil
}

/**
 * Returns the type of an expression. Unlike checkExpression, this function is simply concerned
 * with computing the type and may not fully check all contained sub-expressions for errors.
 * It is intended for uses where you know there is no contextual type,
 * and requesting the contextual type might cause a circularity or other bad behaviour.
 * It sets the contextual type of the node to any before calling getTypeOfExpression.
 */

func (c *Checker) getContextFreeTypeOfExpression(node Expression) *Type {
	links := c.getNodeLinks(node)
	if links.contextFreeType != nil {
		return links.contextFreeType
	}
	c.pushContextualType(node, c.anyType, false /*isCache*/)
	t := /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.contextFreeType = checkExpression(node, CheckMode.SkipContextSensitive) */ TODO
	c.popContextualType()
	return t
}

func (c *Checker) checkExpression(node Union[Expression, QualifiedName], checkMode CheckMode, forceTuple bool) *Type {
	tracing. /* ? */ push(tracing.Phase.Check, "checkExpression", &Args{
		kind: node.Kind,
		pos:  node.Pos,
		end:  node.End,
		path: (node.(TracingNode)).tracingPath,
	})
	saveCurrentNode := c.currentNode
	c.currentNode = node
	c.instantiationCount = 0
	uninstantiatedType := c.checkExpressionWorker(node, checkMode, forceTuple)
	t := c.instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, checkMode)
	if c.isConstEnumObjectType(t) {
		c.checkConstEnumAccess(node, t)
	}
	c.currentNode = saveCurrentNode
	tracing. /* ? */ pop()
	return t
}

func (c *Checker) checkConstEnumAccess(node Union[Expression, QualifiedName], t *Type) {
	// enum object type for const enums are only permitted in:
	// - 'left' in property access
	// - 'object' in indexed access
	// - target in rhs of import statement
	ok := (node.Parent.Kind == ast.KindPropertyAccessExpression && node.Parent.AsPropertyAccessExpression().Expression == node) || (node.Parent.Kind == ast.KindElementAccessExpression && node.Parent.AsElementAccessExpression().Expression == node) || ((node.Kind == ast.KindIdentifier || node.Kind == ast.KindQualifiedName) && c.isInRightSideOfImportOrExportAssignment(node.AsIdentifier()) || (node.Parent.Kind == ast.KindTypeQuery && node.Parent.AsTypeQueryNode().ExprName == node)) || (node.Parent.Kind == ast.KindExportSpecifier)
	// We allow reexporting const enums

	if !ok {
		c.error(node, Diagnostics.const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment_or_type_query)
	}

	// --verbatimModuleSyntax only gets checked here when the enum usage does not
	// resolve to an import, because imports of ambient const enums get checked
	// separately in `checkAliasSymbol`.
	if c.compilerOptions.isolatedModules || c.compilerOptions.verbatimModuleSyntax && ok && c.resolveName(node, getFirstIdentifier(node.AsEntityNameOrEntityNameExpression()), ast.SymbolFlagsAlias, nil, false, true) == nil {
		Debug.assert(t.symbol.Flags&ast.SymbolFlagsConstEnum != 0)
		constEnumDeclaration := t.symbol.ValueDeclaration.AsEnumDeclaration()
		redirect := host.getRedirectReferenceForResolutionFromSourceOfProject(getSourceFileOfNode(constEnumDeclaration).ResolvedPath)
		if constEnumDeclaration.Flags&ast.NodeFlagsAmbient != 0 && !isValidTypeOnlyAliasUseSite(node) && (redirect == nil || !shouldPreserveConstEnums(redirect.commandLine.options)) {
			c.error(node, Diagnostics.Cannot_access_ambient_const_enums_when_0_is_enabled, c.isolatedModulesLikeFlagName)
		}
	}
}

func (c *Checker) checkParenthesizedExpression(node ParenthesizedExpression, checkMode CheckMode) *Type {
	if hasJSDocNodes(node) {
		if isJSDocSatisfiesExpression(node) {
			return c.checkSatisfiesExpressionWorker(node.Expression, getJSDocSatisfiesExpressionType(node), checkMode)
		}
		if isJSDocTypeAssertion(node) {
			return c.checkAssertionWorker(node, checkMode)
		}
	}
	return c.checkExpression(node.Expression, checkMode)
}

func (c *Checker) checkExpressionWorker(node Union[Expression, QualifiedName], checkMode *CheckMode, forceTuple bool) *Type {
	kind := node.Kind
	if c.cancellationToken != nil {
		// Only bother checking on a few construct kinds.  We don't want to be excessively
		// hitting the cancellation token on every node we check.
		switch kind {
		case ast.KindClassExpression,
			ast.KindFunctionExpression,
			ast.KindArrowFunction:
			c.cancellationToken.throwIfCancellationRequested()
		}
	}
	switch kind {
	case ast.KindIdentifier:
		return c.checkIdentifier(node.AsIdentifier(), checkMode)
	case ast.KindPrivateIdentifier:
		return c.checkPrivateIdentifierExpression(node.AsPrivateIdentifier())
	case ast.KindThisKeyword:
		return c.checkThisExpression(node)
	case ast.KindSuperKeyword:
		return c.checkSuperExpression(node)
	case ast.KindNullKeyword:
		return c.nullWideningType
	case ast.KindNoSubstitutionTemplateLiteral,
		ast.KindStringLiteral:
		if c.hasSkipDirectInferenceFlag(node) {
			return c.blockedStringType
		} else {
			return c.getFreshTypeOfLiteralType(c.getStringLiteralType(node.AsStringLiteralLike().Text))
		}
	case ast.KindNumericLiteral:
		c.checkGrammarNumericLiteral(node.AsNumericLiteral())
		return c.getFreshTypeOfLiteralType(c.getNumberLiteralType(+node.AsNumericLiteral().Text))
	case ast.KindBigIntLiteral:
		c.checkGrammarBigIntLiteral(node.AsBigIntLiteral())
		return c.getFreshTypeOfLiteralType(c.getBigIntLiteralType(PseudoBigInt{
			negative:    false,
			base10Value: parsePseudoBigInt(node.AsBigIntLiteral().Text),
		}))
	case ast.KindTrueKeyword:
		return c.trueType
	case ast.KindFalseKeyword:
		return c.falseType
	case ast.KindTemplateExpression:
		return c.checkTemplateExpression(node.AsTemplateExpression())
	case ast.KindRegularExpressionLiteral:
		return c.checkRegularExpressionLiteral(node.AsRegularExpressionLiteral())
	case ast.KindArrayLiteralExpression:
		return c.checkArrayLiteral(node.AsArrayLiteralExpression(), checkMode, forceTuple)
	case ast.KindObjectLiteralExpression:
		return c.checkObjectLiteral(node.AsObjectLiteralExpression(), checkMode)
	case ast.KindPropertyAccessExpression:
		return c.checkPropertyAccessExpression(node.AsPropertyAccessExpression(), checkMode)
	case ast.KindQualifiedName:
		return c.checkQualifiedName(node.AsQualifiedName(), checkMode)
	case ast.KindElementAccessExpression:
		return c.checkIndexedAccess(node.AsElementAccessExpression(), checkMode)
	case ast.KindCallExpression:
		if node.AsCallExpression().Expression.Kind == ast.KindImportKeyword {
			return c.checkImportCallExpression(node.AsImportCall())
		}
		fallthrough
	case ast.KindNewExpression:
		return c.checkCallExpression(node.AsCallExpression(), checkMode)
	case ast.KindTaggedTemplateExpression:
		return c.checkTaggedTemplateExpression(node.AsTaggedTemplateExpression())
	case ast.KindParenthesizedExpression:
		return c.checkParenthesizedExpression(node.AsParenthesizedExpression(), checkMode)
	case ast.KindClassExpression:
		return c.checkClassExpression(node.AsClassExpression())
	case ast.KindFunctionExpression,
		ast.KindArrowFunction:
		return c.checkFunctionExpressionOrObjectLiteralMethod(node /* as FunctionExpression | ArrowFunction */, checkMode)
	case ast.KindTypeOfExpression:
		return c.checkTypeOfExpression(node.AsTypeOfExpression())
	case ast.KindTypeAssertionExpression,
		ast.KindAsExpression:
		return c.checkAssertion(node.AsAssertionExpression(), checkMode)
	case ast.KindNonNullExpression:
		return c.checkNonNullAssertion(node.AsNonNullExpression())
	case ast.KindExpressionWithTypeArguments:
		return c.checkExpressionWithTypeArguments(node.AsExpressionWithTypeArguments())
	case ast.KindSatisfiesExpression:
		return c.checkSatisfiesExpression(node.AsSatisfiesExpression())
	case ast.KindMetaProperty:
		return c.checkMetaProperty(node.AsMetaProperty())
	case ast.KindDeleteExpression:
		return c.checkDeleteExpression(node.AsDeleteExpression())
	case ast.KindVoidExpression:
		return c.checkVoidExpression(node.AsVoidExpression())
	case ast.KindAwaitExpression:
		return c.checkAwaitExpression(node.AsAwaitExpression())
	case ast.KindPrefixUnaryExpression:
		return c.checkPrefixUnaryExpression(node.AsPrefixUnaryExpression())
	case ast.KindPostfixUnaryExpression:
		return c.checkPostfixUnaryExpression(node.AsPostfixUnaryExpression())
	case ast.KindBinaryExpression:
		return c.checkBinaryExpression(node.AsBinaryExpression(), checkMode)
	case ast.KindConditionalExpression:
		return c.checkConditionalExpression(node.AsConditionalExpression(), checkMode)
	case ast.KindSpreadElement:
		return c.checkSpreadExpression(node.AsSpreadElement(), checkMode)
	case ast.KindOmittedExpression:
		return c.undefinedWideningType
	case ast.KindYieldExpression:
		return c.checkYieldExpression(node.AsYieldExpression())
	case ast.KindSyntheticExpression:
		return c.checkSyntheticExpression(node.AsSyntheticExpression())
	case ast.KindJsxExpression:
		return c.checkJsxExpression(node.AsJsxExpression(), checkMode)
	case ast.KindJsxElement:
		return c.checkJsxElement(node.AsJsxElement(), checkMode)
	case ast.KindJsxSelfClosingElement:
		return c.checkJsxSelfClosingElement(node.AsJsxSelfClosingElement(), checkMode)
	case ast.KindJsxFragment:
		return c.checkJsxFragment(node.AsJsxFragment())
	case ast.KindJsxAttributes:
		return c.checkJsxAttributes(node.AsJsxAttributes(), checkMode)
	case ast.KindJsxOpeningElement:
		Debug.fail("Shouldn't ever directly check a JsxOpeningElement")
	}
	return c.errorType
}

// DECLARATION AND STATEMENT TYPE CHECKING

func (c *Checker) checkTypeParameter(node TypeParameterDeclaration) {
	// Grammar Checking
	c.checkGrammarModifiers(node)
	if node.Expression != nil {
		c.grammarErrorOnFirstToken(node.Expression, Diagnostics.Type_expected)
	}

	c.checkSourceElement(node.Constraint)
	c.checkSourceElement(node.Default_)
	typeParameter := c.getDeclaredTypeOfTypeParameter(c.getSymbolOfDeclaration(node))
	// Resolve base constraint to reveal circularity errors
	c.getBaseConstraintOfType(typeParameter)
	if !c.hasNonCircularTypeParameterDefault(typeParameter) {
		c.error(node.Default_, Diagnostics.Type_parameter_0_has_a_circular_default, c.typeToString(typeParameter))
	}
	constraintType := c.getConstraintOfTypeParameter(typeParameter)
	defaultType := c.getDefaultFromTypeParameter(typeParameter)
	if constraintType != nil && defaultType != nil {
		c.checkTypeAssignableTo(defaultType, c.getTypeWithThisArgument(c.instantiateType(constraintType, c.makeUnaryTypeMapper(typeParameter, defaultType)), defaultType), node.Default_, Diagnostics.Type_0_does_not_satisfy_the_constraint_1)
	}
	c.checkNodeDeferred(node)
	c.addLazyDiagnostic(func() {
		return c.checkTypeNameIsReserved(node.Name, Diagnostics.Type_parameter_name_cannot_be_0)
	})
}

func (c *Checker) checkTypeParameterDeferred(node TypeParameterDeclaration) {
	if isInterfaceDeclaration(node.Parent) || isClassLike(node.Parent) || isTypeAliasDeclaration(node.Parent) {
		typeParameter := c.getDeclaredTypeOfTypeParameter(c.getSymbolOfDeclaration(node))
		modifiers := c.getTypeParameterModifiers(typeParameter) & (ast.ModifierFlagsIn | ast.ModifierFlagsOut)
		if modifiers != 0 {
			symbol := c.getSymbolOfDeclaration(node.Parent)
			if isTypeAliasDeclaration(node.Parent) && getObjectFlags(c.getDeclaredTypeOfSymbol(symbol))&(ObjectFlagsAnonymous|ObjectFlagsMapped) == 0 {
				c.error(node, Diagnostics.Variance_annotations_are_only_supported_in_type_aliases_for_object_function_constructor_and_mapped_types)
			} else if modifiers == ast.ModifierFlagsIn || modifiers == ast.ModifierFlagsOut {
				tracing. /* ? */ push(tracing.Phase.CheckTypes, "checkTypeParameterDeferred", &Args{
					parent: c.getTypeId(c.getDeclaredTypeOfSymbol(symbol)),
					id:     c.getTypeId(typeParameter),
				})
				source := c.createMarkerType(symbol, typeParameter, ifElse(modifiers == ast.ModifierFlagsOut, c.markerSubTypeForCheck, c.markerSuperTypeForCheck))
				target := c.createMarkerType(symbol, typeParameter, ifElse(modifiers == ast.ModifierFlagsOut, c.markerSuperTypeForCheck, c.markerSubTypeForCheck))
				saveVarianceTypeParameter := typeParameter
				c.varianceTypeParameter = typeParameter
				c.checkTypeAssignableTo(source, target, node, Diagnostics.Type_0_is_not_assignable_to_type_1_as_implied_by_variance_annotation)
				c.varianceTypeParameter = saveVarianceTypeParameter
				tracing. /* ? */ pop()
			}
		}
	}
}

func (c *Checker) checkParameter(node ParameterDeclaration) {
	// Grammar checking
	// It is a SyntaxError if the Identifier "eval" or the Identifier "arguments" occurs as the
	// Identifier in a PropertySetParameterList of a PropertyAssignment that is contained in strict code
	// or if its FunctionBody is strict code(11.1.5).
	c.checkGrammarModifiers(node)

	c.checkVariableLikeDeclaration(node)
	func_ := getContainingFunction(node)
	if hasSyntacticModifier(node, ast.ModifierFlagsParameterPropertyModifier) {
		if !(func_.Kind == ast.KindConstructor && nodeIsPresent(func_.Body)) {
			c.error(node, Diagnostics.A_parameter_property_is_only_allowed_in_a_constructor_implementation)
		}
		if func_.Kind == ast.KindConstructor && isIdentifier(node.Name) && node.Name.EscapedText == "constructor" {
			c.error(node.Name, Diagnostics.constructor_cannot_be_used_as_a_parameter_property_name)
		}
	}
	if node.Initializer == nil && isOptionalDeclaration(node) && isBindingPattern(node.Name) && func_.AsFunctionLikeDeclaration().Body != nil {
		c.error(node, Diagnostics.A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature)
	}
	if node.Name && isIdentifier(node.Name) && (node.Name.EscapedText == "this" || node.Name.EscapedText == "new") {
		if func_.Parameters.indexOf(node) != 0 {
			c.error(node, Diagnostics.A_0_parameter_must_be_the_first_parameter, node.Name.EscapedText /* as string */)
		}
		if func_.Kind == ast.KindConstructor || func_.Kind == ast.KindConstructSignature || func_.Kind == ast.KindConstructorType {
			c.error(node, Diagnostics.A_constructor_cannot_have_a_this_parameter)
		}
		if func_.Kind == ast.KindArrowFunction {
			c.error(node, Diagnostics.An_arrow_function_cannot_have_a_this_parameter)
		}
		if func_.Kind == ast.KindGetAccessor || func_.Kind == ast.KindSetAccessor {
			c.error(node, Diagnostics.get_and_set_accessors_cannot_declare_this_parameters)
		}
	}

	// Only check rest parameter type if it's not a binding pattern. Since binding patterns are
	// not allowed in a rest parameter, we already have an error from checkGrammarParameterList.
	if node.DotDotDotToken != nil && !isBindingPattern(node.Name) && !c.isTypeAssignableTo(c.getReducedType(c.getTypeOfSymbol(node.Symbol)), c.anyReadonlyArrayType) {
		c.error(node, Diagnostics.A_rest_parameter_must_be_of_an_array_type)
	}
}

func (c *Checker) checkTypePredicate(node TypePredicateNode) {
	parent := c.getTypePredicateParent(node)
	if parent == nil {
		// The parent must not be valid.
		c.error(node, Diagnostics.A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods)
		return
	}

	signature := c.getSignatureFromDeclaration(parent)
	typePredicate := c.getTypePredicateOfSignature(signature)
	if typePredicate == nil {
		return
	}

	c.checkSourceElement(node.Type_)

	TODO_IDENTIFIER := node
	if typePredicate.kind != TypePredicateKindThis && typePredicate.kind != TypePredicateKindAssertsThis {
		if typePredicate.parameterIndex >= 0 {
			if signatureHasRestParameter(signature) && typePredicate.parameterIndex == signature.parameters.length-1 {
				c.error(parameterName, Diagnostics.A_type_predicate_cannot_reference_a_rest_parameter)
			} else {
				if typePredicate.type_ != nil {
					leadingError := func() DiagnosticMessageChain {
						return chainDiagnosticMessages(nil, Diagnostics.A_type_predicate_s_type_must_be_assignable_to_its_parameter_s_type)
					}
					c.checkTypeAssignableTo(typePredicate.type_, c.getTypeOfSymbol(signature.parameters[typePredicate.parameterIndex]), node.Type_, nil /*headMessage*/, leadingError)
				}
			}
		} else if parameterName {
			hasReportedError := false
			for _, TODO_IDENTIFIER := range parent.Parameters {
				if isBindingPattern(name) && c.checkIfTypePredicateVariableIsDeclaredInBindingPattern(name, parameterName, typePredicate.parameterName) {
					hasReportedError = true
					break
				}
			}
			if !hasReportedError {
				c.error(node.ParameterName, Diagnostics.Cannot_find_parameter_0, typePredicate.parameterName)
			}
		}
	}
}

func (c *Checker) getTypePredicateParent(node *ast.Node) *SignatureDeclaration {
	switch node.Parent.Kind {
	case ast.KindArrowFunction,
		ast.KindCallSignature,
		ast.KindFunctionDeclaration,
		ast.KindFunctionExpression,
		ast.KindFunctionType,
		ast.KindMethodDeclaration,
		ast.KindMethodSignature:
		parent := node.Parent.AsSignatureDeclaration()
		if node == parent.Type_ {
			return parent
		}
	}
}

func (c *Checker) checkIfTypePredicateVariableIsDeclaredInBindingPattern(pattern BindingPattern, predicateVariableNode *ast.Node, predicateVariableName string) *true {
	for _, element := range pattern.Elements {
		if isOmittedExpression(element) {
			continue
		}

		name := element.Name
		if name.Kind == ast.KindIdentifier && name.EscapedText == predicateVariableName {
			c.error(predicateVariableNode, Diagnostics.A_type_predicate_cannot_reference_element_0_in_a_binding_pattern, predicateVariableName)
			return true
		} else if name.Kind == ast.KindArrayBindingPattern || name.Kind == ast.KindObjectBindingPattern {
			if c.checkIfTypePredicateVariableIsDeclaredInBindingPattern(name, predicateVariableNode, predicateVariableName) {
				return true
			}
		}
	}
}

func (c *Checker) checkSignatureDeclaration(node SignatureDeclaration) {
	// Grammar checking
	if node.Kind == ast.KindIndexSignature {
		c.checkGrammarIndexSignature(node)
	} else if node.Kind == ast.KindFunctionType || node.Kind == ast.KindFunctionDeclaration || node.Kind == ast.KindConstructorType || node.Kind == ast.KindCallSignature || node.Kind == ast.KindConstructor || node.Kind == ast.KindConstructSignature {
		c.checkGrammarFunctionLikeDeclaration(node.AsFunctionLikeDeclaration())
	}

	functionFlags := getFunctionFlags(node.AsFunctionLikeDeclaration())
	if functionFlags&FunctionFlagsInvalid == 0 {
		// Async generators prior to ES2018 require the __await and __asyncGenerator helpers
		if (functionFlags&FunctionFlagsAsyncGenerator) == FunctionFlagsAsyncGenerator && c.languageVersion < LanguageFeatureMinimumTarget.AsyncGenerators {
			c.checkExternalEmitHelpers(node, ExternalEmitHelpersAsyncGeneratorIncludes)
		}

		// Async functions prior to ES2017 require the __awaiter helper
		if (functionFlags&FunctionFlagsAsyncGenerator) == FunctionFlagsAsync && c.languageVersion < LanguageFeatureMinimumTarget.AsyncFunctions {
			c.checkExternalEmitHelpers(node, ExternalEmitHelpersAwaiter)
		}

		// Generator functions, Async functions, and Async Generator functions prior to
		// ES2015 require the __generator helper
		if (functionFlags&FunctionFlagsAsyncGenerator) != FunctionFlagsNormal && c.languageVersion < LanguageFeatureMinimumTarget.Generators {
			c.checkExternalEmitHelpers(node, ExternalEmitHelpersGenerator)
		}
	}

	c.checkTypeParameters(getEffectiveTypeParameterDeclarations(node))
	c.checkUnmatchedJSDocParameters(node)

	forEach(node.Parameters, c.checkParameter)

	// TODO(rbuckton): Should we start checking JSDoc types?
	if node.Type_ != nil {
		c.checkSourceElement(node.Type_)
	}

	c.addLazyDiagnostic(checkSignatureDeclarationDiagnostics)

	checkSignatureDeclarationDiagnostics := func() {
		c.checkCollisionWithArgumentsInGeneratedCode(node)

		returnTypeNode := getEffectiveReturnTypeNode(node)
		returnTypeErrorLocation := returnTypeNode

		if isInJSFile(node) {
			typeTag := getJSDocTypeTag(node)
			if typeTag != nil && typeTag.TypeExpression && isTypeReferenceNode(typeTag.TypeExpression.Type_) {
				signature := c.getSingleCallSignature(c.getTypeFromTypeNode(typeTag.TypeExpression))
				if signature != nil && signature.declaration != nil {
					returnTypeNode = getEffectiveReturnTypeNode(signature.declaration)
					returnTypeErrorLocation = typeTag.TypeExpression.Type_
				}
			}
		}

		if c.noImplicitAny && returnTypeNode == nil {
			switch node.Kind {
			case ast.KindConstructSignature:
				c.error(node, Diagnostics.Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type)
			case ast.KindCallSignature:
				c.error(node, Diagnostics.Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type)
			}
		}

		if returnTypeNode != nil && returnTypeErrorLocation != nil {
			functionFlags := getFunctionFlags(node.AsFunctionDeclaration())
			if (functionFlags & (FunctionFlagsInvalid | FunctionFlagsGenerator)) == FunctionFlagsGenerator {
				returnType := c.getTypeFromTypeNode(returnTypeNode)
				if returnType == c.voidType {
					c.error(returnTypeErrorLocation, Diagnostics.A_generator_cannot_have_a_void_type_annotation)
				} else {
					c.checkGeneratorInstantiationAssignabilityToReturnType(returnType, functionFlags, returnTypeErrorLocation)
				}
			} else if (functionFlags & FunctionFlagsAsyncGenerator) == FunctionFlagsAsync {
				c.checkAsyncFunctionReturnType(node.AsFunctionLikeDeclaration(), returnTypeNode, returnTypeErrorLocation)
			}
		}
		if node.Kind != ast.KindIndexSignature && node.Kind != ast.KindJSDocFunctionType {
			c.registerForUnusedIdentifiersCheck(node)
		}
	}

}

func (c *Checker) checkGeneratorInstantiationAssignabilityToReturnType(returnType *Type, functionFlags FunctionFlags, errorNode TypeNode) bool {
	// Naively, one could check that Generator<any, any, any> is assignable to the return type annotation.
	// However, that would not catch the error in the following case.
	//
	//    interface BadGenerator extends Iterable<number>, Iterator<string> { }
	//    function* g(): BadGenerator { } // Iterable and Iterator have different types!
	//
	generatorYieldType := c.getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKindYield, returnType, (functionFlags&FunctionFlagsAsync) != 0) || c.anyType
	generatorReturnType := c.getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKindReturn, returnType, (functionFlags&FunctionFlagsAsync) != 0) || generatorYieldType
	generatorNextType := c.getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKindNext, returnType, (functionFlags&FunctionFlagsAsync) != 0) || c.unknownType
	generatorInstantiation := c.createGeneratorType(generatorYieldType, generatorReturnType, generatorNextType, functionFlags&FunctionFlagsAsync != 0)

	return c.checkTypeAssignableTo(generatorInstantiation, returnType, errorNode)
}

func (c *Checker) checkClassForDuplicateDeclarations(node ClassLikeDeclaration) {
	instanceNames := NewMap[string, DeclarationMeaning]()
	staticNames := NewMap[string, DeclarationMeaning]()
	// instance and static private identifiers share the same scope
	privateIdentifiers := NewMap[string, DeclarationMeaning]()
	for _, member := range node.Members {
		if member.Kind == ast.KindConstructor {
			for _, param := range member.AsConstructorDeclaration().Parameters {
				if isParameterPropertyDeclaration(param, member) && !isBindingPattern(param.Name) {
					addName(instanceNames, param.Name, param.Name.EscapedText, DeclarationMeaningGetOrSetAccessor)
				}
			}
		} else {
			isStaticMember := isStatic(member)
			name := member.Name
			if name == nil {
				continue
			}
			isPrivate := isPrivateIdentifier(name)
			var privateStaticFlags /* TODO(TS-TO-GO) inferred type 0 | DeclarationMeaning.PrivateStatic */ any
			if isPrivate && isStaticMember {
				privateStaticFlags = DeclarationMeaningPrivateStatic
			} else {
				privateStaticFlags = 0
			}
			var names Map[string, DeclarationMeaning]
			switch {
			case isPrivate:
				names = privateIdentifiers
			case isStaticMember:
				names = staticNames
			default:
				names = instanceNames
			}

			memberName := name && c.getEffectivePropertyNameForPropertyNameNode(name)
			if memberName {
				switch member.Kind {
				case ast.KindGetAccessor:
					addName(names, name, memberName, DeclarationMeaningGetAccessor|privateStaticFlags)
				case ast.KindSetAccessor:
					addName(names, name, memberName, DeclarationMeaningSetAccessor|privateStaticFlags)
				case ast.KindPropertyDeclaration:
					addName(names, name, memberName, DeclarationMeaningGetOrSetAccessor|privateStaticFlags)
				case ast.KindMethodDeclaration:
					addName(names, name, memberName, DeclarationMeaningMethod|privateStaticFlags)
				}
			}
		}
	}

	addName := func(names Map[string, DeclarationMeaning], location *ast.Node, name string, meaning DeclarationMeaning) {
		prev := names.get(name)
		if prev {
			// For private identifiers, do not allow mixing of static and instance members with the same name
			if (prev & DeclarationMeaningPrivateStatic) != (meaning & DeclarationMeaningPrivateStatic) {
				c.error(location, Diagnostics.Duplicate_identifier_0_Static_and_instance_elements_cannot_share_the_same_private_name, getTextOfNode(location))
			} else {
				prevIsMethod := prev&DeclarationMeaningMethod != 0
				isMethod := meaning&DeclarationMeaningMethod != 0
				if prevIsMethod || isMethod {
					if prevIsMethod != isMethod {
						c.error(location, Diagnostics.Duplicate_identifier_0, getTextOfNode(location))
					}
					// If this is a method/method duplication is might be an overload, so this will be handled when overloads are considered
				} else if prev&meaning & ^DeclarationMeaningPrivateStatic != 0 {
					c.error(location, Diagnostics.Duplicate_identifier_0, getTextOfNode(location))
				} else {
					names.set(name, prev|meaning)
				}
			}
		} else {
			names.set(name, meaning)
		}
	}

}

/**
 * Static members being set on a constructor function may conflict with built-in properties
 * of Function. Esp. in ECMAScript 5 there are non-configurable and non-writable
 * built-in properties. This check issues a transpile error when a class has a static
 * member with the same name as a non-writable built-in property.
 *
 * @see http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.3
 * @see http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.5
 * @see http://www.ecma-international.org/ecma-262/6.0/#sec-properties-of-the-function-constructor
 * @see http://www.ecma-international.org/ecma-262/6.0/#sec-function-instances
 */

func (c *Checker) checkClassForStaticPropertyNameConflicts(node ClassLikeDeclaration) {
	for _, member := range node.Members {
		memberNameNode := member.Name
		isStaticMember := isStatic(member)
		if isStaticMember && memberNameNode != nil {
			memberName := c.getEffectivePropertyNameForPropertyNameNode(memberNameNode)
			switch memberName {
			case "name",
				"length",
				"caller",
				"arguments":
				if c.useDefineForClassFields {
					break
				}
				fallthrough
			case "prototype":
				message := Diagnostics.Static_property_0_conflicts_with_built_in_property_Function_0_of_constructor_function_1
				className := c.getNameOfSymbolAsWritten(c.getSymbolOfDeclaration(node))
				c.error(memberNameNode, message, memberName, className)
			}
		}
	}
}

func (c *Checker) checkObjectTypeForDuplicateDeclarations(node Union[TypeLiteralNode, InterfaceDeclaration]) {
	names := NewMap[string, bool]()
	for _, member := range node.Members {
		if member.Kind == ast.KindPropertySignature {
			var memberName string
			name := member.Name
			switch name.Kind {
			case ast.KindStringLiteral,
				ast.KindNumericLiteral:
				memberName = name.Text
			case ast.KindIdentifier:
				memberName = idText(name)
			default:
				continue
			}

			if names.get(memberName) {
				c.error(getNameOfDeclaration(member.Symbol.ValueDeclaration), Diagnostics.Duplicate_identifier_0, memberName)
				c.error(member.Name, Diagnostics.Duplicate_identifier_0, memberName)
			} else {
				names.set(memberName, true)
			}
		}
	}
}

func (c *Checker) checkTypeForDuplicateIndexSignatures(node Union[ClassLikeDeclaration, InterfaceDeclaration, TypeLiteralNode]) {
	if node.Kind == ast.KindInterfaceDeclaration {
		nodeSymbol := c.getSymbolOfDeclaration(node)
		// in case of merging interface declaration it is possible that we'll enter this check procedure several times for every declaration
		// to prevent this run check only for the first declaration of a given kind
		if nodeSymbol.Declarations != nil && nodeSymbol.Declarations.length > 0 && nodeSymbol.Declarations[0] != node {
			return
		}
	}

	// TypeScript 1.0 spec (April 2014)
	// 3.7.4: An object type can contain at most one string index signature and one numeric index signature.
	// 8.5: A class declaration can have at most one string index member declaration and one numeric index member declaration
	indexSymbol := c.getIndexSymbol(c.getSymbolOfDeclaration(node))
	if indexSymbol. /* ? */ declarations != nil {
		indexSignatureMap := NewMap[TypeId /* TODO(TS-TO-GO) TypeNode TypeLiteral: { type: Type; declarations: IndexSignatureDeclaration[]; } */, any]()
		for _, declaration := range indexSymbol.Declarations {
			if isIndexSignatureDeclaration(declaration) {
				if declaration.Parameters.length == 1 && declaration.Parameters[0].Type_ != nil {
					c.forEachType(c.getTypeFromTypeNode(declaration.Parameters[0].Type_), func(t *Type) {
						entry := indexSignatureMap.get(c.getTypeId(t))
						if entry != nil {
							entry.declarations.push(declaration)
						} else {
							indexSignatureMap.set(c.getTypeId(t), map[any]any{ /* TODO(TS-TO-GO): was object literal */
								"t":            t,
								"declarations": []IndexSignatureDeclaration{declaration},
							})
						}
					})
				}
			}
			// Do nothing for late-bound index signatures: allow these to duplicate one another and explicit indexes
		}
		indexSignatureMap.forEach(func(entry /* TODO(TS-TO-GO) inferred type { type: Type; declarations: IndexSignatureDeclaration[]; } */ any) {
			if entry.declarations.length > 1 {
				for _, declaration := range entry.declarations {
					c.error(declaration, Diagnostics.Duplicate_index_signature_for_type_0, c.typeToString(entry.type_))
				}
			}
		})
	}
}

func (c *Checker) checkPropertyDeclaration(node Union[PropertyDeclaration, PropertySignature]) {
	// Grammar checking
	if !c.checkGrammarModifiers(node) && !c.checkGrammarProperty(node) {
		c.checkGrammarComputedPropertyName(node.Name)
	}
	c.checkVariableLikeDeclaration(node)

	c.setNodeLinksForPrivateIdentifierScope(node)

	// property signatures already report "initializer not allowed in ambient context" elsewhere
	if hasSyntacticModifier(node, ast.ModifierFlagsAbstract) && node.Kind == ast.KindPropertyDeclaration && node.Initializer != nil {
		c.error(node, Diagnostics.Property_0_cannot_have_an_initializer_because_it_is_marked_abstract, declarationNameToString(node.Name))
	}
}

func (c *Checker) checkPropertySignature(node PropertySignature) {
	if isPrivateIdentifier(node.Name) {
		c.error(node, Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies)
	}
	return c.checkPropertyDeclaration(node)
}

func (c *Checker) checkMethodDeclaration(node Union[MethodDeclaration, MethodSignature]) {
	// Grammar checking
	if !c.checkGrammarMethod(node) {
		c.checkGrammarComputedPropertyName(node.Name)
	}

	if isMethodDeclaration(node) && node.AsteriskToken != nil && isIdentifier(node.Name) && idText(node.Name) == "constructor" {
		c.error(node.Name, Diagnostics.Class_constructor_may_not_be_a_generator)
	}

	// Grammar checking for modifiers is done inside the function checkGrammarFunctionLikeDeclaration
	c.checkFunctionOrMethodDeclaration(node)

	// method signatures already report "implementation not allowed in ambient context" elsewhere
	if hasSyntacticModifier(node, ast.ModifierFlagsAbstract) && node.Kind == ast.KindMethodDeclaration && node.Body != nil {
		c.error(node, Diagnostics.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract, declarationNameToString(node.Name))
	}

	// Private named methods are only allowed in class declarations
	if isPrivateIdentifier(node.Name) && getContainingClass(node) == nil {
		c.error(node, Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies)
	}

	c.setNodeLinksForPrivateIdentifierScope(node)
}

func (c *Checker) setNodeLinksForPrivateIdentifierScope(node Union[PropertyDeclaration, PropertySignature, MethodDeclaration, MethodSignature, AccessorDeclaration]) {
	if isPrivateIdentifier(node.Name) {
		if c.languageVersion < LanguageFeatureMinimumTarget.PrivateNamesAndClassStaticBlocks || c.languageVersion < LanguageFeatureMinimumTarget.ClassAndClassElementDecorators || !c.useDefineForClassFields {
			for lexicalScope := getEnclosingBlockScopeContainer(node); lexicalScope; lexicalScope = getEnclosingBlockScopeContainer(lexicalScope) {
				c.getNodeLinks(lexicalScope).flags |= NodeCheckFlagsContainsClassWithPrivateIdentifiers
			}

			// If this is a private element in a class expression inside the body of a loop,
			// then we must use a block-scoped binding to store the additional variables required
			// to transform private elements.
			if isClassExpression(node.Parent) {
				enclosingIterationStatement := c.getEnclosingIterationStatement(node.Parent)
				if enclosingIterationStatement != nil {
					c.getNodeLinks(node.Name).flags |= NodeCheckFlagsBlockScopedBindingInLoop
					c.getNodeLinks(enclosingIterationStatement).flags |= NodeCheckFlagsLoopWithCapturedBlockScopedBinding
				}
			}
		}
	}
}

func (c *Checker) checkClassStaticBlockDeclaration(node ClassStaticBlockDeclaration) {
	c.checkGrammarModifiers(node)

	forEachChild(node, c.checkSourceElement)
}

func (c *Checker) checkConstructorDeclaration(node ConstructorDeclaration) {
	// Grammar check on signature of constructor and modifier of the constructor is done in checkSignatureDeclaration function.
	c.checkSignatureDeclaration(node)
	// Grammar check for checking only related to constructorDeclaration
	if !c.checkGrammarConstructorTypeParameters(node) {
		c.checkGrammarConstructorTypeAnnotation(node)
	}

	c.checkSourceElement(node.Body)

	symbol := c.getSymbolOfDeclaration(node)
	firstDeclaration := getDeclarationOfKind(symbol, node.Kind)

	// Only type check the symbol once
	if node == firstDeclaration {
		c.checkFunctionOrConstructorSymbol(symbol)
	}

	// exit early in the case of signature - super checks are not relevant to them
	if nodeIsMissing(node.Body) {
		return
	}

	c.addLazyDiagnostic(checkConstructorDeclarationDiagnostics)

	return

	isInstancePropertyWithInitializerOrPrivateIdentifierProperty := func(n *ast.Node) bool {
		if isPrivateIdentifierClassElementDeclaration(n) {
			return true
		}
		return n.Kind == ast.KindPropertyDeclaration && !isStatic(n) && n.AsPropertyDeclaration().Initializer != nil
	}

	checkConstructorDeclarationDiagnostics := func() {
		// TS 1.0 spec (April 2014): 8.3.2
		// Constructors of classes with no extends clause may not contain super calls, whereas
		// constructors of derived classes must contain at least one super call somewhere in their function body.
		containingClassDecl := node.Parent
		if getClassExtendsHeritageElement(containingClassDecl) != nil {
			c.captureLexicalThis(node.Parent, containingClassDecl)
			classExtendsNull := c.classDeclarationExtendsNull(containingClassDecl)
			superCall := c.findFirstSuperCall(node.Body)
			if superCall != nil {
				if classExtendsNull {
					c.error(superCall, Diagnostics.A_constructor_cannot_contain_a_super_call_when_its_class_extends_null)
				}

				// A super call must be root-level in a constructor if both of the following are true:
				// - The containing class is a derived class.
				// - The constructor declares parameter properties
				//   or the containing class declares instance member variables with initializers.

				superCallShouldBeRootLevel := !c.emitStandardClassFields && (core.Some(node.Parent.Members, isInstancePropertyWithInitializerOrPrivateIdentifierProperty) || core.Some(node.Parameters, func(p ParameterDeclaration) bool {
					return hasSyntacticModifier(p, ast.ModifierFlagsParameterPropertyModifier)
				}))

				if superCallShouldBeRootLevel {
					// Until we have better flow analysis, it is an error to place the super call within any kind of block or conditional
					// See GH #8277
					if !c.superCallIsRootLevelInConstructor(superCall, node.Body) {
						c.error(superCall, Diagnostics.A_super_call_must_be_a_root_level_statement_within_a_constructor_of_a_derived_class_that_contains_initialized_properties_parameter_properties_or_private_identifiers)
					} else {
						var superCallStatement *ExpressionStatement

						for _, statement := range node.Body.Statements {
							if isExpressionStatement(statement) && isSuperCall(skipOuterExpressions(statement.Expression)) {
								superCallStatement = statement
								break
							}
							if c.nodeImmediatelyReferencesSuperOrThis(statement) {
								break
							}
						}

						// Until we have better flow analysis, it is an error to place the super call within any kind of block or conditional
						// See GH #8277
						if superCallStatement == nil {
							c.error(node, Diagnostics.A_super_call_must_be_the_first_statement_in_the_constructor_to_refer_to_super_or_this_when_a_derived_class_contains_initialized_properties_parameter_properties_or_private_identifiers)
						}
					}
				}
			} else if !classExtendsNull {
				c.error(node, Diagnostics.Constructors_for_derived_classes_must_contain_a_super_call)
			}
		}
	}

}

func (c *Checker) superCallIsRootLevelInConstructor(superCall *ast.Node, body Block) bool {
	superCallParent := walkUpParenthesizedExpressions(superCall.Parent)
	return isExpressionStatement(superCallParent) && superCallParent.Parent == body
}

func (c *Checker) nodeImmediatelyReferencesSuperOrThis(node *ast.Node) bool {
	if node.Kind == ast.KindSuperKeyword || node.Kind == ast.KindThisKeyword {
		return true
	}

	if isThisContainerOrFunctionBlock(node) {
		return false
	}

	return forEachChild(node, c.nodeImmediatelyReferencesSuperOrThis)
}

func (c *Checker) checkAccessorDeclaration(node AccessorDeclaration) {
	if isIdentifier(node.Name) && idText(node.Name) == "constructor" && isClassLike(node.Parent) {
		c.error(node.Name, Diagnostics.Class_constructor_may_not_be_an_accessor)
	}
	c.addLazyDiagnostic(checkAccessorDeclarationDiagnostics)
	c.checkSourceElement(node.Body)
	c.setNodeLinksForPrivateIdentifierScope(node)

	checkAccessorDeclarationDiagnostics := func() {
		// Grammar checking accessors
		if !c.checkGrammarFunctionLikeDeclaration(node) && !c.checkGrammarAccessor(node) {
			c.checkGrammarComputedPropertyName(node.Name)
		}

		c.checkDecorators(node)
		c.checkSignatureDeclaration(node)
		if node.Kind == ast.KindGetAccessor {
			if node.Flags&ast.NodeFlagsAmbient == 0 && nodeIsPresent(node.Body) && (node.Flags&ast.NodeFlagsHasImplicitReturn != 0) {
				if node.Flags&ast.NodeFlagsHasExplicitReturn == 0 {
					c.error(node.Name, Diagnostics.A_get_accessor_must_return_a_value)
				}
			}
		}
		// Do not use hasDynamicName here, because that returns false for well known symbols.
		// We want to perform checkComputedPropertyName for all computed properties, including
		// well known symbols.
		if node.Name.Kind == ast.KindComputedPropertyName {
			c.checkComputedPropertyName(node.Name)
		}

		if c.hasBindableName(node) {
			// TypeScript 1.0 spec (April 2014): 8.4.3
			// Accessors for the same member name must specify the same accessibility.
			symbol := c.getSymbolOfDeclaration(node)
			getter := getDeclarationOfKind(symbol, ast.KindGetAccessor)
			setter := getDeclarationOfKind(symbol, ast.KindSetAccessor)
			if getter != nil && setter != nil && c.getNodeCheckFlags(getter)&NodeCheckFlagsTypeChecked == 0 {
				c.getNodeLinks(getter).flags |= NodeCheckFlagsTypeChecked
				getterFlags := getEffectiveModifierFlags(getter)
				setterFlags := getEffectiveModifierFlags(setter)
				if (getterFlags & ast.ModifierFlagsAbstract) != (setterFlags & ast.ModifierFlagsAbstract) {
					c.error(getter.Name, Diagnostics.Accessors_must_both_be_abstract_or_non_abstract)
					c.error(setter.Name, Diagnostics.Accessors_must_both_be_abstract_or_non_abstract)
				}
				if ((getterFlags&ast.ModifierFlagsProtected != 0) && setterFlags&(ast.ModifierFlagsProtected|ast.ModifierFlagsPrivate) == 0) || ((getterFlags&ast.ModifierFlagsPrivate != 0) && setterFlags&ast.ModifierFlagsPrivate == 0) {
					c.error(getter.Name, Diagnostics.A_get_accessor_must_be_at_least_as_accessible_as_the_setter)
					c.error(setter.Name, Diagnostics.A_get_accessor_must_be_at_least_as_accessible_as_the_setter)
				}
			}
		}
		returnType := c.getTypeOfAccessors(c.getSymbolOfDeclaration(node))
		if node.Kind == ast.KindGetAccessor {
			c.checkAllCodePathsInNonVoidFunctionReturnOrThrow(node, returnType)
		}
	}

}

func (c *Checker) checkMissingDeclaration(node *ast.Node) {
	c.checkDecorators(node)
}

func (c *Checker) getEffectiveTypeArgumentAtIndex(node Union[TypeReferenceNode, ExpressionWithTypeArguments], typeParameters []TypeParameter, index number) *Type {
	if node.TypeArguments != nil && index < node.TypeArguments.length {
		return c.getTypeFromTypeNode(node.TypeArguments[index])
	}
	return c.getEffectiveTypeArguments(node, typeParameters)[index]
}

func (c *Checker) getEffectiveTypeArguments(node Union[TypeReferenceNode, ExpressionWithTypeArguments, NodeWithTypeArguments], typeParameters []TypeParameter) []*Type {
	return c.fillMissingTypeArguments(core.Map(node.TypeArguments, c.getTypeFromTypeNode), typeParameters, c.getMinTypeArgumentCount(typeParameters), isInJSFile(node))
}

func (c *Checker) checkTypeArgumentConstraints(node Union[TypeReferenceNode, ExpressionWithTypeArguments, NodeWithTypeArguments], typeParameters []TypeParameter) bool {
	var typeArguments *[]*Type
	var mapper *TypeMapper
	result := true
	for i := 0; i < typeParameters.length; i++ {
		constraint := c.getConstraintOfTypeParameter(typeParameters[i])
		if constraint != nil {
			if typeArguments == nil {
				typeArguments = c.getEffectiveTypeArguments(node, typeParameters)
				mapper = c.createTypeMapper(typeParameters, typeArguments)
			}
			result = result && c.checkTypeAssignableTo(typeArguments[i], c.instantiateType(constraint, mapper), node.TypeArguments[i], Diagnostics.Type_0_does_not_satisfy_the_constraint_1)
		}
	}
	return result
}

func (c *Checker) getTypeParametersForTypeAndSymbol(t *Type, symbol *ast.Symbol) *[]TypeParameter {
	if !c.isErrorType(t) {
		return symbol.Flags&ast.SymbolFlagsTypeAlias && c.getSymbolLinks(symbol).typeParameters || (ifElse(getObjectFlags(t)&ObjectFlagsReference != 0, t.AsTypeReference().target.localTypeParameters, nil))
	}
	return nil
}

func (c *Checker) getTypeParametersForTypeReferenceOrImport(node Union[TypeReferenceNode, ExpressionWithTypeArguments, ImportTypeNode]) *[]TypeParameter {
	t := c.getTypeFromTypeNode(node)
	if !c.isErrorType(t) {
		symbol := c.getNodeLinks(node).resolvedSymbol
		if symbol != nil {
			return c.getTypeParametersForTypeAndSymbol(t, symbol)
		}
	}
	return nil
}

func (c *Checker) checkTypeReferenceNode(node Union[TypeReferenceNode, ExpressionWithTypeArguments]) {
	c.checkGrammarTypeArguments(node, node.TypeArguments)
	if node.Kind == ast.KindTypeReference && !isInJSFile(node) && !isInJSDoc(node) && node.TypeArguments != nil && node.TypeName.End != node.TypeArguments.pos {
		// If there was a token between the type name and the type arguments, check if it was a DotToken
		sourceFile := getSourceFileOfNode(node)
		if scanTokenAtPosition(sourceFile, node.TypeName.End) == ast.KindDotToken {
			c.grammarErrorAtPos(node, skipTrivia(sourceFile.Text, node.TypeName.End), 1, Diagnostics.JSDoc_types_can_only_be_used_inside_documentation_comments)
		}
	}
	forEach(node.TypeArguments, c.checkSourceElement)
	c.checkTypeReferenceOrImport(node)
}

func (c *Checker) checkTypeReferenceOrImport(node Union[TypeReferenceNode, ExpressionWithTypeArguments, ImportTypeNode]) {
	t := c.getTypeFromTypeNode(node)
	if !c.isErrorType(t) {
		if node.TypeArguments != nil {
			c.addLazyDiagnostic(func() {
				typeParameters := c.getTypeParametersForTypeReferenceOrImport(node)
				if typeParameters != nil {
					c.checkTypeArgumentConstraints(node, typeParameters)
				}
			})
		}
		symbol := c.getNodeLinks(node).resolvedSymbol
		if symbol != nil {
			if core.Some(symbol.Declarations, func(d Declaration) bool {
				return isTypeDeclaration(d) && d.Flags&ast.NodeFlagsDeprecated != 0
			}) {
				c.addDeprecatedSuggestion(c.getDeprecatedSuggestionNode(node), symbol.Declarations, symbol.EscapedName /* as string */)
			}
		}
	}
}

func (c *Checker) getTypeArgumentConstraint(node TypeNode) *Type {
	typeReferenceNode := tryCast(node.Parent, isTypeReferenceType)
	if typeReferenceNode == nil {
		return nil
	}
	typeParameters := c.getTypeParametersForTypeReferenceOrImport(typeReferenceNode)
	if typeParameters == nil {
		return nil
	}
	constraint := c.getConstraintOfTypeParameter(typeParameters[typeReferenceNode.TypeArguments.indexOf(node)])
	return constraint && c.instantiateType(constraint, c.createTypeMapper(typeParameters, c.getEffectiveTypeArguments(typeReferenceNode, typeParameters)))
}

func (c *Checker) checkTypeQuery(node TypeQueryNode) {
	c.getTypeFromTypeQueryNode(node)
}

func (c *Checker) checkTypeLiteral(node TypeLiteralNode) {
	forEach(node.Members, c.checkSourceElement)
	c.addLazyDiagnostic(checkTypeLiteralDiagnostics)

	checkTypeLiteralDiagnostics := func() {
		t := c.getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node)
		c.checkIndexConstraints(t, t.symbol)
		c.checkTypeForDuplicateIndexSignatures(node)
		c.checkObjectTypeForDuplicateDeclarations(node)
	}

}

func (c *Checker) checkArrayType(node ArrayTypeNode) {
	c.checkSourceElement(node.ElementType)
}

func (c *Checker) checkTupleType(node TupleTypeNode) {
	seenOptionalElement := false
	seenRestElement := false
	for _, e := range node.Elements {
		flags := c.getTupleElementFlags(e)
		if flags&ElementFlagsVariadic != 0 {
			t := c.getTypeFromTypeNode((e /* as RestTypeNode | NamedTupleMember */).Type_)
			if !c.isArrayLikeType(t) {
				c.error(e, Diagnostics.A_rest_element_type_must_be_an_array_type)
				break
			}
			if c.isArrayType(t) || c.isTupleType(t) && t.target.combinedFlags&ElementFlagsRest != 0 {
				flags |= ElementFlagsRest
			}
		}
		if flags&ElementFlagsRest != 0 {
			if seenRestElement {
				c.grammarErrorOnNode(e, Diagnostics.A_rest_element_cannot_follow_another_rest_element)
				break
			}
			seenRestElement = true
		} else if flags&ElementFlagsOptional != 0 {
			if seenRestElement {
				c.grammarErrorOnNode(e, Diagnostics.An_optional_element_cannot_follow_a_rest_element)
				break
			}
			seenOptionalElement = true
		} else if flags&ElementFlagsRequired != 0 && seenOptionalElement {
			c.grammarErrorOnNode(e, Diagnostics.A_required_element_cannot_follow_an_optional_element)
			break
		}
	}
	forEach(node.Elements, c.checkSourceElement)
	c.getTypeFromTypeNode(node)
}

func (c *Checker) checkUnionOrIntersectionType(node UnionOrIntersectionTypeNode) {
	forEach(node.Types, c.checkSourceElement)
	c.getTypeFromTypeNode(node)
}

func (c *Checker) checkIndexedAccessIndexType(t *Type, accessNode Union[IndexedAccessTypeNode, ElementAccessExpression]) *Type {
	if t.flags&TypeFlagsIndexedAccess == 0 {
		return t
	}
	// Check if the index type is assignable to 'keyof T' for the object type.
	objectType := t.AsIndexedAccessType().objectType
	indexType := t.AsIndexedAccessType().indexType
	// skip index type deferral on remapping mapped types
	var objectIndexType *Type
	if c.isGenericMappedType(objectType) && c.getMappedTypeNameTypeKind(objectType) == MappedTypeNameTypeKindRemapping {
		objectIndexType = c.getIndexTypeForMappedType(objectType, IndexFlagsNone)
	} else {
		objectIndexType = c.getIndexType(objectType, IndexFlagsNone)
	}
	hasNumberIndexInfo := c.getIndexInfoOfType(objectType, c.numberType) != nil
	if c.everyType(indexType, func(t *Type) bool {
		return c.isTypeAssignableTo(t, objectIndexType) || hasNumberIndexInfo && c.isApplicableIndexType(t, c.numberType)
	}) {
		if accessNode.Kind == ast.KindElementAccessExpression && isAssignmentTarget(accessNode) && getObjectFlags(objectType)&ObjectFlagsMapped != 0 && c.getMappedTypeModifiers(objectType.AsMappedType())&MappedTypeModifiersIncludeReadonly != 0 {
			c.error(accessNode, Diagnostics.Index_signature_in_type_0_only_permits_reading, c.typeToString(objectType))
		}
		return t
	}
	if c.isGenericObjectType(objectType) {
		propertyName := c.getPropertyNameFromIndex(indexType, accessNode)
		if propertyName {
			propertySymbol := c.forEachType(c.getApparentType(objectType), func(t *Type) *ast.Symbol {
				return c.getPropertyOfType(t, propertyName)
			})
			if propertySymbol != nil && getDeclarationModifierFlagsFromSymbol(propertySymbol)&ast.ModifierFlagsNonPublicAccessibilityModifier != 0 {
				c.error(accessNode, Diagnostics.Private_or_protected_member_0_cannot_be_accessed_on_a_type_parameter, unescapeLeadingUnderscores(propertyName))
				return c.errorType
			}
		}
	}
	c.error(accessNode, Diagnostics.Type_0_cannot_be_used_to_index_type_1, c.typeToString(indexType), c.typeToString(objectType))
	return c.errorType
}

func (c *Checker) checkIndexedAccessType(node IndexedAccessTypeNode) {
	c.checkSourceElement(node.ObjectType)
	c.checkSourceElement(node.IndexType)
	c.checkIndexedAccessIndexType(c.getTypeFromIndexedAccessTypeNode(node), node)
}

func (c *Checker) checkMappedType(node MappedTypeNode) {
	c.checkGrammarMappedType(node)
	c.checkSourceElement(node.TypeParameter)
	c.checkSourceElement(node.NameType)
	c.checkSourceElement(node.Type_)

	if node.Type_ == nil {
		c.reportImplicitAny(node, c.anyType)
	}

	t := c.getTypeFromMappedTypeNode(node).AsMappedType()
	nameType := c.getNameTypeFromMappedType(t)
	if nameType != nil {
		c.checkTypeAssignableTo(nameType, c.stringNumberSymbolType, node.NameType)
	} else {
		constraintType := c.getConstraintTypeFromMappedType(t)
		c.checkTypeAssignableTo(constraintType, c.stringNumberSymbolType, getEffectiveConstraintOfTypeParameter(node.TypeParameter))
	}
}

func (c *Checker) checkGrammarMappedType(node MappedTypeNode) *bool {
	if node.Members. /* ? */ length {
		return c.grammarErrorOnNode(node.Members[0], Diagnostics.A_mapped_type_may_not_declare_properties_or_methods)
	}
}

func (c *Checker) checkThisType(node ThisTypeNode) {
	c.getTypeFromThisTypeNode(node)
}

func (c *Checker) checkTypeOperator(node TypeOperatorNode) {
	c.checkGrammarTypeOperatorNode(node)
	c.checkSourceElement(node.Type_)
}

func (c *Checker) checkConditionalType(node ConditionalTypeNode) {
	forEachChild(node, c.checkSourceElement)
}

func (c *Checker) checkInferType(node InferTypeNode) {
	if findAncestor(node, func(n *ast.Node) bool {
		return n.Parent && n.Parent.Kind == ast.KindConditionalType && n.Parent.AsConditionalTypeNode().ExtendsType == n
	}) == nil {
		c.grammarErrorOnNode(node, Diagnostics.infer_declarations_are_only_permitted_in_the_extends_clause_of_a_conditional_type)
	}
	c.checkSourceElement(node.TypeParameter)
	symbol := c.getSymbolOfDeclaration(node.TypeParameter)
	if symbol.Declarations != nil && symbol.Declarations.length > 1 {
		links := c.getSymbolLinks(symbol)
		if !links.typeParametersChecked {
			links.typeParametersChecked = true
			typeParameter := c.getDeclaredTypeOfTypeParameter(symbol)
			var declarations []TypeParameterDeclaration = getDeclarationsOfKind(symbol, ast.KindTypeParameter)
			if !c.areTypeParametersIdentical(declarations, []TypeParameter{typeParameter}, func(decl TypeParameterDeclaration) []TypeParameterDeclaration {
				return []TypeParameterDeclaration{decl}
			}) {
				// Report an error on every conflicting declaration.
				name := c.symbolToString(symbol)
				for _, declaration := range declarations {
					c.error(declaration.Name, Diagnostics.All_declarations_of_0_must_have_identical_constraints, name)
				}
			}
		}
	}
	c.registerForUnusedIdentifiersCheck(node)
}

func (c *Checker) checkTemplateLiteralType(node TemplateLiteralTypeNode) {
	for _, span := range node.TemplateSpans {
		c.checkSourceElement(span.Type_)
		t := c.getTypeFromTypeNode(span.Type_)
		c.checkTypeAssignableTo(t, c.templateConstraintType, span.Type_)
	}
	c.getTypeFromTypeNode(node)
}

func (c *Checker) checkImportType(node ImportTypeNode) {
	c.checkSourceElement(node.Argument)

	if node.Attributes != nil {
		getResolutionModeOverride(node.Attributes, c.grammarErrorOnNode)
	}
	c.checkTypeReferenceOrImport(node)
}

func (c *Checker) checkNamedTupleMember(node NamedTupleMember) {
	if node.DotDotDotToken != nil && node.QuestionToken != nil {
		c.grammarErrorOnNode(node, Diagnostics.A_tuple_member_cannot_be_both_optional_and_rest)
	}
	if node.Type_.Kind == ast.KindOptionalType {
		c.grammarErrorOnNode(node.Type_, Diagnostics.A_labeled_tuple_element_is_declared_as_optional_with_a_question_mark_after_the_name_and_before_the_colon_rather_than_after_the_type)
	}
	if node.Type_.Kind == ast.KindRestType {
		c.grammarErrorOnNode(node.Type_, Diagnostics.A_labeled_tuple_element_is_declared_as_rest_with_a_before_the_name_rather_than_before_the_type)
	}
	c.checkSourceElement(node.Type_)
	c.getTypeFromTypeNode(node)
}

func (c *Checker) isPrivateWithinAmbient(node *ast.Node) bool {
	return (hasEffectiveModifier(node, ast.ModifierFlagsPrivate) || isPrivateIdentifierClassElementDeclaration(node)) && node.Flags&ast.NodeFlagsAmbient != 0
}

func (c *Checker) getEffectiveDeclarationFlags(n Declaration, flagsToCheck ModifierFlags) ModifierFlags {
	flags := c.getCombinedModifierFlagsCached(n)

	// children of classes (even ambient classes) should not be marked as ambient or export
	// because those flags have no useful semantics there.
	if n.Parent.Kind != ast.KindInterfaceDeclaration && n.Parent.Kind != ast.KindClassDeclaration && n.Parent.Kind != ast.KindClassExpression && n.Flags&ast.NodeFlagsAmbient != 0 {
		container := getEnclosingContainer(n)
		if (container != nil && container.Flags&ast.NodeFlagsExportContext != 0) && flags&ast.ModifierFlagsAmbient == 0 && !(isModuleBlock(n.Parent) && isModuleDeclaration(n.Parent.Parent) && isGlobalScopeAugmentation(n.Parent.Parent)) {
			// It is nested in an ambient export context, which means it is automatically exported
			flags |= ast.ModifierFlagsExport
		}
		flags |= ast.ModifierFlagsAmbient
	}

	return flags & flagsToCheck
}

func (c *Checker) checkFunctionOrConstructorSymbol(symbol *ast.Symbol) {
	c.addLazyDiagnostic(func() {
		return c.checkFunctionOrConstructorSymbolWorker(symbol)
	})
}

func (c *Checker) checkFunctionOrConstructorSymbolWorker(symbol *ast.Symbol) {
	getCanonicalOverload := func(overloads []Declaration, implementation *FunctionLikeDeclaration) Declaration {
		// Consider the canonical set of flags to be the flags of the bodyDeclaration or the first declaration
		// Error on all deviations from this canonical set of flags
		// The caveat is that if some overloads are defined in lib.d.ts, we don't want to
		// report the errors on those. To achieve this, we will say that the implementation is
		// the canonical signature only if it is in the same container as the first overload
		implementationSharesContainerWithFirstOverload := implementation != nil && implementation.Parent == overloads[0].Parent
		if implementationSharesContainerWithFirstOverload {
			return implementation
		} else {
			return overloads[0]
		}
	}

	checkFlagAgreementBetweenOverloads := func(overloads []Declaration, implementation *FunctionLikeDeclaration, flagsToCheck ModifierFlags, someOverloadFlags ModifierFlags, allOverloadFlags ModifierFlags) {
		// Error if some overloads have a flag that is not shared by all overloads. To find the
		// deviations, we XOR someOverloadFlags with allOverloadFlags
		someButNotAllOverloadFlags := someOverloadFlags ^ allOverloadFlags
		if someButNotAllOverloadFlags != 0 {
			canonicalFlags := c.getEffectiveDeclarationFlags(getCanonicalOverload(overloads, implementation), flagsToCheck)
			group(overloads, func(o Declaration) string {
				return getSourceFileOfNode(o).FileName
			}).forEach(func(overloadsInFile []Declaration) {
				canonicalFlagsForFile := c.getEffectiveDeclarationFlags(getCanonicalOverload(overloadsInFile, implementation), flagsToCheck)
				for _, o := range overloadsInFile {
					deviation := c.getEffectiveDeclarationFlags(o, flagsToCheck) ^ canonicalFlags
					deviationInFile := c.getEffectiveDeclarationFlags(o, flagsToCheck) ^ canonicalFlagsForFile
					if deviationInFile&ast.ModifierFlagsExport != 0 {
						// Overloads in different files need not all have export modifiers. This is ok:
						//   // lib.d.ts
						//   declare function foo(s: number): string;
						//   declare function foo(s: string): number;
						//   export { foo };
						//
						//   // app.ts
						//   declare module "lib" {
						//     export function foo(s: boolean): boolean;
						//   }
						c.error(getNameOfDeclaration(o), Diagnostics.Overload_signatures_must_all_be_exported_or_non_exported)
					} else if deviationInFile&ast.ModifierFlagsAmbient != 0 {
						// Though rare, a module augmentation (necessarily ambient) is allowed to add overloads
						// to a non-ambient function in an implementation file.
						c.error(getNameOfDeclaration(o), Diagnostics.Overload_signatures_must_all_be_ambient_or_non_ambient)
					} else if deviation&(ast.ModifierFlagsPrivate|ast.ModifierFlagsProtected) != 0 {
						c.error(getNameOfDeclaration(o) || o, Diagnostics.Overload_signatures_must_all_be_public_private_or_protected)
					} else if deviation&ast.ModifierFlagsAbstract != 0 {
						c.error(getNameOfDeclaration(o), Diagnostics.Overload_signatures_must_all_be_abstract_or_non_abstract)
					}
				}
			})
		}
	}

	checkQuestionTokenAgreementBetweenOverloads := func(overloads []Declaration, implementation *FunctionLikeDeclaration, someHaveQuestionToken bool, allHaveQuestionToken bool) {
		if someHaveQuestionToken != allHaveQuestionToken {
			canonicalHasQuestionToken := hasQuestionToken(getCanonicalOverload(overloads, implementation))
			forEach(overloads, func(o Declaration) {
				deviation := hasQuestionToken(o) != canonicalHasQuestionToken
				if deviation {
					c.error(getNameOfDeclaration(o), Diagnostics.Overload_signatures_must_all_be_optional_or_required)
				}
			})
		}
	}

	var flagsToCheck ModifierFlags = ast.ModifierFlagsExport | ast.ModifierFlagsAmbient | ast.ModifierFlagsPrivate | ast.ModifierFlagsProtected | ast.ModifierFlagsAbstract
	var someNodeFlags ModifierFlags = ast.ModifierFlagsNone
	allNodeFlags := flagsToCheck
	someHaveQuestionToken := false
	allHaveQuestionToken := true
	hasOverloads := false
	var bodyDeclaration *FunctionLikeDeclaration
	var lastSeenNonAmbientDeclaration *FunctionLikeDeclaration
	var previousDeclaration *SignatureDeclaration

	declarations := symbol.Declarations
	isConstructor := (symbol.Flags & ast.SymbolFlagsConstructor) != 0

	reportImplementationExpectedError := func(node SignatureDeclaration) {
		if node.Name != nil && nodeIsMissing(node.Name) {
			return
		}

		seen := false
		subsequentNode := forEachChild(node.Parent, func(c *ast.Node) *ast.Node {
			if seen {
				return c
			} else {
				seen = c == node
			}
		})
		// We may be here because of some extra nodes between overloads that could not be parsed into a valid node.
		// In this case the subsequent node is not really consecutive (.pos !== node.end), and we must ignore it here.
		if subsequentNode != nil && subsequentNode.Pos == node.End {
			if subsequentNode.Kind == node.Kind {
				var errorNode *ast.Node = subsequentNode.AsFunctionLikeDeclaration().Name || subsequentNode
				subsequentName := subsequentNode.AsFunctionLikeDeclaration().Name
				if node.Name != nil && subsequentName != nil && (isPrivateIdentifier(node.Name) && isPrivateIdentifier(subsequentName) && node.Name.EscapedText == subsequentName.EscapedText || isComputedPropertyName(node.Name) && isComputedPropertyName(subsequentName) && c.isTypeIdenticalTo(c.checkComputedPropertyName(node.Name), c.checkComputedPropertyName(subsequentName)) || isPropertyNameLiteral(node.Name) && isPropertyNameLiteral(subsequentName) && getEscapedTextOfIdentifierOrLiteral(node.Name) == getEscapedTextOfIdentifierOrLiteral(subsequentName)) {
					reportError := (node.Kind == ast.KindMethodDeclaration || node.Kind == ast.KindMethodSignature) && isStatic(node) != isStatic(subsequentNode)
					// we can get here in two cases
					// 1. mixed static and instance class members
					// 2. something with the same name was defined before the set of overloads that prevents them from merging
					// here we'll report error only for the first case since for second we should already report error in binder
					if reportError {
						var diagnostic any
						if isStatic(node) {
							diagnostic = Diagnostics.Function_overload_must_be_static
						} else {
							diagnostic = Diagnostics.Function_overload_must_not_be_static
						}
						c.error(errorNode, diagnostic)
					}
					return
				}
				if nodeIsPresent(subsequentNode.AsFunctionLikeDeclaration().Body) {
					c.error(errorNode, Diagnostics.Function_implementation_name_must_be_0, declarationNameToString(node.Name))
					return
				}
			}
		}
		var errorNode *ast.Node = node.Name || node
		if isConstructor {
			c.error(errorNode, Diagnostics.Constructor_implementation_is_missing)
		} else {
			// Report different errors regarding non-consecutive blocks of declarations depending on whether
			// the node in question is abstract.
			if hasSyntacticModifier(node, ast.ModifierFlagsAbstract) {
				c.error(errorNode, Diagnostics.All_declarations_of_an_abstract_method_must_be_consecutive)
			} else {
				c.error(errorNode, Diagnostics.Function_implementation_is_missing_or_not_immediately_following_the_declaration)
			}
		}
	}

	duplicateFunctionDeclaration := false
	multipleConstructorImplementation := false
	hasNonAmbientClass := false
	functionDeclarations := []never{} /* as Declaration[] */
	if declarations != nil {
		for _, current := range declarations {
			node := current /* as SignatureDeclaration | ClassDeclaration | ClassExpression */
			inAmbientContext := node.Flags & ast.NodeFlagsAmbient
			inAmbientContextOrInterface := node.Parent && (node.Parent.Kind == ast.KindInterfaceDeclaration || node.Parent.Kind == ast.KindTypeLiteral) || inAmbientContext
			if inAmbientContextOrInterface {
				// check if declarations are consecutive only if they are non-ambient
				// 1. ambient declarations can be interleaved
				// i.e. this is legal
				//     declare function foo();
				//     declare function bar();
				//     declare function foo();
				// 2. mixing ambient and non-ambient declarations is a separate error that will be reported - do not want to report an extra one
				previousDeclaration = nil
			}

			if (node.Kind == ast.KindClassDeclaration || node.Kind == ast.KindClassExpression) && inAmbientContext == 0 {
				hasNonAmbientClass = true
			}

			if node.Kind == ast.KindFunctionDeclaration || node.Kind == ast.KindMethodDeclaration || node.Kind == ast.KindMethodSignature || node.Kind == ast.KindConstructor {
				functionDeclarations.push(node)
				currentNodeFlags := c.getEffectiveDeclarationFlags(node, flagsToCheck)
				someNodeFlags |= currentNodeFlags
				allNodeFlags &= currentNodeFlags
				someHaveQuestionToken = someHaveQuestionToken || hasQuestionToken(node)
				allHaveQuestionToken = allHaveQuestionToken && hasQuestionToken(node)
				bodyIsPresent := nodeIsPresent(node.AsFunctionLikeDeclaration().Body)

				if bodyIsPresent && bodyDeclaration != nil {
					if isConstructor {
						multipleConstructorImplementation = true
					} else {
						duplicateFunctionDeclaration = true
					}
				} else if previousDeclaration. /* ? */ parent == node.Parent && previousDeclaration.End != node.Pos {
					reportImplementationExpectedError(previousDeclaration)
				}

				if bodyIsPresent {
					if bodyDeclaration == nil {
						bodyDeclaration = node.AsFunctionLikeDeclaration()
					}
				} else {
					hasOverloads = true
				}

				previousDeclaration = node

				if !inAmbientContextOrInterface {
					lastSeenNonAmbientDeclaration = node.AsFunctionLikeDeclaration()
				}
			}
			if isInJSFile(current) && isFunctionLike(current) && current.JsDoc != nil {
				hasOverloads = length(getJSDocOverloadTags(current)) > 0
			}
		}
	}

	if multipleConstructorImplementation {
		forEach(functionDeclarations, func(declaration Declaration) {
			c.error(declaration, Diagnostics.Multiple_constructor_implementations_are_not_allowed)
		})
	}

	if duplicateFunctionDeclaration {
		forEach(functionDeclarations, func(declaration Declaration) {
			c.error(getNameOfDeclaration(declaration) || declaration, Diagnostics.Duplicate_function_implementation)
		})
	}

	if hasNonAmbientClass && !isConstructor && symbol.Flags&ast.SymbolFlagsFunction != 0 && declarations != nil {
		relatedDiagnostics := core.Filter(declarations, func(d Declaration) bool {
			return d.Kind == ast.KindClassDeclaration
		}).map_(func(d Declaration) DiagnosticWithLocation {
			return createDiagnosticForNode(d, Diagnostics.Consider_adding_a_declare_modifier_to_this_class)
		})

		forEach(declarations, func(declaration Declaration) {
			var diagnostic any
			switch {
			case declaration.Kind == ast.KindClassDeclaration:
				diagnostic = Diagnostics.Class_declaration_cannot_implement_overload_list_for_0
			case declaration.Kind == ast.KindFunctionDeclaration:
				diagnostic = Diagnostics.Function_with_bodies_can_only_merge_with_classes_that_are_ambient
			default:
				diagnostic = nil
			}
			if diagnostic {
				addRelatedInfo(c.error(getNameOfDeclaration(declaration) || declaration, diagnostic, symbolName(symbol)), relatedDiagnostics...)
			}
		})
	}

	// Abstract methods can't have an implementation -- in particular, they don't need one.
	if lastSeenNonAmbientDeclaration != nil && lastSeenNonAmbientDeclaration.Body == nil && !hasSyntacticModifier(lastSeenNonAmbientDeclaration, ast.ModifierFlagsAbstract) && lastSeenNonAmbientDeclaration.QuestionToken == nil {
		reportImplementationExpectedError(lastSeenNonAmbientDeclaration)
	}

	if hasOverloads {
		if declarations != nil {
			checkFlagAgreementBetweenOverloads(declarations, bodyDeclaration, flagsToCheck, someNodeFlags, allNodeFlags)
			checkQuestionTokenAgreementBetweenOverloads(declarations, bodyDeclaration, someHaveQuestionToken, allHaveQuestionToken)
		}

		if bodyDeclaration != nil {
			signatures := c.getSignaturesOfSymbol(symbol)
			bodySignature := c.getSignatureFromDeclaration(bodyDeclaration)
			for _, signature := range signatures {
				if !c.isImplementationCompatibleWithOverload(bodySignature, signature) {
					var errorNode * /* TODO(TS-TO-GO) inferred type SignatureDeclaration | Identifier */ any
					if signature.declaration != nil && isJSDocSignature(signature.declaration) {
						errorNode = (signature.declaration.Parent /* as JSDocOverloadTag | JSDocCallbackTag */).TagName
					} else {
						errorNode = signature.declaration
					}
					addRelatedInfo(c.error(errorNode, Diagnostics.This_overload_signature_is_not_compatible_with_its_implementation_signature), createDiagnosticForNode(bodyDeclaration, Diagnostics.The_implementation_signature_is_declared_here))
					break
				}
			}
		}
	}
}

func (c *Checker) checkExportsOnMergedDeclarations(node Declaration) {
	c.addLazyDiagnostic(func() {
		return c.checkExportsOnMergedDeclarationsWorker(node)
	})
}

func (c *Checker) checkExportsOnMergedDeclarationsWorker(node Declaration) {
	// if localSymbol is defined on node then node itself is exported - check is required
	symbol := node.LocalSymbol
	if symbol == nil {
		// local symbol is undefined => this declaration is non-exported.
		// however symbol might contain other declarations that are exported
		symbol = c.getSymbolOfDeclaration(node)
		if symbol.ExportSymbol == nil {
			// this is a pure local symbol (all declarations are non-exported) - no need to check anything
			return
		}
	}

	// run the check only for the first declaration in the list
	if getDeclarationOfKind(symbol, node.Kind) != node {
		return
	}

	exportedDeclarationSpaces := DeclarationSpacesNone
	nonExportedDeclarationSpaces := DeclarationSpacesNone
	defaultExportedDeclarationSpaces := DeclarationSpacesNone
	for _, d := range symbol.Declarations {
		declarationSpaces := getDeclarationSpaces(d)
		effectiveDeclarationFlags := c.getEffectiveDeclarationFlags(d, ast.ModifierFlagsExport|ast.ModifierFlagsDefault)

		if effectiveDeclarationFlags&ast.ModifierFlagsExport != 0 {
			if effectiveDeclarationFlags&ast.ModifierFlagsDefault != 0 {
				defaultExportedDeclarationSpaces |= declarationSpaces
			} else {
				exportedDeclarationSpaces |= declarationSpaces
			}
		} else {
			nonExportedDeclarationSpaces |= declarationSpaces
		}
	}

	// Spaces for anything not declared a 'default export'.
	nonDefaultExportedDeclarationSpaces := exportedDeclarationSpaces | nonExportedDeclarationSpaces

	commonDeclarationSpacesForExportsAndLocals := exportedDeclarationSpaces & nonExportedDeclarationSpaces
	commonDeclarationSpacesForDefaultAndNonDefault := defaultExportedDeclarationSpaces & nonDefaultExportedDeclarationSpaces

	if commonDeclarationSpacesForExportsAndLocals != 0 || commonDeclarationSpacesForDefaultAndNonDefault != 0 {
		// declaration spaces for exported and non-exported declarations intersect
		for _, d := range symbol.Declarations {
			declarationSpaces := getDeclarationSpaces(d)

			name := getNameOfDeclaration(d)
			// Only error on the declarations that contributed to the intersecting spaces.
			if declarationSpaces&commonDeclarationSpacesForDefaultAndNonDefault != 0 {
				c.error(name, Diagnostics.Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_default_0_declaration_instead, declarationNameToString(name))
			} else if declarationSpaces&commonDeclarationSpacesForExportsAndLocals != 0 {
				c.error(name, Diagnostics.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local, declarationNameToString(name))
			}
		}
	}

	getDeclarationSpaces := func(decl Declaration) DeclarationSpaces {
		d := decl.AsNode()
		switch d.Kind {
		case ast.KindInterfaceDeclaration,
			ast.KindTypeAliasDeclaration,
			ast.KindJSDocTypedefTag,
			ast.KindJSDocCallbackTag,
			ast.KindJSDocEnumTag:
			return DeclarationSpacesExportType
		case ast.KindModuleDeclaration:
			if isAmbientModule(d.AsModuleDeclaration()) || getModuleInstanceState(d.AsModuleDeclaration()) != ModuleInstanceStateNonInstantiated {
				return DeclarationSpacesExportNamespace | DeclarationSpacesExportValue
			} else {
				return DeclarationSpacesExportNamespace
			}
		case ast.KindClassDeclaration,
			ast.KindEnumDeclaration,
			ast.KindEnumMember:
			return DeclarationSpacesExportType | DeclarationSpacesExportValue
		case ast.KindSourceFile:
			return DeclarationSpacesExportType | DeclarationSpacesExportValue | DeclarationSpacesExportNamespace
		case ast.KindExportAssignment,
			ast.KindBinaryExpression:
			node := d /* as ExportAssignment | BinaryExpression */
			var expression Expression
			if isExportAssignment(node) {
				expression = node.Expression
			} else {
				expression = node.Right
			}
			// Export assigned entity name expressions act as aliases and should fall through, otherwise they export values
			if !isEntityNameExpression(expression) {
				return DeclarationSpacesExportValue
			}
			d = expression

			// The below options all declare an Alias, which is allowed to merge with other values within the importing module.
			fallthrough
		case ast.KindImportEqualsDeclaration,
			ast.KindNamespaceImport,
			ast.KindImportClause:
			result := DeclarationSpacesNone
			target := c.resolveAlias(c.getSymbolOfDeclaration(d /* as ImportEqualsDeclaration | NamespaceImport | ImportClause | ExportAssignment | BinaryExpression */))
			forEach(target.Declarations, func(d Declaration) {
				result |= getDeclarationSpaces(d)
			})
			return result
		case ast.KindVariableDeclaration,
			ast.KindBindingElement,
			ast.KindFunctionDeclaration,
			ast.KindImportSpecifier,
			ast.KindIdentifier:
			// Identifiers are used as declarations of assignment declarations whose parents may be
			// SyntaxKind.CallExpression - `Object.defineProperty(thing, "aField", {value: 42});`
			// SyntaxKind.ElementAccessExpression - `thing["aField"] = 42;` or `thing["aField"];` (with a doc comment on it)
			// or SyntaxKind.PropertyAccessExpression - `thing.aField = 42;`
			// all of which are pretty much always values, or at least imply a value meaning.
			// It may be apprpriate to treat these as aliases in the future.
			return DeclarationSpacesExportValue
		case ast.KindMethodSignature,
			ast.KindPropertySignature:
			return DeclarationSpacesExportType
		default:
			return Debug.failBadSyntaxKind(d)
		}
	}

}

func (c *Checker) getAwaitedTypeOfPromise(t *Type, errorNode *ast.Node, diagnosticMessage DiagnosticMessage, args DiagnosticArguments) *Type {
	promisedType := c.getPromisedTypeOfPromise(t, errorNode)
	return promisedType && c.getAwaitedType(promisedType, errorNode, diagnosticMessage, args...)
}

/**
 * Gets the "promised type" of a promise.
 * @param type The type of the promise.
 * @remarks The "promised type" of a type is the type of the "value" parameter of the "onfulfilled" callback.
 */

func (c *Checker) getPromisedTypeOfPromise(t *Type, errorNode *ast.Node, thisTypeForErrorOut /* TODO(TS-TO-GO) TypeNode TypeLiteral: { value?: Type; } */ any) *Type {
	//
	//  { // type
	//      then( // thenFunction
	//          onfulfilled: ( // onfulfilledParameterType
	//              value: T // valueParameterType
	//          ) => any
	//      ): any;
	//  }
	//

	if c.isTypeAny(t) {
		return nil
	}

	typeAsPromise := t.AsPromiseOrAwaitableType()
	if typeAsPromise.promisedTypeOfPromise != nil {
		return typeAsPromise.promisedTypeOfPromise
	}

	if c.isReferenceToType(t, c.getGlobalPromiseType(false)) {
		typeAsPromise.promisedTypeOfPromise = c.getTypeArguments(t.AsGenericType())[0]
		return typeAsPromise.promisedTypeOfPromise
	}

	// primitives with a `{ then() }` won't be unwrapped/adopted.
	if c.allTypesAssignableToKind(c.getBaseConstraintOrType(t), TypeFlagsPrimitive|TypeFlagsNever) {
		return nil
	}

	thenFunction := c.getTypeOfPropertyOfType(t, "then" /* as __String */)
	// TODO: GH#18217
	if c.isTypeAny(thenFunction) {
		return nil
	}

	var thenSignatures []Signature
	if thenFunction {
		thenSignatures = c.getSignaturesOfType(thenFunction, SignatureKindCall)
	} else {
		thenSignatures = emptyArray
	}
	if thenSignatures.length == 0 {
		if errorNode != nil {
			c.error(errorNode, Diagnostics.A_promise_must_have_a_then_method)
		}
		return nil
	}

	var thisTypeForError *Type
	var candidates *[]Signature
	for _, thenSignature := range thenSignatures {
		thisType := c.getThisTypeOfSignature(thenSignature)
		if thisType != nil && thisType != c.voidType && !c.isTypeRelatedTo(t, thisType, c.subtypeRelation) {
			thisTypeForError = thisType
		} else {
			candidates = append(candidates, thenSignature)
		}
	}

	if candidates == nil {
		Debug.assertIsDefined(thisTypeForError)
		if thisTypeForErrorOut != nil {
			thisTypeForErrorOut.value = thisTypeForError
		}
		if errorNode != nil {
			c.error(errorNode, Diagnostics.The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1, c.typeToString(t), c.typeToString(thisTypeForError))
		}
		return nil
	}

	onfulfilledParameterType := c.getTypeWithFacts(c.getUnionType(core.Map(candidates, c.getTypeOfFirstParameterOfSignature)), TypeFactsNEUndefinedOrNull)
	if c.isTypeAny(onfulfilledParameterType) {
		return nil
	}

	onfulfilledParameterSignatures := c.getSignaturesOfType(onfulfilledParameterType, SignatureKindCall)
	if onfulfilledParameterSignatures.length == 0 {
		if errorNode != nil {
			c.error(errorNode, Diagnostics.The_first_parameter_of_the_then_method_of_a_promise_must_be_a_callback)
		}
		return nil
	}

	typeAsPromise.promisedTypeOfPromise = c.getUnionType(core.Map(onfulfilledParameterSignatures, c.getTypeOfFirstParameterOfSignature), UnionReductionSubtype)
	return typeAsPromise.promisedTypeOfPromise
}

/**
 * Gets the "awaited type" of a type.
 * @param type The type to await.
 * @param withAlias When `true`, wraps the "awaited type" in `Awaited<T>` if needed.
 * @remarks The "awaited type" of an expression is its "promised type" if the expression is a
 * Promise-like type; otherwise, it is the type of the expression. This is used to reflect
 * The runtime behavior of the `await` keyword.
 */

func (c *Checker) checkAwaitedType(t *Type, withAlias bool, errorNode *ast.Node, diagnosticMessage DiagnosticMessage, args DiagnosticArguments) *Type {
	var awaitedType *Type
	if withAlias {
		awaitedType = c.getAwaitedType(t, errorNode, diagnosticMessage, args...)
	} else {
		awaitedType = c.getAwaitedTypeNoAlias(t, errorNode, diagnosticMessage, args...)
	}
	return awaitedType || c.errorType
}

/**
 * Determines whether a type is an object with a callable `then` member.
 */

func (c *Checker) isThenableType(t *Type) bool {
	if c.allTypesAssignableToKind(c.getBaseConstraintOrType(t), TypeFlagsPrimitive|TypeFlagsNever) {
		// primitive types cannot be considered "thenable" since they are not objects.
		return false
	}

	thenFunction := c.getTypeOfPropertyOfType(t, "then" /* as __String */)
	return thenFunction != nil && c.getSignaturesOfType(c.getTypeWithFacts(thenFunction, TypeFactsNEUndefinedOrNull), SignatureKindCall).length > 0
}

func (c *Checker) isAwaitedTypeInstantiation(t *Type) bool {
	if t.flags&TypeFlagsConditional != 0 {
		awaitedSymbol := c.getGlobalAwaitedSymbol(false)
		return awaitedSymbol != nil && t.aliasSymbol == awaitedSymbol && t.aliasTypeArguments. /* ? */ length == 1
	}
	return false
}

/**
 * For a generic `Awaited<T>`, gets `T`.
 */

func (c *Checker) unwrapAwaitedType(t *Type) *Type {
	switch {
	case t.flags&TypeFlagsUnion != 0:
		return c.mapType(t, c.unwrapAwaitedType)
	case c.isAwaitedTypeInstantiation(t):
		return t.aliasTypeArguments[0]
	default:
		return t
	}
}

func (c *Checker) isAwaitedTypeNeeded(t *Type) bool {
	// If this is already an `Awaited<T>`, we shouldn't wrap it. This helps to avoid `Awaited<Awaited<T>>` in higher-order.
	if c.isTypeAny(t) || c.isAwaitedTypeInstantiation(t) {
		return false
	}

	// We only need `Awaited<T>` if `T` contains possibly non-primitive types.
	if c.isGenericObjectType(t) {
		baseConstraint := c.getBaseConstraintOfType(t)
		// We only need `Awaited<T>` if `T` is a type variable that has no base constraint, or the base constraint of `T` is `any`, `unknown`, `{}`, `object`,
		// or is promise-like.
		if ifElse(baseConstraint != nil, baseConstraint.flags&TypeFlagsAnyOrUnknown != 0 || c.isEmptyObjectType(baseConstraint) || c.someType(baseConstraint, c.isThenableType), c.maybeTypeOfKind(t, TypeFlagsTypeVariable)) {
			return true
		}
	}

	return false
}

func (c *Checker) tryCreateAwaitedType(t *Type) *Type {
	// Nothing to do if `Awaited<T>` doesn't exist
	awaitedSymbol := c.getGlobalAwaitedSymbol(true)
	if awaitedSymbol != nil {
		// Unwrap unions that may contain `Awaited<T>`, otherwise its possible to manufacture an `Awaited<Awaited<T> | U>` where
		// an `Awaited<T | U>` would suffice.
		return c.getTypeAliasInstantiation(awaitedSymbol, []*Type{c.unwrapAwaitedType(t)})
	}

	return nil
}

func (c *Checker) createAwaitedTypeIfNeeded(t *Type) *Type {
	// We wrap type `T` in `Awaited<T>` based on the following conditions:
	// - `T` is not already an `Awaited<U>`, and
	// - `T` is generic, and
	// - One of the following applies:
	//   - `T` has no base constraint, or
	//   - The base constraint of `T` is `any`, `unknown`, `object`, or `{}`, or
	//   - The base constraint of `T` is an object type with a callable `then` method.

	if c.isAwaitedTypeNeeded(t) {
		return ifNotNilElse(c.tryCreateAwaitedType(t), t)
	}

	Debug.assert(c.isAwaitedTypeInstantiation(t) || c.getPromisedTypeOfPromise(t) == nil, "type provided should not be a non-generic 'promise'-like.")
	return t
}

/**
 * Gets the "awaited type" of a type.
 *
 * The "awaited type" of an expression is its "promised type" if the expression is a
 * Promise-like type; otherwise, it is the type of the expression. If the "promised
 * type" is itself a Promise-like, the "promised type" is recursively unwrapped until a
 * non-promise type is found.
 *
 * This is used to reflect the runtime behavior of the `await` keyword.
 */

func (c *Checker) getAwaitedType(t *Type, errorNode *ast.Node, diagnosticMessage DiagnosticMessage, args DiagnosticArguments) *Type {
	awaitedType := c.getAwaitedTypeNoAlias(t, errorNode, diagnosticMessage, args...)
	return awaitedType && c.createAwaitedTypeIfNeeded(awaitedType)
}

/**
 * Gets the "awaited type" of a type without introducing an `Awaited<T>` wrapper.
 *
 * @see {@link getAwaitedType}
 */

func (c *Checker) getAwaitedTypeNoAlias(t *Type, errorNode *ast.Node, diagnosticMessage DiagnosticMessage, args DiagnosticArguments) *Type {
	if c.isTypeAny(t) {
		return t
	}

	// If this is already an `Awaited<T>`, just return it. This avoids `Awaited<Awaited<T>>` in higher-order
	if c.isAwaitedTypeInstantiation(t) {
		return t
	}

	// If we've already cached an awaited type, return a possible `Awaited<T>` for it.
	typeAsAwaitable := t.AsPromiseOrAwaitableType()
	if typeAsAwaitable.awaitedTypeOfType != nil {
		return typeAsAwaitable.awaitedTypeOfType
	}

	// For a union, get a union of the awaited types of each constituent.
	if t.flags&TypeFlagsUnion != 0 {
		if c.awaitedTypeStack.lastIndexOf(t.id) >= 0 {
			if errorNode != nil {
				c.error(errorNode, Diagnostics.Type_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method)
			}
			return nil
		}

		var mapper * /* TODO(TS-TO-GO) inferred type (type: Type, errorNode?: Node, diagnosticMessage?: DiagnosticMessage, ...args: DiagnosticArguments) => Type */ any
		if errorNode != nil {
			mapper = func(constituentType *Type) *Type {
				return c.getAwaitedTypeNoAlias(constituentType, errorNode, diagnosticMessage, args...)
			}
		} else {
			mapper = c.getAwaitedTypeNoAlias
		}

		c.awaitedTypeStack.push(t.id)
		mapped := c.mapType(t, mapper)
		c.awaitedTypeStack.pop()

		typeAsAwaitable.awaitedTypeOfType = mapped
		return typeAsAwaitable.awaitedTypeOfType
	}

	// If `type` is generic and should be wrapped in `Awaited<T>`, return it.
	if c.isAwaitedTypeNeeded(t) {
		typeAsAwaitable.awaitedTypeOfType = t
		return typeAsAwaitable.awaitedTypeOfType
	}

	var thisTypeForErrorOut /* TODO(TS-TO-GO) TypeNode TypeLiteral: { value: Type | undefined; } */ any = map[any]any{ /* TODO(TS-TO-GO): was object literal */
		"value": nil,
	}
	promisedType := c.getPromisedTypeOfPromise(t, nil /*errorNode*/, thisTypeForErrorOut)
	if promisedType != nil {
		if t.id == promisedType.id || c.awaitedTypeStack.lastIndexOf(promisedType.id) >= 0 {
			// Verify that we don't have a bad actor in the form of a promise whose
			// promised type is the same as the promise type, or a mutually recursive
			// promise. If so, we return undefined as we cannot guess the shape. If this
			// were the actual case in the JavaScript, this Promise would never resolve.
			//
			// An example of a bad actor with a singly-recursive promise type might
			// be:
			//
			//  interface BadPromise {
			//      then(
			//          onfulfilled: (value: BadPromise) => any,
			//          onrejected: (error: any) => any): BadPromise;
			//  }
			//
			// The above interface will pass the PromiseLike check, and return a
			// promised type of `BadPromise`. Since this is a self reference, we
			// don't want to keep recursing ad infinitum.
			//
			// An example of a bad actor in the form of a mutually-recursive
			// promise type might be:
			//
			//  interface BadPromiseA {
			//      then(
			//          onfulfilled: (value: BadPromiseB) => any,
			//          onrejected: (error: any) => any): BadPromiseB;
			//  }
			//
			//  interface BadPromiseB {
			//      then(
			//          onfulfilled: (value: BadPromiseA) => any,
			//          onrejected: (error: any) => any): BadPromiseA;
			//  }
			//
			if errorNode != nil {
				c.error(errorNode, Diagnostics.Type_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method)
			}
			return nil
		}

		// Keep track of the type we're about to unwrap to avoid bad recursive promise types.
		// See the comments above for more information.
		c.awaitedTypeStack.push(t.id)
		awaitedType := c.getAwaitedTypeNoAlias(promisedType, errorNode, diagnosticMessage, args...)
		c.awaitedTypeStack.pop()

		if awaitedType == nil {
			return nil
		}

		typeAsAwaitable.awaitedTypeOfType = awaitedType
		return typeAsAwaitable.awaitedTypeOfType
	}

	// The type was not a promise, so it could not be unwrapped any further.
	// As long as the type does not have a callable "then" property, it is
	// safe to return the type; otherwise, an error is reported and we return
	// undefined.
	//
	// An example of a non-promise "thenable" might be:
	//
	//  await { then(): void {} }
	//
	// The "thenable" does not match the minimal definition for a promise. When
	// a Promise/A+-compatible or ES6 promise tries to adopt this value, the promise
	// will never settle. We treat this as an error to help flag an early indicator
	// of a runtime problem. If the user wants to return this value from an async
	// function, they would need to wrap it in some other value. If they want it to
	// be treated as a promise, they can cast to <any>.
	if c.isThenableType(t) {
		if errorNode != nil {
			Debug.assertIsDefined(diagnosticMessage)
			var chain *DiagnosticMessageChain
			if thisTypeForErrorOut.value != nil {
				chain = chainDiagnosticMessages(chain, Diagnostics.The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1, c.typeToString(t), c.typeToString(thisTypeForErrorOut.value))
			}
			chain = chainDiagnosticMessages(chain, diagnosticMessage, args...)
			c.diagnostics.add(createDiagnosticForNodeFromMessageChain(getSourceFileOfNode(errorNode), errorNode, chain))
		}
		return nil
	}

	typeAsAwaitable.awaitedTypeOfType = t
	return typeAsAwaitable.awaitedTypeOfType
}

/**
 * Checks the return type of an async function to ensure it is a compatible
 * Promise implementation.
 *
 * This checks that an async function has a valid Promise-compatible return type.
 * An async function has a valid Promise-compatible return type if the resolved value
 * of the return type has a construct signature that takes in an `initializer` function
 * that in turn supplies a `resolve` function as one of its arguments and results in an
 * object with a callable `then` signature.
 *
 * @param node The signature to check
 */

func (c *Checker) checkAsyncFunctionReturnType(node Union[FunctionLikeDeclaration, MethodSignature], returnTypeNode TypeNode, returnTypeErrorLocation TypeNode) {
	// As part of our emit for an async function, we will need to emit the entity name of
	// the return type annotation as an expression. To meet the necessary runtime semantics
	// for __awaiter, we must also check that the type of the declaration (e.g. the static
	// side or "constructor" of the promise type) is compatible `PromiseConstructorLike`.
	//
	// An example might be (from lib.es6.d.ts):
	//
	//  interface Promise<T> { ... }
	//  interface PromiseConstructor {
	//      new <T>(...): Promise<T>;
	//  }
	//  declare var Promise: PromiseConstructor;
	//
	// When an async function declares a return type annotation of `Promise<T>`, we
	// need to get the type of the `Promise` variable declaration above, which would
	// be `PromiseConstructor`.
	//
	// The same case applies to a class:
	//
	//  declare class Promise<T> {
	//      constructor(...);
	//      then<U>(...): Promise<U>;
	//  }
	//
	returnType := c.getTypeFromTypeNode(returnTypeNode)
	if c.languageVersion >= ScriptTargetES2015 {
		if c.isErrorType(returnType) {
			return
		}
		globalPromiseType := c.getGlobalPromiseType(true)
		if globalPromiseType != c.emptyGenericType && !c.isReferenceToType(returnType, globalPromiseType) {
			// The promise type was not a valid type reference to the global promise type, so we
			// report an error and return the unknown type.
			reportErrorForInvalidReturnType(Diagnostics.The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type_Did_you_mean_to_write_Promise_0, returnTypeNode, returnTypeErrorLocation, c.typeToString(c.getAwaitedTypeNoAlias(returnType) || c.voidType))
			return
		}
	} else {
		// Always mark the type node as referenced if it points to a value
		c.markLinkedReferences(node, ReferenceHintAsyncFunction)
		if c.isErrorType(returnType) {
			return
		}

		promiseConstructorName := getEntityNameFromTypeNode(returnTypeNode)
		if promiseConstructorName == nil {
			reportErrorForInvalidReturnType(Diagnostics.Type_0_is_not_a_valid_async_function_return_type_in_ES5_because_it_does_not_refer_to_a_Promise_compatible_constructor_value, returnTypeNode, returnTypeErrorLocation, c.typeToString(returnType))
			return
		}

		promiseConstructorSymbol := c.resolveEntityName(promiseConstructorName, ast.SymbolFlagsValue, true /*ignoreErrors*/)
		var promiseConstructorType *Type
		if promiseConstructorSymbol != nil {
			promiseConstructorType = c.getTypeOfSymbol(promiseConstructorSymbol)
		} else {
			promiseConstructorType = c.errorType
		}
		if c.isErrorType(promiseConstructorType) {
			if promiseConstructorName.Kind == ast.KindIdentifier && promiseConstructorName.EscapedText == "Promise" && c.getTargetType(returnType) == c.getGlobalPromiseType(false) {
				c.error(returnTypeErrorLocation, Diagnostics.An_async_function_or_method_in_ES5_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option)
			} else {
				reportErrorForInvalidReturnType(Diagnostics.Type_0_is_not_a_valid_async_function_return_type_in_ES5_because_it_does_not_refer_to_a_Promise_compatible_constructor_value, returnTypeNode, returnTypeErrorLocation, entityNameToString(promiseConstructorName))
			}
			return
		}

		globalPromiseConstructorLikeType := c.getGlobalPromiseConstructorLikeType(true)
		if globalPromiseConstructorLikeType == c.emptyObjectType {
			// If we couldn't resolve the global PromiseConstructorLike type we cannot verify
			// compatibility with __awaiter.
			reportErrorForInvalidReturnType(Diagnostics.Type_0_is_not_a_valid_async_function_return_type_in_ES5_because_it_does_not_refer_to_a_Promise_compatible_constructor_value, returnTypeNode, returnTypeErrorLocation, entityNameToString(promiseConstructorName))
			return
		}

		headMessage := Diagnostics.Type_0_is_not_a_valid_async_function_return_type_in_ES5_because_it_does_not_refer_to_a_Promise_compatible_constructor_value
		errorInfo := func() *DiagnosticMessageChain {
			if returnTypeNode == returnTypeErrorLocation {
				return nil
			} else {
				return chainDiagnosticMessages(nil, Diagnostics.The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type)
			}
		}
		if !c.checkTypeAssignableTo(promiseConstructorType, globalPromiseConstructorLikeType, returnTypeErrorLocation, headMessage, errorInfo) {
			return
		}

		// Verify there is no local declaration that could collide with the promise constructor.
		rootName := promiseConstructorName && getFirstIdentifier(promiseConstructorName)
		collidingSymbol := c.getSymbol(node.Locals, rootName.EscapedText, ast.SymbolFlagsValue)
		if collidingSymbol != nil {
			c.error(collidingSymbol.ValueDeclaration, Diagnostics.Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions, idText(rootName), entityNameToString(promiseConstructorName))
			return
		}
	}

	c.checkAwaitedType(returnType, false /*withAlias*/, node, Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member)

	reportErrorForInvalidReturnType := func(message DiagnosticMessage, returnTypeNode TypeNode, returnTypeErrorLocation TypeNode, typeName string) {
		if returnTypeNode == returnTypeErrorLocation {
			c.error(returnTypeErrorLocation, message, typeName)
		} else {
			diag := c.error(returnTypeErrorLocation, Diagnostics.The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type)
			addRelatedInfo(diag, createDiagnosticForNode(returnTypeNode, message, typeName))
		}
	}

}

func (c *Checker) checkGrammarDecorator(decorator Decorator) bool {
	sourceFile := getSourceFileOfNode(decorator)
	if !c.hasParseDiagnostics(sourceFile) {
		var node Expression = decorator.Expression

		// DecoratorParenthesizedExpression :
		//   `(` Expression `)`

		if isParenthesizedExpression(node) {
			return false
		}

		canHaveCallExpression := true
		var errorNode *ast.Node
		for true {
			// Allow TS syntax such as non-null assertions and instantiation expressions
			if isExpressionWithTypeArguments(node) || isNonNullExpression(node) {
				node = node.Expression
				continue
			}

			// DecoratorCallExpression :
			//   DecoratorMemberExpression Arguments

			if isCallExpression(node) {
				if !canHaveCallExpression {
					errorNode = node
				}
				if node.QuestionDotToken != nil {
					// Even if we already have an error node, error at the `?.` token since it appears earlier.
					errorNode = node.QuestionDotToken
				}
				node = node.Expression
				canHaveCallExpression = false
				continue
			}

			// DecoratorMemberExpression :
			//   IdentifierReference
			//   DecoratorMemberExpression `.` IdentifierName
			//   DecoratorMemberExpression `.` PrivateIdentifier

			if isPropertyAccessExpression(node) {
				if node.QuestionDotToken != nil {
					// Even if we already have an error node, error at the `?.` token since it appears earlier.
					errorNode = node.QuestionDotToken
				}
				node = node.Expression
				canHaveCallExpression = false
				continue
			}

			if !isIdentifier(node) {
				// Even if we already have an error node, error at this node since it appears earlier.
				errorNode = node
			}

			break
		}

		if errorNode != nil {
			addRelatedInfo(c.error(decorator.Expression, Diagnostics.Expression_must_be_enclosed_in_parentheses_to_be_used_as_a_decorator), createDiagnosticForNode(errorNode, Diagnostics.Invalid_syntax_in_decorator))
			return true
		}
	}

	return false
}

/** Check a decorator */

func (c *Checker) checkDecorator(node Decorator) {
	c.checkGrammarDecorator(node)

	signature := c.getResolvedSignature(node)
	c.checkDeprecatedSignature(signature, node)
	returnType := c.getReturnTypeOfSignature(signature)
	if returnType.flags&TypeFlagsAny != 0 {
		return
	}

	// if we fail to get a signature and return type here, we will have already reported a grammar error in `checkDecorators`.
	decoratorSignature := c.getDecoratorCallSignature(node)
	if decoratorSignature. /* ? */ resolvedReturnType == nil {
		return
	}

	var headMessage DiagnosticMessage
	expectedReturnType := decoratorSignature.resolvedReturnType
	switch node.Parent.Kind {
	case ast.KindClassDeclaration,
		ast.KindClassExpression:
		headMessage = Diagnostics.Decorator_function_return_type_0_is_not_assignable_to_type_1
	case ast.KindPropertyDeclaration:
		if !c.legacyDecorators {
			headMessage = Diagnostics.Decorator_function_return_type_0_is_not_assignable_to_type_1
			break
		}
		fallthrough
	case ast.KindParameter:
		headMessage = Diagnostics.Decorator_function_return_type_is_0_but_is_expected_to_be_void_or_any
	case ast.KindMethodDeclaration,
		ast.KindGetAccessor,
		ast.KindSetAccessor:
		headMessage = Diagnostics.Decorator_function_return_type_0_is_not_assignable_to_type_1
	default:
		return Debug.failBadSyntaxKind(node.Parent)
	}

	c.checkTypeAssignableTo(returnType, expectedReturnType, node.Expression, headMessage)
}

/**
 * Creates a synthetic `Signature` corresponding to a call signature.
 */

func (c *Checker) createCallSignature(typeParameters *[]TypeParameter, thisParameter *ast.Symbol, parameters []*ast.Symbol, returnType *Type, typePredicate TypePredicate, minArgumentCount number /*  = parameters.length */, flags SignatureFlags /*  = SignatureFlags.None */) Signature {
	decl := factory.createFunctionTypeNode(nil, emptyArray, factory.createKeywordTypeNode(ast.KindAnyKeyword))
	return c.createSignature(decl, typeParameters, thisParameter, parameters, returnType, typePredicate, minArgumentCount, flags)
}

/**
 * Creates a synthetic `FunctionType`
 */

func (c *Checker) createFunctionType(typeParameters *[]TypeParameter, thisParameter *ast.Symbol, parameters []*ast.Symbol, returnType *Type, typePredicate TypePredicate, minArgumentCount number, flags SignatureFlags) ObjectType {
	signature := c.createCallSignature(typeParameters, thisParameter, parameters, returnType, typePredicate, minArgumentCount, flags)
	return c.getOrCreateTypeFromSignature(signature)
}

func (c *Checker) createGetterFunctionType(t *Type) ObjectType {
	return c.createFunctionType(nil, nil /*thisParameter*/, emptyArray, t)
}

func (c *Checker) createSetterFunctionType(t *Type) ObjectType {
	valueParam := c.createParameter("value" /* as __String */, t)
	return c.createFunctionType(nil, nil /*thisParameter*/, []TransientSymbol{valueParam}, c.voidType)
}

func (c *Checker) getEntityNameForDecoratorMetadata(node *TypeNode) *EntityName {
	if node != nil {
		switch node.Kind {
		case ast.KindIntersectionType,
			ast.KindUnionType:
			return c.getEntityNameForDecoratorMetadataFromTypeList(node.AsUnionOrIntersectionTypeNode().Types)
		case ast.KindConditionalType:
			return c.getEntityNameForDecoratorMetadataFromTypeList([]TypeNode{node.AsConditionalTypeNode().TrueType, node.AsConditionalTypeNode().FalseType})
		case ast.KindParenthesizedType,
			ast.KindNamedTupleMember:
			return c.getEntityNameForDecoratorMetadata(node.AsParenthesizedTypeNode().Type_)
		case ast.KindTypeReference:
			return node.AsTypeReferenceNode().TypeName
		}
	}
}

func (c *Checker) getEntityNameForDecoratorMetadataFromTypeList(types []TypeNode) *EntityName {
	var commonEntityName *EntityName
	for _, typeNode := range types {
		for typeNode.Kind == ast.KindParenthesizedType || typeNode.Kind == ast.KindNamedTupleMember {
			typeNode = (typeNode /* as ParenthesizedTypeNode | NamedTupleMember */).Type_
			// Skip parens if need be
		}
		if typeNode.Kind == ast.KindNeverKeyword {
			continue
			// Always elide `never` from the union/intersection if possible
		}
		if !c.strictNullChecks && (typeNode.Kind == ast.KindLiteralType && typeNode.AsLiteralTypeNode().Literal.Kind == ast.KindNullKeyword || typeNode.Kind == ast.KindUndefinedKeyword) {
			continue
			// Elide null and undefined from unions for metadata, just like what we did prior to the implementation of strict null checks
		}
		individualEntityName := c.getEntityNameForDecoratorMetadata(typeNode)
		if individualEntityName == nil {
			// Individual is something like string number
			// So it would be serialized to either that type or object
			// Safe to return here
			return nil
		}

		if commonEntityName != nil {
			// Note this is in sync with the transformation that happens for type node.
			// Keep this in sync with serializeUnionOrIntersectionType
			// Verify if they refer to same entity and is identifier
			// return undefined if they dont match because we would emit object
			if !isIdentifier(commonEntityName) || !isIdentifier(individualEntityName) || commonEntityName.EscapedText != individualEntityName.EscapedText {
				return nil
			}
		} else {
			commonEntityName = individualEntityName
		}
	}
	return commonEntityName
}

func (c *Checker) getParameterTypeNodeForDecoratorCheck(node ParameterDeclaration) *TypeNode {
	typeNode := getEffectiveTypeAnnotationNode(node)
	if isRestParameter(node) {
		return getRestParameterElementType(typeNode)
	} else {
		return typeNode
	}
}

/** Check the decorators of a node */

func (c *Checker) checkDecorators(node *ast.Node) {
	// skip this check for nodes that cannot have decorators. These should have already had an error reported by
	// checkGrammarModifiers.
	if !canHaveDecorators(node) || !hasDecorators(node) || node.Modifiers == nil || !nodeCanBeDecorated(c.legacyDecorators, node, node.Parent, node.Parent.Parent) {
		return
	}

	firstDecorator := core.Find(node.Modifiers, isDecorator)
	if firstDecorator == nil {
		return
	}

	if c.legacyDecorators {
		c.checkExternalEmitHelpers(firstDecorator, ExternalEmitHelpersDecorate)
		if node.Kind == ast.KindParameter {
			c.checkExternalEmitHelpers(firstDecorator, ExternalEmitHelpersParam)
		}
	} else if c.languageVersion < LanguageFeatureMinimumTarget.ClassAndClassElementDecorators {
		c.checkExternalEmitHelpers(firstDecorator, ExternalEmitHelpersESDecorateAndRunInitializers)
		if isClassDeclaration(node) {
			if node.Name == nil {
				c.checkExternalEmitHelpers(firstDecorator, ExternalEmitHelpersSetFunctionName)
			} else {
				member := c.getFirstTransformableStaticClassElement(node)
				if member != nil {
					c.checkExternalEmitHelpers(firstDecorator, ExternalEmitHelpersSetFunctionName)
				}
			}
		} else if !isClassExpression(node) {
			if isPrivateIdentifier(node.Name) && (isMethodDeclaration(node) || isAccessor(node) || isAutoAccessorPropertyDeclaration(node)) {
				c.checkExternalEmitHelpers(firstDecorator, ExternalEmitHelpersSetFunctionName)
			}
			if isComputedPropertyName(node.Name) {
				c.checkExternalEmitHelpers(firstDecorator, ExternalEmitHelpersPropKey)
			}
		}
	}

	c.markLinkedReferences(node, ReferenceHintDecorator)

	for _, modifier := range node.Modifiers {
		if isDecorator(modifier) {
			c.checkDecorator(modifier)
		}
	}
}

func (c *Checker) checkFunctionDeclaration(node FunctionDeclaration) {
	c.addLazyDiagnostic(checkFunctionDeclarationDiagnostics)

	checkFunctionDeclarationDiagnostics := func() {
		c.checkFunctionOrMethodDeclaration(node)
		c.checkGrammarForGenerator(node)
		c.checkCollisionsForDeclarationName(node, node.Name)
	}

}

func (c *Checker) checkJSDocTypeAliasTag(node Union[JSDocTypedefTag, JSDocCallbackTag]) {
	if node.TypeExpression == nil {
		// If the node had `@property` tags, `typeExpression` would have been set to the first property tag.
		c.error(node.Name, Diagnostics.JSDoc_typedef_tag_should_either_have_a_type_annotation_or_be_followed_by_property_or_member_tags)
	}

	if node.Name != nil {
		c.checkTypeNameIsReserved(node.Name, Diagnostics.Type_alias_name_cannot_be_0)
	}
	c.checkSourceElement(node.TypeExpression)
	c.checkTypeParameters(getEffectiveTypeParameterDeclarations(node))
}

func (c *Checker) checkJSDocTemplateTag(node JSDocTemplateTag) {
	c.checkSourceElement(node.Constraint)
	for _, tp := range node.TypeParameters {
		c.checkSourceElement(tp)
	}
}

func (c *Checker) checkJSDocTypeTag(node JSDocTypeTag) {
	c.checkSourceElement(node.TypeExpression)
}

func (c *Checker) checkJSDocSatisfiesTag(node JSDocSatisfiesTag) {
	c.checkSourceElement(node.TypeExpression)
	host := getEffectiveJSDocHost(node)
	if host != nil {
		tags := getAllJSDocTags(host, isJSDocSatisfiesTag)
		if length(tags) > 1 {
			for i := 1; i < length(tags); i++ {
				tagName := tags[i].TagName
				c.error(tagName, Diagnostics._0_tag_already_specified, idText(tagName))
			}
		}
	}
}

func (c *Checker) checkJSDocLinkLikeTag(node Union[JSDocLink, JSDocLinkCode, JSDocLinkPlain]) {
	if node.Name != nil {
		c.resolveJSDocMemberName(node.Name, true /*ignoreErrors*/)
	}
}

func (c *Checker) checkJSDocParameterTag(node JSDocParameterTag) {
	c.checkSourceElement(node.TypeExpression)
}

func (c *Checker) checkJSDocPropertyTag(node JSDocPropertyTag) {
	c.checkSourceElement(node.TypeExpression)
}

func (c *Checker) checkJSDocFunctionType(node JSDocFunctionType) {
	c.addLazyDiagnostic(checkJSDocFunctionTypeImplicitAny)
	c.checkSignatureDeclaration(node)

	checkJSDocFunctionTypeImplicitAny := func() {
		if node.Type_ == nil && !isJSDocConstructSignature(node) {
			c.reportImplicitAny(node, c.anyType)
		}
	}

}

func (c *Checker) checkJSDocThisTag(node JSDocThisTag) {
	host := getEffectiveJSDocHost(node)
	if host != nil && isArrowFunction(host) {
		c.error(node.TagName, Diagnostics.An_arrow_function_cannot_have_a_this_parameter)
	}
}

func (c *Checker) checkJSDocImportTag(node JSDocImportTag) {
	c.checkImportAttributes(node)
}

func (c *Checker) checkJSDocImplementsTag(node JSDocImplementsTag) {
	classLike := getEffectiveJSDocHost(node)
	if classLike == nil || !isClassDeclaration(classLike) && !isClassExpression(classLike) {
		c.error(classLike, Diagnostics.JSDoc_0_is_not_attached_to_a_class, idText(node.TagName))
	}
}

func (c *Checker) checkJSDocAugmentsTag(node JSDocAugmentsTag) {
	classLike := getEffectiveJSDocHost(node)
	if classLike == nil || !isClassDeclaration(classLike) && !isClassExpression(classLike) {
		c.error(classLike, Diagnostics.JSDoc_0_is_not_attached_to_a_class, idText(node.TagName))
		return
	}

	augmentsTags := getJSDocTags(classLike).filter(isJSDocAugmentsTag)
	Debug.assert(augmentsTags.length > 0)
	if augmentsTags.length > 1 {
		c.error(augmentsTags[1], Diagnostics.Class_declarations_cannot_have_more_than_one_augments_or_extends_tag)
	}

	name := c.getIdentifierFromEntityNameExpression(node.Class.Expression)
	extend := getClassExtendsHeritageElement(classLike)
	if extend != nil {
		className := c.getIdentifierFromEntityNameExpression(extend.Expression)
		if className != nil && name.EscapedText != className.EscapedText {
			c.error(name, Diagnostics.JSDoc_0_1_does_not_match_the_extends_2_clause, idText(node.TagName), idText(name), idText(className))
		}
	}
}

func (c *Checker) checkJSDocAccessibilityModifiers(node Union[JSDocPublicTag, JSDocProtectedTag, JSDocPrivateTag]) {
	host := getJSDocHost(node)
	if host != nil && isPrivateIdentifierClassElementDeclaration(host) {
		c.error(node, Diagnostics.An_accessibility_modifier_cannot_be_used_with_a_private_identifier)
	}
}

/* OVERLOAD: function getIdentifierFromEntityNameExpression(node: Identifier | PropertyAccessExpression): Identifier | PrivateIdentifier; */
/* OVERLOAD: function getIdentifierFromEntityNameExpression(node: Expression): Identifier | PrivateIdentifier | undefined; */
func (c *Checker) getIdentifierFromEntityNameExpression(node Expression) Union[Identifier, PrivateIdentifier, undefined] {
	switch node.Kind {
	case ast.KindIdentifier:
		return node.AsIdentifier()
	case ast.KindPropertyAccessExpression:
		return node.AsPropertyAccessExpression().Name
	default:
		return nil
	}
}

func (c *Checker) checkFunctionOrMethodDeclaration(node Union[FunctionDeclaration, MethodDeclaration, MethodSignature]) {
	c.checkDecorators(node)
	c.checkSignatureDeclaration(node)
	functionFlags := getFunctionFlags(node)

	// Do not use hasDynamicName here, because that returns false for well known symbols.
	// We want to perform checkComputedPropertyName for all computed properties, including
	// well known symbols.
	if node.Name != nil && node.Name.Kind == ast.KindComputedPropertyName {
		// This check will account for methods in class/interface declarations,
		// as well as accessors in classes/object literals
		c.checkComputedPropertyName(node.Name)
	}

	if c.hasBindableName(node) {
		// first we want to check the local symbol that contain this declaration
		// - if node.localSymbol !== undefined - this is current declaration is exported and localSymbol points to the local symbol
		// - if node.localSymbol === undefined - this node is non-exported so we can just pick the result of getSymbolOfNode
		symbol := c.getSymbolOfDeclaration(node)
		localSymbol := node.LocalSymbol || symbol

		// Since the javascript won't do semantic analysis like typescript,
		// if the javascript file comes before the typescript file and both contain same name functions,
		// checkFunctionOrConstructorSymbol wouldn't be called if we didnt ignore javascript function.
		firstDeclaration := localSymbol.Declarations. /* ? */ find(func(declaration Declaration) bool {
			return declaration.Kind == node.Kind && declaration.Flags&ast.NodeFlagsJavaScriptFile == 0
		})

		// Only type check the symbol once
		if node == firstDeclaration {
			c.checkFunctionOrConstructorSymbol(localSymbol)
		}

		if symbol.Parent != nil {
			// run check on export symbol to check that modifiers agree across all exported declarations
			c.checkFunctionOrConstructorSymbol(symbol)
		}
	}

	var body *Block
	if node.Kind == ast.KindMethodSignature {
		body = nil
	} else {
		body = node.Body
	}
	c.checkSourceElement(body)
	c.checkAllCodePathsInNonVoidFunctionReturnOrThrow(node, c.getReturnTypeFromAnnotation(node))

	c.addLazyDiagnostic(checkFunctionOrMethodDeclarationDiagnostics)

	// A js function declaration can have a @type tag instead of a return type node, but that type must have a call signature
	if isInJSFile(node) {
		typeTag := getJSDocTypeTag(node)
		if typeTag != nil && typeTag.TypeExpression && c.getContextualCallSignature(c.getTypeFromTypeNode(typeTag.TypeExpression), node) == nil {
			c.error(typeTag.TypeExpression.Type_, Diagnostics.The_type_of_a_function_declaration_must_match_the_function_s_signature)
		}
	}

	checkFunctionOrMethodDeclarationDiagnostics := func() {
		if getEffectiveReturnTypeNode(node) == nil {
			// Report an implicit any error if there is no body, no explicit return type, and node is not a private method
			// in an ambient context
			if nodeIsMissing(body) && !c.isPrivateWithinAmbient(node) {
				c.reportImplicitAny(node, c.anyType)
			}

			if functionFlags&FunctionFlagsGenerator != 0 && nodeIsPresent(body) {
				// A generator with a body and no type annotation can still cause errors. It can error if the
				// yielded values have no common supertype, or it can give an implicit any error if it has no
				// yielded values. The only way to trigger these errors is to try checking its return type.
				c.getReturnTypeOfSignature(c.getSignatureFromDeclaration(node))
			}
		}
	}

}

func (c *Checker) registerForUnusedIdentifiersCheck(node PotentiallyUnusedIdentifier) {
	c.addLazyDiagnostic(registerForUnusedIdentifiersCheckDiagnostics)

	registerForUnusedIdentifiersCheckDiagnostics := func() {
		// May be in a call such as getTypeOfNode that happened to call this. But potentiallyUnusedIdentifiers is only defined in the scope of `checkSourceFile`.
		sourceFile := getSourceFileOfNode(node)
		potentiallyUnusedIdentifiers := c.allPotentiallyUnusedIdentifiers.get(sourceFile.Path)
		if potentiallyUnusedIdentifiers == nil {
			potentiallyUnusedIdentifiers = []never{}
			c.allPotentiallyUnusedIdentifiers.set(sourceFile.Path, potentiallyUnusedIdentifiers)
		}
		// TODO: GH#22580
		// Debug.assert(addToSeen(seenPotentiallyUnusedIdentifiers, getNodeId(node)), "Adding potentially-unused identifier twice");
		potentiallyUnusedIdentifiers.push(node)
	}

}

func (c *Checker) checkUnusedIdentifiers(potentiallyUnusedIdentifiers []PotentiallyUnusedIdentifier, addDiagnostic AddUnusedDiagnostic) {
	for _, node := range potentiallyUnusedIdentifiers {
		switch node.Kind {
		case ast.KindClassDeclaration,
			ast.KindClassExpression:
			c.checkUnusedClassMembers(node, addDiagnostic)
			c.checkUnusedTypeParameters(node, addDiagnostic)
		case ast.KindSourceFile,
			ast.KindModuleDeclaration,
			ast.KindBlock,
			ast.KindCaseBlock,
			ast.KindForStatement,
			ast.KindForInStatement,
			ast.KindForOfStatement:
			c.checkUnusedLocalsAndParameters(node, addDiagnostic)
		case ast.KindConstructor,
			ast.KindFunctionExpression,
			ast.KindFunctionDeclaration,
			ast.KindArrowFunction,
			ast.KindMethodDeclaration,
			ast.KindGetAccessor,
			ast.KindSetAccessor:
			// Only report unused parameters on the implementation, not overloads.
			if node.Body != nil {
				c.checkUnusedLocalsAndParameters(node, addDiagnostic)
			}
			c.checkUnusedTypeParameters(node, addDiagnostic)
		case ast.KindMethodSignature,
			ast.KindCallSignature,
			ast.KindConstructSignature,
			ast.KindFunctionType,
			ast.KindConstructorType,
			ast.KindTypeAliasDeclaration,
			ast.KindInterfaceDeclaration:
			c.checkUnusedTypeParameters(node, addDiagnostic)
		case ast.KindInferType:
			c.checkUnusedInferTypeParameter(node, addDiagnostic)
		default:
			Debug.assertNever(node, "Node should not have been registered for unused identifiers check")
		}
	}
}

func (c *Checker) errorUnusedLocal(declaration Declaration, name string, addDiagnostic AddUnusedDiagnostic) {
	node := getNameOfDeclaration(declaration) || declaration
	var message any
	if isTypeDeclaration(declaration) {
		message = Diagnostics._0_is_declared_but_never_used
	} else {
		message = Diagnostics._0_is_declared_but_its_value_is_never_read
	}
	addDiagnostic(declaration, UnusedKindLocal, createDiagnosticForNode(node, message, name))
}

func (c *Checker) isIdentifierThatStartsWithUnderscore(node *ast.Node) bool {
	return isIdentifier(node) && idText(node).charCodeAt(0) == CharacterCodes_
}

func (c *Checker) checkUnusedClassMembers(node Union[ClassDeclaration, ClassExpression], addDiagnostic AddUnusedDiagnostic) {
	for _, member := range node.Members {
		switch member.Kind {
		case ast.KindMethodDeclaration,
			ast.KindPropertyDeclaration,
			ast.KindGetAccessor,
			ast.KindSetAccessor:
			if member.Kind == ast.KindSetAccessor && member.Symbol.Flags&ast.SymbolFlagsGetAccessor != 0 {
				// Already would have reported an error on the getter.
				break
			}
			symbol := c.getSymbolOfDeclaration(member)
			if !symbol.IsReferenced && (hasEffectiveModifier(member, ast.ModifierFlagsPrivate) || isNamedDeclaration(member) && isPrivateIdentifier(member.Name)) && member.Flags&ast.NodeFlagsAmbient == 0 {
				addDiagnostic(member, UnusedKindLocal, createDiagnosticForNode(member.Name, Diagnostics._0_is_declared_but_its_value_is_never_read, c.symbolToString(symbol)))
			}
		case ast.KindConstructor:
			for _, parameter := range member.AsConstructorDeclaration().Parameters {
				if !parameter.Symbol.IsReferenced && hasSyntacticModifier(parameter, ast.ModifierFlagsPrivate) {
					addDiagnostic(parameter, UnusedKindLocal, createDiagnosticForNode(parameter.Name, Diagnostics.Property_0_is_declared_but_its_value_is_never_read, symbolName(parameter.Symbol)))
				}
			}
		case ast.KindIndexSignature,
			ast.KindSemicolonClassElement,
			ast.KindClassStaticBlockDeclaration:
			// Can't be private
		default:
			Debug.fail("Unexpected class member")
		}
	}
}

func (c *Checker) checkUnusedInferTypeParameter(node InferTypeNode, addDiagnostic AddUnusedDiagnostic) {
	TODO_IDENTIFIER := node
	if c.isTypeParameterUnused(typeParameter) {
		addDiagnostic(node, UnusedKindParameter, createDiagnosticForNode(node, Diagnostics._0_is_declared_but_its_value_is_never_read, idText(typeParameter.Name)))
	}
}

func (c *Checker) checkUnusedTypeParameters(node Union[ClassLikeDeclaration, SignatureDeclaration, InterfaceDeclaration, TypeAliasDeclaration], addDiagnostic AddUnusedDiagnostic) {
	// Only report errors on the last declaration for the type parameter container;
	// this ensures that all uses have been accounted for.
	declarations := c.getSymbolOfDeclaration(node).Declarations
	if declarations == nil || core.LastOrNil(declarations) != node {
		return
	}

	typeParameters := getEffectiveTypeParameterDeclarations(node)
	seenParentsWithEveryUnused := NewSet[DeclarationWithTypeParameterChildren]()

	for _, typeParameter := range typeParameters {
		if !c.isTypeParameterUnused(typeParameter) {
			continue
		}

		name := idText(typeParameter.Name)
		TODO_IDENTIFIER := typeParameter
		if parent.Kind != ast.KindInferType && parent.TypeParameters.every(c.isTypeParameterUnused) {
			if tryAddToSet(seenParentsWithEveryUnused, parent) {
				sourceFile := getSourceFileOfNode(parent)
				var range_ TextRange
				if isJSDocTemplateTag(parent) {
					range_ = rangeOfNode(parent)
				} else {
					range_ = rangeOfTypeParameters(sourceFile, parent.TypeParameters)
				}
				only := parent.TypeParameters.length == 1
				// TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag
				var messageAndArg DiagnosticAndArguments
				if only {
					messageAndArg = []any{Diagnostics._0_is_declared_but_its_value_is_never_read, name}
				} else {
					messageAndArg = []any{Diagnostics.All_type_parameters_are_unused}
				}
				addDiagnostic(typeParameter, UnusedKindParameter, createFileDiagnostic(sourceFile, range_.pos, range_.end-range_.pos, messageAndArg...))
			}
		} else {
			// TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag
			addDiagnostic(typeParameter, UnusedKindParameter, createDiagnosticForNode(typeParameter, Diagnostics._0_is_declared_but_its_value_is_never_read, name))
		}
	}
}

func (c *Checker) isTypeParameterUnused(typeParameter TypeParameterDeclaration) bool {
	return c.getMergedSymbol(typeParameter.Symbol).IsReferenced&ast.SymbolFlagsTypeParameter == 0 && !c.isIdentifierThatStartsWithUnderscore(typeParameter.Name)
}

func (c *Checker) addToGroup(map_ Map[string /* TODO(TS-TO-GO) TypeNode TupleType: [K, V[]] */, any], key K, value V, getKey func(key K) Union[number, string]) {
	keyString := String(getKey(key))
	group := map_.get(keyString)
	if group != nil {
		group[1].push(value)
	} else {
		map_.set(keyString, []any{key, []V{value}})
	}
}

func (c *Checker) tryGetRootParameterDeclaration(node *ast.Node) *ParameterDeclaration {
	return tryCast(getRootDeclaration(node), isParameter)
}

func (c *Checker) isValidUnusedLocalDeclaration(declaration Declaration) bool {
	if isBindingElement(declaration) {
		if isObjectBindingPattern(declaration.Parent) {
			/**
			 * ignore starts with underscore names _
			 * const { a: _a } = { a: 1 }
			 */
			return declaration.PropertyName != nil && c.isIdentifierThatStartsWithUnderscore(declaration.Name)
		}
		return c.isIdentifierThatStartsWithUnderscore(declaration.Name)
	}
	return isAmbientModule(declaration) || (isVariableDeclaration(declaration) && isForInOrOfStatement(declaration.Parent.Parent) || c.isImportedDeclaration(declaration)) && c.isIdentifierThatStartsWithUnderscore(declaration.Name)
}

func (c *Checker) checkUnusedLocalsAndParameters(nodeWithLocals HasLocals, addDiagnostic AddUnusedDiagnostic) {
	// Ideally we could use the ImportClause directly as a key, but must wait until we have full ES6 maps. So must store key along with value.
	unusedImports := NewMap[string /* TODO(TS-TO-GO) TypeNode TupleType: [ImportClause, ImportedDeclaration[]] */, any]()
	unusedDestructures := NewMap[string /* TODO(TS-TO-GO) TypeNode TupleType: [BindingPattern, BindingElement[]] */, any]()
	unusedVariables := NewMap[string /* TODO(TS-TO-GO) TypeNode TupleType: [VariableDeclarationList, VariableDeclaration[]] */, any]()
	nodeWithLocals.Locals.forEach(func(local *ast.Symbol) {
		// If it's purely a type parameter, ignore, will be checked in `checkUnusedTypeParameters`.
		// If it's a type parameter merged with a parameter, check if the parameter-side is used.
		if ifElse(local.Flags&ast.SymbolFlagsTypeParameter != 0, !(local.Flags&ast.SymbolFlagsVariable != 0 && local.IsReferenced&ast.SymbolFlagsVariable == 0), local.IsReferenced || local.ExportSymbol != nil) {
			return
		}

		if local.Declarations != nil {
			for _, declaration := range local.Declarations {
				if c.isValidUnusedLocalDeclaration(declaration) {
					continue
				}

				if c.isImportedDeclaration(declaration) {
					c.addToGroup(unusedImports, c.importClauseFromImported(declaration), declaration, getNodeId)
				} else if isBindingElement(declaration) && isObjectBindingPattern(declaration.Parent) {
					// In `{ a, ...b }, `a` is considered used since it removes a property from `b`. `b` may still be unused though.
					lastElement := core.LastOrNil(declaration.Parent.Elements)
					if declaration == lastElement || core.LastOrNil(declaration.Parent.Elements).DotDotDotToken == nil {
						c.addToGroup(unusedDestructures, declaration.Parent, declaration, getNodeId)
					}
				} else if isVariableDeclaration(declaration) {
					blockScopeKind := c.getCombinedNodeFlagsCached(declaration) & ast.NodeFlagsBlockScoped
					name := getNameOfDeclaration(declaration)
					if blockScopeKind != ast.NodeFlagsUsing && blockScopeKind != ast.NodeFlagsAwaitUsing || name == nil || !c.isIdentifierThatStartsWithUnderscore(name) {
						c.addToGroup(unusedVariables, declaration.Parent, declaration, getNodeId)
					}
				} else {
					parameter := local.ValueDeclaration && c.tryGetRootParameterDeclaration(local.ValueDeclaration)
					name := local.ValueDeclaration && getNameOfDeclaration(local.ValueDeclaration)
					if parameter != nil && name != nil {
						if !isParameterPropertyDeclaration(parameter, parameter.Parent) && !parameterIsThisKeyword(parameter) && !c.isIdentifierThatStartsWithUnderscore(name) {
							if isBindingElement(declaration) && isArrayBindingPattern(declaration.Parent) {
								c.addToGroup(unusedDestructures, declaration.Parent, declaration, getNodeId)
							} else {
								addDiagnostic(parameter, UnusedKindParameter, createDiagnosticForNode(name, Diagnostics._0_is_declared_but_its_value_is_never_read, symbolName(local)))
							}
						}
					} else {
						c.errorUnusedLocal(declaration, symbolName(local), addDiagnostic)
					}
				}
			}
		}
	})
	unusedImports.forEach(func(TODO_IDENTIFIER /* TODO(TS-TO-GO) inferred type [ImportClause, (ImportClause | NamespaceImport | ImportSpecifier)[]] */ any) {
		importDecl := importClause.Parent
		nDeclarations := (ifElse(importClause.Name != nil, 1, 0)) + (ifElse(importClause.NamedBindings != nil, (ifElse(importClause.NamedBindings.Kind == ast.KindNamespaceImport, 1, importClause.NamedBindings.Elements.length)), 0))
		if nDeclarations == unuseds.length {
			addDiagnostic(importDecl, UnusedKindLocal, ifElse(unuseds.length == 1, createDiagnosticForNode(importDecl, Diagnostics._0_is_declared_but_its_value_is_never_read, idText(core.FirstOrNil(unuseds).Name)), createDiagnosticForNode(importDecl, Diagnostics.All_imports_in_import_declaration_are_unused)))
		} else {
			for _, unused := range unuseds {
				c.errorUnusedLocal(unused, idText(unused.Name), addDiagnostic)
			}
		}
	})
	unusedDestructures.forEach(func(TODO_IDENTIFIER /* TODO(TS-TO-GO) inferred type [BindingPattern, BindingElement[]] */ any) {
		var kind UnusedKind
		if c.tryGetRootParameterDeclaration(bindingPattern.Parent) != nil {
			kind = UnusedKindParameter
		} else {
			kind = UnusedKindLocal
		}
		if bindingPattern.Elements.length == bindingElements.length {
			if bindingElements.length == 1 && bindingPattern.Parent.Kind == ast.KindVariableDeclaration && bindingPattern.Parent.Parent.Kind == ast.KindVariableDeclarationList {
				c.addToGroup(unusedVariables, bindingPattern.Parent.Parent, bindingPattern.Parent, getNodeId)
			} else {
				addDiagnostic(bindingPattern, kind, ifElse(bindingElements.length == 1, createDiagnosticForNode(bindingPattern, Diagnostics._0_is_declared_but_its_value_is_never_read, c.bindingNameText(core.FirstOrNil(bindingElements).Name)), createDiagnosticForNode(bindingPattern, Diagnostics.All_destructured_elements_are_unused)))
			}
		} else {
			for _, e := range bindingElements {
				addDiagnostic(e, kind, createDiagnosticForNode(e, Diagnostics._0_is_declared_but_its_value_is_never_read, c.bindingNameText(e.Name)))
			}
		}
	})
	unusedVariables.forEach(func(TODO_IDENTIFIER /* TODO(TS-TO-GO) inferred type [VariableDeclarationList, VariableDeclaration[]] */ any) {
		if declarationList.Declarations.length == declarations.length {
			addDiagnostic(declarationList, UnusedKindLocal, ifElse(declarations.length == 1, createDiagnosticForNode(core.FirstOrNil(declarations).Name, Diagnostics._0_is_declared_but_its_value_is_never_read, c.bindingNameText(core.FirstOrNil(declarations).Name)), createDiagnosticForNode(ifElse(declarationList.Parent.Kind == ast.KindVariableStatement, declarationList.Parent, declarationList), Diagnostics.All_variables_are_unused)))
		} else {
			for _, decl := range declarations {
				addDiagnostic(decl, UnusedKindLocal, createDiagnosticForNode(decl, Diagnostics._0_is_declared_but_its_value_is_never_read, c.bindingNameText(decl.Name)))
			}
		}
	})
}

func (c *Checker) checkPotentialUncheckedRenamedBindingElementsInTypes() {
	for _, node := range c.potentialUnusedRenamedBindingElementsInTypes {
		if !c.getSymbolOfDeclaration(node). /* ? */ IsReferenced {
			wrappingDeclaration := walkUpBindingElementsAndPatterns(node)
			Debug.assert(isPartOfParameterDeclaration(wrappingDeclaration), "Only parameter declaration should be checked here")
			diagnostic := createDiagnosticForNode(node.Name, Diagnostics._0_is_an_unused_renaming_of_1_Did_you_intend_to_use_it_as_a_type_annotation, declarationNameToString(node.Name), declarationNameToString(node.PropertyName))
			if wrappingDeclaration.Type_ == nil {
				// entire parameter does not have type annotation, suggest adding an annotation
				addRelatedInfo(diagnostic, createFileDiagnostic(getSourceFileOfNode(wrappingDeclaration), wrappingDeclaration.End, 0, Diagnostics.We_can_only_write_a_type_for_0_by_adding_a_type_for_the_entire_parameter_here, declarationNameToString(node.PropertyName)))
			}
			c.diagnostics.add(diagnostic)
		}
	}
}

func (c *Checker) bindingNameText(name BindingName) string {
	switch name.Kind {
	case ast.KindIdentifier:
		return idText(name)
	case ast.KindArrayBindingPattern,
		ast.KindObjectBindingPattern:
		return c.bindingNameText(cast(core.FirstOrNil(name.Elements), isBindingElement).Name)
	default:
		return Debug.assertNever(name)
	}
}

func (c *Checker) isImportedDeclaration(node *ast.Node) bool {
	return node.Kind == ast.KindImportClause || node.Kind == ast.KindImportSpecifier || node.Kind == ast.KindNamespaceImport
}

func (c *Checker) importClauseFromImported(decl ImportedDeclaration) ImportClause {
	switch {
	case decl.Kind == ast.KindImportClause:
		return decl
	case decl.Kind == ast.KindNamespaceImport:
		return decl.Parent
	default:
		return decl.Parent.Parent
	}
}

func (c *Checker) checkBlock(node Block) {
	// Grammar checking for SyntaxKind.Block
	if node.Kind == ast.KindBlock {
		c.checkGrammarStatementInAmbientContext(node)
	}
	if isFunctionOrModuleBlock(node) {
		saveFlowAnalysisDisabled := c.flowAnalysisDisabled
		forEach(node.Statements, c.checkSourceElement)
		c.flowAnalysisDisabled = saveFlowAnalysisDisabled
	} else {
		forEach(node.Statements, c.checkSourceElement)
	}
	if node.Locals != nil {
		c.registerForUnusedIdentifiersCheck(node)
	}
}

func (c *Checker) checkCollisionWithArgumentsInGeneratedCode(node SignatureDeclaration) {
	// no rest parameters \ declaration context \ overload - no codegen impact
	if c.languageVersion >= ScriptTargetES2015 || !hasRestParameter(node) || node.Flags&ast.NodeFlagsAmbient != 0 || nodeIsMissing(node.AsFunctionLikeDeclaration().Body) {
		return
	}

	forEach(node.Parameters, func(p ParameterDeclaration) {
		if p.Name && !isBindingPattern(p.Name) && p.Name.EscapedText == c.argumentsSymbol.EscapedName {
			c.errorSkippedOn("noEmit", p, Diagnostics.Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters)
		}
	})
}

/**
 * Checks whether an {@link Identifier}, in the context of another {@link Node}, would collide with a runtime value
 * of {@link name} in an outer scope. This is used to check for collisions for downlevel transformations that
 * require names like `Object`, `Promise`, `Reflect`, `require`, `exports`, etc.
 */

func (c *Checker) needCollisionCheckForIdentifier(node *ast.Node, identifier *Identifier, name string) bool {
	if identifier. /* ? */ escapedText != name {
		return false
	}

	if node.Kind == ast.KindPropertyDeclaration || node.Kind == ast.KindPropertySignature || node.Kind == ast.KindMethodDeclaration || node.Kind == ast.KindMethodSignature || node.Kind == ast.KindGetAccessor || node.Kind == ast.KindSetAccessor || node.Kind == ast.KindPropertyAssignment {
		// it is ok to have member named '_super', '_this', `Promise`, etc. - member access is always qualified
		return false
	}

	if node.Flags&ast.NodeFlagsAmbient != 0 {
		// ambient context - no codegen impact
		return false
	}

	if isImportClause(node) || isImportEqualsDeclaration(node) || isImportSpecifier(node) {
		// type-only imports do not require collision checks against runtime values.
		if isTypeOnlyImportOrExportDeclaration(node) {
			return false
		}
	}

	root := getRootDeclaration(node)
	if isParameter(root) && nodeIsMissing(root.Parent.AsFunctionLikeDeclaration().Body) {
		// just an overload - no codegen impact
		return false
	}

	return true
}

// this function will run after checking the source file so 'CaptureThis' is correct for all nodes
func (c *Checker) checkIfThisIsCapturedInEnclosingScope(node *ast.Node) {
	findAncestor(node, func(current *ast.Node) bool {
		if c.getNodeCheckFlags(current)&NodeCheckFlagsCaptureThis != 0 {
			isDeclaration := node.Kind != ast.KindIdentifier
			if isDeclaration {
				c.error(getNameOfDeclaration(node.AsDeclaration()), Diagnostics.Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference)
			} else {
				c.error(node, Diagnostics.Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference)
			}
			return true
		}
		return false
	})
}

func (c *Checker) checkIfNewTargetIsCapturedInEnclosingScope(node *ast.Node) {
	findAncestor(node, func(current *ast.Node) bool {
		if c.getNodeCheckFlags(current)&NodeCheckFlagsCaptureNewTarget != 0 {
			isDeclaration := node.Kind != ast.KindIdentifier
			if isDeclaration {
				c.error(getNameOfDeclaration(node.AsDeclaration()), Diagnostics.Duplicate_identifier_newTarget_Compiler_uses_variable_declaration_newTarget_to_capture_new_target_meta_property_reference)
			} else {
				c.error(node, Diagnostics.Expression_resolves_to_variable_declaration_newTarget_that_compiler_uses_to_capture_new_target_meta_property_reference)
			}
			return true
		}
		return false
	})
}

func (c *Checker) checkCollisionWithRequireExportsInGeneratedCode(node *ast.Node, name *Identifier) {
	// No need to check for require or exports for ES6 modules and later
	if host.getEmitModuleFormatOfFile(getSourceFileOfNode(node)) >= ModuleKindES2015 {
		return
	}

	if name == nil || !c.needCollisionCheckForIdentifier(node, name, "require") && !c.needCollisionCheckForIdentifier(node, name, "exports") {
		return
	}

	// Uninstantiated modules shouldnt do this check
	if isModuleDeclaration(node) && getModuleInstanceState(node) != ModuleInstanceStateInstantiated {
		return
	}

	// In case of variable declaration, node.parent is variable statement so look at the variable statement's parent
	parent := c.getDeclarationContainer(node)
	if parent.Kind == ast.KindSourceFile && isExternalOrCommonJsModule(parent.AsSourceFile()) {
		// If the declaration happens to be in external module, report error that require and exports are reserved keywords
		c.errorSkippedOn("noEmit", name, Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module, declarationNameToString(name), declarationNameToString(name))
	}
}

func (c *Checker) checkCollisionWithGlobalPromiseInGeneratedCode(node *ast.Node, name *Identifier) {
	if name == nil || c.languageVersion >= ScriptTargetES2017 || !c.needCollisionCheckForIdentifier(node, name, "Promise") {
		return
	}

	// Uninstantiated modules shouldnt do this check
	if isModuleDeclaration(node) && getModuleInstanceState(node) != ModuleInstanceStateInstantiated {
		return
	}

	// In case of variable declaration, node.parent is variable statement so look at the variable statement's parent
	parent := c.getDeclarationContainer(node)
	if parent.Kind == ast.KindSourceFile && isExternalOrCommonJsModule(parent.AsSourceFile()) && parent.Flags&ast.NodeFlagsHasAsyncFunctions != 0 {
		// If the declaration happens to be in external module, report error that Promise is a reserved identifier.
		c.errorSkippedOn("noEmit", name, Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_containing_async_functions, declarationNameToString(name), declarationNameToString(name))
	}
}

func (c *Checker) recordPotentialCollisionWithWeakMapSetInGeneratedCode(node *ast.Node, name Identifier) {
	if c.languageVersion <= ScriptTargetES2021 && (c.needCollisionCheckForIdentifier(node, name, "WeakMap") || c.needCollisionCheckForIdentifier(node, name, "WeakSet")) {
		c.potentialWeakMapSetCollisions.push(node)
	}
}

func (c *Checker) checkWeakMapSetCollision(node *ast.Node) {
	enclosingBlockScope := getEnclosingBlockScopeContainer(node)
	if c.getNodeCheckFlags(enclosingBlockScope)&NodeCheckFlagsContainsClassWithPrivateIdentifiers != 0 {
		Debug.assert(isNamedDeclaration(node) && isIdentifier(node.Name) && /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof node.name.escapedText */ TODO == "string", "The target of a WeakMap/WeakSet collision check should be an identifier")
		c.errorSkippedOn("noEmit", node, Diagnostics.Compiler_reserves_name_0_when_emitting_private_identifier_downlevel, node.Name.EscapedText)
	}
}

func (c *Checker) recordPotentialCollisionWithReflectInGeneratedCode(node *ast.Node, name *Identifier) {
	if name != nil && c.languageVersion >= ScriptTargetES2015 && c.languageVersion <= ScriptTargetES2021 && c.needCollisionCheckForIdentifier(node, name, "Reflect") {
		c.potentialReflectCollisions.push(node)
	}
}

func (c *Checker) checkReflectCollision(node *ast.Node) {
	hasCollision := false
	if isClassExpression(node) {
		// ClassExpression names don't contribute to their containers, but do matter for any of their block-scoped members.
		for _, member := range node.Members {
			if c.getNodeCheckFlags(member)&NodeCheckFlagsContainsSuperPropertyInStaticInitializer != 0 {
				hasCollision = true
				break
			}
		}
	} else if isFunctionExpression(node) {
		// FunctionExpression names don't contribute to their containers, but do matter for their contents
		if c.getNodeCheckFlags(node)&NodeCheckFlagsContainsSuperPropertyInStaticInitializer != 0 {
			hasCollision = true
		}
	} else {
		container := getEnclosingBlockScopeContainer(node)
		if container && c.getNodeCheckFlags(container)&NodeCheckFlagsContainsSuperPropertyInStaticInitializer != 0 {
			hasCollision = true
		}
	}
	if hasCollision {
		Debug.assert(isNamedDeclaration(node) && isIdentifier(node.Name), "The target of a Reflect collision check should be an identifier")
		c.errorSkippedOn("noEmit", node, Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_when_emitting_super_references_in_static_initializers, declarationNameToString(node.Name), "Reflect")
	}
}

func (c *Checker) checkCollisionsForDeclarationName(node *ast.Node, name *Identifier) {
	if name == nil {
		return
	}
	c.checkCollisionWithRequireExportsInGeneratedCode(node, name)
	c.checkCollisionWithGlobalPromiseInGeneratedCode(node, name)
	c.recordPotentialCollisionWithWeakMapSetInGeneratedCode(node, name)
	c.recordPotentialCollisionWithReflectInGeneratedCode(node, name)
	if isClassLike(node) {
		c.checkTypeNameIsReserved(name, Diagnostics.Class_name_cannot_be_0)
		if node.Flags&ast.NodeFlagsAmbient == 0 {
			c.checkClassNameCollisionWithObject(name)
		}
	} else if isEnumDeclaration(node) {
		c.checkTypeNameIsReserved(name, Diagnostics.Enum_name_cannot_be_0)
	}
}

func (c *Checker) checkVarDeclaredNamesNotShadowed(node Union[VariableDeclaration, BindingElement]) undefined {
	// - ScriptBody : StatementList
	// It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList
	// also occurs in the VarDeclaredNames of StatementList.

	// - Block : { StatementList }
	// It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList
	// also occurs in the VarDeclaredNames of StatementList.

	// Variable declarations are hoisted to the top of their function scope. They can shadow
	// block scoped declarations, which bind tighter. this will not be flagged as duplicate definition
	// by the binder as the declaration scope is different.
	// A non-initialized declaration is a no-op as the block declaration will resolve before the var
	// declaration. the problem is if the declaration has an initializer. this will act as a write to the
	// block declared value. this is fine for let, but not const.
	// Only consider declarations with initializers, uninitialized const declarations will not
	// step on a let/const variable.
	// Do not consider const and const declarations, as duplicate block-scoped declarations
	// are handled by the binder.
	// We are only looking for const declarations that step on let\const declarations from a
	// different scope. e.g.:
	//      {
	//          const x = 0; // localDeclarationSymbol obtained after name resolution will correspond to this declaration
	//          const x = 0; // symbol for this declaration will be 'symbol'
	//      }

	// skip block-scoped variables and parameters
	if (c.getCombinedNodeFlagsCached(node)&ast.NodeFlagsBlockScoped) != 0 || isPartOfParameterDeclaration(node) {
		return
	}

	// NOTE: in ES6 spec initializer is required in variable declarations where name is binding pattern
	// so we'll always treat binding elements as initialized

	symbol := c.getSymbolOfDeclaration(node)
	if symbol.Flags&ast.SymbolFlagsFunctionScopedVariable != 0 {
		if !isIdentifier(node.Name) {
			return Debug.fail()
		}
		localDeclarationSymbol := c.resolveName(node, node.Name.EscapedText, ast.SymbolFlagsVariable, nil /*nameNotFoundMessage*/, false /*isUse*/)
		if localDeclarationSymbol != nil && localDeclarationSymbol != symbol && localDeclarationSymbol.Flags&ast.SymbolFlagsBlockScopedVariable != 0 {
			if c.getDeclarationNodeFlagsFromSymbol(localDeclarationSymbol)&ast.NodeFlagsBlockScoped != 0 {
				varDeclList := getAncestor(localDeclarationSymbol.ValueDeclaration, ast.KindVariableDeclarationList)
				var container *ast.Node
				if varDeclList.Parent.Kind == ast.KindVariableStatement && varDeclList.Parent.Parent {
					container = varDeclList.Parent.Parent
				} else {
					container = nil
				}

				// names of block-scoped and function scoped variables can collide only
				// if block scoped variable is defined in the function\module\source file scope (because of variable hoisting)
				namesShareScope := container && (container.Kind == ast.KindBlock && isFunctionLike(container.Parent) || container.Kind == ast.KindModuleBlock || container.Kind == ast.KindModuleDeclaration || container.Kind == ast.KindSourceFile)

				// here we know that function scoped variable is "shadowed" by block scoped one
				// a var declatation can't hoist past a lexical declaration and it results in a SyntaxError at runtime
				if !namesShareScope {
					name := c.symbolToString(localDeclarationSymbol)
					c.error(node, Diagnostics.Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1, name, name)
				}
			}
		}
	}
}

func (c *Checker) convertAutoToAny(t *Type) *Type {
	switch {
	case t == c.autoType:
		return c.anyType
	case t == c.autoArrayType:
		return c.anyArrayType
	default:
		return t
	}
}

// Check variable, parameter, or property declaration
func (c *Checker) checkVariableLikeDeclaration(node Union[ParameterDeclaration, PropertyDeclaration, PropertySignature, VariableDeclaration, BindingElement]) {
	c.checkDecorators(node)
	if !isBindingElement(node) {
		c.checkSourceElement(node.Type_)
	}

	// JSDoc `function(string, string): string` syntax results in parameters with no name
	if !node.Name {
		return
	}

	// For a computed property, just check the initializer and exit
	// Do not use hasDynamicName here, because that returns false for well known symbols.
	// We want to perform checkComputedPropertyName for all computed properties, including
	// well known symbols.
	if node.Name.Kind == ast.KindComputedPropertyName {
		c.checkComputedPropertyName(node.Name)
		if hasOnlyExpressionInitializer(node) && node.Initializer != nil {
			c.checkExpressionCached(node.Initializer)
		}
	}

	if isBindingElement(node) {
		if node.PropertyName != nil && isIdentifier(node.Name) && isPartOfParameterDeclaration(node) && nodeIsMissing(getContainingFunction(node).AsFunctionLikeDeclaration().Body) {
			// type F = ({a: string}) => void;
			//               ^^^^^^
			// variable renaming in function type notation is confusing,
			// so we forbid it even if noUnusedLocals is not enabled
			c.potentialUnusedRenamedBindingElementsInTypes.push(node)
			return
		}

		if isObjectBindingPattern(node.Parent) && node.DotDotDotToken != nil && c.languageVersion < LanguageFeatureMinimumTarget.ObjectSpreadRest {
			c.checkExternalEmitHelpers(node, ExternalEmitHelpersRest)
		}
		// check computed properties inside property names of binding elements
		if node.PropertyName != nil && node.PropertyName.Kind == ast.KindComputedPropertyName {
			c.checkComputedPropertyName(node.PropertyName)
		}

		// check private/protected variable access
		parent := node.Parent.Parent
		var parentCheckMode /* TODO(TS-TO-GO) inferred type CheckMode.Normal | CheckMode.RestBindingElement */ any
		if node.DotDotDotToken != nil {
			parentCheckMode = CheckModeRestBindingElement
		} else {
			parentCheckMode = CheckModeNormal
		}
		parentType := c.getTypeForBindingElementParent(parent, parentCheckMode)
		name := node.PropertyName || node.Name
		if parentType != nil && !isBindingPattern(name) {
			exprType := c.getLiteralTypeFromPropertyName(name)
			if isTypeUsableAsPropertyName(exprType) {
				nameText := getPropertyNameFromType(exprType)
				property := c.getPropertyOfType(parentType, nameText)
				if property != nil {
					c.markPropertyAsReferenced(property, nil /*nodeForCheckWriteOnly*/, false /*isSelfTypeAccess*/)
					// A destructuring is never a write-only reference.
					c.checkPropertyAccessibility(node, parent.Initializer != nil && parent.Initializer.Kind == ast.KindSuperKeyword, false /*writing*/, parentType, property)
				}
			}
		}
	}

	// For a binding pattern, check contained binding elements
	if isBindingPattern(node.Name) {
		if node.Name.Kind == ast.KindArrayBindingPattern && c.languageVersion < LanguageFeatureMinimumTarget.BindingPatterns && c.compilerOptions.downlevelIteration {
			c.checkExternalEmitHelpers(node, ExternalEmitHelpersRead)
		}

		forEach(node.Name.Elements, c.checkSourceElement)
	}
	// For a parameter declaration with an initializer, error and exit if the containing function doesn't have a body
	if node.Initializer != nil && isPartOfParameterDeclaration(node) && nodeIsMissing(getContainingFunction(node).AsFunctionLikeDeclaration().Body) {
		c.error(node, Diagnostics.A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation)
		return
	}
	// For a binding pattern, validate the initializer and exit
	if isBindingPattern(node.Name) {
		if c.isInAmbientOrTypeNode(node) {
			return
		}
		needCheckInitializer := hasOnlyExpressionInitializer(node) && node.Initializer && node.Parent.Parent.Kind != ast.KindForInStatement
		needCheckWidenedType := !core.Some(node.Name.Elements, not(isOmittedExpression))
		if needCheckInitializer || needCheckWidenedType {
			// Don't validate for-in initializer as it is already an error
			widenedType := c.getWidenedTypeForVariableLikeDeclaration(node)
			if needCheckInitializer {
				initializerType := c.checkExpressionCached(node.Initializer)
				if c.strictNullChecks && needCheckWidenedType {
					c.checkNonNullNonVoidType(initializerType, node)
				} else {
					c.checkTypeAssignableToAndOptionallyElaborate(initializerType, c.getWidenedTypeForVariableLikeDeclaration(node), node, node.Initializer)
				}
			}
			// check the binding pattern with empty elements
			if needCheckWidenedType {
				if isArrayBindingPattern(node.Name) {
					c.checkIteratedTypeOrElementType(IterationUseDestructuring, widenedType, c.undefinedType, node)
				} else if c.strictNullChecks {
					c.checkNonNullNonVoidType(widenedType, node)
				}
			}
		}
		return
	}
	// For a commonjs `const x = require`, validate the alias and exit
	symbol := c.getSymbolOfDeclaration(node)
	if symbol.Flags&ast.SymbolFlagsAlias != 0 && (isVariableDeclarationInitializedToBareOrAccessedRequire(node) || isBindingElementOfBareOrAccessedRequire(node)) {
		c.checkAliasSymbol(node)
		return
	}

	if node.Name.Kind == ast.KindBigIntLiteral {
		c.error(node.Name, Diagnostics.A_bigint_literal_cannot_be_used_as_a_property_name)
	}

	t := c.convertAutoToAny(c.getTypeOfSymbol(symbol))
	if node == symbol.ValueDeclaration {
		// Node is the primary declaration of the symbol, just validate the initializer
		// Don't validate for-in initializer as it is already an error
		initializer := hasOnlyExpressionInitializer(node) && getEffectiveInitializer(node)
		if initializer {
			isJSObjectLiteralInitializer := isInJSFile(node) && isObjectLiteralExpression(initializer) && (initializer.Properties.length == 0 || isPrototypeAccess(node.Name)) && symbol.Exports. /* ? */ size
			if !isJSObjectLiteralInitializer && node.Parent.Parent.Kind != ast.KindForInStatement {
				initializerType := c.checkExpressionCached(initializer)
				c.checkTypeAssignableToAndOptionallyElaborate(initializerType, t, node, initializer, nil /*headMessage*/)
				blockScopeKind := c.getCombinedNodeFlagsCached(node) & ast.NodeFlagsBlockScoped
				if blockScopeKind == ast.NodeFlagsAwaitUsing {
					globalAsyncDisposableType := c.getGlobalAsyncDisposableType(true)
					globalDisposableType := c.getGlobalDisposableType(true)
					if globalAsyncDisposableType != c.emptyObjectType && globalDisposableType != c.emptyObjectType {
						optionalDisposableType := c.getUnionType([] /* TODO(TS-TO-GO) inferred type IntrinsicType | ObjectType */ any{globalAsyncDisposableType, globalDisposableType, c.nullType, c.undefinedType})
						c.checkTypeAssignableTo(c.widenTypeForVariableLikeDeclaration(initializerType, node), optionalDisposableType, initializer, Diagnostics.The_initializer_of_an_await_using_declaration_must_be_either_an_object_with_a_Symbol_asyncDispose_or_Symbol_dispose_method_or_be_null_or_undefined)
					}
				} else if blockScopeKind == ast.NodeFlagsUsing {
					globalDisposableType := c.getGlobalDisposableType(true)
					if globalDisposableType != c.emptyObjectType {
						optionalDisposableType := c.getUnionType([] /* TODO(TS-TO-GO) inferred type IntrinsicType | ObjectType */ any{globalDisposableType, c.nullType, c.undefinedType})
						c.checkTypeAssignableTo(c.widenTypeForVariableLikeDeclaration(initializerType, node), optionalDisposableType, initializer, Diagnostics.The_initializer_of_a_using_declaration_must_be_either_an_object_with_a_Symbol_dispose_method_or_be_null_or_undefined)
					}
				}
			}
		}
		if symbol.Declarations != nil && symbol.Declarations.length > 1 {
			if core.Some(symbol.Declarations, func(d Declaration) bool {
				return d != node && isVariableLike(d) && !c.areDeclarationFlagsIdentical(d, node)
			}) {
				c.error(node.Name, Diagnostics.All_declarations_of_0_must_have_identical_modifiers, declarationNameToString(node.Name))
			}
		}
	} else {
		// Node is a secondary declaration, check that type is identical to primary declaration and check that
		// initializer is consistent with type associated with the node
		declarationType := c.convertAutoToAny(c.getWidenedTypeForVariableLikeDeclaration(node))

		if !c.isErrorType(t) && !c.isErrorType(declarationType) && !c.isTypeIdenticalTo(t, declarationType) && symbol.Flags&ast.SymbolFlagsAssignment == 0 {
			c.errorNextVariableOrPropertyDeclarationMustHaveSameType(symbol.ValueDeclaration, t, node, declarationType)
		}
		if hasOnlyExpressionInitializer(node) && node.Initializer != nil {
			c.checkTypeAssignableToAndOptionallyElaborate(c.checkExpressionCached(node.Initializer), declarationType, node, node.Initializer, nil /*headMessage*/)
		}
		if symbol.ValueDeclaration != nil && !c.areDeclarationFlagsIdentical(node, symbol.ValueDeclaration) {
			c.error(node.Name, Diagnostics.All_declarations_of_0_must_have_identical_modifiers, declarationNameToString(node.Name))
		}
	}
	if node.Kind != ast.KindPropertyDeclaration && node.Kind != ast.KindPropertySignature {
		// We know we don't have a binding pattern or computed name here
		c.checkExportsOnMergedDeclarations(node)
		if node.Kind == ast.KindVariableDeclaration || node.Kind == ast.KindBindingElement {
			c.checkVarDeclaredNamesNotShadowed(node)
		}
		c.checkCollisionsForDeclarationName(node, node.Name)
	}
}

func (c *Checker) errorNextVariableOrPropertyDeclarationMustHaveSameType(firstDeclaration Declaration, firstType *Type, nextDeclaration Declaration, nextType *Type) {
	nextDeclarationName := getNameOfDeclaration(nextDeclaration)
	var message any
	if nextDeclaration.Kind == ast.KindPropertyDeclaration || nextDeclaration.Kind == ast.KindPropertySignature {
		message = Diagnostics.Subsequent_property_declarations_must_have_the_same_type_Property_0_must_be_of_type_1_but_here_has_type_2
	} else {
		message = Diagnostics.Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2
	}
	declName := declarationNameToString(nextDeclarationName)
	err := c.error(nextDeclarationName, message, declName, c.typeToString(firstType), c.typeToString(nextType))
	if firstDeclaration != nil {
		addRelatedInfo(err, createDiagnosticForNode(firstDeclaration, Diagnostics._0_was_also_declared_here, declName))
	}
}

func (c *Checker) areDeclarationFlagsIdentical(left Declaration, right Declaration) bool {
	if (left.Kind == ast.KindParameter && right.Kind == ast.KindVariableDeclaration) || (left.Kind == ast.KindVariableDeclaration && right.Kind == ast.KindParameter) {
		// Differences in optionality between parameters and variables are allowed.
		return true
	}

	if hasQuestionToken(left) != hasQuestionToken(right) {
		return false
	}

	interestingFlags := ast.ModifierFlagsPrivate | ast.ModifierFlagsProtected | ast.ModifierFlagsAsync | ast.ModifierFlagsAbstract | ast.ModifierFlagsReadonly | ast.ModifierFlagsStatic

	return getSelectedEffectiveModifierFlags(left, interestingFlags) == getSelectedEffectiveModifierFlags(right, interestingFlags)
}

func (c *Checker) checkVariableDeclaration(node VariableDeclaration) {
	tracing. /* ? */ push(tracing.Phase.Check, "checkVariableDeclaration", &Args{
		kind: node.Kind,
		pos:  node.Pos,
		end:  node.End,
		path: (node.(TracingNode)).tracingPath,
	})
	c.checkGrammarVariableDeclaration(node)
	c.checkVariableLikeDeclaration(node)
	tracing. /* ? */ pop()
}

func (c *Checker) checkBindingElement(node BindingElement) {
	c.checkGrammarBindingElement(node)
	return c.checkVariableLikeDeclaration(node)
}

func (c *Checker) checkVariableDeclarationList(node VariableDeclarationList) {
	blockScopeKind := getCombinedNodeFlags(node) & ast.NodeFlagsBlockScoped
	if (blockScopeKind == ast.NodeFlagsUsing || blockScopeKind == ast.NodeFlagsAwaitUsing) && c.languageVersion < LanguageFeatureMinimumTarget.UsingAndAwaitUsing {
		c.checkExternalEmitHelpers(node, ExternalEmitHelpersAddDisposableResourceAndDisposeResources)
	}

	forEach(node.Declarations, c.checkSourceElement)
}

func (c *Checker) checkVariableStatement(node VariableStatement) {
	// Grammar checking
	if !c.checkGrammarModifiers(node) && !c.checkGrammarVariableDeclarationList(node.DeclarationList) {
		c.checkGrammarForDisallowedBlockScopedVariableStatement(node)
	}
	c.checkVariableDeclarationList(node.DeclarationList)
}

func (c *Checker) checkExpressionStatement(node ExpressionStatement) {
	// Grammar checking
	c.checkGrammarStatementInAmbientContext(node)

	c.checkExpression(node.Expression)
}

func (c *Checker) checkIfStatement(node IfStatement) {
	// Grammar checking
	c.checkGrammarStatementInAmbientContext(node)
	t := c.checkTruthinessExpression(node.Expression)
	c.checkTestingKnownTruthyCallableOrAwaitableOrEnumMemberType(node.Expression, t, node.ThenStatement)
	c.checkSourceElement(node.ThenStatement)

	if node.ThenStatement.Kind == ast.KindEmptyStatement {
		c.error(node.ThenStatement, Diagnostics.The_body_of_an_if_statement_cannot_be_the_empty_statement)
	}

	c.checkSourceElement(node.ElseStatement)
}

func (c *Checker) checkTestingKnownTruthyCallableOrAwaitableOrEnumMemberType(condExpr Expression, condType *Type, body Union[Statement, Expression]) {
	if !c.strictNullChecks {
		return
	}
	bothHelper(condExpr, body)

	bothHelper := func(condExpr Expression, body Union[Expression, Statement, undefined]) {
		condExpr = skipParentheses(condExpr)

		helper(condExpr, body)

		for isBinaryExpression(condExpr) && (condExpr.OperatorToken.Kind == ast.KindBarBarToken || condExpr.OperatorToken.Kind == ast.KindQuestionQuestionToken) {
			condExpr = skipParentheses(condExpr.Left)
			helper(condExpr, body)
		}
	}

	helper := func(condExpr Expression, body Union[Expression, Statement, undefined]) {
		var location Expression
		if isLogicalOrCoalescingBinaryExpression(condExpr) {
			location = skipParentheses(condExpr.Right)
		} else {
			location = condExpr
		}
		if isModuleExportsAccessExpression(location) {
			return
		}
		if isLogicalOrCoalescingBinaryExpression(location) {
			bothHelper(location, body)
			return
		}
		var t *Type
		if location == condExpr {
			t = condType
		} else {
			t = c.checkExpression(location)
		}
		if t.flags&TypeFlagsEnumLiteral != 0 && isPropertyAccessExpression(location) && (ifNotNilElse(c.getNodeLinks(location.Expression).resolvedSymbol, c.unknownSymbol)).Flags&ast.SymbolFlagsEnum != 0 {
			// EnumLiteral type at condition with known value is always truthy or always falsy, likely an error
			c.error(location, Diagnostics.This_condition_will_always_return_0, ifElse(t.AsLiteralType().value, "true", "false"))
			return
		}
		isPropertyExpressionCast := isPropertyAccessExpression(location) && c.isTypeAssertion(location.Expression)
		if !c.hasTypeFacts(t, TypeFactsTruthy) || isPropertyExpressionCast {
			return
		}

		// While it technically should be invalid for any known-truthy value
		// to be tested, we de-scope to functions and Promises unreferenced in
		// the block as a heuristic to identify the most common bugs. There
		// are too many false positives for values sourced from type
		// definitions without strictNullChecks otherwise.
		callSignatures := c.getSignaturesOfType(t, SignatureKindCall)
		isPromise := c.getAwaitedTypeOfPromise(t) != nil
		if callSignatures.length == 0 && !isPromise {
			return
		}

		var testedNode *MemberName
		switch {
		case isIdentifier(location):
			testedNode = location
		case isPropertyAccessExpression(location):
			testedNode = location.Name
		default:
			testedNode = nil
		}
		testedSymbol := testedNode && c.getSymbolAtLocation(testedNode)
		if testedSymbol == nil && !isPromise {
			return
		}

		isUsed := testedSymbol && isBinaryExpression(condExpr.Parent) && c.isSymbolUsedInBinaryExpressionChain(condExpr.Parent, testedSymbol) || testedSymbol && body && c.isSymbolUsedInConditionBody(condExpr, body, testedNode, testedSymbol)
		if !isUsed {
			if isPromise {
				c.errorAndMaybeSuggestAwait(location, true, Diagnostics.This_condition_will_always_return_true_since_this_0_is_always_defined, c.getTypeNameForErrorDisplay(t))
			} else {
				c.error(location, Diagnostics.This_condition_will_always_return_true_since_this_function_is_always_defined_Did_you_mean_to_call_it_instead)
			}
		}
	}

}

func (c *Checker) isSymbolUsedInConditionBody(expr Expression, body Union[Statement, Expression], testedNode *ast.Node, testedSymbol *ast.Symbol) bool {
	return forEachChild(body, func /* check */ (childNode *ast.Node) *bool {
		if isIdentifier(childNode) {
			childSymbol := c.getSymbolAtLocation(childNode)
			if childSymbol != nil && childSymbol == testedSymbol {
				// If the test was a simple identifier, the above check is sufficient
				if isIdentifier(expr) || isIdentifier(testedNode) && isBinaryExpression(testedNode.Parent) {
					return true
				}
				// Otherwise we need to ensure the symbol is called on the same target
				testedExpression := testedNode.Parent
				childExpression := childNode.Parent
				for testedExpression && childExpression {
					if isIdentifier(testedExpression) && isIdentifier(childExpression) || testedExpression.Kind == ast.KindThisKeyword && childExpression.Kind == ast.KindThisKeyword {
						return c.getSymbolAtLocation(testedExpression) == c.getSymbolAtLocation(childExpression)
					} else if isPropertyAccessExpression(testedExpression) && isPropertyAccessExpression(childExpression) {
						if c.getSymbolAtLocation(testedExpression.Name) != c.getSymbolAtLocation(childExpression.Name) {
							return false
						}
						childExpression = childExpression.Expression
						testedExpression = testedExpression.Expression
					} else if isCallExpression(testedExpression) && isCallExpression(childExpression) {
						childExpression = childExpression.Expression
						testedExpression = testedExpression.Expression
					} else {
						return false
					}
				}
			}
		}
		return forEachChild(childNode, check)
	})
}

func (c *Checker) isSymbolUsedInBinaryExpressionChain(node *ast.Node, testedSymbol *ast.Symbol) bool {
	for isBinaryExpression(node) && node.OperatorToken.Kind == ast.KindAmpersandAmpersandToken {
		isUsed := forEachChild(node.Right, func /* visit */ (child *ast.Node) *bool {
			if isIdentifier(child) {
				symbol := c.getSymbolAtLocation(child)
				if symbol != nil && symbol == testedSymbol {
					return true
				}
			}
			return forEachChild(child, visit)
		})
		if isUsed {
			return true
		}
		node = node.Parent
	}
	return false
}

func (c *Checker) checkDoStatement(node DoStatement) {
	// Grammar checking
	c.checkGrammarStatementInAmbientContext(node)

	c.checkSourceElement(node.Statement)
	c.checkTruthinessExpression(node.Expression)
}

func (c *Checker) checkWhileStatement(node WhileStatement) {
	// Grammar checking
	c.checkGrammarStatementInAmbientContext(node)

	c.checkTruthinessExpression(node.Expression)
	c.checkSourceElement(node.Statement)
}

func (c *Checker) checkTruthinessOfType(t *Type, node *ast.Node) *Type {
	if t.flags&TypeFlagsVoid != 0 {
		c.error(node, Diagnostics.An_expression_of_type_void_cannot_be_tested_for_truthiness)
	} else {
		semantics := c.getSyntacticTruthySemantics(node)
		if semantics != PredicateSemanticsSometimes {
			c.error(node, ifElse(semantics == PredicateSemanticsAlways, Diagnostics.This_kind_of_expression_is_always_truthy, Diagnostics.This_kind_of_expression_is_always_falsy))
		}
	}

	return t
}

func (c *Checker) getSyntacticTruthySemantics(node *ast.Node) PredicateSemantics {
	node = skipOuterExpressions(node)
	switch node.Kind {
	case ast.KindNumericLiteral:
		// Allow `while(0)` or `while(1)`
		if node.AsNumericLiteral().Text == "0" || node.AsNumericLiteral().Text == "1" {
			return PredicateSemanticsSometimes
		}
		return PredicateSemanticsAlways
	case ast.KindArrayLiteralExpression,
		ast.KindArrowFunction,
		ast.KindBigIntLiteral,
		ast.KindClassExpression,
		ast.KindFunctionExpression,
		ast.KindJsxElement,
		ast.KindJsxSelfClosingElement,
		ast.KindObjectLiteralExpression,
		ast.KindRegularExpressionLiteral:
		return PredicateSemanticsAlways
	case ast.KindVoidExpression,
		ast.KindNullKeyword:
		return PredicateSemanticsNever
	case ast.KindNoSubstitutionTemplateLiteral,
		ast.KindStringLiteral:
		if (node /* as StringLiteral | NoSubstitutionTemplateLiteral */).Text != "" {
			return PredicateSemanticsAlways
		} else {
			return PredicateSemanticsNever
		}
	case ast.KindConditionalExpression:
		return c.getSyntacticTruthySemantics(node.AsConditionalExpression().WhenTrue) | c.getSyntacticTruthySemantics(node.AsConditionalExpression().WhenFalse)
	case ast.KindIdentifier:
		if c.getResolvedSymbol(node.AsIdentifier()) == c.undefinedSymbol {
			return PredicateSemanticsNever
		}
		return PredicateSemanticsSometimes
	}
	return PredicateSemanticsSometimes
}

func (c *Checker) checkTruthinessExpression(node Expression, checkMode CheckMode) *Type {
	return c.checkTruthinessOfType(c.checkExpression(node, checkMode), node)
}

func (c *Checker) checkForStatement(node ForStatement) {
	// Grammar checking
	if !c.checkGrammarStatementInAmbientContext(node) {
		if node.Initializer != nil && node.Initializer.Kind == ast.KindVariableDeclarationList {
			c.checkGrammarVariableDeclarationList(node.Initializer.AsVariableDeclarationList())
		}
	}

	if node.Initializer != nil {
		if node.Initializer.Kind == ast.KindVariableDeclarationList {
			c.checkVariableDeclarationList(node.Initializer.AsVariableDeclarationList())
		} else {
			c.checkExpression(node.Initializer)
		}
	}

	if node.Condition != nil {
		c.checkTruthinessExpression(node.Condition)
	}
	if node.Incrementor != nil {
		c.checkExpression(node.Incrementor)
	}
	c.checkSourceElement(node.Statement)
	if node.Locals != nil {
		c.registerForUnusedIdentifiersCheck(node)
	}
}

func (c *Checker) checkForOfStatement(node ForOfStatement) {
	c.checkGrammarForInOrForOfStatement(node)

	container := getContainingFunctionOrClassStaticBlock(node)
	if node.AwaitModifier != nil {
		if container != nil && isClassStaticBlockDeclaration(container) {
			c.grammarErrorOnNode(node.AwaitModifier, Diagnostics.for_await_loops_cannot_be_used_inside_a_class_static_block)
		} else {
			functionFlags := getFunctionFlags(container)
			if (functionFlags&(FunctionFlagsInvalid|FunctionFlagsAsync)) == FunctionFlagsAsync && c.languageVersion < LanguageFeatureMinimumTarget.ForAwaitOf {
				// for..await..of in an async function or async generator function prior to ESNext requires the __asyncValues helper
				c.checkExternalEmitHelpers(node, ExternalEmitHelpersForAwaitOfIncludes)
			}
		}
	} else if c.compilerOptions.downlevelIteration && c.languageVersion < LanguageFeatureMinimumTarget.ForOf {
		// for..of prior to ES2015 requires the __values helper when downlevelIteration is enabled
		c.checkExternalEmitHelpers(node, ExternalEmitHelpersForOfIncludes)
	}

	// Check the LHS and RHS
	// If the LHS is a declaration, just check it as a variable declaration, which will in turn check the RHS
	// via checkRightHandSideOfForOf.
	// If the LHS is an expression, check the LHS, as a destructuring assignment or as a reference.
	// Then check that the RHS is assignable to it.
	if node.Initializer.Kind == ast.KindVariableDeclarationList {
		c.checkVariableDeclarationList(node.Initializer.AsVariableDeclarationList())
	} else {
		varExpr := node.Initializer
		iteratedType := c.checkRightHandSideOfForOf(node)

		// There may be a destructuring assignment on the left side
		if varExpr.Kind == ast.KindArrayLiteralExpression || varExpr.Kind == ast.KindObjectLiteralExpression {
			// iteratedType may be undefined. In this case, we still want to check the structure of
			// varExpr, in particular making sure it's a valid LeftHandSideExpression. But we'd like
			// to short circuit the type relation checking as much as possible, so we pass the unknownType.
			c.checkDestructuringAssignment(varExpr, iteratedType || c.errorType)
		} else {
			leftType := c.checkExpression(varExpr)
			c.checkReferenceExpression(varExpr, Diagnostics.The_left_hand_side_of_a_for_of_statement_must_be_a_variable_or_a_property_access, Diagnostics.The_left_hand_side_of_a_for_of_statement_may_not_be_an_optional_property_access)

			// iteratedType will be undefined if the rightType was missing properties/signatures
			// required to get its iteratedType (like [Symbol.iterator] or next). This may be
			// because we accessed properties from anyType, or it may have led to an error inside
			// getElementTypeOfIterable.
			if iteratedType {
				c.checkTypeAssignableToAndOptionallyElaborate(iteratedType, leftType, varExpr, node.Expression)
			}
		}
	}

	c.checkSourceElement(node.Statement)
	if node.Locals != nil {
		c.registerForUnusedIdentifiersCheck(node)
	}
}

func (c *Checker) checkForInStatement(node ForInStatement) {
	// Grammar checking
	c.checkGrammarForInOrForOfStatement(node)

	rightType := c.getNonNullableTypeIfNeeded(c.checkExpression(node.Expression))
	// TypeScript 1.0 spec (April 2014): 5.4
	// In a 'for-in' statement of the form
	// for (let VarDecl in Expr) Statement
	//   VarDecl must be a variable declaration without a type annotation that declares a variable of type Any,
	//   and Expr must be an expression of type Any, an object type, or a type parameter type.
	if node.Initializer.Kind == ast.KindVariableDeclarationList {
		variable := node.Initializer.AsVariableDeclarationList().Declarations[0]
		if variable && isBindingPattern(variable.Name) {
			c.error(variable.Name, Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern)
		}
		c.checkVariableDeclarationList(node.Initializer.AsVariableDeclarationList())
	} else {
		// In a 'for-in' statement of the form
		// for (Var in Expr) Statement
		//   Var must be an expression classified as a reference of type Any or the String primitive type,
		//   and Expr must be an expression of type Any, an object type, or a type parameter type.
		varExpr := node.Initializer
		leftType := c.checkExpression(varExpr)
		if varExpr.Kind == ast.KindArrayLiteralExpression || varExpr.Kind == ast.KindObjectLiteralExpression {
			c.error(varExpr, Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern)
		} else if !c.isTypeAssignableTo(c.getIndexTypeOrString(rightType), leftType) {
			c.error(varExpr, Diagnostics.The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any)
		} else {
			// run check only former check succeeded to avoid cascading errors
			c.checkReferenceExpression(varExpr, Diagnostics.The_left_hand_side_of_a_for_in_statement_must_be_a_variable_or_a_property_access, Diagnostics.The_left_hand_side_of_a_for_in_statement_may_not_be_an_optional_property_access)
		}
	}

	// unknownType is returned i.e. if node.expression is identifier whose name cannot be resolved
	// in this case error about missing name is already reported - do not report extra one
	if rightType == c.neverType || !c.isTypeAssignableToKind(rightType, TypeFlagsNonPrimitive|TypeFlagsInstantiableNonPrimitive) {
		c.error(node.Expression, Diagnostics.The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter_but_here_has_type_0, c.typeToString(rightType))
	}

	c.checkSourceElement(node.Statement)
	if node.Locals != nil {
		c.registerForUnusedIdentifiersCheck(node)
	}
}

func (c *Checker) checkRightHandSideOfForOf(statement ForOfStatement) *Type {
	var use /* TODO(TS-TO-GO) inferred type IterationUse.ForOf | IterationUse.ForAwaitOf */ any
	if statement.AwaitModifier != nil {
		use = IterationUseForAwaitOf
	} else {
		use = IterationUseForOf
	}
	return c.checkIteratedTypeOrElementType(use, c.checkNonNullExpression(statement.Expression), c.undefinedType, statement.Expression)
}

func (c *Checker) checkIteratedTypeOrElementType(use IterationUse, inputType *Type, sentType *Type, errorNode *ast.Node) *Type {
	if c.isTypeAny(inputType) {
		return inputType
	}
	return c.getIteratedTypeOrElementType(use, inputType, sentType, errorNode, true /*checkAssignability*/) || c.anyType
}

/**
 * When consuming an iterable type in a for..of, spread, or iterator destructuring assignment
 * we want to get the iterated type of an iterable for ES2015 or later, or the iterated type
 * of a iterable (if defined globally) or element type of an array like for ES2015 or earlier.
 */

func (c *Checker) getIteratedTypeOrElementType(use IterationUse, inputType *Type, sentType *Type, errorNode *ast.Node, checkAssignability bool) *Type {
	allowAsyncIterables := (use & IterationUseAllowsAsyncIterablesFlag) != 0
	if inputType == c.neverType {
		if errorNode != nil {
			c.reportTypeNotIterableError(errorNode, inputType, allowAsyncIterables)
		}
		return nil
	}

	uplevelIteration := c.languageVersion >= ScriptTargetES2015
	downlevelIteration := !uplevelIteration && c.compilerOptions.downlevelIteration
	possibleOutOfBounds := c.compilerOptions.noUncheckedIndexedAccess && use&IterationUsePossiblyOutOfBounds != 0

	// Get the iterated type of an `Iterable<T>` or `IterableIterator<T>` only in ES2015
	// or higher, when inside of an async generator or for-await-if, or when
	// downlevelIteration is requested.
	if uplevelIteration || downlevelIteration || allowAsyncIterables {
		// We only report errors for an invalid iterable type in ES2015 or higher.
		iterationTypes := c.getIterationTypesOfIterable(inputType, use, ifElse(uplevelIteration, errorNode, nil))
		if checkAssignability {
			if iterationTypes != nil {
				var diagnostic any
				switch {
				case use&IterationUseForOfFlag != 0:
					diagnostic = Diagnostics.Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_for_of_will_always_send_0
				case use&IterationUseSpreadFlag != 0:
					diagnostic = Diagnostics.Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_spread_will_always_send_0
				case use&IterationUseDestructuringFlag != 0:
					diagnostic = Diagnostics.Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_destructuring_will_always_send_0
				case use&IterationUseYieldStarFlag != 0:
					diagnostic = Diagnostics.Cannot_delegate_iteration_to_value_because_the_next_method_of_its_iterator_expects_type_1_but_the_containing_generator_will_always_send_0
				default:
					diagnostic = nil
				}
				if diagnostic {
					c.checkTypeAssignableTo(sentType, iterationTypes.nextType, errorNode, diagnostic)
				}
			}
		}
		if iterationTypes != nil || uplevelIteration {
			if possibleOutOfBounds {
				return c.includeUndefinedInIndexSignature(iterationTypes && iterationTypes.yieldType)
			} else {
				return (iterationTypes && iterationTypes.yieldType)
			}
		}
	}

	arrayType := inputType
	hasStringConstituent := false

	// If strings are permitted, remove any string-like constituents from the array type.
	// This allows us to find other non-string element types from an array unioned with
	// a string.
	if use&IterationUseAllowsStringInputFlag != 0 {
		if arrayType.flags&TypeFlagsUnion != 0 {
			// After we remove all types that are StringLike, we will know if there was a string constituent
			// based on whether the result of filter is a new array.
			arrayTypes := inputType.AsUnionType().types
			filteredTypes := core.Filter(arrayTypes, func(t *Type) bool {
				return t.flags&TypeFlagsStringLike == 0
			})
			if filteredTypes != arrayTypes {
				arrayType = c.getUnionType(filteredTypes, UnionReductionSubtype)
			}
		} else if arrayType.flags&TypeFlagsStringLike != 0 {
			arrayType = c.neverType
		}

		hasStringConstituent = arrayType != inputType
		if hasStringConstituent {
			// Now that we've removed all the StringLike types, if no constituents remain, then the entire
			// arrayOrStringType was a string.
			if arrayType.flags&TypeFlagsNever != 0 {
				if possibleOutOfBounds {
					return c.includeUndefinedInIndexSignature(c.stringType)
				} else {
					return c.stringType
				}
			}
		}
	}

	if !c.isArrayLikeType(arrayType) {
		if errorNode != nil {
			// Which error we report depends on whether we allow strings or if there was a
			// string constituent. For example, if the input type is number | string, we
			// want to say that number is not an array type. But if the input was just
			// number and string input is allowed, we want to say that number is not an
			// array type or a string type.
			allowsStrings := use&IterationUseAllowsStringInputFlag != 0 && !hasStringConstituent
			TODO_IDENTIFIER := getIterationDiagnosticDetails(allowsStrings, downlevelIteration)
			c.errorAndMaybeSuggestAwait(errorNode, maybeMissingAwait && c.getAwaitedTypeOfPromise(arrayType) != nil, defaultDiagnostic, c.typeToString(arrayType))
		}
		switch {
		case hasStringConstituent:
			if possibleOutOfBounds {
				return c.includeUndefinedInIndexSignature(c.stringType)
			} else {
				return c.stringType
			}
		default:
			return nil
		}
	}

	arrayElementType := c.getIndexTypeOfType(arrayType, c.numberType)
	if hasStringConstituent && arrayElementType != nil {
		// This is just an optimization for the case where arrayOrStringType is string | string[]
		if arrayElementType.flags&TypeFlagsStringLike != 0 && !c.compilerOptions.noUncheckedIndexedAccess {
			return c.stringType
		}

		return c.getUnionType(ifElse(possibleOutOfBounds, []*Type{arrayElementType, c.stringType, c.undefinedType}, []*Type{arrayElementType, c.stringType}), UnionReductionSubtype)
	}

	if use&IterationUsePossiblyOutOfBounds != 0 {
		return c.includeUndefinedInIndexSignature(arrayElementType)
	} else {
		return arrayElementType
	}

	getIterationDiagnosticDetails := func(allowsStrings bool, downlevelIteration *bool) /* TODO(TS-TO-GO) TypeNode TupleType: [error: DiagnosticMessage, maybeMissingAwait: boolean] */ any {
		if downlevelIteration {
			if allowsStrings {
				return []any{Diagnostics.Type_0_is_not_an_array_type_or_a_string_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator, true}
			} else {
				return []any{Diagnostics.Type_0_is_not_an_array_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator, true}
			}
		}

		yieldType := c.getIterationTypeOfIterable(use, IterationTypeKindYield, inputType, nil /*errorNode*/)

		if yieldType != nil {
			return []any{Diagnostics.Type_0_can_only_be_iterated_through_when_using_the_downlevelIteration_flag_or_with_a_target_of_es2015_or_higher, false}
		}

		if c.isES2015OrLaterIterable(inputType.symbol. /* ? */ EscapedName) {
			return []any{Diagnostics.Type_0_can_only_be_iterated_through_when_using_the_downlevelIteration_flag_or_with_a_target_of_es2015_or_higher, true}
		}

		if allowsStrings {
			return []any{Diagnostics.Type_0_is_not_an_array_type_or_a_string_type, true}
		} else {
			return []any{Diagnostics.Type_0_is_not_an_array_type, true}
		}
	}

}

func (c *Checker) isES2015OrLaterIterable(n string) bool {
	switch n {
	case "Float32Array",
		"Float64Array",
		"Int16Array",
		"Int32Array",
		"Int8Array",
		"NodeList",
		"Uint16Array",
		"Uint32Array",
		"Uint8Array",
		"Uint8ClampedArray":
		return true
	}
	return false
}

/**
 * Gets the requested "iteration type" from an `Iterable`-like or `AsyncIterable`-like type.
 */

func (c *Checker) getIterationTypeOfIterable(use IterationUse, typeKind IterationTypeKind, inputType *Type, errorNode *ast.Node) *Type {
	if c.isTypeAny(inputType) {
		return nil
	}

	iterationTypes := c.getIterationTypesOfIterable(inputType, use, errorNode)
	return iterationTypes && iterationTypes[getIterationTypesKeyFromIterationTypeKind(typeKind)]
}

func (c *Checker) createIterationTypes(yieldType *Type /*  = neverType */, returnType *Type /*  = neverType */, nextType *Type /*  = unknownType */) IterationTypes {
	// `yieldType` and `returnType` are defaulted to `neverType` they each will be combined
	// via `getUnionType` when merging iteration types. `nextType` is defined as `unknownType`
	// as it is combined via `getIntersectionType` when merging iteration types.

	// Use the cache only for intrinsic types to keep it small as they are likely to be
	// more frequently created (i.e. `Iterator<number, void, unknown>`). Iteration types
	// are also cached on the type they are requested for, so we shouldn't need to maintain
	// the cache for less-frequently used types.
	if yieldType.flags&TypeFlagsIntrinsic != 0 && returnType.flags&(TypeFlagsAny|TypeFlagsNever|TypeFlagsUnknown|TypeFlagsVoid|TypeFlagsUndefined) != 0 && nextType.flags&(TypeFlagsAny|TypeFlagsNever|TypeFlagsUnknown|TypeFlagsVoid|TypeFlagsUndefined) != 0 {
		id := c.getTypeListId([]*Type{yieldType, returnType, nextType})
		iterationTypes := c.iterationTypesCache.get(id)
		if iterationTypes == nil {
			iterationTypes = &IterationTypes{
				yieldType:  yieldType,
				returnType: returnType,
				nextType:   nextType,
			}
			c.iterationTypesCache.set(id, iterationTypes)
		}
		return iterationTypes
	}
	return IterationTypes{
		yieldType:  yieldType,
		returnType: returnType,
		nextType:   nextType,
	}
}

/**
 * Combines multiple `IterationTypes` records.
 *
 * If `array` is empty or all elements are missing or are references to `noIterationTypes`,
 * then `noIterationTypes` is returned. Otherwise, an `IterationTypes` record is returned
 * for the combined iteration types.
 */

func (c *Checker) combineIterationTypes(array []*IterationTypes) IterationTypes {
	var yieldTypes *[]*Type
	var returnTypes *[]*Type
	var nextTypes *[]*Type
	for _, iterationTypes := range array {
		if iterationTypes == nil || iterationTypes == c.noIterationTypes {
			continue
		}
		if iterationTypes == c.anyIterationTypes {
			return c.anyIterationTypes
		}
		yieldTypes = append(yieldTypes, iterationTypes.yieldType)
		returnTypes = append(returnTypes, iterationTypes.returnType)
		nextTypes = append(nextTypes, iterationTypes.nextType)
	}
	if yieldTypes != nil || returnTypes != nil || nextTypes != nil {
		return c.createIterationTypes(yieldTypes && c.getUnionType(yieldTypes), returnTypes && c.getUnionType(returnTypes), nextTypes && c.getIntersectionType(nextTypes))
	}
	return c.noIterationTypes
}

func (c *Checker) getCachedIterationTypes(t *Type, cacheKey MatchingKeys[IterableOrIteratorType, *IterationTypes]) *IterationTypes {
	return t.AsIterableOrIteratorType()[cacheKey]
}

func (c *Checker) setCachedIterationTypes(t *Type, cacheKey MatchingKeys[IterableOrIteratorType, *IterationTypes], cachedTypes IterationTypes) IterationTypes {
	t.AsIterableOrIteratorType()[cacheKey] = c.cachedTypes
	return t.AsIterableOrIteratorType()[cacheKey]
}

/**
 * Gets the *yield*, *return*, and *next* types from an `Iterable`-like or `AsyncIterable`-like type.
 *
 * At every level that involves analyzing return types of signatures, we union the return types of all the signatures.
 *
 * Another thing to note is that at any step of this process, we could run into a dead end,
 * meaning either the property is missing, or we run into the anyType. If either of these things
 * happens, we return `undefined` to signal that we could not find the iteration type. If a property
 * is missing, and the previous step did not result in `any`, then we also give an error if the
 * caller requested it. Then the caller can decide what to do in the case where there is no iterated
 * type.
 *
 * For a **for-of** statement, `yield*` (in a normal generator), spread, array
 * destructuring, or normal generator we will only ever look for a `[Symbol.iterator]()`
 * method.
 *
 * For an async generator we will only ever look at the `[Symbol.asyncIterator]()` method.
 *
 * For a **for-await-of** statement or a `yield*` in an async generator we will look for
 * the `[Symbol.asyncIterator]()` method first, and then the `[Symbol.iterator]()` method.
 */

func (c *Checker) getIterationTypesOfIterable(t *Type, use IterationUse, errorNode *ast.Node) *IterationTypes {
	if c.isTypeAny(t) {
		return c.anyIterationTypes
	}

	if t.flags&TypeFlagsUnion == 0 {
		var errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors: Diagnostic[] | undefined; } */ any
		if errorNode != nil {
			errorOutputContainer = map[any]any{ /* TODO(TS-TO-GO): was object literal */
				"errors": nil,
			}
		} else {
			errorOutputContainer = nil
		}
		iterationTypes := c.getIterationTypesOfIterableWorker(t, use, errorNode, errorOutputContainer)
		if iterationTypes == c.noIterationTypes {
			if errorNode != nil {
				rootDiag := c.reportTypeNotIterableError(errorNode, t, use&IterationUseAllowsAsyncIterablesFlag != 0)
				if errorOutputContainer. /* ? */ errors != nil {
					addRelatedInfo(rootDiag, errorOutputContainer.errors...)
				}
			}
			return nil
		} else if errorOutputContainer. /* ? */ errors. /* ? */ length {
			for _, diag := range errorOutputContainer.errors {
				c.diagnostics.add(diag)
			}
		}
		return iterationTypes
	}

	var cacheKey /* TODO(TS-TO-GO) inferred type "iterationTypesOfAsyncIterable" | "iterationTypesOfIterable" */ any
	if use&IterationUseAllowsAsyncIterablesFlag != 0 {
		cacheKey = "iterationTypesOfAsyncIterable"
	} else {
		cacheKey = "iterationTypesOfIterable"
	}
	cachedTypes := c.getCachedIterationTypes(t, cacheKey)
	if cachedTypes != nil {
		if cachedTypes == c.noIterationTypes {
			return nil
		} else {
			return cachedTypes
		}
	}

	var allIterationTypes *[]IterationTypes
	for _, constituent := range t.AsUnionType().types {
		var errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors: Diagnostic[] | undefined; } */ any
		if errorNode != nil {
			errorOutputContainer = map[any]any{ /* TODO(TS-TO-GO): was object literal */
				"errors": nil,
			}
		} else {
			errorOutputContainer = nil
		}
		iterationTypes := c.getIterationTypesOfIterableWorker(constituent, use, errorNode, errorOutputContainer)
		if iterationTypes == c.noIterationTypes {
			if errorNode != nil {
				rootDiag := c.reportTypeNotIterableError(errorNode, t, use&IterationUseAllowsAsyncIterablesFlag != 0)
				if errorOutputContainer. /* ? */ errors != nil {
					addRelatedInfo(rootDiag, errorOutputContainer.errors...)
				}
			}
			c.setCachedIterationTypes(t, cacheKey, c.noIterationTypes)
			return nil
		} else if errorOutputContainer. /* ? */ errors. /* ? */ length {
			for _, diag := range errorOutputContainer.errors {
				c.diagnostics.add(diag)
			}
		}

		allIterationTypes = append(allIterationTypes, iterationTypes)
	}

	var iterationTypes IterationTypes
	if allIterationTypes != nil {
		iterationTypes = c.combineIterationTypes(allIterationTypes)
	} else {
		iterationTypes = c.noIterationTypes
	}
	c.setCachedIterationTypes(t, cacheKey, iterationTypes)
	if iterationTypes == c.noIterationTypes {
		return nil
	} else {
		return iterationTypes
	}
}

func (c *Checker) getAsyncFromSyncIterationTypes(iterationTypes IterationTypes, errorNode *ast.Node) IterationTypes {
	if iterationTypes == c.noIterationTypes {
		return c.noIterationTypes
	}
	if iterationTypes == c.anyIterationTypes {
		return c.anyIterationTypes
	}
	TODO_IDENTIFIER := iterationTypes
	// if we're requesting diagnostics, report errors for a missing `Awaited<T>`.
	if errorNode != nil {
		c.getGlobalAwaitedSymbol(true)
	}
	return c.createIterationTypes(c.getAwaitedType(yieldType, errorNode) || c.anyType, c.getAwaitedType(returnType, errorNode) || c.anyType, nextType)
}

/**
 * Gets the *yield*, *return*, and *next* types from a non-union type.
 *
 * If we are unable to find the *yield*, *return*, and *next* types, `noIterationTypes` is
 * returned to indicate to the caller that it should report an error. Otherwise, an
 * `IterationTypes` record is returned.
 *
 * NOTE: You probably don't want to call this directly and should be calling
 * `getIterationTypesOfIterable` instead.
 */

func (c *Checker) getIterationTypesOfIterableWorker(t *Type, use IterationUse, errorNode *ast.Node, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors: Diagnostic[] | undefined; } */ any) IterationTypes {
	if c.isTypeAny(t) {
		return c.anyIterationTypes
	}

	// If we are reporting errors and encounter a cached `noIterationTypes`, we should ignore the cached value and continue as if nothing was cached.
	// In addition, we should not cache any new results for this call.
	noCache := false

	if use&IterationUseAllowsAsyncIterablesFlag != 0 {
		iterationTypes := c.getIterationTypesOfIterableCached(t, c.asyncIterationTypesResolver) || c.getIterationTypesOfIterableFast(t, c.asyncIterationTypesResolver)
		if iterationTypes != nil {
			if iterationTypes == c.noIterationTypes && errorNode != nil {
				// ignore the cached value
				noCache = true
			} else {
				if use&IterationUseForOfFlag != 0 {
					return c.getAsyncFromSyncIterationTypes(iterationTypes, errorNode)
				} else {
					return iterationTypes
				}
			}
		}
	}

	if use&IterationUseAllowsSyncIterablesFlag != 0 {
		iterationTypes := c.getIterationTypesOfIterableCached(t, c.syncIterationTypesResolver) || c.getIterationTypesOfIterableFast(t, c.syncIterationTypesResolver)
		if iterationTypes != nil {
			if iterationTypes == c.noIterationTypes && errorNode != nil {
				// ignore the cached value
				noCache = true
			} else {
				if use&IterationUseAllowsAsyncIterablesFlag != 0 {
					// for a sync iterable in an async context, only use the cached types if they are valid.
					if iterationTypes != c.noIterationTypes {
						iterationTypes = c.getAsyncFromSyncIterationTypes(iterationTypes, errorNode)
						if noCache {
							return iterationTypes
						} else {
							return c.setCachedIterationTypes(t, "iterationTypesOfAsyncIterable", iterationTypes)
						}
					}
				} else {
					return iterationTypes
				}
			}
		}
	}

	if use&IterationUseAllowsAsyncIterablesFlag != 0 {
		iterationTypes := c.getIterationTypesOfIterableSlow(t, c.asyncIterationTypesResolver, errorNode, errorOutputContainer, noCache)
		if iterationTypes != c.noIterationTypes {
			return iterationTypes
		}
	}

	if use&IterationUseAllowsSyncIterablesFlag != 0 {
		iterationTypes := c.getIterationTypesOfIterableSlow(t, c.syncIterationTypesResolver, errorNode, errorOutputContainer, noCache)
		if iterationTypes != c.noIterationTypes {
			if use&IterationUseAllowsAsyncIterablesFlag != 0 {
				iterationTypes = c.getAsyncFromSyncIterationTypes(iterationTypes, errorNode)
				if noCache {
					return iterationTypes
				} else {
					return c.setCachedIterationTypes(t, "iterationTypesOfAsyncIterable", iterationTypes)
				}
			} else {
				return iterationTypes
			}
		}
	}

	return c.noIterationTypes
}

/**
 * Gets the *yield*, *return*, and *next* types of an `Iterable`-like or
 * `AsyncIterable`-like type from the cache.
 *
 * NOTE: You probably don't want to call this directly and should be calling
 * `getIterationTypesOfIterable` instead.
 */

func (c *Checker) getIterationTypesOfIterableCached(t *Type, resolver IterationTypesResolver) *IterationTypes {
	return c.getCachedIterationTypes(t, resolver.iterableCacheKey)
}

/**
 * Gets the *yield*, *return*, and *next* types of an `Iterable`-like or `AsyncIterable`-like
 * type from from common heuristics.
 *
 * If we previously analyzed this type and found no iteration types, `noIterationTypes` is
 * returned. If we found iteration types, an `IterationTypes` record is returned.
 * Otherwise, we return `undefined` to indicate to the caller it should perform a more
 * exhaustive analysis.
 *
 * NOTE: You probably don't want to call this directly and should be calling
 * `getIterationTypesOfIterable` instead.
 */

func (c *Checker) getIterationTypesOfIterableFast(t *Type, resolver IterationTypesResolver) *IterationTypes {
	// As an optimization, if the type is an instantiation of the following global type, then
	// just grab its related type arguments:
	// - `Iterable<T, TReturn, TNext>` or `AsyncIterable<T, TReturn, TNext>`
	// - `IteratorObject<T, TReturn, TNext>` or `AsyncIteratorObject<T, TReturn, TNext>`
	// - `IterableIterator<T, TReturn, TNext>` or `AsyncIterableIterator<T, TReturn, TNext>`
	// - `Generator<T, TReturn, TNext>` or `AsyncGenerator<T, TReturn, TNext>`
	if c.isReferenceToType(t, resolver.getGlobalIterableType(false)) || c.isReferenceToType(t, resolver.getGlobalIteratorObjectType(false)) || c.isReferenceToType(t, resolver.getGlobalIterableIteratorType(false)) || c.isReferenceToType(t, resolver.getGlobalGeneratorType(false)) {
		TODO_IDENTIFIER := c.getTypeArguments(t.AsGenericType())
		return c.setCachedIterationTypes(t, resolver.iterableCacheKey, c.createIterationTypes(resolver.resolveIterationType(yieldType, nil /*errorNode*/) || yieldType, resolver.resolveIterationType(returnType, nil /*errorNode*/) || returnType, nextType))
	}

	// As an optimization, if the type is an instantiation of one of the following global types, then
	// just grab the related type argument:
	// - `ArrayIterator<T>`
	// - `MapIterator<T>`
	// - `SetIterator<T>`
	// - `StringIterator<T>`
	// - `ReadableStreamAsyncIterator<T>`
	if c.isReferenceToSomeType(t, resolver.getGlobalBuiltinIteratorTypes()) {
		TODO_IDENTIFIER := c.getTypeArguments(t.AsGenericType())
		returnType := c.getBuiltinIteratorReturnType()
		nextType := c.unknownType
		return c.setCachedIterationTypes(t, resolver.iterableCacheKey, c.createIterationTypes(resolver.resolveIterationType(yieldType, nil /*errorNode*/) || yieldType, resolver.resolveIterationType(returnType, nil /*errorNode*/) || returnType, nextType))
	}
}

func (c *Checker) getPropertyNameForKnownSymbolName(symbolName string) string {
	ctorType := c.getGlobalESSymbolConstructorSymbol(false)
	uniqueType := ctorType && c.getTypeOfPropertyOfType(c.getTypeOfSymbol(ctorType), escapeLeadingUnderscores(symbolName))
	if uniqueType != nil && isTypeUsableAsPropertyName(uniqueType) {
		return getPropertyNameFromType(uniqueType)
	} else {
		return __TEMPLATE__("__@", symbolName).(string)
	}
}

/**
 * Gets the *yield*, *return*, and *next* types of an `Iterable`-like or `AsyncIterable`-like
 * type from its members.
 *
 * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
 * record is returned. Otherwise, `noIterationTypes` is returned.
 *
 * NOTE: You probably don't want to call this directly and should be calling
 * `getIterationTypesOfIterable` instead.
 */

func (c *Checker) getIterationTypesOfIterableSlow(t *Type, resolver IterationTypesResolver, errorNode *ast.Node, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors: Diagnostic[] | undefined; } */ any, noCache bool) IterationTypes {
	method := c.getPropertyOfType(t, c.getPropertyNameForKnownSymbolName(resolver.iteratorSymbolName))
	var methodType *Type
	if method != nil && method.Flags&ast.SymbolFlagsOptional == 0 {
		methodType = c.getTypeOfSymbol(method)
	} else {
		methodType = nil
	}
	if c.isTypeAny(methodType) {
		if noCache {
			return c.anyIterationTypes
		} else {
			return c.setCachedIterationTypes(t, resolver.iterableCacheKey, c.anyIterationTypes)
		}
	}

	var signatures *[]Signature
	if methodType != nil {
		signatures = c.getSignaturesOfType(methodType, SignatureKindCall)
	} else {
		signatures = nil
	}
	if !core.Some(signatures) {
		if noCache {
			return c.noIterationTypes
		} else {
			return c.setCachedIterationTypes(t, resolver.iterableCacheKey, c.noIterationTypes)
		}
	}

	iteratorType := c.getIntersectionType(core.Map(signatures, c.getReturnTypeOfSignature))
	iterationTypes := ifNotNilElse(c.getIterationTypesOfIteratorWorker(iteratorType, resolver, errorNode, errorOutputContainer, noCache), c.noIterationTypes)
	if noCache {
		return iterationTypes
	} else {
		return c.setCachedIterationTypes(t, resolver.iterableCacheKey, iterationTypes)
	}
}

func (c *Checker) reportTypeNotIterableError(errorNode *ast.Node, t *Type, allowAsyncIterables bool) Diagnostic {
	var message any
	if allowAsyncIterables {
		message = Diagnostics.Type_0_must_have_a_Symbol_asyncIterator_method_that_returns_an_async_iterator
	} else {
		message = Diagnostics.Type_0_must_have_a_Symbol_iterator_method_that_returns_an_iterator
	}
	suggestAwait := c.getAwaitedTypeOfPromise(t) != nil || (!allowAsyncIterables && isForOfStatement(errorNode.Parent) && errorNode.Parent.Expression == errorNode && c.getGlobalAsyncIterableType(false) != c.emptyGenericType && c.isTypeAssignableTo(t, c.createTypeFromGenericGlobalType(c.getGlobalAsyncIterableType(false), []IntrinsicType{c.anyType, c.anyType, c.anyType})))
	return c.errorAndMaybeSuggestAwait(errorNode, suggestAwait, message, c.typeToString(t))
}

/**
 * Gets the *yield*, *return*, and *next* types from an `Iterator`-like or `AsyncIterator`-like type.
 *
 * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
 * record is returned. Otherwise, `undefined` is returned.
 */

func (c *Checker) getIterationTypesOfIterator(t *Type, resolver IterationTypesResolver, errorNode *ast.Node, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors: Diagnostic[] | undefined; } */ any) *IterationTypes {
	return c.getIterationTypesOfIteratorWorker(t, resolver, errorNode, errorOutputContainer, false /*noCache*/)
}

/**
 * Gets the *yield*, *return*, and *next* types from an `Iterator`-like or `AsyncIterator`-like type.
 *
 * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
 * record is returned. Otherwise, `undefined` is returned.
 *
 * NOTE: You probably don't want to call this directly and should be calling
 * `getIterationTypesOfIterator` instead.
 */

func (c *Checker) getIterationTypesOfIteratorWorker(t *Type, resolver IterationTypesResolver, errorNode *ast.Node, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors: Diagnostic[] | undefined; } */ any, noCache bool) *IterationTypes {
	if c.isTypeAny(t) {
		return c.anyIterationTypes
	}

	iterationTypes := c.getIterationTypesOfIteratorCached(t, resolver) || c.getIterationTypesOfIteratorFast(t, resolver)

	if iterationTypes == c.noIterationTypes && errorNode != nil {
		iterationTypes = nil
		noCache = true
	}

	if iterationTypes == nil {
		iterationTypes = c.getIterationTypesOfIteratorSlow(t, resolver, errorNode, errorOutputContainer, noCache)
	}
	if iterationTypes == c.noIterationTypes {
		return nil
	} else {
		return iterationTypes
	}
}

/**
 * Gets the iteration types of an `Iterator`-like or `AsyncIterator`-like type from the
 * cache.
 *
 * NOTE: You probably don't want to call this directly and should be calling
 * `getIterationTypesOfIterator` instead.
 */

func (c *Checker) getIterationTypesOfIteratorCached(t *Type, resolver IterationTypesResolver) *IterationTypes {
	return c.getCachedIterationTypes(t, resolver.iteratorCacheKey)
}

/**
 * Gets the iteration types of an `Iterator`-like or `AsyncIterator`-like type from the
 * cache or from common heuristics.
 *
 * If we previously analyzed this type and found no iteration types, `noIterationTypes` is
 * returned. If we found iteration types, an `IterationTypes` record is returned.
 * Otherwise, we return `undefined` to indicate to the caller it should perform a more
 * exhaustive analysis.
 *
 * NOTE: You probably don't want to call this directly and should be calling
 * `getIterationTypesOfIterator` instead.
 */

func (c *Checker) getIterationTypesOfIteratorFast(t *Type, resolver IterationTypesResolver) *IterationTypes {
	// As an optimization, if the type is an instantiation of one of the following global types,
	// then just grab its related type arguments:
	// - `IterableIterator<T, TReturn, TNext>` or `AsyncIterableIterator<T, TReturn, TNext>`
	// - `IteratorObject<T, TReturn, TNext>` or `AsyncIteratorObject<T, TReturn, TNext>`
	// - `Iterator<T, TReturn, TNext>` or `AsyncIterator<T, TReturn, TNext>`
	// - `Generator<T, TReturn, TNext>` or `AsyncGenerator<T, TReturn, TNext>`
	if c.isReferenceToType(t, resolver.getGlobalIterableIteratorType(false)) || c.isReferenceToType(t, resolver.getGlobalIteratorType(false)) || c.isReferenceToType(t, resolver.getGlobalIteratorObjectType(false)) || c.isReferenceToType(t, resolver.getGlobalGeneratorType(false)) {
		TODO_IDENTIFIER := c.getTypeArguments(t.AsGenericType())
		return c.setCachedIterationTypes(t, resolver.iteratorCacheKey, c.createIterationTypes(yieldType, returnType, nextType))
	}

	// As an optimization, if the type is an instantiation of one of the following global types, then
	// just grab the related type argument:
	// - `ArrayIterator<T>`
	// - `MapIterator<T>`
	// - `SetIterator<T>`
	// - `StringIterator<T>`
	// - `ReadableStreamAsyncIterator<T>`
	if c.isReferenceToSomeType(t, resolver.getGlobalBuiltinIteratorTypes()) {
		TODO_IDENTIFIER := c.getTypeArguments(t.AsGenericType())
		returnType := c.getBuiltinIteratorReturnType()
		nextType := c.unknownType
		return c.setCachedIterationTypes(t, resolver.iteratorCacheKey, c.createIterationTypes(yieldType, returnType, nextType))
	}
}

func (c *Checker) isIteratorResult(t *Type, kind Union[ /* TODO(TS-TO-GO) Node QualifiedName: IterationTypeKind.Yield */ any /* TODO(TS-TO-GO) Node QualifiedName: IterationTypeKind.Return */, any]) bool {
	// From https://tc39.github.io/ecma262/#sec-iteratorresult-interface:
	// > [done] is the result status of an iterator `next` method call. If the end of the iterator was reached `done` is `true`.
	// > If the end was not reached `done` is `false` and a value is available.
	// > If a `done` property (either own or inherited) does not exist, it is consider to have the value `false`.
	doneType := c.getTypeOfPropertyOfType(t, "done" /* as __String */) || c.falseType
	return c.isTypeAssignableTo(ifElse(kind == IterationTypeKindYield, c.falseType, c.trueType), doneType)
}

func (c *Checker) isYieldIteratorResult(t *Type) bool {
	return c.isIteratorResult(t, IterationTypeKindYield)
}

func (c *Checker) isReturnIteratorResult(t *Type) bool {
	return c.isIteratorResult(t, IterationTypeKindReturn)
}

/**
 * Gets the *yield* and *return* types of an `IteratorResult`-like type.
 *
 * If we are unable to determine a *yield* or a *return* type, `noIterationTypes` is
 * returned to indicate to the caller that it should handle the error. Otherwise, an
 * `IterationTypes` record is returned.
 */

func (c *Checker) getIterationTypesOfIteratorResult(t *Type) IterationTypes {
	if c.isTypeAny(t) {
		return c.anyIterationTypes
	}

	cachedTypes := c.getCachedIterationTypes(t, "iterationTypesOfIteratorResult")
	if cachedTypes != nil {
		return cachedTypes
	}

	// As an optimization, if the type is an instantiation of one of the global `IteratorYieldResult<T>`
	// or `IteratorReturnResult<TReturn>` types, then just grab its type argument.
	if c.isReferenceToType(t, c.getGlobalIteratorYieldResultType(false)) {
		yieldType := c.getTypeArguments(t.AsGenericType())[0]
		return c.setCachedIterationTypes(t, "iterationTypesOfIteratorResult", c.createIterationTypes(yieldType, nil /*returnType*/, nil /*nextType*/))
	}
	if c.isReferenceToType(t, c.getGlobalIteratorReturnResultType(false)) {
		returnType := c.getTypeArguments(t.AsGenericType())[0]
		return c.setCachedIterationTypes(t, "iterationTypesOfIteratorResult", c.createIterationTypes(nil, returnType, nil /*nextType*/))
	}

	// Choose any constituents that can produce the requested iteration type.
	yieldIteratorResult := c.filterType(t, c.isYieldIteratorResult)
	var yieldType *Type
	if yieldIteratorResult != c.neverType {
		yieldType = c.getTypeOfPropertyOfType(yieldIteratorResult, "value" /* as __String */)
	} else {
		yieldType = nil
	}

	returnIteratorResult := c.filterType(t, c.isReturnIteratorResult)
	var returnType *Type
	if returnIteratorResult != c.neverType {
		returnType = c.getTypeOfPropertyOfType(returnIteratorResult, "value" /* as __String */)
	} else {
		returnType = nil
	}

	if yieldType == nil && returnType == nil {
		return c.setCachedIterationTypes(t, "iterationTypesOfIteratorResult", c.noIterationTypes)
	}

	// From https://tc39.github.io/ecma262/#sec-iteratorresult-interface
	// > ... If the iterator does not have a return value, `value` is `undefined`. In that case, the
	// > `value` property may be absent from the conforming object if it does not inherit an explicit
	// > `value` property.
	return c.setCachedIterationTypes(t, "iterationTypesOfIteratorResult", c.createIterationTypes(yieldType, returnType || c.voidType, nil /*nextType*/))
}

/**
 * Gets the *yield*, *return*, and *next* types of a the `next()`, `return()`, or
 * `throw()` method of an `Iterator`-like or `AsyncIterator`-like type.
 *
 * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
 * record is returned. Otherwise, we return `undefined`.
 */

func (c *Checker) getIterationTypesOfMethod(t *Type, resolver IterationTypesResolver, methodName Union[ /* TODO(TS-TO-GO) TypeNode LiteralType: "next" */ any /* TODO(TS-TO-GO) TypeNode LiteralType: "return" */, any /* TODO(TS-TO-GO) TypeNode LiteralType: "throw" */, any], errorNode *ast.Node, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors: Diagnostic[] | undefined; } */ any) *IterationTypes {
	method := c.getPropertyOfType(t, methodName.(string))

	// Ignore 'return' or 'throw' if they are missing.
	if method == nil && methodName != "next" {
		return nil
	}

	var methodType *Type
	switch {
	case method != nil && !(methodName == "next" && (method.Flags&ast.SymbolFlagsOptional != 0)):
		if methodName == "next" {
			methodType = c.getTypeOfSymbol(method)
		} else {
			methodType = c.getTypeWithFacts(c.getTypeOfSymbol(method), TypeFactsNEUndefinedOrNull)
		}
	default:
		methodType = nil
	}

	if c.isTypeAny(methodType) {
		return c.anyIterationTypes
	}

	// Both async and non-async iterators *must* have a `next` method.
	var methodSignatures []Signature
	if methodType != nil {
		methodSignatures = c.getSignaturesOfType(methodType, SignatureKindCall)
	} else {
		methodSignatures = emptyArray
	}
	if methodSignatures.length == 0 {
		if errorNode != nil {
			var diagnostic DiagnosticMessage
			if methodName == "next" {
				diagnostic = resolver.mustHaveANextMethodDiagnostic
			} else {
				diagnostic = resolver.mustBeAMethodDiagnostic
			}
			if errorOutputContainer != nil {
				if errorOutputContainer.errors == nil {
					errorOutputContainer.errors = []never{}
				}
				errorOutputContainer.errors.push(createDiagnosticForNode(errorNode, diagnostic, methodName))
			} else {
				c.error(errorNode, diagnostic, methodName)
			}
		}
		if methodName == "next" {
			return c.noIterationTypes
		} else {
			return nil
		}
	}

	// If the method signature comes exclusively from the global iterator or generator type,
	// create iteration types from its type arguments like `getIterationTypesOfIteratorFast`
	// does (so as to remove `undefined` from the next and return types). We arrive here when
	// a contextual type for a generator was not a direct reference to one of those global types,
	// but looking up `methodType` referred to one of them (and nothing else). E.g., in
	// `interface SpecialIterator extends Iterator<number> {}`, `SpecialIterator` is not a
	// reference to `Iterator`, but its `next` member derives exclusively from `Iterator`.
	if methodType. /* ? */ symbol != nil && methodSignatures.length == 1 {
		globalGeneratorType := resolver.getGlobalGeneratorType(false)
		globalIteratorType := resolver.getGlobalIteratorType(false)
		isGeneratorMethod := globalGeneratorType.symbol. /* ? */ Members. /* ? */ get(methodName.(string)) == methodType.symbol
		isIteratorMethod := !isGeneratorMethod && globalIteratorType.symbol. /* ? */ Members. /* ? */ get(methodName.(string)) == methodType.symbol
		if isGeneratorMethod || isIteratorMethod {
			var globalType GenericType
			if isGeneratorMethod {
				globalType = globalGeneratorType
			} else {
				globalType = globalIteratorType
			}
			TODO_IDENTIFIER := methodType.AsAnonymousType()
			return c.createIterationTypes(c.getMappedType(globalType.typeParameters[0], mapper), c.getMappedType(globalType.typeParameters[1], mapper), ifElse(methodName == "next", c.getMappedType(globalType.typeParameters[2], mapper), nil))
		}
	}

	// Extract the first parameter and return type of each signature.
	var methodParameterTypes *[]*Type
	var methodReturnTypes *[]*Type
	for _, signature := range methodSignatures {
		if methodName != "throw" && core.Some(signature.parameters) {
			methodParameterTypes = append(methodParameterTypes, c.getTypeAtPosition(signature, 0))
		}
		methodReturnTypes = append(methodReturnTypes, c.getReturnTypeOfSignature(signature))
	}

	// Resolve the *next* or *return* type from the first parameter of a `next()` or
	// `return()` method, respectively.
	var returnTypes *[]*Type
	var nextType *Type
	if methodName != "throw" {
		var methodParameterType *Type
		if methodParameterTypes != nil {
			methodParameterType = c.getUnionType(methodParameterTypes)
		} else {
			methodParameterType = c.unknownType
		}
		if methodName == "next" {
			// The value of `next(value)` is *not* awaited by async generators
			nextType = methodParameterType
		} else if methodName == "return" {
			// The value of `return(value)` *is* awaited by async generators
			resolvedMethodParameterType := resolver.resolveIterationType(methodParameterType, errorNode) || c.anyType
			returnTypes = append(returnTypes, resolvedMethodParameterType)
		}
	}

	// Resolve the *yield* and *return* types from the return type of the method (i.e. `IteratorResult`)
	var yieldType *Type
	var methodReturnType *Type
	if methodReturnTypes != nil {
		methodReturnType = c.getIntersectionType(methodReturnTypes)
	} else {
		methodReturnType = c.neverType
	}
	resolvedMethodReturnType := resolver.resolveIterationType(methodReturnType, errorNode) || c.anyType
	iterationTypes := c.getIterationTypesOfIteratorResult(resolvedMethodReturnType)
	if iterationTypes == c.noIterationTypes {
		if errorNode != nil {
			if errorOutputContainer != nil {
				if errorOutputContainer.errors == nil {
					errorOutputContainer.errors = []never{}
				}
				errorOutputContainer.errors.push(createDiagnosticForNode(errorNode, resolver.mustHaveAValueDiagnostic, methodName))
			} else {
				c.error(errorNode, resolver.mustHaveAValueDiagnostic, methodName)
			}
		}
		yieldType = c.anyType
		returnTypes = append(returnTypes, c.anyType)
	} else {
		yieldType = iterationTypes.yieldType
		returnTypes = append(returnTypes, iterationTypes.returnType)
	}

	return c.createIterationTypes(yieldType, c.getUnionType(returnTypes), nextType)
}

/**
 * Gets the *yield*, *return*, and *next* types of an `Iterator`-like or `AsyncIterator`-like
 * type from its members.
 *
 * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
 * record is returned. Otherwise, `noIterationTypes` is returned.
 *
 * NOTE: You probably don't want to call this directly and should be calling
 * `getIterationTypesOfIterator` instead.
 */

func (c *Checker) getIterationTypesOfIteratorSlow(t *Type, resolver IterationTypesResolver, errorNode *ast.Node, errorOutputContainer * /* TODO(TS-TO-GO) TypeNode TypeLiteral: { errors: Diagnostic[] | undefined; } */ any, noCache bool) IterationTypes {
	iterationTypes := c.combineIterationTypes([]*IterationTypes{c.getIterationTypesOfMethod(t, resolver, "next", errorNode, errorOutputContainer), c.getIterationTypesOfMethod(t, resolver, "return", errorNode, errorOutputContainer), c.getIterationTypesOfMethod(t, resolver, "throw", errorNode, errorOutputContainer)})
	if noCache {
		return iterationTypes
	} else {
		return c.setCachedIterationTypes(t, resolver.iteratorCacheKey, iterationTypes)
	}
}

/**
 * Gets the requested "iteration type" from a type that is either `Iterable`-like, `Iterator`-like,
 * `IterableIterator`-like, or `Generator`-like (for a non-async generator); or `AsyncIterable`-like,
 * `AsyncIterator`-like, `AsyncIterableIterator`-like, or `AsyncGenerator`-like (for an async generator).
 */

func (c *Checker) getIterationTypeOfGeneratorFunctionReturnType(kind IterationTypeKind, returnType *Type, isAsyncGenerator bool) *Type {
	if c.isTypeAny(returnType) {
		return nil
	}

	iterationTypes := c.getIterationTypesOfGeneratorFunctionReturnType(returnType, isAsyncGenerator)
	return iterationTypes && iterationTypes[getIterationTypesKeyFromIterationTypeKind(kind)]
}

func (c *Checker) getIterationTypesOfGeneratorFunctionReturnType(t *Type, isAsyncGenerator bool) *IterationTypes {
	if c.isTypeAny(t) {
		return c.anyIterationTypes
	}

	var use /* TODO(TS-TO-GO) inferred type IterationUse.AllowsSyncIterablesFlag | IterationUse.AllowsAsyncIterablesFlag */ any
	if isAsyncGenerator {
		use = IterationUseAsyncGeneratorReturnType
	} else {
		use = IterationUseGeneratorReturnType
	}
	var resolver IterationTypesResolver
	if isAsyncGenerator {
		resolver = c.asyncIterationTypesResolver
	} else {
		resolver = c.syncIterationTypesResolver
	}
	return c.getIterationTypesOfIterable(t, use, nil /*errorNode*/) || c.getIterationTypesOfIterator(t, resolver, nil /*errorNode*/, nil /*errorOutputContainer*/)
}

func (c *Checker) checkBreakOrContinueStatement(node BreakOrContinueStatement) {
	// Grammar checking
	if !c.checkGrammarStatementInAmbientContext(node) {
		c.checkGrammarBreakOrContinueStatement(node)
	}

	// TODO: Check that target label is valid
}

func (c *Checker) unwrapReturnType(returnType *Type, functionFlags FunctionFlags) *Type {
	isGenerator := functionFlags&FunctionFlagsGenerator != 0
	isAsync := functionFlags&FunctionFlagsAsync != 0
	if isGenerator {
		returnIterationType := c.getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKindReturn, returnType, isAsync)
		if returnIterationType == nil {
			return c.errorType
		}
		if isAsync {
			return c.getAwaitedTypeNoAlias(c.unwrapAwaitedType(returnIterationType))
		} else {
			return returnIterationType
		}
	}
	if isAsync {
		return c.getAwaitedTypeNoAlias(returnType) || c.errorType
	} else {
		return returnType
	}
}

func (c *Checker) isUnwrappedReturnTypeUndefinedVoidOrAny(func_ SignatureDeclaration, returnType *Type) bool {
	t := c.unwrapReturnType(returnType, getFunctionFlags(func_))
	return t && (c.maybeTypeOfKind(t, TypeFlagsVoid) || t.flags&(TypeFlagsAny|TypeFlagsUndefined) != 0)
}

func (c *Checker) checkReturnStatement(node ReturnStatement) {
	// Grammar checking
	if c.checkGrammarStatementInAmbientContext(node) {
		return
	}

	container := getContainingFunctionOrClassStaticBlock(node)
	if container != nil && isClassStaticBlockDeclaration(container) {
		c.grammarErrorOnFirstToken(node, Diagnostics.A_return_statement_cannot_be_used_inside_a_class_static_block)
		return
	}

	if container == nil {
		c.grammarErrorOnFirstToken(node, Diagnostics.A_return_statement_can_only_be_used_within_a_function_body)
		return
	}

	signature := c.getSignatureFromDeclaration(container)
	returnType := c.getReturnTypeOfSignature(signature)
	functionFlags := getFunctionFlags(container)
	if c.strictNullChecks || node.Expression != nil || returnType.flags&TypeFlagsNever != 0 {
		var exprType *Type
		if node.Expression != nil {
			exprType = c.checkExpressionCached(node.Expression)
		} else {
			exprType = c.undefinedType
		}
		if container.Kind == ast.KindSetAccessor {
			if node.Expression != nil {
				c.error(node, Diagnostics.Setters_cannot_return_a_value)
			}
		} else if container.Kind == ast.KindConstructor {
			if node.Expression != nil && !c.checkTypeAssignableToAndOptionallyElaborate(exprType, returnType, node, node.Expression) {
				c.error(node, Diagnostics.Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class)
			}
		} else if c.getReturnTypeFromAnnotation(container) != nil {
			unwrappedReturnType := ifNotNilElse(c.unwrapReturnType(returnType, functionFlags), returnType)
			var unwrappedExprType *Type
			if functionFlags&FunctionFlagsAsync != 0 {
				unwrappedExprType = c.checkAwaitedType(exprType, false /*withAlias*/, node, Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member)
			} else {
				unwrappedExprType = exprType
			}
			if unwrappedReturnType {
				// If the function has a return type, but promisedType is
				// undefined, an error will be reported in checkAsyncFunctionReturnType
				// so we don't need to report one here.
				c.checkTypeAssignableToAndOptionallyElaborate(unwrappedExprType, unwrappedReturnType, node, node.Expression)
			}
		}
	} else if container.Kind != ast.KindConstructor && c.compilerOptions.noImplicitReturns && !c.isUnwrappedReturnTypeUndefinedVoidOrAny(container, returnType) {
		// The function has a return type, but the return statement doesn't have an expression.
		c.error(node, Diagnostics.Not_all_code_paths_return_a_value)
	}
}

func (c *Checker) checkWithStatement(node WithStatement) {
	// Grammar checking for withStatement
	if !c.checkGrammarStatementInAmbientContext(node) {
		if node.Flags&ast.NodeFlagsAwaitContext != 0 {
			c.grammarErrorOnFirstToken(node, Diagnostics.with_statements_are_not_allowed_in_an_async_function_block)
		}
	}

	c.checkExpression(node.Expression)

	sourceFile := getSourceFileOfNode(node)
	if !c.hasParseDiagnostics(sourceFile) {
		start := getSpanOfTokenAtPosition(sourceFile, node.Pos).start
		end := node.Statement.Pos
		c.grammarErrorAtPos(sourceFile, start, end-start, Diagnostics.The_with_statement_is_not_supported_All_symbols_in_a_with_block_will_have_type_any)
	}
}

func (c *Checker) checkSwitchStatement(node SwitchStatement) {
	// Grammar checking
	c.checkGrammarStatementInAmbientContext(node)

	var firstDefaultClause CaseOrDefaultClause
	hasDuplicateDefaultClause := false

	expressionType := c.checkExpression(node.Expression)

	forEach(node.CaseBlock.Clauses, func(clause /* TODO(TS-TO-GO) inferred type CaseClause | DefaultClause */ any) {
		// Grammar check for duplicate default clauses, skip if we already report duplicate default clause
		if clause.Kind == ast.KindDefaultClause && !hasDuplicateDefaultClause {
			if firstDefaultClause == nil {
				firstDefaultClause = clause
			} else {
				c.grammarErrorOnNode(clause, Diagnostics.A_default_clause_cannot_appear_more_than_once_in_a_switch_statement)
				hasDuplicateDefaultClause = true
			}
		}

		if clause.Kind == ast.KindCaseClause {
			c.addLazyDiagnostic(createLazyCaseClauseDiagnostics(clause))
		}
		forEach(clause.Statements, c.checkSourceElement)
		if c.compilerOptions.noFallthroughCasesInSwitch && clause.FallthroughFlowNode != nil && c.isReachableFlowNode(clause.FallthroughFlowNode) {
			c.error(clause, Diagnostics.Fallthrough_case_in_switch)
		}

		createLazyCaseClauseDiagnostics := func(clause CaseClause) /* TODO(TS-TO-GO) inferred type () => void */ any {
			return func() {
				// TypeScript 1.0 spec (April 2014): 5.9
				// In a 'switch' statement, each 'case' expression must be of a type that is comparable
				// to or from the type of the 'switch' expression.
				caseType := c.checkExpression(clause.Expression)

				if !c.isTypeEqualityComparableTo(expressionType, caseType) {
					// expressionType is not comparable to caseType, try the reversed check and report errors if it fails
					c.checkTypeComparableTo(caseType, expressionType, clause.Expression, nil /*headMessage*/)
				}
			}
		}

	})
	if node.CaseBlock.Locals != nil {
		c.registerForUnusedIdentifiersCheck(node.CaseBlock)
	}
}

func (c *Checker) checkLabeledStatement(node LabeledStatement) {
	// Grammar checking
	if !c.checkGrammarStatementInAmbientContext(node) {
		findAncestor(node.Parent, func(current *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
			if isFunctionLike(current) {
				return "quit"
			}
			if current.Kind == ast.KindLabeledStatement && current.AsLabeledStatement().Label.EscapedText == node.Label.EscapedText {
				c.grammarErrorOnNode(node.Label, Diagnostics.Duplicate_label_0, getTextOfNode(node.Label))
				return true
			}
			return false
		})
	}

	// ensure that label is unique
	c.checkSourceElement(node.Statement)
}

func (c *Checker) checkThrowStatement(node ThrowStatement) {
	// Grammar checking
	if !c.checkGrammarStatementInAmbientContext(node) {
		if isIdentifier(node.Expression) && !node.Expression.EscapedText {
			c.grammarErrorAfterFirstToken(node, Diagnostics.Line_break_not_permitted_here)
		}
	}

	if node.Expression {
		c.checkExpression(node.Expression)
	}
}

func (c *Checker) checkTryStatement(node TryStatement) {
	// Grammar checking
	c.checkGrammarStatementInAmbientContext(node)

	c.checkBlock(node.TryBlock)
	catchClause := node.CatchClause
	if catchClause != nil {
		// Grammar checking
		if catchClause.VariableDeclaration != nil {
			declaration := catchClause.VariableDeclaration
			c.checkVariableLikeDeclaration(declaration)
			typeNode := getEffectiveTypeAnnotationNode(declaration)
			if typeNode != nil {
				t := c.getTypeFromTypeNode(typeNode)
				if t && t.flags&TypeFlagsAnyOrUnknown == 0 {
					c.grammarErrorOnFirstToken(typeNode, Diagnostics.Catch_clause_variable_type_annotation_must_be_any_or_unknown_if_specified)
				}
			} else if declaration.Initializer != nil {
				c.grammarErrorOnFirstToken(declaration.Initializer, Diagnostics.Catch_clause_variable_cannot_have_an_initializer)
			} else {
				blockLocals := catchClause.Block.Locals
				if blockLocals != nil {
					forEachKey(catchClause.Locals, func(caughtName string) {
						blockLocal := blockLocals.get(caughtName)
						if blockLocal. /* ? */ valueDeclaration != nil && (blockLocal.Flags&ast.SymbolFlagsBlockScopedVariable) != 0 {
							c.grammarErrorOnNode(blockLocal.ValueDeclaration, Diagnostics.Cannot_redeclare_identifier_0_in_catch_clause, unescapeLeadingUnderscores(caughtName))
						}
					})
				}
			}
		}

		c.checkBlock(catchClause.Block)
	}

	if node.FinallyBlock != nil {
		c.checkBlock(node.FinallyBlock)
	}
}

func (c *Checker) checkIndexConstraints(t *Type, symbol *ast.Symbol, isStaticIndex bool) {
	indexInfos := c.getIndexInfosOfType(t)
	if indexInfos.length == 0 {
		return
	}
	for _, prop := range c.getPropertiesOfObjectType(t) {
		if !(isStaticIndex && prop.Flags&ast.SymbolFlagsPrototype != 0) {
			c.checkIndexConstraintForProperty(t, prop, c.getLiteralTypeFromProperty(prop, TypeFlagsStringOrNumberLiteralOrUnique, true /*includeNonPublic*/), c.getNonMissingTypeOfSymbol(prop))
		}
	}
	typeDeclaration := symbol.ValueDeclaration
	if typeDeclaration != nil && isClassLike(typeDeclaration) {
		for _, member := range typeDeclaration.Members {
			// Only process instance properties with computed names here. Static properties cannot be in conflict with indexers,
			// and properties with literal names were already checked.
			if !isStatic(member) && !c.hasBindableName(member) {
				symbol := c.getSymbolOfDeclaration(member)
				c.checkIndexConstraintForProperty(t, symbol, c.getTypeOfExpression(member.AsDynamicNamedDeclaration().Name.Expression), c.getNonMissingTypeOfSymbol(symbol))
			}
		}
	}
	if indexInfos.length > 1 {
		for _, info := range indexInfos {
			c.checkIndexConstraintForIndexSignature(t, info)
		}
	}
}

func (c *Checker) checkIndexConstraintForProperty(t *Type, prop *ast.Symbol, propNameType *Type, propType *Type) {
	declaration := prop.ValueDeclaration
	name := getNameOfDeclaration(declaration)
	if name != nil && isPrivateIdentifier(name) {
		return
	}
	indexInfos := c.getApplicableIndexInfos(t, propNameType)
	var interfaceDeclaration Declaration
	if getObjectFlags(t)&ObjectFlagsInterface != 0 {
		interfaceDeclaration = getDeclarationOfKind(t.symbol, ast.KindInterfaceDeclaration)
	} else {
		interfaceDeclaration = nil
	}
	var propDeclaration Declaration
	if declaration != nil && declaration.Kind == ast.KindBinaryExpression || name != nil && name.Kind == ast.KindComputedPropertyName {
		propDeclaration = declaration
	} else {
		propDeclaration = nil
	}
	var localPropDeclaration Declaration
	if c.getParentOfSymbol(prop) == t.symbol {
		localPropDeclaration = declaration
	} else {
		localPropDeclaration = nil
	}
	for _, info := range indexInfos {
		var localIndexDeclaration *IndexSignatureDeclaration
		if info.declaration != nil && c.getParentOfSymbol(c.getSymbolOfDeclaration(info.declaration)) == t.symbol {
			localIndexDeclaration = info.declaration
		} else {
			localIndexDeclaration = nil
		}
		// We check only when (a) the property is declared in the containing type, or (b) the applicable index signature is declared
		// in the containing type, or (c) the containing type is an interface and no base interface contains both the property and
		// the index signature (i.e. property and index signature are declared in separate inherited interfaces).
		errorNode := localPropDeclaration || localIndexDeclaration || (ifElse(interfaceDeclaration != nil && !core.Some(c.getBaseTypes(t.AsInterfaceType()), func(base BaseType) bool {
			return c.getPropertyOfObjectType(base, prop.EscapedName) != nil && c.getIndexTypeOfType(base, info.keyType) != nil
		}), interfaceDeclaration, nil))
		if errorNode != nil && !c.isTypeAssignableTo(propType, info.type_) {
			diagnostic := c.createError(errorNode, Diagnostics.Property_0_of_type_1_is_not_assignable_to_2_index_type_3, c.symbolToString(prop), c.typeToString(propType), c.typeToString(info.keyType), c.typeToString(info.type_))
			if propDeclaration != nil && errorNode != propDeclaration {
				addRelatedInfo(diagnostic, createDiagnosticForNode(propDeclaration, Diagnostics._0_is_declared_here, c.symbolToString(prop)))
			}
			c.diagnostics.add(diagnostic)
		}
	}
}

func (c *Checker) checkIndexConstraintForIndexSignature(t *Type, checkInfo IndexInfo) {
	declaration := checkInfo.declaration
	indexInfos := c.getApplicableIndexInfos(t, checkInfo.keyType)
	var interfaceDeclaration Declaration
	if getObjectFlags(t)&ObjectFlagsInterface != 0 {
		interfaceDeclaration = getDeclarationOfKind(t.symbol, ast.KindInterfaceDeclaration)
	} else {
		interfaceDeclaration = nil
	}
	var localCheckDeclaration *IndexSignatureDeclaration
	if declaration != nil && c.getParentOfSymbol(c.getSymbolOfDeclaration(declaration)) == t.symbol {
		localCheckDeclaration = declaration
	} else {
		localCheckDeclaration = nil
	}
	for _, info := range indexInfos {
		if info == checkInfo {
			continue
		}
		var localIndexDeclaration *IndexSignatureDeclaration
		if info.declaration != nil && c.getParentOfSymbol(c.getSymbolOfDeclaration(info.declaration)) == t.symbol {
			localIndexDeclaration = info.declaration
		} else {
			localIndexDeclaration = nil
		}
		// We check only when (a) the check index signature is declared in the containing type, or (b) the applicable index
		// signature is declared in the containing type, or (c) the containing type is an interface and no base interface contains
		// both index signatures (i.e. the index signatures are declared in separate inherited interfaces).
		errorNode := localCheckDeclaration || localIndexDeclaration || (ifElse(interfaceDeclaration != nil && !core.Some(c.getBaseTypes(t.AsInterfaceType()), func(base BaseType) bool {
			return c.getIndexInfoOfType(base, checkInfo.keyType) != nil && c.getIndexTypeOfType(base, info.keyType) != nil
		}), interfaceDeclaration, nil))
		if errorNode != nil && !c.isTypeAssignableTo(checkInfo.type_, info.type_) {
			c.error(errorNode, Diagnostics._0_index_type_1_is_not_assignable_to_2_index_type_3, c.typeToString(checkInfo.keyType), c.typeToString(checkInfo.type_), c.typeToString(info.keyType), c.typeToString(info.type_))
		}
	}
}

func (c *Checker) checkTypeNameIsReserved(name Identifier, message DiagnosticMessage) {
	// TS 1.0 spec (April 2014): 3.6.1
	// The predefined type keywords are reserved and cannot be used as names of user defined types.
	switch name.EscapedText {
	case "any",
		"unknown",
		"never",
		"number",
		"bigint",
		"boolean",
		"string",
		"symbol",
		"void",
		"object",
		"undefined":
		c.error(name, message, name.EscapedText /* as string */)
	}
}

/**
 * The name cannot be used as 'Object' of user defined types with special target.
 */

func (c *Checker) checkClassNameCollisionWithObject(name Identifier) {
	if c.languageVersion >= ScriptTargetES5 && name.EscapedText == "Object" && host.getEmitModuleFormatOfFile(getSourceFileOfNode(name)) < ModuleKindES2015 {
		c.error(name, Diagnostics.Class_name_cannot_be_Object_when_targeting_ES5_with_module_0, ModuleKind[c.moduleKind])
		// https://github.com/Microsoft/TypeScript/issues/17494
	}
}

func (c *Checker) checkUnmatchedJSDocParameters(node SignatureDeclaration) {
	jsdocParameters := core.Filter(getJSDocTags(node), isJSDocParameterTag)
	if length(jsdocParameters) == 0 {
		return
	}

	isJs := isInJSFile(node)
	parameters := NewSet[string]()
	excludedParameters := NewSet[number]()
	forEach(node.Parameters, func(TODO_IDENTIFIER ParameterDeclaration, index number) {
		if isIdentifier(name) {
			parameters.add(name.EscapedText)
		}
		if isBindingPattern(name) {
			excludedParameters.add(index)
		}
	})

	containsArguments := c.containsArgumentsReference(node)
	if containsArguments {
		lastJSDocParamIndex := jsdocParameters.length - 1
		lastJSDocParam := jsdocParameters[lastJSDocParamIndex]
		if isJs && lastJSDocParam && isIdentifier(lastJSDocParam.Name) && lastJSDocParam.TypeExpression != nil && lastJSDocParam.TypeExpression.Type_ && !parameters.has(lastJSDocParam.Name.EscapedText) && !excludedParameters.has(lastJSDocParamIndex) && !c.isArrayType(c.getTypeFromTypeNode(lastJSDocParam.TypeExpression.Type_)) {
			c.error(lastJSDocParam.Name, Diagnostics.JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name_It_would_match_arguments_if_it_had_an_array_type, idText(lastJSDocParam.Name))
		}
	} else {
		forEach(jsdocParameters, func(TODO_IDENTIFIER JSDocParameterTag, index number) {
			if excludedParameters.has(index) || isIdentifier(name) && parameters.has(name.EscapedText) {
				return
			}
			if isQualifiedName(name) {
				if isJs {
					c.error(name, Diagnostics.Qualified_name_0_is_not_allowed_without_a_leading_param_object_1, entityNameToString(name), entityNameToString(name.Left))
				}
			} else {
				if !isNameFirst {
					c.errorOrSuggestion(isJs, name, Diagnostics.JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name, idText(name))
				}
			}
		})
	}
}

/**
 * Check each type parameter and check that type parameters have no duplicate type parameter declarations
 */

func (c *Checker) checkTypeParameters(typeParameterDeclarations *[]TypeParameterDeclaration) {
	seenDefault := false
	if typeParameterDeclarations != nil {
		for i := 0; i < typeParameterDeclarations.length; i++ {
			node := typeParameterDeclarations[i]
			c.checkTypeParameter(node)

			c.addLazyDiagnostic(createCheckTypeParameterDiagnostic(node, i))
		}
	}

	createCheckTypeParameterDiagnostic := func(node TypeParameterDeclaration, i number) /* TODO(TS-TO-GO) inferred type () => void */ any {
		return func() {
			if node.Default_ != nil {
				seenDefault = true
				c.checkTypeParametersNotReferenced(node.Default_, typeParameterDeclarations, i)
			} else if seenDefault {
				c.error(node, Diagnostics.Required_type_parameters_may_not_follow_optional_type_parameters)
			}
			for j := 0; j < i; j++ {
				if typeParameterDeclarations[j].Symbol == node.Symbol {
					c.error(node.Name, Diagnostics.Duplicate_identifier_0, declarationNameToString(node.Name))
				}
			}
		}
	}

}

/** Check that type parameter defaults only reference previously declared type parameters */

func (c *Checker) checkTypeParametersNotReferenced(root TypeNode, typeParameters []TypeParameterDeclaration, index number) {
	visit(root)
	visit := func(node *ast.Node) {
		if node.Kind == ast.KindTypeReference {
			t := c.getTypeFromTypeReference(node.AsTypeReferenceNode())
			if t.flags&TypeFlagsTypeParameter != 0 {
				for i := index; i < typeParameters.length; i++ {
					if t.symbol == c.getSymbolOfDeclaration(typeParameters[i]) {
						c.error(node, Diagnostics.Type_parameter_defaults_can_only_reference_previously_declared_type_parameters)
					}
				}
			}
		}
		forEachChild(node, visit)
	}

}

/** Check that type parameter lists are identical across multiple declarations */

func (c *Checker) checkTypeParameterListsIdentical(symbol *ast.Symbol) {
	if symbol.Declarations != nil && symbol.Declarations.length == 1 {
		return
	}

	links := c.getSymbolLinks(symbol)
	if !links.typeParametersChecked {
		links.typeParametersChecked = true
		declarations := c.getClassOrInterfaceDeclarationsOfSymbol(symbol)
		if declarations == nil || declarations.length <= 1 {
			return
		}

		t := c.getDeclaredTypeOfSymbol(symbol).AsInterfaceType()
		if !c.areTypeParametersIdentical(declarations, t.localTypeParameters, getEffectiveTypeParameterDeclarations) {
			// Report an error on every conflicting declaration.
			name := c.symbolToString(symbol)
			for _, declaration := range declarations {
				c.error(declaration.Name, Diagnostics.All_declarations_of_0_must_have_identical_type_parameters, name)
			}
		}
	}
}

func (c *Checker) areTypeParametersIdentical(declarations []T, targetParameters []TypeParameter, getTypeParameterDeclarations func(node T) []TypeParameterDeclaration) bool {
	maxTypeArgumentCount := length(targetParameters)
	minTypeArgumentCount := c.getMinTypeArgumentCount(targetParameters)

	for _, declaration := range declarations {
		// If this declaration has too few or too many type parameters, we report an error
		sourceParameters := getTypeParameterDeclarations(declaration)
		numTypeParameters := sourceParameters.length
		if numTypeParameters < minTypeArgumentCount || numTypeParameters > maxTypeArgumentCount {
			return false
		}

		for i := 0; i < numTypeParameters; i++ {
			source := sourceParameters[i]
			target := targetParameters[i]

			// If the type parameter node does not have the same as the resolved type
			// parameter at this position, we report an error.
			if source.Name.EscapedText != target.symbol.EscapedName {
				return false
			}

			// If the type parameter node does not have an identical constraint as the resolved
			// type parameter at this position, we report an error.
			constraint := getEffectiveConstraintOfTypeParameter(source)
			sourceConstraint := constraint && c.getTypeFromTypeNode(constraint)
			targetConstraint := c.getConstraintOfTypeParameter(target)
			// relax check if later interface augmentation has no constraint, it's more broad and is OK to merge with
			// a more constrained interface (this could be generalized to a full hierarchy check, but that's maybe overkill)
			if sourceConstraint != nil && targetConstraint != nil && !c.isTypeIdenticalTo(sourceConstraint, targetConstraint) {
				return false
			}

			// If the type parameter node has a default and it is not identical to the default
			// for the type parameter at this position, we report an error.
			sourceDefault := source.Default_ && c.getTypeFromTypeNode(source.Default_)
			targetDefault := c.getDefaultFromTypeParameter(target)
			if sourceDefault != nil && targetDefault != nil && !c.isTypeIdenticalTo(sourceDefault, targetDefault) {
				return false
			}
		}
	}

	return true
}

func (c *Checker) getFirstTransformableStaticClassElement(node ClassLikeDeclaration) * /* TODO(TS-TO-GO) inferred type ClassLikeDeclaration | ClassStaticBlockDeclaration | Decorator | PrivateIdentifierPropertyDeclaration | PrivateIdentifierMethodDeclaration | PrivateIdentifierGetAccessorDeclaration | PrivateIdentifierSetAccessorDeclaration | (PropertyDeclaration & { initializer: Expression; }) */ any {
	willTransformStaticElementsOfDecoratedClass := !c.legacyDecorators && c.languageVersion < LanguageFeatureMinimumTarget.ClassAndClassElementDecorators && classOrConstructorParameterIsDecorated(false, node)
	willTransformPrivateElementsOrClassStaticBlocks := c.languageVersion < LanguageFeatureMinimumTarget.PrivateNamesAndClassStaticBlocks || c.languageVersion < LanguageFeatureMinimumTarget.ClassAndClassElementDecorators
	willTransformInitializers := !c.emitStandardClassFields
	if willTransformStaticElementsOfDecoratedClass || willTransformPrivateElementsOrClassStaticBlocks {
		for _, member := range node.Members {
			if willTransformStaticElementsOfDecoratedClass && classElementOrClassElementParameterIsDecorated(false, member, node) {
				return ifNotNilElse(firstOrUndefined(getDecorators(node)), node)
			} else if willTransformPrivateElementsOrClassStaticBlocks {
				if isClassStaticBlockDeclaration(member) {
					return member
				} else if isStatic(member) {
					if isPrivateIdentifierClassElementDeclaration(member) || willTransformInitializers && isInitializedProperty(member) {
						return member
					}
				}
			}
		}
	}
}

func (c *Checker) checkClassExpressionExternalHelpers(node ClassExpression) {
	if node.Name != nil {
		return
	}

	parent := walkUpOuterExpressions(node)
	if !isNamedEvaluationSource(parent) {
		return
	}

	willTransformESDecorators := !c.legacyDecorators && c.languageVersion < LanguageFeatureMinimumTarget.ClassAndClassElementDecorators
	var location *ast.Node
	if willTransformESDecorators && classOrConstructorParameterIsDecorated(false, node) {
		location = ifNotNilElse(firstOrUndefined(getDecorators(node)), node)
	} else {
		location = c.getFirstTransformableStaticClassElement(node)
	}

	if location != nil {
		c.checkExternalEmitHelpers(location, ExternalEmitHelpersSetFunctionName)
		if (isPropertyAssignment(parent) || isPropertyDeclaration(parent) || isBindingElement(parent)) && isComputedPropertyName(parent.Name) {
			c.checkExternalEmitHelpers(location, ExternalEmitHelpersPropKey)
		}
	}
}

func (c *Checker) checkClassExpression(node ClassExpression) *Type {
	c.checkClassLikeDeclaration(node)
	c.checkNodeDeferred(node)
	c.checkClassExpressionExternalHelpers(node)
	return c.getTypeOfSymbol(c.getSymbolOfDeclaration(node))
}

func (c *Checker) checkClassExpressionDeferred(node ClassExpression) {
	forEach(node.Members, c.checkSourceElement)
	c.registerForUnusedIdentifiersCheck(node)
}

func (c *Checker) checkClassDeclaration(node ClassDeclaration) {
	firstDecorator := core.Find(node.Modifiers, isDecorator)
	if c.legacyDecorators && firstDecorator != nil && core.Some(node.Members, func(p ClassElement) bool {
		return hasStaticModifier(p) && isPrivateIdentifierClassElementDeclaration(p)
	}) {
		c.grammarErrorOnNode(firstDecorator, Diagnostics.Class_decorators_can_t_be_used_with_static_private_identifier_Consider_removing_the_experimental_decorator)
	}
	if node.Name == nil && !hasSyntacticModifier(node, ast.ModifierFlagsDefault) {
		c.grammarErrorOnFirstToken(node, Diagnostics.A_class_declaration_without_the_default_modifier_must_have_a_name)
	}
	c.checkClassLikeDeclaration(node)
	forEach(node.Members, c.checkSourceElement)

	c.registerForUnusedIdentifiersCheck(node)
}

func (c *Checker) checkClassLikeDeclaration(node ClassLikeDeclaration) {
	c.checkGrammarClassLikeDeclaration(node)
	c.checkDecorators(node)
	c.checkCollisionsForDeclarationName(node, node.Name)
	c.checkTypeParameters(getEffectiveTypeParameterDeclarations(node))
	c.checkExportsOnMergedDeclarations(node)
	symbol := c.getSymbolOfDeclaration(node)
	type_ := c.getDeclaredTypeOfSymbol(symbol).AsInterfaceType()
	typeWithThis := c.getTypeWithThisArgument(type_)
	staticType := c.getTypeOfSymbol(symbol).AsObjectType()
	c.checkTypeParameterListsIdentical(symbol)
	c.checkFunctionOrConstructorSymbol(symbol)
	c.checkClassForDuplicateDeclarations(node)

	// Only check for reserved static identifiers on non-ambient context.
	nodeInAmbientContext := node.Flags&ast.NodeFlagsAmbient != 0
	if !nodeInAmbientContext {
		c.checkClassForStaticPropertyNameConflicts(node)
	}

	baseTypeNode := getEffectiveBaseTypeNode(node)
	if baseTypeNode != nil {
		forEach(baseTypeNode.TypeArguments, c.checkSourceElement)
		if c.languageVersion < LanguageFeatureMinimumTarget.Classes {
			c.checkExternalEmitHelpers(baseTypeNode.Parent, ExternalEmitHelpersExtends)
		}
		// check both @extends and extends if both are specified.
		extendsNode := getClassExtendsHeritageElement(node)
		if extendsNode != nil && extendsNode != baseTypeNode {
			c.checkExpression(extendsNode.Expression)
		}

		baseTypes := c.getBaseTypes(type_)
		if baseTypes.length != 0 {
			c.addLazyDiagnostic(func() {
				baseType := baseTypes[0]
				baseConstructorType := c.getBaseConstructorTypeOfClass(type_)
				staticBaseType := c.getApparentType(baseConstructorType)
				c.checkBaseTypeAccessibility(staticBaseType, baseTypeNode)
				c.checkSourceElement(baseTypeNode.Expression)
				if core.Some(baseTypeNode.TypeArguments) {
					forEach(baseTypeNode.TypeArguments, c.checkSourceElement)
					for _, constructor := range c.getConstructorsForTypeArguments(staticBaseType, baseTypeNode.TypeArguments, baseTypeNode) {
						if !c.checkTypeArgumentConstraints(baseTypeNode, constructor.typeParameters) {
							break
						}
					}
				}
				baseWithThis := c.getTypeWithThisArgument(baseType, type_.thisType)
				if !c.checkTypeAssignableTo(typeWithThis, baseWithThis, nil /*errorNode*/) {
					c.issueMemberSpecificError(node, typeWithThis, baseWithThis, Diagnostics.Class_0_incorrectly_extends_base_class_1)
				} else {
					// Report static side error only when instance type is assignable
					c.checkTypeAssignableTo(staticType, c.getTypeWithoutSignatures(staticBaseType), node.Name || node, Diagnostics.Class_static_side_0_incorrectly_extends_base_class_static_side_1)
				}
				if baseConstructorType.flags&TypeFlagsTypeVariable != 0 {
					if !c.isMixinConstructorType(staticType) {
						c.error(node.Name || node, Diagnostics.A_mixin_class_must_have_a_constructor_with_a_single_rest_parameter_of_type_any)
					} else {
						constructSignatures := c.getSignaturesOfType(baseConstructorType, SignatureKindConstruct)
						if constructSignatures.some(func(signature Signature) number {
							return signature.flags & SignatureFlagsAbstract
						}) && !hasSyntacticModifier(node, ast.ModifierFlagsAbstract) {
							c.error(node.Name || node, Diagnostics.A_mixin_class_that_extends_from_a_type_variable_containing_an_abstract_construct_signature_must_also_be_declared_abstract)
						}
					}
				}

				if !(staticBaseType.symbol && staticBaseType.symbol.Flags&ast.SymbolFlagsClass != 0) && baseConstructorType.flags&TypeFlagsTypeVariable == 0 {
					// When the static base type is a "class-like" constructor function (but not actually a class), we verify
					// that all instantiated base constructor signatures return the same type.
					constructors := c.getInstantiatedConstructorsForTypeArguments(staticBaseType, baseTypeNode.TypeArguments, baseTypeNode)
					if forEach(constructors, func(sig Signature) bool {
						return !c.isJSConstructor(sig.declaration) && !c.isTypeIdenticalTo(c.getReturnTypeOfSignature(sig), baseType)
					}) {
						c.error(baseTypeNode.Expression, Diagnostics.Base_constructors_must_all_have_the_same_return_type)
					}
				}
				c.checkKindsOfPropertyMemberOverrides(type_, baseType)
			})
		}
	}

	c.checkMembersForOverrideModifier(node, type_, typeWithThis, staticType)

	implementedTypeNodes := getEffectiveImplementsTypeNodes(node)
	if implementedTypeNodes != nil {
		for _, typeRefNode := range implementedTypeNodes {
			if !isEntityNameExpression(typeRefNode.Expression) || isOptionalChain(typeRefNode.Expression) {
				c.error(typeRefNode.Expression, Diagnostics.A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments)
			}
			c.checkTypeReferenceNode(typeRefNode)
			c.addLazyDiagnostic(createImplementsDiagnostics(typeRefNode))
		}
	}

	c.addLazyDiagnostic(func() {
		c.checkIndexConstraints(type_, symbol)
		c.checkIndexConstraints(staticType, symbol, true /*isStaticIndex*/)
		c.checkTypeForDuplicateIndexSignatures(node)
		c.checkPropertyInitialization(node)
	})

	createImplementsDiagnostics := func(typeRefNode ExpressionWithTypeArguments) /* TODO(TS-TO-GO) inferred type () => void */ any {
		return func() {
			t := c.getReducedType(c.getTypeFromTypeNode(typeRefNode))
			if !c.isErrorType(t) {
				if c.isValidBaseType(t) {
					var genericDiag any
					if t.symbol && t.symbol.Flags&ast.SymbolFlagsClass != 0 {
						genericDiag = Diagnostics.Class_0_incorrectly_implements_class_1_Did_you_mean_to_extend_1_and_inherit_its_members_as_a_subclass
					} else {
						genericDiag = Diagnostics.Class_0_incorrectly_implements_interface_1
					}
					baseWithThis := c.getTypeWithThisArgument(t, type_.thisType)
					if !c.checkTypeAssignableTo(typeWithThis, baseWithThis, nil /*errorNode*/) {
						c.issueMemberSpecificError(node, typeWithThis, baseWithThis, genericDiag)
					}
				} else {
					c.error(typeRefNode, Diagnostics.A_class_can_only_implement_an_object_type_or_intersection_of_object_types_with_statically_known_members)
				}
			}
		}
	}

}

func (c *Checker) checkMembersForOverrideModifier(node ClassLikeDeclaration, t InterfaceType, typeWithThis *Type, staticType ObjectType) {
	baseTypeNode := getEffectiveBaseTypeNode(node)
	baseTypes := baseTypeNode && c.getBaseTypes(t)
	var baseWithThis *Type
	if baseTypes. /* ? */ length {
		baseWithThis = c.getTypeWithThisArgument(core.FirstOrNil(baseTypes), t.thisType)
	} else {
		baseWithThis = nil
	}
	baseStaticType := c.getBaseConstructorTypeOfClass(t)

	for _, member := range node.Members {
		if hasAmbientModifier(member) {
			continue
		}

		if isConstructorDeclaration(member) {
			forEach(member.Parameters, func(param ParameterDeclaration) {
				if isParameterPropertyDeclaration(param, member) {
					c.checkExistingMemberForOverrideModifier(node, staticType, baseStaticType, baseWithThis, t, typeWithThis, param, true)
				}
			})
		}
		c.checkExistingMemberForOverrideModifier(node, staticType, baseStaticType, baseWithThis, t, typeWithThis, member, false)
	}
}

/**
 * @param member Existing member node to be checked.
 * Note: `member` cannot be a synthetic node.
 */

func (c *Checker) checkExistingMemberForOverrideModifier(node ClassLikeDeclaration, staticType ObjectType, baseStaticType *Type, baseWithThis *Type, t InterfaceType, typeWithThis *Type, member Union[ClassElement, ParameterPropertyDeclaration], memberIsParameterProperty bool, reportErrors bool /*  = true */) MemberOverrideStatus {
	declaredProp := member.Name && c.getSymbolAtLocation(member.Name) || c.getSymbolAtLocation(member)
	if declaredProp == nil {
		return MemberOverrideStatusOk
	}

	return c.checkMemberForOverrideModifier(node, staticType, baseStaticType, baseWithThis, t, typeWithThis, hasOverrideModifier(member), hasAbstractModifier(member), isStatic(member), memberIsParameterProperty, declaredProp, ifElse(reportErrors, member, nil))
}

/**
 * Checks a class member declaration for either a missing or an invalid `override` modifier.
 * Note: this function can be used for speculative checking,
 * i.e. checking a member that does not yet exist in the program.
 * An example of that would be to call this function in a completions scenario,
 * when offering a method declaration as completion.
 * @param errorNode The node where we should report an error, or undefined if we should not report errors.
 */

func (c *Checker) checkMemberForOverrideModifier(node ClassLikeDeclaration, staticType ObjectType, baseStaticType *Type, baseWithThis *Type, t InterfaceType, typeWithThis *Type, memberHasOverrideModifier bool, memberHasAbstractModifier bool, memberIsStatic bool, memberIsParameterProperty bool, member *ast.Symbol, errorNode *ast.Node) MemberOverrideStatus {
	isJs := isInJSFile(node)
	nodeInAmbientContext := node.Flags&ast.NodeFlagsAmbient != 0
	if baseWithThis != nil && (memberHasOverrideModifier || c.compilerOptions.noImplicitOverride) {
		var thisType *Type
		if memberIsStatic {
			thisType = staticType
		} else {
			thisType = typeWithThis
		}
		var baseType *Type
		if memberIsStatic {
			baseType = baseStaticType
		} else {
			baseType = baseWithThis
		}
		prop := c.getPropertyOfType(thisType, member.EscapedName)
		baseProp := c.getPropertyOfType(baseType, member.EscapedName)

		baseClassName := c.typeToString(baseWithThis)
		if prop != nil && baseProp == nil && memberHasOverrideModifier {
			if errorNode != nil {
				suggestion := c.getSuggestedSymbolForNonexistentClassMember(symbolName(member), baseType)
				// Again, using symbol name: note that's different from `symbol.escapedName`
				ifElse(suggestion != nil, c.error(errorNode, ifElse(isJs, Diagnostics.This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base_class_0_Did_you_mean_1, Diagnostics.This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0_Did_you_mean_1), baseClassName, c.symbolToString(suggestion)), c.error(errorNode, ifElse(isJs, Diagnostics.This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base_class_0, Diagnostics.This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0), baseClassName))
			}
			return MemberOverrideStatusHasInvalidOverride
		} else if prop != nil && baseProp. /* ? */ declarations != nil && c.compilerOptions.noImplicitOverride && !nodeInAmbientContext {
			baseHasAbstract := core.Some(baseProp.Declarations, hasAbstractModifier)
			if memberHasOverrideModifier {
				return MemberOverrideStatusOk
			}

			if !baseHasAbstract {
				if errorNode != nil {
					var diag any
					switch {
					case memberIsParameterProperty:
						if isJs {
							diag = Diagnostics.This_parameter_property_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_class_0
						} else {
							diag = Diagnostics.This_parameter_property_must_have_an_override_modifier_because_it_overrides_a_member_in_base_class_0
						}
					case isJs:
						diag = Diagnostics.This_member_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_class_0
					default:
						diag = Diagnostics.This_member_must_have_an_override_modifier_because_it_overrides_a_member_in_the_base_class_0
					}
					c.error(errorNode, diag, baseClassName)
				}
				return MemberOverrideStatusNeedsOverride
			} else if memberHasAbstractModifier && baseHasAbstract {
				if errorNode != nil {
					c.error(errorNode, Diagnostics.This_member_must_have_an_override_modifier_because_it_overrides_an_abstract_method_that_is_declared_in_the_base_class_0, baseClassName)
				}
				return MemberOverrideStatusNeedsOverride
			}
		}
	} else if memberHasOverrideModifier {
		if errorNode != nil {
			className := c.typeToString(t)
			c.error(errorNode, ifElse(isJs, Diagnostics.This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_its_containing_class_0_does_not_extend_another_class, Diagnostics.This_member_cannot_have_an_override_modifier_because_its_containing_class_0_does_not_extend_another_class), className)
		}
		return MemberOverrideStatusHasInvalidOverride
	}

	return MemberOverrideStatusOk
}

func (c *Checker) issueMemberSpecificError(node ClassLikeDeclaration, typeWithThis *Type, baseWithThis *Type, broadDiag DiagnosticMessage) {
	// iterate over all implemented properties and issue errors on each one which isn't compatible, rather than the class as a whole, if possible
	issuedMemberError := false
	for _, member := range node.Members {
		if isStatic(member) {
			continue
		}
		declaredProp := member.Name && c.getSymbolAtLocation(member.Name) || c.getSymbolAtLocation(member)
		if declaredProp != nil {
			prop := c.getPropertyOfType(typeWithThis, declaredProp.EscapedName)
			baseProp := c.getPropertyOfType(baseWithThis, declaredProp.EscapedName)
			if prop != nil && baseProp != nil {
				rootChain := func() DiagnosticMessageChain {
					return chainDiagnosticMessages(nil, Diagnostics.Property_0_in_type_1_is_not_assignable_to_the_same_property_in_base_type_2, c.symbolToString(declaredProp), c.typeToString(typeWithThis), c.typeToString(baseWithThis))
				}
				if !c.checkTypeAssignableTo(c.getTypeOfSymbol(prop), c.getTypeOfSymbol(baseProp), member.Name || member, nil /*headMessage*/, rootChain) {
					issuedMemberError = true
				}
			}
		}
	}
	if !issuedMemberError {
		// check again with diagnostics to generate a less-specific error
		c.checkTypeAssignableTo(typeWithThis, baseWithThis, node.Name || node, broadDiag)
	}
}

func (c *Checker) checkBaseTypeAccessibility(t *Type, node ExpressionWithTypeArguments) {
	signatures := c.getSignaturesOfType(t, SignatureKindConstruct)
	if signatures.length != 0 {
		declaration := signatures[0].declaration
		if declaration != nil && hasEffectiveModifier(declaration, ast.ModifierFlagsPrivate) {
			typeClassDeclaration := getClassLikeDeclarationOfSymbol(t.symbol)
			if !c.isNodeWithinClass(node, typeClassDeclaration) {
				c.error(node, Diagnostics.Cannot_extend_a_class_0_Class_constructor_is_marked_as_private, c.getFullyQualifiedName(t.symbol))
			}
		}
	}
}

/**
 * Checks a member declaration node to see if has a missing or invalid `override` modifier.
 * @param node Class-like node where the member is declared.
 * @param member Member declaration node.
 * @param memberSymbol Member symbol.
 * Note: `member` can be a synthetic node without a parent.
 */

func (c *Checker) getMemberOverrideModifierStatus(node ClassLikeDeclaration, member ClassElement, memberSymbol *ast.Symbol) MemberOverrideStatus {
	if member.Name == nil {
		return MemberOverrideStatusOk
	}

	classSymbol := c.getSymbolOfDeclaration(node)
	t := c.getDeclaredTypeOfSymbol(classSymbol).AsInterfaceType()
	typeWithThis := c.getTypeWithThisArgument(t)
	staticType := c.getTypeOfSymbol(classSymbol).AsObjectType()

	baseTypeNode := getEffectiveBaseTypeNode(node)
	baseTypes := baseTypeNode && c.getBaseTypes(t)
	var baseWithThis *Type
	if baseTypes. /* ? */ length {
		baseWithThis = c.getTypeWithThisArgument(core.FirstOrNil(baseTypes), t.thisType)
	} else {
		baseWithThis = nil
	}
	baseStaticType := c.getBaseConstructorTypeOfClass(t)

	var memberHasOverrideModifier bool
	if member.Parent {
		memberHasOverrideModifier = hasOverrideModifier(member)
	} else {
		memberHasOverrideModifier = hasSyntacticModifier(member, ast.ModifierFlagsOverride)
	}

	return c.checkMemberForOverrideModifier(node, staticType, baseStaticType, baseWithThis, t, typeWithThis, memberHasOverrideModifier, hasAbstractModifier(member), isStatic(member), false, memberSymbol)
}

func (c *Checker) getTargetSymbol(s *ast.Symbol) *ast.Symbol {
	// if symbol is instantiated its flags are not copied from the 'target'
	// so we'll need to get back original 'target' symbol to work with correct set of flags
	// NOTE: cast to TransientSymbol should be safe because only TransientSymbols have CheckFlags.Instantiated
	if getCheckFlags(s)&ast.CheckFlagsInstantiated != 0 {
		return (s.(TransientSymbol)).Links.target
	} else {
		return s
	}
}

func (c *Checker) getClassOrInterfaceDeclarationsOfSymbol(symbol *ast.Symbol) *[] /* TODO(TS-TO-GO) inferred type (InterfaceDeclaration | ClassDeclaration) */ any {
	return core.Filter(symbol.Declarations, func(d Declaration) bool {
		return d.Kind == ast.KindClassDeclaration || d.Kind == ast.KindInterfaceDeclaration
	})
}

func (c *Checker) checkKindsOfPropertyMemberOverrides(t InterfaceType, baseType BaseType) {
	// TypeScript 1.0 spec (April 2014): 8.2.3
	// A derived class inherits all members from its base class it doesn't override.
	// Inheritance means that a derived class implicitly contains all non - overridden members of the base class.
	// Both public and private property members are inherited, but only public property members can be overridden.
	// A property member in a derived class is said to override a property member in a base class
	// when the derived class property member has the same name and kind(instance or static)
	// as the base class property member.
	// The type of an overriding property member must be assignable(section 3.8.4)
	// to the type of the overridden property member, or otherwise a compile - time error occurs.
	// Base class instance member functions can be overridden by derived class instance member functions,
	// but not by other kinds of members.
	// Base class instance member variables and accessors can be overridden by
	// derived class instance member variables and accessors, but not by other kinds of members.

	// NOTE: assignability is checked in checkClassDeclaration
	baseProperties := c.getPropertiesOfType(baseType)

	type MemberInfo struct {
		missedProperties []string
		baseTypeName     string
		typeName         string
	}
	notImplementedInfo := NewMap[ClassLikeDeclaration, MemberInfo]()

basePropertyCheck:
	for _, baseProperty := range baseProperties {
		base := c.getTargetSymbol(baseProperty)

		if base.Flags&ast.SymbolFlagsPrototype != 0 {
			continue
		}
		baseSymbol := c.getPropertyOfObjectType(t, base.EscapedName)
		if baseSymbol == nil {
			continue
		}
		derived := c.getTargetSymbol(baseSymbol)
		baseDeclarationFlags := getDeclarationModifierFlagsFromSymbol(base)

		Debug.assert(derived, "derived should point to something, even if it is the base class' declaration.")

		// In order to resolve whether the inherited method was overridden in the base class or not,
		// we compare the Symbols obtained. Since getTargetSymbol returns the symbol on the *uninstantiated*
		// type declaration, derived and base resolve to the same symbol even in the case of generic classes.
		if derived == base {
			// derived class inherits base without override/redeclaration
			derivedClassDecl := getClassLikeDeclarationOfSymbol(t.symbol)

			// It is an error to inherit an abstract member without implementing it or being declared abstract.
			// If there is no declaration for the derived class (as in the case of class expressions),
			// then the class cannot be declared abstract.
			if baseDeclarationFlags&ast.ModifierFlagsAbstract != 0 && (!derivedClassDecl || !hasSyntacticModifier(derivedClassDecl, ast.ModifierFlagsAbstract)) {
				// Searches other base types for a declaration that would satisfy the inherited abstract member.
				// (The class may have more than one base type via declaration merging with an interface with the
				// same name.)
				for _, otherBaseType := range c.getBaseTypes(t) {
					if otherBaseType == baseType {
						continue
					}
					baseSymbol := c.getPropertyOfObjectType(otherBaseType, base.EscapedName)
					derivedElsewhere := baseSymbol && c.getTargetSymbol(baseSymbol)
					if derivedElsewhere != nil && derivedElsewhere != base {
						continue basePropertyCheck
					}
				}
				baseTypeName := c.typeToString(baseType)
				typeName := c.typeToString(t)
				basePropertyName := c.symbolToString(baseProperty)
				missedProperties := append(notImplementedInfo.get(derivedClassDecl). /* ? */ missedProperties, basePropertyName)
				notImplementedInfo.set(derivedClassDecl, MemberInfo{
					baseTypeName:     baseTypeName,
					typeName:         typeName,
					missedProperties: missedProperties,
				})
			}
		} else {
			// derived overrides base.
			derivedDeclarationFlags := getDeclarationModifierFlagsFromSymbol(derived)
			if baseDeclarationFlags&ast.ModifierFlagsPrivate != 0 || derivedDeclarationFlags&ast.ModifierFlagsPrivate != 0 {
				// either base or derived property is private - not override, skip it
				continue
			}

			var errorMessage DiagnosticMessage
			basePropertyFlags := base.Flags & ast.SymbolFlagsPropertyOrAccessor
			derivedPropertyFlags := derived.Flags & ast.SymbolFlagsPropertyOrAccessor
			if basePropertyFlags != 0 && derivedPropertyFlags != 0 {
				// property/accessor is overridden with property/accessor
				if (ifElse(getCheckFlags(base)&ast.CheckFlagsSynthetic != 0, base.Declarations. /* ? */ some(func(d Declaration) bool {
					return c.isPropertyAbstractOrInterface(d, baseDeclarationFlags)
				}), base.Declarations. /* ? */ every(func(d Declaration) bool {
					return c.isPropertyAbstractOrInterface(d, baseDeclarationFlags)
				}))) || getCheckFlags(base)&ast.CheckFlagsMapped != 0 || derived.ValueDeclaration != nil && isBinaryExpression(derived.ValueDeclaration) {
					// when the base property is abstract or from an interface, base/derived flags don't need to match
					// for intersection properties, this must be true of *any* of the declarations, for others it must be true of *all*
					// same when the derived property is from an assignment
					continue
				}

				overriddenInstanceProperty := basePropertyFlags != ast.SymbolFlagsProperty && derivedPropertyFlags == ast.SymbolFlagsProperty
				overriddenInstanceAccessor := basePropertyFlags == ast.SymbolFlagsProperty && derivedPropertyFlags != ast.SymbolFlagsProperty
				if overriddenInstanceProperty || overriddenInstanceAccessor {
					var errorMessage any
					if overriddenInstanceProperty {
						errorMessage = Diagnostics._0_is_defined_as_an_accessor_in_class_1_but_is_overridden_here_in_2_as_an_instance_property
					} else {
						errorMessage = Diagnostics._0_is_defined_as_a_property_in_class_1_but_is_overridden_here_in_2_as_an_accessor
					}
					c.error(getNameOfDeclaration(derived.ValueDeclaration) || derived.ValueDeclaration, errorMessage, c.symbolToString(base), c.typeToString(baseType), c.typeToString(t))
				} else if c.useDefineForClassFields {
					uninitialized := derived.Declarations. /* ? */ find(func(d Declaration) bool {
						return d.Kind == ast.KindPropertyDeclaration && d.AsPropertyDeclaration().Initializer == nil
					})
					if uninitialized != nil && derived.Flags&ast.SymbolFlagsTransient == 0 && baseDeclarationFlags&ast.ModifierFlagsAbstract == 0 && derivedDeclarationFlags&ast.ModifierFlagsAbstract == 0 && !derived.Declarations. /* ? */ some(func(d Declaration) bool {
						return d.Flags&ast.NodeFlagsAmbient != 0
					}) {
						constructor := findConstructorDeclaration(getClassLikeDeclarationOfSymbol(t.symbol))
						propName := uninitialized.AsPropertyDeclaration().Name
						if uninitialized.AsPropertyDeclaration().ExclamationToken != nil || constructor == nil || !isIdentifier(propName) || !c.strictNullChecks || !c.isPropertyInitializedInConstructor(propName, t, constructor) {
							errorMessage := Diagnostics.Property_0_will_overwrite_the_base_property_in_1_If_this_is_intentional_add_an_initializer_Otherwise_add_a_declare_modifier_or_remove_the_redundant_declaration
							c.error(getNameOfDeclaration(derived.ValueDeclaration) || derived.ValueDeclaration, errorMessage, c.symbolToString(base), c.typeToString(baseType))
						}
					}
				}

				// correct case
				continue
			} else if c.isPrototypeProperty(base) {
				if c.isPrototypeProperty(derived) || derived.Flags&ast.SymbolFlagsProperty != 0 {
					// method is overridden with method or property -- correct case
					continue
				} else {
					Debug.assert(derived.Flags&ast.SymbolFlagsAccessor != 0)
					errorMessage = Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor
				}
			} else if base.Flags&ast.SymbolFlagsAccessor != 0 {
				errorMessage = Diagnostics.Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function
			} else {
				errorMessage = Diagnostics.Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function
			}

			c.error(getNameOfDeclaration(derived.ValueDeclaration) || derived.ValueDeclaration, errorMessage, c.typeToString(baseType), c.symbolToString(base), c.typeToString(t))
		}
	}

	for _, TODO_IDENTIFIER := range notImplementedInfo {
		if length(memberInfo.missedProperties) == 1 {
			if isClassExpression(errorNode) {
				c.error(errorNode, Diagnostics.Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1, core.FirstOrNil(memberInfo.missedProperties), memberInfo.baseTypeName)
			} else {
				c.error(errorNode, Diagnostics.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2, memberInfo.typeName, core.FirstOrNil(memberInfo.missedProperties), memberInfo.baseTypeName)
			}
		} else if length(memberInfo.missedProperties) > 5 {
			missedProperties := core.Map(memberInfo.missedProperties.slice(0, 4), func(prop string) string {
				return __TEMPLATE__("'", prop, "'")
			}).join(", ")
			remainingMissedProperties := length(memberInfo.missedProperties) - 4
			if isClassExpression(errorNode) {
				c.error(errorNode, Diagnostics.Non_abstract_class_expression_is_missing_implementations_for_the_following_members_of_0_Colon_1_and_2_more, memberInfo.baseTypeName, missedProperties, remainingMissedProperties)
			} else {
				c.error(errorNode, Diagnostics.Non_abstract_class_0_is_missing_implementations_for_the_following_members_of_1_Colon_2_and_3_more, memberInfo.typeName, memberInfo.baseTypeName, missedProperties, remainingMissedProperties)
			}
		} else {
			missedProperties := core.Map(memberInfo.missedProperties, func(prop string) string {
				return __TEMPLATE__("'", prop, "'")
			}).join(", ")
			if isClassExpression(errorNode) {
				c.error(errorNode, Diagnostics.Non_abstract_class_expression_is_missing_implementations_for_the_following_members_of_0_Colon_1, memberInfo.baseTypeName, missedProperties)
			} else {
				c.error(errorNode, Diagnostics.Non_abstract_class_0_is_missing_implementations_for_the_following_members_of_1_Colon_2, memberInfo.typeName, memberInfo.baseTypeName, missedProperties)
			}
		}
	}
}

func (c *Checker) isPropertyAbstractOrInterface(declaration Declaration, baseDeclarationFlags ModifierFlags) bool {
	return baseDeclarationFlags&ast.ModifierFlagsAbstract && (!isPropertyDeclaration(declaration) || declaration.Initializer == nil) || isInterfaceDeclaration(declaration.Parent)
}

func (c *Checker) getNonInheritedProperties(t InterfaceType, baseTypes []BaseType, properties []*ast.Symbol) []*ast.Symbol {
	if length(baseTypes) == 0 {
		return properties
	}
	seen := NewMap[string, *ast.Symbol]()
	forEach(properties, func(p *ast.Symbol) {
		seen.set(p.EscapedName, p)
	})

	for _, base := range baseTypes {
		properties := c.getPropertiesOfType(c.getTypeWithThisArgument(base, t.thisType))
		for _, prop := range properties {
			existing := seen.get(prop.EscapedName)
			if existing != nil && prop.Parent == existing.Parent {
				seen.delete(prop.EscapedName)
			}
		}
	}

	return arrayFrom(seen.values())
}

func (c *Checker) checkInheritedPropertiesAreIdentical(t InterfaceType, typeNode *ast.Node) bool {
	baseTypes := c.getBaseTypes(t)
	if baseTypes.length < 2 {
		return true
	}

	type InheritanceInfoMap struct {
		prop           *ast.Symbol
		containingType *Type
	}
	seen := NewMap[string, InheritanceInfoMap]()
	forEach(c.resolveDeclaredMembers(t).declaredProperties, func(p *ast.Symbol) {
		seen.set(p.EscapedName, InheritanceInfoMap{
			prop:           p,
			containingType: t,
		})
	})
	ok := true

	for _, base := range baseTypes {
		properties := c.getPropertiesOfType(c.getTypeWithThisArgument(base, t.thisType))
		for _, prop := range properties {
			existing := seen.get(prop.EscapedName)
			if existing == nil {
				seen.set(prop.EscapedName, InheritanceInfoMap{
					prop:           prop,
					containingType: base,
				})
			} else {
				isInheritedProperty := existing.containingType != t
				if isInheritedProperty && !c.isPropertyIdenticalTo(existing.prop, prop) {
					ok = false

					typeName1 := c.typeToString(existing.containingType)
					typeName2 := c.typeToString(base)

					errorInfo := chainDiagnosticMessages(nil, Diagnostics.Named_property_0_of_types_1_and_2_are_not_identical, c.symbolToString(prop), typeName1, typeName2)
					errorInfo = chainDiagnosticMessages(errorInfo, Diagnostics.Interface_0_cannot_simultaneously_extend_types_1_and_2, c.typeToString(t), typeName1, typeName2)
					c.diagnostics.add(createDiagnosticForNodeFromMessageChain(getSourceFileOfNode(typeNode), typeNode, errorInfo))
				}
			}
		}
	}

	return ok
}

func (c *Checker) checkPropertyInitialization(node ClassLikeDeclaration) {
	if !c.strictNullChecks || !c.strictPropertyInitialization || node.Flags&ast.NodeFlagsAmbient != 0 {
		return
	}
	constructor := findConstructorDeclaration(node)
	for _, member := range node.Members {
		if getEffectiveModifierFlags(member)&ast.ModifierFlagsAmbient != 0 {
			continue
		}
		if !isStatic(member) && c.isPropertyWithoutInitializer(member) {
			propName := member.AsPropertyDeclaration().Name
			if isIdentifier(propName) || isPrivateIdentifier(propName) || isComputedPropertyName(propName) {
				t := c.getTypeOfSymbol(c.getSymbolOfDeclaration(member))
				if !(t.flags&TypeFlagsAnyOrUnknown != 0 || c.containsUndefinedType(t)) {
					if constructor == nil || !c.isPropertyInitializedInConstructor(propName, t, constructor) {
						c.error(member.Name, Diagnostics.Property_0_has_no_initializer_and_is_not_definitely_assigned_in_the_constructor, declarationNameToString(propName))
					}
				}
			}
		}
	}
}

func (c *Checker) isPropertyWithoutInitializer(node *ast.Node) bool {
	return node.Kind == ast.KindPropertyDeclaration && !hasAbstractModifier(node) && node.AsPropertyDeclaration().ExclamationToken == nil && node.AsPropertyDeclaration().Initializer == nil
}

func (c *Checker) isPropertyInitializedInStaticBlocks(propName Union[Identifier, PrivateIdentifier], propType *Type, staticBlocks []ClassStaticBlockDeclaration, startPos number, endPos number) bool {
	for _, staticBlock := range staticBlocks {
		// static block must be within the provided range as they are evaluated in document order (unlike constructors)
		if staticBlock.Pos >= startPos && staticBlock.Pos <= endPos {
			reference := factory.createPropertyAccessExpression(factory.createThis(), propName)
			setParent(reference.Expression, reference)
			setParent(reference, staticBlock)
			reference.FlowNode = staticBlock.ReturnFlowNode
			flowType := c.getFlowTypeOfReference(reference, propType, c.getOptionalType(propType))
			if !c.containsUndefinedType(flowType) {
				return true
			}
		}
	}
	return false
}

func (c *Checker) isPropertyInitializedInConstructor(propName Union[Identifier, PrivateIdentifier, ComputedPropertyName], propType *Type, constructor ConstructorDeclaration) bool {
	var reference /* TODO(TS-TO-GO) inferred type PropertyAccessExpression | ElementAccessExpression */ any
	if isComputedPropertyName(propName) {
		reference = factory.createElementAccessExpression(factory.createThis(), propName.Expression)
	} else {
		reference = factory.createPropertyAccessExpression(factory.createThis(), propName)
	}
	setParent(reference.Expression, reference)
	setParent(reference, constructor)
	reference.FlowNode = constructor.ReturnFlowNode
	flowType := c.getFlowTypeOfReference(reference, propType, c.getOptionalType(propType))
	return !c.containsUndefinedType(flowType)
}

func (c *Checker) checkInterfaceDeclaration(node InterfaceDeclaration) {
	// Grammar checking
	if !c.checkGrammarModifiers(node) {
		c.checkGrammarInterfaceDeclaration(node)
	}

	c.checkTypeParameters(node.TypeParameters)
	c.addLazyDiagnostic(func() {
		c.checkTypeNameIsReserved(node.Name, Diagnostics.Interface_name_cannot_be_0)

		c.checkExportsOnMergedDeclarations(node)
		symbol := c.getSymbolOfDeclaration(node)
		c.checkTypeParameterListsIdentical(symbol)

		// Only check this symbol once
		firstInterfaceDecl := getDeclarationOfKind(symbol, ast.KindInterfaceDeclaration)
		if node == firstInterfaceDecl {
			t := c.getDeclaredTypeOfSymbol(symbol).AsInterfaceType()
			typeWithThis := c.getTypeWithThisArgument(t)
			// run subsequent checks only if first set succeeded
			if c.checkInheritedPropertiesAreIdentical(t, node.Name) {
				for _, baseType := range c.getBaseTypes(t) {
					c.checkTypeAssignableTo(typeWithThis, c.getTypeWithThisArgument(baseType, t.thisType), node.Name, Diagnostics.Interface_0_incorrectly_extends_interface_1)
				}
				c.checkIndexConstraints(t, symbol)
			}
		}
		c.checkObjectTypeForDuplicateDeclarations(node)
	})
	forEach(getInterfaceBaseTypeNodes(node), func(heritageElement ExpressionWithTypeArguments) {
		if !isEntityNameExpression(heritageElement.Expression) || isOptionalChain(heritageElement.Expression) {
			c.error(heritageElement.Expression, Diagnostics.An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments)
		}
		c.checkTypeReferenceNode(heritageElement)
	})

	forEach(node.Members, c.checkSourceElement)

	c.addLazyDiagnostic(func() {
		c.checkTypeForDuplicateIndexSignatures(node)
		c.registerForUnusedIdentifiersCheck(node)
	})
}

func (c *Checker) checkTypeAliasDeclaration(node TypeAliasDeclaration) {
	// Grammar checking
	c.checkGrammarModifiers(node)
	c.checkTypeNameIsReserved(node.Name, Diagnostics.Type_alias_name_cannot_be_0)
	c.checkExportsOnMergedDeclarations(node)
	c.checkTypeParameters(node.TypeParameters)
	if node.Type_.Kind == ast.KindIntrinsicKeyword {
		typeParameterCount := length(node.TypeParameters)
		var valid bool
		if typeParameterCount == 0 {
			valid = node.Name.EscapedText == "BuiltinIteratorReturn"
		} else {
			valid = typeParameterCount == 1 && intrinsicTypeKinds.has(node.Name.EscapedText /* as string */)
		}
		if !valid {
			c.error(node.Type_, Diagnostics.The_intrinsic_keyword_can_only_be_used_to_declare_compiler_provided_intrinsic_types)
		}
	} else {
		c.checkSourceElement(node.Type_)
		c.registerForUnusedIdentifiersCheck(node)
	}
}

func (c *Checker) computeEnumMemberValues(node EnumDeclaration) {
	nodeLinks := c.getNodeLinks(node)
	if nodeLinks.flags&NodeCheckFlagsEnumValuesComputed == 0 {
		nodeLinks.flags |= NodeCheckFlagsEnumValuesComputed
		var autoValue *number = 0
		var previous *EnumMember
		for _, member := range node.Members {
			result := c.computeEnumMemberValue(member, autoValue, previous)
			c.getNodeLinks(member).enumMemberValue = result
			if /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof result.value */ TODO == "number" {
				autoValue = result.value + 1
			} else {
				autoValue = nil
			}
			previous = member
		}
	}
}

func (c *Checker) computeEnumMemberValue(member EnumMember, autoValue *number, previous *EnumMember) EvaluatorResult {
	if isComputedNonLiteralName(member.Name) {
		c.error(member.Name, Diagnostics.Computed_property_names_are_not_allowed_in_enums)
	} else {
		text := getTextOfPropertyName(member.Name)
		if isNumericLiteralName(text) && !isInfinityOrNaNString(text) {
			c.error(member.Name, Diagnostics.An_enum_member_cannot_have_a_numeric_name)
		}
	}
	if member.Initializer != nil {
		return c.computeConstantEnumMemberValue(member)
	}
	// In ambient non-const numeric enum declarations, enum members without initializers are
	// considered computed members (as opposed to having auto-incremented values).
	if member.Parent.Flags&ast.NodeFlagsAmbient != 0 && !isEnumConst(member.Parent) {
		return evaluatorResult(nil)
	}
	// If the member declaration specifies no value, the member is considered a constant enum member.
	// If the member is the first member in the enum declaration, it is assigned the value zero.
	// Otherwise, it is assigned the value of the immediately preceding member plus one, and an error
	// occurs if the immediately preceding member is not a constant enum member.
	if autoValue == nil {
		c.error(member.Name, Diagnostics.Enum_member_must_have_initializer)
		return evaluatorResult(nil)
	}
	if getIsolatedModules(c.compilerOptions) && previous. /* ? */ initializer != nil {
		prevValue := c.getEnumMemberValue(previous)
		if !( /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof prevValue.value */ TODO == "number" && !prevValue.resolvedOtherFiles) {
			c.error(member.Name, Diagnostics.Enum_member_following_a_non_literal_numeric_member_must_have_an_initializer_when_isolatedModules_is_enabled)
		}
	}
	return evaluatorResult(autoValue)
}

func (c *Checker) computeConstantEnumMemberValue(member EnumMember) EvaluatorResult {
	isConstEnum := isEnumConst(member.Parent)
	initializer := member.Initializer
	result := c.evaluate(initializer, member)
	if result.value != nil {
		if isConstEnum && /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof result.value */ TODO == "number" && !isFinite(result.value) {
			c.error(initializer, ifElse(isNaN(result.value), Diagnostics.const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN, Diagnostics.const_enum_member_initializer_was_evaluated_to_a_non_finite_value))
		} else if getIsolatedModules(c.compilerOptions) && /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof result.value */ TODO == "string" && !result.isSyntacticallyString {
			c.error(initializer, Diagnostics._0_has_a_string_type_but_must_have_syntactically_recognizable_string_syntax_when_isolatedModules_is_enabled, __TEMPLATE__(idText(member.Parent.Name), ".", getTextOfPropertyName(member.Name)))
		}
	} else if isConstEnum {
		c.error(initializer, Diagnostics.const_enum_member_initializers_must_be_constant_expressions)
	} else if member.Parent.Flags&ast.NodeFlagsAmbient != 0 {
		c.error(initializer, Diagnostics.In_ambient_enum_declarations_member_initializer_must_be_constant_expression)
	} else {
		c.checkTypeAssignableTo(c.checkExpression(initializer), c.numberType, initializer, Diagnostics.Type_0_is_not_assignable_to_type_1_as_required_for_computed_enum_member_values)
	}
	return result
}

func (c *Checker) evaluateEntityNameExpression(expr EntityNameExpression, location Declaration) /* TODO(TS-TO-GO) inferred type EvaluatorResult<string | number | undefined> */ any {
	symbol := c.resolveEntityName(expr, ast.SymbolFlagsValue, true /*ignoreErrors*/)
	if symbol == nil {
		return evaluatorResult(nil)
	}

	if expr.Kind == ast.KindIdentifier {
		identifier := expr
		if isInfinityOrNaNString(identifier.EscapedText) && (symbol == c.getGlobalSymbol(identifier.EscapedText, ast.SymbolFlagsValue, nil /*diagnostic*/)) {
			// Technically we resolved a global lib file here, but the decision to treat this as numeric
			// is more predicated on the fact that the single-file resolution *didn't* resolve to a
			// different meaning of `Infinity` or `NaN`. Transpilers handle this no problem.
			return evaluatorResult(+identifier.EscapedText, false /*isSyntacticallyString*/)
		}
	}

	if symbol.Flags&ast.SymbolFlagsEnumMember != 0 {
		if location != nil {
			return c.evaluateEnumMember(expr, symbol, location)
		} else {
			return c.getEnumMemberValue(symbol.ValueDeclaration.AsEnumMember())
		}
	}
	if c.isConstantVariable(symbol) {
		declaration := symbol.ValueDeclaration
		if declaration != nil && isVariableDeclaration(declaration) && declaration.Type_ == nil && declaration.Initializer != nil && (location == nil || declaration != location && c.isBlockScopedNameDeclaredBeforeUse(declaration, location)) {
			result := c.evaluate(declaration.Initializer, declaration)
			if location != nil && getSourceFileOfNode(location) != getSourceFileOfNode(declaration) {
				return evaluatorResult(result.value, false, true, true)
			}
			return evaluatorResult(result.value, result.isSyntacticallyString, result.resolvedOtherFiles, true /*hasExternalReferences*/)
		}
	}
	return evaluatorResult(nil)
}

func (c *Checker) evaluateElementAccessExpression(expr ElementAccessExpression, location Declaration) /* TODO(TS-TO-GO) inferred type EvaluatorResult<string | number | undefined> */ any {
	root := expr.Expression
	if isEntityNameExpression(root) && isStringLiteralLike(expr.ArgumentExpression) {
		rootSymbol := c.resolveEntityName(root, ast.SymbolFlagsValue, true /*ignoreErrors*/)
		if rootSymbol != nil && rootSymbol.Flags&ast.SymbolFlagsEnum != 0 {
			name := escapeLeadingUnderscores(expr.ArgumentExpression.Text)
			member := rootSymbol.Exports.get(name)
			if member != nil {
				Debug.assert(getSourceFileOfNode(member.ValueDeclaration) == getSourceFileOfNode(rootSymbol.ValueDeclaration))
				if location != nil {
					return c.evaluateEnumMember(expr, member, location)
				} else {
					return c.getEnumMemberValue(member.ValueDeclaration.AsEnumMember())
				}
			}
		}
	}
	return evaluatorResult(nil)
}

func (c *Checker) evaluateEnumMember(expr Expression, symbol *ast.Symbol, location Declaration) /* TODO(TS-TO-GO) inferred type EvaluatorResult<string | number | undefined> */ any {
	declaration := symbol.ValueDeclaration
	if declaration == nil || declaration == location {
		c.error(expr, Diagnostics.Property_0_is_used_before_being_assigned, c.symbolToString(symbol))
		return evaluatorResult(nil)
	}
	if !c.isBlockScopedNameDeclaredBeforeUse(declaration, location) {
		c.error(expr, Diagnostics.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums)
		return evaluatorResult(0)
	}
	value := c.getEnumMemberValue(declaration.AsEnumMember())
	if location.Parent != declaration.Parent {
		return evaluatorResult(value.value, value.isSyntacticallyString, value.resolvedOtherFiles, true /*hasExternalReferences*/)
	}
	return value
}

func (c *Checker) checkEnumDeclaration(node EnumDeclaration) {
	c.addLazyDiagnostic(func() {
		return c.checkEnumDeclarationWorker(node)
	})
}

func (c *Checker) checkEnumDeclarationWorker(node EnumDeclaration) {
	// Grammar checking
	c.checkGrammarModifiers(node)

	c.checkCollisionsForDeclarationName(node, node.Name)
	c.checkExportsOnMergedDeclarations(node)
	node.Members.forEach(c.checkEnumMember)

	c.computeEnumMemberValues(node)

	// Spec 2014 - Section 9.3:
	// It isn't possible for one enum declaration to continue the automatic numbering sequence of another,
	// and when an enum type has multiple declarations, only one declaration is permitted to omit a value
	// for the first member.
	//
	// Only perform this check once per symbol
	enumSymbol := c.getSymbolOfDeclaration(node)
	firstDeclaration := getDeclarationOfKind(enumSymbol, node.Kind)
	if node == firstDeclaration {
		if enumSymbol.Declarations != nil && enumSymbol.Declarations.length > 1 {
			enumIsConst := isEnumConst(node)
			// check that const is placed\omitted on all enum declarations
			forEach(enumSymbol.Declarations, func(decl Declaration) {
				if isEnumDeclaration(decl) && isEnumConst(decl) != enumIsConst {
					c.error(getNameOfDeclaration(decl), Diagnostics.Enum_declarations_must_all_be_const_or_non_const)
				}
			})
		}

		seenEnumMissingInitialInitializer := false
		forEach(enumSymbol.Declarations, func(declaration Declaration) *false {
			// return true if we hit a violation of the rule, false otherwise
			if declaration.Kind != ast.KindEnumDeclaration {
				return false
			}

			enumDeclaration := declaration.AsEnumDeclaration()
			if enumDeclaration.Members.length == 0 {
				return false
			}

			firstEnumMember := enumDeclaration.Members[0]
			if firstEnumMember.Initializer == nil {
				if seenEnumMissingInitialInitializer {
					c.error(firstEnumMember.Name, Diagnostics.In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element)
				} else {
					seenEnumMissingInitialInitializer = true
				}
			}
		})
	}
}

func (c *Checker) checkEnumMember(node EnumMember) {
	if isPrivateIdentifier(node.Name) {
		c.error(node, Diagnostics.An_enum_member_cannot_be_named_with_a_private_identifier)
	}
	if node.Initializer != nil {
		c.checkExpression(node.Initializer)
	}
}

func (c *Checker) getFirstNonAmbientClassOrFunctionDeclaration(symbol *ast.Symbol) Declaration {
	declarations := symbol.Declarations
	if declarations != nil {
		for _, declaration := range declarations {
			if (declaration.Kind == ast.KindClassDeclaration || (declaration.Kind == ast.KindFunctionDeclaration && nodeIsPresent(declaration.AsFunctionLikeDeclaration().Body))) && declaration.Flags&ast.NodeFlagsAmbient == 0 {
				return declaration
			}
		}
	}
	return nil
}

func (c *Checker) inSameLexicalScope(node1 *ast.Node, node2 *ast.Node) bool {
	container1 := getEnclosingBlockScopeContainer(node1)
	container2 := getEnclosingBlockScopeContainer(node2)
	if isGlobalSourceFile(container1) {
		return isGlobalSourceFile(container2)
	} else if isGlobalSourceFile(container2) {
		return false
	} else {
		return container1 == container2
	}
}

func (c *Checker) checkModuleDeclaration(node ModuleDeclaration) {
	if node.Body != nil {
		c.checkSourceElement(node.Body)
		if !isGlobalScopeAugmentation(node) {
			c.registerForUnusedIdentifiersCheck(node)
		}
	}

	c.addLazyDiagnostic(checkModuleDeclarationDiagnostics)

	checkModuleDeclarationDiagnostics := func() {
		// Grammar checking
		isGlobalAugmentation := isGlobalScopeAugmentation(node)
		inAmbientContext := node.Flags & ast.NodeFlagsAmbient
		if isGlobalAugmentation && inAmbientContext == 0 {
			c.error(node.Name, Diagnostics.Augmentations_for_the_global_scope_should_have_declare_modifier_unless_they_appear_in_already_ambient_context)
		}

		var isAmbientExternalModule bool = isAmbientModule(node)
		var contextErrorMessage any
		if isAmbientExternalModule {
			contextErrorMessage = Diagnostics.An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file
		} else {
			contextErrorMessage = Diagnostics.A_namespace_declaration_is_only_allowed_at_the_top_level_of_a_namespace_or_module
		}
		if c.checkGrammarModuleElementContext(node, contextErrorMessage) {
			// If we hit a module declaration in an illegal context, just bail out to avoid cascading errors.
			return
		}

		if !c.checkGrammarModifiers(node) {
			if inAmbientContext == 0 && node.Name.Kind == ast.KindStringLiteral {
				c.grammarErrorOnNode(node.Name, Diagnostics.Only_ambient_modules_can_use_quoted_names)
			}
		}

		if isIdentifier(node.Name) {
			c.checkCollisionsForDeclarationName(node, node.Name)
			if node.Flags&(ast.NodeFlagsNamespace|ast.NodeFlagsGlobalAugmentation) == 0 {
				sourceFile := getSourceFileOfNode(node)
				pos := getNonModifierTokenPosOfNode(node)
				span := getSpanOfTokenAtPosition(sourceFile, pos)
				c.suggestionDiagnostics.add(createFileDiagnostic(sourceFile, span.start, span.length, Diagnostics.A_namespace_declaration_should_not_be_declared_using_the_module_keyword_Please_use_the_namespace_keyword_instead))
			}
		}

		c.checkExportsOnMergedDeclarations(node)
		symbol := c.getSymbolOfDeclaration(node)

		// The following checks only apply on a non-ambient instantiated module declaration.
		if symbol.Flags&ast.SymbolFlagsValueModule != 0 && inAmbientContext == 0 && isInstantiatedModule(node, shouldPreserveConstEnums(c.compilerOptions)) {
			if getIsolatedModules(c.compilerOptions) && !getSourceFileOfNode(node).ExternalModuleIndicator {
				// This could be loosened a little if needed. The only problem we are trying to avoid is unqualified
				// references to namespace members declared in other files. But use of namespaces is discouraged anyway,
				// so for now we will just not allow them in scripts, which is the only place they can merge cross-file.
				c.error(node.Name, Diagnostics.Namespaces_are_not_allowed_in_global_script_files_when_0_is_enabled_If_this_file_is_not_intended_to_be_a_global_script_set_moduleDetection_to_force_or_add_an_empty_export_statement, c.isolatedModulesLikeFlagName)
			}
			if symbol.Declarations. /* ? */ length > 1 {
				firstNonAmbientClassOrFunc := c.getFirstNonAmbientClassOrFunctionDeclaration(symbol)
				if firstNonAmbientClassOrFunc != nil {
					if getSourceFileOfNode(node) != getSourceFileOfNode(firstNonAmbientClassOrFunc) {
						c.error(node.Name, Diagnostics.A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged)
					} else if node.Pos < firstNonAmbientClassOrFunc.Pos {
						c.error(node.Name, Diagnostics.A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged)
					}
				}

				// if the module merges with a class declaration in the same lexical scope,
				// we need to track this to ensure the correct emit.
				mergedClass := getDeclarationOfKind(symbol, ast.KindClassDeclaration)
				if mergedClass != nil && c.inSameLexicalScope(node, mergedClass) {
					c.getNodeLinks(node).flags |= NodeCheckFlagsLexicalModuleMergesWithClass
				}
			}
			if c.compilerOptions.verbatimModuleSyntax && node.Parent.Kind == ast.KindSourceFile && host.getEmitModuleFormatOfFile(node.Parent) == ModuleKindCommonJS {
				exportModifier := node.Modifiers. /* ? */ find(func(m ModifierLike) bool {
					return m.Kind == ast.KindExportKeyword
				})
				if exportModifier != nil {
					c.error(exportModifier, Diagnostics.A_top_level_export_modifier_cannot_be_used_on_value_declarations_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled)
				}
			}
		}

		if isAmbientExternalModule {
			if isExternalModuleAugmentation(node) {
				// body of the augmentation should be checked for consistency only if augmentation was applied to its target (either global scope or module)
				// otherwise we'll be swamped in cascading errors.
				// We can detect if augmentation was applied using following rules:
				// - augmentation for a global scope is always applied
				// - augmentation for some external module is applied if symbol for augmentation is merged (it was combined with target module).
				checkBody := isGlobalAugmentation || (c.getSymbolOfDeclaration(node).Flags & ast.SymbolFlagsTransient)
				if checkBody && node.Body != nil {
					for _, statement := range node.Body.Statements {
						c.checkModuleAugmentationElement(statement, isGlobalAugmentation)
					}
				}
			} else if isGlobalSourceFile(node.Parent) {
				if isGlobalAugmentation {
					c.error(node.Name, Diagnostics.Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_declarations)
				} else if isExternalModuleNameRelative(getTextOfIdentifierOrLiteral(node.Name)) {
					c.error(node.Name, Diagnostics.Ambient_module_declaration_cannot_specify_relative_module_name)
				}
			} else {
				if isGlobalAugmentation {
					c.error(node.Name, Diagnostics.Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_declarations)
				} else {
					// Node is not an augmentation and is not located on the script level.
					// This means that this is declaration of ambient module that is located in other module or namespace which is prohibited.
					c.error(node.Name, Diagnostics.Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces)
				}
			}
		}
	}

}

func (c *Checker) checkModuleAugmentationElement(node *ast.Node, isGlobalAugmentation bool) {
	switch node.Kind {
	case ast.KindVariableStatement:
		// error each individual name in variable statement instead of marking the entire variable statement
		for _, decl := range node.AsVariableStatement().DeclarationList.Declarations {
			c.checkModuleAugmentationElement(decl, isGlobalAugmentation)
		}
	case ast.KindExportAssignment,
		ast.KindExportDeclaration:
		c.grammarErrorOnFirstToken(node, Diagnostics.Exports_and_export_assignments_are_not_permitted_in_module_augmentations)
	case ast.KindImportEqualsDeclaration:
		// import a = e.x; in module augmentation is ok, but not import a = require('fs)
		if isInternalModuleImportEqualsDeclaration(node) {
			break
		}
		fallthrough
	case ast.KindImportDeclaration:
		c.grammarErrorOnFirstToken(node, Diagnostics.Imports_are_not_permitted_in_module_augmentations_Consider_moving_them_to_the_enclosing_external_module)
	case ast.KindBindingElement,
		ast.KindVariableDeclaration:
		name := (node /* as VariableDeclaration | BindingElement */).Name
		if isBindingPattern(name) {
			for _, el := range name.Elements {
				// mark individual names in binding pattern
				c.checkModuleAugmentationElement(el, isGlobalAugmentation)
			}
			break
		}
		fallthrough
	case ast.KindClassDeclaration,
		ast.KindEnumDeclaration,
		ast.KindFunctionDeclaration,
		ast.KindInterfaceDeclaration,
		ast.KindModuleDeclaration,
		ast.KindTypeAliasDeclaration:
		if isGlobalAugmentation {
			return
		}
	}
}

func (c *Checker) getFirstNonModuleExportsIdentifier(node EntityNameOrEntityNameExpression) Identifier {
	switch node.Kind {
	case ast.KindIdentifier:
		return node
	case ast.KindQualifiedName:
		for ok := true; ok; ok = node.Kind != ast.KindIdentifier { // do-while loop
			node = node.Left
		}
		return node
	case ast.KindPropertyAccessExpression:
		for ok := true; ok; ok = node.Kind != ast.KindIdentifier { // do-while loop
			if isModuleExportsAccessExpression(node.Expression) && !isPrivateIdentifier(node.Name) {
				return node.Name
			}
			node = node.Expression
		}
		return node
	}
}

func (c *Checker) checkExternalImportOrExportDeclaration(node Union[ImportDeclaration, ImportEqualsDeclaration, ExportDeclaration]) bool {
	moduleName := getExternalModuleName(node)
	if moduleName == nil || nodeIsMissing(moduleName) {
		// Should be a parse error.
		return false
	}
	if !isStringLiteral(moduleName) {
		c.error(moduleName, Diagnostics.String_literal_expected)
		return false
	}
	inAmbientExternalModule := node.Parent.Kind == ast.KindModuleBlock && isAmbientModule(node.Parent.Parent)
	if node.Parent.Kind != ast.KindSourceFile && !inAmbientExternalModule {
		c.error(moduleName, ifElse(node.Kind == ast.KindExportDeclaration, Diagnostics.Export_declarations_are_not_permitted_in_a_namespace, Diagnostics.Import_declarations_in_a_namespace_cannot_reference_a_module))
		return false
	}
	if inAmbientExternalModule && isExternalModuleNameRelative(moduleName.Text) {
		// we have already reported errors on top level imports/exports in external module augmentations in checkModuleDeclaration
		// no need to do this again.
		if !c.isTopLevelInExternalModuleAugmentation(node) {
			// TypeScript 1.0 spec (April 2013): 12.1.6
			// An ExternalImportDeclaration in an AmbientExternalModuleDeclaration may reference
			// other external modules only through top - level external module names.
			// Relative external module names are not permitted.
			c.error(node, Diagnostics.Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name)
			return false
		}
	}
	if !isImportEqualsDeclaration(node) && node.Attributes != nil {
		var diagnostic any
		if node.Attributes.Token == ast.KindWithKeyword {
			diagnostic = Diagnostics.Import_attribute_values_must_be_string_literal_expressions
		} else {
			diagnostic = Diagnostics.Import_assertion_values_must_be_string_literal_expressions
		}
		hasError := false
		for _, attr := range node.Attributes.Elements {
			if !isStringLiteral(attr.Value) {
				hasError = true
				c.error(attr.Value, diagnostic)
			}
		}
		return !hasError
	}
	return true
}

func (c *Checker) checkModuleExportName(name *ModuleExportName, allowStringLiteral bool /*  = true */) {
	if name == nil || name.Kind != ast.KindStringLiteral {
		return
	}
	if !allowStringLiteral {
		c.grammarErrorOnNode(name, Diagnostics.Identifier_expected)
	} else if c.moduleKind == ModuleKindES2015 || c.moduleKind == ModuleKindES2020 {
		c.grammarErrorOnNode(name, Diagnostics.String_literal_import_and_export_names_are_not_supported_when_the_module_flag_is_set_to_es2015_or_es2020)
	}
}

func (c *Checker) checkAliasSymbol(node AliasDeclarationNode) {
	symbol := c.getSymbolOfDeclaration(node)
	target := c.resolveAlias(symbol)

	if target != c.unknownSymbol {
		// For external modules, `symbol` represents the local symbol for an alias.
		// This local symbol will merge any other local declarations (excluding other aliases)
		// and symbol.flags will contains combined representation for all merged declaration.
		// Based on symbol.flags we can compute a set of excluded meanings (meaning that resolved alias should not have,
		// otherwise it will conflict with some local declaration). Note that in addition to normal flags we include matching SymbolFlags.Export*
		// in order to prevent collisions with declarations that were exported from the current module (they still contribute to local names).
		symbol = c.getMergedSymbol(symbol.ExportSymbol || symbol)

		// A type-only import/export will already have a grammar error in a JS file, so no need to issue more errors within
		if isInJSFile(node) && target.Flags&ast.SymbolFlagsValue == 0 && !isTypeOnlyImportOrExportDeclaration(node) {
			var errorNode /* TODO(TS-TO-GO) inferred type ObjectBindingPattern | ArrayBindingPattern | ImportClause | ModuleExportName */ any
			switch {
			case isImportOrExportSpecifier(node):
				errorNode = node.PropertyName || node.Name
			case isNamedDeclaration(node):
				errorNode = node.Name
			default:
				errorNode = node
			}

			Debug.assert(node.Kind != ast.KindNamespaceExport)
			if node.Kind == ast.KindExportSpecifier {
				diag := c.error(errorNode, Diagnostics.Types_cannot_appear_in_export_declarations_in_JavaScript_files)
				alreadyExportedSymbol := getSourceFileOfNode(node).Symbol. /* ? */ Exports. /* ? */ get(moduleExportNameTextEscaped(node.PropertyName || node.Name))
				if alreadyExportedSymbol == target {
					exportingDeclaration := alreadyExportedSymbol.Declarations. /* ? */ find(isJSDocNode)
					if exportingDeclaration != nil {
						addRelatedInfo(diag, createDiagnosticForNode(exportingDeclaration, Diagnostics._0_is_automatically_exported_here, unescapeLeadingUnderscores(alreadyExportedSymbol.EscapedName)))
					}
				}
			} else {
				Debug.assert(node.Kind != ast.KindVariableDeclaration)
				importDeclaration := findAncestor(node, or(isImportDeclaration, isImportEqualsDeclaration))
				moduleSpecifier := ifNotNilElse((importDeclaration && tryGetModuleSpecifierFromDeclaration(importDeclaration). /* ? */ text), "...")
				importedIdentifier := unescapeLeadingUnderscores(ifElse(isIdentifier(errorNode), errorNode.EscapedText, symbol.EscapedName))
				c.error(errorNode, Diagnostics._0_is_a_type_and_cannot_be_imported_in_JavaScript_files_Use_1_in_a_JSDoc_type_annotation, importedIdentifier, __TEMPLATE__("import(\"", moduleSpecifier, "\").", importedIdentifier))
			}
			return
		}

		targetFlags := c.getSymbolFlags(target)
		excludedMeanings := (ifElse(symbol.Flags&(ast.SymbolFlagsValue|ast.SymbolFlagsExportValue) != 0, ast.SymbolFlagsValue, 0)) | (ifElse(symbol.Flags&ast.SymbolFlagsType != 0, ast.SymbolFlagsType, 0)) | (ifElse(symbol.Flags&ast.SymbolFlagsNamespace != 0, ast.SymbolFlagsNamespace, 0))
		if targetFlags&excludedMeanings != 0 {
			var message any
			if node.Kind == ast.KindExportSpecifier {
				message = Diagnostics.Export_declaration_conflicts_with_exported_declaration_of_0
			} else {
				message = Diagnostics.Import_declaration_conflicts_with_local_declaration_of_0
			}
			c.error(node, message, c.symbolToString(symbol))
		} else if node.Kind != ast.KindExportSpecifier {
			// Look at 'compilerOptions.isolatedModules' and not 'getIsolatedModules(...)' (which considers 'verbatimModuleSyntax')
			// here because 'verbatimModuleSyntax' will already have an error for importing a type without 'import type'.
			appearsValueyToTranspiler := c.compilerOptions.isolatedModules && findAncestor(node, isTypeOnlyImportOrExportDeclaration) == nil
			if appearsValueyToTranspiler && symbol.Flags&(ast.SymbolFlagsValue|ast.SymbolFlagsExportValue) != 0 {
				c.error(node, Diagnostics.Import_0_conflicts_with_local_value_so_must_be_declared_with_a_type_only_import_when_isolatedModules_is_enabled, c.symbolToString(symbol), c.isolatedModulesLikeFlagName)
			}
		}

		if getIsolatedModules(c.compilerOptions) && !isTypeOnlyImportOrExportDeclaration(node) && node.Flags&ast.NodeFlagsAmbient == 0 {
			typeOnlyAlias := c.getTypeOnlyAliasDeclaration(symbol)
			isType := targetFlags&ast.SymbolFlagsValue == 0
			if isType || typeOnlyAlias != nil {
				switch node.Kind {
				case ast.KindImportClause,
					ast.KindImportSpecifier,
					ast.KindImportEqualsDeclaration:
					if c.compilerOptions.verbatimModuleSyntax {
						Debug.assertIsDefined(node.Name, "An ImportClause with a symbol should have a name")
						var message any
						switch {
						case c.compilerOptions.verbatimModuleSyntax && isInternalModuleImportEqualsDeclaration(node):
							message = Diagnostics.An_import_alias_cannot_resolve_to_a_type_or_type_only_declaration_when_verbatimModuleSyntax_is_enabled
						case isType:
							message = Diagnostics._0_is_a_type_and_must_be_imported_using_a_type_only_import_when_verbatimModuleSyntax_is_enabled
						default:
							message = Diagnostics._0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_verbatimModuleSyntax_is_enabled
						}
						name := moduleExportNameTextUnescaped(ifElse(node.Kind == ast.KindImportSpecifier, node.PropertyName || node.Name, node.Name))
						c.addTypeOnlyDeclarationRelatedInfo(c.error(node, message, name), ifElse(isType, nil, typeOnlyAlias), name)
					}
					if isType && node.Kind == ast.KindImportEqualsDeclaration && hasEffectiveModifier(node, ast.ModifierFlagsExport) {
						c.error(node, Diagnostics.Cannot_use_export_import_on_a_type_or_type_only_namespace_when_0_is_enabled, c.isolatedModulesLikeFlagName)
					}
				case ast.KindExportSpecifier:
					// Don't allow re-exporting an export that will be elided when `--isolatedModules` is set.
					// The exception is that `import type { A } from './a'; export { A }` is allowed
					// because single-file analysis can determine that the export should be dropped.
					if c.compilerOptions.verbatimModuleSyntax || getSourceFileOfNode(typeOnlyAlias) != getSourceFileOfNode(node) {
						name := moduleExportNameTextUnescaped(node.PropertyName || node.Name)
						var diagnostic Diagnostic
						if isType {
							diagnostic = c.error(node, Diagnostics.Re_exporting_a_type_when_0_is_enabled_requires_using_export_type, c.isolatedModulesLikeFlagName)
						} else {
							diagnostic = c.error(node, Diagnostics._0_resolves_to_a_type_only_declaration_and_must_be_re_exported_using_a_type_only_re_export_when_1_is_enabled, name, c.isolatedModulesLikeFlagName)
						}
						c.addTypeOnlyDeclarationRelatedInfo(diagnostic, ifElse(isType, nil, typeOnlyAlias), name)
						break
					}
				}
			}

			if c.compilerOptions.verbatimModuleSyntax && node.Kind != ast.KindImportEqualsDeclaration && !isInJSFile(node) && host.getEmitModuleFormatOfFile(getSourceFileOfNode(node)) == ModuleKindCommonJS {
				c.error(node, Diagnostics.ESM_syntax_is_not_allowed_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled)
			} else if c.moduleKind == ModuleKindPreserve && node.Kind != ast.KindImportEqualsDeclaration && node.Kind != ast.KindVariableDeclaration && host.getEmitModuleFormatOfFile(getSourceFileOfNode(node)) == ModuleKindCommonJS {
				// In `--module preserve`, ESM input syntax emits ESM output syntax, but there will be times
				// when we look at the `impliedNodeFormat` of this file and decide it's CommonJS (i.e., currently,
				// only if the file extension is .cjs/.cts). To avoid that inconsistency, we disallow ESM syntax
				// in files that are unambiguously CommonJS in this mode.
				c.error(node, Diagnostics.ESM_syntax_is_not_allowed_in_a_CommonJS_module_when_module_is_set_to_preserve)
			}

			if c.compilerOptions.verbatimModuleSyntax && !isTypeOnlyImportOrExportDeclaration(node) && node.Flags&ast.NodeFlagsAmbient == 0 && targetFlags&ast.SymbolFlagsConstEnum != 0 {
				constEnumDeclaration := target.ValueDeclaration.AsEnumDeclaration()
				redirect := host.getRedirectReferenceForResolutionFromSourceOfProject(getSourceFileOfNode(constEnumDeclaration).ResolvedPath)
				if constEnumDeclaration.Flags&ast.NodeFlagsAmbient != 0 && (redirect == nil || !shouldPreserveConstEnums(redirect.commandLine.options)) {
					c.error(node, Diagnostics.Cannot_access_ambient_const_enums_when_0_is_enabled, c.isolatedModulesLikeFlagName)
				}
			}
		}

		if isImportSpecifier(node) {
			targetSymbol := c.resolveAliasWithDeprecationCheck(symbol, node)
			if c.isDeprecatedSymbol(targetSymbol) && targetSymbol.Declarations != nil {
				c.addDeprecatedSuggestion(node, targetSymbol.Declarations, targetSymbol.EscapedName /* as string */)
			}
		}
	}
}

func (c *Checker) resolveAliasWithDeprecationCheck(symbol *ast.Symbol, location *ast.Node) *ast.Symbol {
	if symbol.Flags&ast.SymbolFlagsAlias == 0 || c.isDeprecatedSymbol(symbol) || c.getDeclarationOfAliasSymbol(symbol) == nil {
		return symbol
	}

	targetSymbol := c.resolveAlias(symbol)
	if targetSymbol == c.unknownSymbol {
		return targetSymbol
	}

	for symbol.Flags&ast.SymbolFlagsAlias != 0 {
		target := c.getImmediateAliasedSymbol(symbol)
		if target != nil {
			if target == targetSymbol {
				break
			}
			if target.Declarations != nil && length(target.Declarations) != 0 {
				if c.isDeprecatedSymbol(target) {
					c.addDeprecatedSuggestion(location, target.Declarations, target.EscapedName /* as string */)
					break
				} else {
					if symbol == targetSymbol {
						break
					}
					symbol = target
				}
			}
		} else {
			break
		}
	}
	return targetSymbol
}

func (c *Checker) checkImportBinding(node Union[ImportEqualsDeclaration, ImportClause, NamespaceImport, ImportSpecifier]) {
	c.checkCollisionsForDeclarationName(node, node.Name)
	c.checkAliasSymbol(node)
	if node.Kind == ast.KindImportSpecifier {
		c.checkModuleExportName(node.PropertyName)
		if moduleExportNameIsDefault(node.PropertyName || node.Name) && getESModuleInterop(c.compilerOptions) && host.getEmitModuleFormatOfFile(getSourceFileOfNode(node)) < ModuleKindSystem {
			c.checkExternalEmitHelpers(node, ExternalEmitHelpersImportDefault)
		}
	}
}

func (c *Checker) checkImportAttributes(declaration Union[ImportDeclaration, ExportDeclaration, JSDocImportTag]) *bool {
	node := declaration.Attributes
	if node != nil {
		importAttributesType := c.getGlobalImportAttributesType(true)
		if importAttributesType != c.emptyObjectType {
			c.checkTypeAssignableTo(c.getTypeFromImportAttributes(node), c.getNullableType(importAttributesType, TypeFlagsUndefined), node)
		}

		validForTypeAttributes := isExclusivelyTypeOnlyImportOrExport(declaration)
		override := getResolutionModeOverride(node, ifElse(validForTypeAttributes, c.grammarErrorOnNode, nil))
		isImportAttributes := declaration.Attributes.Token == ast.KindWithKeyword
		if validForTypeAttributes && override {
			return
			// Other grammar checks do not apply to type-only imports with resolution mode assertions
		}

		mode := (c.moduleKind == ModuleKindNodeNext) && declaration.ModuleSpecifier && c.getEmitSyntaxForModuleSpecifierExpression(declaration.ModuleSpecifier)
		if mode != ModuleKindESNext && c.moduleKind != ModuleKindESNext && c.moduleKind != ModuleKindPreserve {
			var message any
			switch {
			case isImportAttributes:
				if c.moduleKind == ModuleKindNodeNext {
					message = Diagnostics.Import_attributes_are_not_allowed_on_statements_that_compile_to_CommonJS_require_calls
				} else {
					message = Diagnostics.Import_attributes_are_only_supported_when_the_module_option_is_set_to_esnext_nodenext_or_preserve
				}
			case c.moduleKind == ModuleKindNodeNext:
				message = Diagnostics.Import_assertions_are_not_allowed_on_statements_that_compile_to_CommonJS_require_calls
			default:
				message = Diagnostics.Import_assertions_are_only_supported_when_the_module_option_is_set_to_esnext_nodenext_or_preserve
			}
			return c.grammarErrorOnNode(node, message)
		}

		isTypeOnly := isJSDocImportTag(declaration) || (ifElse(isImportDeclaration(declaration), declaration.ImportClause. /* ? */ isTypeOnly, declaration.IsTypeOnly))
		if isTypeOnly {
			return c.grammarErrorOnNode(node, ifElse(isImportAttributes, Diagnostics.Import_attributes_cannot_be_used_with_type_only_imports_or_exports, Diagnostics.Import_assertions_cannot_be_used_with_type_only_imports_or_exports))
		}

		if override {
			return c.grammarErrorOnNode(node, Diagnostics.resolution_mode_can_only_be_set_for_type_only_imports)
		}
	}
}

func (c *Checker) checkImportAttribute(node ImportAttribute) *Type {
	return c.getRegularTypeOfLiteralType(c.checkExpressionCached(node.Value))
}

func (c *Checker) checkImportDeclaration(node ImportDeclaration) {
	if c.checkGrammarModuleElementContext(node, ifElse(isInJSFile(node), Diagnostics.An_import_declaration_can_only_be_used_at_the_top_level_of_a_module, Diagnostics.An_import_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module)) {
		// If we hit an import declaration in an illegal context, just bail out to avoid cascading errors.
		return
	}
	if !c.checkGrammarModifiers(node) && node.Modifiers != nil {
		c.grammarErrorOnFirstToken(node, Diagnostics.An_import_declaration_cannot_have_modifiers)
	}
	if c.checkExternalImportOrExportDeclaration(node) {
		var resolvedModule TODO
		importClause := node.ImportClause
		if importClause != nil && !c.checkGrammarImportClause(importClause) {
			if importClause.Name != nil {
				c.checkImportBinding(importClause)
			}
			if importClause.NamedBindings != nil {
				if importClause.NamedBindings.Kind == ast.KindNamespaceImport {
					c.checkImportBinding(importClause.NamedBindings)
					if host.getEmitModuleFormatOfFile(getSourceFileOfNode(node)) < ModuleKindSystem && getESModuleInterop(c.compilerOptions) {
						// import * as ns from "foo";
						c.checkExternalEmitHelpers(node, ExternalEmitHelpersImportStar)
					}
				} else {
					resolvedModule = c.resolveExternalModuleName(node, node.ModuleSpecifier)
					if resolvedModule != nil {
						forEach(importClause.NamedBindings.Elements, c.checkImportBinding)
					}
				}
			}

			if c.isOnlyImportableAsDefault(node.ModuleSpecifier, resolvedModule) && !c.hasTypeJsonImportAttribute(node) {
				c.error(node.ModuleSpecifier, Diagnostics.Importing_a_JSON_file_into_an_ECMAScript_module_requires_a_type_Colon_json_import_attribute_when_module_is_set_to_0, ModuleKind[c.moduleKind])
			}
		} else if c.noUncheckedSideEffectImports && importClause == nil {
			c.resolveExternalModuleName(node, node.ModuleSpecifier)
		}
	}
	c.checkImportAttributes(node)
}

func (c *Checker) hasTypeJsonImportAttribute(node ImportDeclaration) bool {
	return node.Attributes != nil && node.Attributes.Elements.some(func(attr ImportAttribute) bool {
		return getTextOfIdentifierOrLiteral(attr.Name) == "type" && tryCast(attr.Value, isStringLiteralLike). /* ? */ text == "json"
	})
}

func (c *Checker) checkImportEqualsDeclaration(node ImportEqualsDeclaration) {
	if c.checkGrammarModuleElementContext(node, ifElse(isInJSFile(node), Diagnostics.An_import_declaration_can_only_be_used_at_the_top_level_of_a_module, Diagnostics.An_import_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module)) {
		// If we hit an import declaration in an illegal context, just bail out to avoid cascading errors.
		return
	}

	c.checkGrammarModifiers(node)
	if isInternalModuleImportEqualsDeclaration(node) || c.checkExternalImportOrExportDeclaration(node) {
		c.checkImportBinding(node)
		c.markLinkedReferences(node, ReferenceHintExportImportEquals)
		if node.ModuleReference.Kind != ast.KindExternalModuleReference {
			target := c.resolveAlias(c.getSymbolOfDeclaration(node))
			if target != c.unknownSymbol {
				targetFlags := c.getSymbolFlags(target)
				if targetFlags&ast.SymbolFlagsValue != 0 {
					// Target is a value symbol, check that it is not hidden by a local declaration with the same name
					moduleName := getFirstIdentifier(node.ModuleReference)
					if c.resolveEntityName(moduleName, ast.SymbolFlagsValue|ast.SymbolFlagsNamespace).Flags&ast.SymbolFlagsNamespace == 0 {
						c.error(moduleName, Diagnostics.Module_0_is_hidden_by_a_local_declaration_with_the_same_name, declarationNameToString(moduleName))
					}
				}
				if targetFlags&ast.SymbolFlagsType != 0 {
					c.checkTypeNameIsReserved(node.Name, Diagnostics.Import_name_cannot_be_0)
				}
			}
			if node.IsTypeOnly {
				c.grammarErrorOnNode(node, Diagnostics.An_import_alias_cannot_use_import_type)
			}
		} else {
			if ModuleKindES2015 <= c.moduleKind && c.moduleKind <= ModuleKindESNext && !node.IsTypeOnly && node.Flags&ast.NodeFlagsAmbient == 0 {
				// Import equals declaration cannot be emitted as ESM
				c.grammarErrorOnNode(node, Diagnostics.Import_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_import_d_from_mod_or_another_module_format_instead)
			}
		}
	}
}

func (c *Checker) checkExportDeclaration(node ExportDeclaration) {
	if c.checkGrammarModuleElementContext(node, ifElse(isInJSFile(node), Diagnostics.An_export_declaration_can_only_be_used_at_the_top_level_of_a_module, Diagnostics.An_export_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module)) {
		// If we hit an export in an illegal context, just bail out to avoid cascading errors.
		return
	}

	if !c.checkGrammarModifiers(node) && hasSyntacticModifiers(node) {
		c.grammarErrorOnFirstToken(node, Diagnostics.An_export_declaration_cannot_have_modifiers)
	}

	c.checkGrammarExportDeclaration(node)
	if node.ModuleSpecifier == nil || c.checkExternalImportOrExportDeclaration(node) {
		if node.ExportClause != nil && !isNamespaceExport(node.ExportClause) {
			// export { x, y }
			// export { x, y } from "foo"
			forEach(node.ExportClause.Elements, c.checkExportSpecifier)
			inAmbientExternalModule := node.Parent.Kind == ast.KindModuleBlock && isAmbientModule(node.Parent.Parent)
			inAmbientNamespaceDeclaration := !inAmbientExternalModule && node.Parent.Kind == ast.KindModuleBlock && node.ModuleSpecifier == nil && node.Flags&ast.NodeFlagsAmbient
			if node.Parent.Kind != ast.KindSourceFile && !inAmbientExternalModule && !inAmbientNamespaceDeclaration {
				c.error(node, Diagnostics.Export_declarations_are_not_permitted_in_a_namespace)
			}
		} else {
			// export * from "foo"
			// export * as ns from "foo";
			moduleSymbol := c.resolveExternalModuleName(node, node.ModuleSpecifier)
			if moduleSymbol != nil && c.hasExportAssignmentSymbol(moduleSymbol) {
				c.error(node.ModuleSpecifier, Diagnostics.Module_0_uses_export_and_cannot_be_used_with_export_Asterisk, c.symbolToString(moduleSymbol))
			} else if node.ExportClause != nil {
				c.checkAliasSymbol(node.ExportClause)
				c.checkModuleExportName(node.ExportClause.Name)
			}
			if host.getEmitModuleFormatOfFile(getSourceFileOfNode(node)) < ModuleKindSystem {
				if node.ExportClause != nil {
					// export * as ns from "foo";
					// For ES2015 modules, we emit it as a pair of `import * as a_1 ...; export { a_1 as ns }` and don't need the helper.
					// We only use the helper here when in esModuleInterop
					if getESModuleInterop(c.compilerOptions) {
						c.checkExternalEmitHelpers(node, ExternalEmitHelpersImportStar)
					}
				} else {
					// export * from "foo"
					c.checkExternalEmitHelpers(node, ExternalEmitHelpersExportStar)
				}
			}
		}
	}
	c.checkImportAttributes(node)
}

func (c *Checker) checkGrammarExportDeclaration(node ExportDeclaration) bool {
	if node.IsTypeOnly && node.ExportClause. /* ? */ kind == ast.KindNamedExports {
		return c.checkGrammarNamedImportsOrExports(node.ExportClause)
	}
	return false
}

func (c *Checker) checkGrammarModuleElementContext(node Statement, errorMessage DiagnosticMessage) bool {
	isInAppropriateContext := node.Parent.Kind == ast.KindSourceFile || node.Parent.Kind == ast.KindModuleBlock || node.Parent.Kind == ast.KindModuleDeclaration
	if !isInAppropriateContext {
		c.grammarErrorOnFirstToken(node, errorMessage)
	}
	return !isInAppropriateContext
}

func (c *Checker) checkExportSpecifier(node ExportSpecifier) {
	c.checkAliasSymbol(node)
	hasModuleSpecifier := node.Parent.Parent.ModuleSpecifier != nil
	c.checkModuleExportName(node.PropertyName, hasModuleSpecifier)
	c.checkModuleExportName(node.Name)
	if getEmitDeclarations(c.compilerOptions) {
		c.collectLinkedAliases(node.PropertyName || node.Name, true /*setVisibility*/)
	}
	if !hasModuleSpecifier {
		exportedName := node.PropertyName || node.Name
		if exportedName.Kind == ast.KindStringLiteral {
			return
			// Skip for invalid syntax like this: export { "x" }
		}
		// find immediate value referenced by exported name (SymbolFlags.Alias is set so we don't chase down aliases)
		symbol := c.resolveName(exportedName, exportedName.EscapedText, ast.SymbolFlagsValue|ast.SymbolFlagsType|ast.SymbolFlagsNamespace|ast.SymbolFlagsAlias, nil /*nameNotFoundMessage*/, true /*isUse*/)
		if symbol != nil && (symbol == c.undefinedSymbol || symbol == c.globalThisSymbol || symbol.Declarations != nil && isGlobalSourceFile(c.getDeclarationContainer(symbol.Declarations[0]))) {
			c.error(exportedName, Diagnostics.Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module, idText(exportedName))
		} else {
			c.markLinkedReferences(node, ReferenceHintExportSpecifier)
		}
	} else {
		if getESModuleInterop(c.compilerOptions) && host.getEmitModuleFormatOfFile(getSourceFileOfNode(node)) < ModuleKindSystem && moduleExportNameIsDefault(node.PropertyName || node.Name) {
			c.checkExternalEmitHelpers(node, ExternalEmitHelpersImportDefault)
		}
	}
}

func (c *Checker) checkExportAssignment(node ExportAssignment) {
	var illegalContextMessage any
	if node.IsExportEquals {
		illegalContextMessage = Diagnostics.An_export_assignment_must_be_at_the_top_level_of_a_file_or_module_declaration
	} else {
		illegalContextMessage = Diagnostics.A_default_export_must_be_at_the_top_level_of_a_file_or_module_declaration
	}
	if c.checkGrammarModuleElementContext(node, illegalContextMessage) {
		// If we hit an export assignment in an illegal context, just bail out to avoid cascading errors.
		return
	}

	var container /* TODO(TS-TO-GO) inferred type SourceFile | ModuleDeclaration */ any
	if node.Parent.Kind == ast.KindSourceFile {
		container = node.Parent
	} else {
		container = node.Parent.Parent.AsModuleDeclaration()
	}
	if container.Kind == ast.KindModuleDeclaration && !isAmbientModule(container) {
		if node.IsExportEquals {
			c.error(node, Diagnostics.An_export_assignment_cannot_be_used_in_a_namespace)
		} else {
			c.error(node, Diagnostics.A_default_export_can_only_be_used_in_an_ECMAScript_style_module)
		}

		return
	}
	// Grammar checking
	if !c.checkGrammarModifiers(node) && hasEffectiveModifiers(node) {
		c.grammarErrorOnFirstToken(node, Diagnostics.An_export_assignment_cannot_have_modifiers)
	}

	typeAnnotationNode := getEffectiveTypeAnnotationNode(node)
	if typeAnnotationNode != nil {
		c.checkTypeAssignableTo(c.checkExpressionCached(node.Expression), c.getTypeFromTypeNode(typeAnnotationNode), node.Expression)
	}

	isIllegalExportDefaultInCJS := !node.IsExportEquals && node.Flags&ast.NodeFlagsAmbient == 0 && c.compilerOptions.verbatimModuleSyntax && host.getEmitModuleFormatOfFile(getSourceFileOfNode(node)) == ModuleKindCommonJS

	if node.Expression.Kind == ast.KindIdentifier {
		id := node.Expression.AsIdentifier()
		sym := c.getExportSymbolOfValueSymbolIfExported(c.resolveEntityName(id, ast.SymbolFlagsAll, true /*ignoreErrors*/, true /*dontResolveAlias*/, node))
		if sym != nil {
			c.markLinkedReferences(node, ReferenceHintExportAssignment)
			typeOnlyDeclaration := c.getTypeOnlyAliasDeclaration(sym, ast.SymbolFlagsValue)
			// If not a value, we're interpreting the identifier as a type export, along the lines of (`export { Id as default }`)
			if c.getSymbolFlags(sym)&ast.SymbolFlagsValue != 0 {
				// However if it is a value, we need to check it's being used correctly
				c.checkExpressionCached(id)
				if !isIllegalExportDefaultInCJS && node.Flags&ast.NodeFlagsAmbient == 0 && c.compilerOptions.verbatimModuleSyntax && typeOnlyDeclaration != nil {
					c.error(id, ifElse(node.IsExportEquals, Diagnostics.An_export_declaration_must_reference_a_real_value_when_verbatimModuleSyntax_is_enabled_but_0_resolves_to_a_type_only_declaration, Diagnostics.An_export_default_must_reference_a_real_value_when_verbatimModuleSyntax_is_enabled_but_0_resolves_to_a_type_only_declaration), idText(id))
				}
			} else if !isIllegalExportDefaultInCJS && node.Flags&ast.NodeFlagsAmbient == 0 && c.compilerOptions.verbatimModuleSyntax {
				c.error(id, ifElse(node.IsExportEquals, Diagnostics.An_export_declaration_must_reference_a_value_when_verbatimModuleSyntax_is_enabled_but_0_only_refers_to_a_type, Diagnostics.An_export_default_must_reference_a_value_when_verbatimModuleSyntax_is_enabled_but_0_only_refers_to_a_type), idText(id))
			}

			if !isIllegalExportDefaultInCJS && node.Flags&ast.NodeFlagsAmbient == 0 && getIsolatedModules(c.compilerOptions) && sym.Flags&ast.SymbolFlagsValue == 0 {
				nonLocalMeanings := c.getSymbolFlags(sym, false /*excludeTypeOnlyMeanings*/, true /*excludeLocalMeanings*/)
				if sym.Flags&ast.SymbolFlagsAlias != 0 && nonLocalMeanings&ast.SymbolFlagsType != 0 && nonLocalMeanings&ast.SymbolFlagsValue == 0 && (typeOnlyDeclaration == nil || getSourceFileOfNode(typeOnlyDeclaration) != getSourceFileOfNode(node)) {
					// import { SomeType } from "./someModule";
					// export default SomeType; OR
					// export = SomeType;
					c.error(id, ifElse(node.IsExportEquals, Diagnostics._0_resolves_to_a_type_and_must_be_marked_type_only_in_this_file_before_re_exporting_when_1_is_enabled_Consider_using_import_type_where_0_is_imported, Diagnostics._0_resolves_to_a_type_and_must_be_marked_type_only_in_this_file_before_re_exporting_when_1_is_enabled_Consider_using_export_type_0_as_default), idText(id), c.isolatedModulesLikeFlagName)
				} else if typeOnlyDeclaration != nil && getSourceFileOfNode(typeOnlyDeclaration) != getSourceFileOfNode(node) {
					// import { SomeTypeOnlyValue } from "./someModule";
					// export default SomeTypeOnlyValue; OR
					// export = SomeTypeOnlyValue;
					c.addTypeOnlyDeclarationRelatedInfo(c.error(id, ifElse(node.IsExportEquals, Diagnostics._0_resolves_to_a_type_only_declaration_and_must_be_marked_type_only_in_this_file_before_re_exporting_when_1_is_enabled_Consider_using_import_type_where_0_is_imported, Diagnostics._0_resolves_to_a_type_only_declaration_and_must_be_marked_type_only_in_this_file_before_re_exporting_when_1_is_enabled_Consider_using_export_type_0_as_default), idText(id), c.isolatedModulesLikeFlagName), typeOnlyDeclaration, idText(id))
				}
			}
		} else {
			c.checkExpressionCached(id)
			// doesn't resolve, check as expression to mark as error
		}

		if getEmitDeclarations(c.compilerOptions) {
			c.collectLinkedAliases(id, true /*setVisibility*/)
		}
	} else {
		c.checkExpressionCached(node.Expression)
	}

	if isIllegalExportDefaultInCJS {
		c.error(node, Diagnostics.ESM_syntax_is_not_allowed_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled)
	}

	c.checkExternalModuleExports(container)

	if (node.Flags&ast.NodeFlagsAmbient != 0) && !isEntityNameExpression(node.Expression) {
		c.grammarErrorOnNode(node.Expression, Diagnostics.The_expression_of_an_export_assignment_must_be_an_identifier_or_qualified_name_in_an_ambient_context)
	}

	if node.IsExportEquals {
		// Forbid export= in esm implementation files, and esm mode declaration files
		if c.moduleKind >= ModuleKindES2015 && c.moduleKind != ModuleKindPreserve && ((node.Flags&ast.NodeFlagsAmbient != 0 && host.getImpliedNodeFormatForEmit(getSourceFileOfNode(node)) == ModuleKindESNext) || (node.Flags&ast.NodeFlagsAmbient == 0 && host.getImpliedNodeFormatForEmit(getSourceFileOfNode(node)) != ModuleKindCommonJS)) {
			// export assignment is not supported in es6 modules
			c.grammarErrorOnNode(node, Diagnostics.Export_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_export_default_or_another_module_format_instead)
		} else if c.moduleKind == ModuleKindSystem && node.Flags&ast.NodeFlagsAmbient == 0 {
			// system modules does not support export assignment
			c.grammarErrorOnNode(node, Diagnostics.Export_assignment_is_not_supported_when_module_flag_is_system)
		}
	}
}

func (c *Checker) hasExportedMembers(moduleSymbol *ast.Symbol) *bool {
	return forEachEntry(moduleSymbol.Exports, func(_ *ast.Symbol, id string) bool {
		return id != "export="
	})
}

func (c *Checker) checkExternalModuleExports(node Union[SourceFile, ModuleDeclaration]) {
	moduleSymbol := c.getSymbolOfDeclaration(node)
	links := c.getSymbolLinks(moduleSymbol)
	if !links.exportsChecked {
		exportEqualsSymbol := moduleSymbol.Exports.get("export=" /* as __String */)
		if exportEqualsSymbol != nil && c.hasExportedMembers(moduleSymbol) {
			declaration := c.getDeclarationOfAliasSymbol(exportEqualsSymbol) || exportEqualsSymbol.ValueDeclaration
			if declaration != nil && !c.isTopLevelInExternalModuleAugmentation(declaration) && !isInJSFile(declaration) {
				c.error(declaration, Diagnostics.An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements)
			}
		}
		// Checks for export * conflicts
		exports := c.getExportsOfModule(moduleSymbol)
		if exports {
			exports.forEach(func(TODO_IDENTIFIER *ast.Symbol, id string) {
				if id == "__export" {
					return
				}
				// ECMA262: 15.2.1.1 It is a Syntax Error if the ExportedNames of ModuleItemList contains any duplicate entries.
				// (TS Exceptions: namespaces, function overloads, enums, and interfaces)
				if flags&(ast.SymbolFlagsNamespace|ast.SymbolFlagsEnum) != 0 {
					return
				}
				exportedDeclarationsCount := core.CountWhere(declarations, and(isNotOverloadAndNotAccessor, not(isInterfaceDeclaration)))
				if flags&ast.SymbolFlagsTypeAlias != 0 && exportedDeclarationsCount <= 2 {
					// it is legal to merge type alias with other values
					// so count should be either 1 (just type alias) or 2 (type alias + merged value)
					return
				}
				if exportedDeclarationsCount > 1 {
					if !c.isDuplicatedCommonJSExport(declarations) {
						for _, declaration := range declarations {
							if isNotOverload(declaration) {
								c.diagnostics.add(createDiagnosticForNode(declaration, Diagnostics.Cannot_redeclare_exported_variable_0, unescapeLeadingUnderscores(id)))
							}
						}
					}
				}
			})
		}
		links.exportsChecked = true
	}
}

func (c *Checker) isDuplicatedCommonJSExport(declarations *[]Declaration) *bool {
	return declarations && declarations.length > 1 && declarations.every(func(d Declaration) bool {
		return isInJSFile(d) && isAccessExpression(d) && (isExportsIdentifier(d.Expression) || isModuleExportsAccessExpression(d.Expression))
	})
}

func (c *Checker) checkSourceElement(node *ast.Node) {
	if node != nil {
		saveCurrentNode := c.currentNode
		c.currentNode = node
		c.instantiationCount = 0
		c.checkSourceElementWorker(node)
		c.currentNode = saveCurrentNode
	}
}

func (c *Checker) checkSourceElementWorker(node *ast.Node) {
	if c.getNodeCheckFlags(node)&NodeCheckFlagsPartiallyTypeChecked != 0 {
		return
	}

	if canHaveJSDoc(node) {
		forEach(node.JsDoc, func(TODO_IDENTIFIER JSDoc) {
			c.checkJSDocCommentWorker(comment)
			forEach(tags, func(tag JSDocTag) {
				c.checkJSDocCommentWorker(tag.Comment)
				if isInJSFile(node) {
					c.checkSourceElement(tag)
				}
			})
		})
	}

	kind := node.Kind
	if c.cancellationToken != nil {
		// Only bother checking on a few construct kinds.  We don't want to be excessively
		// hitting the cancellation token on every node we check.
		switch kind {
		case ast.KindModuleDeclaration,
			ast.KindClassDeclaration,
			ast.KindInterfaceDeclaration,
			ast.KindFunctionDeclaration:
			c.cancellationToken.throwIfCancellationRequested()
		}
	}
	if kind >= ast.KindFirstStatement && kind <= ast.KindLastStatement && canHaveFlowNode(node) && node.FlowNode != nil && !c.isReachableFlowNode(node.FlowNode) {
		c.errorOrSuggestion(c.compilerOptions.allowUnreachableCode == false, node, Diagnostics.Unreachable_code_detected)
	}

	// If editing this, keep `isSourceElement` in utilities up to date.
	switch kind {
	case ast.KindTypeParameter:
		return c.checkTypeParameter(node.AsTypeParameterDeclaration())
	case ast.KindParameter:
		return c.checkParameter(node.AsParameterDeclaration())
	case ast.KindPropertyDeclaration:
		return c.checkPropertyDeclaration(node.AsPropertyDeclaration())
	case ast.KindPropertySignature:
		return c.checkPropertySignature(node.AsPropertySignature())
	case ast.KindConstructorType,
		ast.KindFunctionType,
		ast.KindCallSignature,
		ast.KindConstructSignature,
		ast.KindIndexSignature:
		return c.checkSignatureDeclaration(node.AsSignatureDeclaration())
	case ast.KindMethodDeclaration,
		ast.KindMethodSignature:
		return c.checkMethodDeclaration(node /* as MethodDeclaration | MethodSignature */)
	case ast.KindClassStaticBlockDeclaration:
		return c.checkClassStaticBlockDeclaration(node.AsClassStaticBlockDeclaration())
	case ast.KindConstructor:
		return c.checkConstructorDeclaration(node.AsConstructorDeclaration())
	case ast.KindGetAccessor,
		ast.KindSetAccessor:
		return c.checkAccessorDeclaration(node.AsAccessorDeclaration())
	case ast.KindTypeReference:
		return c.checkTypeReferenceNode(node.AsTypeReferenceNode())
	case ast.KindTypePredicate:
		return c.checkTypePredicate(node.AsTypePredicateNode())
	case ast.KindTypeQuery:
		return c.checkTypeQuery(node.AsTypeQueryNode())
	case ast.KindTypeLiteral:
		return c.checkTypeLiteral(node.AsTypeLiteralNode())
	case ast.KindArrayType:
		return c.checkArrayType(node.AsArrayTypeNode())
	case ast.KindTupleType:
		return c.checkTupleType(node.AsTupleTypeNode())
	case ast.KindUnionType,
		ast.KindIntersectionType:
		return c.checkUnionOrIntersectionType(node.AsUnionOrIntersectionTypeNode())
	case ast.KindParenthesizedType,
		ast.KindOptionalType,
		ast.KindRestType:
		return c.checkSourceElement((node /* as ParenthesizedTypeNode | OptionalTypeNode | RestTypeNode */).Type_)
	case ast.KindThisType:
		return c.checkThisType(node.AsThisTypeNode())
	case ast.KindTypeOperator:
		return c.checkTypeOperator(node.AsTypeOperatorNode())
	case ast.KindConditionalType:
		return c.checkConditionalType(node.AsConditionalTypeNode())
	case ast.KindInferType:
		return c.checkInferType(node.AsInferTypeNode())
	case ast.KindTemplateLiteralType:
		return c.checkTemplateLiteralType(node.AsTemplateLiteralTypeNode())
	case ast.KindImportType:
		return c.checkImportType(node.AsImportTypeNode())
	case ast.KindNamedTupleMember:
		return c.checkNamedTupleMember(node.AsNamedTupleMember())
	case ast.KindJSDocAugmentsTag:
		return c.checkJSDocAugmentsTag(node.AsJSDocAugmentsTag())
	case ast.KindJSDocImplementsTag:
		return c.checkJSDocImplementsTag(node.AsJSDocImplementsTag())
	case ast.KindJSDocTypedefTag,
		ast.KindJSDocCallbackTag,
		ast.KindJSDocEnumTag:
		return c.checkJSDocTypeAliasTag(node.AsJSDocTypedefTag())
	case ast.KindJSDocTemplateTag:
		return c.checkJSDocTemplateTag(node.AsJSDocTemplateTag())
	case ast.KindJSDocTypeTag:
		return c.checkJSDocTypeTag(node.AsJSDocTypeTag())
	case ast.KindJSDocLink,
		ast.KindJSDocLinkCode,
		ast.KindJSDocLinkPlain:
		return c.checkJSDocLinkLikeTag(node /* as JSDocLink | JSDocLinkCode | JSDocLinkPlain */)
	case ast.KindJSDocParameterTag:
		return c.checkJSDocParameterTag(node.AsJSDocParameterTag())
	case ast.KindJSDocPropertyTag:
		return c.checkJSDocPropertyTag(node.AsJSDocPropertyTag())
	case ast.KindJSDocFunctionType:
		c.checkJSDocFunctionType(node.AsJSDocFunctionType())
		fallthrough
	case ast.KindJSDocNonNullableType,
		ast.KindJSDocNullableType,
		ast.KindJSDocAllType,
		ast.KindJSDocUnknownType,
		ast.KindJSDocTypeLiteral:
		c.checkJSDocTypeIsInJsFile(node)
		forEachChild(node, c.checkSourceElement)
		return
	case ast.KindJSDocVariadicType:
		c.checkJSDocVariadicType(node.AsJSDocVariadicType())
		return
	case ast.KindJSDocTypeExpression:
		return c.checkSourceElement(node.AsJSDocTypeExpression().Type_)
	case ast.KindJSDocPublicTag,
		ast.KindJSDocProtectedTag,
		ast.KindJSDocPrivateTag:
		return c.checkJSDocAccessibilityModifiers(node /* as JSDocPublicTag | JSDocProtectedTag | JSDocPrivateTag */)
	case ast.KindJSDocSatisfiesTag:
		return c.checkJSDocSatisfiesTag(node.AsJSDocSatisfiesTag())
	case ast.KindJSDocThisTag:
		return c.checkJSDocThisTag(node.AsJSDocThisTag())
	case ast.KindJSDocImportTag:
		return c.checkJSDocImportTag(node.AsJSDocImportTag())
	case ast.KindIndexedAccessType:
		return c.checkIndexedAccessType(node.AsIndexedAccessTypeNode())
	case ast.KindMappedType:
		return c.checkMappedType(node.AsMappedTypeNode())
	case ast.KindFunctionDeclaration:
		return c.checkFunctionDeclaration(node.AsFunctionDeclaration())
	case ast.KindBlock,
		ast.KindModuleBlock:
		return c.checkBlock(node.AsBlock())
	case ast.KindVariableStatement:
		return c.checkVariableStatement(node.AsVariableStatement())
	case ast.KindExpressionStatement:
		return c.checkExpressionStatement(node.AsExpressionStatement())
	case ast.KindIfStatement:
		return c.checkIfStatement(node.AsIfStatement())
	case ast.KindDoStatement:
		return c.checkDoStatement(node.AsDoStatement())
	case ast.KindWhileStatement:
		return c.checkWhileStatement(node.AsWhileStatement())
	case ast.KindForStatement:
		return c.checkForStatement(node.AsForStatement())
	case ast.KindForInStatement:
		return c.checkForInStatement(node.AsForInStatement())
	case ast.KindForOfStatement:
		return c.checkForOfStatement(node.AsForOfStatement())
	case ast.KindContinueStatement,
		ast.KindBreakStatement:
		return c.checkBreakOrContinueStatement(node.AsBreakOrContinueStatement())
	case ast.KindReturnStatement:
		return c.checkReturnStatement(node.AsReturnStatement())
	case ast.KindWithStatement:
		return c.checkWithStatement(node.AsWithStatement())
	case ast.KindSwitchStatement:
		return c.checkSwitchStatement(node.AsSwitchStatement())
	case ast.KindLabeledStatement:
		return c.checkLabeledStatement(node.AsLabeledStatement())
	case ast.KindThrowStatement:
		return c.checkThrowStatement(node.AsThrowStatement())
	case ast.KindTryStatement:
		return c.checkTryStatement(node.AsTryStatement())
	case ast.KindVariableDeclaration:
		return c.checkVariableDeclaration(node.AsVariableDeclaration())
	case ast.KindBindingElement:
		return c.checkBindingElement(node.AsBindingElement())
	case ast.KindClassDeclaration:
		return c.checkClassDeclaration(node.AsClassDeclaration())
	case ast.KindInterfaceDeclaration:
		return c.checkInterfaceDeclaration(node.AsInterfaceDeclaration())
	case ast.KindTypeAliasDeclaration:
		return c.checkTypeAliasDeclaration(node.AsTypeAliasDeclaration())
	case ast.KindEnumDeclaration:
		return c.checkEnumDeclaration(node.AsEnumDeclaration())
	case ast.KindModuleDeclaration:
		return c.checkModuleDeclaration(node.AsModuleDeclaration())
	case ast.KindImportDeclaration:
		return c.checkImportDeclaration(node.AsImportDeclaration())
	case ast.KindImportEqualsDeclaration:
		return c.checkImportEqualsDeclaration(node.AsImportEqualsDeclaration())
	case ast.KindExportDeclaration:
		return c.checkExportDeclaration(node.AsExportDeclaration())
	case ast.KindExportAssignment:
		return c.checkExportAssignment(node.AsExportAssignment())
	case ast.KindEmptyStatement,
		ast.KindDebuggerStatement:
		c.checkGrammarStatementInAmbientContext(node)
		return
	case ast.KindMissingDeclaration:
		return c.checkMissingDeclaration(node)
	}
}

func (c *Checker) checkJSDocCommentWorker(node Union[string, []JSDocComment, undefined]) {
	if isArray(node) {
		forEach(node, func(tag JSDocComment) {
			if isJSDocLinkLike(tag) {
				c.checkSourceElement(tag)
			}
		})
	}
}

func (c *Checker) checkJSDocTypeIsInJsFile(node *ast.Node) {
	if !isInJSFile(node) {
		if isJSDocNonNullableType(node) || isJSDocNullableType(node) {
			token := tokenToString(ifElse(isJSDocNonNullableType(node), ast.KindExclamationToken, ast.KindQuestionToken))
			var diagnostic any
			if node.Postfix {
				diagnostic = Diagnostics._0_at_the_end_of_a_type_is_not_valid_TypeScript_syntax_Did_you_mean_to_write_1
			} else {
				diagnostic = Diagnostics._0_at_the_start_of_a_type_is_not_valid_TypeScript_syntax_Did_you_mean_to_write_1
			}
			typeNode := node.Type_
			t := c.getTypeFromTypeNode(typeNode)
			c.grammarErrorOnNode(node, diagnostic, token, c.typeToString(ifElse(isJSDocNullableType(node) && !(t == c.neverType || t == c.voidType), c.getUnionType(append([]*Type{t, c.undefinedType}, ifElse(node.Postfix, nil, c.nullType))), t)))
		} else {
			c.grammarErrorOnNode(node, Diagnostics.JSDoc_types_can_only_be_used_inside_documentation_comments)
		}
	}
}

func (c *Checker) checkJSDocVariadicType(node JSDocVariadicType) {
	c.checkJSDocTypeIsInJsFile(node)
	c.checkSourceElement(node.Type_)

	// Only legal location is in the *last* parameter tag or last parameter of a JSDoc function.
	TODO_IDENTIFIER := node
	if isParameter(parent) && isJSDocFunctionType(parent.Parent) {
		if core.LastOrNil(parent.Parent.Parameters) != parent {
			c.error(node, Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list)
		}
		return
	}

	if !isJSDocTypeExpression(parent) {
		c.error(node, Diagnostics.JSDoc_may_only_appear_in_the_last_parameter_of_a_signature)
	}

	paramTag := node.Parent.Parent
	if !isJSDocParameterTag(paramTag) {
		c.error(node, Diagnostics.JSDoc_may_only_appear_in_the_last_parameter_of_a_signature)
		return
	}

	param := getParameterSymbolFromJSDoc(paramTag)
	if param == nil {
		// We will error in `checkJSDocParameterTag`.
		return
	}

	host := getHostSignatureFromJSDoc(paramTag)
	if host == nil || core.LastOrNil(host.Parameters).Symbol != param {
		c.error(node, Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list)
	}
}

func (c *Checker) getTypeFromJSDocVariadicType(node JSDocVariadicType) *Type {
	t := c.getTypeFromTypeNode(node.Type_)
	TODO_IDENTIFIER := node
	paramTag := node.Parent.Parent
	if isJSDocTypeExpression(node.Parent) && isJSDocParameterTag(paramTag) {
		// Else we will add a diagnostic, see `checkJSDocVariadicType`.
		host := getHostSignatureFromJSDoc(paramTag)
		isCallbackTag := isJSDocCallbackTag(paramTag.Parent.Parent)
		if host != nil || isCallbackTag {
			/*
			   Only return an array type if the corresponding parameter is marked as a rest parameter, or if there are no parameters.
			   So in the following situation we will not create an array type:
			       /** @param {...number} a * /
			       function f(a) {}
			   Because `a` will just be of type `number | undefined`. A synthetic `...args` will also be added, which *will* get an array type.
			*/
			var lastParamDeclaration * /* TODO(TS-TO-GO) inferred type ParameterDeclaration | JSDocParameterTag */ any
			if isCallbackTag {
				lastParamDeclaration = lastOrUndefined(paramTag.Parent.Parent.AsJSDocCallbackTag().TypeExpression.Parameters)
			} else {
				lastParamDeclaration = lastOrUndefined(host.Parameters)
			}
			symbol := getParameterSymbolFromJSDoc(paramTag)
			if lastParamDeclaration == nil || symbol != nil && lastParamDeclaration.Symbol == symbol && isRestParameter(lastParamDeclaration) {
				return c.createArrayType(t)
			}
		}
	}
	if isParameter(parent) && isJSDocFunctionType(parent.Parent) {
		return c.createArrayType(t)
	}
	return c.addOptionality(t)
}

// Function and class expression bodies are checked after all statements in the enclosing body. This is
// to ensure constructs like the following are permitted:
//
//	const foo = function () {
//	   const s = foo();
//	   return "hello";
//	}
//
// Here, performing a full type check of the body of the function expression whilst in the process of
// determining the type of foo would cause foo to be given type any because of the recursive reference.
// Delaying the type check of the body ensures foo has been assigned a type.
func (c *Checker) checkNodeDeferred(node *ast.Node) {
	enclosingFile := getSourceFileOfNode(node)
	links := c.getNodeLinks(enclosingFile)
	if links.flags&NodeCheckFlagsTypeChecked == 0 {
		links.deferredNodes = links.deferredNodes || NewSet()
		links.deferredNodes.add(node)
	} else {
		Debug.assert(links.deferredNodes == nil, "A type-checked file should have no deferred nodes.")
	}
}

func (c *Checker) checkDeferredNodes(context SourceFile) {
	links := c.getNodeLinks(context)
	if links.deferredNodes != nil {
		links.deferredNodes.forEach(c.checkDeferredNode)
	}
	links.deferredNodes = nil
}

func (c *Checker) checkDeferredNode(node *ast.Node) {
	tracing. /* ? */ push(tracing.Phase.Check, "checkDeferredNode", &Args{
		kind: node.Kind,
		pos:  node.Pos,
		end:  node.End,
		path: (node.(TracingNode)).tracingPath,
	})
	saveCurrentNode := c.currentNode
	c.currentNode = node
	c.instantiationCount = 0
	switch node.Kind {
	case ast.KindCallExpression,
		ast.KindNewExpression,
		ast.KindTaggedTemplateExpression,
		ast.KindDecorator,
		ast.KindJsxOpeningElement:
		// These node kinds are deferred checked when overload resolution fails
		// To save on work, we ensure the arguments are checked just once, in
		// a deferred way
		c.resolveUntypedCall(node.AsCallLikeExpression())
	case ast.KindFunctionExpression,
		ast.KindArrowFunction,
		ast.KindMethodDeclaration,
		ast.KindMethodSignature:
		c.checkFunctionExpressionOrObjectLiteralMethodDeferred(node.AsFunctionExpression())
	case ast.KindGetAccessor,
		ast.KindSetAccessor:
		c.checkAccessorDeclaration(node.AsAccessorDeclaration())
	case ast.KindClassExpression:
		c.checkClassExpressionDeferred(node.AsClassExpression())
	case ast.KindTypeParameter:
		c.checkTypeParameterDeferred(node.AsTypeParameterDeclaration())
	case ast.KindJsxSelfClosingElement:
		c.checkJsxSelfClosingElementDeferred(node.AsJsxSelfClosingElement())
	case ast.KindJsxElement:
		c.checkJsxElementDeferred(node.AsJsxElement())
	case ast.KindTypeAssertionExpression,
		ast.KindAsExpression,
		ast.KindParenthesizedExpression:
		c.checkAssertionDeferred(node /* as AssertionExpression | JSDocTypeAssertion */)
	case ast.KindVoidExpression:
		c.checkExpression(node.AsVoidExpression().Expression)
	case ast.KindBinaryExpression:
		if isInstanceOfExpression(node) {
			c.resolveUntypedCall(node)
		}
	}
	c.currentNode = saveCurrentNode
	tracing. /* ? */ pop()
}

func (c *Checker) checkSourceFile(node SourceFile, nodesToCheck *[]*ast.Node) {
	tracing. /* ? */ push(tracing.Phase.Check, ifElse(nodesToCheck != nil, "checkSourceFileNodes", "checkSourceFile"), &Args{
		path: node.Path,
	}, true /*separateBeginAndEnd*/)
	var beforeMark /* TODO(TS-TO-GO) inferred type "beforeCheckNodes" | "beforeCheck" */ any
	if nodesToCheck != nil {
		beforeMark = "beforeCheckNodes"
	} else {
		beforeMark = "beforeCheck"
	}
	var afterMark /* TODO(TS-TO-GO) inferred type "afterCheckNodes" | "afterCheck" */ any
	if nodesToCheck != nil {
		afterMark = "afterCheckNodes"
	} else {
		afterMark = "afterCheck"
	}
	performance.mark(beforeMark)
	ifElse(nodesToCheck != nil, c.checkSourceFileNodesWorker(node, nodesToCheck), c.checkSourceFileWorker(node))
	performance.mark(afterMark)
	performance.measure("Check", beforeMark, afterMark)
	tracing. /* ? */ pop()
}

func (c *Checker) unusedIsError(kind UnusedKind, isAmbient bool) bool {
	if isAmbient {
		return false
	}
	switch kind {
	case UnusedKindLocal:
		return c.compilerOptions.noUnusedLocals
	case UnusedKindParameter:
		return c.compilerOptions.noUnusedParameters
	default:
		return Debug.assertNever(kind)
	}
}

func (c *Checker) getPotentiallyUnusedIdentifiers(sourceFile SourceFile) []PotentiallyUnusedIdentifier {
	return c.allPotentiallyUnusedIdentifiers.get(sourceFile.Path) || emptyArray
}

// Fully type check a source file and collect the relevant diagnostics.
func (c *Checker) checkSourceFileWorker(node SourceFile) {
	links := c.getNodeLinks(node)
	if links.flags&NodeCheckFlagsTypeChecked == 0 {
		if skipTypeChecking(node, c.compilerOptions, host) {
			return
		}

		// Grammar checking
		c.checkGrammarSourceFile(node)

		clear(c.potentialThisCollisions)
		clear(c.potentialNewTargetCollisions)
		clear(c.potentialWeakMapSetCollisions)
		clear(c.potentialReflectCollisions)
		clear(c.potentialUnusedRenamedBindingElementsInTypes)

		if links.flags&NodeCheckFlagsPartiallyTypeChecked != 0 {
			c.potentialThisCollisions = links.potentialThisCollisions
			c.potentialNewTargetCollisions = links.potentialNewTargetCollisions
			c.potentialWeakMapSetCollisions = links.potentialWeakMapSetCollisions
			c.potentialReflectCollisions = links.potentialReflectCollisions
			c.potentialUnusedRenamedBindingElementsInTypes = links.potentialUnusedRenamedBindingElementsInTypes
		}

		forEach(node.Statements, c.checkSourceElement)
		c.checkSourceElement(node.EndOfFileToken)

		c.checkDeferredNodes(node)

		if isExternalOrCommonJsModule(node) {
			c.registerForUnusedIdentifiersCheck(node)
		}

		c.addLazyDiagnostic(func() {
			// This relies on the results of other lazy diagnostics, so must be computed after them
			if !node.IsDeclarationFile && (c.compilerOptions.noUnusedLocals || c.compilerOptions.noUnusedParameters) {
				c.checkUnusedIdentifiers(c.getPotentiallyUnusedIdentifiers(node), func(containingNode *ast.Node, kind UnusedKind, diag DiagnosticWithLocation) {
					if !containsParseError(containingNode) && c.unusedIsError(kind, containingNode.Flags&ast.NodeFlagsAmbient != 0) {
						c.diagnostics.add(diag)
					}
				})
			}
			if !node.IsDeclarationFile {
				c.checkPotentialUncheckedRenamedBindingElementsInTypes()
			}
		})

		if isExternalOrCommonJsModule(node) {
			c.checkExternalModuleExports(node)
		}

		if c.potentialThisCollisions.length != 0 {
			forEach(c.potentialThisCollisions, c.checkIfThisIsCapturedInEnclosingScope)
			clear(c.potentialThisCollisions)
		}

		if c.potentialNewTargetCollisions.length != 0 {
			forEach(c.potentialNewTargetCollisions, c.checkIfNewTargetIsCapturedInEnclosingScope)
			clear(c.potentialNewTargetCollisions)
		}

		if c.potentialWeakMapSetCollisions.length != 0 {
			forEach(c.potentialWeakMapSetCollisions, c.checkWeakMapSetCollision)
			clear(c.potentialWeakMapSetCollisions)
		}

		if c.potentialReflectCollisions.length != 0 {
			forEach(c.potentialReflectCollisions, c.checkReflectCollision)
			clear(c.potentialReflectCollisions)
		}

		links.flags |= NodeCheckFlagsTypeChecked
	}
}

func (c *Checker) checkSourceFileNodesWorker(file SourceFile, nodes []*ast.Node) {
	links := c.getNodeLinks(file)
	if links.flags&NodeCheckFlagsTypeChecked == 0 {
		if skipTypeChecking(file, c.compilerOptions, host) {
			return
		}

		// Grammar checking
		c.checkGrammarSourceFile(file)

		clear(c.potentialThisCollisions)
		clear(c.potentialNewTargetCollisions)
		clear(c.potentialWeakMapSetCollisions)
		clear(c.potentialReflectCollisions)
		clear(c.potentialUnusedRenamedBindingElementsInTypes)

		forEach(nodes, c.checkSourceElement)

		c.checkDeferredNodes(file)

		(links.potentialThisCollisions || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.potentialThisCollisions = [] */ TODO)).push(c.potentialThisCollisions...)
		(links.potentialNewTargetCollisions || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.potentialNewTargetCollisions = [] */ TODO)).push(c.potentialNewTargetCollisions...)
		(links.potentialWeakMapSetCollisions || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.potentialWeakMapSetCollisions = [] */ TODO)).push(c.potentialWeakMapSetCollisions...)
		(links.potentialReflectCollisions || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.potentialReflectCollisions = [] */ TODO)).push(c.potentialReflectCollisions...)
		(links.potentialUnusedRenamedBindingElementsInTypes || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: links.potentialUnusedRenamedBindingElementsInTypes = [] */ TODO)).push(c.potentialUnusedRenamedBindingElementsInTypes...)

		links.flags |= NodeCheckFlagsPartiallyTypeChecked
		for _, node := range nodes {
			nodeLinks := c.getNodeLinks(node)
			nodeLinks.flags |= NodeCheckFlagsPartiallyTypeChecked
		}
	}
}

func (c *Checker) getDiagnostics(sourceFile SourceFile, ct CancellationToken, nodesToCheck []*ast.Node) []Diagnostic {
	{ // try
		// Record the cancellation token so it can be checked later on during checkSourceElement.
		// Do this in a finally block so we can ensure that it gets reset back to nothing after
		// this call is done.
		c.cancellationToken = ct
		return c.getDiagnosticsWorker(sourceFile, nodesToCheck)
	}
	{ // finally
		c.cancellationToken = nil
	}
}

func (c *Checker) ensurePendingDiagnosticWorkComplete() {
	// Invoke any existing lazy diagnostics to add them, clear the backlog of diagnostics
	for _, cb := range c.deferredDiagnosticsCallbacks {
		cb()
	}
	c.deferredDiagnosticsCallbacks = []never{}
}

func (c *Checker) checkSourceFileWithEagerDiagnostics(sourceFile SourceFile, nodesToCheck []*ast.Node) {
	c.ensurePendingDiagnosticWorkComplete()
	// then setup diagnostics for immediate invocation (as we are about to collect them, and
	// this avoids the overhead of longer-lived callbacks we don't need to allocate)
	// This also serves to make the shift to possibly lazy diagnostics transparent to serial command-line scenarios
	// (as in those cases, all the diagnostics will still be computed as the appropriate place in the tree,
	// thus much more likely retaining the same union ordering as before we had lazy diagnostics)
	oldAddLazyDiagnostics := c.addLazyDiagnostic
	c.addLazyDiagnostic = func(cb /* TODO(TS-TO-GO) inferred type () => void */ any) {
		return cb()
	}
	c.checkSourceFile(sourceFile, nodesToCheck)
	c.addLazyDiagnostic = oldAddLazyDiagnostics
}

func (c *Checker) getDiagnosticsWorker(sourceFile SourceFile, nodesToCheck *[]*ast.Node) []Diagnostic {
	if sourceFile {
		c.ensurePendingDiagnosticWorkComplete()
		// Some global diagnostics are deferred until they are needed and
		// may not be reported in the first call to getGlobalDiagnostics.
		// We should catch these changes and report them.
		previousGlobalDiagnostics := c.diagnostics.getGlobalDiagnostics()
		previousGlobalDiagnosticsSize := previousGlobalDiagnostics.length

		c.checkSourceFileWithEagerDiagnostics(sourceFile, nodesToCheck)
		semanticDiagnostics := c.diagnostics.getDiagnostics(sourceFile.FileName)
		if nodesToCheck != nil {
			// No need to get global diagnostics.
			return semanticDiagnostics
		}
		currentGlobalDiagnostics := c.diagnostics.getGlobalDiagnostics()
		if currentGlobalDiagnostics != previousGlobalDiagnostics {
			// If the arrays are not the same reference, new diagnostics were added.
			deferredGlobalDiagnostics := relativeComplement(previousGlobalDiagnostics, currentGlobalDiagnostics, compareDiagnostics)
			return core.Concatenate(deferredGlobalDiagnostics, semanticDiagnostics)
		} else if previousGlobalDiagnosticsSize == 0 && currentGlobalDiagnostics.length > 0 {
			// If the arrays are the same reference, but the length has changed, a single
			// new diagnostic was added as DiagnosticCollection attempts to reuse the
			// same array.
			return core.Concatenate(currentGlobalDiagnostics, semanticDiagnostics)
		}

		return semanticDiagnostics
	}

	// Global diagnostics are always added when a file is not provided to
	// getDiagnostics
	forEach(host.getSourceFiles(), func(file SourceFile) {
		return c.checkSourceFileWithEagerDiagnostics(file)
	})
	return c.diagnostics.getDiagnostics()
}

func (c *Checker) getGlobalDiagnostics() []Diagnostic {
	c.ensurePendingDiagnosticWorkComplete()
	return c.diagnostics.getGlobalDiagnostics()
}

// Language service support

func (c *Checker) getSymbolsInScope(location *ast.Node, meaning SymbolFlags) []*ast.Symbol {
	if location.Flags&ast.NodeFlagsInWithStatement != 0 {
		// We cannot answer semantic questions within a with block, do not proceed any further
		return []never{}
	}

	symbols := createSymbolTable()
	isStaticSymbol := false

	populateSymbols()

	symbols.delete(InternalSymbolNameThis)
	// Not a symbol, a keyword
	return c.symbolsToArray(symbols)

	populateSymbols := func() {
		for location {
			if canHaveLocals(location) && location.Locals != nil && !isGlobalSourceFile(location) {
				copySymbols(location.Locals, meaning)
			}

			switch location.Kind {
			case ast.KindSourceFile:
				if !isExternalModule(location.AsSourceFile()) {
					break
				}
				fallthrough
			case ast.KindModuleDeclaration:
				copyLocallyVisibleExportSymbols(c.getSymbolOfDeclaration(location /* as ModuleDeclaration | SourceFile */).Exports, meaning&ast.SymbolFlagsModuleMember)
			case ast.KindEnumDeclaration:
				copySymbols(c.getSymbolOfDeclaration(location.AsEnumDeclaration()).Exports, meaning&ast.SymbolFlagsEnumMember)
			case ast.KindClassExpression:
				className := location.AsClassExpression().Name
				if className != nil {
					copySymbol(location.AsClassExpression().Symbol, meaning)
				}

				// this fall-through is necessary because we would like to handle
				// type parameter inside class expression similar to how we handle it in classDeclaration and interface Declaration.
				fallthrough
			case ast.KindClassDeclaration,
				ast.KindInterfaceDeclaration:
				// If we didn't come from static member of class or interface,
				// add the type parameters into the symbol table
				// (type parameters of classDeclaration/classExpression and interface are in member property of the symbol.
				// Note: that the memberFlags come from previous iteration.
				if !isStaticSymbol {
					copySymbols(c.getMembersOfSymbol(c.getSymbolOfDeclaration(location /* as ClassDeclaration | InterfaceDeclaration */)), meaning&ast.SymbolFlagsType)
				}
			case ast.KindFunctionExpression:
				funcName := location.AsFunctionExpression().Name
				if funcName != nil {
					copySymbol(location.AsFunctionExpression().Symbol, meaning)
				}
			}

			if introducesArgumentsExoticObject(location) {
				copySymbol(c.argumentsSymbol, meaning)
			}

			isStaticSymbol = isStatic(location)
			location = location.Parent
		}

		copySymbols(c.globals, meaning)
	}

	/**
	 * Copy the given symbol into symbol tables if the symbol has the given meaning
	 * and it doesn't already existed in the symbol table
	 * @param key a key for storing in symbol table; if undefined, use symbol.name
	 * @param symbol the symbol to be added into symbol table
	 * @param meaning meaning of symbol to filter by before adding to symbol table
	 */

	copySymbol := func(symbol *ast.Symbol, meaning SymbolFlags) {
		if getCombinedLocalAndExportSymbolFlags(symbol)&meaning != 0 {
			id := symbol.EscapedName
			// We will copy all symbol regardless of its reserved name because
			// symbolsToArray will check whether the key is a reserved name and
			// it will not copy symbol with reserved name to the array
			if !symbols.has(id) {
				symbols.set(id, symbol)
			}
		}
	}

	copySymbols := func(source SymbolTable, meaning SymbolFlags) {
		if meaning != 0 {
			source.forEach(func(symbol *ast.Symbol) {
				copySymbol(symbol, meaning)
			})
		}
	}

	copyLocallyVisibleExportSymbols := func(source SymbolTable, meaning SymbolFlags) {
		if meaning != 0 {
			source.forEach(func(symbol *ast.Symbol) {
				// Similar condition as in `resolveNameHelper`
				if getDeclarationOfKind(symbol, ast.KindExportSpecifier) == nil && getDeclarationOfKind(symbol, ast.KindNamespaceExport) == nil && symbol.EscapedName != InternalSymbolNameDefault {
					copySymbol(symbol, meaning)
				}
			})
		}
	}

}

func (c *Checker) isTypeDeclarationName(name *ast.Node) bool {
	return name.Kind == ast.KindIdentifier && isTypeDeclaration(name.Parent) && getNameOfDeclaration(name.Parent) == name
}

// True if the given identifier is part of a type reference
func (c *Checker) isTypeReferenceIdentifier(node EntityName) bool {
	for node.Parent.Kind == ast.KindQualifiedName {
		node = node.Parent.AsQualifiedName()
	}

	return node.Parent.Kind == ast.KindTypeReference
}

func (c *Checker) isInNameOfExpressionWithTypeArguments(node *ast.Node) bool {
	for node.Parent.Kind == ast.KindPropertyAccessExpression {
		node = node.Parent
	}

	return node.Parent.Kind == ast.KindExpressionWithTypeArguments
}

func (c *Checker) forEachEnclosingClass(node *ast.Node, callback func(node ClassLikeDeclaration) *T) *T {
	var result *T
	containingClass := getContainingClass(node)
	for containingClass != nil {
		if /* TODO(TS-TO-GO) EqualsToken BinaryExpression: result = callback(containingClass) */ TODO != nil {
			break
		}
		containingClass = getContainingClass(containingClass)
	}

	return result
}

func (c *Checker) isNodeUsedDuringClassInitialization(node *ast.Node) bool {
	return findAncestor(node, func(element *ast.Node) /* TODO(TS-TO-GO) inferred type boolean | "quit" */ any {
		if isConstructorDeclaration(element) && nodeIsPresent(element.Body) || isPropertyDeclaration(element) {
			return true
		} else if isClassLike(element) || isFunctionLikeDeclaration(element) {
			return "quit"
		}

		return false
	}) != nil
}

func (c *Checker) isNodeWithinClass(node *ast.Node, classDeclaration ClassLikeDeclaration) bool {
	return c.forEachEnclosingClass(node, func(n ClassLikeDeclaration) bool {
		return n == classDeclaration
	})
}

func (c *Checker) getLeftSideOfImportEqualsOrExportAssignment(nodeOnRightSide EntityName) Union[ImportEqualsDeclaration, ExportAssignment, undefined] {
	for nodeOnRightSide.Parent.Kind == ast.KindQualifiedName {
		nodeOnRightSide = nodeOnRightSide.Parent.AsQualifiedName()
	}

	if nodeOnRightSide.Parent.Kind == ast.KindImportEqualsDeclaration {
		if nodeOnRightSide.Parent.AsImportEqualsDeclaration().ModuleReference == nodeOnRightSide {
			return nodeOnRightSide.Parent.AsImportEqualsDeclaration()
		} else {
			return nil
		}
	}

	if nodeOnRightSide.Parent.Kind == ast.KindExportAssignment {
		if nodeOnRightSide.Parent.AsExportAssignment().Expression == nodeOnRightSide.AsNode() {
			return nodeOnRightSide.Parent.AsExportAssignment()
		} else {
			return nil
		}
	}

	return nil
}

func (c *Checker) isInRightSideOfImportOrExportAssignment(node EntityName) bool {
	return c.getLeftSideOfImportEqualsOrExportAssignment(node) != nil
}

func (c *Checker) getSpecialPropertyAssignmentSymbolFromEntityName(entityName Union[EntityName, PropertyAccessExpression]) *ast.Symbol {
	specialPropertyAssignmentKind := getAssignmentDeclarationKind(entityName.Parent.Parent.AsBinaryExpression())
	switch specialPropertyAssignmentKind {
	case AssignmentDeclarationKindExportsProperty,
		AssignmentDeclarationKindPrototypeProperty:
		return c.getSymbolOfNode(entityName.Parent)
	case AssignmentDeclarationKindProperty:
		if isPropertyAccessExpression(entityName.Parent) && getLeftmostAccessExpression(entityName.Parent) == entityName {
			return nil
		}
		fallthrough
	case AssignmentDeclarationKindThisProperty,
		AssignmentDeclarationKindModuleExports:
		return c.getSymbolOfDeclaration(entityName.Parent.Parent.AsBinaryExpression())
	}
}

func (c *Checker) isImportTypeQualifierPart(node EntityName) *ImportTypeNode {
	parent := node.Parent
	for isQualifiedName(parent) {
		node = parent
		parent = parent.Parent
	}
	if parent && parent.Kind == ast.KindImportType && parent.AsImportTypeNode().Qualifier == node {
		return parent.AsImportTypeNode()
	}
	return nil
}

func (c *Checker) isThisPropertyAndThisTyped(node PropertyAccessExpression) *bool {
	if node.Expression.Kind == ast.KindThisKeyword {
		container := getThisContainer(node, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)
		if isFunctionLike(container) {
			containingLiteral := c.getContainingObjectLiteral(container)
			if containingLiteral != nil {
				contextualType := c.getApparentTypeOfContextualType(containingLiteral, nil /*contextFlags*/)
				t := c.getThisTypeOfObjectLiteralFromContextualType(containingLiteral, contextualType)
				return t && !c.isTypeAny(t)
			}
		}
	}
}

func (c *Checker) getSymbolOfNameOrPropertyAccessExpression(name Union[EntityName, PrivateIdentifier, PropertyAccessExpression, JSDocMemberName]) *ast.Symbol {
	if isDeclarationName(name) {
		return c.getSymbolOfNode(name.Parent)
	}

	if isInJSFile(name) && name.Parent.Kind == ast.KindPropertyAccessExpression && name.Parent == name.Parent.Parent.AsBinaryExpression().Left {
		// Check if this is a special property assignment
		if !isPrivateIdentifier(name) && !isJSDocMemberName(name) && !c.isThisPropertyAndThisTyped(name.Parent.AsPropertyAccessExpression()) {
			specialPropertyAssignmentSymbol := c.getSpecialPropertyAssignmentSymbolFromEntityName(name)
			if specialPropertyAssignmentSymbol != nil {
				return specialPropertyAssignmentSymbol
			}
		}
	}

	if name.Parent.Kind == ast.KindExportAssignment && isEntityNameExpression(name) {
		// Even an entity name expression that doesn't resolve as an entityname may still typecheck as a property access expression
		success := c.resolveEntityName(name, ast.SymbolFlagsValue|ast.SymbolFlagsType|ast.SymbolFlagsNamespace|ast.SymbolFlagsAlias /*all meanings*/, true /*ignoreErrors*/)
		if success != nil && success != c.unknownSymbol {
			return success
		}
	} else if isEntityName(name) && c.isInRightSideOfImportOrExportAssignment(name) {
		// Since we already checked for ExportAssignment, this really could only be an Import
		importEqualsDeclaration := getAncestor(name, ast.KindImportEqualsDeclaration)
		Debug.assert(importEqualsDeclaration != nil)
		return c.getSymbolOfPartOfRightHandSideOfImportEquals(name, true /*dontResolveAlias*/)
	}

	if isEntityName(name) {
		possibleImportNode := c.isImportTypeQualifierPart(name)
		if possibleImportNode != nil {
			c.getTypeFromTypeNode(possibleImportNode)
			sym := c.getNodeLinks(name).resolvedSymbol
			if sym == c.unknownSymbol {
				return nil
			} else {
				return sym
			}
		}
	}

	for isRightSideOfQualifiedNameOrPropertyAccessOrJSDocMemberName(name) {
		name = name.Parent /* as QualifiedName | PropertyAccessEntityNameExpression | JSDocMemberName */
	}

	if c.isInNameOfExpressionWithTypeArguments(name) {
		meaning := ast.SymbolFlagsNone
		if name.Parent.Kind == ast.KindExpressionWithTypeArguments {
			// An 'ExpressionWithTypeArguments' may appear in type space (interface Foo extends Bar<T>),
			// value space (return foo<T>), or both(class Foo extends Bar<T>); ensure the meaning matches.
			if isPartOfTypeNode(name) {
				meaning = ast.SymbolFlagsType
			} else {
				meaning = ast.SymbolFlagsValue
			}

			// In a class 'extends' clause we are also looking for a value.
			if isExpressionWithTypeArgumentsInClassExtendsClause(name.Parent) {
				meaning |= ast.SymbolFlagsValue
			}
		} else {
			meaning = ast.SymbolFlagsNamespace
		}

		meaning |= ast.SymbolFlagsAlias
		var entityNameSymbol *ast.Symbol
		if isEntityNameExpression(name) {
			entityNameSymbol = c.resolveEntityName(name, meaning, true /*ignoreErrors*/)
		} else {
			entityNameSymbol = nil
		}
		if entityNameSymbol != nil {
			return entityNameSymbol
		}
	}

	if name.Parent.Kind == ast.KindJSDocParameterTag {
		return getParameterSymbolFromJSDoc(name.Parent.AsJSDocParameterTag())
	}

	if name.Parent.Kind == ast.KindTypeParameter && name.Parent.Parent.Kind == ast.KindJSDocTemplateTag {
		Debug.assert(!isInJSFile(name))
		// Otherwise `isDeclarationName` would have been true.
		typeParameter := getTypeParameterFromJsDoc(name.Parent /* as TypeParameterDeclaration & { parent: JSDocTemplateTag; } */)
		return typeParameter && typeParameter.Symbol
	}

	if isExpressionNode(name) {
		if nodeIsMissing(name) {
			// Missing entity name.
			return nil
		}

		isJSDoc := findAncestor(name, or(isJSDocLinkLike, isJSDocNameReference, isJSDocMemberName))
		var meaning number
		if isJSDoc != nil {
			meaning = ast.SymbolFlagsType | ast.SymbolFlagsNamespace | ast.SymbolFlagsValue
		} else {
			meaning = ast.SymbolFlagsValue
		}
		if name.Kind == ast.KindIdentifier {
			if isJSXTagName(name) && c.isJsxIntrinsicTagName(name) {
				symbol := c.getIntrinsicTagSymbol(name.Parent.AsJsxOpeningLikeElement())
				if symbol == c.unknownSymbol {
					return nil
				} else {
					return symbol
				}
			}
			result := c.resolveEntityName(name, meaning, true /*ignoreErrors*/, true /*dontResolveAlias*/, getHostSignatureFromJSDoc(name))
			if result == nil && isJSDoc != nil {
				container := findAncestor(name, or(isClassLike, isInterfaceDeclaration))
				if container != nil {
					return c.resolveJSDocMemberName(name, true /*ignoreErrors*/, c.getSymbolOfDeclaration(container))
				}
			}
			if result != nil && isJSDoc != nil {
				container := getJSDocHost(name)
				if container != nil && isEnumMember(container) && container == result.ValueDeclaration {
					return c.resolveEntityName(name, meaning, true /*ignoreErrors*/, true /*dontResolveAlias*/, getSourceFileOfNode(container)) || result
				}
			}
			return result
		} else if isPrivateIdentifier(name) {
			return c.getSymbolForPrivateIdentifierExpression(name)
		} else if name.Kind == ast.KindPropertyAccessExpression || name.Kind == ast.KindQualifiedName {
			links := c.getNodeLinks(name)
			if links.resolvedSymbol != nil {
				return links.resolvedSymbol
			}

			if name.Kind == ast.KindPropertyAccessExpression {
				c.checkPropertyAccessExpression(name, CheckModeNormal)
				if !links.resolvedSymbol {
					links.resolvedSymbol = c.getApplicableIndexSymbol(c.checkExpressionCached(name.Expression), c.getLiteralTypeFromPropertyName(name.Name))
				}
			} else {
				c.checkQualifiedName(name, CheckModeNormal)
			}
			if links.resolvedSymbol == nil && isJSDoc != nil && isQualifiedName(name) {
				return c.resolveJSDocMemberName(name)
			}
			return links.resolvedSymbol
		} else if isJSDocMemberName(name) {
			return c.resolveJSDocMemberName(name)
		}
	} else if isEntityName(name) && c.isTypeReferenceIdentifier(name) {
		var meaning /* TODO(TS-TO-GO) inferred type SymbolFlags.Type | SymbolFlags.Namespace */ any
		if name.Parent.Kind == ast.KindTypeReference {
			meaning = ast.SymbolFlagsType
		} else {
			meaning = ast.SymbolFlagsNamespace
		}
		symbol := c.resolveEntityName(name, meaning, false /*ignoreErrors*/, true /*dontResolveAlias*/)
		if symbol != nil && symbol != c.unknownSymbol {
			return symbol
		} else {
			return c.getUnresolvedSymbolForEntityName(name)
		}
	}
	if name.Parent.Kind == ast.KindTypePredicate {
		return c.resolveEntityName(name.AsIdentifier(), ast.SymbolFlagsFunctionScopedVariable /*meaning*/)
	}
	return nil
}

func (c *Checker) getApplicableIndexSymbol(t *Type, keyType *Type) *ast.Symbol {
	infos := c.getApplicableIndexInfos(t, keyType)
	if infos.length != 0 && t.AsObjectType().members != nil {
		symbol := c.getIndexSymbolFromSymbolTable(c.resolveStructuredTypeMembers(t.AsObjectType()).members)
		if infos == c.getIndexInfosOfType(t) {
			return symbol
		} else if symbol != nil {
			symbolLinks := c.getSymbolLinks(symbol)
			declarationList := mapDefined(infos, func(i IndexInfo) *IndexSignatureDeclaration {
				return i.declaration
			})
			nodeListId := core.Map(declarationList, getNodeId).join(",")
			if symbolLinks.filteredIndexSymbolCache == nil {
				symbolLinks.filteredIndexSymbolCache = NewMap()
			}
			if symbolLinks.filteredIndexSymbolCache.has(nodeListId) {
				return symbolLinks.filteredIndexSymbolCache.get(nodeListId)
			} else {
				copy := c.createSymbol(ast.SymbolFlagsSignature, InternalSymbolNameIndex)
				copy.Declarations = mapDefined(infos, func(i IndexInfo) *IndexSignatureDeclaration {
					return i.declaration
				})
				switch {
				case t.aliasSymbol != nil:
					copy.Parent = t.aliasSymbol
				case t.symbol:
					copy.Parent = t.symbol
				default:
					copy.Parent = c.getSymbolAtLocation(copy.Declarations[0].Parent)
				}
				symbolLinks.filteredIndexSymbolCache.set(nodeListId, copy)
				return copy
			}
		}
	}
}

/**
 * Recursively resolve entity names and jsdoc instance references:
 * 1. K#m as K.prototype.m for a class (or other value) K
 * 2. K.m as K.prototype.m
 * 3. I.m as I.m for a type I, or any other I.m that fails to resolve in (1) or (2)
 *
 * For unqualified names, a container K may be provided as a second argument.
 */

func (c *Checker) resolveJSDocMemberName(name Union[EntityName, JSDocMemberName], ignoreErrors bool, container *ast.Symbol) *ast.Symbol {
	if isEntityName(name) {
		// resolve static values first
		meaning := ast.SymbolFlagsType | ast.SymbolFlagsNamespace | ast.SymbolFlagsValue
		symbol := c.resolveEntityName(name, meaning, ignoreErrors, true /*dontResolveAlias*/, getHostSignatureFromJSDoc(name))
		if symbol == nil && isIdentifier(name) && container != nil {
			symbol = c.getMergedSymbol(c.getSymbol(c.getExportsOfSymbol(container), name.EscapedText, meaning))
		}
		if symbol != nil {
			return symbol
		}
	}
	var left *ast.Symbol
	if isIdentifier(name) {
		left = container
	} else {
		left = c.resolveJSDocMemberName(name.Left, ignoreErrors, container)
	}
	var right string
	if isIdentifier(name) {
		right = name.EscapedText
	} else {
		right = name.Right.EscapedText
	}
	if left != nil {
		proto := left.Flags&ast.SymbolFlagsValue && c.getPropertyOfType(c.getTypeOfSymbol(left), "prototype" /* as __String */)
		var t *Type
		if proto {
			t = c.getTypeOfSymbol(proto)
		} else {
			t = c.getDeclaredTypeOfSymbol(left)
		}
		return c.getPropertyOfType(t, right)
	}
}

func (c *Checker) getSymbolAtLocation(node *ast.Node, ignoreErrors bool) *ast.Symbol {
	if isSourceFile(node) {
		if isExternalModule(node) {
			return c.getMergedSymbol(node.Symbol)
		} else {
			return nil
		}
	}
	TODO_IDENTIFIER := node
	grandParent := parent.Parent

	if node.Flags&ast.NodeFlagsInWithStatement != 0 {
		// We cannot answer semantic questions within a with block, do not proceed any further
		return nil
	}

	if isDeclarationNameOrImportPropertyName(node) {
		// This is a declaration, call getSymbolOfNode
		parentSymbol := c.getSymbolOfDeclaration(parent.AsDeclaration())
		if isImportOrExportSpecifier(node.Parent) && node.Parent.PropertyName == node {
			return c.getImmediateAliasedSymbol(parentSymbol)
		} else {
			return parentSymbol
		}
	} else if isLiteralComputedPropertyDeclarationName(node) {
		return c.getSymbolOfDeclaration(parent.Parent.AsDeclaration())
	}

	if node.Kind == ast.KindIdentifier {
		if c.isInRightSideOfImportOrExportAssignment(node.AsIdentifier()) {
			return c.getSymbolOfNameOrPropertyAccessExpression(node.AsIdentifier())
		} else if parent.Kind == ast.KindBindingElement && grandParent.Kind == ast.KindObjectBindingPattern && node == parent.AsBindingElement().PropertyName {
			typeOfPattern := c.getTypeOfNode(grandParent)
			propertyDeclaration := c.getPropertyOfType(typeOfPattern, node.AsIdentifier().EscapedText)

			if propertyDeclaration != nil {
				return propertyDeclaration
			}
		} else if isMetaProperty(parent) && parent.Name == node {
			if parent.KeywordToken == ast.KindNewKeyword && idText(node.AsIdentifier()) == "target" {
				// `target` in `new.target`
				return c.checkNewTargetMetaProperty(parent).symbol
			}
			// The `meta` in `import.meta` could be given `getTypeOfNode(parent).symbol` (the `ImportMeta` interface symbol), but
			// we have a fake expression type made for other reasons already, whose transient `meta`
			// member should more exactly be the kind of (declarationless) symbol we want.
			// (See #44364 and #45031 for relevant implementation PRs)
			if parent.KeywordToken == ast.KindImportKeyword && idText(node.AsIdentifier()) == "meta" {
				return c.getGlobalImportMetaExpressionType().members.get("meta" /* as __String */)
			}
			// no other meta properties are valid syntax, thus no others should have symbols
			return nil
		}
	}

	switch node.Kind {
	case ast.KindIdentifier,
		ast.KindPrivateIdentifier,
		ast.KindPropertyAccessExpression,
		ast.KindQualifiedName:
		if !isThisInTypeQuery(node) {
			return c.getSymbolOfNameOrPropertyAccessExpression(node /* as EntityName | PrivateIdentifier | PropertyAccessExpression */)
		}
		fallthrough
	case ast.KindThisKeyword:
		container := getThisContainer(node, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)
		if isFunctionLike(container) {
			sig := c.getSignatureFromDeclaration(container)
			if sig.thisParameter != nil {
				return sig.thisParameter
			}
		}
		if isInExpressionContext(node) {
			return c.checkExpression(node.AsExpression()).symbol
		}
		fallthrough
	case ast.KindThisType:
		return c.getTypeFromThisTypeNode(node /* as ThisExpression | ThisTypeNode */).symbol
	case ast.KindSuperKeyword:
		return c.checkExpression(node.AsExpression()).symbol
	case ast.KindConstructorKeyword:
		// constructor keyword for an overload, should take us to the definition if it exist
		constructorDeclaration := node.Parent
		if constructorDeclaration && constructorDeclaration.Kind == ast.KindConstructor {
			return constructorDeclaration.Parent.AsClassDeclaration().Symbol
		}
		return nil
	case ast.KindStringLiteral,
		ast.KindNoSubstitutionTemplateLiteral:
		// 1). import x = require("./mo/*gotToDefinitionHere*/d")
		// 2). External module name in an import declaration
		// 3). Dynamic import call or require in javascript
		// 4). type A = import("./f/*gotToDefinitionHere*/oo")
		if (isExternalModuleImportEqualsDeclaration(node.Parent.Parent) && getExternalModuleImportEqualsDeclarationExpression(node.Parent.Parent) == node) || ((node.Parent.Kind == ast.KindImportDeclaration || node.Parent.Kind == ast.KindExportDeclaration) && node.Parent.AsImportDeclaration().ModuleSpecifier == node) || (isInJSFile(node) && isJSDocImportTag(node.Parent) && node.Parent.ModuleSpecifier == node) || ((isInJSFile(node) && isRequireCall(node.Parent, false /*requireStringLiteralLikeArgument*/)) || isImportCall(node.Parent)) || (isLiteralTypeNode(node.Parent) && isLiteralImportTypeNode(node.Parent.Parent) && node.Parent.Parent.Argument == node.Parent) {
			return c.resolveExternalModuleName(node, node.AsLiteralExpression(), ignoreErrors)
		}
		if isCallExpression(parent) && isBindableObjectDefinePropertyCall(parent) && parent.Arguments[1] == node {
			return c.getSymbolOfDeclaration(parent)
		}
		fallthrough
	case ast.KindNumericLiteral:
		// index access
		var objectType *Type
		switch {
		case isElementAccessExpression(parent):
			if parent.ArgumentExpression == node {
				objectType = c.getTypeOfExpression(parent.Expression)
			} else {
				objectType = nil
			}
		case isLiteralTypeNode(parent) && isIndexedAccessTypeNode(grandParent):
			objectType = c.getTypeFromTypeNode(grandParent.ObjectType)
		default:
			objectType = nil
		}
		return objectType && c.getPropertyOfType(objectType, escapeLeadingUnderscores((node /* as StringLiteral | NumericLiteral */).Text))
	case ast.KindDefaultKeyword,
		ast.KindFunctionKeyword,
		ast.KindEqualsGreaterThanToken,
		ast.KindClassKeyword:
		return c.getSymbolOfNode(node.Parent)
	case ast.KindImportType:
		if isLiteralImportTypeNode(node) {
			return c.getSymbolAtLocation(node.Argument.Literal, ignoreErrors)
		} else {
			return nil
		}
	case ast.KindExportKeyword:
		if isExportAssignment(node.Parent) {
			return Debug.checkDefined(node.Parent.Symbol)
		} else {
			return nil
		}
	case ast.KindImportKeyword,
		ast.KindNewKeyword:
		if isMetaProperty(node.Parent) {
			return c.checkMetaPropertyKeyword(node.Parent).symbol
		} else {
			return nil
		}
	case ast.KindInstanceOfKeyword:
		if isBinaryExpression(node.Parent) {
			t := c.getTypeOfExpression(node.Parent.Right)
			hasInstanceMethodType := c.getSymbolHasInstanceMethodOfObjectType(t)
			return ifNotNilElse(hasInstanceMethodType. /* ? */ symbol, t.symbol)
		}
		return nil
	case ast.KindMetaProperty:
		return c.checkExpression(node.AsExpression()).symbol
	case ast.KindJsxNamespacedName:
		if isJSXTagName(node) && c.isJsxIntrinsicTagName(node) {
			symbol := c.getIntrinsicTagSymbol(node.Parent.AsJsxOpeningLikeElement())
			if symbol == c.unknownSymbol {
				return nil
			} else {
				return symbol
			}
		}
		fallthrough
	default:
		return nil
	}
}

func (c *Checker) getIndexInfosAtLocation(node *ast.Node) *[]IndexInfo {
	if isIdentifier(node) && isPropertyAccessExpression(node.Parent) && node.Parent.Name == node {
		keyType := c.getLiteralTypeFromPropertyName(node)
		objectType := c.getTypeOfExpression(node.Parent.Expression)
		var objectTypes []*Type
		if objectType.flags&TypeFlagsUnion != 0 {
			objectTypes = objectType.AsUnionType().types
		} else {
			objectTypes = []*Type{objectType}
		}
		return flatMap(objectTypes, func(t *Type) []IndexInfo {
			return core.Filter(c.getIndexInfosOfType(t), func(info IndexInfo) bool {
				return c.isApplicableIndexType(keyType, info.keyType)
			})
		})
	}
	return nil
}

func (c *Checker) getShorthandAssignmentValueSymbol(location *ast.Node) *ast.Symbol {
	if location != nil && location.Kind == ast.KindShorthandPropertyAssignment {
		return c.resolveEntityName(location.AsShorthandPropertyAssignment().Name, ast.SymbolFlagsValue|ast.SymbolFlagsAlias)
	}
	return nil
}

/** Returns the target of an export specifier without following aliases */

func (c *Checker) getExportSpecifierLocalTargetSymbol(node Union[ExportSpecifier, Identifier]) *ast.Symbol {
	if isExportSpecifier(node) {
		name := node.PropertyName || node.Name
		switch {
		case node.Parent.Parent.ModuleSpecifier != nil:
			return c.getExternalModuleMember(node.Parent.Parent, node)
		case name.Kind == ast.KindStringLiteral:
			return nil
		default:
			return c.resolveEntityName(name, ast.SymbolFlagsValue|ast.SymbolFlagsType|ast.SymbolFlagsNamespace|ast.SymbolFlagsAlias)
		}
	} else {
		return c.resolveEntityName(node, ast.SymbolFlagsValue|ast.SymbolFlagsType|ast.SymbolFlagsNamespace|ast.SymbolFlagsAlias)
	}
}

func (c *Checker) getTypeOfNode(node *ast.Node) *Type {
	if isSourceFile(node) && !isExternalModule(node) {
		return c.errorType
	}

	if node.Flags&ast.NodeFlagsInWithStatement != 0 {
		// We cannot answer semantic questions within a with block, do not proceed any further
		return c.errorType
	}

	classDecl := tryGetClassImplementingOrExtendingExpressionWithTypeArguments(node)
	classType := classDecl && c.getDeclaredTypeOfClassOrInterface(c.getSymbolOfDeclaration(classDecl.class))
	if isPartOfTypeNode(node) {
		typeFromTypeNode := c.getTypeFromTypeNode(node.AsTypeNode())
		if classType != nil {
			return c.getTypeWithThisArgument(typeFromTypeNode, classType.thisType)
		} else {
			return typeFromTypeNode
		}
	}

	if isExpressionNode(node) {
		return c.getRegularTypeOfExpression(node.AsExpression())
	}

	if classType != nil && !classDecl.isImplements {
		// A SyntaxKind.ExpressionWithTypeArguments is considered a type node, except when it occurs in the
		// extends clause of a class. We handle that case here.
		baseType := firstOrUndefined(c.getBaseTypes(classType))
		if baseType != nil {
			return c.getTypeWithThisArgument(baseType, classType.thisType)
		} else {
			return c.errorType
		}
	}

	if isTypeDeclaration(node) {
		// In this case, we call getSymbolOfNode instead of getSymbolAtLocation because it is a declaration
		symbol := c.getSymbolOfDeclaration(node)
		return c.getDeclaredTypeOfSymbol(symbol)
	}

	if c.isTypeDeclarationName(node) {
		symbol := c.getSymbolAtLocation(node)
		if symbol != nil {
			return c.getDeclaredTypeOfSymbol(symbol)
		} else {
			return c.errorType
		}
	}

	if isBindingElement(node) {
		return c.getTypeForVariableLikeDeclaration(node, true /*includeOptionality*/, CheckModeNormal) || c.errorType
	}

	if isDeclaration(node) {
		// In this case, we call getSymbolOfNode instead of getSymbolAtLocation because it is a declaration
		symbol := c.getSymbolOfDeclaration(node)
		if symbol {
			return c.getTypeOfSymbol(symbol)
		} else {
			return c.errorType
		}
	}

	if isDeclarationNameOrImportPropertyName(node) {
		symbol := c.getSymbolAtLocation(node)
		if symbol != nil {
			return c.getTypeOfSymbol(symbol)
		}
		return c.errorType
	}

	if isBindingPattern(node) {
		return c.getTypeForVariableLikeDeclaration(node.Parent, true /*includeOptionality*/, CheckModeNormal) || c.errorType
	}

	if c.isInRightSideOfImportOrExportAssignment(node.AsIdentifier()) {
		symbol := c.getSymbolAtLocation(node)
		if symbol != nil {
			declaredType := c.getDeclaredTypeOfSymbol(symbol)
			if !c.isErrorType(declaredType) {
				return declaredType
			} else {
				return c.getTypeOfSymbol(symbol)
			}
		}
	}

	if isMetaProperty(node.Parent) && node.Parent.KeywordToken == node.Kind {
		return c.checkMetaPropertyKeyword(node.Parent)
	}

	if isImportAttributes(node) {
		return c.getGlobalImportAttributesType(false)
	}

	return c.errorType
}

// Gets the type of object literal or array literal of destructuring assignment.
// { a } from
//
//	for ( { a } of elems) {
//	}
//
// [ a ] from
//
//	[a] = [ some array ...]
func (c *Checker) getTypeOfAssignmentPattern(expr AssignmentPattern) *Type {
	Debug.assert(expr.Kind == ast.KindObjectLiteralExpression || expr.Kind == ast.KindArrayLiteralExpression)
	// If this is from "for of"
	//     for ( { a } of elems) {
	//     }
	if expr.Parent.Kind == ast.KindForOfStatement {
		iteratedType := c.checkRightHandSideOfForOf(expr.Parent.AsForOfStatement())
		return c.checkDestructuringAssignment(expr, iteratedType || c.errorType)
	}
	// If this is from "for" initializer
	//     for ({a } = elems[0];.....) { }
	if expr.Parent.Kind == ast.KindBinaryExpression {
		iteratedType := c.getTypeOfExpression(expr.Parent.AsBinaryExpression().Right)
		return c.checkDestructuringAssignment(expr, iteratedType || c.errorType)
	}
	// If this is from nested object binding pattern
	//     for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
	if expr.Parent.Kind == ast.KindPropertyAssignment {
		node := cast(expr.Parent.Parent, isObjectLiteralExpression)
		typeOfParentObjectLiteral := c.getTypeOfAssignmentPattern(node) || c.errorType
		propertyIndex := indexOfNode(node.Properties, expr.Parent)
		return c.checkObjectLiteralDestructuringPropertyAssignment(node, typeOfParentObjectLiteral, propertyIndex)
	}
	// Array literal assignment - array destructuring pattern
	node := cast(expr.Parent, isArrayLiteralExpression)
	//    [{ property1: p1, property2 }] = elems;
	typeOfArrayLiteral := c.getTypeOfAssignmentPattern(node) || c.errorType
	elementType := c.checkIteratedTypeOrElementType(IterationUseDestructuring, typeOfArrayLiteral, c.undefinedType, expr.Parent) || c.errorType
	return c.checkArrayLiteralDestructuringElementAssignment(node, typeOfArrayLiteral, node.Elements.indexOf(expr), elementType)
}

// Gets the property symbol corresponding to the property in destructuring assignment
// 'property1' from
//
//	for ( { property1: a } of elems) {
//	}
//
// 'property1' at location 'a' from:
//
//	[a] = [ property1, property2 ]
func (c *Checker) getPropertySymbolOfDestructuringAssignment(location Identifier) *ast.Symbol {
	// Get the type of the object or array literal and then look for property of given name in the type
	typeOfObjectLiteral := c.getTypeOfAssignmentPattern(cast(location.Parent.Parent, isAssignmentPattern))
	return typeOfObjectLiteral && c.getPropertyOfType(typeOfObjectLiteral, location.EscapedText)
}

func (c *Checker) getRegularTypeOfExpression(expr Expression) *Type {
	if isRightSideOfQualifiedNameOrPropertyAccess(expr) {
		expr = expr.Parent.AsExpression()
	}
	return c.getRegularTypeOfLiteralType(c.getTypeOfExpression(expr))
}

/**
 * Gets either the static or instance type of a class element, based on
 * whether the element is declared as "static".
 */

func (c *Checker) getParentTypeOfClassElement(node ClassElement) *Type {
	classSymbol := c.getSymbolOfNode(node.Parent)
	if isStatic(node) {
		return c.getTypeOfSymbol(classSymbol)
	} else {
		return c.getDeclaredTypeOfSymbol(classSymbol)
	}
}

func (c *Checker) getClassElementPropertyKeyType(element ClassElement) *Type {
	name := element.Name
	switch name.Kind {
	case ast.KindIdentifier:
		return c.getStringLiteralType(idText(name))
	case ast.KindNumericLiteral,
		ast.KindStringLiteral:
		return c.getStringLiteralType(name.Text)
	case ast.KindComputedPropertyName:
		nameType := c.checkComputedPropertyName(name)
		if c.isTypeAssignableToKind(nameType, TypeFlagsESSymbolLike) {
			return nameType
		} else {
			return c.stringType
		}
	default:
		return Debug.fail("Unsupported property name.")
	}
}

// Return the list of properties of the given type, augmented with properties from Function
// if the type has call or construct signatures
func (c *Checker) getAugmentedPropertiesOfType(t *Type) []*ast.Symbol {
	t = c.getApparentType(t)
	propsByName := createSymbolTable(c.getPropertiesOfType(t))
	var functionType *ObjectType
	switch {
	case c.getSignaturesOfType(t, SignatureKindCall).length != 0:
		functionType = c.globalCallableFunctionType
	case c.getSignaturesOfType(t, SignatureKindConstruct).length != 0:
		functionType = c.globalNewableFunctionType
	default:
		functionType = nil
	}
	if functionType != nil {
		forEach(c.getPropertiesOfType(functionType), func(p *ast.Symbol) {
			if !propsByName.has(p.EscapedName) {
				propsByName.set(p.EscapedName, p)
			}
		})
	}
	return c.getNamedMembers(propsByName)
}

func (c *Checker) typeHasCallOrConstructSignatures(t *Type) bool {
	return c.getSignaturesOfType(t, SignatureKindCall).length != 0 || c.getSignaturesOfType(t, SignatureKindConstruct).length != 0
}

func (c *Checker) getRootSymbols(symbol *ast.Symbol) []*ast.Symbol {
	roots := c.getImmediateRootSymbols(symbol)
	if roots != nil {
		return flatMap(roots, c.getRootSymbols)
	} else {
		return []*ast.Symbol{symbol}
	}
}

func (c *Checker) getImmediateRootSymbols(symbol *ast.Symbol) *[]*ast.Symbol {
	if getCheckFlags(symbol)&ast.CheckFlagsSynthetic != 0 {
		return mapDefined(c.getSymbolLinks(symbol).containingType.types, func(t *Type) *ast.Symbol {
			return c.getPropertyOfType(t, symbol.EscapedName)
		})
	} else if symbol.Flags&ast.SymbolFlagsTransient != 0 {
		TODO_IDENTIFIER := symbol.(TransientSymbol)
		switch {
		case leftSpread != nil:
			return []*ast.Symbol{leftSpread, rightSpread}
		case syntheticOrigin != nil:
			return []*ast.Symbol{syntheticOrigin}
		default:
			return singleElementArray(c.tryGetTarget(symbol))
		}
	}
	return nil
}

func (c *Checker) tryGetTarget(symbol *ast.Symbol) *ast.Symbol {
	var target *ast.Symbol
	var next *ast.Symbol = symbol
	for /* TODO(TS-TO-GO) EqualsToken BinaryExpression: next = getSymbolLinks(next).target */ TODO != nil {
		target = next
	}
	return target
}

// Emitter support

func (c *Checker) isArgumentsLocalBinding(nodeIn Identifier) bool {
	// Note: does not handle isShorthandPropertyAssignment (and probably a few more)
	if isGeneratedIdentifier(nodeIn) {
		return false
	}
	node := getParseTreeNode(nodeIn, isIdentifier)
	if node == nil {
		return false
	}
	parent := node.Parent
	if !parent {
		return false
	}
	isPropertyName := (isPropertyAccessExpression(parent) || isPropertyAssignment(parent)) && parent.Name == node
	return !isPropertyName && c.getReferencedValueSymbol(node) == c.argumentsSymbol
}

func (c *Checker) isNameOfModuleOrEnumDeclaration(node Identifier) bool {
	return isModuleOrEnumDeclaration(node.Parent) && node == node.Parent.Name
}

// When resolved as an expression identifier, if the given node references an exported entity, return the declaration
// node of the exported entity's container. Otherwise, return undefined.
func (c *Checker) getReferencedExportContainer(nodeIn Identifier, prefixLocals bool) Union[SourceFile, ModuleDeclaration, EnumDeclaration, undefined] {
	node := getParseTreeNode(nodeIn, isIdentifier)
	if node != nil {
		// When resolving the export container for the name of a module or enum
		// declaration, we need to start resolution at the declaration's container.
		// Otherwise, we could incorrectly resolve the export container as the
		// declaration if it contains an exported member with the same name.
		symbol := c.getReferencedValueSymbol(node, c.isNameOfModuleOrEnumDeclaration(node) /*startInDeclarationContainer*/)
		if symbol != nil {
			if symbol.Flags&ast.SymbolFlagsExportValue != 0 {
				// If we reference an exported entity within the same module declaration, then whether
				// we prefix depends on the kind of entity. SymbolFlags.ExportHasLocal encompasses all the
				// kinds that we do NOT prefix.
				exportSymbol := c.getMergedSymbol(symbol.ExportSymbol)
				if !prefixLocals && exportSymbol.Flags&ast.SymbolFlagsExportHasLocal != 0 && exportSymbol.Flags&ast.SymbolFlagsVariable == 0 {
					return nil
				}
				symbol = exportSymbol
			}
			parentSymbol := c.getParentOfSymbol(symbol)
			if parentSymbol != nil {
				if parentSymbol.Flags&ast.SymbolFlagsValueModule != 0 && parentSymbol.ValueDeclaration. /* ? */ kind == ast.KindSourceFile {
					symbolFile := parentSymbol.ValueDeclaration.AsSourceFile()
					referenceFile := getSourceFileOfNode(node)
					// If `node` accesses an export and that export isn't in the same file, then symbol is a namespace export, so return undefined.
					symbolIsUmdExport := symbolFile != referenceFile
					if symbolIsUmdExport {
						return nil
					} else {
						return symbolFile
					}
				}
				return findAncestor(node.Parent, func(n *ast.Node) bool {
					return isModuleOrEnumDeclaration(n) && c.getSymbolOfDeclaration(n) == parentSymbol
				})
			}
		}
	}
}

// When resolved as an expression identifier, if the given node references an import, return the declaration of
// that import. Otherwise, return undefined.
func (c *Checker) getReferencedImportDeclaration(nodeIn Identifier) Declaration {
	specifier := getIdentifierGeneratedImportReference(nodeIn)
	if specifier != nil {
		return specifier
	}
	node := getParseTreeNode(nodeIn, isIdentifier)
	if node != nil {
		symbol := c.getReferencedValueOrAliasSymbol(node)

		// We should only get the declaration of an alias if there isn't a local value
		// declaration for the symbol
		if c.isNonLocalAlias(symbol, ast.SymbolFlagsValue /*excludes*/) && c.getTypeOnlyAliasDeclaration(symbol, ast.SymbolFlagsValue) == nil {
			return c.getDeclarationOfAliasSymbol(symbol)
		}
	}

	return nil
}

func (c *Checker) isSymbolOfDestructuredElementOfCatchBinding(symbol *ast.Symbol) *bool {
	return symbol.ValueDeclaration && isBindingElement(symbol.ValueDeclaration) && walkUpBindingElementsAndPatterns(symbol.ValueDeclaration).Parent.Kind == ast.KindCatchClause
}

func (c *Checker) isSymbolOfDeclarationWithCollidingName(symbol *ast.Symbol) bool {
	if symbol.Flags&ast.SymbolFlagsBlockScoped != 0 && symbol.ValueDeclaration != nil && !isSourceFile(symbol.ValueDeclaration) {
		links := c.getSymbolLinks(symbol)
		if links.isDeclarationWithCollidingName == nil {
			container := getEnclosingBlockScopeContainer(symbol.ValueDeclaration)
			if isStatementWithLocals(container) || c.isSymbolOfDestructuredElementOfCatchBinding(symbol) {
				if c.resolveName(container.Parent, symbol.EscapedName, ast.SymbolFlagsValue, nil /*nameNotFoundMessage*/, false /*isUse*/) != nil {
					// redeclaration - always should be renamed
					links.isDeclarationWithCollidingName = true
				} else if c.hasNodeCheckFlag(symbol.ValueDeclaration, NodeCheckFlagsCapturedBlockScopedBinding) {
					// binding is captured in the function
					// should be renamed if:
					// - binding is not top level - top level bindings never collide with anything
					// AND
					//   - binding is not declared in loop, should be renamed to avoid name reuse across siblings
					//     let a, b
					//     { let x = 1; a = () => x; }
					//     { let x = 100; b = () => x; }
					//     console.log(a()); // should print '1'
					//     console.log(b()); // should print '100'
					//     OR
					//   - binding is declared inside loop but not in inside initializer of iteration statement or directly inside loop body
					//     * variables from initializer are passed to rewritten loop body as parameters so they are not captured directly
					//     * variables that are declared immediately in loop body will become top level variable after loop is rewritten and thus
					//       they will not collide with anything
					isDeclaredInLoop := c.hasNodeCheckFlag(symbol.ValueDeclaration, NodeCheckFlagsBlockScopedBindingInLoop)
					inLoopInitializer := isIterationStatement(container, false /*lookInLabeledStatements*/)
					inLoopBodyBlock := container.Kind == ast.KindBlock && isIterationStatement(container.Parent, false /*lookInLabeledStatements*/)

					links.isDeclarationWithCollidingName = !isBlockScopedContainerTopLevel(container) && (!isDeclaredInLoop || (!inLoopInitializer && !inLoopBodyBlock))
				} else {
					links.isDeclarationWithCollidingName = false
				}
			}
		}
		return links.isDeclarationWithCollidingName
	}
	return false
}

// When resolved as an expression identifier, if the given node references a nested block scoped entity with
// a name that either hides an existing name or might hide it when compiled downlevel,
// return the declaration of that entity. Otherwise, return undefined.
func (c *Checker) getReferencedDeclarationWithCollidingName(nodeIn Identifier) Declaration {
	if !isGeneratedIdentifier(nodeIn) {
		node := getParseTreeNode(nodeIn, isIdentifier)
		if node != nil {
			symbol := c.getReferencedValueSymbol(node)
			if symbol != nil && c.isSymbolOfDeclarationWithCollidingName(symbol) {
				return symbol.ValueDeclaration
			}
		}
	}

	return nil
}

// Return true if the given node is a declaration of a nested block scoped entity with a name that either hides an
// existing name or might hide a name when compiled downlevel
func (c *Checker) isDeclarationWithCollidingName(nodeIn Declaration) bool {
	node := getParseTreeNode(nodeIn, isDeclaration)
	if node != nil {
		symbol := c.getSymbolOfDeclaration(node)
		if symbol {
			return c.isSymbolOfDeclarationWithCollidingName(symbol)
		}
	}

	return false
}

func (c *Checker) isValueAliasDeclaration(node *ast.Node) bool {
	Debug.assert(c.canCollectSymbolAliasAccessabilityData)
	switch node.Kind {
	case ast.KindImportEqualsDeclaration:
		return c.isAliasResolvedToValue(c.getSymbolOfDeclaration(node.AsImportEqualsDeclaration()))
	case ast.KindImportClause,
		ast.KindNamespaceImport,
		ast.KindImportSpecifier,
		ast.KindExportSpecifier:
		symbol := c.getSymbolOfDeclaration(node /* as ImportClause | NamespaceImport | ImportSpecifier | ExportSpecifier */)
		return symbol && c.isAliasResolvedToValue(symbol, true /*excludeTypeOnlyValues*/)
	case ast.KindExportDeclaration:
		exportClause := node.AsExportDeclaration().ExportClause
		return exportClause != nil && (isNamespaceExport(exportClause) || core.Some(exportClause.Elements, c.isValueAliasDeclaration))
	case ast.KindExportAssignment:
		if node.AsExportAssignment().Expression && node.AsExportAssignment().Expression.Kind == ast.KindIdentifier {
			return c.isAliasResolvedToValue(c.getSymbolOfDeclaration(node.AsExportAssignment()), true /*excludeTypeOnlyValues*/)
		} else {
			return true
		}
	}
	return false
}

func (c *Checker) isTopLevelValueImportEqualsWithEntityName(nodeIn ImportEqualsDeclaration) bool {
	node := getParseTreeNode(nodeIn, isImportEqualsDeclaration)
	if node == nil || node.Parent.Kind != ast.KindSourceFile || !isInternalModuleImportEqualsDeclaration(node) {
		// parent is not source file or it is not reference to internal module
		return false
	}

	isValue := c.isAliasResolvedToValue(c.getSymbolOfDeclaration(node))
	return isValue && node.ModuleReference && !nodeIsMissing(node.ModuleReference)
}

func (c *Checker) isAliasResolvedToValue(symbol *ast.Symbol, excludeTypeOnlyValues bool) bool {
	if symbol == nil {
		return false
	}
	container := getSourceFileOfNode(symbol.ValueDeclaration)
	fileSymbol := container && c.getSymbolOfDeclaration(container)
	// Ensures cjs export assignment is setup, since this symbol may point at, and merge with, the file itself.
	// If we don't, the merge may not have yet occured, and the flags check below will be missing flags that
	// are added as a result of the merge.
	c.resolveExternalModuleSymbol(fileSymbol)
	target := c.getExportSymbolOfValueSymbolIfExported(c.resolveAlias(symbol))
	if target == c.unknownSymbol {
		return !excludeTypeOnlyValues || c.getTypeOnlyAliasDeclaration(symbol) == nil
	}
	// const enums and modules that contain only const enums are not considered values from the emit perspective
	// unless 'preserveConstEnums' option is set to true
	return c.getSymbolFlags(symbol, excludeTypeOnlyValues, true /*excludeLocalMeanings*/)&ast.SymbolFlagsValue != 0 && (shouldPreserveConstEnums(c.compilerOptions) || !c.isConstEnumOrConstEnumOnlyModule(target))
}

func (c *Checker) isConstEnumOrConstEnumOnlyModule(s *ast.Symbol) bool {
	return c.isConstEnumSymbol(s) || s.ConstEnumOnlyModule
}

func (c *Checker) isReferencedAliasDeclaration(node *ast.Node, checkChildren bool) bool {
	Debug.assert(c.canCollectSymbolAliasAccessabilityData)
	if c.isAliasSymbolDeclaration(node) {
		symbol := c.getSymbolOfDeclaration(node.AsDeclaration())
		links := symbol && c.getSymbolLinks(symbol)
		if links. /* ? */ referenced {
			return true
		}
		target := c.getSymbolLinks(symbol).aliasTarget
		if target != nil && getEffectiveModifierFlags(node)&ast.ModifierFlagsExport != 0 && c.getSymbolFlags(target)&ast.SymbolFlagsValue != 0 && (shouldPreserveConstEnums(c.compilerOptions) || !c.isConstEnumOrConstEnumOnlyModule(target)) {
			// An `export import ... =` of a value symbol is always considered referenced
			return true
		}
	}

	if checkChildren {
		return forEachChild(node, func(node *ast.Node) bool {
			return c.isReferencedAliasDeclaration(node, checkChildren)
		})
	}
	return false
}

func (c *Checker) isImplementationOfOverload(node SignatureDeclaration) bool {
	if nodeIsPresent(node.AsFunctionLikeDeclaration().Body) {
		if isGetAccessor(node) || isSetAccessor(node) {
			return false
			// Get or set accessors can never be overload implementations, but can have up to 2 signatures
		}
		// Get or set accessors can never be overload implementations, but can have up to 2 signatures
		symbol := c.getSymbolOfDeclaration(node)
		signaturesOfSymbol := c.getSignaturesOfSymbol(symbol)
		// If this function body corresponds to function with multiple signature, it is implementation of overload
		// e.g.: function foo(a: string): string;
		//       function foo(a: number): number;
		//       function foo(a: any) { // This is implementation of the overloads
		//           return a;
		//       }
		return signaturesOfSymbol.length > 1 || (signaturesOfSymbol.length == 1 && signaturesOfSymbol[0].declaration != node)
	}
	return false
}

func (c *Checker) declaredParameterTypeContainsUndefined(parameter Union[ParameterDeclaration, JSDocParameterTag]) bool {
	typeNode := c.getNonlocalEffectiveTypeAnnotationNode(parameter)
	if typeNode == nil {
		return false
	}
	t := c.getTypeFromTypeNode(typeNode)
	return c.containsUndefinedType(t)
}

func (c *Checker) requiresAddingImplicitUndefined(parameter Union[ParameterDeclaration, JSDocParameterTag], enclosingDeclaration *ast.Node) bool {
	return (c.isRequiredInitializedParameter(parameter, enclosingDeclaration) || c.isOptionalUninitializedParameterProperty(parameter)) && !c.declaredParameterTypeContainsUndefined(parameter)
}

func (c *Checker) isRequiredInitializedParameter(parameter Union[ParameterDeclaration, JSDocParameterTag], enclosingDeclaration *ast.Node) bool {
	if !c.strictNullChecks || c.isOptionalParameter(parameter) || isJSDocParameterTag(parameter) || parameter.Initializer == nil {
		return false
	}
	if hasSyntacticModifier(parameter, ast.ModifierFlagsParameterPropertyModifier) {
		return enclosingDeclaration != nil && isFunctionLikeDeclaration(enclosingDeclaration)
	}
	return true
}

func (c *Checker) isOptionalUninitializedParameterProperty(parameter Union[ParameterDeclaration, JSDocParameterTag]) bool {
	return c.strictNullChecks && c.isOptionalParameter(parameter) && (isJSDocParameterTag(parameter) || parameter.Initializer == nil) && hasSyntacticModifier(parameter, ast.ModifierFlagsParameterPropertyModifier)
}

func (c *Checker) isExpandoFunctionDeclaration(node Declaration) bool {
	declaration := getParseTreeNode(node, func(n *ast.Node) bool {
		return isFunctionDeclaration(n) || isVariableDeclaration(n)
	})
	if declaration == nil {
		return false
	}
	var symbol *ast.Symbol
	if isVariableDeclaration(declaration) {
		if declaration.Type_ != nil || (!isInJSFile(declaration) && !c.isVarConstLike(declaration)) {
			return false
		}
		initializer := getDeclaredExpandoInitializer(declaration)
		if initializer == nil || !canHaveSymbol(initializer) {
			return false
		}
		symbol = c.getSymbolOfDeclaration(initializer)
	} else {
		symbol = c.getSymbolOfDeclaration(declaration)
	}
	if !symbol || symbol.Flags&ast.SymbolFlagsFunction|ast.SymbolFlagsVariable == 0 {
		return false
	}
	return forEachEntry(c.getExportsOfSymbol(symbol), func(p *ast.Symbol) /* TODO(TS-TO-GO) inferred type boolean | 0 */ any {
		return p.Flags&ast.SymbolFlagsValue && isExpandoPropertyDeclaration(p.ValueDeclaration)
	})
}

func (c *Checker) getPropertiesOfContainerFunction(node Declaration) []*ast.Symbol {
	declaration := getParseTreeNode(node, isFunctionDeclaration)
	if declaration == nil {
		return emptyArray
	}
	symbol := c.getSymbolOfDeclaration(declaration)
	return symbol && c.getPropertiesOfType(c.getTypeOfSymbol(symbol)) || emptyArray
}

func (c *Checker) getNodeCheckFlags(node *ast.Node) NodeCheckFlags {
	nodeId := node.Id || 0
	if nodeId < 0 || nodeId >= c.nodeLinks.length {
		return 0
	}
	return c.nodeLinks[nodeId]. /* ? */ flags || 0
}

func (c *Checker) hasNodeCheckFlag(node *ast.Node, flag LazyNodeCheckFlags) bool {
	c.calculateNodeCheckFlagWorker(node, flag)
	return c.getNodeCheckFlags(node)&flag != 0
}

func (c *Checker) calculateNodeCheckFlagWorker(node *ast.Node, flag LazyNodeCheckFlags) {
	if !c.compilerOptions.noCheck && canIncludeBindAndCheckDiagnostics(getSourceFileOfNode(node), c.compilerOptions) {
		// Unless noCheck is passed, assume calculation of node check flags has been done eagerly.
		// This saves needing to mark up where in the eager traversal certain results are "done",
		// just to reconcile the eager and lazy results. This wouldn't be hard if an eager typecheck
		// was actually an in-order traversal, but it isn't - some nodes are deferred, and so don't
		// have these node check flags calculated until that deferral is completed. As an example,
		// in concept, we could consider a class that we've called `checkSourceElement` on as having had
		// these flags calculated, but since the method bodies are deferred, we actually can't set the
		// flags as having been calculated until that deferral is completed.
		// The downside to this either/or approach to eager or lazy calculation is that we can't combine
		// a partial eager traversal and lazy calculation for the missing bits, and there's a bit of
		// overlap in functionality. This isn't a huge loss for any usecases today, but would be nice
		// alongside language service partial file checking and editor-triggered emit.
		return
	}
	links := c.getNodeLinks(node)
	if links.calculatedFlags&flag != 0 {
		return
	}
	// This is only the set of `NodeCheckFlags` our emitter actually looks for, not all of them
	switch flag {
	case NodeCheckFlagsSuperInstance,
		NodeCheckFlagsSuperStatic:
		return checkSingleSuperExpression(node)
	case NodeCheckFlagsMethodWithSuperPropertyAccessInAsync,
		NodeCheckFlagsMethodWithSuperPropertyAssignmentInAsync,
		NodeCheckFlagsContainsSuperPropertyInStaticInitializer:
		return checkChildSuperExpressions(node)
	case NodeCheckFlagsCaptureArguments,
		NodeCheckFlagsContainsCapturedBlockScopeBinding,
		NodeCheckFlagsNeedsLoopOutParameter,
		NodeCheckFlagsContainsConstructorReference:
		return checkChildIdentifiers(node)
	case NodeCheckFlagsConstructorReference:
		return checkSingleIdentifier(node)
	case NodeCheckFlagsLoopWithCapturedBlockScopedBinding,
		NodeCheckFlagsBlockScopedBindingInLoop,
		NodeCheckFlagsCapturedBlockScopedBinding:
		return checkContainingBlockScopeBindingUses(node)
	default:
		return Debug.assertNever(flag, __TEMPLATE__("Unhandled node check flag calculation: ", Debug.formatNodeCheckFlags(flag)))
	}

	forEachNodeRecursively := func(root *ast.Node, cb func(node *ast.Node, parent *ast.Node) Union[T /* TODO(TS-TO-GO) TypeNode LiteralType: "skip" */, any, undefined]) *T {
		rootResult := cb(root, root.Parent)
		if rootResult == "skip" {
			return nil
		}
		if rootResult != nil {
			return rootResult
		}
		return forEachChildRecursively(root, cb)
	}

	checkSuperExpressions := func(node *ast.Node) * /* TODO(TS-TO-GO) inferred type "skip" */ any {
		links := c.getNodeLinks(node)
		if links.calculatedFlags&flag != 0 {
			return "skip"
		}
		links.calculatedFlags |= NodeCheckFlagsMethodWithSuperPropertyAccessInAsync | NodeCheckFlagsMethodWithSuperPropertyAssignmentInAsync | NodeCheckFlagsContainsSuperPropertyInStaticInitializer
		checkSingleSuperExpression(node)
		return nil
	}

	checkChildSuperExpressions := func(node *ast.Node) {
		forEachNodeRecursively(node, checkSuperExpressions)
	}

	checkSingleSuperExpression := func(node *ast.Node) {
		nodeLinks := c.getNodeLinks(node)
		// This is called on sub-nodes of the original input, make sure we set `calculatedFlags` on the correct node
		nodeLinks.calculatedFlags |= NodeCheckFlagsSuperInstance | NodeCheckFlagsSuperStatic
		// Yes, we set this on non-applicable nodes, so we can entirely skip the traversal on future calls
		if node.Kind == ast.KindSuperKeyword {
			c.checkSuperExpression(node)
		}
	}

	checkIdentifiers := func(node *ast.Node) * /* TODO(TS-TO-GO) inferred type "skip" */ any {
		links := c.getNodeLinks(node)
		if links.calculatedFlags&flag != 0 {
			return "skip"
		}
		links.calculatedFlags |= NodeCheckFlagsCaptureArguments | NodeCheckFlagsContainsCapturedBlockScopeBinding | NodeCheckFlagsNeedsLoopOutParameter | NodeCheckFlagsContainsConstructorReference
		checkSingleIdentifier(node)
		return nil
	}

	checkChildIdentifiers := func(node *ast.Node) {
		forEachNodeRecursively(node, checkIdentifiers)
	}

	isExpressionNodeOrShorthandPropertyAssignmentName := func(node Identifier) bool {
		// TODO(jakebailey): Just use isExpressionNode once that considers these identifiers to be expressions.
		return isExpressionNode(node) || isShorthandPropertyAssignment(node.Parent) && (ifNotNilElse(node.Parent.ObjectAssignmentInitializer, node.Parent.Name)) == node
	}

	checkSingleIdentifier := func(node *ast.Node) {
		nodeLinks := c.getNodeLinks(node)
		nodeLinks.calculatedFlags |= NodeCheckFlagsConstructorReference
		if isIdentifier(node) {
			nodeLinks.calculatedFlags |= NodeCheckFlagsBlockScopedBindingInLoop | NodeCheckFlagsCapturedBlockScopedBinding
			// Can't set on all arbitrary nodes (these nodes have this flag set by `checkSingleBlockScopeBinding` only)
			if isExpressionNodeOrShorthandPropertyAssignmentName(node) && !(isPropertyAccessExpression(node.Parent) && node.Parent.Name == node) {
				s := c.getResolvedSymbol(node)
				if s && s != c.unknownSymbol {
					c.checkIdentifierCalculateNodeCheckFlags(node, s)
				}
			}
		}
	}

	checkBlockScopeBindings := func(node *ast.Node) * /* TODO(TS-TO-GO) inferred type "skip" */ any {
		links := c.getNodeLinks(node)
		if links.calculatedFlags&flag != 0 {
			return "skip"
		}
		links.calculatedFlags |= NodeCheckFlagsLoopWithCapturedBlockScopedBinding | NodeCheckFlagsBlockScopedBindingInLoop | NodeCheckFlagsCapturedBlockScopedBinding
		checkSingleBlockScopeBinding(node)
		return nil
	}

	checkContainingBlockScopeBindingUses := func(node *ast.Node) {
		scope := getEnclosingBlockScopeContainer(ifElse(isDeclarationName(node), node.Parent, node))
		forEachNodeRecursively(scope, checkBlockScopeBindings)
	}

	checkSingleBlockScopeBinding := func(node *ast.Node) {
		checkSingleIdentifier(node)
		if isComputedPropertyName(node) {
			c.checkComputedPropertyName(node)
		}
		if isPrivateIdentifier(node) && isClassElement(node.Parent) {
			c.setNodeLinksForPrivateIdentifierScope(node.Parent /* as PropertyDeclaration | PropertySignature | MethodDeclaration | MethodSignature | AccessorDeclaration */)
		}
	}

}

func (c *Checker) getEnumMemberValue(node EnumMember) EvaluatorResult {
	c.computeEnumMemberValues(node.Parent)
	return ifNotNilElse(c.getNodeLinks(node).enumMemberValue, evaluatorResult(nil))
}

func (c *Checker) canHaveConstantValue(node *ast.Node) bool {
	switch node.Kind {
	case ast.KindEnumMember,
		ast.KindPropertyAccessExpression,
		ast.KindElementAccessExpression:
		return true
	}
	return false
}

func (c *Checker) getConstantValue(node Union[EnumMember, AccessExpression]) Union[string, number, undefined] {
	if node.Kind == ast.KindEnumMember {
		return c.getEnumMemberValue(node).value
	}

	if c.getNodeLinks(node).resolvedSymbol == nil {
		c.checkExpressionCached(node)
		// ensure cached resolved symbol is set
	}
	symbol := c.getNodeLinks(node).resolvedSymbol || (ifElse(isEntityNameExpression(node), c.resolveEntityName(node, ast.SymbolFlagsValue, true /*ignoreErrors*/), nil))
	if symbol != nil && (symbol.Flags&ast.SymbolFlagsEnumMember != 0) {
		// inline property\index accesses only for const enums
		member := symbol.ValueDeclaration.AsEnumMember()
		if isEnumConst(member.Parent) {
			return c.getEnumMemberValue(member).value
		}
	}

	return nil
}

func (c *Checker) isFunctionType(t *Type) bool {
	return t.flags&TypeFlagsObject != 0 && c.getSignaturesOfType(t, SignatureKindCall).length > 0
}

func (c *Checker) getTypeReferenceSerializationKind(typeNameIn EntityName, location *ast.Node) TypeReferenceSerializationKind {
	// ensure both `typeName` and `location` are parse tree nodes.
	typeName := getParseTreeNode(typeNameIn, isEntityName)
	if typeName == nil {
		return TypeReferenceSerializationKindUnknown
	}

	if location != nil {
		location = getParseTreeNode(location)
		if location == nil {
			return TypeReferenceSerializationKindUnknown
		}
	}

	// Resolve the symbol as a value to ensure the type can be reached at runtime during emit.
	isTypeOnly := false
	if isQualifiedName(typeName) {
		rootValueSymbol := c.resolveEntityName(getFirstIdentifier(typeName), ast.SymbolFlagsValue, true /*ignoreErrors*/, true /*dontResolveAlias*/, location)
		isTypeOnly = rootValueSymbol. /* ? */ declarations. /* ? */ every(isTypeOnlyImportOrExportDeclaration)
	}
	valueSymbol := c.resolveEntityName(typeName, ast.SymbolFlagsValue, true /*ignoreErrors*/, true /*dontResolveAlias*/, location)
	var resolvedValueSymbol *ast.Symbol
	if valueSymbol != nil && valueSymbol.Flags&ast.SymbolFlagsAlias != 0 {
		resolvedValueSymbol = c.resolveAlias(valueSymbol)
	} else {
		resolvedValueSymbol = valueSymbol
	}
	isTypeOnly = isTypeOnly || valueSymbol != nil && c.getTypeOnlyAliasDeclaration(valueSymbol, ast.SymbolFlagsValue) != nil

	// Resolve the symbol as a type so that we can provide a more useful hint for the type serializer.
	typeSymbol := c.resolveEntityName(typeName, ast.SymbolFlagsType, true /*ignoreErrors*/, true /*dontResolveAlias*/, location)
	var resolvedTypeSymbol *ast.Symbol
	if typeSymbol != nil && typeSymbol.Flags&ast.SymbolFlagsAlias != 0 {
		resolvedTypeSymbol = c.resolveAlias(typeSymbol)
	} else {
		resolvedTypeSymbol = typeSymbol
	}

	// In case the value symbol can't be resolved (e.g. because of missing declarations), use type symbol for reachability check.
	if valueSymbol == nil {
		isTypeOnly = isTypeOnly || typeSymbol != nil && c.getTypeOnlyAliasDeclaration(typeSymbol, ast.SymbolFlagsType) != nil
	}

	if resolvedValueSymbol != nil && resolvedValueSymbol == resolvedTypeSymbol {
		globalPromiseSymbol := c.getGlobalPromiseConstructorSymbol(false)
		if globalPromiseSymbol != nil && resolvedValueSymbol == globalPromiseSymbol {
			return TypeReferenceSerializationKindPromise
		}

		constructorType := c.getTypeOfSymbol(resolvedValueSymbol)
		if constructorType && c.isConstructorType(constructorType) {
			if isTypeOnly {
				return TypeReferenceSerializationKindTypeWithCallSignature
			} else {
				return TypeReferenceSerializationKindTypeWithConstructSignatureAndValue
			}
		}
	}

	// We might not be able to resolve type symbol so use unknown type in that case (eg error case)
	if resolvedTypeSymbol == nil {
		if isTypeOnly {
			return TypeReferenceSerializationKindObjectType
		} else {
			return TypeReferenceSerializationKindUnknown
		}
	}
	t := c.getDeclaredTypeOfSymbol(resolvedTypeSymbol)
	if c.isErrorType(t) {
		if isTypeOnly {
			return TypeReferenceSerializationKindObjectType
		} else {
			return TypeReferenceSerializationKindUnknown
		}
	} else if t.flags&TypeFlagsAnyOrUnknown != 0 {
		return TypeReferenceSerializationKindObjectType
	} else if c.isTypeAssignableToKind(t, TypeFlagsVoid|TypeFlagsNullable|TypeFlagsNever) {
		return TypeReferenceSerializationKindVoidNullableOrNeverType
	} else if c.isTypeAssignableToKind(t, TypeFlagsBooleanLike) {
		return TypeReferenceSerializationKindBooleanType
	} else if c.isTypeAssignableToKind(t, TypeFlagsNumberLike) {
		return TypeReferenceSerializationKindNumberLikeType
	} else if c.isTypeAssignableToKind(t, TypeFlagsBigIntLike) {
		return TypeReferenceSerializationKindBigIntLikeType
	} else if c.isTypeAssignableToKind(t, TypeFlagsStringLike) {
		return TypeReferenceSerializationKindStringLikeType
	} else if c.isTupleType(t) {
		return TypeReferenceSerializationKindArrayLikeType
	} else if c.isTypeAssignableToKind(t, TypeFlagsESSymbolLike) {
		return TypeReferenceSerializationKindESSymbolType
	} else if c.isFunctionType(t) {
		return TypeReferenceSerializationKindTypeWithCallSignature
	} else if c.isArrayType(t) {
		return TypeReferenceSerializationKindArrayLikeType
	} else {
		return TypeReferenceSerializationKindObjectType
	}
}

func (c *Checker) createTypeOfDeclaration(declarationIn Union[AccessorDeclaration, VariableLikeDeclaration, PropertyAccessExpression], enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *TypeNode {
	declaration := getParseTreeNode(declarationIn, isVariableLikeOrAccessor)
	if declaration == nil {
		return factory.createToken(ast.KindAnyKeyword).AsKeywordTypeNode()
	}
	// Get type of the symbol if this is the valid symbol otherwise get type at location
	symbol := c.getSymbolOfDeclaration(declaration)
	var t *Type
	if symbol && symbol.Flags&(ast.SymbolFlagsTypeLiteral|ast.SymbolFlagsSignature) == 0 {
		t = c.getWidenedLiteralType(c.getTypeOfSymbol(symbol))
	} else {
		t = c.errorType
	}

	return c.nodeBuilder.serializeTypeForDeclaration(declaration, t, symbol, enclosingDeclaration, flags|NodeBuilderFlagsMultilineObjectLiterals, internalFlags, tracker)
}

func (c *Checker) isDeclarationWithPossibleInnerTypeNodeReuse(declaration Declaration) bool {
	return isFunctionLike(declaration) || isExportAssignment(declaration) || isVariableLike(declaration)
}

func (c *Checker) getAllAccessorDeclarationsForDeclaration(accessor AccessorDeclaration) AllAccessorDeclarations {
	accessor = getParseTreeNode(accessor, isGetOrSetAccessorDeclaration)
	// TODO: GH#18217
	var otherKind /* TODO(TS-TO-GO) inferred type SyntaxKind.GetAccessor | SyntaxKind.SetAccessor */ any
	if accessor.Kind == ast.KindSetAccessor {
		otherKind = ast.KindGetAccessor
	} else {
		otherKind = ast.KindSetAccessor
	}
	otherAccessor := getDeclarationOfKind(c.getSymbolOfDeclaration(accessor), otherKind)
	var firstAccessor AccessorDeclaration
	if otherAccessor != nil && (otherAccessor.Pos < accessor.Pos) {
		firstAccessor = otherAccessor
	} else {
		firstAccessor = accessor
	}
	var secondAccessor *AccessorDeclaration
	if otherAccessor != nil && (otherAccessor.Pos < accessor.Pos) {
		secondAccessor = accessor
	} else {
		secondAccessor = otherAccessor
	}
	var setAccessor SetAccessorDeclaration
	if accessor.Kind == ast.KindSetAccessor {
		setAccessor = accessor
	} else {
		setAccessor = otherAccessor.AsSetAccessorDeclaration()
	}
	var getAccessor GetAccessorDeclaration
	if accessor.Kind == ast.KindGetAccessor {
		getAccessor = accessor
	} else {
		getAccessor = otherAccessor.AsGetAccessorDeclaration()
	}
	return AllAccessorDeclarations{
		firstAccessor:  firstAccessor,
		secondAccessor: secondAccessor,
		setAccessor:    setAccessor,
		getAccessor:    getAccessor,
	}
}

func (c *Checker) getPossibleTypeNodeReuseExpression(declaration DeclarationWithPotentialInnerNodeReuse) Expression {
	switch {
	case isFunctionLike(declaration) && !isSetAccessor(declaration):
		return c.getSingleReturnExpression(declaration)
	case isExportAssignment(declaration):
		return declaration.Expression
	case declaration.AsHasInitializer().Initializer != nil:
		return (declaration /* as HasInitializer & typeof declaration */).Initializer
	case isParameter(declaration) && isSetAccessor(declaration.Parent):
		return c.getSingleReturnExpression(c.getAllAccessorDeclarationsForDeclaration(declaration.Parent).getAccessor)
	default:
		return nil
	}
}

func (c *Checker) getSingleReturnExpression(declaration *SignatureDeclaration) Expression {
	var candidateExpr Expression
	if declaration != nil && !nodeIsMissing(declaration.AsFunctionLikeDeclaration().Body) {
		if getFunctionFlags(declaration)&FunctionFlagsAsyncGenerator != 0 {
			return nil
		}
		body := declaration.AsFunctionLikeDeclaration().Body
		if body != nil && isBlock(body) {
			forEachReturnStatement(body, func(s ReturnStatement) *true {
				if candidateExpr == nil {
					candidateExpr = s.Expression
				} else {
					candidateExpr = nil
					return true
				}
			})
		} else {
			candidateExpr = body
		}
	}
	return candidateExpr
}

func (c *Checker) createReturnTypeOfSignatureDeclaration(signatureDeclarationIn SignatureDeclaration, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *TypeNode {
	signatureDeclaration := getParseTreeNode(signatureDeclarationIn, isFunctionLike)
	if signatureDeclaration == nil {
		return factory.createToken(ast.KindAnyKeyword).AsKeywordTypeNode()
	}
	return c.nodeBuilder.serializeReturnTypeForSignature(c.getSignatureFromDeclaration(signatureDeclaration), enclosingDeclaration, flags|NodeBuilderFlagsMultilineObjectLiterals, internalFlags, tracker)
}

func (c *Checker) createTypeOfExpression(exprIn Expression, enclosingDeclaration *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *TypeNode {
	expr := getParseTreeNode(exprIn, isExpression)
	if expr == nil {
		return factory.createToken(ast.KindAnyKeyword).AsKeywordTypeNode()
	}
	t := c.getWidenedType(c.getRegularTypeOfExpression(expr))
	return c.nodeBuilder.expressionOrTypeToTypeNode(expr, t, nil /*addUndefined*/, enclosingDeclaration, flags|NodeBuilderFlagsMultilineObjectLiterals, internalFlags, tracker)
}

func (c *Checker) hasGlobalName(name string) bool {
	return c.globals.has(escapeLeadingUnderscores(name))
}

func (c *Checker) getReferencedValueSymbol(reference Identifier, startInDeclarationContainer bool) *ast.Symbol {
	resolvedSymbol := c.getNodeLinks(reference).resolvedSymbol
	if resolvedSymbol != nil {
		return resolvedSymbol
	}

	var location *ast.Node = reference
	if startInDeclarationContainer {
		// When resolving the name of a declaration as a value, we need to start resolution
		// at a point outside of the declaration.
		parent := reference.Parent
		if isDeclaration(parent) && reference == parent.Name {
			location = c.getDeclarationContainer(parent)
		}
	}

	return c.resolveName(location, reference.EscapedText, ast.SymbolFlagsValue|ast.SymbolFlagsExportValue|ast.SymbolFlagsAlias, nil /*nameNotFoundMessage*/, true /*isUse*/)
}

/**
 * Get either a value-meaning symbol or an alias symbol.
 * Unlike `getReferencedValueSymbol`, if the cached resolved symbol is the unknown symbol,
 * we call `resolveName` to find a symbol.
 * This is because when caching the resolved symbol, we only consider value symbols, but here
 * we want to also get an alias symbol if one exists.
 */

func (c *Checker) getReferencedValueOrAliasSymbol(reference Identifier) *ast.Symbol {
	resolvedSymbol := c.getNodeLinks(reference).resolvedSymbol
	if resolvedSymbol != nil && resolvedSymbol != c.unknownSymbol {
		return resolvedSymbol
	}

	return c.resolveName(reference, reference.EscapedText, ast.SymbolFlagsValue|ast.SymbolFlagsExportValue|ast.SymbolFlagsAlias, nil, true, nil)
}

func (c *Checker) getReferencedValueDeclaration(referenceIn Identifier) Declaration {
	if !isGeneratedIdentifier(referenceIn) {
		reference := getParseTreeNode(referenceIn, isIdentifier)
		if reference != nil {
			symbol := c.getReferencedValueSymbol(reference)
			if symbol != nil {
				return c.getExportSymbolOfValueSymbolIfExported(symbol).ValueDeclaration
			}
		}
	}

	return nil
}

func (c *Checker) getReferencedValueDeclarations(referenceIn Identifier) *[]Declaration {
	if !isGeneratedIdentifier(referenceIn) {
		reference := getParseTreeNode(referenceIn, isIdentifier)
		if reference != nil {
			symbol := c.getReferencedValueSymbol(reference)
			if symbol != nil {
				return core.Filter(c.getExportSymbolOfValueSymbolIfExported(symbol).Declarations, func(declaration Declaration) bool {
					switch declaration.Kind {
					case ast.KindVariableDeclaration,
						ast.KindParameter,
						ast.KindBindingElement,
						ast.KindPropertyDeclaration,
						ast.KindPropertyAssignment,
						ast.KindShorthandPropertyAssignment,
						ast.KindEnumMember,
						ast.KindObjectLiteralExpression,
						ast.KindFunctionDeclaration,
						ast.KindFunctionExpression,
						ast.KindArrowFunction,
						ast.KindClassDeclaration,
						ast.KindClassExpression,
						ast.KindEnumDeclaration,
						ast.KindMethodDeclaration,
						ast.KindGetAccessor,
						ast.KindSetAccessor,
						ast.KindModuleDeclaration:
						return true
					}
					return false
				})
			}
		}
	}

	return nil
}

func (c *Checker) isLiteralConstDeclaration(node Union[VariableDeclaration, PropertyDeclaration, PropertySignature, ParameterDeclaration]) bool {
	if isDeclarationReadonly(node) || isVariableDeclaration(node) && c.isVarConstLike(node) {
		return c.isFreshLiteralType(c.getTypeOfSymbol(c.getSymbolOfDeclaration(node)))
	}
	return false
}

func (c *Checker) literalTypeToNode(t FreshableType, enclosing *ast.Node, tracker SymbolTracker) Expression {
	var enumResult * /* TODO(TS-TO-GO) inferred type false | Expression */ any
	switch {
	case t.flags&TypeFlagsEnumLike != 0:
		enumResult = c.nodeBuilder.symbolToExpression(t.symbol, ast.SymbolFlagsValue, enclosing, nil /*flags*/, nil /*internalFlags*/, tracker)
	case t == c.trueType:
		enumResult = factory.createTrue()
	default:
		enumResult = t == c.falseType && factory.createFalse()
	}
	if enumResult {
		return enumResult
	}
	literalValue := t.AsLiteralType().value
	switch {
	case /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof literalValue */ TODO == "object":
		return factory.createBigIntLiteral(literalValue)
	case /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof literalValue */ TODO == "string":
		return factory.createStringLiteral(literalValue)
	case literalValue < 0:
		return factory.createPrefixUnaryExpression(ast.KindMinusToken, factory.createNumericLiteral(-literalValue))
	default:
		return factory.createNumericLiteral(literalValue)
	}
}

func (c *Checker) createLiteralConstValue(node Union[VariableDeclaration, PropertyDeclaration, PropertySignature, ParameterDeclaration], tracker SymbolTracker) Expression {
	t := c.getTypeOfSymbol(c.getSymbolOfDeclaration(node))
	return c.literalTypeToNode(t.AsFreshableType(), node, tracker)
}

func (c *Checker) getJsxFactoryEntity(location *ast.Node) *EntityName {
	if location {
		return ( /* TODO(TS-TO-GO) CommaToken BinaryExpression: getJsxNamespace(location), (getSourceFileOfNode(location).localJsxFactory || _jsxFactoryEntity) */ TODO)
	} else {
		return c._jsxFactoryEntity
	}
}

func (c *Checker) getJsxFragmentFactoryEntity(location *ast.Node) *EntityName {
	if location {
		file := getSourceFileOfNode(location)
		if file {
			if file.LocalJsxFragmentFactory != nil {
				return file.LocalJsxFragmentFactory
			}
			jsxFragPragmas := file.Pragmas.get("jsxfrag")
			var jsxFragPragma /* TODO(TS-TO-GO) inferred type { arguments: { factory: string; }; range: CommentRange; } */ any
			if isArray(jsxFragPragmas) {
				jsxFragPragma = jsxFragPragmas[0]
			} else {
				jsxFragPragma = jsxFragPragmas
			}
			if jsxFragPragma {
				file.LocalJsxFragmentFactory = parseIsolatedEntityName(jsxFragPragma.arguments.factory, c.languageVersion)
				return file.LocalJsxFragmentFactory
			}
		}
	}

	if c.compilerOptions.jsxFragmentFactory {
		return parseIsolatedEntityName(c.compilerOptions.jsxFragmentFactory, c.languageVersion)
	}
}

func (c *Checker) getNonlocalEffectiveTypeAnnotationNode(node *ast.Node) *TypeNode {
	direct := getEffectiveTypeAnnotationNode(node)
	if direct != nil {
		return direct
	}
	if node.Kind == ast.KindParameter && node.Parent.Kind == ast.KindSetAccessor {
		other := c.getAllAccessorDeclarationsForDeclaration(node.Parent.AsSetAccessorDeclaration()).getAccessor
		if other != nil {
			return getEffectiveReturnTypeNode(other)
		}
	}
	return nil
}

func (c *Checker) getNonlocalEffectiveReturnTypeAnnotationNode(node Union[SignatureDeclaration, JSDocSignature]) *TypeNode {
	direct := getEffectiveReturnTypeNode(node)
	if direct != nil {
		return direct
	}
	if node.Kind == ast.KindGetAccessor {
		other := c.getAllAccessorDeclarationsForDeclaration(node).setAccessor
		if other != nil {
			param := getSetAccessorValueParameter(other)
			if param != nil {
				return getEffectiveTypeAnnotationNode(param)
			}
		}
	}
	return nil
}

func (c *Checker) createResolver() EmitResolver {
	return EmitResolver{
		getReferencedExportContainer:              getReferencedExportContainer,
		getReferencedImportDeclaration:            getReferencedImportDeclaration,
		getReferencedDeclarationWithCollidingName: getReferencedDeclarationWithCollidingName,
		isDeclarationWithCollidingName:            isDeclarationWithCollidingName,
		isValueAliasDeclaration: func(nodeIn *ast.Node) bool {
			node := getParseTreeNode(nodeIn)
			// Synthesized nodes are always treated like values.
			if node != nil && c.canCollectSymbolAliasAccessabilityData {
				return c.isValueAliasDeclaration(node)
			} else {
				return true
			}
		},
		hasGlobalName: hasGlobalName,
		isReferencedAliasDeclaration: func(nodeIn *ast.Node, checkChildren *bool) bool {
			node := getParseTreeNode(nodeIn)
			// Synthesized nodes are always treated as referenced.
			if node != nil && c.canCollectSymbolAliasAccessabilityData {
				return c.isReferencedAliasDeclaration(node, checkChildren)
			} else {
				return true
			}
		},
		hasNodeCheckFlag: func(nodeIn *ast.Node, flag LazyNodeCheckFlags) bool {
			node := getParseTreeNode(nodeIn)
			if node == nil {
				return false
			}
			return c.hasNodeCheckFlag(node, flag)
		},
		isTopLevelValueImportEqualsWithEntityName: isTopLevelValueImportEqualsWithEntityName,
		isDeclarationVisible:                      isDeclarationVisible,
		isImplementationOfOverload:                isImplementationOfOverload,
		requiresAddingImplicitUndefined:           requiresAddingImplicitUndefined,
		isExpandoFunctionDeclaration:              isExpandoFunctionDeclaration,
		getPropertiesOfContainerFunction:          getPropertiesOfContainerFunction,
		createTypeOfDeclaration:                   createTypeOfDeclaration,
		createReturnTypeOfSignatureDeclaration:    createReturnTypeOfSignatureDeclaration,
		createTypeOfExpression:                    createTypeOfExpression,
		createLiteralConstValue:                   createLiteralConstValue,
		isSymbolAccessible:                        isSymbolAccessible,
		isEntityNameVisible:                       isEntityNameVisible,
		getConstantValue: func(nodeIn /* TODO(TS-TO-GO) inferred type PropertyAccessExpression | ElementAccessExpression | EnumMember */ any) * /* TODO(TS-TO-GO) inferred type string | number */ any {
			node := getParseTreeNode(nodeIn, c.canHaveConstantValue)
			if node != nil {
				return c.getConstantValue(node)
			} else {
				return nil
			}
		},
		getEnumMemberValue: func(nodeIn EnumMember) * /* TODO(TS-TO-GO) inferred type EvaluatorResult<string | number | undefined> */ any {
			node := getParseTreeNode(nodeIn, isEnumMember)
			if node != nil {
				return c.getEnumMemberValue(node)
			} else {
				return nil
			}
		},
		collectLinkedAliases: collectLinkedAliases,
		markLinkedReferences: func(nodeIn *ast.Node) {
			node := getParseTreeNode(nodeIn)
			return node && c.markLinkedReferences(node, ReferenceHintUnspecified)
		},
		getReferencedValueDeclaration:     getReferencedValueDeclaration,
		getReferencedValueDeclarations:    getReferencedValueDeclarations,
		getTypeReferenceSerializationKind: getTypeReferenceSerializationKind,
		isOptionalParameter:               isOptionalParameter,
		isArgumentsLocalBinding:           isArgumentsLocalBinding,
		getExternalModuleFileFromDeclaration: func(nodeIn /* TODO(TS-TO-GO) inferred type ExportDeclaration | ImportDeclaration | ImportEqualsDeclaration | ModuleDeclaration | ImportTypeNode | ImportCall */ any) *SourceFile {
			node := getParseTreeNode(nodeIn, hasPossibleExternalModuleReference)
			return node && c.getExternalModuleFileFromDeclaration(node)
		},
		isLiteralConstDeclaration: isLiteralConstDeclaration,
		isLateBound: func(nodeIn Declaration) bool {
			node := getParseTreeNode(nodeIn, isDeclaration)
			symbol := node && c.getSymbolOfDeclaration(node)
			return symbol != nil && getCheckFlags(symbol)&ast.CheckFlagsLate != 0
		},
		getJsxFactoryEntity:         getJsxFactoryEntity,
		getJsxFragmentFactoryEntity: getJsxFragmentFactoryEntity,
		isBindingCapturedByNode: func(node *ast.Node, decl /* TODO(TS-TO-GO) inferred type VariableDeclaration | BindingElement */ any) bool {
			parseNode := getParseTreeNode(node)
			parseDecl := getParseTreeNode(decl)
			return parseNode != nil && parseDecl != nil && (isVariableDeclaration(parseDecl) || isBindingElement(parseDecl)) && c.isBindingCapturedByNode(parseNode, parseDecl)
		},
		getDeclarationStatementsForSourceFile: func(node SourceFile, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *[]Statement {
			n := getParseTreeNode(node).AsSourceFile()
			Debug.assert(n && n.Kind == ast.KindSourceFile, "Non-sourcefile node passed into getDeclarationsForSourceFile")
			sym := c.getSymbolOfDeclaration(node)
			if !sym {
				if node.Locals == nil {
					return []never{}
				} else {
					return c.nodeBuilder.symbolTableToDeclarationStatements(node.Locals, node, flags, internalFlags, tracker)
				}
			}
			c.resolveExternalModuleSymbol(sym)
			// ensures cjs export assignment is setup
			if sym.Exports == nil {
				return []never{}
			} else {
				return c.nodeBuilder.symbolTableToDeclarationStatements(sym.Exports, node, flags, internalFlags, tracker)
			}
		},
		isImportRequiredByAugmentation:            isImportRequiredByAugmentation,
		isDefinitelyReferenceToGlobalSymbolObject: isDefinitelyReferenceToGlobalSymbolObject,
		createLateBoundIndexSignatures: func(cls ClassLikeDeclaration, enclosing *ast.Node, flags NodeBuilderFlags, internalFlags InternalNodeBuilderFlags, tracker SymbolTracker) *[]IndexSignatureDeclaration {
			sym := cls.Symbol
			staticInfos := c.getIndexInfosOfType(c.getTypeOfSymbol(sym))
			instanceIndexSymbol := c.getIndexSymbol(sym)
			instanceInfos := instanceIndexSymbol && c.getIndexInfosOfIndexSymbol(instanceIndexSymbol, arrayFrom(c.getMembersOfSymbol(sym).values()))
			var result TODO
			for _, infoList := range []*[]IndexInfo{staticInfos, instanceInfos} {
				if length(infoList) == 0 {
					continue
				}
				result = result || []never{}
				for _, info := range infoList {
					if info.declaration != nil {
						continue
					}
					node := c.nodeBuilder.indexInfoToIndexSignatureDeclaration(info, enclosing, flags, internalFlags, tracker)
					if node != nil && infoList == staticInfos {
						(( /* TODO(TS-TO-GO) BarBarEqualsToken BinaryExpression: (node as Mutable<typeof node>).modifiers ||= factory.createNodeArray() */ TODO).(MutableNodeArray[Modifier])).unshift(factory.createModifier(ast.KindStaticKeyword))
					}
					if node != nil {
						result.push(node)
					}
				}
			}
			return result
		},
	}

	isImportRequiredByAugmentation := func(node ImportDeclaration) bool {
		file := getSourceFileOfNode(node)
		if !file.Symbol {
			return false
		}
		importTarget := c.getExternalModuleFileFromDeclaration(node)
		if importTarget == nil {
			return false
		}
		if importTarget == file {
			return false
		}
		exports := c.getExportsOfModule(file.Symbol)
		for _, s := range arrayFrom(exports.values()) {
			if s.MergeId != 0 {
				merged := c.getMergedSymbol(s)
				if merged.Declarations != nil {
					for _, d := range merged.Declarations {
						declFile := getSourceFileOfNode(d)
						if declFile == importTarget {
							return true
						}
					}
				}
			}
		}
		return false
	}

}

func (c *Checker) getExternalModuleFileFromDeclaration(declaration Union[AnyImportOrReExport, ModuleDeclaration, ImportTypeNode, ImportCall]) *SourceFile {
	var specifier Expression
	if declaration.Kind == ast.KindModuleDeclaration {
		specifier = tryCast(declaration.Name, isStringLiteral)
	} else {
		specifier = getExternalModuleName(declaration)
	}
	moduleSymbol := c.resolveExternalModuleNameWorker(specifier, specifier, nil /*moduleNotFoundError*/)
	// TODO: GH#18217
	if moduleSymbol == nil {
		return nil
	}
	return getDeclarationOfKind(moduleSymbol, ast.KindSourceFile)
}

func (c *Checker) initializeTypeChecker() {
	// Bind all source files and propagate errors
	for _, file := range host.getSourceFiles() {
		bindSourceFile(file, c.compilerOptions)
	}

	c.amalgamatedDuplicates = NewMap()

	// Initialize global symbol table
	var augmentations *[][]Union[StringLiteral, Identifier]
	for _, file := range host.getSourceFiles() {
		if file.RedirectInfo != nil {
			continue
		}
		if !isExternalOrCommonJsModule(file) {
			// It is an error for a non-external-module (i.e. script) to declare its own `globalThis`.
			fileGlobalThisSymbol := file.Locals.get("globalThis" /* as __String */)
			if fileGlobalThisSymbol. /* ? */ declarations != nil {
				for _, declaration := range fileGlobalThisSymbol.Declarations {
					c.diagnostics.add(createDiagnosticForNode(declaration, Diagnostics.Declaration_name_conflicts_with_built_in_global_identifier_0, "globalThis"))
				}
			}
			c.mergeSymbolTable(c.globals, file.Locals)
		}
		if file.JsGlobalAugmentations != nil {
			c.mergeSymbolTable(c.globals, file.JsGlobalAugmentations)
		}
		if file.PatternAmbientModules != nil && file.PatternAmbientModules.length != 0 {
			c.patternAmbientModules = core.Concatenate(c.patternAmbientModules, file.PatternAmbientModules)
		}
		if file.ModuleAugmentations.length != 0 {
			(augmentations || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: augmentations = [] */ TODO)).push(file.ModuleAugmentations)
		}
		if file.Symbol && file.Symbol.GlobalExports != nil {
			// Merge in UMD exports with first-in-wins semantics (see #9771)
			source := file.Symbol.GlobalExports
			source.forEach(func(sourceSymbol *ast.Symbol, id string) {
				if !c.globals.has(id) {
					c.globals.set(id, sourceSymbol)
				}
			})
		}
	}

	// We do global augmentations separately from module augmentations (and before creating global types) because they
	//  1. Affect global types. We won't have the correct global types until global augmentations are merged. Also,
	//  2. Module augmentation instantiation requires creating the type of a module, which, in turn, can require
	//       checking for an export or property on the module (if export=) which, in turn, can fall back to the
	//       apparent type of the module - either globalObjectType or globalFunctionType - which wouldn't exist if we
	//       did module augmentations prior to finalizing the global types.
	if augmentations != nil {
		// merge _global_ module augmentations.
		// this needs to be done after global symbol table is initialized to make sure that all ambient modules are indexed
		for _, list := range augmentations {
			for _, augmentation := range list {
				if !isGlobalScopeAugmentation(augmentation.Parent.AsModuleDeclaration()) {
					continue
				}
				c.mergeModuleAugmentation(augmentation)
			}
		}
	}

	c.addUndefinedToGlobalsOrErrorOnRedeclaration()

	c.getSymbolLinks(c.undefinedSymbol).type_ = c.undefinedWideningType
	c.getSymbolLinks(c.argumentsSymbol).type_ = c.getGlobalType("IArguments" /* as __String */, 0 /*arity*/, true /*reportErrors*/)
	c.getSymbolLinks(c.unknownSymbol).type_ = c.errorType
	c.getSymbolLinks(c.globalThisSymbol).type_ = c.createObjectType(ObjectFlagsAnonymous, c.globalThisSymbol)

	// Initialize special types
	c.globalArrayType = c.getGlobalType("Array" /* as __String */, 1 /*arity*/, true /*reportErrors*/)
	c.globalObjectType = c.getGlobalType("Object" /* as __String */, 0 /*arity*/, true /*reportErrors*/)
	c.globalFunctionType = c.getGlobalType("Function" /* as __String */, 0 /*arity*/, true /*reportErrors*/)
	c.globalCallableFunctionType = c.strictBindCallApply && c.getGlobalType("CallableFunction" /* as __String */, 0 /*arity*/, true /*reportErrors*/) || c.globalFunctionType
	c.globalNewableFunctionType = c.strictBindCallApply && c.getGlobalType("NewableFunction" /* as __String */, 0 /*arity*/, true /*reportErrors*/) || c.globalFunctionType
	c.globalStringType = c.getGlobalType("String" /* as __String */, 0 /*arity*/, true /*reportErrors*/)
	c.globalNumberType = c.getGlobalType("Number" /* as __String */, 0 /*arity*/, true /*reportErrors*/)
	c.globalBooleanType = c.getGlobalType("Boolean" /* as __String */, 0 /*arity*/, true /*reportErrors*/)
	c.globalRegExpType = c.getGlobalType("RegExp" /* as __String */, 0 /*arity*/, true /*reportErrors*/)
	c.anyArrayType = c.createArrayType(c.anyType)

	c.autoArrayType = c.createArrayType(c.autoType)
	if c.autoArrayType == c.emptyObjectType {
		// autoArrayType is used as a marker, so even if global Array type is not defined, it needs to be a unique type
		c.autoArrayType = c.createAnonymousType(nil, c.emptySymbols, emptyArray, emptyArray, emptyArray)
	}

	c.globalReadonlyArrayType = c.getGlobalTypeOrUndefined("ReadonlyArray" /* as __String */, 1 /*arity*/).AsGenericType() || c.globalArrayType
	if c.globalReadonlyArrayType {
		c.anyReadonlyArrayType = c.createTypeFromGenericGlobalType(c.globalReadonlyArrayType, []IntrinsicType{c.anyType})
	} else {
		c.anyReadonlyArrayType = c.anyArrayType
	}
	c.globalThisType = c.getGlobalTypeOrUndefined("ThisType" /* as __String */, 1 /*arity*/).AsGenericType()

	if augmentations != nil {
		// merge _nonglobal_ module augmentations.
		// this needs to be done after global symbol table is initialized to make sure that all ambient modules are indexed
		for _, list := range augmentations {
			for _, augmentation := range list {
				if isGlobalScopeAugmentation(augmentation.Parent.AsModuleDeclaration()) {
					continue
				}
				c.mergeModuleAugmentation(augmentation)
			}
		}
	}

	c.amalgamatedDuplicates.forEach(func(TODO_IDENTIFIER DuplicateInfoForFiles) {
		// If not many things conflict, issue individual errors
		if conflictingSymbols.size < 8 {
			conflictingSymbols.forEach(func(TODO_IDENTIFIER DuplicateInfoForSymbol, symbolName string) {
				var message any
				if isBlockScoped {
					message = Diagnostics.Cannot_redeclare_block_scoped_variable_0
				} else {
					message = Diagnostics.Duplicate_identifier_0
				}
				for _, node := range firstFileLocations {
					c.addDuplicateDeclarationError(node, message, symbolName, secondFileLocations)
				}
				for _, node := range secondFileLocations {
					c.addDuplicateDeclarationError(node, message, symbolName, firstFileLocations)
				}
			})
		} else {
			// Otherwise issue top-level error since the files appear very identical in terms of what they contain
			list := arrayFrom(conflictingSymbols.keys()).join(", ")
			c.diagnostics.add(addRelatedInfo(createDiagnosticForNode(firstFile, Diagnostics.Definitions_of_the_following_identifiers_conflict_with_those_in_another_file_Colon_0, list), createDiagnosticForNode(secondFile, Diagnostics.Conflicts_are_in_this_file)))
			c.diagnostics.add(addRelatedInfo(createDiagnosticForNode(secondFile, Diagnostics.Definitions_of_the_following_identifiers_conflict_with_those_in_another_file_Colon_0, list), createDiagnosticForNode(firstFile, Diagnostics.Conflicts_are_in_this_file)))
		}
	})
	c.amalgamatedDuplicates = nil
}

func (c *Checker) checkExternalEmitHelpers(location *ast.Node, helpers ExternalEmitHelpers) {
	if c.compilerOptions.importHelpers {
		sourceFile := getSourceFileOfNode(location)
		if isEffectiveExternalModule(sourceFile, c.compilerOptions) && location.Flags&ast.NodeFlagsAmbient == 0 {
			helpersModule := c.resolveHelpersModule(sourceFile, location)
			if helpersModule != c.unknownSymbol {
				links := c.getSymbolLinks(helpersModule)
				if links.requestedExternalEmitHelpers == nil {
					links.requestedExternalEmitHelpers = 0.(ExternalEmitHelpers)
				}
				if (links.requestedExternalEmitHelpers & helpers) != helpers {
					uncheckedHelpers := helpers & ^links.requestedExternalEmitHelpers
					for helper := ExternalEmitHelpersFirstEmitHelper; helper <= ExternalEmitHelpersLastEmitHelper; helper <<= 1 {
						if uncheckedHelpers&helper != 0 {
							for _, name := range c.getHelperNames(helper) {
								symbol := c.resolveSymbol(c.getSymbol(c.getExportsOfModule(helpersModule), escapeLeadingUnderscores(name), ast.SymbolFlagsValue))
								if symbol == nil {
									c.error(location, Diagnostics.This_syntax_requires_an_imported_helper_named_1_which_does_not_exist_in_0_Consider_upgrading_your_version_of_0, externalHelpersModuleNameText, name)
								} else if helper&ExternalEmitHelpersClassPrivateFieldGet != 0 {
									if !core.Some(c.getSignaturesOfSymbol(symbol), func(signature Signature) bool {
										return c.getParameterCount(signature) > 3
									}) {
										c.error(location, Diagnostics.This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_one_in_0_Consider_upgrading_your_version_of_0, externalHelpersModuleNameText, name, 4)
									}
								} else if helper&ExternalEmitHelpersClassPrivateFieldSet != 0 {
									if !core.Some(c.getSignaturesOfSymbol(symbol), func(signature Signature) bool {
										return c.getParameterCount(signature) > 4
									}) {
										c.error(location, Diagnostics.This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_one_in_0_Consider_upgrading_your_version_of_0, externalHelpersModuleNameText, name, 5)
									}
								} else if helper&ExternalEmitHelpersSpreadArray != 0 {
									if !core.Some(c.getSignaturesOfSymbol(symbol), func(signature Signature) bool {
										return c.getParameterCount(signature) > 2
									}) {
										c.error(location, Diagnostics.This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_one_in_0_Consider_upgrading_your_version_of_0, externalHelpersModuleNameText, name, 3)
									}
								}
							}
						}
					}
				}
				links.requestedExternalEmitHelpers |= helpers
			}
		}
	}
}

func (c *Checker) getHelperNames(helper ExternalEmitHelpers) []string {
	switch helper {
	case ExternalEmitHelpersExtends:
		return []string{"__extends"}
	case ExternalEmitHelpersAssign:
		return []string{"__assign"}
	case ExternalEmitHelpersRest:
		return []string{"__rest"}
	case ExternalEmitHelpersDecorate:
		if c.legacyDecorators {
			return []string{"__decorate"}
		} else {
			return []string{"__esDecorate", "__runInitializers"}
		}
	case ExternalEmitHelpersMetadata:
		return []string{"__metadata"}
	case ExternalEmitHelpersParam:
		return []string{"__param"}
	case ExternalEmitHelpersAwaiter:
		return []string{"__awaiter"}
	case ExternalEmitHelpersGenerator:
		return []string{"__generator"}
	case ExternalEmitHelpersValues:
		return []string{"__values"}
	case ExternalEmitHelpersRead:
		return []string{"__read"}
	case ExternalEmitHelpersSpreadArray:
		return []string{"__spreadArray"}
	case ExternalEmitHelpersAwait:
		return []string{"__await"}
	case ExternalEmitHelpersAsyncGenerator:
		return []string{"__asyncGenerator"}
	case ExternalEmitHelpersAsyncDelegator:
		return []string{"__asyncDelegator"}
	case ExternalEmitHelpersAsyncValues:
		return []string{"__asyncValues"}
	case ExternalEmitHelpersExportStar:
		return []string{"__exportStar"}
	case ExternalEmitHelpersImportStar:
		return []string{"__importStar"}
	case ExternalEmitHelpersImportDefault:
		return []string{"__importDefault"}
	case ExternalEmitHelpersMakeTemplateObject:
		return []string{"__makeTemplateObject"}
	case ExternalEmitHelpersClassPrivateFieldGet:
		return []string{"__classPrivateFieldGet"}
	case ExternalEmitHelpersClassPrivateFieldSet:
		return []string{"__classPrivateFieldSet"}
	case ExternalEmitHelpersClassPrivateFieldIn:
		return []string{"__classPrivateFieldIn"}
	case ExternalEmitHelpersSetFunctionName:
		return []string{"__setFunctionName"}
	case ExternalEmitHelpersPropKey:
		return []string{"__propKey"}
	case ExternalEmitHelpersAddDisposableResourceAndDisposeResources:
		return []string{"__addDisposableResource", "__disposeResources"}
	default:
		return Debug.fail("Unrecognized helper")
	}
}

func (c *Checker) resolveHelpersModule(file SourceFile, errorNode *ast.Node) *ast.Symbol {
	links := c.getNodeLinks(file)
	if links.externalHelpersModule == nil {
		links.externalHelpersModule = c.resolveExternalModule(c.getImportHelpersImportSpecifier(file), externalHelpersModuleNameText, Diagnostics.This_syntax_requires_an_imported_helper_but_module_0_cannot_be_found, errorNode) || c.unknownSymbol
	}
	return links.externalHelpersModule
}

// GRAMMAR CHECKING

func (c *Checker) checkGrammarModifiers(node Union[HasModifiers, HasDecorators, HasIllegalModifiers, HasIllegalDecorators]) bool {
	quickResult := c.reportObviousDecoratorErrors(node) || c.reportObviousModifierErrors(node)
	if quickResult != nil {
		return quickResult
	}

	if isParameter(node) && parameterIsThisKeyword(node) {
		return c.grammarErrorOnFirstToken(node, Diagnostics.Neither_decorators_nor_modifiers_may_be_applied_to_this_parameters)
	}

	var blockScopeKind number
	if isVariableStatement(node) {
		blockScopeKind = node.DeclarationList.Flags & ast.NodeFlagsBlockScoped
	} else {
		blockScopeKind = ast.NodeFlagsNone
	}
	var lastStatic *ast.Node
	var lastDeclare *ast.Node
	var lastAsync *ast.Node
	var lastOverride *ast.Node
	var firstDecorator *Decorator
	flags := ast.ModifierFlagsNone
	sawExportBeforeDecorators := false
	// We parse decorators and modifiers in four contiguous chunks:
	// [...leadingDecorators, ...leadingModifiers, ...trailingDecorators, ...trailingModifiers]. It is an error to
	// have both leading and trailing decorators.
	hasLeadingDecorators := false
	for _, modifier := range node.AsHasModifiers().Modifiers {
		if isDecorator(modifier) {
			if !nodeCanBeDecorated(c.legacyDecorators, node, node.Parent, node.Parent.Parent) {
				if node.Kind == ast.KindMethodDeclaration && !nodeIsPresent(node.Body) {
					return c.grammarErrorOnFirstToken(node, Diagnostics.A_decorator_can_only_decorate_a_method_implementation_not_an_overload)
				} else {
					return c.grammarErrorOnFirstToken(node, Diagnostics.Decorators_are_not_valid_here)
				}
			} else if c.legacyDecorators && (node.Kind == ast.KindGetAccessor || node.Kind == ast.KindSetAccessor) {
				accessors := c.getAllAccessorDeclarationsForDeclaration(node.AsAccessorDeclaration())
				if hasDecorators(accessors.firstAccessor) && node == accessors.secondAccessor {
					return c.grammarErrorOnFirstToken(node, Diagnostics.Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name)
				}
			}

			// if we've seen any modifiers aside from `export`, `default`, or another decorator, then this is an invalid position
			if flags & ^(ast.ModifierFlagsExportDefault|ast.ModifierFlagsDecorator) != 0 {
				return c.grammarErrorOnNode(modifier, Diagnostics.Decorators_are_not_valid_here)
			}

			// if we've already seen leading decorators and leading modifiers, then trailing decorators are an invalid position
			if hasLeadingDecorators && flags&ast.ModifierFlagsModifier != 0 {
				Debug.assertIsDefined(firstDecorator)
				sourceFile := getSourceFileOfNode(modifier)
				if !c.hasParseDiagnostics(sourceFile) {
					addRelatedInfo(c.error(modifier, Diagnostics.Decorators_may_not_appear_after_export_or_export_default_if_they_also_appear_before_export), createDiagnosticForNode(firstDecorator, Diagnostics.Decorator_used_before_export_here))
					return true
				}
				return false
			}

			flags |= ast.ModifierFlagsDecorator

			// if we have not yet seen a modifier, then these are leading decorators
			if flags&ast.ModifierFlagsModifier == 0 {
				hasLeadingDecorators = true
			} else if flags&ast.ModifierFlagsExport != 0 {
				sawExportBeforeDecorators = true
			}

			if firstDecorator == nil {
				firstDecorator = modifier
			}
		} else {
			if modifier.Kind != ast.KindReadonlyKeyword {
				if node.Kind == ast.KindPropertySignature || node.Kind == ast.KindMethodSignature {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_type_member, tokenToString(modifier.Kind))
				}
				if node.Kind == ast.KindIndexSignature && (modifier.Kind != ast.KindStaticKeyword || !isClassLike(node.Parent)) {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_an_index_signature, tokenToString(modifier.Kind))
				}
			}
			if modifier.Kind != ast.KindInKeyword && modifier.Kind != ast.KindOutKeyword && modifier.Kind != ast.KindConstKeyword {
				if node.Kind == ast.KindTypeParameter {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_type_parameter, tokenToString(modifier.Kind))
				}
			}
			switch modifier.Kind {
			case ast.KindConstKeyword:
				if node.Kind != ast.KindEnumDeclaration && node.Kind != ast.KindTypeParameter {
					return c.grammarErrorOnNode(node, Diagnostics.A_class_member_cannot_have_the_0_keyword, tokenToString(ast.KindConstKeyword))
				}
				parent := (isJSDocTemplateTag(node.Parent) && getEffectiveJSDocHost(node.Parent)) || node.Parent
				if node.Kind == ast.KindTypeParameter && !(isFunctionLikeDeclaration(parent) || isClassLike(parent) || isFunctionTypeNode(parent) || isConstructorTypeNode(parent) || isCallSignatureDeclaration(parent) || isConstructSignatureDeclaration(parent) || isMethodSignature(parent)) {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_can_only_appear_on_a_type_parameter_of_a_function_method_or_class, tokenToString(modifier.Kind))
				}
			case ast.KindOverrideKeyword:
				// If node.kind === SyntaxKind.Parameter, checkParameter reports an error if it's not a parameter property.
				if flags&ast.ModifierFlagsOverride != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_already_seen, "override")
				} else if flags&ast.ModifierFlagsAmbient != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "override", "declare")
				} else if flags&ast.ModifierFlagsReadonly != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "override", "readonly")
				} else if flags&ast.ModifierFlagsAccessor != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "override", "accessor")
				} else if flags&ast.ModifierFlagsAsync != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "override", "async")
				}
				flags |= ast.ModifierFlagsOverride
				lastOverride = modifier
			case ast.KindPublicKeyword,
				ast.KindProtectedKeyword,
				ast.KindPrivateKeyword:
				text := c.visibilityToString(modifierToFlag(modifier.Kind))

				if flags&ast.ModifierFlagsAccessibilityModifier != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics.Accessibility_modifier_already_seen)
				} else if flags&ast.ModifierFlagsOverride != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, text, "override")
				} else if flags&ast.ModifierFlagsStatic != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, text, "static")
				} else if flags&ast.ModifierFlagsAccessor != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, text, "accessor")
				} else if flags&ast.ModifierFlagsReadonly != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, text, "readonly")
				} else if flags&ast.ModifierFlagsAsync != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, text, "async")
				} else if node.Parent.Kind == ast.KindModuleBlock || node.Parent.Kind == ast.KindSourceFile {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_module_or_namespace_element, text)
				} else if flags&ast.ModifierFlagsAbstract != 0 {
					if modifier.Kind == ast.KindPrivateKeyword {
						return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_with_1_modifier, text, "abstract")
					} else {
						return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, text, "abstract")
					}
				} else if isPrivateIdentifierClassElementDeclaration(node) {
					return c.grammarErrorOnNode(modifier, Diagnostics.An_accessibility_modifier_cannot_be_used_with_a_private_identifier)
				}
				flags |= modifierToFlag(modifier.Kind)
			case ast.KindStaticKeyword:
				if flags&ast.ModifierFlagsStatic != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_already_seen, "static")
				} else if flags&ast.ModifierFlagsReadonly != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "static", "readonly")
				} else if flags&ast.ModifierFlagsAsync != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "static", "async")
				} else if flags&ast.ModifierFlagsAccessor != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "static", "accessor")
				} else if node.Parent.Kind == ast.KindModuleBlock || node.Parent.Kind == ast.KindSourceFile {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_module_or_namespace_element, "static")
				} else if node.Kind == ast.KindParameter {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_parameter, "static")
				} else if flags&ast.ModifierFlagsAbstract != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "static", "abstract")
				} else if flags&ast.ModifierFlagsOverride != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "static", "override")
				}
				flags |= ast.ModifierFlagsStatic
				lastStatic = modifier
			case ast.KindAccessorKeyword:
				if flags&ast.ModifierFlagsAccessor != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_already_seen, "accessor")
				} else if flags&ast.ModifierFlagsReadonly != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "accessor", "readonly")
				} else if flags&ast.ModifierFlagsAmbient != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "accessor", "declare")
				} else if node.Kind != ast.KindPropertyDeclaration {
					return c.grammarErrorOnNode(modifier, Diagnostics.accessor_modifier_can_only_appear_on_a_property_declaration)
				}

				flags |= ast.ModifierFlagsAccessor
			case ast.KindReadonlyKeyword:
				if flags&ast.ModifierFlagsReadonly != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_already_seen, "readonly")
				} else if node.Kind != ast.KindPropertyDeclaration && node.Kind != ast.KindPropertySignature && node.Kind != ast.KindIndexSignature && node.Kind != ast.KindParameter {
					// If node.kind === SyntaxKind.Parameter, checkParameter reports an error if it's not a parameter property.
					return c.grammarErrorOnNode(modifier, Diagnostics.readonly_modifier_can_only_appear_on_a_property_declaration_or_index_signature)
				} else if flags&ast.ModifierFlagsAccessor != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "readonly", "accessor")
				}
				flags |= ast.ModifierFlagsReadonly
			case ast.KindExportKeyword:
				if c.compilerOptions.verbatimModuleSyntax && node.Flags&ast.NodeFlagsAmbient == 0 && node.Kind != ast.KindTypeAliasDeclaration && node.Kind != ast.KindInterfaceDeclaration && node.Kind != ast.KindModuleDeclaration && node.Parent.Kind == ast.KindSourceFile && host.getEmitModuleFormatOfFile(getSourceFileOfNode(node)) == ModuleKindCommonJS {
					return c.grammarErrorOnNode(modifier, Diagnostics.A_top_level_export_modifier_cannot_be_used_on_value_declarations_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled)
				}
				if flags&ast.ModifierFlagsExport != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_already_seen, "export")
				} else if flags&ast.ModifierFlagsAmbient != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "export", "declare")
				} else if flags&ast.ModifierFlagsAbstract != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "export", "abstract")
				} else if flags&ast.ModifierFlagsAsync != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "export", "async")
				} else if isClassLike(node.Parent) {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_class_elements_of_this_kind, "export")
				} else if node.Kind == ast.KindParameter {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_parameter, "export")
				} else if blockScopeKind == ast.NodeFlagsUsing {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_using_declaration, "export")
				} else if blockScopeKind == ast.NodeFlagsAwaitUsing {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_an_await_using_declaration, "export")
				}
				flags |= ast.ModifierFlagsExport
			case ast.KindDefaultKeyword:
				var container *ast.Node
				if node.Parent.Kind == ast.KindSourceFile {
					container = node.Parent
				} else {
					container = node.Parent.Parent
				}
				if container.Kind == ast.KindModuleDeclaration && !isAmbientModule(container) {
					return c.grammarErrorOnNode(modifier, Diagnostics.A_default_export_can_only_be_used_in_an_ECMAScript_style_module)
				} else if blockScopeKind == ast.NodeFlagsUsing {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_using_declaration, "default")
				} else if blockScopeKind == ast.NodeFlagsAwaitUsing {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_an_await_using_declaration, "default")
				} else if flags&ast.ModifierFlagsExport == 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "export", "default")
				} else if sawExportBeforeDecorators {
					return c.grammarErrorOnNode(firstDecorator, Diagnostics.Decorators_are_not_valid_here)
				}

				flags |= ast.ModifierFlagsDefault
			case ast.KindDeclareKeyword:
				if flags&ast.ModifierFlagsAmbient != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_already_seen, "declare")
				} else if flags&ast.ModifierFlagsAsync != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, "async")
				} else if flags&ast.ModifierFlagsOverride != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, "override")
				} else if isClassLike(node.Parent) && !isPropertyDeclaration(node) {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_class_elements_of_this_kind, "declare")
				} else if node.Kind == ast.KindParameter {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_parameter, "declare")
				} else if blockScopeKind == ast.NodeFlagsUsing {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_using_declaration, "declare")
				} else if blockScopeKind == ast.NodeFlagsAwaitUsing {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_an_await_using_declaration, "declare")
				} else if (node.Parent.Flags&ast.NodeFlagsAmbient != 0) && node.Parent.Kind == ast.KindModuleBlock {
					return c.grammarErrorOnNode(modifier, Diagnostics.A_declare_modifier_cannot_be_used_in_an_already_ambient_context)
				} else if isPrivateIdentifierClassElementDeclaration(node) {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_with_a_private_identifier, "declare")
				} else if flags&ast.ModifierFlagsAccessor != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "declare", "accessor")
				}
				flags |= ast.ModifierFlagsAmbient
				lastDeclare = modifier
			case ast.KindAbstractKeyword:
				if flags&ast.ModifierFlagsAbstract != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_already_seen, "abstract")
				}
				if node.Kind != ast.KindClassDeclaration && node.Kind != ast.KindConstructorType {
					if node.Kind != ast.KindMethodDeclaration && node.Kind != ast.KindPropertyDeclaration && node.Kind != ast.KindGetAccessor && node.Kind != ast.KindSetAccessor {
						return c.grammarErrorOnNode(modifier, Diagnostics.abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration)
					}
					if !(node.Parent.Kind == ast.KindClassDeclaration && hasSyntacticModifier(node.Parent, ast.ModifierFlagsAbstract)) {
						var message any
						if node.Kind == ast.KindPropertyDeclaration {
							message = Diagnostics.Abstract_properties_can_only_appear_within_an_abstract_class
						} else {
							message = Diagnostics.Abstract_methods_can_only_appear_within_an_abstract_class
						}
						return c.grammarErrorOnNode(modifier, message)
					}
					if flags&ast.ModifierFlagsStatic != 0 {
						return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "static", "abstract")
					}
					if flags&ast.ModifierFlagsPrivate != 0 {
						return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "private", "abstract")
					}
					if flags&ast.ModifierFlagsAsync != 0 && lastAsync != nil {
						return c.grammarErrorOnNode(lastAsync, Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "async", "abstract")
					}
					if flags&ast.ModifierFlagsOverride != 0 {
						return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "abstract", "override")
					}
					if flags&ast.ModifierFlagsAccessor != 0 {
						return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "abstract", "accessor")
					}
				}
				if isNamedDeclaration(node) && node.Name.Kind == ast.KindPrivateIdentifier {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_with_a_private_identifier, "abstract")
				}

				flags |= ast.ModifierFlagsAbstract
			case ast.KindAsyncKeyword:
				if flags&ast.ModifierFlagsAsync != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_already_seen, "async")
				} else if flags&ast.ModifierFlagsAmbient != 0 || node.Parent.Flags&ast.NodeFlagsAmbient != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, "async")
				} else if node.Kind == ast.KindParameter {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_appear_on_a_parameter, "async")
				}
				if flags&ast.ModifierFlagsAbstract != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "async", "abstract")
				}
				flags |= ast.ModifierFlagsAsync
				lastAsync = modifier
			case ast.KindInKeyword,
				ast.KindOutKeyword:
				var inOutFlag /* TODO(TS-TO-GO) inferred type ModifierFlags.In | ModifierFlags.Out */ any
				if modifier.Kind == ast.KindInKeyword {
					inOutFlag = ast.ModifierFlagsIn
				} else {
					inOutFlag = ast.ModifierFlagsOut
				}
				var inOutText /* TODO(TS-TO-GO) inferred type "in" | "out" */ any
				if modifier.Kind == ast.KindInKeyword {
					inOutText = "in"
				} else {
					inOutText = "out"
				}
				parent := isJSDocTemplateTag(node.Parent) && (getEffectiveJSDocHost(node.Parent) || core.Find(getJSDocRoot(node.Parent). /* ? */ tags, isJSDocTypedefTag)) || node.Parent
				if node.Kind != ast.KindTypeParameter || parent && !(isInterfaceDeclaration(parent) || isClassLike(parent) || isTypeAliasDeclaration(parent) || isJSDocTypedefTag(parent)) {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_can_only_appear_on_a_type_parameter_of_a_class_interface_or_type_alias, inOutText)
				}
				if flags&inOutFlag != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_already_seen, inOutText)
				}
				if inOutFlag&ast.ModifierFlagsIn != 0 && flags&ast.ModifierFlagsOut != 0 {
					return c.grammarErrorOnNode(modifier, Diagnostics._0_modifier_must_precede_1_modifier, "in", "out")
				}
				flags |= inOutFlag
			}
		}
	}

	if node.Kind == ast.KindConstructor {
		if flags&ast.ModifierFlagsStatic != 0 {
			return c.grammarErrorOnNode(lastStatic, Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "static")
		}
		if flags&ast.ModifierFlagsOverride != 0 {
			return c.grammarErrorOnNode(lastOverride, Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "override")
			// TODO: GH#18217
		}
		if flags&ast.ModifierFlagsAsync != 0 {
			return c.grammarErrorOnNode(lastAsync, Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "async")
		}
		return false
	} else if (node.Kind == ast.KindImportDeclaration || node.Kind == ast.KindImportEqualsDeclaration) && flags&ast.ModifierFlagsAmbient != 0 {
		return c.grammarErrorOnNode(lastDeclare, Diagnostics.A_0_modifier_cannot_be_used_with_an_import_declaration, "declare")
	} else if node.Kind == ast.KindParameter && (flags&ast.ModifierFlagsParameterPropertyModifier != 0) && isBindingPattern(node.Name) {
		return c.grammarErrorOnNode(node, Diagnostics.A_parameter_property_may_not_be_declared_using_a_binding_pattern)
	} else if node.Kind == ast.KindParameter && (flags&ast.ModifierFlagsParameterPropertyModifier != 0) && node.DotDotDotToken != nil {
		return c.grammarErrorOnNode(node, Diagnostics.A_parameter_property_cannot_be_declared_using_a_rest_parameter)
	}
	if flags&ast.ModifierFlagsAsync != 0 {
		return c.checkGrammarAsyncModifier(node, lastAsync)
	}
	return false
}

/**
 * true | false: Early return this value from checkGrammarModifiers.
 * undefined: Need to do full checking on the modifiers.
 */

func (c *Checker) reportObviousModifierErrors(node Union[HasModifiers, HasIllegalModifiers]) *bool {
	if node.Modifiers == nil {
		return false
	}

	modifier := c.findFirstIllegalModifier(node)
	return modifier && c.grammarErrorOnFirstToken(modifier, Diagnostics.Modifiers_cannot_appear_here)
}

func (c *Checker) findFirstModifierExcept(node HasModifiers, allowedModifier SyntaxKind) *Modifier {
	modifier := core.Find(node.Modifiers, isModifier)
	if modifier != nil && modifier.Kind != allowedModifier {
		return modifier
	} else {
		return nil
	}
}

func (c *Checker) findFirstIllegalModifier(node Union[HasModifiers, HasIllegalModifiers]) *Modifier {
	switch node.Kind {
	case ast.KindGetAccessor,
		ast.KindSetAccessor,
		ast.KindConstructor,
		ast.KindPropertyDeclaration,
		ast.KindPropertySignature,
		ast.KindMethodDeclaration,
		ast.KindMethodSignature,
		ast.KindIndexSignature,
		ast.KindModuleDeclaration,
		ast.KindImportDeclaration,
		ast.KindImportEqualsDeclaration,
		ast.KindExportDeclaration,
		ast.KindExportAssignment,
		ast.KindFunctionExpression,
		ast.KindArrowFunction,
		ast.KindParameter,
		ast.KindTypeParameter:
		return nil
	case ast.KindClassStaticBlockDeclaration,
		ast.KindPropertyAssignment,
		ast.KindShorthandPropertyAssignment,
		ast.KindNamespaceExportDeclaration,
		ast.KindMissingDeclaration:
		return core.Find(node.Modifiers, isModifier)
	default:
		if node.Parent.Kind == ast.KindModuleBlock || node.Parent.Kind == ast.KindSourceFile {
			return nil
		}
		switch node.Kind {
		case ast.KindFunctionDeclaration:
			return c.findFirstModifierExcept(node, ast.KindAsyncKeyword)
		case ast.KindClassDeclaration,
			ast.KindConstructorType:
			return c.findFirstModifierExcept(node, ast.KindAbstractKeyword)
		case ast.KindClassExpression,
			ast.KindInterfaceDeclaration,
			ast.KindTypeAliasDeclaration:
			return core.Find(node.Modifiers, isModifier)
		case ast.KindVariableStatement:
			if node.DeclarationList.Flags&ast.NodeFlagsUsing != 0 {
				return c.findFirstModifierExcept(node, ast.KindAwaitKeyword)
			} else {
				return core.Find(node.Modifiers, isModifier)
			}
		case ast.KindEnumDeclaration:
			return c.findFirstModifierExcept(node, ast.KindConstKeyword)
		default:
			Debug.assertNever(node)
		}
	}
}

func (c *Checker) reportObviousDecoratorErrors(node Union[HasModifiers, HasDecorators, HasIllegalModifiers, HasIllegalDecorators]) *bool {
	decorator := c.findFirstIllegalDecorator(node)
	return decorator && c.grammarErrorOnFirstToken(decorator, Diagnostics.Decorators_are_not_valid_here)
}

func (c *Checker) findFirstIllegalDecorator(node Union[HasModifiers, HasDecorators, HasIllegalModifiers, HasIllegalDecorators]) *Decorator {
	if canHaveIllegalDecorators(node) {
		return core.Find(node.Modifiers, isDecorator)
	} else {
		return nil
	}
}

func (c *Checker) checkGrammarAsyncModifier(node *ast.Node, asyncModifier *ast.Node) bool {
	switch node.Kind {
	case ast.KindMethodDeclaration,
		ast.KindFunctionDeclaration,
		ast.KindFunctionExpression,
		ast.KindArrowFunction:
		return false
	}

	return c.grammarErrorOnNode(asyncModifier, Diagnostics._0_modifier_cannot_be_used_here, "async")
}

func (c *Checker) checkGrammarForDisallowedTrailingComma(list *NodeArray[*ast.Node], diag any /*  = Diagnostics.Trailing_comma_not_allowed */) bool {
	if list != nil && list.hasTrailingComma {
		return c.grammarErrorAtPos(list[0], list.end-len(","), len(","), diag)
	}
	return false
}

func (c *Checker) checkGrammarTypeParameterList(typeParameters *NodeArray[TypeParameterDeclaration], file SourceFile) bool {
	if typeParameters != nil && typeParameters.length == 0 {
		start := typeParameters.pos - len("<")
		end := skipTrivia(file.Text, typeParameters.end) + len(">")
		return c.grammarErrorAtPos(file, start, end-start, Diagnostics.Type_parameter_list_cannot_be_empty)
	}
	return false
}

func (c *Checker) checkGrammarParameterList(parameters NodeArray[ParameterDeclaration]) *bool {
	seenOptionalParameter := false
	parameterCount := parameters.length

	for i := 0; i < parameterCount; i++ {
		parameter := parameters[i]
		if parameter.DotDotDotToken != nil {
			if i != (parameterCount - 1) {
				return c.grammarErrorOnNode(parameter.DotDotDotToken, Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list)
			}
			if parameter.Flags&ast.NodeFlagsAmbient == 0 {
				c.checkGrammarForDisallowedTrailingComma(parameters, Diagnostics.A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma)
			}

			if parameter.QuestionToken != nil {
				return c.grammarErrorOnNode(parameter.QuestionToken, Diagnostics.A_rest_parameter_cannot_be_optional)
			}

			if parameter.Initializer != nil {
				return c.grammarErrorOnNode(parameter.Name, Diagnostics.A_rest_parameter_cannot_have_an_initializer)
			}
		} else if c.hasEffectiveQuestionToken(parameter) {
			seenOptionalParameter = true
			if parameter.QuestionToken != nil && parameter.Initializer != nil {
				return c.grammarErrorOnNode(parameter.Name, Diagnostics.Parameter_cannot_have_question_mark_and_initializer)
			}
		} else if seenOptionalParameter && parameter.Initializer == nil {
			return c.grammarErrorOnNode(parameter.Name, Diagnostics.A_required_parameter_cannot_follow_an_optional_parameter)
		}
	}
}

func (c *Checker) getNonSimpleParameters(parameters []ParameterDeclaration) []ParameterDeclaration {
	return core.Filter(parameters, func(parameter ParameterDeclaration) bool {
		return parameter.Initializer != nil || isBindingPattern(parameter.Name) || isRestParameter(parameter)
	})
}

func (c *Checker) checkGrammarForUseStrictSimpleParameterList(node FunctionLikeDeclaration) bool {
	if c.languageVersion >= ScriptTargetES2016 {
		useStrictDirective := node.Body && isBlock(node.Body) && findUseStrictPrologue(node.Body.Statements)
		if useStrictDirective {
			nonSimpleParameters := c.getNonSimpleParameters(node.Parameters)
			if length(nonSimpleParameters) != 0 {
				forEach(nonSimpleParameters, func(parameter ParameterDeclaration) {
					addRelatedInfo(c.error(parameter, Diagnostics.This_parameter_is_not_allowed_with_use_strict_directive), createDiagnosticForNode(useStrictDirective, Diagnostics.use_strict_directive_used_here))
				})

				diagnostics := nonSimpleParameters.map_(func(parameter ParameterDeclaration, index number) DiagnosticWithLocation {
					return (ifElse(index == 0, createDiagnosticForNode(parameter, Diagnostics.Non_simple_parameter_declared_here), createDiagnosticForNode(parameter, Diagnostics.and_here)))
				}) /* as [DiagnosticWithLocation, ...DiagnosticWithLocation[]] */
				addRelatedInfo(c.error(useStrictDirective, Diagnostics.use_strict_directive_cannot_be_used_with_non_simple_parameter_list), diagnostics...)
				return true
			}
		}
	}
	return false
}

func (c *Checker) checkGrammarFunctionLikeDeclaration(node Union[FunctionLikeDeclaration, MethodSignature]) bool {
	// Prevent cascading error by short-circuit
	file := getSourceFileOfNode(node)
	return c.checkGrammarModifiers(node) || c.checkGrammarTypeParameterList(node.TypeParameters, file) || c.checkGrammarParameterList(node.Parameters) || c.checkGrammarArrowFunction(node, file) || (isFunctionLikeDeclaration(node) && c.checkGrammarForUseStrictSimpleParameterList(node))
}

func (c *Checker) checkGrammarClassLikeDeclaration(node ClassLikeDeclaration) bool {
	file := getSourceFileOfNode(node)
	return c.checkGrammarClassDeclarationHeritageClauses(node) || c.checkGrammarTypeParameterList(node.TypeParameters, file)
}

func (c *Checker) checkGrammarArrowFunction(node *ast.Node, file SourceFile) bool {
	if !isArrowFunction(node) {
		return false
	}

	if node.TypeParameters != nil && !(length(node.TypeParameters) > 1 || node.TypeParameters.hasTrailingComma || node.TypeParameters[0].Constraint != nil) {
		if file && fileExtensionIsOneOf(file.FileName, []Extension{ExtensionMts, ExtensionCts}) {
			c.grammarErrorOnNode(node.TypeParameters[0], Diagnostics.This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Add_a_trailing_comma_or_explicit_constraint)
		}
	}

	TODO_IDENTIFIER := node
	startLine := getLineAndCharacterOfPosition(file, equalsGreaterThanToken.Pos).line
	endLine := getLineAndCharacterOfPosition(file, equalsGreaterThanToken.End).line
	return startLine != endLine && c.grammarErrorOnNode(equalsGreaterThanToken, Diagnostics.Line_terminator_not_permitted_before_arrow)
}

func (c *Checker) checkGrammarIndexSignatureParameters(node SignatureDeclaration) bool {
	parameter := node.Parameters[0]
	if node.Parameters.length != 1 {
		if parameter {
			return c.grammarErrorOnNode(parameter.Name, Diagnostics.An_index_signature_must_have_exactly_one_parameter)
		} else {
			return c.grammarErrorOnNode(node, Diagnostics.An_index_signature_must_have_exactly_one_parameter)
		}
	}
	c.checkGrammarForDisallowedTrailingComma(node.Parameters, Diagnostics.An_index_signature_cannot_have_a_trailing_comma)
	if parameter.DotDotDotToken != nil {
		return c.grammarErrorOnNode(parameter.DotDotDotToken, Diagnostics.An_index_signature_cannot_have_a_rest_parameter)
	}
	if hasEffectiveModifiers(parameter) {
		return c.grammarErrorOnNode(parameter.Name, Diagnostics.An_index_signature_parameter_cannot_have_an_accessibility_modifier)
	}
	if parameter.QuestionToken != nil {
		return c.grammarErrorOnNode(parameter.QuestionToken, Diagnostics.An_index_signature_parameter_cannot_have_a_question_mark)
	}
	if parameter.Initializer != nil {
		return c.grammarErrorOnNode(parameter.Name, Diagnostics.An_index_signature_parameter_cannot_have_an_initializer)
	}
	if parameter.Type_ == nil {
		return c.grammarErrorOnNode(parameter.Name, Diagnostics.An_index_signature_parameter_must_have_a_type_annotation)
	}
	t := c.getTypeFromTypeNode(parameter.Type_)
	if c.someType(t, func(t *Type) bool {
		return t.flags&TypeFlagsStringOrNumberLiteralOrUnique != 0
	}) || c.isGenericType(t) {
		return c.grammarErrorOnNode(parameter.Name, Diagnostics.An_index_signature_parameter_type_cannot_be_a_literal_type_or_generic_type_Consider_using_a_mapped_object_type_instead)
	}
	if !c.everyType(t, c.isValidIndexKeyType) {
		return c.grammarErrorOnNode(parameter.Name, Diagnostics.An_index_signature_parameter_type_must_be_string_number_symbol_or_a_template_literal_type)
	}
	if node.Type_ == nil {
		return c.grammarErrorOnNode(node, Diagnostics.An_index_signature_must_have_a_type_annotation)
	}
	return false
}

func (c *Checker) checkGrammarIndexSignature(node IndexSignatureDeclaration) bool {
	// Prevent cascading error by short-circuit
	return c.checkGrammarModifiers(node) || c.checkGrammarIndexSignatureParameters(node)
}

func (c *Checker) checkGrammarForAtLeastOneTypeArgument(node *ast.Node, typeArguments *NodeArray[TypeNode]) bool {
	if typeArguments != nil && typeArguments.length == 0 {
		sourceFile := getSourceFileOfNode(node)
		start := typeArguments.pos - len("<")
		end := skipTrivia(sourceFile.Text, typeArguments.end) + len(">")
		return c.grammarErrorAtPos(sourceFile, start, end-start, Diagnostics.Type_argument_list_cannot_be_empty)
	}
	return false
}

func (c *Checker) checkGrammarTypeArguments(node *ast.Node, typeArguments *NodeArray[TypeNode]) bool {
	return c.checkGrammarForDisallowedTrailingComma(typeArguments) || c.checkGrammarForAtLeastOneTypeArgument(node, typeArguments)
}

func (c *Checker) checkGrammarTaggedTemplateChain(node TaggedTemplateExpression) bool {
	if node.QuestionDotToken != nil || node.Flags&ast.NodeFlagsOptionalChain != 0 {
		return c.grammarErrorOnNode(node.Template, Diagnostics.Tagged_template_expressions_are_not_permitted_in_an_optional_chain)
	}
	return false
}

func (c *Checker) checkGrammarHeritageClause(node HeritageClause) bool {
	types := node.Types
	if c.checkGrammarForDisallowedTrailingComma(types) {
		return true
	}
	if types && types.length == 0 {
		listType := tokenToString(node.Token)
		return c.grammarErrorAtPos(node, types.pos, 0, Diagnostics._0_list_cannot_be_empty, listType)
	}
	return core.Some(types, c.checkGrammarExpressionWithTypeArguments)
}

func (c *Checker) checkGrammarExpressionWithTypeArguments(node Union[ExpressionWithTypeArguments, TypeQueryNode]) bool {
	if isExpressionWithTypeArguments(node) && isImportKeyword(node.Expression) && node.TypeArguments != nil {
		return c.grammarErrorOnNode(node, Diagnostics.This_use_of_import_is_invalid_import_calls_can_be_written_but_they_must_have_parentheses_and_cannot_have_type_arguments)
	}
	return c.checkGrammarTypeArguments(node, node.TypeArguments)
}

func (c *Checker) checkGrammarClassDeclarationHeritageClauses(node ClassLikeDeclaration) *bool {
	seenExtendsClause := false
	seenImplementsClause := false

	if !c.checkGrammarModifiers(node) && node.HeritageClauses != nil {
		for _, heritageClause := range node.HeritageClauses {
			if heritageClause.Token == ast.KindExtendsKeyword {
				if seenExtendsClause {
					return c.grammarErrorOnFirstToken(heritageClause, Diagnostics.extends_clause_already_seen)
				}

				if seenImplementsClause {
					return c.grammarErrorOnFirstToken(heritageClause, Diagnostics.extends_clause_must_precede_implements_clause)
				}

				if heritageClause.Types.length > 1 {
					return c.grammarErrorOnFirstToken(heritageClause.Types[1], Diagnostics.Classes_can_only_extend_a_single_class)
				}

				seenExtendsClause = true
			} else {
				Debug.assert(heritageClause.Token == ast.KindImplementsKeyword)
				if seenImplementsClause {
					return c.grammarErrorOnFirstToken(heritageClause, Diagnostics.implements_clause_already_seen)
				}

				seenImplementsClause = true
			}

			// Grammar checking heritageClause inside class declaration
			c.checkGrammarHeritageClause(heritageClause)
		}
	}
}

func (c *Checker) checkGrammarInterfaceDeclaration(node InterfaceDeclaration) bool {
	seenExtendsClause := false

	if node.HeritageClauses != nil {
		for _, heritageClause := range node.HeritageClauses {
			if heritageClause.Token == ast.KindExtendsKeyword {
				if seenExtendsClause {
					return c.grammarErrorOnFirstToken(heritageClause, Diagnostics.extends_clause_already_seen)
				}

				seenExtendsClause = true
			} else {
				Debug.assert(heritageClause.Token == ast.KindImplementsKeyword)
				return c.grammarErrorOnFirstToken(heritageClause, Diagnostics.Interface_declaration_cannot_have_implements_clause)
			}

			// Grammar checking heritageClause inside class declaration
			c.checkGrammarHeritageClause(heritageClause)
		}
	}
	return false
}

func (c *Checker) checkGrammarComputedPropertyName(node *ast.Node) bool {
	// If node is not a computedPropertyName, just skip the grammar checking
	if node.Kind != ast.KindComputedPropertyName {
		return false
	}

	computedPropertyName := node.AsComputedPropertyName()
	if computedPropertyName.Expression.Kind == ast.KindBinaryExpression && computedPropertyName.Expression.AsBinaryExpression().OperatorToken.Kind == ast.KindCommaToken {
		return c.grammarErrorOnNode(computedPropertyName.Expression, Diagnostics.A_comma_expression_is_not_allowed_in_a_computed_property_name)
	}
	return false
}

func (c *Checker) checkGrammarForGenerator(node FunctionLikeDeclaration) *bool {
	if node.AsteriskToken != nil {
		Debug.assert(node.Kind == ast.KindFunctionDeclaration || node.Kind == ast.KindFunctionExpression || node.Kind == ast.KindMethodDeclaration)
		if node.Flags&ast.NodeFlagsAmbient != 0 {
			return c.grammarErrorOnNode(node.AsteriskToken, Diagnostics.Generators_are_not_allowed_in_an_ambient_context)
		}
		if node.Body == nil {
			return c.grammarErrorOnNode(node.AsteriskToken, Diagnostics.An_overload_signature_cannot_be_declared_as_a_generator)
		}
	}
}

func (c *Checker) checkGrammarForInvalidQuestionMark(questionToken *QuestionToken, message DiagnosticMessage) bool {
	return questionToken != nil && c.grammarErrorOnNode(questionToken, message)
}

func (c *Checker) checkGrammarForInvalidExclamationToken(exclamationToken *ExclamationToken, message DiagnosticMessage) bool {
	return exclamationToken != nil && c.grammarErrorOnNode(exclamationToken, message)
}

func (c *Checker) checkGrammarObjectLiteralExpression(node ObjectLiteralExpression, inDestructuring bool) *bool {
	seen := NewMap[string, DeclarationMeaning]()

	for _, prop := range node.Properties {
		if prop.Kind == ast.KindSpreadAssignment {
			if inDestructuring {
				// a rest property cannot be destructured any further
				expression := skipParentheses(prop.Expression)
				if isArrayLiteralExpression(expression) || isObjectLiteralExpression(expression) {
					return c.grammarErrorOnNode(prop.Expression, Diagnostics.A_rest_element_cannot_contain_a_binding_pattern)
				}
			}
			continue
		}
		name := prop.Name
		if name.Kind == ast.KindComputedPropertyName {
			// If the name is not a ComputedPropertyName, the grammar checking will skip it
			c.checkGrammarComputedPropertyName(name)
		}

		if prop.Kind == ast.KindShorthandPropertyAssignment && !inDestructuring && prop.ObjectAssignmentInitializer != nil {
			// having objectAssignmentInitializer is only valid in ObjectAssignmentPattern
			// outside of destructuring it is a syntax error
			c.grammarErrorOnNode(prop.EqualsToken, Diagnostics.Did_you_mean_to_use_a_Colon_An_can_only_follow_a_property_name_when_the_containing_object_literal_is_part_of_a_destructuring_pattern)
		}

		if name.Kind == ast.KindPrivateIdentifier {
			c.grammarErrorOnNode(name, Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies)
		}

		// Modifiers are never allowed on properties except for 'async' on a method declaration
		if canHaveModifiers(prop) && prop.Modifiers != nil {
			for _, mod := range prop.Modifiers {
				if isModifier(mod) && (mod.Kind != ast.KindAsyncKeyword || prop.Kind != ast.KindMethodDeclaration) {
					c.grammarErrorOnNode(mod, Diagnostics._0_modifier_cannot_be_used_here, getTextOfNode(mod))
				}
			}
		} else if canHaveIllegalModifiers(prop) && prop.Modifiers != nil {
			for _, mod := range prop.Modifiers {
				if isModifier(mod) {
					c.grammarErrorOnNode(mod, Diagnostics._0_modifier_cannot_be_used_here, getTextOfNode(mod))
				}
			}
		}

		// ECMA-262 11.1.5 Object Initializer
		// If previous is not undefined then throw a SyntaxError exception if any of the following conditions are true
		// a.This production is contained in strict code and IsDataDescriptor(previous) is true and
		// IsDataDescriptor(propId.descriptor) is true.
		//    b.IsDataDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true.
		//    c.IsAccessorDescriptor(previous) is true and IsDataDescriptor(propId.descriptor) is true.
		//    d.IsAccessorDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true
		// and either both previous and propId.descriptor have[[Get]] fields or both previous and propId.descriptor have[[Set]] fields
		var currentKind DeclarationMeaning
		switch prop.Kind {
		case ast.KindShorthandPropertyAssignment,
			ast.KindPropertyAssignment:
			// Grammar checking for computedPropertyName and shorthandPropertyAssignment
			c.checkGrammarForInvalidExclamationToken(prop.ExclamationToken, Diagnostics.A_definite_assignment_assertion_is_not_permitted_in_this_context)
			c.checkGrammarForInvalidQuestionMark(prop.QuestionToken, Diagnostics.An_object_member_cannot_be_declared_optional)
			if name.Kind == ast.KindNumericLiteral {
				c.checkGrammarNumericLiteral(name)
			}
			if name.Kind == ast.KindBigIntLiteral {
				c.addErrorOrSuggestion(true, createDiagnosticForNode(name, Diagnostics.A_bigint_literal_cannot_be_used_as_a_property_name))
			}
			currentKind = DeclarationMeaningPropertyAssignment
		case ast.KindMethodDeclaration:
			currentKind = DeclarationMeaningMethod
		case ast.KindGetAccessor:
			currentKind = DeclarationMeaningGetAccessor
		case ast.KindSetAccessor:
			currentKind = DeclarationMeaningSetAccessor
		default:
			Debug.assertNever(prop, "Unexpected syntax kind:"+prop.AsNode().Kind)
		}

		if !inDestructuring {
			effectiveName := c.getEffectivePropertyNameForPropertyNameNode(name)
			if effectiveName == nil {
				continue
			}

			existingKind := seen.get(effectiveName)
			if !existingKind {
				seen.set(effectiveName, currentKind)
			} else {
				if (currentKind&DeclarationMeaningMethod != 0) && (existingKind&DeclarationMeaningMethod != 0) {
					c.grammarErrorOnNode(name, Diagnostics.Duplicate_identifier_0, getTextOfNode(name))
				} else if (currentKind&DeclarationMeaningPropertyAssignment != 0) && (existingKind&DeclarationMeaningPropertyAssignment != 0) {
					c.grammarErrorOnNode(name, Diagnostics.An_object_literal_cannot_have_multiple_properties_with_the_same_name, getTextOfNode(name))
				} else if (currentKind&DeclarationMeaningGetOrSetAccessor != 0) && (existingKind&DeclarationMeaningGetOrSetAccessor != 0) {
					if existingKind != DeclarationMeaningGetOrSetAccessor && currentKind != existingKind {
						seen.set(effectiveName, currentKind|existingKind)
					} else {
						return c.grammarErrorOnNode(name, Diagnostics.An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name)
					}
				} else {
					return c.grammarErrorOnNode(name, Diagnostics.An_object_literal_cannot_have_property_and_accessor_with_the_same_name)
				}
			}
		}
	}
}

func (c *Checker) checkGrammarJsxElement(node JsxOpeningLikeElement) *bool {
	c.checkGrammarJsxName(node.TagName)
	c.checkGrammarTypeArguments(node, node.TypeArguments)
	seen := NewMap[string, bool]()

	for _, attr := range node.Attributes.Properties {
		if attr.Kind == ast.KindJsxSpreadAttribute {
			continue
		}

		TODO_IDENTIFIER := attr
		escapedText := getEscapedTextOfJsxAttributeName(name)
		if !seen.get(escapedText) {
			seen.set(escapedText, true)
		} else {
			return c.grammarErrorOnNode(name, Diagnostics.JSX_elements_cannot_have_multiple_attributes_with_the_same_name)
		}

		if initializer != nil && initializer.Kind == ast.KindJsxExpression && initializer.Expression == nil {
			return c.grammarErrorOnNode(initializer, Diagnostics.JSX_attributes_must_only_be_assigned_a_non_empty_expression)
		}
	}
}

func (c *Checker) checkGrammarJsxName(node JsxTagNameExpression) *bool {
	if isPropertyAccessExpression(node) && isJsxNamespacedName(node.Expression) {
		return c.grammarErrorOnNode(node.Expression, Diagnostics.JSX_property_access_expressions_cannot_include_JSX_namespace_names)
	}
	if isJsxNamespacedName(node) && getJSXTransformEnabled(c.compilerOptions) && !isIntrinsicJsxName(node.Namespace.EscapedText) {
		return c.grammarErrorOnNode(node, Diagnostics.React_components_cannot_include_JSX_namespace_names)
	}
}

func (c *Checker) checkGrammarJsxExpression(node JsxExpression) *bool {
	if node.Expression != nil && isCommaSequence(node.Expression) {
		return c.grammarErrorOnNode(node.Expression, Diagnostics.JSX_expressions_may_not_use_the_comma_operator_Did_you_mean_to_write_an_array)
	}
}

func (c *Checker) checkGrammarForInOrForOfStatement(forInOrOfStatement ForInOrOfStatement) bool {
	if c.checkGrammarStatementInAmbientContext(forInOrOfStatement) {
		return true
	}

	if forInOrOfStatement.Kind == ast.KindForOfStatement && forInOrOfStatement.AwaitModifier != nil {
		if forInOrOfStatement.Flags&ast.NodeFlagsAwaitContext == 0 {
			sourceFile := getSourceFileOfNode(forInOrOfStatement)
			if isInTopLevelContext(forInOrOfStatement) {
				if !c.hasParseDiagnostics(sourceFile) {
					if !isEffectiveExternalModule(sourceFile, c.compilerOptions) {
						c.diagnostics.add(createDiagnosticForNode(forInOrOfStatement.AwaitModifier, Diagnostics.for_await_loops_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module))
					}
					switch c.moduleKind {
					case ModuleKindNode16,
						ModuleKindNodeNext:
						if sourceFile.ImpliedNodeFormat == ModuleKindCommonJS {
							c.diagnostics.add(createDiagnosticForNode(forInOrOfStatement.AwaitModifier, Diagnostics.The_current_file_is_a_CommonJS_module_and_cannot_use_await_at_the_top_level))
							break
						}
						fallthrough
					case ModuleKindES2022,
						ModuleKindESNext,
						ModuleKindPreserve,
						ModuleKindSystem:
						if c.languageVersion >= ScriptTargetES2017 {
							break
						}
						fallthrough
					default:
						c.diagnostics.add(createDiagnosticForNode(forInOrOfStatement.AwaitModifier, Diagnostics.Top_level_for_await_loops_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_node16_nodenext_or_preserve_and_the_target_option_is_set_to_es2017_or_higher))
					}
				}
			} else {
				// use of 'for-await-of' in non-async function
				if !c.hasParseDiagnostics(sourceFile) {
					diagnostic := createDiagnosticForNode(forInOrOfStatement.AwaitModifier, Diagnostics.for_await_loops_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules)
					func_ := getContainingFunction(forInOrOfStatement)
					if func_ != nil && func_.Kind != ast.KindConstructor {
						Debug.assert((getFunctionFlags(func_)&FunctionFlagsAsync) == 0, "Enclosing function should never be an async function.")
						relatedInfo := createDiagnosticForNode(func_, Diagnostics.Did_you_mean_to_mark_this_function_as_async)
						addRelatedInfo(diagnostic, relatedInfo)
					}
					c.diagnostics.add(diagnostic)
					return true
				}
			}
		}
	}

	if isForOfStatement(forInOrOfStatement) && forInOrOfStatement.Flags&ast.NodeFlagsAwaitContext == 0 && isIdentifier(forInOrOfStatement.Initializer) && forInOrOfStatement.Initializer.EscapedText == "async" {
		c.grammarErrorOnNode(forInOrOfStatement.Initializer, Diagnostics.The_left_hand_side_of_a_for_of_statement_may_not_be_async)
		return false
	}

	if forInOrOfStatement.Initializer.Kind == ast.KindVariableDeclarationList {
		variableList := forInOrOfStatement.Initializer.AsVariableDeclarationList()
		if !c.checkGrammarVariableDeclarationList(variableList) {
			declarations := variableList.Declarations

			// declarations.length can be zero if there is an error in variable declaration in for-of or for-in
			// See http://www.ecma-international.org/ecma-262/6.0/#sec-for-in-and-for-of-statements for details
			// For example:
			//      var let = 10;
			//      for (let of [1,2,3]) {} // this is invalid ES6 syntax
			//      for (let in [1,2,3]) {} // this is invalid ES6 syntax
			// We will then want to skip on grammar checking on variableList declaration
			if declarations.length == 0 {
				return false
			}

			if declarations.length > 1 {
				var diagnostic any
				if forInOrOfStatement.Kind == ast.KindForInStatement {
					diagnostic = Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement
				} else {
					diagnostic = Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement
				}
				return c.grammarErrorOnFirstToken(variableList.Declarations[1], diagnostic)
			}
			firstDeclaration := declarations[0]

			if firstDeclaration.Initializer != nil {
				var diagnostic any
				if forInOrOfStatement.Kind == ast.KindForInStatement {
					diagnostic = Diagnostics.The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer
				} else {
					diagnostic = Diagnostics.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer
				}
				return c.grammarErrorOnNode(firstDeclaration.Name, diagnostic)
			}
			if firstDeclaration.Type_ != nil {
				var diagnostic any
				if forInOrOfStatement.Kind == ast.KindForInStatement {
					diagnostic = Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation
				} else {
					diagnostic = Diagnostics.The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation
				}
				return c.grammarErrorOnNode(firstDeclaration, diagnostic)
			}
		}
	}

	return false
}

func (c *Checker) checkGrammarAccessor(accessor AccessorDeclaration) bool {
	if accessor.Flags&ast.NodeFlagsAmbient == 0 && (accessor.Parent.Kind != ast.KindTypeLiteral) && (accessor.Parent.Kind != ast.KindInterfaceDeclaration) {
		if c.languageVersion < ScriptTargetES2015 && isPrivateIdentifier(accessor.Name) {
			return c.grammarErrorOnNode(accessor.Name, Diagnostics.Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher)
		}
		if accessor.Body == nil && !hasSyntacticModifier(accessor, ast.ModifierFlagsAbstract) {
			return c.grammarErrorAtPos(accessor, accessor.End-1, len(";"), Diagnostics._0_expected, "{")
		}
	}
	if accessor.Body != nil {
		if hasSyntacticModifier(accessor, ast.ModifierFlagsAbstract) {
			return c.grammarErrorOnNode(accessor, Diagnostics.An_abstract_accessor_cannot_have_an_implementation)
		}
		if accessor.Parent.Kind == ast.KindTypeLiteral || accessor.Parent.Kind == ast.KindInterfaceDeclaration {
			return c.grammarErrorOnNode(accessor.Body, Diagnostics.An_implementation_cannot_be_declared_in_ambient_contexts)
		}
	}
	if accessor.TypeParameters != nil {
		return c.grammarErrorOnNode(accessor.Name, Diagnostics.An_accessor_cannot_have_type_parameters)
	}
	if !c.doesAccessorHaveCorrectParameterCount(accessor) {
		return c.grammarErrorOnNode(accessor.Name, ifElse(accessor.Kind == ast.KindGetAccessor, Diagnostics.A_get_accessor_cannot_have_parameters, Diagnostics.A_set_accessor_must_have_exactly_one_parameter))
	}
	if accessor.Kind == ast.KindSetAccessor {
		if accessor.Type_ != nil {
			return c.grammarErrorOnNode(accessor.Name, Diagnostics.A_set_accessor_cannot_have_a_return_type_annotation)
		}
		parameter := Debug.checkDefined(getSetAccessorValueParameter(accessor), "Return value does not match parameter count assertion.")
		if parameter.DotDotDotToken != nil {
			return c.grammarErrorOnNode(parameter.DotDotDotToken, Diagnostics.A_set_accessor_cannot_have_rest_parameter)
		}
		if parameter.QuestionToken != nil {
			return c.grammarErrorOnNode(parameter.QuestionToken, Diagnostics.A_set_accessor_cannot_have_an_optional_parameter)
		}
		if parameter.Initializer != nil {
			return c.grammarErrorOnNode(accessor.Name, Diagnostics.A_set_accessor_parameter_cannot_have_an_initializer)
		}
	}
	return false
}

/** Does the accessor have the right number of parameters?
 * A get accessor has no parameters or a single `this` parameter.
 * A set accessor has one parameter or a `this` parameter and one more parameter.
 */

func (c *Checker) doesAccessorHaveCorrectParameterCount(accessor AccessorDeclaration) /* TODO(TS-TO-GO) inferred type boolean | ParameterDeclaration */ any {
	return c.getAccessorThisParameter(accessor) || accessor.Parameters.length == (ifElse(accessor.Kind == ast.KindGetAccessor, 0, 1))
}

func (c *Checker) getAccessorThisParameter(accessor AccessorDeclaration) *ParameterDeclaration {
	if accessor.Parameters.length == (ifElse(accessor.Kind == ast.KindGetAccessor, 1, 2)) {
		return getThisParameter(accessor)
	}
}

func (c *Checker) checkGrammarTypeOperatorNode(node TypeOperatorNode) *bool {
	if node.Operator == ast.KindUniqueKeyword {
		if node.Type_.Kind != ast.KindSymbolKeyword {
			return c.grammarErrorOnNode(node.Type_, Diagnostics._0_expected, tokenToString(ast.KindSymbolKeyword))
		}
		parent := walkUpParenthesizedTypes(node.Parent)
		if isInJSFile(parent) && isJSDocTypeExpression(parent) {
			host := getJSDocHost(parent)
			if host != nil {
				parent = getSingleVariableOfVariableStatement(host) || host
			}
		}
		switch parent.Kind {
		case ast.KindVariableDeclaration:
			decl := parent.AsVariableDeclaration()
			if decl.Name.Kind != ast.KindIdentifier {
				return c.grammarErrorOnNode(node, Diagnostics.unique_symbol_types_may_not_be_used_on_a_variable_declaration_with_a_binding_name)
			}
			if !isVariableDeclarationInVariableStatement(decl) {
				return c.grammarErrorOnNode(node, Diagnostics.unique_symbol_types_are_only_allowed_on_variables_in_a_variable_statement)
			}
			if decl.Parent.Flags&ast.NodeFlagsConst == 0 {
				return c.grammarErrorOnNode(parent.AsVariableDeclaration().Name, Diagnostics.A_variable_whose_type_is_a_unique_symbol_type_must_be_const)
			}
		case ast.KindPropertyDeclaration:
			if !isStatic(parent) || !hasEffectiveReadonlyModifier(parent) {
				return c.grammarErrorOnNode(parent.AsPropertyDeclaration().Name, Diagnostics.A_property_of_a_class_whose_type_is_a_unique_symbol_type_must_be_both_static_and_readonly)
			}
		case ast.KindPropertySignature:
			if !hasSyntacticModifier(parent, ast.ModifierFlagsReadonly) {
				return c.grammarErrorOnNode(parent.AsPropertySignature().Name, Diagnostics.A_property_of_an_interface_or_type_literal_whose_type_is_a_unique_symbol_type_must_be_readonly)
			}
		default:
			return c.grammarErrorOnNode(node, Diagnostics.unique_symbol_types_are_not_allowed_here)
		}
	} else if node.Operator == ast.KindReadonlyKeyword {
		if node.Type_.Kind != ast.KindArrayType && node.Type_.Kind != ast.KindTupleType {
			return c.grammarErrorOnFirstToken(node, Diagnostics.readonly_type_modifier_is_only_permitted_on_array_and_tuple_literal_types, tokenToString(ast.KindSymbolKeyword))
		}
	}
}

func (c *Checker) checkGrammarForInvalidDynamicName(node DeclarationName, message DiagnosticMessage) *bool {
	if c.isNonBindableDynamicName(node) {
		return c.grammarErrorOnNode(node, message)
	}
}

func (c *Checker) checkGrammarMethod(node Union[MethodDeclaration, MethodSignature]) *bool {
	if c.checkGrammarFunctionLikeDeclaration(node) {
		return true
	}

	if node.Kind == ast.KindMethodDeclaration {
		if node.Parent.Kind == ast.KindObjectLiteralExpression {
			// We only disallow modifier on a method declaration if it is a property of object-literal-expression
			if node.Modifiers != nil && !(node.Modifiers.length == 1 && core.FirstOrNil(node.Modifiers).Kind == ast.KindAsyncKeyword) {
				return c.grammarErrorOnFirstToken(node, Diagnostics.Modifiers_cannot_appear_here)
			} else if c.checkGrammarForInvalidQuestionMark(node.QuestionToken, Diagnostics.An_object_member_cannot_be_declared_optional) {
				return true
			} else if c.checkGrammarForInvalidExclamationToken(node.ExclamationToken, Diagnostics.A_definite_assignment_assertion_is_not_permitted_in_this_context) {
				return true
			} else if node.Body == nil {
				return c.grammarErrorAtPos(node, node.End-1, len(";"), Diagnostics._0_expected, "{")
			}
		}
		if c.checkGrammarForGenerator(node) {
			return true
		}
	}

	if isClassLike(node.Parent) {
		if c.languageVersion < ScriptTargetES2015 && isPrivateIdentifier(node.Name) {
			return c.grammarErrorOnNode(node.Name, Diagnostics.Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher)
		}
		// Technically, computed properties in ambient contexts is disallowed
		// for property declarations and accessors too, not just methods.
		// However, property declarations disallow computed names in general,
		// and accessors are not allowed in ambient contexts in general,
		// so this error only really matters for methods.
		if node.Flags&ast.NodeFlagsAmbient != 0 {
			return c.checkGrammarForInvalidDynamicName(node.Name, Diagnostics.A_computed_property_name_in_an_ambient_context_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type)
		} else if node.Kind == ast.KindMethodDeclaration && node.Body == nil {
			return c.checkGrammarForInvalidDynamicName(node.Name, Diagnostics.A_computed_property_name_in_a_method_overload_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type)
		}
	} else if node.Parent.Kind == ast.KindInterfaceDeclaration {
		return c.checkGrammarForInvalidDynamicName(node.Name, Diagnostics.A_computed_property_name_in_an_interface_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type)
	} else if node.Parent.Kind == ast.KindTypeLiteral {
		return c.checkGrammarForInvalidDynamicName(node.Name, Diagnostics.A_computed_property_name_in_a_type_literal_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type)
	}
}

func (c *Checker) checkGrammarBreakOrContinueStatement(node BreakOrContinueStatement) bool {
	var current *ast.Node = node
	for current {
		if isFunctionLikeOrClassStaticBlockDeclaration(current) {
			return c.grammarErrorOnNode(node, Diagnostics.Jump_target_cannot_cross_function_boundary)
		}

		switch current.Kind {
		case ast.KindLabeledStatement:
			if node.Label != nil && current.AsLabeledStatement().Label.EscapedText == node.Label.EscapedText {
				// found matching label - verify that label usage is correct
				// continue can only target labels that are on iteration statements
				isMisplacedContinueLabel := node.Kind == ast.KindContinueStatement && !isIterationStatement(current.AsLabeledStatement().Statement, true /*lookInLabeledStatements*/)

				if isMisplacedContinueLabel {
					return c.grammarErrorOnNode(node, Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement)
				}

				return false
			}
		case ast.KindSwitchStatement:
			if node.Kind == ast.KindBreakStatement && node.Label == nil {
				// unlabeled break within switch statement - ok
				return false
			}
		default:
			if isIterationStatement(current, false /*lookInLabeledStatements*/) && node.Label == nil {
				// unlabeled break or continue within iteration statement - ok
				return false
			}
		}

		current = current.Parent
	}

	if node.Label != nil {
		var message any
		if node.Kind == ast.KindBreakStatement {
			message = Diagnostics.A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement
		} else {
			message = Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement
		}

		return c.grammarErrorOnNode(node, message)
	} else {
		var message any
		if node.Kind == ast.KindBreakStatement {
			message = Diagnostics.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement
		} else {
			message = Diagnostics.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement
		}
		return c.grammarErrorOnNode(node, message)
	}
}

func (c *Checker) checkGrammarBindingElement(node BindingElement) *bool {
	if node.DotDotDotToken != nil {
		elements := node.Parent.Elements
		if node != core.LastOrNil(elements) {
			return c.grammarErrorOnNode(node, Diagnostics.A_rest_element_must_be_last_in_a_destructuring_pattern)
		}
		c.checkGrammarForDisallowedTrailingComma(elements, Diagnostics.A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma)

		if node.PropertyName != nil {
			return c.grammarErrorOnNode(node.Name, Diagnostics.A_rest_element_cannot_have_a_property_name)
		}
	}

	if node.DotDotDotToken != nil && node.Initializer != nil {
		// Error on equals token which immediately precedes the initializer
		return c.grammarErrorAtPos(node, node.Initializer.Pos-1, 1, Diagnostics.A_rest_element_cannot_have_an_initializer)
	}
}

func (c *Checker) isStringOrNumberLiteralExpression(expr Expression) bool {
	return isStringOrNumericLiteralLike(expr) || expr.Kind == ast.KindPrefixUnaryExpression && expr.AsPrefixUnaryExpression().Operator == ast.KindMinusToken && expr.AsPrefixUnaryExpression().Operand.Kind == ast.KindNumericLiteral
}

func (c *Checker) isBigIntLiteralExpression(expr Expression) bool {
	return expr.Kind == ast.KindBigIntLiteral || expr.Kind == ast.KindPrefixUnaryExpression && expr.AsPrefixUnaryExpression().Operator == ast.KindMinusToken && expr.AsPrefixUnaryExpression().Operand.Kind == ast.KindBigIntLiteral
}

func (c *Checker) isSimpleLiteralEnumReference(expr Expression) *bool {
	if (isPropertyAccessExpression(expr) || (isElementAccessExpression(expr) && c.isStringOrNumberLiteralExpression(expr.ArgumentExpression))) && isEntityNameExpression(expr.Expression) {
		return c.checkExpressionCached(expr).flags&TypeFlagsEnumLike != 0
	}
}

func (c *Checker) checkAmbientInitializer(node Union[VariableDeclaration, PropertyDeclaration, PropertySignature]) *bool {
	initializer := node.Initializer
	if initializer != nil {
		isInvalidInitializer := !(c.isStringOrNumberLiteralExpression(initializer) || c.isSimpleLiteralEnumReference(initializer) || initializer.Kind == ast.KindTrueKeyword || initializer.Kind == ast.KindFalseKeyword || c.isBigIntLiteralExpression(initializer))
		isConstOrReadonly := isDeclarationReadonly(node) || isVariableDeclaration(node) && (c.isVarConstLike(node))
		if isConstOrReadonly && node.Type_ == nil {
			if isInvalidInitializer {
				return c.grammarErrorOnNode(initializer, Diagnostics.A_const_initializer_in_an_ambient_context_must_be_a_string_or_numeric_literal_or_literal_enum_reference)
			}
		} else {
			return c.grammarErrorOnNode(initializer, Diagnostics.Initializers_are_not_allowed_in_ambient_contexts)
		}
	}
}

func (c *Checker) checkGrammarVariableDeclaration(node VariableDeclaration) bool {
	nodeFlags := c.getCombinedNodeFlagsCached(node)
	blockScopeKind := nodeFlags & ast.NodeFlagsBlockScoped
	if isBindingPattern(node.Name) {
		switch blockScopeKind {
		case ast.NodeFlagsAwaitUsing:
			return c.grammarErrorOnNode(node, Diagnostics._0_declarations_may_not_have_binding_patterns, "await using")
		case ast.NodeFlagsUsing:
			return c.grammarErrorOnNode(node, Diagnostics._0_declarations_may_not_have_binding_patterns, "using")
		}
	}

	if node.Parent.Parent.Kind != ast.KindForInStatement && node.Parent.Parent.Kind != ast.KindForOfStatement {
		if nodeFlags&ast.NodeFlagsAmbient != 0 {
			c.checkAmbientInitializer(node)
		} else if node.Initializer == nil {
			if isBindingPattern(node.Name) && !isBindingPattern(node.Parent) {
				return c.grammarErrorOnNode(node, Diagnostics.A_destructuring_declaration_must_have_an_initializer)
			}
			switch blockScopeKind {
			case ast.NodeFlagsAwaitUsing:
				return c.grammarErrorOnNode(node, Diagnostics._0_declarations_must_be_initialized, "await using")
			case ast.NodeFlagsUsing:
				return c.grammarErrorOnNode(node, Diagnostics._0_declarations_must_be_initialized, "using")
			case ast.NodeFlagsConst:
				return c.grammarErrorOnNode(node, Diagnostics._0_declarations_must_be_initialized, "const")
			}
		}
	}

	if node.ExclamationToken != nil && (node.Parent.Parent.Kind != ast.KindVariableStatement || node.Type_ == nil || node.Initializer != nil || nodeFlags&ast.NodeFlagsAmbient != 0) {
		var message any
		switch {
		case node.Initializer != nil:
			message = Diagnostics.Declarations_with_initializers_cannot_also_have_definite_assignment_assertions
		case node.Type_ == nil:
			message = Diagnostics.Declarations_with_definite_assignment_assertions_must_also_have_type_annotations
		default:
			message = Diagnostics.A_definite_assignment_assertion_is_not_permitted_in_this_context
		}
		return c.grammarErrorOnNode(node.ExclamationToken, message)
	}

	if host.getEmitModuleFormatOfFile(getSourceFileOfNode(node)) < ModuleKindSystem && node.Parent.Parent.Flags&ast.NodeFlagsAmbient == 0 && hasSyntacticModifier(node.Parent.Parent, ast.ModifierFlagsExport) {
		c.checkESModuleMarker(node.Name)
	}

	// 1. LexicalDeclaration : LetOrConst BindingList ;
	// It is a Syntax Error if the BoundNames of BindingList contains "let".
	// 2. ForDeclaration: ForDeclaration : LetOrConst ForBinding
	// It is a Syntax Error if the BoundNames of ForDeclaration contains "let".

	// It is a SyntaxError if a VariableDeclaration or VariableDeclarationNoIn occurs within strict code
	// and its Identifier is eval or arguments
	return blockScopeKind != 0 && c.checkGrammarNameInLetOrConstDeclarations(node.Name)
}

func (c *Checker) checkESModuleMarker(name Union[Identifier, BindingPattern]) bool {
	if name.Kind == ast.KindIdentifier {
		if idText(name) == "__esModule" {
			return c.grammarErrorOnNodeSkippedOn("noEmit", name, Diagnostics.Identifier_expected_esModule_is_reserved_as_an_exported_marker_when_transforming_ECMAScript_modules)
		}
	} else {
		elements := name.Elements
		for _, element := range elements {
			if !isOmittedExpression(element) {
				return c.checkESModuleMarker(element.Name)
			}
		}
	}
	return false
}

func (c *Checker) checkGrammarNameInLetOrConstDeclarations(name Union[Identifier, BindingPattern]) bool {
	if name.Kind == ast.KindIdentifier {
		if name.EscapedText == "let" {
			return c.grammarErrorOnNode(name, Diagnostics.let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations)
		}
	} else {
		elements := name.Elements
		for _, element := range elements {
			if !isOmittedExpression(element) {
				c.checkGrammarNameInLetOrConstDeclarations(element.Name)
			}
		}
	}
	return false
}

func (c *Checker) checkGrammarVariableDeclarationList(declarationList VariableDeclarationList) bool {
	declarations := declarationList.Declarations
	if c.checkGrammarForDisallowedTrailingComma(declarationList.Declarations) {
		return true
	}

	if declarationList.Declarations.length == 0 {
		return c.grammarErrorAtPos(declarationList, declarations.pos, declarations.end-declarations.pos, Diagnostics.Variable_declaration_list_cannot_be_empty)
	}

	blockScopeFlags := declarationList.Flags & ast.NodeFlagsBlockScoped
	if (blockScopeFlags == ast.NodeFlagsUsing || blockScopeFlags == ast.NodeFlagsAwaitUsing) && isForInStatement(declarationList.Parent) {
		return c.grammarErrorOnNode(declarationList, ifElse(blockScopeFlags == ast.NodeFlagsUsing, Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_using_declaration, Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_an_await_using_declaration))
	}

	if blockScopeFlags == ast.NodeFlagsAwaitUsing {
		return c.checkAwaitGrammar(declarationList)
	}

	return false
}

func (c *Checker) allowLetAndConstDeclarations(parent *ast.Node) bool {
	switch parent.Kind {
	case ast.KindIfStatement,
		ast.KindDoStatement,
		ast.KindWhileStatement,
		ast.KindWithStatement,
		ast.KindForStatement,
		ast.KindForInStatement,
		ast.KindForOfStatement:
		return false
	case ast.KindLabeledStatement:
		return c.allowLetAndConstDeclarations(parent.Parent)
	}

	return true
}

func (c *Checker) checkGrammarForDisallowedBlockScopedVariableStatement(node VariableStatement) *bool {
	if !c.allowLetAndConstDeclarations(node.Parent) {
		blockScopeKind := c.getCombinedNodeFlagsCached(node.DeclarationList) & ast.NodeFlagsBlockScoped
		if blockScopeKind != 0 {
			var keyword /* TODO(TS-TO-GO) inferred type "await using" | "using" | "const" | "let" */ any
			switch {
			case blockScopeKind == ast.NodeFlagsLet:
				keyword = "let"
			case blockScopeKind == ast.NodeFlagsConst:
				keyword = "const"
			case blockScopeKind == ast.NodeFlagsUsing:
				keyword = "using"
			case blockScopeKind == ast.NodeFlagsAwaitUsing:
				keyword = "await using"
			default:
				keyword = Debug.fail("Unknown BlockScope flag")
			}
			return c.grammarErrorOnNode(node, Diagnostics._0_declarations_can_only_be_declared_inside_a_block, keyword)
		}
	}
}

func (c *Checker) checkGrammarMetaProperty(node MetaProperty) *bool {
	escapedText := node.Name.EscapedText
	switch node.KeywordToken {
	case ast.KindNewKeyword:
		if escapedText != "target" {
			return c.grammarErrorOnNode(node.Name, Diagnostics._0_is_not_a_valid_meta_property_for_keyword_1_Did_you_mean_2, unescapeLeadingUnderscores(node.Name.EscapedText), tokenToString(node.KeywordToken), "target")
		}
	case ast.KindImportKeyword:
		if escapedText != "meta" {
			return c.grammarErrorOnNode(node.Name, Diagnostics._0_is_not_a_valid_meta_property_for_keyword_1_Did_you_mean_2, unescapeLeadingUnderscores(node.Name.EscapedText), tokenToString(node.KeywordToken), "meta")
		}
	}
}

func (c *Checker) hasParseDiagnostics(sourceFile SourceFile) bool {
	return sourceFile.ParseDiagnostics.length > 0
}

func (c *Checker) grammarErrorOnFirstToken(node *ast.Node, message DiagnosticMessage, args DiagnosticArguments) bool {
	sourceFile := getSourceFileOfNode(node)
	if !c.hasParseDiagnostics(sourceFile) {
		span := getSpanOfTokenAtPosition(sourceFile, node.Pos)
		c.diagnostics.add(createFileDiagnostic(sourceFile, span.start, span.length, message, args...))
		return true
	}
	return false
}

func (c *Checker) grammarErrorAtPos(nodeForSourceFile *ast.Node, start number, length number, message DiagnosticMessage, args DiagnosticArguments) bool {
	sourceFile := getSourceFileOfNode(nodeForSourceFile)
	if !c.hasParseDiagnostics(sourceFile) {
		c.diagnostics.add(createFileDiagnostic(sourceFile, start, length, message, args...))
		return true
	}
	return false
}

func (c *Checker) grammarErrorOnNodeSkippedOn(key CompilerOptions, node *ast.Node, message DiagnosticMessage, args DiagnosticArguments) bool {
	sourceFile := getSourceFileOfNode(node)
	if !c.hasParseDiagnostics(sourceFile) {
		c.errorSkippedOn(key, node, message, args...)
		return true
	}
	return false
}

func (c *Checker) grammarErrorOnNode(node *ast.Node, message DiagnosticMessage, args DiagnosticArguments) bool {
	sourceFile := getSourceFileOfNode(node)
	if !c.hasParseDiagnostics(sourceFile) {
		c.diagnostics.add(createDiagnosticForNode(node, message, args...))
		return true
	}
	return false
}

func (c *Checker) checkGrammarConstructorTypeParameters(node ConstructorDeclaration) *bool {
	var jsdocTypeParameters *[]TypeParameterDeclaration
	if isInJSFile(node) {
		jsdocTypeParameters = getJSDocTypeParameterDeclarations(node)
	} else {
		jsdocTypeParameters = nil
	}
	range_ := node.TypeParameters || jsdocTypeParameters && firstOrUndefined(jsdocTypeParameters)
	if range_ != nil {
		var pos number
		if range_.pos == range_.end {
			pos = range_.pos
		} else {
			pos = skipTrivia(getSourceFileOfNode(node).Text, range_.pos)
		}
		return c.grammarErrorAtPos(node, pos, range_.end-pos, Diagnostics.Type_parameters_cannot_appear_on_a_constructor_declaration)
	}
}

func (c *Checker) checkGrammarConstructorTypeAnnotation(node ConstructorDeclaration) *bool {
	t := node.Type_ || getEffectiveReturnTypeNode(node)
	if t {
		return c.grammarErrorOnNode(t, Diagnostics.Type_annotation_cannot_appear_on_a_constructor_declaration)
	}
}

func (c *Checker) checkGrammarProperty(node Union[PropertyDeclaration, PropertySignature]) *bool {
	if isComputedPropertyName(node.Name) && isBinaryExpression(node.Name.Expression) && node.Name.Expression.OperatorToken.Kind == ast.KindInKeyword {
		return c.grammarErrorOnNode(node.Parent.Members[0], Diagnostics.A_mapped_type_may_not_declare_properties_or_methods)
	}
	if isClassLike(node.Parent) {
		if isStringLiteral(node.Name) && node.Name.Text == "constructor" {
			return c.grammarErrorOnNode(node.Name, Diagnostics.Classes_may_not_have_a_field_named_constructor)
		}
		if c.checkGrammarForInvalidDynamicName(node.Name, Diagnostics.A_computed_property_name_in_a_class_property_declaration_must_have_a_simple_literal_type_or_a_unique_symbol_type) {
			return true
		}
		if c.languageVersion < ScriptTargetES2015 && isPrivateIdentifier(node.Name) {
			return c.grammarErrorOnNode(node.Name, Diagnostics.Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher)
		}
		if c.languageVersion < ScriptTargetES2015 && isAutoAccessorPropertyDeclaration(node) {
			return c.grammarErrorOnNode(node.Name, Diagnostics.Properties_with_the_accessor_modifier_are_only_available_when_targeting_ECMAScript_2015_and_higher)
		}
		if isAutoAccessorPropertyDeclaration(node) && c.checkGrammarForInvalidQuestionMark(node.QuestionToken, Diagnostics.An_accessor_property_cannot_be_declared_optional) {
			return true
		}
	} else if node.Parent.Kind == ast.KindInterfaceDeclaration {
		if c.checkGrammarForInvalidDynamicName(node.Name, Diagnostics.A_computed_property_name_in_an_interface_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type) {
			return true
		}

		// Interfaces cannot contain property declarations
		Debug.assertNode(node, isPropertySignature)
		if node.Initializer != nil {
			return c.grammarErrorOnNode(node.Initializer, Diagnostics.An_interface_property_cannot_have_an_initializer)
		}
	} else if isTypeLiteralNode(node.Parent) {
		if c.checkGrammarForInvalidDynamicName(node.Name, Diagnostics.A_computed_property_name_in_a_type_literal_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type) {
			return true
		}
		// Type literals cannot contain property declarations
		Debug.assertNode(node, isPropertySignature)
		if node.Initializer != nil {
			return c.grammarErrorOnNode(node.Initializer, Diagnostics.A_type_literal_property_cannot_have_an_initializer)
		}
	}

	if node.Flags&ast.NodeFlagsAmbient != 0 {
		c.checkAmbientInitializer(node)
	}

	if isPropertyDeclaration(node) && node.ExclamationToken != nil && (!isClassLike(node.Parent) || node.Type_ == nil || node.Initializer != nil || node.Flags&ast.NodeFlagsAmbient != 0 || isStatic(node) || hasAbstractModifier(node)) {
		var message any
		switch {
		case node.Initializer != nil:
			message = Diagnostics.Declarations_with_initializers_cannot_also_have_definite_assignment_assertions
		case node.Type_ == nil:
			message = Diagnostics.Declarations_with_definite_assignment_assertions_must_also_have_type_annotations
		default:
			message = Diagnostics.A_definite_assignment_assertion_is_not_permitted_in_this_context
		}
		return c.grammarErrorOnNode(node.ExclamationToken, message)
	}
}

func (c *Checker) checkGrammarTopLevelElementForRequiredDeclareModifier(node *ast.Node) bool {
	// A declare modifier is required for any top level .d.ts declaration except export=, export default, export as namespace
	// interfaces and imports categories:
	//
	//  DeclarationElement:
	//     ExportAssignment
	//     export_opt   InterfaceDeclaration
	//     export_opt   TypeAliasDeclaration
	//     export_opt   ImportDeclaration
	//     export_opt   ExternalImportDeclaration
	//     export_opt   AmbientDeclaration
	//
	// TODO: The spec needs to be amended to reflect this grammar.
	if node.Kind == ast.KindInterfaceDeclaration || node.Kind == ast.KindTypeAliasDeclaration || node.Kind == ast.KindImportDeclaration || node.Kind == ast.KindImportEqualsDeclaration || node.Kind == ast.KindExportDeclaration || node.Kind == ast.KindExportAssignment || node.Kind == ast.KindNamespaceExportDeclaration || hasSyntacticModifier(node, ast.ModifierFlagsAmbient|ast.ModifierFlagsExport|ast.ModifierFlagsDefault) {
		return false
	}

	return c.grammarErrorOnFirstToken(node, Diagnostics.Top_level_declarations_in_d_ts_files_must_start_with_either_a_declare_or_export_modifier)
}

func (c *Checker) checkGrammarTopLevelElementsForRequiredDeclareModifier(file SourceFile) bool {
	for _, decl := range file.Statements {
		if isDeclaration(decl) || decl.Kind == ast.KindVariableStatement {
			if c.checkGrammarTopLevelElementForRequiredDeclareModifier(decl) {
				return true
			}
		}
	}
	return false
}

func (c *Checker) checkGrammarSourceFile(node SourceFile) bool {
	return node.Flags&ast.NodeFlagsAmbient != 0 && c.checkGrammarTopLevelElementsForRequiredDeclareModifier(node)
}

func (c *Checker) checkGrammarStatementInAmbientContext(node *ast.Node) bool {
	if node.Flags&ast.NodeFlagsAmbient != 0 {
		// Find containing block which is either Block, ModuleBlock, SourceFile
		links := c.getNodeLinks(node)
		if !links.hasReportedStatementInAmbientContext && (isFunctionLike(node.Parent) || isAccessor(node.Parent)) {
			c.getNodeLinks(node).hasReportedStatementInAmbientContext = c.grammarErrorOnFirstToken(node, Diagnostics.An_implementation_cannot_be_declared_in_ambient_contexts)
			return c.getNodeLinks(node).hasReportedStatementInAmbientContext
		}

		// We are either parented by another statement, or some sort of block.
		// If we're in a block, we only want to really report an error once
		// to prevent noisiness.  So use a bit on the block to indicate if
		// this has already been reported, and don't report if it has.
		//
		if node.Parent.Kind == ast.KindBlock || node.Parent.Kind == ast.KindModuleBlock || node.Parent.Kind == ast.KindSourceFile {
			links := c.getNodeLinks(node.Parent)
			// Check if the containing block ever report this error
			if !links.hasReportedStatementInAmbientContext {
				links.hasReportedStatementInAmbientContext = c.grammarErrorOnFirstToken(node, Diagnostics.Statements_are_not_allowed_in_ambient_contexts)
				return links.hasReportedStatementInAmbientContext
			}
		} else {
			// We must be parented by a statement.  If so, there's no need
			// to report the error as our parent will have already done it.
			// Debug.assert(isStatement(node.parent));
		}
	}
	return false
}

func (c *Checker) checkGrammarNumericLiteral(node NumericLiteral) {
	// Realism (size) checking
	// We should test against `getTextOfNode(node)` rather than `node.text`, because `node.text` for large numeric literals can contain "."
	// e.g. `node.text` for numeric literal `1100000000000000000000` is `1.1e21`.
	isFractional := getTextOfNode(node).includes(".")
	isScientific := node.NumericLiteralFlags & TokenFlagsScientific

	// Scientific notation (e.g. 2e54 and 1e00000000010) can't be converted to bigint
	// Fractional numbers (e.g. 9000000000000000.001) are inherently imprecise anyway
	if isFractional || isScientific != 0 {
		return
	}

	// Here `node` is guaranteed to be a numeric literal representing an integer.
	// We need to judge whether the integer `node` represents is <= 2 ** 53 - 1, which can be accomplished by comparing to `value` defined below because:
	// 1) when `node` represents an integer <= 2 ** 53 - 1, `node.text` is its exact string representation and thus `value` precisely represents the integer.
	// 2) otherwise, although `node.text` may be imprecise string representation, its mathematical value and consequently `value` cannot be less than 2 ** 53,
	//    thus the result of the predicate won't be affected.
	value := +node.Text
	if value <= 2**53-1 {
		return
	}

	c.addErrorOrSuggestion(false, createDiagnosticForNode(node, Diagnostics.Numeric_literals_with_absolute_values_equal_to_2_53_or_greater_are_too_large_to_be_represented_accurately_as_integers))
}

func (c *Checker) checkGrammarBigIntLiteral(node BigIntLiteral) bool {
	literalType := isLiteralTypeNode(node.Parent) || isPrefixUnaryExpression(node.Parent) && isLiteralTypeNode(node.Parent.Parent)
	if !literalType {
		if c.languageVersion < ScriptTargetES2020 {
			if c.grammarErrorOnNode(node, Diagnostics.BigInt_literals_are_not_available_when_targeting_lower_than_ES2020) {
				return true
			}
		}
	}
	return false
}

func (c *Checker) grammarErrorAfterFirstToken(node *ast.Node, message DiagnosticMessage, args DiagnosticArguments) bool {
	sourceFile := getSourceFileOfNode(node)
	if !c.hasParseDiagnostics(sourceFile) {
		span := getSpanOfTokenAtPosition(sourceFile, node.Pos)
		c.diagnostics.add(createFileDiagnostic(sourceFile, textSpanEnd(span), 0 /*length*/, message, args...))
		return true
	}
	return false
}

func (c *Checker) getAmbientModules() []*ast.Symbol {
	if c.ambientModulesCache == nil {
		c.ambientModulesCache = []never{}
		c.globals.forEach(func(global *ast.Symbol, sym string) {
			// No need to `unescapeLeadingUnderscores`, an escaped symbol is never an ambient module.
			if ambientModuleSymbolRegex.test(sym /* as string */) {
				c.ambientModulesCache.push(global)
			}
		})
	}
	return c.ambientModulesCache
}

func (c *Checker) checkGrammarImportClause(node ImportClause) bool {
	if node.IsTypeOnly && node.Name != nil && node.NamedBindings != nil {
		return c.grammarErrorOnNode(node, Diagnostics.A_type_only_import_can_specify_a_default_import_or_named_bindings_but_not_both)
	}
	if node.IsTypeOnly && node.NamedBindings. /* ? */ kind == ast.KindNamedImports {
		return c.checkGrammarNamedImportsOrExports(node.NamedBindings)
	}
	return false
}

func (c *Checker) checkGrammarNamedImportsOrExports(namedBindings NamedImportsOrExports) bool {
	return forEach(namedBindings.Elements, func(specifier /* TODO(TS-TO-GO) inferred type ExportSpecifier | ImportSpecifier */ any) *bool {
		if specifier.IsTypeOnly {
			return c.grammarErrorOnFirstToken(specifier, ifElse(specifier.Kind == ast.KindImportSpecifier, Diagnostics.The_type_modifier_cannot_be_used_on_a_named_import_when_import_type_is_used_on_its_import_statement, Diagnostics.The_type_modifier_cannot_be_used_on_a_named_export_when_export_type_is_used_on_its_export_statement))
		}
	})
}

func (c *Checker) checkGrammarImportCallExpression(node ImportCall) bool {
	if c.compilerOptions.verbatimModuleSyntax && c.moduleKind == ModuleKindCommonJS {
		return c.grammarErrorOnNode(node, Diagnostics.ESM_syntax_is_not_allowed_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled)
	}

	if c.moduleKind == ModuleKindES2015 {
		return c.grammarErrorOnNode(node, Diagnostics.Dynamic_imports_are_only_supported_when_the_module_flag_is_set_to_es2020_es2022_esnext_commonjs_amd_system_umd_node16_or_nodenext)
	}

	if node.TypeArguments != nil {
		return c.grammarErrorOnNode(node, Diagnostics.This_use_of_import_is_invalid_import_calls_can_be_written_but_they_must_have_parentheses_and_cannot_have_type_arguments)
	}

	nodeArguments := node.Arguments
	if c.moduleKind != ModuleKindESNext && c.moduleKind != ModuleKindNodeNext && c.moduleKind != ModuleKindNode16 && c.moduleKind != ModuleKindPreserve {
		// We are allowed trailing comma after proposal-import-assertions.
		c.checkGrammarForDisallowedTrailingComma(nodeArguments)

		if nodeArguments.length > 1 {
			importAttributesArgument := nodeArguments[1]
			return c.grammarErrorOnNode(importAttributesArgument, Diagnostics.Dynamic_imports_only_support_a_second_argument_when_the_module_option_is_set_to_esnext_node16_nodenext_or_preserve)
		}
	}

	if nodeArguments.length == 0 || nodeArguments.length > 2 {
		return c.grammarErrorOnNode(node, Diagnostics.Dynamic_imports_can_only_accept_a_module_specifier_and_an_optional_set_of_attributes_as_arguments)
	}

	// see: parseArgumentOrArrayLiteralElement...we use this function which parse arguments of callExpression to parse specifier for dynamic import.
	// parseArgumentOrArrayLiteralElement allows spread element to be in an argument list which is not allowed as specifier in dynamic import.
	spreadElement := core.Find(nodeArguments, isSpreadElement)
	if spreadElement != nil {
		return c.grammarErrorOnNode(spreadElement, Diagnostics.Argument_of_dynamic_import_cannot_be_spread_element)
	}
	return false
}

func (c *Checker) findMatchingTypeReferenceOrTypeAliasReference(source *Type, unionTarget UnionOrIntersectionType) *Type {
	sourceObjectFlags := getObjectFlags(source)
	if sourceObjectFlags&(ObjectFlagsReference|ObjectFlagsAnonymous) != 0 && unionTarget.flags&TypeFlagsUnion != 0 {
		return core.Find(unionTarget.types, func(target *Type) bool {
			if target.flags&TypeFlagsObject != 0 {
				overlapObjFlags := sourceObjectFlags & getObjectFlags(target)
				if overlapObjFlags&ObjectFlagsReference != 0 {
					return source.AsTypeReference().target == target.AsTypeReference().target
				}
				if overlapObjFlags&ObjectFlagsAnonymous != 0 {
					return source.AsAnonymousType().aliasSymbol != nil && source.AsAnonymousType().aliasSymbol == target.AsAnonymousType().aliasSymbol
				}
			}
			return false
		})
	}
}

func (c *Checker) findBestTypeForObjectLiteral(source *Type, unionTarget UnionOrIntersectionType) *Type {
	if getObjectFlags(source)&ObjectFlagsObjectLiteral != 0 && c.someType(unionTarget, c.isArrayLikeType) {
		return core.Find(unionTarget.types, func(t *Type) bool {
			return !c.isArrayLikeType(t)
		})
	}
}

func (c *Checker) findBestTypeForInvokable(source *Type, unionTarget UnionOrIntersectionType) *Type {
	signatureKind := SignatureKindCall
	hasSignatures := c.getSignaturesOfType(source, signatureKind).length > 0 || ( /* TODO(TS-TO-GO) CommaToken BinaryExpression: signatureKind = SignatureKind.Construct, getSignaturesOfType(source, signatureKind).length > 0 */ TODO)
	if hasSignatures {
		return core.Find(unionTarget.types, func(t *Type) bool {
			return c.getSignaturesOfType(t, signatureKind).length > 0
		})
	}
}

func (c *Checker) findMostOverlappyType(source *Type, unionTarget UnionOrIntersectionType) *Type {
	var bestMatch *Type
	if source.flags&(TypeFlagsPrimitive|TypeFlagsInstantiablePrimitive) == 0 {
		matchingCount := 0
		for _, target := range unionTarget.types {
			if target.flags&(TypeFlagsPrimitive|TypeFlagsInstantiablePrimitive) == 0 {
				overlap := c.getIntersectionType([]*Type{c.getIndexType(source), c.getIndexType(target)})
				if overlap.flags&TypeFlagsIndex != 0 {
					// perfect overlap of keys
					return target
				} else if c.isUnitType(overlap) || overlap.flags&TypeFlagsUnion != 0 {
					// We only want to account for literal types otherwise.
					// If we have a union of index types, it seems likely that we
					// needed to elaborate between two generic mapped types anyway.
					var len number
					if overlap.flags&TypeFlagsUnion != 0 {
						len = core.CountWhere(overlap.AsUnionType().types, c.isUnitType)
					} else {
						len = 1
					}
					if len >= matchingCount {
						bestMatch = target
						matchingCount = len
					}
				}
			}
		}
	}
	return bestMatch
}

func (c *Checker) filterPrimitivesIfContainsNonPrimitive(t UnionType) *Type {
	if c.maybeTypeOfKind(t, TypeFlagsNonPrimitive) {
		result := c.filterType(t, func(t *Type) bool {
			return t.flags&TypeFlagsPrimitive == 0
		})
		if result.flags&TypeFlagsNever == 0 {
			return result
		}
	}
	return t
}

// Keep this up-to-date with the same logic within `getApparentTypeOfContextualType`, since they should behave similarly
func (c *Checker) findMatchingDiscriminantType(source *Type, target *Type, isRelatedTo func(source *Type, target *Type) Ternary) *Type {
	if target.flags&TypeFlagsUnion != 0 && source.flags&(TypeFlagsIntersection|TypeFlagsObject) != 0 {
		match := c.getMatchingUnionConstituentForType(target.AsUnionType(), source)
		if match != nil {
			return match
		}
		sourceProperties := c.getPropertiesOfType(source)
		if sourceProperties {
			sourcePropertiesFiltered := c.findDiscriminantProperties(sourceProperties, target)
			if sourcePropertiesFiltered != nil {
				discriminated := c.discriminateTypeByDiscriminableItems(target.AsUnionType(), core.Map(sourcePropertiesFiltered, func(p *ast.Symbol) /* TODO(TS-TO-GO) inferred type [() => Type, __String] */ any {
					return ([]any{func() *Type {
						return c.getTypeOfSymbol(p)
					}, p.EscapedName} /* as [() => Type, __String] */)
				}), isRelatedTo)
				if discriminated != target {
					return discriminated
				}
			}
		}
	}
	return nil
}

func (c *Checker) getEffectivePropertyNameForPropertyNameNode(node PropertyName) *string {
	name := getPropertyNameForPropertyNameNode(node)
	switch {
	case name:
		return name
	case isComputedPropertyName(node):
		return c.tryGetNameFromType(c.getTypeOfExpression(node.Expression))
	default:
		return nil
	}
}

func (c *Checker) getCombinedModifierFlagsCached(node Declaration) ModifierFlags {
	// we hold onto the last node and result to speed up repeated lookups against the same node.
	if c.lastGetCombinedModifierFlagsNode == node {
		return c.lastGetCombinedModifierFlagsResult
	}

	c.lastGetCombinedModifierFlagsNode = node
	c.lastGetCombinedModifierFlagsResult = getCombinedModifierFlags(node)
	return c.lastGetCombinedModifierFlagsResult
}

func (c *Checker) getCombinedNodeFlagsCached(node *ast.Node) NodeFlags {
	// we hold onto the last node and result to speed up repeated lookups against the same node.
	if c.lastGetCombinedNodeFlagsNode == node {
		return c.lastGetCombinedNodeFlagsResult
	}
	c.lastGetCombinedNodeFlagsNode = node
	c.lastGetCombinedNodeFlagsResult = getCombinedNodeFlags(node)
	return c.lastGetCombinedNodeFlagsResult
}

func (c *Checker) isVarConstLike(node Union[VariableDeclaration, VariableDeclarationList]) bool {
	blockScopeKind := c.getCombinedNodeFlagsCached(node) & ast.NodeFlagsBlockScoped
	return blockScopeKind == ast.NodeFlagsConst || blockScopeKind == ast.NodeFlagsUsing || blockScopeKind == ast.NodeFlagsAwaitUsing
}

func (c *Checker) getJSXRuntimeImportSpecifier(file *SourceFile, specifierText string) *StringLiteralLike {
	// Synthesized JSX import is either first or after tslib
	var jsxImportIndex /* TODO(TS-TO-GO) inferred type 0 | 1 */ any
	if c.compilerOptions.importHelpers {
		jsxImportIndex = 1
	} else {
		jsxImportIndex = 0
	}
	specifier := file. /* ? */ imports[jsxImportIndex]
	if specifier != nil {
		Debug.assert(nodeIsSynthesized(specifier) && specifier.Text == specifierText, __TEMPLATE__("Expected sourceFile.imports[", jsxImportIndex, "] to be the synthesized JSX runtime import"))
	}
	return specifier
}

func (c *Checker) getImportHelpersImportSpecifier(file SourceFile) StringLiteralLike {
	Debug.assert(c.compilerOptions.importHelpers, "Expected importHelpers to be enabled")
	specifier := file.Imports[0]
	Debug.assert(specifier && nodeIsSynthesized(specifier) && specifier.Text == "tslib", `Expected sourceFile.imports[0] to be the synthesized tslib import`)
	return specifier
}

func isNotAccessor(declaration Declaration) bool {
	// Accessors check for their own matching duplicates, and in contexts where they are valid, there are already duplicate identifier checks
	return !isAccessor(declaration)
}

func isNotOverload(declaration Declaration) bool {
	return (declaration.Kind != ast.KindFunctionDeclaration && declaration.Kind != ast.KindMethodDeclaration) || declaration.AsFunctionDeclaration().Body != nil
}

/** Like 'isDeclarationName', but returns true for LHS of `import { x as y }` or `export { x as y }`. */

func isDeclarationNameOrImportPropertyName(name *ast.Node) bool {
	switch name.Parent.Kind {
	case ast.KindImportSpecifier,
		ast.KindExportSpecifier:
		return isIdentifier(name) || name.Kind == ast.KindStringLiteral
	default:
		return isDeclarationName(name)
	}
}

var JsxNames = struct {
	JSX                                    __String
	IntrinsicElements                      __String
	ElementClass                           __String
	ElementAttributesPropertyNameContainer __String
	ElementChildrenAttributeNameContainer  __String
	Element                                __String
	ElementType                            __String
	IntrinsicAttributes                    __String
	IntrinsicClassAttributes               __String
	LibraryManagedAttributes               __String
}{
	JSX:                                    __String("JSX"),
	IntrinsicElements:                      __String("IntrinsicElements"),
	ElementClass:                           __String("ElementClass"),
	ElementAttributesPropertyNameContainer: __String("ElementAttributesProperty"),
	ElementChildrenAttributeNameContainer:  __String("ElementChildrenAttribute"),
	Element:                                __String("Element"),
	ElementType:                            __String("ElementType"),
	IntrinsicAttributes:                    __String("IntrinsicAttributes"),
	IntrinsicClassAttributes:               __String("IntrinsicClassAttributes"),
	LibraryManagedAttributes:               __String("LibraryManagedAttributes"),
}

func getIterationTypesKeyFromIterationTypeKind(typeKind IterationTypeKind) /* TODO(TS-TO-GO) inferred type "yieldType" | "returnType" | "nextType" */ any {
	switch typeKind {
	case IterationTypeKindYield:
		return "yieldType"
	case IterationTypeKindReturn:
		return "returnType"
	case IterationTypeKindNext:
		return "nextType"
	}
}

/** @internal */

func signatureHasRestParameter(s Signature) bool {
	return s.flags&SignatureFlagsHasRestParameter != 0
}

func signatureHasLiteralTypes(s Signature) bool {
	return s.flags&SignatureFlagsHasLiteralTypes != 0
}

func createBasicNodeBuilderModuleSpecifierResolutionHost(host TypeCheckerHost) ModuleSpecifierResolutionHost {
	return ModuleSpecifierResolutionHost{
		getCommonSourceDirectory: ifElse((host.(Program)).getCommonSourceDirectory, func() string {
			return (host.(Program)).getCommonSourceDirectory()
		}, func() string {
			return ""
		}),
		getCurrentDirectory: func() string {
			return host.getCurrentDirectory()
		},
		getSymlinkCache: maybeBind(host, host.getSymlinkCache),
		getPackageJsonInfoCache: func() *PackageJsonInfoCache {
			return host.getPackageJsonInfoCache()
		},
		useCaseSensitiveFileNames: maybeBind(host, host.useCaseSensitiveFileNames),
		redirectTargetsMap:        host.redirectTargetsMap,
		getProjectReferenceRedirect: func(fileName string) *string {
			return host.getProjectReferenceRedirect(fileName)
		},
		isSourceOfProjectReferenceRedirect: func(fileName string) bool {
			return host.isSourceOfProjectReferenceRedirect(fileName)
		},
		fileExists: func(fileName string) bool {
			return host.fileExists(fileName)
		},
		getFileIncludeReasons: func() /* TODO(TS-TO-GO) inferred type MultiMap<Path, FileIncludeReason> */ any {
			return host.getFileIncludeReasons()
		},
		readFile: ifElse(host.readFile != nil, (func(fileName string) *string {
			return host.readFile(fileName)
		}), nil),
		getDefaultResolutionModeForFile: func(file SourceFile) ResolutionMode {
			return host.getDefaultResolutionModeForFile(file)
		},
		getModeForResolutionAtIndex: func(file SourceFile, index number) ResolutionMode {
			return host.getModeForResolutionAtIndex(file, index)
		},
		getGlobalTypingsCacheLocation: maybeBind(host, host.getGlobalTypingsCacheLocation),
	}
}

type NodeBuilderContext struct {
	enclosingDeclaration                  *ast.Node
	enclosingFile                         *SourceFile
	flags                                 NodeBuilderFlags
	internalFlags                         InternalNodeBuilderFlags
	tracker                               SymbolTrackerImpl
	encounteredError                      bool
	reportedDiagnostic                    bool
	trackedSymbols                        *[]TrackedSymbol
	visitedTypes                          *Set[number]
	symbolDepth                           *Map[string, number]
	inferTypeParameters                   *[]TypeParameter
	approximateLength                     number
	truncating                            bool
	mustCreateTypeParameterSymbolList     bool
	typeParameterSymbolList               *Set[number]
	mustCreateTypeParametersNamesLookups  bool
	typeParameterNames                    *Map[TypeId, Identifier]
	typeParameterNamesByText              *Set[string]
	typeParameterNamesByTextNextNameCount *Map[string, number]
	usedSymbolNames                       *Set[string]
	remappedSymbolNames                   *Map[SymbolId, string]
	remappedSymbolReferences              *Map[SymbolId, *ast.Symbol]
	reverseMappedStack                    *[]ReverseMappedSymbol
	bundled                               bool
	mapper                                *TypeMapper
}

type SymbolTrackerImpl struct {
	moduleResolverHost *Intersection[ModuleSpecifierResolutionHost /* TODO(TS-TO-GO) TypeNode TypeLiteral: { getCommonSourceDirectory(): string; } */, any]
	context            NodeBuilderContext
	inner              *SymbolTracker
	canTrackSymbol     bool
	disableTrackSymbol bool
}

func NewSymbolTrackerImpl(context NodeBuilderContext, tracker *SymbolTracker, moduleResolverHost *Intersection[ModuleSpecifierResolutionHost /* TODO(TS-TO-GO) TypeNode TypeLiteral: { getCommonSourceDirectory(): string; } */, any]) SymbolTrackerImpl {
	this := &SymbolTrackerImpl{}
	for /* TODO(TS-TO-GO) InstanceOfKeyword BinaryExpression: tracker instanceof SymbolTrackerImpl */ TODO {
		tracker = tracker.inner
	}

	this.inner = tracker
	this.moduleResolverHost = moduleResolverHost
	this.context = context
	this.canTrackSymbol = this.inner. /* ? */ trackSymbol != nil
	return this
}

func (this *SymbolTrackerImpl) trackSymbol(symbol *ast.Symbol, enclosingDeclaration *ast.Node, meaning SymbolFlags) bool {
	if this.inner. /* ? */ trackSymbol != nil && !this.disableTrackSymbol {
		if this.inner.trackSymbol(symbol, enclosingDeclaration, meaning) {
			this.onDiagnosticReported()
			return true
		}
		// Skip recording type parameters as they dont contribute to late painted statements
		if symbol.Flags&ast.SymbolFlagsTypeParameter == 0 {
			( /* TODO(TS-TO-GO) QuestionQuestionEqualsToken BinaryExpression: this.context.trackedSymbols ??= [] */ TODO).push([]any{symbol, enclosingDeclaration, meaning})
		}
	}
	return false
}

func (this *SymbolTrackerImpl) reportInaccessibleThisError() {
	if this.inner. /* ? */ reportInaccessibleThisError != nil {
		this.onDiagnosticReported()
		this.inner.reportInaccessibleThisError()
	}
}

func (this *SymbolTrackerImpl) reportPrivateInBaseOfClassExpression(propertyName string) {
	if this.inner. /* ? */ reportPrivateInBaseOfClassExpression != nil {
		this.onDiagnosticReported()
		this.inner.reportPrivateInBaseOfClassExpression(propertyName)
	}
}

func (this *SymbolTrackerImpl) reportInaccessibleUniqueSymbolError() {
	if this.inner. /* ? */ reportInaccessibleUniqueSymbolError != nil {
		this.onDiagnosticReported()
		this.inner.reportInaccessibleUniqueSymbolError()
	}
}

func (this *SymbolTrackerImpl) reportCyclicStructureError() {
	if this.inner. /* ? */ reportCyclicStructureError != nil {
		this.onDiagnosticReported()
		this.inner.reportCyclicStructureError()
	}
}

func (this *SymbolTrackerImpl) reportLikelyUnsafeImportRequiredError(specifier string) {
	if this.inner. /* ? */ reportLikelyUnsafeImportRequiredError != nil {
		this.onDiagnosticReported()
		this.inner.reportLikelyUnsafeImportRequiredError(specifier)
	}
}

func (this *SymbolTrackerImpl) reportTruncationError() {
	if this.inner. /* ? */ reportTruncationError != nil {
		this.onDiagnosticReported()
		this.inner.reportTruncationError()
	}
}

func (this *SymbolTrackerImpl) reportNonlocalAugmentation(containingFile SourceFile, parentSymbol *ast.Symbol, augmentingSymbol *ast.Symbol) {
	if this.inner. /* ? */ reportNonlocalAugmentation != nil {
		this.onDiagnosticReported()
		this.inner.reportNonlocalAugmentation(containingFile, parentSymbol, augmentingSymbol)
	}
}

func (this *SymbolTrackerImpl) reportNonSerializableProperty(propertyName string) {
	if this.inner. /* ? */ reportNonSerializableProperty != nil {
		this.onDiagnosticReported()
		this.inner.reportNonSerializableProperty(propertyName)
	}
}

func (this *SymbolTrackerImpl) onDiagnosticReported() {
	this.context.reportedDiagnostic = true
}

func (this *SymbolTrackerImpl) reportInferenceFallback(node *ast.Node) {
	if this.inner. /* ? */ reportInferenceFallback != nil {
		this.inner.reportInferenceFallback(node)
	}
}

func (this *SymbolTrackerImpl) pushErrorFallbackNode(node Declaration) {
	return this.inner. /* ? */ pushErrorFallbackNode(node)
}

func (this *SymbolTrackerImpl) popErrorFallbackNode() {
	return this.inner. /* ? */ popErrorFallbackNode()
}
