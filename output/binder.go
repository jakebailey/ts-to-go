// Code generated by ts-to-go at 52c59dbcbee274e523ef39e6c8be1bd5e110c2f1. DO NOT EDIT.

package output

type Binder struct {
	file                   SourceFile
	options                CompilerOptions
	languageVersion        ScriptTarget
	parent                 *ast.Node
	container              Union[IsContainer, EntityNameExpression]
	thisParentContainer    Union[IsContainer, EntityNameExpression]
	blockScopeContainer    IsBlockScopedContainer
	lastContainer          HasLocals
	delayedTypeAliases     []Union[JSDocTypedefTag, JSDocCallbackTag, JSDocEnumTag]
	seenThisKeyword        bool
	jsDocImports           []JSDocImportTag
	currentFlow            FlowNode
	currentBreakTarget     *FlowLabel
	currentContinueTarget  *FlowLabel
	currentReturnTarget    *FlowLabel
	currentTrueTarget      *FlowLabel
	currentFalseTarget     *FlowLabel
	currentExceptionTarget *FlowLabel
	preSwitchCaseFlow      *FlowNode
	activeLabelList        *ActiveLabel
	hasExplicitReturn      bool
	hasFlowEffects         bool
	emitFlags              NodeFlags
	inStrictMode           bool
	inAssignmentPattern    bool
	symbolCount            number
	Symbol/* TODO(TS-TO-GO) TypeNode ConstructorType: new (flags: SymbolFlags, name: __String) => Symbol */ any
	classifiableNames       Set[string]
	unreachableFlow         FlowNode
	reportedUnreachableFlow FlowNode
	bindBinaryExpressionFlow/* TODO(TS-TO-GO) inferred type (node: BinaryExpression) => void */ any
}

/** @internal */

type ModuleInstanceState int32

const (
	ModuleInstanceStateNonInstantiated ModuleInstanceState = 0
	ModuleInstanceStateInstantiated    ModuleInstanceState = 1
	ModuleInstanceStateConstEnumOnly   ModuleInstanceState = 2
)

type ActiveLabel struct {
	next           *ActiveLabel
	name           string
	breakTarget    FlowLabel
	continueTarget *FlowLabel
	referenced     bool
}

/** @internal */

func getModuleInstanceState(node ModuleDeclaration, visited Map[number, *ModuleInstanceState]) ModuleInstanceState {
	if node.Body != nil && !node.Body.Parent {
		// getModuleInstanceStateForAliasTarget needs to walk up the parent chain, so parent pointers must be set on this tree already
		setParent(node.Body, node)
		setParentRecursive(node.Body, false /*incremental*/)
	}
	if node.Body != nil {
		return getModuleInstanceStateCached(node.Body, visited)
	} else {
		return ModuleInstanceStateInstantiated
	}
}

func getModuleInstanceStateCached(node *ast.Node, visited Map[number, *ModuleInstanceState] /*  = new Map<number, ModuleInstanceState | undefined>() */) ModuleInstanceState {
	nodeId := getNodeId(node)
	if visited.has(nodeId) {
		return visited.get(nodeId) || ModuleInstanceStateNonInstantiated
	}
	visited.set(nodeId, nil)
	result := getModuleInstanceStateWorker(node, visited)
	visited.set(nodeId, result)
	return result
}

func getModuleInstanceStateWorker(node *ast.Node, visited Map[number, *ModuleInstanceState]) ModuleInstanceState {
	// A module is uninstantiated if it contains only
	switch node.Kind {
	case ast.KindInterfaceDeclaration,
		ast.KindTypeAliasDeclaration:
		return ModuleInstanceStateNonInstantiated
		// 2. const enum declarations
	case ast.KindEnumDeclaration:
		if isEnumConst(node.AsEnumDeclaration()) {
			return ModuleInstanceStateConstEnumOnly
		}
		// 3. non-exported import declarations
	case ast.KindImportDeclaration,
		ast.KindImportEqualsDeclaration:
		if !(hasSyntacticModifier(node, ast.ModifierFlagsExport)) {
			return ModuleInstanceStateNonInstantiated
		}
		// 4. Export alias declarations pointing at only uninstantiated modules or things uninstantiated modules contain
	case ast.KindExportDeclaration:
		exportDeclaration := node.AsExportDeclaration()
		if exportDeclaration.ModuleSpecifier == nil && exportDeclaration.ExportClause != nil && exportDeclaration.ExportClause.Kind == ast.KindNamedExports {
			state := ModuleInstanceStateNonInstantiated
			for _, specifier := range exportDeclaration.ExportClause.Elements {
				specifierState := getModuleInstanceStateForAliasTarget(specifier, visited)
				if specifierState > state {
					state = specifierState
				}
				if state == ModuleInstanceStateInstantiated {
					return state
				}
			}
			return state
		}
		// 5. other uninstantiated module declarations.
	case ast.KindModuleBlock:
		state := ModuleInstanceStateNonInstantiated
		forEachChild(node, func(n *ast.Node) *true {
			childState := getModuleInstanceStateCached(n, visited)
			switch childState {
			case ModuleInstanceStateNonInstantiated:
				// child is non-instantiated - continue searching
				return
			case ModuleInstanceStateConstEnumOnly:
				// child is const enum only - record state and continue searching
				state = ModuleInstanceStateConstEnumOnly
				return
			case ModuleInstanceStateInstantiated:
				// child is instantiated - record state and stop
				state = ModuleInstanceStateInstantiated
				return true
			default:
				Debug.assertNever(childState)
			}
		})
		return state
	case ast.KindModuleDeclaration:
		return getModuleInstanceState(node.AsModuleDeclaration(), visited)
	case ast.KindIdentifier:
		// Only jsdoc typedef definition can exist in jsdoc namespace, and it should
		// be considered the same as type alias
		if node.Flags&ast.NodeFlagsIdentifierIsInJSDocNamespace != 0 {
			return ModuleInstanceStateNonInstantiated
		}
	}
	return ModuleInstanceStateInstantiated
}

func getModuleInstanceStateForAliasTarget(specifier ExportSpecifier, visited Map[number, *ModuleInstanceState]) ModuleInstanceState {
	name := specifier.PropertyName || specifier.Name
	if name.Kind != ast.KindIdentifier {
		return ModuleInstanceStateInstantiated
		// Skip for invalid syntax like this: export { "x" }
	}
	var p *ast.Node = specifier.Parent
	for p {
		if isBlock(p) || isModuleBlock(p) || isSourceFile(p) {
			statements := p.Statements
			var found *ModuleInstanceState
			for _, statement := range statements {
				if nodeHasName(statement, name) {
					if !statement.Parent {
						setParent(statement, p)
						setParentRecursive(statement, false /*incremental*/)
					}
					state := getModuleInstanceStateCached(statement, visited)
					if found == nil || state > found {
						found = state
					}
					if found == ModuleInstanceStateInstantiated {
						return found
					}
					if statement.Kind == ast.KindImportEqualsDeclaration {
						// Treat re-exports of import aliases as instantiated,
						// since they're ambiguous. This is consistent with
						// `export import x = mod.x` being treated as instantiated:
						//   import x = mod.x;
						//   export { x };
						found = ModuleInstanceStateInstantiated
					}
				}
			}
			if found != nil {
				return found
			}
		}
		p = p.Parent
	}
	return ModuleInstanceStateInstantiated
	// Couldn't locate, assume could refer to a value
}

/** @internal */

type ContainerFlags int32

const (
	// The current node is not a container, and no container manipulation should happen before
	// recursing into it.
	ContainerFlagsNone ContainerFlags = 0
	// The current node is a container.  It should be set as the current container (and block-
	// container) before recursing into it.  The current node does not have locals.  Examples:
	//
	//      Classes, ObjectLiterals, TypeLiterals, Interfaces...
	ContainerFlagsIsContainer ContainerFlags = 1 << 0
	// The current node is a block-scoped-container.  It should be set as the current block-
	// container before recursing into it.  Examples:
	//
	//      Blocks (when not parented by functions), Catch clauses, For/For-in/For-of statements...
	ContainerFlagsIsBlockScopedContainer ContainerFlags = 1 << 1
	// The current node is the container of a control flow path. The current control flow should
	// be saved and restored, and a new control flow initialized within the container.
	ContainerFlagsIsControlFlowContainer                           ContainerFlags = 1 << 2
	ContainerFlagsIsFunctionLike                                   ContainerFlags = 1 << 3
	ContainerFlagsIsFunctionExpression                             ContainerFlags = 1 << 4
	ContainerFlagsHasLocals                                        ContainerFlags = 1 << 5
	ContainerFlagsIsInterface                                      ContainerFlags = 1 << 6
	ContainerFlagsIsObjectLiteralOrClassExpressionMethodOrAccessor ContainerFlags = 1 << 7
)

/** @internal */

func createFlowNode(flags FlowFlags, node any, antecedent Union[FlowNode, []FlowNode, undefined]) FlowNode {
	return Debug.attachFlowNodeDebugInfo(FlowNode{
		flags:      flags,
		id:         0,
		node:       node,
		antecedent: antecedent,
	}.(FlowNode))
}

var binder = createBinder()

/** @internal */

func bindSourceFile(file SourceFile, options CompilerOptions) {
	performance.mark("beforeBind")
	binder(file, options)
	performance.mark("afterBind")
	performance.measure("Bind", "beforeBind", "afterBind")
}

func createBinder() func(file SourceFile, options CompilerOptions) {
	// Why var? It avoids TDZ checks in the runtime which can be costly.
	// See: https://github.com/microsoft/TypeScript/issues/52924
	/* eslint-disable no-var */
	// Container one level up

	// state used by control flow analysis

	// state used for emit helpers

	// If this file is an external module, then it is automatically in strict-mode according to
	// ES6.  If it is not an external module, then we'll determine if it is in strict mode or
	// not depending on if we see "use strict" in certain places or if we hit a class/namespace
	// or if compiler options contain alwaysStrict.

	// If we are binding an assignment pattern, we will bind certain expressions differently.
	tc.inAssignmentPattern = false

	tc.symbolCount = 0

	tc.unreachableFlow = createFlowNode(FlowFlagsUnreachable, nil /*node*/, nil /*antecedent*/)
	tc.reportedUnreachableFlow = createFlowNode(FlowFlagsUnreachable, nil /*node*/, nil /*antecedent*/)
	tc.bindBinaryExpressionFlow = b.createBindBinaryExpressionFlow()
	/* eslint-enable no-var */

	return b.bindSourceFile
}

/**
 * Inside the binder, we may create a diagnostic for an as-yet unbound node (with potentially no parent pointers, implying no accessible source file)
 * If so, the node _must_ be in the current file (as that's the only way anything could have traversed to it to yield it as the error node)
 * This version of `createDiagnosticForNode` uses the binder's context to account for this, and always yields correct diagnostics even in these situations.
 */

func (b *Binder) createDiagnosticForNode(node *ast.Node, message DiagnosticMessage, args DiagnosticArguments) DiagnosticWithLocation {
	return createDiagnosticForNodeInSourceFile(getSourceFileOfNode(node) || b.file, node, message, args...)
}

func (b *Binder) bindSourceFile(f SourceFile, opts CompilerOptions) {
	b.file = f
	b.options = opts
	b.languageVersion = getEmitScriptTarget(b.options)
	b.inStrictMode = b.bindInStrictMode(b.file, opts)
	b.classifiableNames = NewSet()
	b.symbolCount = 0

	b.Symbol = objectAllocator.getSymbolConstructor()

	// Attach debugging information if necessary
	Debug.attachFlowNodeDebugInfo(b.unreachableFlow)
	Debug.attachFlowNodeDebugInfo(b.reportedUnreachableFlow)

	if b.file.Locals == nil {
		tracing. /* ? */ push(tracing.Phase.Bind, "bindSourceFile", &Args{
			path: b.file.Path,
		}, true /*separateBeginAndEnd*/)
		b.bind(b.file)
		tracing. /* ? */ pop()
		b.file.SymbolCount = b.symbolCount
		b.file.ClassifiableNames = b.classifiableNames
		b.delayedBindJSDocTypedefTag()
		b.bindJSDocImports()
	}

	b.file = nil
	b.options = nil
	b.languageVersion = nil
	b.parent = nil
	b.container = nil
	b.thisParentContainer = nil
	b.blockScopeContainer = nil
	b.lastContainer = nil
	b.delayedTypeAliases = nil
	b.jsDocImports = nil
	b.seenThisKeyword = false
	b.currentFlow = nil
	b.currentBreakTarget = nil
	b.currentContinueTarget = nil
	b.currentReturnTarget = nil
	b.currentTrueTarget = nil
	b.currentFalseTarget = nil
	b.currentExceptionTarget = nil
	b.activeLabelList = nil
	b.hasExplicitReturn = false
	b.hasFlowEffects = false
	b.inAssignmentPattern = false
	b.emitFlags = ast.NodeFlagsNone
}

func (b *Binder) bindInStrictMode(file SourceFile, opts CompilerOptions) bool {
	if getStrictOptionValue(opts, "alwaysStrict") && !b.file.IsDeclarationFile {
		// bind in strict mode source files with alwaysStrict option
		return true
	} else {
		return b.file.ExternalModuleIndicator
	}
}

func (b *Binder) createSymbol(flags SymbolFlags, name string) *ast.Symbol {
	b.symbolCount++
	return NewSymbol(flags, name)
}

func (b *Binder) addDeclarationToSymbol(symbol *ast.Symbol, node Declaration, symbolFlags SymbolFlags) {
	symbol.Flags |= symbolFlags

	node.Symbol = symbol
	symbol.Declarations = appendIfUnique(symbol.Declarations, node)

	if symbolFlags&(ast.SymbolFlagsClass|ast.SymbolFlagsEnum|ast.SymbolFlagsModule|ast.SymbolFlagsVariable) != 0 && symbol.Exports == nil {
		symbol.Exports = createSymbolTable()
	}

	if symbolFlags&(ast.SymbolFlagsClass|ast.SymbolFlagsInterface|ast.SymbolFlagsTypeLiteral|ast.SymbolFlagsObjectLiteral) != 0 && symbol.Members == nil {
		symbol.Members = createSymbolTable()
	}

	// On merge of const enum module with class or function, reset const enum only flag (namespaces will already recalculate)
	if symbol.ConstEnumOnlyModule && (symbol.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsClass|ast.SymbolFlagsRegularEnum) != 0) {
		symbol.ConstEnumOnlyModule = false
	}

	if symbolFlags&ast.SymbolFlagsValue != 0 {
		setValueDeclaration(symbol, node)
	}
}

// Should not be called on a declaration with a computed property name,
// unless it is a well known Symbol.
func (b *Binder) getDeclarationName(node Declaration) *string {
	if node.Kind == ast.KindExportAssignment {
		if node.AsExportAssignment().IsExportEquals {
			return InternalSymbolNameExportEquals
		} else {
			return InternalSymbolNameDefault
		}
	}

	name := getNameOfDeclaration(node)
	if name != nil {
		if isAmbientModule(node) {
			moduleName := getTextOfIdentifierOrLiteral(name /* as Identifier | StringLiteral */)
			return (ifElse(isGlobalScopeAugmentation(node.AsModuleDeclaration()), "__global", __TEMPLATE__("\"", moduleName, "\""))).(string)
		}
		if name.Kind == ast.KindComputedPropertyName {
			nameExpression := name.Expression
			// treat computed property names where expression is string/numeric literal as just string/numeric literal
			if isStringOrNumericLiteralLike(nameExpression) {
				return escapeLeadingUnderscores(nameExpression.Text)
			}
			if isSignedNumericLiteral(nameExpression) {
				return tokenToString(nameExpression.Operator) + nameExpression.Operand.Text.(string)
			} else {
				Debug.fail("Only computed properties with literal names have declaration names")
			}
		}
		if isPrivateIdentifier(name) {
			// containingClass exists because private names only allowed inside classes
			containingClass := getContainingClass(node)
			if containingClass == nil {
				// we can get here in cases where there is already a parse error.
				return nil
			}
			containingClassSymbol := containingClass.Symbol
			return getSymbolNameForPrivateIdentifier(containingClassSymbol, name.EscapedText)
		}
		if isJsxNamespacedName(name) {
			return getEscapedTextOfJsxNamespacedName(name)
		}
		if isPropertyNameLiteral(name) {
			return getEscapedTextOfIdentifierOrLiteral(name)
		} else {
			return nil
		}
	}
	switch node.Kind {
	case ast.KindConstructor:
		return InternalSymbolNameConstructor
	case ast.KindFunctionType,
		ast.KindCallSignature,
		ast.KindJSDocSignature:
		return InternalSymbolNameCall
	case ast.KindConstructorType,
		ast.KindConstructSignature:
		return InternalSymbolNameNew
	case ast.KindIndexSignature:
		return InternalSymbolNameIndex
	case ast.KindExportDeclaration:
		return InternalSymbolNameExportStar
	case ast.KindSourceFile:
		// json file should behave as
		// module.exports = ...
		return InternalSymbolNameExportEquals
	case ast.KindBinaryExpression:
		if getAssignmentDeclarationKind(node.AsBinaryExpression()) == AssignmentDeclarationKindModuleExports {
			// module.exports = ...
			return InternalSymbolNameExportEquals
		}
		Debug.fail("Unknown binary declaration kind")
	case ast.KindJSDocFunctionType:
		if isJSDocConstructSignature(node) {
			return InternalSymbolNameNew
		} else {
			return InternalSymbolNameCall
		}
	case ast.KindParameter:
		// Parameters with names are handled at the top of this function.  Parameters
		// without names can only come from JSDocFunctionTypes.
		Debug.assert(node.Parent.Kind == ast.KindJSDocFunctionType, "Impossible parameter parent kind", func() string {
			return __TEMPLATE__("parent is: ", Debug.formatSyntaxKind(node.Parent.Kind), ", expected JSDocFunctionType")
		})
		functionType := node.Parent.AsJSDocFunctionType()
		index := functionType.Parameters.indexOf(node.AsParameterDeclaration())
		return "arg" + index.(string)
	}
}

func (b *Binder) getDisplayName(node Declaration) string {
	if isNamedDeclaration(node) {
		return declarationNameToString(node.Name)
	} else {
		return unescapeLeadingUnderscores(Debug.checkDefined(b.getDeclarationName(node)))
	}
}

/**
 * Declares a Symbol for the node and adds it to symbols. Reports errors for conflicting identifier names.
 * @param symbolTable - The symbol table which node will be added to.
 * @param parent - node's parent declaration.
 * @param node - The declaration to be added to the symbol table
 * @param includes - The SymbolFlags that node has in addition to its declaration type (eg: export, ambient, etc.)
 * @param excludes - The flags which node cannot be declared alongside in a symbol table. Used to report forbidden declarations.
 */

func (b *Binder) declareSymbol(symbolTable SymbolTable, parent *ast.Symbol, node Declaration, includes SymbolFlags, excludes SymbolFlags, isReplaceableByMethod bool, isComputedName bool) *ast.Symbol {
	Debug.assert(isComputedName || !hasDynamicName(node))

	isDefaultExport := hasSyntacticModifier(node, ast.ModifierFlagsDefault) || isExportSpecifier(node) && moduleExportNameIsDefault(node.Name)

	// The exported symbol for an export default function/class node is always named "default"
	var name *string
	switch {
	case isComputedName:
		name = InternalSymbolNameComputed
	case isDefaultExport && b.parent != nil:
		name = InternalSymbolNameDefault
	default:
		name = b.getDeclarationName(node)
	}

	var symbol *ast.Symbol
	if name == nil {
		symbol = b.createSymbol(ast.SymbolFlagsNone, InternalSymbolNameMissing)
	} else {
		// Check and see if the symbol table already has a symbol with this name.  If not,
		// create a new symbol with this name and add it to the table.  Note that we don't
		// give the new symbol any flags *yet*.  This ensures that it will not conflict
		// with the 'excludes' flags we pass in.
		//
		// If we do get an existing symbol, see if it conflicts with the new symbol we're
		// creating.  For example, a 'var' symbol and a 'class' symbol will conflict within
		// the same symbol table.  If we have a conflict, report the issue on each
		// declaration we have for this symbol, and then create a new symbol for this
		// declaration.
		//
		// Note that when properties declared in Javascript constructors
		// (marked by isReplaceableByMethod) conflict with another symbol, the property loses.
		// Always. This allows the common Javascript pattern of overwriting a prototype method
		// with an bound instance method of the same type: `this.method = this.method.bind(this)`
		//
		// If we created a new symbol, either because we didn't have a symbol with this name
		// in the symbol table, or we conflicted with an existing symbol, then just add this
		// node as the sole declaration of the new symbol.
		//
		// Otherwise, we'll be merging into a compatible existing symbol (for example when
		// you have multiple 'vars' with the same name in the same container).  In this case
		// just add this node into the declarations list of the symbol.
		symbol = symbolTable.get(name)

		if includes&ast.SymbolFlagsClassifiable != 0 {
			b.classifiableNames.add(name)
		}

		if symbol == nil {
			symbolTable.set(name /* TODO(TS-TO-GO) EqualsToken BinaryExpression: symbol = createSymbol(SymbolFlags.None, name) */, TODO)
			if isReplaceableByMethod {
				symbol.IsReplaceableByMethod = true
			}
		} else if isReplaceableByMethod && !symbol.IsReplaceableByMethod {
			// A symbol already exists, so don't add this as a declaration.
			return symbol
		} else if symbol.Flags&excludes != 0 {
			if symbol.IsReplaceableByMethod {
				// Javascript constructor-declared symbols can be discarded in favor of
				// prototype symbols like methods.
				symbolTable.set(name /* TODO(TS-TO-GO) EqualsToken BinaryExpression: symbol = createSymbol(SymbolFlags.None, name) */, TODO)
			} else if !(includes&ast.SymbolFlagsVariable != 0 && symbol.Flags&ast.SymbolFlagsAssignment != 0) {
				// Assignment declarations are allowed to merge with variables, no matter what other flags they have.
				if isNamedDeclaration(node) {
					setParent(node.Name, node)
				}
				// Report errors every position with duplicate declaration
				// Report errors on previous encountered declarations
				var message any
				if symbol.Flags&ast.SymbolFlagsBlockScopedVariable != 0 {
					message = Diagnostics.Cannot_redeclare_block_scoped_variable_0
				} else {
					message = Diagnostics.Duplicate_identifier_0
				}
				messageNeedsName := true

				if symbol.Flags&ast.SymbolFlagsEnum != 0 || includes&ast.SymbolFlagsEnum != 0 {
					message = Diagnostics.Enum_declarations_can_only_merge_with_namespace_or_other_enum_declarations
					messageNeedsName = false
				}

				multipleDefaultExports := false
				if length(symbol.Declarations) != 0 {
					// If the current node is a default export of some sort, then check if
					// there are any other default exports that we need to error on.
					// We'll know whether we have other default exports depending on if `symbol` already has a declaration list set.
					if isDefaultExport {
						message = Diagnostics.A_module_cannot_have_multiple_default_exports
						messageNeedsName = false
						multipleDefaultExports = true
					} else {
						// This is to properly report an error in the case "export default { }" is after export default of class declaration or function declaration.
						// Error on multiple export default in the following case:
						// 1. multiple export default of class declaration or function declaration by checking NodeFlags.Default
						// 2. multiple export default of export assignment. This one doesn't have NodeFlags.Default on (as export default doesn't considered as modifiers)
						if symbol.Declarations != nil && symbol.Declarations.length != 0 && (node.Kind == ast.KindExportAssignment && !node.AsExportAssignment().IsExportEquals) {
							message = Diagnostics.A_module_cannot_have_multiple_default_exports
							messageNeedsName = false
							multipleDefaultExports = true
						}
					}
				}

				var relatedInformation []DiagnosticRelatedInformation = []never{}
				if isTypeAliasDeclaration(node) && nodeIsMissing(node.Type_) && hasSyntacticModifier(node, ast.ModifierFlagsExport) && symbol.Flags&(ast.SymbolFlagsAlias|ast.SymbolFlagsType|ast.SymbolFlagsNamespace) != 0 {
					// export type T; - may have meant export type { T }?
					relatedInformation.push(b.createDiagnosticForNode(node, Diagnostics.Did_you_mean_0, __TEMPLATE__("export type { ", unescapeLeadingUnderscores(node.Name.EscapedText), " }")))
				}

				declarationName := getNameOfDeclaration(node) || node
				forEach(symbol.Declarations, func(declaration Declaration, index number) {
					decl := getNameOfDeclaration(declaration) || declaration
					var diag DiagnosticWithLocation
					if messageNeedsName {
						diag = b.createDiagnosticForNode(decl, message, b.getDisplayName(declaration))
					} else {
						diag = b.createDiagnosticForNode(decl, message)
					}
					b.file.BindDiagnostics.push(ifElse(multipleDefaultExports, addRelatedInfo(diag, b.createDiagnosticForNode(declarationName, ifElse(index == 0, Diagnostics.Another_export_default_is_here, Diagnostics.and_here))), diag))
					if multipleDefaultExports {
						relatedInformation.push(b.createDiagnosticForNode(decl, Diagnostics.The_first_export_default_is_here))
					}
				})

				var diag DiagnosticWithLocation
				if messageNeedsName {
					diag = b.createDiagnosticForNode(declarationName, message, b.getDisplayName(node))
				} else {
					diag = b.createDiagnosticForNode(declarationName, message)
				}
				b.file.BindDiagnostics.push(addRelatedInfo(diag, relatedInformation...))

				symbol = b.createSymbol(ast.SymbolFlagsNone, name)
			}
		}
	}

	b.addDeclarationToSymbol(symbol, node, includes)
	if symbol.Parent != nil {
		Debug.assert(symbol.Parent == b.parent, "Existing symbol parent should match new one")
	} else {
		symbol.Parent = b.parent
	}

	return symbol
}

func (b *Binder) declareModuleMember(node Declaration, symbolFlags SymbolFlags, symbolExcludes SymbolFlags) *ast.Symbol {
	hasExportModifier := getCombinedModifierFlags(node)&ast.ModifierFlagsExport != 0 || b.jsdocTreatAsExported(node)
	if symbolFlags&ast.SymbolFlagsAlias != 0 {
		if node.Kind == ast.KindExportSpecifier || (node.Kind == ast.KindImportEqualsDeclaration && hasExportModifier) {
			return b.declareSymbol(b.container.Symbol.Exports, b.container.Symbol, node, symbolFlags, symbolExcludes)
		} else {
			Debug.assertNode(b.container, canHaveLocals)
			return b.declareSymbol(b.container.Locals, nil /*parent*/, node, symbolFlags, symbolExcludes)
		}
	} else {
		// Exported module members are given 2 symbols: A local symbol that is classified with an ExportValue flag,
		// and an associated export symbol with all the correct flags set on it. There are 2 main reasons:
		//
		//   1. We treat locals and exports of the same name as mutually exclusive within a container.
		//      That means the binder will issue a Duplicate Identifier error if you mix locals and exports
		//      with the same name in the same container.
		//      TODO: Make this a more specific error and decouple it from the exclusion logic.
		//   2. When we checkIdentifier in the checker, we set its resolved symbol to the local symbol,
		//      but return the export symbol (by calling getExportSymbolOfValueSymbolIfExported). That way
		//      when the emitter comes back to it, it knows not to qualify the name if it was found in a containing scope.

		// NOTE: Nested ambient modules always should go to to 'locals' table to prevent their automatic merge
		//       during global merging in the checker. Why? The only case when ambient module is permitted inside another module is module augmentation
		//       and this case is specially handled. Module augmentations should only be merged with original module definition
		//       and should never be merged directly with other augmentation, and the latter case would be possible if automatic merge is allowed.
		if isJSDocTypeAlias(node) {
			Debug.assert(isInJSFile(node))
			// We shouldn't add symbols for JSDoc nodes if not in a JS file.
		}
		// We shouldn't add symbols for JSDoc nodes if not in a JS file.
		if !isAmbientModule(node) && (hasExportModifier || b.container.Flags&ast.NodeFlagsExportContext != 0) {
			if !canHaveLocals(b.container) || b.container.Locals == nil || (hasSyntacticModifier(node, ast.ModifierFlagsDefault) && !b.getDeclarationName(node)) {
				return b.declareSymbol(b.container.Symbol.Exports, b.container.Symbol, node, symbolFlags, symbolExcludes)
				// No local symbol for an unnamed default!
			}
			var exportKind /* TODO(TS-TO-GO) inferred type SymbolFlags.ExportValue | 0 */ any
			if symbolFlags&ast.SymbolFlagsValue != 0 {
				exportKind = ast.SymbolFlagsExportValue
			} else {
				exportKind = 0
			}
			local := b.declareSymbol(b.container.Locals, nil /*parent*/, node, exportKind, symbolExcludes)
			local.ExportSymbol = b.declareSymbol(b.container.Symbol.Exports, b.container.Symbol, node, symbolFlags, symbolExcludes)
			node.LocalSymbol = local
			return local
		} else {
			Debug.assertNode(b.container, canHaveLocals)
			return b.declareSymbol(b.container.Locals, nil /*parent*/, node, symbolFlags, symbolExcludes)
		}
	}
}

func (b *Binder) jsdocTreatAsExported(node *ast.Node) bool {
	if node.Parent && isModuleDeclaration(node) {
		node = node.Parent
	}
	if !isJSDocTypeAlias(node) {
		return false
	}
	// jsdoc typedef handling is a bit of a doozy, but to summarize, treat the typedef as exported if:
	// 1. It has an explicit name (since by default typedefs are always directly exported, either at the top level or in a container), or
	if !isJSDocEnumTag(node) && node.FullName != nil {
		return true
	}
	// 2. The thing a nameless typedef pulls its name from is implicitly a direct export (either by assignment or actual export flag).
	declName := getNameOfDeclaration(node)
	if declName == nil {
		return false
	}
	if isPropertyAccessEntityNameExpression(declName.Parent) && b.isTopLevelNamespaceAssignment(declName.Parent) {
		return true
	}
	if isDeclaration(declName.Parent) && getCombinedModifierFlags(declName.Parent)&ast.ModifierFlagsExport != 0 {
		return true
	}
	// This could potentially be simplified by having `delayedBindJSDocTypedefTag` pass in an override for `hasExportModifier`, since it should
	// already have calculated and branched on most of this.
	return false
}

// All container nodes are kept on a linked list in declaration order. This list is used by
// the getLocalNameOfContainer function in the type checker to validate that the local name
// used for a container is unique.
func (b *Binder) bindContainer(node Mutable[HasContainerFlags], containerFlags ContainerFlags) {
	// Before we recurse into a node's children, we first save the existing parent, container
	// and block-container.  Then after we pop out of processing the children, we restore
	// these saved values.
	saveContainer := b.container
	saveThisParentContainer := b.thisParentContainer
	savedBlockScopeContainer := b.blockScopeContainer

	// Depending on what kind of node this is, we may have to adjust the current container
	// and block-container.   If the current node is a container, then it is automatically
	// considered the current block-container as well.  Also, for containers that we know
	// may contain locals, we eagerly initialize the .locals field. We do this because
	// it's highly likely that the .locals will be needed to place some child in (for example,
	// a parameter, or variable declaration).
	//
	// However, we do not proactively create the .locals for block-containers because it's
	// totally normal and common for block-containers to never actually have a block-scoped
	// variable in them.  We don't want to end up allocating an object for every 'block' we
	// run into when most of them won't be necessary.
	//
	// Finally, if this is a block-container, then we clear out any existing .locals object
	// it may contain within it.  This happens in incremental scenarios.  Because we can be
	// reusing a node from a previous compilation, that node may have had 'locals' created
	// for it.  We must clear this so we don't accidentally move any stale data forward from
	// a previous compilation.
	if containerFlags&ContainerFlagsIsContainer != 0 {
		if node.Kind != ast.KindArrowFunction {
			b.thisParentContainer = b.container
		}
		b.container = /* TODO(TS-TO-GO) EqualsToken BinaryExpression: blockScopeContainer = node as IsContainer */ TODO
		if containerFlags&ContainerFlagsHasLocals != 0 {
			b.container.AsHasLocals().Locals = createSymbolTable()
			b.addToContainerChain(b.container.AsHasLocals())
		}
	} else if containerFlags&ContainerFlagsIsBlockScopedContainer != 0 {
		b.blockScopeContainer = node.AsIsBlockScopedContainer()
		if containerFlags&ContainerFlagsHasLocals != 0 {
			b.blockScopeContainer.AsHasLocals().Locals = nil
		}
	}
	if containerFlags&ContainerFlagsIsControlFlowContainer != 0 {
		saveCurrentFlow := b.currentFlow
		saveBreakTarget := b.currentBreakTarget
		saveContinueTarget := b.currentContinueTarget
		saveReturnTarget := b.currentReturnTarget
		saveExceptionTarget := b.currentExceptionTarget
		saveActiveLabelList := b.activeLabelList
		saveHasExplicitReturn := b.hasExplicitReturn
		isImmediatelyInvoked := (containerFlags&ContainerFlagsIsFunctionExpression && !hasSyntacticModifier(node, ast.ModifierFlagsAsync) && node.AsFunctionLikeDeclaration().AsteriskToken == nil && getImmediatelyInvokedFunctionExpression(node) != nil) || node.Kind == ast.KindClassStaticBlockDeclaration
		// A non-async, non-generator IIFE is considered part of the containing control flow. Return statements behave
		// similarly to break statements that exit to a label just past the statement body.
		if !isImmediatelyInvoked {
			b.currentFlow = createFlowNode(FlowFlagsStart, nil /*node*/, nil /*antecedent*/)
			if containerFlags&(ContainerFlagsIsFunctionExpression|ContainerFlagsIsObjectLiteralOrClassExpressionMethodOrAccessor) != 0 {
				b.currentFlow.node = node /* as FunctionExpression | ArrowFunction | MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration */
			}
		}
		// We create a return control flow graph for IIFEs and constructors. For constructors
		// we use the return control flow graph in strict property initialization checks.
		if isImmediatelyInvoked || node.Kind == ast.KindConstructor || (isInJSFile(node) && (node.Kind == ast.KindFunctionDeclaration || node.Kind == ast.KindFunctionExpression)) {
			b.currentReturnTarget = b.createBranchLabel()
		} else {
			b.currentReturnTarget = nil
		}
		b.currentExceptionTarget = nil
		b.currentBreakTarget = nil
		b.currentContinueTarget = nil
		b.activeLabelList = nil
		b.hasExplicitReturn = false
		b.bindChildren(node)
		// Reset all reachability check related flags on node (for incremental scenarios)
		node.Flags &^= ast.NodeFlagsReachabilityAndEmitFlags
		if b.currentFlow.flags&FlowFlagsUnreachable == 0 && containerFlags&ContainerFlagsIsFunctionLike != 0 && nodeIsPresent((node /* as FunctionLikeDeclaration | ClassStaticBlockDeclaration */).Body) {
			node.Flags |= ast.NodeFlagsHasImplicitReturn
			if b.hasExplicitReturn {
				node.Flags |= ast.NodeFlagsHasExplicitReturn
			}
			(node /* as FunctionLikeDeclaration | ClassStaticBlockDeclaration */).EndFlowNode = b.currentFlow
		}
		if node.Kind == ast.KindSourceFile {
			node.Flags |= b.emitFlags
			node.AsSourceFile().EndFlowNode = b.currentFlow
		}

		if b.currentReturnTarget != nil {
			b.addAntecedent(b.currentReturnTarget, b.currentFlow)
			b.currentFlow = b.finishFlowLabel(b.currentReturnTarget)
			if node.Kind == ast.KindConstructor || node.Kind == ast.KindClassStaticBlockDeclaration || (isInJSFile(node) && (node.Kind == ast.KindFunctionDeclaration || node.Kind == ast.KindFunctionExpression)) {
				(node /* as FunctionLikeDeclaration | ClassStaticBlockDeclaration */).ReturnFlowNode = b.currentFlow
			}
		}
		if !isImmediatelyInvoked {
			b.currentFlow = saveCurrentFlow
		}
		b.currentBreakTarget = saveBreakTarget
		b.currentContinueTarget = saveContinueTarget
		b.currentReturnTarget = saveReturnTarget
		b.currentExceptionTarget = saveExceptionTarget
		b.activeLabelList = saveActiveLabelList
		b.hasExplicitReturn = saveHasExplicitReturn
	} else if containerFlags&ContainerFlagsIsInterface != 0 {
		b.seenThisKeyword = false
		b.bindChildren(node)
		Debug.assertNotNode(node, isIdentifier)
		// ContainsThis cannot overlap with HasExtendedUnicodeEscape on Identifier
		if b.seenThisKeyword {
			node.Flags = node.Flags | ast.NodeFlagsContainsThis
		} else {
			node.Flags = node.Flags & ^ast.NodeFlagsContainsThis
		}
	} else {
		b.bindChildren(node)
	}

	b.container = saveContainer
	b.thisParentContainer = saveThisParentContainer
	b.blockScopeContainer = savedBlockScopeContainer
}

func (b *Binder) bindEachFunctionsFirst(nodes *NodeArray[*ast.Node]) {
	b.bindEach(nodes, func(n *ast.Node) {
		if n.Kind == ast.KindFunctionDeclaration {
			return b.bind(n)
		} else {
			return nil
		}
	})
	b.bindEach(nodes, func(n *ast.Node) {
		if n.Kind != ast.KindFunctionDeclaration {
			return b.bind(n)
		} else {
			return nil
		}
	})
}

func (b *Binder) bindEach(nodes *NodeArray[*ast.Node], bindFunction func(node *ast.Node) /*  = bind */) {
	if nodes == nil {
		return
	}

	forEach(nodes, bindFunction)
}

func (b *Binder) bindEachChild(node *ast.Node) {
	forEachChild(node, b.bind, b.bindEach)
}

func (b *Binder) bindChildren(node *ast.Node) {
	saveInAssignmentPattern := b.inAssignmentPattern
	// Most nodes aren't valid in an assignment pattern, so we clear the value here
	// and set it before we descend into nodes that could actually be part of an assignment pattern.
	b.inAssignmentPattern = false
	if b.checkUnreachable(node) {
		b.bindEachChild(node)
		b.bindJSDoc(node)
		b.inAssignmentPattern = saveInAssignmentPattern
		return
	}
	if node.Kind >= ast.KindFirstStatement && node.Kind <= ast.KindLastStatement && (!b.options.allowUnreachableCode || node.Kind == ast.KindReturnStatement) {
		node.AsHasFlowNode().FlowNode = b.currentFlow
	}
	switch node.Kind {
	case ast.KindWhileStatement:
		b.bindWhileStatement(node.AsWhileStatement())
	case ast.KindDoStatement:
		b.bindDoStatement(node.AsDoStatement())
	case ast.KindForStatement:
		b.bindForStatement(node.AsForStatement())
	case ast.KindForInStatement,
		ast.KindForOfStatement:
		b.bindForInOrForOfStatement(node.AsForInOrOfStatement())
	case ast.KindIfStatement:
		b.bindIfStatement(node.AsIfStatement())
	case ast.KindReturnStatement,
		ast.KindThrowStatement:
		b.bindReturnOrThrow(node /* as ReturnStatement | ThrowStatement */)
	case ast.KindBreakStatement,
		ast.KindContinueStatement:
		b.bindBreakOrContinueStatement(node.AsBreakOrContinueStatement())
	case ast.KindTryStatement:
		b.bindTryStatement(node.AsTryStatement())
	case ast.KindSwitchStatement:
		b.bindSwitchStatement(node.AsSwitchStatement())
	case ast.KindCaseBlock:
		b.bindCaseBlock(node.AsCaseBlock())
	case ast.KindCaseClause:
		b.bindCaseClause(node.AsCaseClause())
	case ast.KindExpressionStatement:
		b.bindExpressionStatement(node.AsExpressionStatement())
	case ast.KindLabeledStatement:
		b.bindLabeledStatement(node.AsLabeledStatement())
	case ast.KindPrefixUnaryExpression:
		b.bindPrefixUnaryExpressionFlow(node.AsPrefixUnaryExpression())
	case ast.KindPostfixUnaryExpression:
		b.bindPostfixUnaryExpressionFlow(node.AsPostfixUnaryExpression())
	case ast.KindBinaryExpression:
		if isDestructuringAssignment(node) {
			// Carry over whether we are in an assignment pattern to
			// binary expressions that could actually be an initializer
			b.inAssignmentPattern = saveInAssignmentPattern
			b.bindDestructuringAssignmentFlow(node)
			return
		}
		b.bindBinaryExpressionFlow(node.AsBinaryExpression())
	case ast.KindDeleteExpression:
		b.bindDeleteExpressionFlow(node.AsDeleteExpression())
	case ast.KindConditionalExpression:
		b.bindConditionalExpressionFlow(node.AsConditionalExpression())
	case ast.KindVariableDeclaration:
		b.bindVariableDeclarationFlow(node.AsVariableDeclaration())
	case ast.KindPropertyAccessExpression,
		ast.KindElementAccessExpression:
		b.bindAccessExpressionFlow(node.AsAccessExpression())
	case ast.KindCallExpression:
		b.bindCallExpressionFlow(node.AsCallExpression())
	case ast.KindNonNullExpression:
		b.bindNonNullExpressionFlow(node.AsNonNullExpression())
	case ast.KindJSDocTypedefTag,
		ast.KindJSDocCallbackTag,
		ast.KindJSDocEnumTag:
		b.bindJSDocTypeAlias(node /* as JSDocTypedefTag | JSDocCallbackTag | JSDocEnumTag */)
	case ast.KindJSDocImportTag:
		b.bindJSDocImportTag(node.AsJSDocImportTag())
		// In source files and blocks, bind functions first to match hoisting that occurs at runtime
	case ast.KindSourceFile:
		b.bindEachFunctionsFirst(node.AsSourceFile().Statements)
		b.bind(node.AsSourceFile().EndOfFileToken)
	case ast.KindBlock,
		ast.KindModuleBlock:
		b.bindEachFunctionsFirst(node.AsBlock().Statements)
	case ast.KindBindingElement:
		b.bindBindingElementFlow(node.AsBindingElement())
	case ast.KindParameter:
		b.bindParameterFlow(node.AsParameterDeclaration())
	case ast.KindObjectLiteralExpression,
		ast.KindArrayLiteralExpression,
		ast.KindPropertyAssignment,
		ast.KindSpreadElement:
		// Carry over whether we are in an assignment pattern of Object and Array literals
		// as well as their children that are valid assignment targets.
		b.inAssignmentPattern = saveInAssignmentPattern
		fallthrough
	default:
		b.bindEachChild(node)
	}
	b.bindJSDoc(node)
	b.inAssignmentPattern = saveInAssignmentPattern
}

func (b *Binder) isNarrowingExpression(expr Expression) bool {
	switch expr.Kind {
	case ast.KindIdentifier,
		ast.KindThisKeyword:
		return true
	case ast.KindPropertyAccessExpression,
		ast.KindElementAccessExpression:
		return b.containsNarrowableReference(expr)
	case ast.KindCallExpression:
		return b.hasNarrowableArgument(expr.AsCallExpression())
	case ast.KindParenthesizedExpression:
		if isJSDocTypeAssertion(expr) {
			return false
		}
		fallthrough
	case ast.KindNonNullExpression:
		return b.isNarrowingExpression((expr /* as ParenthesizedExpression | NonNullExpression */).Expression)
	case ast.KindBinaryExpression:
		return b.isNarrowingBinaryExpression(expr.AsBinaryExpression())
	case ast.KindPrefixUnaryExpression:
		return expr.AsPrefixUnaryExpression().Operator == ast.KindExclamationToken && b.isNarrowingExpression(expr.AsPrefixUnaryExpression().Operand)
	case ast.KindTypeOfExpression:
		return b.isNarrowingExpression(expr.AsTypeOfExpression().Expression)
	}
	return false
}

func (b *Binder) isNarrowableReference(expr Expression) bool {
	switch expr.Kind {
	case ast.KindIdentifier,
		ast.KindThisKeyword,
		ast.KindSuperKeyword,
		ast.KindMetaProperty:
		return true
	case ast.KindPropertyAccessExpression,
		ast.KindParenthesizedExpression,
		ast.KindNonNullExpression:
		return b.isNarrowableReference((expr /* as PropertyAccessExpression | ParenthesizedExpression | NonNullExpression */).Expression)
	case ast.KindElementAccessExpression:
		return (isStringOrNumericLiteralLike(expr.AsElementAccessExpression().ArgumentExpression) || isEntityNameExpression(expr.AsElementAccessExpression().ArgumentExpression)) && b.isNarrowableReference(expr.AsElementAccessExpression().Expression)
	case ast.KindBinaryExpression:
		return expr.AsBinaryExpression().OperatorToken.Kind == ast.KindCommaToken && b.isNarrowableReference(expr.AsBinaryExpression().Right) || isAssignmentOperator(expr.AsBinaryExpression().OperatorToken.Kind) && isLeftHandSideExpression(expr.AsBinaryExpression().Left)
	}
	return false
}

func (b *Binder) containsNarrowableReference(expr Expression) bool {
	return b.isNarrowableReference(expr) || isOptionalChain(expr) && b.containsNarrowableReference(expr.Expression)
}

func (b *Binder) hasNarrowableArgument(expr CallExpression) bool {
	if expr.Arguments {
		for _, argument := range expr.Arguments {
			if b.containsNarrowableReference(argument) {
				return true
			}
		}
	}
	if expr.Expression.Kind == ast.KindPropertyAccessExpression && b.containsNarrowableReference(expr.Expression.AsPropertyAccessExpression().Expression) {
		return true
	}
	return false
}

func (b *Binder) isNarrowingTypeofOperands(expr1 Expression, expr2 Expression) bool {
	return isTypeOfExpression(expr1) && b.isNarrowableOperand(expr1.Expression) && isStringLiteralLike(expr2)
}

func (b *Binder) isNarrowingBinaryExpression(expr BinaryExpression) bool {
	switch expr.OperatorToken.Kind {
	case ast.KindEqualsToken,
		ast.KindBarBarEqualsToken,
		ast.KindAmpersandAmpersandEqualsToken,
		ast.KindQuestionQuestionEqualsToken:
		return b.containsNarrowableReference(expr.Left)
	case ast.KindEqualsEqualsToken,
		ast.KindExclamationEqualsToken,
		ast.KindEqualsEqualsEqualsToken,
		ast.KindExclamationEqualsEqualsToken:
		return b.isNarrowableOperand(expr.Left) || b.isNarrowableOperand(expr.Right) || b.isNarrowingTypeofOperands(expr.Right, expr.Left) || b.isNarrowingTypeofOperands(expr.Left, expr.Right) || (isBooleanLiteral(expr.Right) && b.isNarrowingExpression(expr.Left) || isBooleanLiteral(expr.Left) && b.isNarrowingExpression(expr.Right))
	case ast.KindInstanceOfKeyword:
		return b.isNarrowableOperand(expr.Left)
	case ast.KindInKeyword:
		return b.isNarrowingExpression(expr.Right)
	case ast.KindCommaToken:
		return b.isNarrowingExpression(expr.Right)
	}
	return false
}

func (b *Binder) isNarrowableOperand(expr Expression) bool {
	switch expr.Kind {
	case ast.KindParenthesizedExpression:
		return b.isNarrowableOperand(expr.AsParenthesizedExpression().Expression)
	case ast.KindBinaryExpression:
		switch expr.AsBinaryExpression().OperatorToken.Kind {
		case ast.KindEqualsToken:
			return b.isNarrowableOperand(expr.AsBinaryExpression().Left)
		case ast.KindCommaToken:
			return b.isNarrowableOperand(expr.AsBinaryExpression().Right)
		}
	}
	return b.containsNarrowableReference(expr)
}

func (b *Binder) createBranchLabel() FlowLabel {
	return createFlowNode(FlowFlagsBranchLabel, nil /*node*/, nil /*antecedent*/).(FlowLabel)
}

func (b *Binder) createLoopLabel() FlowLabel {
	return createFlowNode(FlowFlagsLoopLabel, nil /*node*/, nil /*antecedent*/).(FlowLabel)
}

func (b *Binder) createReduceLabel(target FlowLabel, antecedents []FlowNode, antecedent FlowNode) FlowReduceLabel {
	return createFlowNode(FlowFlagsReduceLabel, any{
		target:      target,
		antecedents: antecedents,
	}, antecedent).(FlowReduceLabel)
}

func (b *Binder) setFlowNodeReferenced(flow FlowNode) {
	// On first reference we set the Referenced flag, thereafter we set the Shared flag
	if flow.flags&FlowFlagsReferenced != 0 {
		flow.flags |= FlowFlagsShared
	} else {
		flow.flags |= FlowFlagsReferenced
	}
}

func (b *Binder) addAntecedent(label FlowLabel, antecedent FlowNode) {
	if antecedent.flags&FlowFlagsUnreachable == 0 && !contains(label.antecedent, antecedent) {
		(label.antecedent || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: label.antecedent = [] */ TODO)).push(antecedent)
		b.setFlowNodeReferenced(antecedent)
	}
}

func (b *Binder) createFlowCondition(flags Union[ /* TODO(TS-TO-GO) Node QualifiedName: FlowFlags.TrueCondition */ any /* TODO(TS-TO-GO) Node QualifiedName: FlowFlags.FalseCondition */, any], antecedent FlowNode, expression Expression) FlowNode {
	if antecedent.flags&FlowFlagsUnreachable != 0 {
		return antecedent
	}
	if expression == nil {
		if flags&FlowFlagsTrueCondition != 0 {
			return antecedent
		} else {
			return b.unreachableFlow
		}
	}
	if (expression.Kind == ast.KindTrueKeyword && flags&FlowFlagsFalseCondition != 0 || expression.Kind == ast.KindFalseKeyword && flags&FlowFlagsTrueCondition != 0) && !isExpressionOfOptionalChainRoot(expression) && !isNullishCoalesce(expression.Parent) {
		return b.unreachableFlow
	}
	if !b.isNarrowingExpression(expression) {
		return antecedent
	}
	b.setFlowNodeReferenced(antecedent)
	return createFlowNode(flags, expression, antecedent).(FlowCondition)
}

func (b *Binder) createFlowSwitchClause(antecedent FlowNode, switchStatement SwitchStatement, clauseStart number, clauseEnd number) FlowSwitchClause {
	b.setFlowNodeReferenced(antecedent)
	return createFlowNode(FlowFlagsSwitchClause, any{
		switchStatement: switchStatement,
		clauseStart:     clauseStart,
		clauseEnd:       clauseEnd,
	}, antecedent).(FlowSwitchClause)
}

func (b *Binder) createFlowMutation(flags Union[ /* TODO(TS-TO-GO) Node QualifiedName: FlowFlags.Assignment */ any /* TODO(TS-TO-GO) Node QualifiedName: FlowFlags.ArrayMutation */, any], antecedent FlowNode, node Union[Expression, VariableDeclaration, ArrayBindingElement]) /* TODO(TS-TO-GO) inferred type FlowAssignment | FlowArrayMutation */ any {
	b.setFlowNodeReferenced(antecedent)
	b.hasFlowEffects = true
	result := createFlowNode(flags, node, antecedent) /* as FlowAssignment | FlowArrayMutation */
	if b.currentExceptionTarget != nil {
		b.addAntecedent(b.currentExceptionTarget, result)
	}
	return result
}

func (b *Binder) createFlowCall(antecedent FlowNode, node CallExpression) FlowCall {
	b.setFlowNodeReferenced(antecedent)
	b.hasFlowEffects = true
	return createFlowNode(FlowFlagsCall, node, antecedent).(FlowCall)
}

func (b *Binder) finishFlowLabel(flow FlowLabel) FlowNode {
	antecedents := flow.antecedent
	if antecedents == nil {
		return b.unreachableFlow
	}
	if antecedents.length == 1 {
		return antecedents[0]
	}
	return flow
}

func (b *Binder) isStatementCondition(node *ast.Node) bool {
	parent := node.Parent
	switch parent.Kind {
	case ast.KindIfStatement,
		ast.KindWhileStatement,
		ast.KindDoStatement:
		return (parent /* as IfStatement | WhileStatement | DoStatement */).Expression == node
	case ast.KindForStatement,
		ast.KindConditionalExpression:
		return (parent /* as ForStatement | ConditionalExpression */).Condition == node
	}
	return false
}

func (b *Binder) isLogicalExpression(node *ast.Node) bool {
	for true {
		if node.Kind == ast.KindParenthesizedExpression {
			node = node.AsParenthesizedExpression().Expression
		} else if node.Kind == ast.KindPrefixUnaryExpression && node.AsPrefixUnaryExpression().Operator == ast.KindExclamationToken {
			node = node.AsPrefixUnaryExpression().Operand
		} else {
			return isLogicalOrCoalescingBinaryExpression(node)
		}
	}
}

func (b *Binder) isLogicalAssignmentExpression(node *ast.Node) bool {
	return isLogicalOrCoalescingAssignmentExpression(skipParentheses(node))
}

func (b *Binder) isTopLevelLogicalExpression(node *ast.Node) bool {
	for isParenthesizedExpression(node.Parent) || isPrefixUnaryExpression(node.Parent) && node.Parent.Operator == ast.KindExclamationToken {
		node = node.Parent
	}
	return !b.isStatementCondition(node) && !b.isLogicalExpression(node.Parent) && !(isOptionalChain(node.Parent) && node.Parent.Expression == node)
}

func (b *Binder) doWithConditionalBranches(action func(value T), value T, trueTarget FlowLabel, falseTarget FlowLabel) {
	savedTrueTarget := b.currentTrueTarget
	savedFalseTarget := b.currentFalseTarget
	b.currentTrueTarget = trueTarget
	b.currentFalseTarget = falseTarget
	action(value)
	b.currentTrueTarget = savedTrueTarget
	b.currentFalseTarget = savedFalseTarget
}

func (b *Binder) bindCondition(node Expression, trueTarget FlowLabel, falseTarget FlowLabel) {
	b.doWithConditionalBranches(b.bind, node, trueTarget, falseTarget)
	if node == nil || !b.isLogicalAssignmentExpression(node) && !b.isLogicalExpression(node) && !(isOptionalChain(node) && isOutermostOptionalChain(node)) {
		b.addAntecedent(trueTarget, b.createFlowCondition(FlowFlagsTrueCondition, b.currentFlow, node))
		b.addAntecedent(falseTarget, b.createFlowCondition(FlowFlagsFalseCondition, b.currentFlow, node))
	}
}

func (b *Binder) bindIterativeStatement(node Statement, breakTarget FlowLabel, continueTarget FlowLabel) {
	saveBreakTarget := b.currentBreakTarget
	saveContinueTarget := b.currentContinueTarget
	b.currentBreakTarget = breakTarget
	b.currentContinueTarget = continueTarget
	b.bind(node)
	b.currentBreakTarget = saveBreakTarget
	b.currentContinueTarget = saveContinueTarget
}

func (b *Binder) setContinueTarget(node *ast.Node, target FlowLabel) FlowLabel {
	label := b.activeLabelList
	for label != nil && node.Parent.Kind == ast.KindLabeledStatement {
		label.continueTarget = target
		label = label.next
		node = node.Parent
	}
	return target
}

func (b *Binder) bindWhileStatement(node WhileStatement) {
	preWhileLabel := b.setContinueTarget(node, b.createLoopLabel())
	preBodyLabel := b.createBranchLabel()
	postWhileLabel := b.createBranchLabel()
	b.addAntecedent(preWhileLabel, b.currentFlow)
	b.currentFlow = preWhileLabel
	b.bindCondition(node.Expression, preBodyLabel, postWhileLabel)
	b.currentFlow = b.finishFlowLabel(preBodyLabel)
	b.bindIterativeStatement(node.Statement, postWhileLabel, preWhileLabel)
	b.addAntecedent(preWhileLabel, b.currentFlow)
	b.currentFlow = b.finishFlowLabel(postWhileLabel)
}

func (b *Binder) bindDoStatement(node DoStatement) {
	preDoLabel := b.createLoopLabel()
	preConditionLabel := b.setContinueTarget(node, b.createBranchLabel())
	postDoLabel := b.createBranchLabel()
	b.addAntecedent(preDoLabel, b.currentFlow)
	b.currentFlow = preDoLabel
	b.bindIterativeStatement(node.Statement, postDoLabel, preConditionLabel)
	b.addAntecedent(preConditionLabel, b.currentFlow)
	b.currentFlow = b.finishFlowLabel(preConditionLabel)
	b.bindCondition(node.Expression, preDoLabel, postDoLabel)
	b.currentFlow = b.finishFlowLabel(postDoLabel)
}

func (b *Binder) bindForStatement(node ForStatement) {
	preLoopLabel := b.setContinueTarget(node, b.createLoopLabel())
	preBodyLabel := b.createBranchLabel()
	postLoopLabel := b.createBranchLabel()
	b.bind(node.Initializer)
	b.addAntecedent(preLoopLabel, b.currentFlow)
	b.currentFlow = preLoopLabel
	b.bindCondition(node.Condition, preBodyLabel, postLoopLabel)
	b.currentFlow = b.finishFlowLabel(preBodyLabel)
	b.bindIterativeStatement(node.Statement, postLoopLabel, preLoopLabel)
	b.bind(node.Incrementor)
	b.addAntecedent(preLoopLabel, b.currentFlow)
	b.currentFlow = b.finishFlowLabel(postLoopLabel)
}

func (b *Binder) bindForInOrForOfStatement(node ForInOrOfStatement) {
	preLoopLabel := b.setContinueTarget(node, b.createLoopLabel())
	postLoopLabel := b.createBranchLabel()
	b.bind(node.Expression)
	b.addAntecedent(preLoopLabel, b.currentFlow)
	b.currentFlow = preLoopLabel
	if node.Kind == ast.KindForOfStatement {
		b.bind(node.AwaitModifier)
	}
	b.addAntecedent(postLoopLabel, b.currentFlow)
	b.bind(node.Initializer)
	if node.Initializer.Kind != ast.KindVariableDeclarationList {
		b.bindAssignmentTargetFlow(node.Initializer)
	}
	b.bindIterativeStatement(node.Statement, postLoopLabel, preLoopLabel)
	b.addAntecedent(preLoopLabel, b.currentFlow)
	b.currentFlow = b.finishFlowLabel(postLoopLabel)
}

func (b *Binder) bindIfStatement(node IfStatement) {
	thenLabel := b.createBranchLabel()
	elseLabel := b.createBranchLabel()
	postIfLabel := b.createBranchLabel()
	b.bindCondition(node.Expression, thenLabel, elseLabel)
	b.currentFlow = b.finishFlowLabel(thenLabel)
	b.bind(node.ThenStatement)
	b.addAntecedent(postIfLabel, b.currentFlow)
	b.currentFlow = b.finishFlowLabel(elseLabel)
	b.bind(node.ElseStatement)
	b.addAntecedent(postIfLabel, b.currentFlow)
	b.currentFlow = b.finishFlowLabel(postIfLabel)
}

func (b *Binder) bindReturnOrThrow(node Union[ReturnStatement, ThrowStatement]) {
	b.bind(node.Expression)
	if node.Kind == ast.KindReturnStatement {
		b.hasExplicitReturn = true
		if b.currentReturnTarget != nil {
			b.addAntecedent(b.currentReturnTarget, b.currentFlow)
		}
	}
	b.currentFlow = b.unreachableFlow
	b.hasFlowEffects = true
}

func (b *Binder) findActiveLabel(name string) *ActiveLabel {
	for label := b.activeLabelList; label != nil; label = label.next {
		if label.name == name {
			return label
		}
	}
	return nil
}

func (b *Binder) bindBreakOrContinueFlow(node BreakOrContinueStatement, breakTarget *FlowLabel, continueTarget *FlowLabel) {
	var flowLabel *FlowLabel
	if node.Kind == ast.KindBreakStatement {
		flowLabel = breakTarget
	} else {
		flowLabel = continueTarget
	}
	if flowLabel != nil {
		b.addAntecedent(flowLabel, b.currentFlow)
		b.currentFlow = b.unreachableFlow
		b.hasFlowEffects = true
	}
}

func (b *Binder) bindBreakOrContinueStatement(node BreakOrContinueStatement) {
	b.bind(node.Label)
	if node.Label != nil {
		activeLabel := b.findActiveLabel(node.Label.EscapedText)
		if activeLabel != nil {
			activeLabel.referenced = true
			b.bindBreakOrContinueFlow(node, activeLabel.breakTarget, activeLabel.continueTarget)
		}
	} else {
		b.bindBreakOrContinueFlow(node, b.currentBreakTarget, b.currentContinueTarget)
	}
}

func (b *Binder) bindTryStatement(node TryStatement) {
	// We conservatively assume that *any* code in the try block can cause an exception, but we only need
	// to track code that causes mutations (because only mutations widen the possible control flow type of
	// a variable). The exceptionLabel is the target label for control flows that result from exceptions.
	// We add all mutation flow nodes as antecedents of this label such that we can analyze them as possible
	// antecedents of the start of catch or finally blocks. Furthermore, we add the current control flow to
	// represent exceptions that occur before any mutations.
	saveReturnTarget := b.currentReturnTarget
	saveExceptionTarget := b.currentExceptionTarget
	normalExitLabel := b.createBranchLabel()
	returnLabel := b.createBranchLabel()
	exceptionLabel := b.createBranchLabel()
	if node.FinallyBlock != nil {
		b.currentReturnTarget = returnLabel
	}
	b.addAntecedent(exceptionLabel, b.currentFlow)
	b.currentExceptionTarget = exceptionLabel
	b.bind(node.TryBlock)
	b.addAntecedent(normalExitLabel, b.currentFlow)
	if node.CatchClause != nil {
		// Start of catch clause is the target of exceptions from try block.
		b.currentFlow = b.finishFlowLabel(exceptionLabel)
		// The currentExceptionTarget now represents control flows from exceptions in the catch clause.
		// Effectively, in a try-catch-finally, if an exception occurs in the try block, the catch block
		// acts like a second try block.
		exceptionLabel = b.createBranchLabel()
		b.addAntecedent(exceptionLabel, b.currentFlow)
		b.currentExceptionTarget = exceptionLabel
		b.bind(node.CatchClause)
		b.addAntecedent(normalExitLabel, b.currentFlow)
	}
	b.currentReturnTarget = saveReturnTarget
	b.currentExceptionTarget = saveExceptionTarget
	if node.FinallyBlock != nil {
		// Possible ways control can reach the finally block:
		// 1) Normal completion of try block of a try-finally or try-catch-finally
		// 2) Normal completion of catch block (following exception in try block) of a try-catch-finally
		// 3) Return in try or catch block of a try-finally or try-catch-finally
		// 4) Exception in try block of a try-finally
		// 5) Exception in catch block of a try-catch-finally
		// When analyzing a control flow graph that starts inside a finally block we want to consider all
		// five possibilities above. However, when analyzing a control flow graph that starts outside (past)
		// the finally block, we only want to consider the first two (if we're past a finally block then it
		// must have completed normally). Likewise, when analyzing a control flow graph from return statements
		// in try or catch blocks in an IIFE, we only want to consider the third. To make this possible, we
		// inject a ReduceLabel node into the control flow graph. This node contains an alternate reduced
		// set of antecedents for the pre-finally label. As control flow analysis passes by a ReduceLabel
		// node, the pre-finally label is temporarily switched to the reduced antecedent set.
		finallyLabel := b.createBranchLabel()
		finallyLabel.antecedent = concatenate(concatenate(normalExitLabel.antecedent, exceptionLabel.antecedent), returnLabel.antecedent)
		b.currentFlow = finallyLabel
		b.bind(node.FinallyBlock)
		if b.currentFlow.flags&FlowFlagsUnreachable != 0 {
			// If the end of the finally block is unreachable, the end of the entire try statement is unreachable.
			b.currentFlow = b.unreachableFlow
		} else {
			// If we have an IIFE return target and return statements in the try or catch blocks, add a control
			// flow that goes back through the finally block and back through only the return statements.
			if b.currentReturnTarget != nil && returnLabel.antecedent != nil {
				b.addAntecedent(b.currentReturnTarget, b.createReduceLabel(finallyLabel, returnLabel.antecedent, b.currentFlow))
			}
			// If we have an outer exception target (i.e. a containing try-finally or try-catch-finally), add a
			// control flow that goes back through the finally blok and back through each possible exception source.
			if b.currentExceptionTarget != nil && exceptionLabel.antecedent != nil {
				b.addAntecedent(b.currentExceptionTarget, b.createReduceLabel(finallyLabel, exceptionLabel.antecedent, b.currentFlow))
			}
			// If the end of the finally block is reachable, but the end of the try and catch blocks are not,
			// convert the current flow to unreachable. For example, 'try { return 1; } finally { ... }' should
			// result in an unreachable current control flow.
			if normalExitLabel.antecedent != nil {
				b.currentFlow = b.createReduceLabel(finallyLabel, normalExitLabel.antecedent, b.currentFlow)
			} else {
				b.currentFlow = b.unreachableFlow
			}
		}
	} else {
		b.currentFlow = b.finishFlowLabel(normalExitLabel)
	}
}

func (b *Binder) bindSwitchStatement(node SwitchStatement) {
	postSwitchLabel := b.createBranchLabel()
	b.bind(node.Expression)
	saveBreakTarget := b.currentBreakTarget
	savePreSwitchCaseFlow := b.preSwitchCaseFlow
	b.currentBreakTarget = postSwitchLabel
	b.preSwitchCaseFlow = b.currentFlow
	b.bind(node.CaseBlock)
	b.addAntecedent(postSwitchLabel, b.currentFlow)
	hasDefault := forEach(node.CaseBlock.Clauses, func(c /* TODO(TS-TO-GO) inferred type CaseClause | DefaultClause */ any) bool {
		return c.Kind == ast.KindDefaultClause
	})
	// We mark a switch statement as possibly exhaustive if it has no default clause and if all
	// case clauses have unreachable end points (e.g. they all return). Note, we no longer need
	// this property in control flow analysis, it's there only for backwards compatibility.
	node.PossiblyExhaustive = !hasDefault && postSwitchLabel.antecedent == nil
	if !hasDefault {
		b.addAntecedent(postSwitchLabel, b.createFlowSwitchClause(b.preSwitchCaseFlow, node, 0, 0))
	}
	b.currentBreakTarget = saveBreakTarget
	b.preSwitchCaseFlow = savePreSwitchCaseFlow
	b.currentFlow = b.finishFlowLabel(postSwitchLabel)
}

func (b *Binder) bindCaseBlock(node CaseBlock) {
	clauses := node.Clauses
	isNarrowingSwitch := node.Parent.Expression.Kind == ast.KindTrueKeyword || b.isNarrowingExpression(node.Parent.Expression)
	var fallthroughFlow FlowNode = b.unreachableFlow

	for i := 0; i < clauses.length; i++ {
		clauseStart := i
		for clauses[i].Statements.length == 0 && i+1 < clauses.length {
			if fallthroughFlow == b.unreachableFlow {
				b.currentFlow = b.preSwitchCaseFlow
			}
			b.bind(clauses[i])
			i++
		}
		preCaseLabel := b.createBranchLabel()
		b.addAntecedent(preCaseLabel, ifElse(isNarrowingSwitch, b.createFlowSwitchClause(b.preSwitchCaseFlow, node.Parent, clauseStart, i+1), b.preSwitchCaseFlow))
		b.addAntecedent(preCaseLabel, fallthroughFlow)
		b.currentFlow = b.finishFlowLabel(preCaseLabel)
		clause := clauses[i]
		b.bind(clause)
		fallthroughFlow = b.currentFlow
		if b.currentFlow.flags&FlowFlagsUnreachable == 0 && i != clauses.length-1 && b.options.noFallthroughCasesInSwitch {
			clause.FallthroughFlowNode = b.currentFlow
		}
	}
}

func (b *Binder) bindCaseClause(node CaseClause) {
	saveCurrentFlow := b.currentFlow
	b.currentFlow = b.preSwitchCaseFlow
	b.bind(node.Expression)
	b.currentFlow = saveCurrentFlow
	b.bindEach(node.Statements)
}

func (b *Binder) bindExpressionStatement(node ExpressionStatement) {
	b.bind(node.Expression)
	b.maybeBindExpressionFlowIfCall(node.Expression)
}

func (b *Binder) maybeBindExpressionFlowIfCall(node Expression) {
	// A top level or comma expression call expression with a dotted function name and at least one argument
	// is potentially an assertion and is therefore included in the control flow.
	if node.Kind == ast.KindCallExpression {
		call := node.AsCallExpression()
		if call.Expression.Kind != ast.KindSuperKeyword && isDottedName(call.Expression) {
			b.currentFlow = b.createFlowCall(b.currentFlow, call)
		}
	}
}

func (b *Binder) bindLabeledStatement(node LabeledStatement) {
	postStatementLabel := b.createBranchLabel()
	b.activeLabelList = &ActiveLabel{
		next:           b.activeLabelList,
		name:           node.Label.EscapedText,
		breakTarget:    postStatementLabel,
		continueTarget: nil,
		referenced:     false,
	}
	b.bind(node.Label)
	b.bind(node.Statement)
	if !b.activeLabelList.referenced && !b.options.allowUnusedLabels {
		b.errorOrSuggestionOnNode(unusedLabelIsError(b.options), node.Label, Diagnostics.Unused_label)
	}
	b.activeLabelList = b.activeLabelList.next
	b.addAntecedent(postStatementLabel, b.currentFlow)
	b.currentFlow = b.finishFlowLabel(postStatementLabel)
}

func (b *Binder) bindDestructuringTargetFlow(node Expression) {
	if node.Kind == ast.KindBinaryExpression && node.AsBinaryExpression().OperatorToken.Kind == ast.KindEqualsToken {
		b.bindAssignmentTargetFlow(node.AsBinaryExpression().Left)
	} else {
		b.bindAssignmentTargetFlow(node)
	}
}

func (b *Binder) bindAssignmentTargetFlow(node Expression) {
	if b.isNarrowableReference(node) {
		b.currentFlow = b.createFlowMutation(FlowFlagsAssignment, b.currentFlow, node)
	} else if node.Kind == ast.KindArrayLiteralExpression {
		for _, e := range node.AsArrayLiteralExpression().Elements {
			if e.Kind == ast.KindSpreadElement {
				b.bindAssignmentTargetFlow(e.AsSpreadElement().Expression)
			} else {
				b.bindDestructuringTargetFlow(e)
			}
		}
	} else if node.Kind == ast.KindObjectLiteralExpression {
		for _, p := range node.AsObjectLiteralExpression().Properties {
			if p.Kind == ast.KindPropertyAssignment {
				b.bindDestructuringTargetFlow(p.Initializer)
			} else if p.Kind == ast.KindShorthandPropertyAssignment {
				b.bindAssignmentTargetFlow(p.Name)
			} else if p.Kind == ast.KindSpreadAssignment {
				b.bindAssignmentTargetFlow(p.Expression)
			}
		}
	}
}

func (b *Binder) bindLogicalLikeExpression(node BinaryExpression, trueTarget FlowLabel, falseTarget FlowLabel) {
	preRightLabel := b.createBranchLabel()
	if node.OperatorToken.Kind == ast.KindAmpersandAmpersandToken || node.OperatorToken.Kind == ast.KindAmpersandAmpersandEqualsToken {
		b.bindCondition(node.Left, preRightLabel, falseTarget)
	} else {
		b.bindCondition(node.Left, trueTarget, preRightLabel)
	}
	b.currentFlow = b.finishFlowLabel(preRightLabel)
	b.bind(node.OperatorToken)

	if isLogicalOrCoalescingAssignmentOperator(node.OperatorToken.Kind) {
		b.doWithConditionalBranches(b.bind, node.Right, trueTarget, falseTarget)
		b.bindAssignmentTargetFlow(node.Left)

		b.addAntecedent(trueTarget, b.createFlowCondition(FlowFlagsTrueCondition, b.currentFlow, node))
		b.addAntecedent(falseTarget, b.createFlowCondition(FlowFlagsFalseCondition, b.currentFlow, node))
	} else {
		b.bindCondition(node.Right, trueTarget, falseTarget)
	}
}

func (b *Binder) bindPrefixUnaryExpressionFlow(node PrefixUnaryExpression) {
	if node.Operator == ast.KindExclamationToken {
		saveTrueTarget := b.currentTrueTarget
		b.currentTrueTarget = b.currentFalseTarget
		b.currentFalseTarget = saveTrueTarget
		b.bindEachChild(node)
		b.currentFalseTarget = b.currentTrueTarget
		b.currentTrueTarget = saveTrueTarget
	} else {
		b.bindEachChild(node)
		if node.Operator == ast.KindPlusPlusToken || node.Operator == ast.KindMinusMinusToken {
			b.bindAssignmentTargetFlow(node.Operand)
		}
	}
}

func (b *Binder) bindPostfixUnaryExpressionFlow(node PostfixUnaryExpression) {
	b.bindEachChild(node)
	if node.Operator == ast.KindPlusPlusToken || node.Operator == ast.KindMinusMinusToken {
		b.bindAssignmentTargetFlow(node.Operand)
	}
}

func (b *Binder) bindDestructuringAssignmentFlow(node DestructuringAssignment) {
	if b.inAssignmentPattern {
		b.inAssignmentPattern = false
		b.bind(node.OperatorToken)
		b.bind(node.Right)
		b.inAssignmentPattern = true
		b.bind(node.Left)
	} else {
		b.inAssignmentPattern = true
		b.bind(node.Left)
		b.inAssignmentPattern = false
		b.bind(node.OperatorToken)
		b.bind(node.Right)
	}
	b.bindAssignmentTargetFlow(node.Left)
}

func (b *Binder) createBindBinaryExpressionFlow() /* TODO(TS-TO-GO) inferred type (node: BinaryExpression) => void */ any {
	type WorkArea struct {
		stackIndex        number
		skip              bool
		inStrictModeStack []*bool
		parentStack       []*ast.Node
	}

	return createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, nil /*foldState*/)

	onEnter := func(node BinaryExpression, state *WorkArea) WorkArea {
		if state != nil {
			state.stackIndex++
			// Emulate the work that `bind` does before reaching `bindChildren`. A normal call to
			// `bindBinaryExpressionFlow` will already have done this work.
			setParent(node, b.parent)
			saveInStrictMode := b.inStrictMode
			b.bindWorker(node)
			saveParent := b.parent
			b.parent = node
			state.skip = false
			state.inStrictModeStack[state.stackIndex] = saveInStrictMode
			state.parentStack[state.stackIndex] = saveParent
		} else {
			state = &WorkArea{
				stackIndex:        0,
				skip:              false,
				inStrictModeStack: []undefined{nil},
				parentStack:       []undefined{nil},
			}
		}
		// TODO: bindLogicalExpression is recursive - if we want to handle deeply nested `&&` expressions
		// we'll need to handle the `bindLogicalExpression` scenarios in this state machine, too
		// For now, though, since the common cases are chained `+`, leaving it recursive is fine
		operator := node.OperatorToken.Kind
		if isLogicalOrCoalescingBinaryOperator(operator) || isLogicalOrCoalescingAssignmentOperator(operator) {
			if b.isTopLevelLogicalExpression(node) {
				postExpressionLabel := b.createBranchLabel()
				saveCurrentFlow := b.currentFlow
				saveHasFlowEffects := b.hasFlowEffects
				b.hasFlowEffects = false
				b.bindLogicalLikeExpression(node, postExpressionLabel, postExpressionLabel)
				if b.hasFlowEffects {
					b.currentFlow = b.finishFlowLabel(postExpressionLabel)
				} else {
					b.currentFlow = saveCurrentFlow
				}
				b.hasFlowEffects = b.hasFlowEffects || saveHasFlowEffects
			} else {
				b.bindLogicalLikeExpression(node, b.currentTrueTarget, b.currentFalseTarget)
			}
			state.skip = true
		}
		return state
	}

	onLeft := func(left Expression, state WorkArea, node BinaryExpression) *BinaryExpression {
		if !state.skip {
			maybeBound := maybeBind(left)
			if node.OperatorToken.Kind == ast.KindCommaToken {
				b.maybeBindExpressionFlowIfCall(left)
			}
			return maybeBound
		}
	}

	onOperator := func(operatorToken BinaryOperatorToken, state WorkArea, _node BinaryExpression) {
		if !state.skip {
			b.bind(operatorToken)
		}
	}

	onRight := func(right Expression, state WorkArea, node BinaryExpression) *BinaryExpression {
		if !state.skip {
			maybeBound := maybeBind(right)
			if node.OperatorToken.Kind == ast.KindCommaToken {
				b.maybeBindExpressionFlowIfCall(right)
			}
			return maybeBound
		}
	}

	onExit := func(node BinaryExpression, state WorkArea) {
		if !state.skip {
			operator := node.OperatorToken.Kind
			if isAssignmentOperator(operator) && !isAssignmentTarget(node) {
				b.bindAssignmentTargetFlow(node.Left)
				if operator == ast.KindEqualsToken && node.Left.Kind == ast.KindElementAccessExpression {
					elementAccess := node.Left.AsElementAccessExpression()
					if b.isNarrowableOperand(elementAccess.Expression) {
						b.currentFlow = b.createFlowMutation(FlowFlagsArrayMutation, b.currentFlow, node)
					}
				}
			}
		}
		savedInStrictMode := state.inStrictModeStack[state.stackIndex]
		savedParent := state.parentStack[state.stackIndex]
		if savedInStrictMode != nil {
			b.inStrictMode = savedInStrictMode
		}
		if savedParent != nil {
			b.parent = savedParent
		}
		state.skip = false
		state.stackIndex--
	}

	maybeBind := func(node *ast.Node) *BinaryExpression {
		if node && isBinaryExpression(node) && !isDestructuringAssignment(node) {
			return node
		}
		b.bind(node)
	}

}

func (b *Binder) bindDeleteExpressionFlow(node DeleteExpression) {
	b.bindEachChild(node)
	if node.Expression.Kind == ast.KindPropertyAccessExpression {
		b.bindAssignmentTargetFlow(node.Expression)
	}
}

func (b *Binder) bindConditionalExpressionFlow(node ConditionalExpression) {
	trueLabel := b.createBranchLabel()
	falseLabel := b.createBranchLabel()
	postExpressionLabel := b.createBranchLabel()
	saveCurrentFlow := b.currentFlow
	saveHasFlowEffects := b.hasFlowEffects
	b.hasFlowEffects = false
	b.bindCondition(node.Condition, trueLabel, falseLabel)
	b.currentFlow = b.finishFlowLabel(trueLabel)
	b.bind(node.QuestionToken)
	b.bind(node.WhenTrue)
	b.addAntecedent(postExpressionLabel, b.currentFlow)
	b.currentFlow = b.finishFlowLabel(falseLabel)
	b.bind(node.ColonToken)
	b.bind(node.WhenFalse)
	b.addAntecedent(postExpressionLabel, b.currentFlow)
	if b.hasFlowEffects {
		b.currentFlow = b.finishFlowLabel(postExpressionLabel)
	} else {
		b.currentFlow = saveCurrentFlow
	}
	b.hasFlowEffects = b.hasFlowEffects || saveHasFlowEffects
}

func (b *Binder) bindInitializedVariableFlow(node Union[VariableDeclaration, ArrayBindingElement]) {
	var name *BindingName
	if !isOmittedExpression(node) {
		name = node.Name
	} else {
		name = nil
	}
	if isBindingPattern(name) {
		for _, child := range name.Elements {
			b.bindInitializedVariableFlow(child)
		}
	} else {
		b.currentFlow = b.createFlowMutation(FlowFlagsAssignment, b.currentFlow, node)
	}
}

func (b *Binder) bindVariableDeclarationFlow(node VariableDeclaration) {
	b.bindEachChild(node)
	if node.Initializer != nil || isForInOrOfStatement(node.Parent.Parent) {
		b.bindInitializedVariableFlow(node)
	}
}

func (b *Binder) bindBindingElementFlow(node BindingElement) {
	// When evaluating a binding pattern, the initializer is evaluated before the binding pattern, per:
	// - https://tc39.es/ecma262/#sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization
	//   - `BindingElement: BindingPattern Initializer?`
	// - https://tc39.es/ecma262/#sec-runtime-semantics-keyedbindinginitialization
	//   - `BindingElement: BindingPattern Initializer?`
	b.bind(node.DotDotDotToken)
	b.bind(node.PropertyName)
	b.bindInitializer(node.Initializer)
	b.bind(node.Name)
}

func (b *Binder) bindParameterFlow(node ParameterDeclaration) {
	b.bindEach(node.Modifiers)
	b.bind(node.DotDotDotToken)
	b.bind(node.QuestionToken)
	b.bind(node.Type_)
	b.bindInitializer(node.Initializer)
	b.bind(node.Name)
}

// a BindingElement/Parameter does not have side effects if initializers are not evaluated and used. (see GH#49759)
func (b *Binder) bindInitializer(node Expression) {
	if node == nil {
		return
	}
	entryFlow := b.currentFlow
	b.bind(node)
	if entryFlow == b.unreachableFlow || entryFlow == b.currentFlow {
		return
	}
	exitFlow := b.createBranchLabel()
	b.addAntecedent(exitFlow, entryFlow)
	b.addAntecedent(exitFlow, b.currentFlow)
	b.currentFlow = b.finishFlowLabel(exitFlow)
}

func (b *Binder) bindJSDocTypeAlias(node Union[JSDocTypedefTag, JSDocCallbackTag, JSDocEnumTag]) {
	b.bind(node.TagName)
	if node.Kind != ast.KindJSDocEnumTag && node.FullName != nil {
		// don't bind the type name yet; that's delayed until delayedBindJSDocTypedefTag
		setParent(node.FullName, node)
		setParentRecursive(node.FullName, false /*incremental*/)
	}
	if /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof node.comment */ TODO != "string" {
		b.bindEach(node.Comment)
	}
}

func (b *Binder) bindJSDocClassTag(node JSDocClassTag) {
	b.bindEachChild(node)
	host := getHostSignatureFromJSDoc(node)
	if host != nil && host.Kind != ast.KindMethodDeclaration {
		b.addDeclarationToSymbol(host.Symbol, host, ast.SymbolFlagsClass)
	}
}

func (b *Binder) bindJSDocImportTag(node JSDocImportTag) {
	// don't bind the importClause yet; that's delayed until bindJSDocImports
	b.bind(node.TagName)
	b.bind(node.ModuleSpecifier)
	b.bind(node.Attributes)

	if /* TODO(TS-TO-GO) Expression TypeOfExpression: typeof node.comment */ TODO != "string" {
		b.bindEach(node.Comment)
	}
}

func (b *Binder) bindOptionalExpression(node Expression, trueTarget FlowLabel, falseTarget FlowLabel) {
	b.doWithConditionalBranches(b.bind, node, trueTarget, falseTarget)
	if !isOptionalChain(node) || isOutermostOptionalChain(node) {
		b.addAntecedent(trueTarget, b.createFlowCondition(FlowFlagsTrueCondition, b.currentFlow, node))
		b.addAntecedent(falseTarget, b.createFlowCondition(FlowFlagsFalseCondition, b.currentFlow, node))
	}
}

func (b *Binder) bindOptionalChainRest(node OptionalChain) {
	switch node.Kind {
	case ast.KindPropertyAccessExpression:
		b.bind(node.QuestionDotToken)
		b.bind(node.Name)
	case ast.KindElementAccessExpression:
		b.bind(node.QuestionDotToken)
		b.bind(node.ArgumentExpression)
	case ast.KindCallExpression:
		b.bind(node.QuestionDotToken)
		b.bindEach(node.TypeArguments)
		b.bindEach(node.Arguments)
	}
}

func (b *Binder) bindOptionalChain(node OptionalChain, trueTarget FlowLabel, falseTarget FlowLabel) {
	// For an optional chain, we emulate the behavior of a logical expression:
	//
	// a?.b         -> a && a.b
	// a?.b.c       -> a && a.b.c
	// a?.b?.c      -> a && a.b && a.b.c
	// a?.[x = 1]   -> a && a[x = 1]
	//
	// To do this we descend through the chain until we reach the root of a chain (the expression with a `?.`)
	// and build it's CFA graph as if it were the first condition (`a && ...`). Then we bind the rest
	// of the node as part of the "true" branch, and continue to do so as we ascend back up to the outermost
	// chain node. We then treat the entire node as the right side of the expression.
	var preChainLabel *FlowLabel
	if isOptionalChainRoot(node) {
		preChainLabel = b.createBranchLabel()
	} else {
		preChainLabel = nil
	}
	b.bindOptionalExpression(node.Expression, preChainLabel || trueTarget, falseTarget)
	if preChainLabel != nil {
		b.currentFlow = b.finishFlowLabel(preChainLabel)
	}
	b.doWithConditionalBranches(b.bindOptionalChainRest, node, trueTarget, falseTarget)
	if isOutermostOptionalChain(node) {
		b.addAntecedent(trueTarget, b.createFlowCondition(FlowFlagsTrueCondition, b.currentFlow, node))
		b.addAntecedent(falseTarget, b.createFlowCondition(FlowFlagsFalseCondition, b.currentFlow, node))
	}
}

func (b *Binder) bindOptionalChainFlow(node OptionalChain) {
	if b.isTopLevelLogicalExpression(node) {
		postExpressionLabel := b.createBranchLabel()
		saveCurrentFlow := b.currentFlow
		saveHasFlowEffects := b.hasFlowEffects
		b.bindOptionalChain(node, postExpressionLabel, postExpressionLabel)
		if b.hasFlowEffects {
			b.currentFlow = b.finishFlowLabel(postExpressionLabel)
		} else {
			b.currentFlow = saveCurrentFlow
		}
		b.hasFlowEffects = b.hasFlowEffects || saveHasFlowEffects
	} else {
		b.bindOptionalChain(node, b.currentTrueTarget, b.currentFalseTarget)
	}
}

func (b *Binder) bindNonNullExpressionFlow(node Union[NonNullExpression, NonNullChain]) {
	if isOptionalChain(node) {
		b.bindOptionalChainFlow(node)
	} else {
		b.bindEachChild(node)
	}
}

func (b *Binder) bindAccessExpressionFlow(node Union[AccessExpression, PropertyAccessChain, ElementAccessChain]) {
	if isOptionalChain(node) {
		b.bindOptionalChainFlow(node)
	} else {
		b.bindEachChild(node)
	}
}

func (b *Binder) bindCallExpressionFlow(node Union[CallExpression, CallChain]) {
	if isOptionalChain(node) {
		b.bindOptionalChainFlow(node)
	} else {
		// If the target of the call expression is a function expression or arrow function we have
		// an immediately invoked function expression (IIFE). Initialize the flowNode property to
		// the current control flow (which includes evaluation of the IIFE arguments).
		expr := skipParentheses(node.Expression)
		if expr.Kind == ast.KindFunctionExpression || expr.Kind == ast.KindArrowFunction {
			b.bindEach(node.TypeArguments)
			b.bindEach(node.Arguments)
			b.bind(node.Expression)
		} else {
			b.bindEachChild(node)
			if node.Expression.Kind == ast.KindSuperKeyword {
				b.currentFlow = b.createFlowCall(b.currentFlow, node)
			}
		}
	}
	if node.Expression.Kind == ast.KindPropertyAccessExpression {
		propertyAccess := node.Expression.AsPropertyAccessExpression()
		if isIdentifier(propertyAccess.Name) && b.isNarrowableOperand(propertyAccess.Expression) && isPushOrUnshiftIdentifier(propertyAccess.Name) {
			b.currentFlow = b.createFlowMutation(FlowFlagsArrayMutation, b.currentFlow, node)
		}
	}
}

func (b *Binder) addToContainerChain(next HasLocals) {
	if b.lastContainer {
		b.lastContainer.NextContainer = next
	}

	b.lastContainer = next
}

func (b *Binder) declareSymbolAndAddToSymbolTable(node Declaration, symbolFlags SymbolFlags, symbolExcludes SymbolFlags) *ast.Symbol {
	switch b.container.Kind {
	case ast.KindModuleDeclaration:
		return b.declareModuleMember(node, symbolFlags, symbolExcludes)
	case ast.KindSourceFile:
		return b.declareSourceFileMember(node, symbolFlags, symbolExcludes)
	case ast.KindClassExpression,
		ast.KindClassDeclaration:
		return b.declareClassMember(node, symbolFlags, symbolExcludes)
	case ast.KindEnumDeclaration:
		return b.declareSymbol(b.container.Symbol.Exports, b.container.Symbol, node, symbolFlags, symbolExcludes)
	case ast.KindTypeLiteral,
		ast.KindJSDocTypeLiteral,
		ast.KindObjectLiteralExpression,
		ast.KindInterfaceDeclaration,
		ast.KindJsxAttributes:
		// Interface/Object-types always have their children added to the 'members' of
		// their container. They are only accessible through an instance of their
		// container, and are never in scope otherwise (even inside the body of the
		// object / type / interface declaring them). An exception is type parameters,
		// which are in scope without qualification (similar to 'locals').
		return b.declareSymbol(b.container.Symbol.Members, b.container.Symbol, node, symbolFlags, symbolExcludes)
	case ast.KindFunctionType,
		ast.KindConstructorType,
		ast.KindCallSignature,
		ast.KindConstructSignature,
		ast.KindJSDocSignature,
		ast.KindIndexSignature,
		ast.KindMethodDeclaration,
		ast.KindMethodSignature,
		ast.KindConstructor,
		ast.KindGetAccessor,
		ast.KindSetAccessor,
		ast.KindFunctionDeclaration,
		ast.KindFunctionExpression,
		ast.KindArrowFunction,
		ast.KindJSDocFunctionType,
		ast.KindClassStaticBlockDeclaration,
		ast.KindTypeAliasDeclaration,
		ast.KindMappedType:
		// All the children of these container types are never visible through another
		// symbol (i.e. through another symbol's 'exports' or 'members').  Instead,
		// they're only accessed 'lexically' (i.e. from code that exists underneath
		// their container in the tree). To accomplish this, we simply add their declared
		// symbol to the 'locals' of the container.  These symbols can then be found as
		// the type checker walks up the containers, checking them for matching names.
		if b.container.Locals != nil {
			Debug.assertNode(b.container, canHaveLocals)
		}
		return b.declareSymbol(b.container.Locals, nil /*parent*/, node, symbolFlags, symbolExcludes)
	}
}

func (b *Binder) declareClassMember(node Declaration, symbolFlags SymbolFlags, symbolExcludes SymbolFlags) *ast.Symbol {
	if isStatic(node) {
		return b.declareSymbol(b.container.Symbol.Exports, b.container.Symbol, node, symbolFlags, symbolExcludes)
	} else {
		return b.declareSymbol(b.container.Symbol.Members, b.container.Symbol, node, symbolFlags, symbolExcludes)
	}
}

func (b *Binder) declareSourceFileMember(node Declaration, symbolFlags SymbolFlags, symbolExcludes SymbolFlags) *ast.Symbol {
	if isExternalModule(b.file) {
		return b.declareModuleMember(node, symbolFlags, symbolExcludes)
	} else {
		return b.declareSymbol(b.file.Locals, nil /*parent*/, node, symbolFlags, symbolExcludes)
	}
}

func (b *Binder) hasExportDeclarations(node Union[ModuleDeclaration, SourceFile]) bool {
	var body * /* TODO(TS-TO-GO) inferred type SourceFile | ModuleBlock */ any
	if isSourceFile(node) {
		body = node
	} else {
		body = tryCast(node.Body, isModuleBlock)
	}
	return body != nil && body.Statements.some(func(s Statement) bool {
		return isExportDeclaration(s) || isExportAssignment(s)
	})
}

func (b *Binder) setExportContextFlag(node Mutable[Union[ModuleDeclaration, SourceFile]]) {
	// A declaration source file or ambient module declaration that contains no export declarations (but possibly regular
	// declarations with export modifiers) is an export context in which declarations are implicitly exported.
	if node.Flags&ast.NodeFlagsAmbient != 0 && !b.hasExportDeclarations(node) {
		node.Flags |= ast.NodeFlagsExportContext
	} else {
		node.Flags &^= ast.NodeFlagsExportContext
	}
}

func (b *Binder) bindModuleDeclaration(node ModuleDeclaration) {
	b.setExportContextFlag(node)
	if isAmbientModule(node) {
		if hasSyntacticModifier(node, ast.ModifierFlagsExport) {
			b.errorOnFirstToken(node, Diagnostics.export_modifier_cannot_be_applied_to_ambient_modules_and_module_augmentations_since_they_are_always_visible)
		}
		if isModuleAugmentationExternal(node) {
			b.declareModuleSymbol(node)
		} else {
			var pattern Union[string, Pattern, undefined]
			if node.Name.Kind == ast.KindStringLiteral {
				TODO_IDENTIFIER := node.Name
				pattern = tryParsePattern(text)
				if pattern == nil {
					b.errorOnFirstToken(node.Name, Diagnostics.Pattern_0_can_have_at_most_one_Asterisk_character, text)
				}
			}

			symbol := b.declareSymbolAndAddToSymbolTable(node, ast.SymbolFlagsValueModule, ast.SymbolFlagsValueModuleExcludes)
			b.file.PatternAmbientModules = append(b.file.PatternAmbientModules, ifElse(pattern && !isString(pattern), &PatternAmbientModule{
				pattern: pattern,
				symbol:  symbol,
			}, nil))
		}
	} else {
		state := b.declareModuleSymbol(node)
		if state != ModuleInstanceStateNonInstantiated {
			TODO_IDENTIFIER := node
			// if module was already merged with some function, class or non-const enum, treat it as non-const-enum-only
			symbol.ConstEnumOnlyModule = (symbol.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsClass|ast.SymbolFlagsRegularEnum) == 0) && state == ModuleInstanceStateConstEnumOnly && symbol.ConstEnumOnlyModule != false
		}
	}
}

func (b *Binder) declareModuleSymbol(node ModuleDeclaration) ModuleInstanceState {
	state := getModuleInstanceState(node)
	instantiated := state != ModuleInstanceStateNonInstantiated
	b.declareSymbolAndAddToSymbolTable(node, ifElse(instantiated, ast.SymbolFlagsValueModule, ast.SymbolFlagsNamespaceModule), ifElse(instantiated, ast.SymbolFlagsValueModuleExcludes, ast.SymbolFlagsNamespaceModuleExcludes))
	return state
}

func (b *Binder) bindFunctionOrConstructorType(node Union[SignatureDeclaration, JSDocSignature]) {
	// For a given function symbol "<...>(...) => T" we want to generate a symbol identical
	// to the one we would get for: { <...>(...): T }
	//
	// We do that by making an anonymous type literal symbol, and then setting the function
	// symbol as its sole member. To the rest of the system, this symbol will be indistinguishable
	// from an actual type literal symbol you would have gotten had you used the long form.
	symbol := b.createSymbol(ast.SymbolFlagsSignature, b.getDeclarationName(node))
	// TODO: GH#18217
	b.addDeclarationToSymbol(symbol, node, ast.SymbolFlagsSignature)

	typeLiteralSymbol := b.createSymbol(ast.SymbolFlagsTypeLiteral, InternalSymbolNameType)
	b.addDeclarationToSymbol(typeLiteralSymbol, node, ast.SymbolFlagsTypeLiteral)
	typeLiteralSymbol.Members = createSymbolTable()
	typeLiteralSymbol.Members.set(symbol.EscapedName, symbol)
}

func (b *Binder) bindObjectLiteralExpression(node ObjectLiteralExpression) *ast.Symbol {
	return b.bindAnonymousDeclaration(node, ast.SymbolFlagsObjectLiteral, InternalSymbolNameObject)
}

func (b *Binder) bindJsxAttributes(node JsxAttributes) *ast.Symbol {
	return b.bindAnonymousDeclaration(node, ast.SymbolFlagsObjectLiteral, InternalSymbolNameJSXAttributes)
}

func (b *Binder) bindJsxAttribute(node JsxAttribute, symbolFlags SymbolFlags, symbolExcludes SymbolFlags) *ast.Symbol {
	return b.declareSymbolAndAddToSymbolTable(node, symbolFlags, symbolExcludes)
}

func (b *Binder) bindAnonymousDeclaration(node Declaration, symbolFlags SymbolFlags, name string) *ast.Symbol {
	symbol := b.createSymbol(symbolFlags, name)
	if symbolFlags&(ast.SymbolFlagsEnumMember|ast.SymbolFlagsClassMember) != 0 {
		symbol.Parent = b.container.Symbol
	}
	b.addDeclarationToSymbol(symbol, node, symbolFlags)
	return symbol
}

func (b *Binder) bindBlockScopedDeclaration(node Declaration, symbolFlags SymbolFlags, symbolExcludes SymbolFlags) {
	switch b.blockScopeContainer.Kind {
	case ast.KindModuleDeclaration:
		b.declareModuleMember(node, symbolFlags, symbolExcludes)
	case ast.KindSourceFile:
		if isExternalOrCommonJsModule(b.container.AsSourceFile()) {
			b.declareModuleMember(node, symbolFlags, symbolExcludes)
			break
		}
		fallthrough
	default:
		Debug.assertNode(b.blockScopeContainer, canHaveLocals)
		if b.blockScopeContainer.Locals == nil {
			b.blockScopeContainer.Locals = createSymbolTable()
			b.addToContainerChain(b.blockScopeContainer)
		}
		b.declareSymbol(b.blockScopeContainer.Locals, nil /*parent*/, node, symbolFlags, symbolExcludes)
	}
}

func (b *Binder) delayedBindJSDocTypedefTag() undefined {
	if !b.delayedTypeAliases {
		return
	}
	saveContainer := b.container
	saveLastContainer := b.lastContainer
	saveBlockScopeContainer := b.blockScopeContainer
	saveParent := b.parent
	saveCurrentFlow := b.currentFlow
	for _, typeAlias := range b.delayedTypeAliases {
		host := typeAlias.Parent.Parent
		b.container = (getEnclosingContainer(host) /* as IsContainer | undefined */) || b.file
		b.blockScopeContainer = (getEnclosingBlockScopeContainer(host) /* as IsBlockScopedContainer | undefined */) || b.file
		b.currentFlow = createFlowNode(FlowFlagsStart, nil /*node*/, nil /*antecedent*/)
		b.parent = typeAlias
		b.bind(typeAlias.TypeExpression)
		declName := getNameOfDeclaration(typeAlias)
		if (isJSDocEnumTag(typeAlias) || typeAlias.FullName == nil) && declName != nil && isPropertyAccessEntityNameExpression(declName.Parent) {
			// typedef anchored to an A.B.C assignment - we need to bind into B's namespace under name C
			isTopLevel := b.isTopLevelNamespaceAssignment(declName.Parent)
			if isTopLevel {
				b.bindPotentiallyMissingNamespaces(b.file.Symbol, declName.Parent, isTopLevel, findAncestor(declName, func(d *ast.Node) bool {
					return isPropertyAccessExpression(d) && d.Name.EscapedText == "prototype"
				}) != nil, false /*containerIsClass*/)
				oldContainer := b.container
				switch getAssignmentDeclarationPropertyAccessKind(declName.Parent) {
				case AssignmentDeclarationKindExportsProperty,
					AssignmentDeclarationKindModuleExports:
					if !isExternalOrCommonJsModule(b.file) {
						b.container = nil
					} else {
						b.container = b.file
					}
				case AssignmentDeclarationKindThisProperty:
					b.container = declName.Parent.Expression
				case AssignmentDeclarationKindPrototypeProperty:
					b.container = declName.Parent.Expression.AsPropertyAccessEntityNameExpression().Name
				case AssignmentDeclarationKindProperty:
					switch {
					case isExportsOrModuleExportsOrAlias(b.file, declName.Parent.Expression):
						b.container = b.file
					case isPropertyAccessExpression(declName.Parent.Expression):
						b.container = declName.Parent.Expression.Name
					default:
						b.container = declName.Parent.Expression
					}
				case AssignmentDeclarationKindNone:
					return Debug.fail("Shouldn't have detected typedef or enum on non-assignment declaration")
				}
				if b.container {
					b.declareModuleMember(typeAlias, ast.SymbolFlagsTypeAlias, ast.SymbolFlagsTypeAliasExcludes)
				}
				b.container = oldContainer
			}
		} else if isJSDocEnumTag(typeAlias) || typeAlias.FullName == nil || typeAlias.FullName.Kind == ast.KindIdentifier {
			b.parent = typeAlias.Parent
			b.bindBlockScopedDeclaration(typeAlias, ast.SymbolFlagsTypeAlias, ast.SymbolFlagsTypeAliasExcludes)
		} else {
			b.bind(typeAlias.FullName)
		}
	}
	b.container = saveContainer
	b.lastContainer = saveLastContainer
	b.blockScopeContainer = saveBlockScopeContainer
	b.parent = saveParent
	b.currentFlow = saveCurrentFlow
}

func (b *Binder) bindJSDocImports() {
	if b.jsDocImports == nil {
		return
	}

	saveContainer := b.container
	saveLastContainer := b.lastContainer
	saveBlockScopeContainer := b.blockScopeContainer
	saveParent := b.parent
	saveCurrentFlow := b.currentFlow

	for _, jsDocImportTag := range b.jsDocImports {
		host := getJSDocHost(jsDocImportTag)
		var enclosingContainer *IsContainer
		if host != nil {
			enclosingContainer = getEnclosingContainer(host) /* as IsContainer | undefined */
		} else {
			enclosingContainer = nil
		}
		var enclosingBlockScopeContainer *IsBlockScopedContainer
		if host != nil {
			enclosingBlockScopeContainer = getEnclosingBlockScopeContainer(host) /* as IsBlockScopedContainer | undefined */
		} else {
			enclosingBlockScopeContainer = nil
		}
		b.container = enclosingContainer || b.file
		b.blockScopeContainer = enclosingBlockScopeContainer || b.file
		b.currentFlow = createFlowNode(FlowFlagsStart, nil /*node*/, nil /*antecedent*/)
		b.parent = jsDocImportTag
		b.bind(jsDocImportTag.ImportClause)
	}

	b.container = saveContainer
	b.lastContainer = saveLastContainer
	b.blockScopeContainer = saveBlockScopeContainer
	b.parent = saveParent
	b.currentFlow = saveCurrentFlow
}

// The binder visits every node in the syntax tree so it is a convenient place to perform a single localized
// check for reserved words used as identifiers in strict mode code, as well as `yield` or `await` in
// [Yield] or [Await] contexts, respectively.
func (b *Binder) checkContextualIdentifier(node Identifier) {
	// Report error only if there are no parse errors in file
	if b.file.ParseDiagnostics.length == 0 && node.Flags&ast.NodeFlagsAmbient == 0 && node.Flags&ast.NodeFlagsJSDoc == 0 && !isIdentifierName(node) {
		// strict mode identifiers
		originalKeywordKind := identifierToKeywordKind(node)
		if originalKeywordKind == nil {
			return
		}

		if b.inStrictMode && originalKeywordKind >= ast.KindFirstFutureReservedWord && originalKeywordKind <= ast.KindLastFutureReservedWord {
			b.file.BindDiagnostics.push(b.createDiagnosticForNode(node, b.getStrictModeIdentifierMessage(node), declarationNameToString(node)))
		} else if originalKeywordKind == ast.KindAwaitKeyword {
			if isExternalModule(b.file) && isInTopLevelContext(node) {
				b.file.BindDiagnostics.push(b.createDiagnosticForNode(node, Diagnostics.Identifier_expected_0_is_a_reserved_word_at_the_top_level_of_a_module, declarationNameToString(node)))
			} else if node.Flags&ast.NodeFlagsAwaitContext != 0 {
				b.file.BindDiagnostics.push(b.createDiagnosticForNode(node, Diagnostics.Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here, declarationNameToString(node)))
			}
		} else if originalKeywordKind == ast.KindYieldKeyword && node.Flags&ast.NodeFlagsYieldContext != 0 {
			b.file.BindDiagnostics.push(b.createDiagnosticForNode(node, Diagnostics.Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here, declarationNameToString(node)))
		}
	}
}

func (b *Binder) getStrictModeIdentifierMessage(node *ast.Node) any {
	// Provide specialized messages to help the user understand why we think they're in
	// strict mode.
	if getContainingClass(node) != nil {
		return Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode
	}

	if b.file.ExternalModuleIndicator {
		return Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode
	}

	return Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode
}

// The binder visits every node, so this is a good place to check for
// the reserved private name (there is only one)
func (b *Binder) checkPrivateIdentifier(node PrivateIdentifier) {
	if node.EscapedText == "#constructor" {
		// Report error only if there are no parse errors in file
		if b.file.ParseDiagnostics.length == 0 {
			b.file.BindDiagnostics.push(b.createDiagnosticForNode(node, Diagnostics.constructor_is_a_reserved_word, declarationNameToString(node)))
		}
	}
}

func (b *Binder) checkStrictModeBinaryExpression(node BinaryExpression) {
	if b.inStrictMode && isLeftHandSideExpression(node.Left) && isAssignmentOperator(node.OperatorToken.Kind) {
		// ECMA 262 (Annex C) The identifier eval or arguments may not appear as the LeftHandSideExpression of an
		// Assignment operator(11.13) or of a PostfixExpression(11.3)
		b.checkStrictModeEvalOrArguments(node, node.Left.AsIdentifier())
	}
}

func (b *Binder) checkStrictModeCatchClause(node CatchClause) {
	// It is a SyntaxError if a TryStatement with a Catch occurs within strict code and the Identifier of the
	// Catch production is eval or arguments
	if b.inStrictMode && node.VariableDeclaration != nil {
		b.checkStrictModeEvalOrArguments(node, node.VariableDeclaration.Name)
	}
}

func (b *Binder) checkStrictModeDeleteExpression(node DeleteExpression) {
	// Grammar checking
	if b.inStrictMode && node.Expression.Kind == ast.KindIdentifier {
		// When a delete operator occurs within strict mode code, a SyntaxError is thrown if its
		// UnaryExpression is a direct reference to a variable, function argument, or function name
		span := getErrorSpanForNode(b.file, node.Expression)
		b.file.BindDiagnostics.push(createFileDiagnostic(b.file, span.start, span.length, Diagnostics.delete_cannot_be_called_on_an_identifier_in_strict_mode))
	}
}

func (b *Binder) isEvalOrArgumentsIdentifier(node *ast.Node) bool {
	return isIdentifier(node) && (node.EscapedText == "eval" || node.EscapedText == "arguments")
}

func (b *Binder) checkStrictModeEvalOrArguments(contextNode *ast.Node, name *ast.Node) {
	if name != nil && name.Kind == ast.KindIdentifier {
		identifier := name.AsIdentifier()
		if b.isEvalOrArgumentsIdentifier(identifier) {
			// We check first if the name is inside class declaration or class expression; if so give explicit message
			// otherwise report generic error message.
			span := getErrorSpanForNode(b.file, name)
			b.file.BindDiagnostics.push(createFileDiagnostic(b.file, span.start, span.length, b.getStrictModeEvalOrArgumentsMessage(contextNode), idText(identifier)))
		}
	}
}

func (b *Binder) getStrictModeEvalOrArgumentsMessage(node *ast.Node) any {
	// Provide specialized messages to help the user understand why we think they're in
	// strict mode.
	if getContainingClass(node) != nil {
		return Diagnostics.Code_contained_in_a_class_is_evaluated_in_JavaScript_s_strict_mode_which_does_not_allow_this_use_of_0_For_more_information_see_https_Colon_Slash_Slashdeveloper_mozilla_org_Slashen_US_Slashdocs_SlashWeb_SlashJavaScript_SlashReference_SlashStrict_mode
	}

	if b.file.ExternalModuleIndicator {
		return Diagnostics.Invalid_use_of_0_Modules_are_automatically_in_strict_mode
	}

	return Diagnostics.Invalid_use_of_0_in_strict_mode
}

func (b *Binder) checkStrictModeFunctionName(node FunctionLikeDeclaration) {
	if b.inStrictMode && node.Flags&ast.NodeFlagsAmbient == 0 {
		// It is a SyntaxError if the identifier eval or arguments appears within a FormalParameterList of a strict mode FunctionDeclaration or FunctionExpression (13.1))
		b.checkStrictModeEvalOrArguments(node, node.Name)
	}
}

func (b *Binder) getStrictModeBlockScopeFunctionDeclarationMessage(node *ast.Node) any {
	// Provide specialized messages to help the user understand why we think they're in
	// strict mode.
	if getContainingClass(node) != nil {
		return Diagnostics.Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES5_Class_definitions_are_automatically_in_strict_mode
	}

	if b.file.ExternalModuleIndicator {
		return Diagnostics.Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES5_Modules_are_automatically_in_strict_mode
	}

	return Diagnostics.Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES5
}

func (b *Binder) checkStrictModeFunctionDeclaration(node FunctionDeclaration) {
	if b.languageVersion < ScriptTargetES2015 {
		// Report error if function is not top level function declaration
		if b.blockScopeContainer.Kind != ast.KindSourceFile && b.blockScopeContainer.Kind != ast.KindModuleDeclaration && !isFunctionLikeOrClassStaticBlockDeclaration(b.blockScopeContainer) {
			// We check first if the name is inside class declaration or class expression; if so give explicit message
			// otherwise report generic error message.
			errorSpan := getErrorSpanForNode(b.file, node)
			b.file.BindDiagnostics.push(createFileDiagnostic(b.file, errorSpan.start, errorSpan.length, b.getStrictModeBlockScopeFunctionDeclarationMessage(node)))
		}
	}
}

func (b *Binder) checkStrictModePostfixUnaryExpression(node PostfixUnaryExpression) {
	// Grammar checking
	// The identifier eval or arguments may not appear as the LeftHandSideExpression of an
	// Assignment operator(11.13) or of a PostfixExpression(11.3) or as the UnaryExpression
	// operated upon by a Prefix Increment(11.4.4) or a Prefix Decrement(11.4.5) operator.
	if b.inStrictMode {
		b.checkStrictModeEvalOrArguments(node, node.Operand.AsIdentifier())
	}
}

func (b *Binder) checkStrictModePrefixUnaryExpression(node PrefixUnaryExpression) {
	// Grammar checking
	if b.inStrictMode {
		if node.Operator == ast.KindPlusPlusToken || node.Operator == ast.KindMinusMinusToken {
			b.checkStrictModeEvalOrArguments(node, node.Operand.AsIdentifier())
		}
	}
}

func (b *Binder) checkStrictModeWithStatement(node WithStatement) {
	// Grammar checking for withStatement
	if b.inStrictMode {
		b.errorOnFirstToken(node, Diagnostics.with_statements_are_not_allowed_in_strict_mode)
	}
}

func (b *Binder) checkStrictModeLabeledStatement(node LabeledStatement) {
	// Grammar checking for labeledStatement
	if b.inStrictMode && getEmitScriptTarget(b.options) >= ScriptTargetES2015 {
		if isDeclarationStatement(node.Statement) || isVariableStatement(node.Statement) {
			b.errorOnFirstToken(node.Label, Diagnostics.A_label_is_not_allowed_here)
		}
	}
}

func (b *Binder) errorOnFirstToken(node *ast.Node, message DiagnosticMessage, args DiagnosticArguments) {
	span := getSpanOfTokenAtPosition(b.file, node.Pos)
	b.file.BindDiagnostics.push(createFileDiagnostic(b.file, span.start, span.length, message, args...))
}

func (b *Binder) errorOrSuggestionOnNode(isError bool, node *ast.Node, message DiagnosticMessage) {
	b.errorOrSuggestionOnRange(isError, node, node, message)
}

func (b *Binder) errorOrSuggestionOnRange(isError bool, startNode *ast.Node, endNode *ast.Node, message DiagnosticMessage) {
	b.addErrorOrSuggestionDiagnostic(isError, TextRange{
		pos: getTokenPosOfNode(startNode, b.file),
		end: endNode.End,
	}, message)
}

func (b *Binder) addErrorOrSuggestionDiagnostic(isError bool, range_ TextRange, message DiagnosticMessage) {
	diag := createFileDiagnostic(b.file, range_.pos, range_.end-range_.pos, message)
	if isError {
		b.file.BindDiagnostics.push(diag)
	} else {
		b.file.BindSuggestionDiagnostics = append(b.file.BindSuggestionDiagnostics, DiagnosticWithLocation{
			/* TODO(TS-TO-GO) Node SpreadAssignment: ...diag */
			category: DiagnosticCategorySuggestion,
		})
	}
}

func (b *Binder) bind(node *ast.Node) {
	if node == nil {
		return
	}
	setParent(node, b.parent)
	if tracing != nil {
		(node.(TracingNode)).tracingPath = b.file.Path
	}
	saveInStrictMode := b.inStrictMode

	// Even though in the AST the jsdoc @typedef node belongs to the current node,
	// its symbol might be in the same scope with the current node's symbol. Consider:
	//
	//     /** @typedef {string | number} MyType */
	//     function foo();
	//
	// Here the current node is "foo", which is a container, but the scope of "MyType" should
	// not be inside "foo". Therefore we always bind @typedef before bind the parent node,
	// and skip binding this tag later when binding all the other jsdoc tags.

	// First we bind declaration nodes to a symbol if possible. We'll both create a symbol
	// and then potentially add the symbol to an appropriate symbol table. Possible
	// destination symbol tables are:
	//
	//  1) The 'exports' table of the current container's symbol.
	//  2) The 'members' table of the current container's symbol.
	//  3) The 'locals' table of the current container.
	//
	// However, not all symbols will end up in any of these tables. 'Anonymous' symbols
	// (like TypeLiterals for example) will not be put in any table.
	b.bindWorker(node)
	// Then we recurse into the children of the node to bind them as well. For certain
	// symbols we do specialized work when we recurse. For example, we'll keep track of
	// the current 'container' node when it changes. This helps us know which symbol table
	// a local should go into for example. Since terminal nodes are known not to have
	// children, as an optimization we don't process those.
	if node.Kind > ast.KindLastToken {
		saveParent := b.parent
		b.parent = node
		containerFlags := getContainerFlags(node)
		if containerFlags == ContainerFlagsNone {
			b.bindChildren(node)
		} else {
			b.bindContainer(node.AsHasContainerFlags(), containerFlags)
		}
		b.parent = saveParent
	} else {
		saveParent := b.parent
		if node.Kind == ast.KindEndOfFileToken {
			b.parent = node
		}
		b.bindJSDoc(node)
		b.parent = saveParent
	}
	b.inStrictMode = saveInStrictMode
}

func (b *Binder) bindJSDoc(node *ast.Node) {
	if hasJSDocNodes(node) {
		if isInJSFile(node) {
			for _, j := range node.JsDoc {
				b.bind(j)
			}
		} else {
			for _, j := range node.JsDoc {
				setParent(j, node)
				setParentRecursive(j, false /*incremental*/)
			}
		}
	}
}

func (b *Binder) updateStrictModeStatementList(statements NodeArray[Statement]) {
	if !b.inStrictMode {
		for _, statement := range statements {
			if !isPrologueDirective(statement) {
				return
			}

			if b.isUseStrictPrologueDirective(statement.AsExpressionStatement()) {
				b.inStrictMode = true
				return
			}
		}
	}
}

// / Should be called only on prologue directives (isPrologueDirective(node) should be true)
func (b *Binder) isUseStrictPrologueDirective(node ExpressionStatement) bool {
	nodeText := getSourceTextOfNodeFromSourceFile(b.file, node.Expression)

	// Note: the node text must be exactly "use strict" or 'use strict'.  It is not ok for the
	// string to contain unicode escapes (as per ES5).
	return nodeText == "\"use strict\"" || nodeText == "'use strict'"
}

func (b *Binder) bindWorker(node *ast.Node) /* TODO(TS-TO-GO) inferred type number | void | Symbol */ any {
	switch node.Kind {
	case ast.KindIdentifier:
		// for typedef type names with namespaces, bind the new jsdoc type symbol here
		// because it requires all containing namespaces to be in effect, namely the
		// current "blockScopeContainer" needs to be set to its immediate namespace parent.
		if node.Flags&ast.NodeFlagsIdentifierIsInJSDocNamespace != 0 {
			parentNode := node.Parent
			for parentNode && !isJSDocTypeAlias(parentNode) {
				parentNode = parentNode.Parent
			}
			b.bindBlockScopedDeclaration(parentNode.AsDeclaration(), ast.SymbolFlagsTypeAlias, ast.SymbolFlagsTypeAliasExcludes)
			break
		}
		fallthrough
	case ast.KindThisKeyword:
		// TODO: Why use `isExpression` here? both Identifier and ThisKeyword are expressions.
		if b.currentFlow && (isExpression(node) || b.parent.Kind == ast.KindShorthandPropertyAssignment) {
			(node /* as Identifier | ThisExpression */).FlowNode = b.currentFlow
		}
		// TODO: a `ThisExpression` is not an Identifier, this cast is unsound
		return b.checkContextualIdentifier(node.AsIdentifier())
	case ast.KindQualifiedName:
		if b.currentFlow && isPartOfTypeQuery(node) {
			node.AsQualifiedName().FlowNode = b.currentFlow
		}
	case ast.KindMetaProperty,
		ast.KindSuperKeyword:
		(node /* as MetaProperty | SuperExpression */).FlowNode = b.currentFlow
	case ast.KindPrivateIdentifier:
		return b.checkPrivateIdentifier(node.AsPrivateIdentifier())
	case ast.KindPropertyAccessExpression,
		ast.KindElementAccessExpression:
		expr := node /* as PropertyAccessExpression | ElementAccessExpression */
		if b.currentFlow && b.isNarrowableReference(expr) {
			expr.FlowNode = b.currentFlow
		}
		if isSpecialPropertyDeclaration(expr) {
			b.bindSpecialPropertyDeclaration(expr)
		}
		if isInJSFile(expr) && b.file.CommonJsModuleIndicator != nil && isModuleExportsAccessExpression(expr) && lookupSymbolForName(b.blockScopeContainer, "module" /* as __String */) == nil {
			b.declareSymbol(b.file.Locals, nil /*parent*/, expr.Expression, ast.SymbolFlagsFunctionScopedVariable|ast.SymbolFlagsModuleExports, ast.SymbolFlagsFunctionScopedVariableExcludes)
		}
	case ast.KindBinaryExpression:
		specialKind := getAssignmentDeclarationKind(node.AsBinaryExpression())
		switch specialKind {
		case AssignmentDeclarationKindExportsProperty:
			b.bindExportsPropertyAssignment(node.AsBindableStaticPropertyAssignmentExpression())
		case AssignmentDeclarationKindModuleExports:
			b.bindModuleExportsAssignment(node.AsBindablePropertyAssignmentExpression())
		case AssignmentDeclarationKindPrototypeProperty:
			b.bindPrototypePropertyAssignment(node.AsBindableStaticPropertyAssignmentExpression().Left, node)
		case AssignmentDeclarationKindPrototype:
			b.bindPrototypeAssignment(node.AsBindableStaticPropertyAssignmentExpression())
		case AssignmentDeclarationKindThisProperty:
			b.bindThisPropertyAssignment(node.AsBindablePropertyAssignmentExpression())
		case AssignmentDeclarationKindProperty:
			expression := (node.AsBinaryExpression()).Left.AsAccessExpression().Expression
			if isInJSFile(node) && isIdentifier(expression) {
				symbol := lookupSymbolForName(b.blockScopeContainer, expression.EscapedText)
				if isThisInitializedDeclaration(symbol. /* ? */ valueDeclaration) {
					b.bindThisPropertyAssignment(node.AsBindablePropertyAssignmentExpression())
					break
				}
			}
			b.bindSpecialPropertyAssignment(node.AsBindablePropertyAssignmentExpression())
		case AssignmentDeclarationKindNone:
			// Nothing to do
		default:
			Debug.fail("Unknown binary expression special property assignment kind")
		}
		return b.checkStrictModeBinaryExpression(node.AsBinaryExpression())
	case ast.KindCatchClause:
		return b.checkStrictModeCatchClause(node.AsCatchClause())
	case ast.KindDeleteExpression:
		return b.checkStrictModeDeleteExpression(node.AsDeleteExpression())
	case ast.KindPostfixUnaryExpression:
		return b.checkStrictModePostfixUnaryExpression(node.AsPostfixUnaryExpression())
	case ast.KindPrefixUnaryExpression:
		return b.checkStrictModePrefixUnaryExpression(node.AsPrefixUnaryExpression())
	case ast.KindWithStatement:
		return b.checkStrictModeWithStatement(node.AsWithStatement())
	case ast.KindLabeledStatement:
		return b.checkStrictModeLabeledStatement(node.AsLabeledStatement())
	case ast.KindThisType:
		b.seenThisKeyword = true
		return
	case ast.KindTypePredicate:
	case ast.KindTypeParameter:
		return b.bindTypeParameter(node.AsTypeParameterDeclaration())
	case ast.KindParameter:
		return b.bindParameter(node.AsParameterDeclaration())
	case ast.KindVariableDeclaration:
		return b.bindVariableDeclarationOrBindingElement(node.AsVariableDeclaration())
	case ast.KindBindingElement:
		node.AsBindingElement().FlowNode = b.currentFlow
		return b.bindVariableDeclarationOrBindingElement(node.AsBindingElement())
	case ast.KindPropertyDeclaration,
		ast.KindPropertySignature:
		return b.bindPropertyWorker(node /* as PropertyDeclaration | PropertySignature */)
	case ast.KindPropertyAssignment,
		ast.KindShorthandPropertyAssignment:
		return b.bindPropertyOrMethodOrAccessor(node.AsDeclaration(), ast.SymbolFlagsProperty, ast.SymbolFlagsPropertyExcludes)
	case ast.KindEnumMember:
		return b.bindPropertyOrMethodOrAccessor(node.AsDeclaration(), ast.SymbolFlagsEnumMember, ast.SymbolFlagsEnumMemberExcludes)
	case ast.KindCallSignature,
		ast.KindConstructSignature,
		ast.KindIndexSignature:
		return b.declareSymbolAndAddToSymbolTable(node.AsDeclaration(), ast.SymbolFlagsSignature, ast.SymbolFlagsNone)
	case ast.KindMethodDeclaration,
		ast.KindMethodSignature:
		// If this is an ObjectLiteralExpression method, then it sits in the same space
		// as other properties in the object literal.  So we use SymbolFlags.PropertyExcludes
		// so that it will conflict with any other object literal members with the same
		// name.
		return b.bindPropertyOrMethodOrAccessor(node.AsDeclaration(), ast.SymbolFlagsMethod|(ifElse(node.AsMethodDeclaration().QuestionToken != nil, ast.SymbolFlagsOptional, ast.SymbolFlagsNone)), ifElse(isObjectLiteralMethod(node), ast.SymbolFlagsPropertyExcludes, ast.SymbolFlagsMethodExcludes))
	case ast.KindFunctionDeclaration:
		return b.bindFunctionDeclaration(node.AsFunctionDeclaration())
	case ast.KindConstructor:
		return b.declareSymbolAndAddToSymbolTable(node.AsDeclaration(), ast.SymbolFlagsConstructor, ast.SymbolFlagsNone /*symbolExcludes:*/)
	case ast.KindGetAccessor:
		return b.bindPropertyOrMethodOrAccessor(node.AsDeclaration(), ast.SymbolFlagsGetAccessor, ast.SymbolFlagsGetAccessorExcludes)
	case ast.KindSetAccessor:
		return b.bindPropertyOrMethodOrAccessor(node.AsDeclaration(), ast.SymbolFlagsSetAccessor, ast.SymbolFlagsSetAccessorExcludes)
	case ast.KindFunctionType,
		ast.KindJSDocFunctionType,
		ast.KindJSDocSignature,
		ast.KindConstructorType:
		return b.bindFunctionOrConstructorType(node /* as SignatureDeclaration | JSDocSignature */)
	case ast.KindTypeLiteral,
		ast.KindJSDocTypeLiteral,
		ast.KindMappedType:
		return b.bindAnonymousTypeWorker(node /* as TypeLiteralNode | MappedTypeNode | JSDocTypeLiteral */)
	case ast.KindJSDocClassTag:
		return b.bindJSDocClassTag(node.AsJSDocClassTag())
	case ast.KindObjectLiteralExpression:
		return b.bindObjectLiteralExpression(node.AsObjectLiteralExpression())
	case ast.KindFunctionExpression,
		ast.KindArrowFunction:
		return b.bindFunctionExpression(node /* as FunctionExpression | ArrowFunction */)
	case ast.KindCallExpression:
		assignmentKind := getAssignmentDeclarationKind(node.AsCallExpression())
		switch assignmentKind {
		case AssignmentDeclarationKindObjectDefinePropertyValue:
			return b.bindObjectDefinePropertyAssignment(node.AsBindableObjectDefinePropertyCall())
		case AssignmentDeclarationKindObjectDefinePropertyExports:
			return b.bindObjectDefinePropertyExport(node.AsBindableObjectDefinePropertyCall())
		case AssignmentDeclarationKindObjectDefinePrototypeProperty:
			return b.bindObjectDefinePrototypeProperty(node.AsBindableObjectDefinePropertyCall())
		case AssignmentDeclarationKindNone:
		default:
			return Debug.fail("Unknown call expression assignment declaration kind")
		}
		if isInJSFile(node) {
			b.bindCallExpression(node.AsCallExpression())
		}

		// Members of classes, interfaces, and modules
	case ast.KindClassExpression,
		ast.KindClassDeclaration:
		// All classes are automatically in strict mode in ES6.
		b.inStrictMode = true
		return b.bindClassLikeDeclaration(node.AsClassLikeDeclaration())
	case ast.KindInterfaceDeclaration:
		return b.bindBlockScopedDeclaration(node.AsDeclaration(), ast.SymbolFlagsInterface, ast.SymbolFlagsInterfaceExcludes)
	case ast.KindTypeAliasDeclaration:
		return b.bindBlockScopedDeclaration(node.AsDeclaration(), ast.SymbolFlagsTypeAlias, ast.SymbolFlagsTypeAliasExcludes)
	case ast.KindEnumDeclaration:
		return b.bindEnumDeclaration(node.AsEnumDeclaration())
	case ast.KindModuleDeclaration:
		return b.bindModuleDeclaration(node.AsModuleDeclaration())
		// Jsx-attributes
	case ast.KindJsxAttributes:
		return b.bindJsxAttributes(node.AsJsxAttributes())
	case ast.KindJsxAttribute:
		return b.bindJsxAttribute(node.AsJsxAttribute(), ast.SymbolFlagsProperty, ast.SymbolFlagsPropertyExcludes)

		// Imports and exports
	case ast.KindImportEqualsDeclaration,
		ast.KindNamespaceImport,
		ast.KindImportSpecifier,
		ast.KindExportSpecifier:
		return b.declareSymbolAndAddToSymbolTable(node.AsDeclaration(), ast.SymbolFlagsAlias, ast.SymbolFlagsAliasExcludes)
	case ast.KindNamespaceExportDeclaration:
		return b.bindNamespaceExportDeclaration(node.AsNamespaceExportDeclaration())
	case ast.KindImportClause:
		return b.bindImportClause(node.AsImportClause())
	case ast.KindExportDeclaration:
		return b.bindExportDeclaration(node.AsExportDeclaration())
	case ast.KindExportAssignment:
		return b.bindExportAssignment(node.AsExportAssignment())
	case ast.KindSourceFile:
		b.updateStrictModeStatementList(node.AsSourceFile().Statements)
		return b.bindSourceFileIfExternalModule()
	case ast.KindBlock:
		if !isFunctionLikeOrClassStaticBlockDeclaration(node.Parent) {
			return
		}
		fallthrough
	case ast.KindModuleBlock:
		return b.updateStrictModeStatementList((node /* as Block | ModuleBlock */).Statements)
	case ast.KindJSDocParameterTag:
		if node.Parent.Kind == ast.KindJSDocSignature {
			return b.bindParameter(node.AsJSDocParameterTag())
		}
		if node.Parent.Kind != ast.KindJSDocTypeLiteral {
			break
		}
		fallthrough
	case ast.KindJSDocPropertyTag:
		propTag := node.AsJSDocPropertyLikeTag()
		var flags number
		if propTag.IsBracketed || propTag.TypeExpression != nil && propTag.TypeExpression.Type_.Kind == ast.KindJSDocOptionalType {
			flags = ast.SymbolFlagsProperty | ast.SymbolFlagsOptional
		} else {
			flags = ast.SymbolFlagsProperty
		}
		return b.declareSymbolAndAddToSymbolTable(propTag, flags, ast.SymbolFlagsPropertyExcludes)
	case ast.KindJSDocTypedefTag,
		ast.KindJSDocCallbackTag,
		ast.KindJSDocEnumTag:
		return (b.delayedTypeAliases || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: delayedTypeAliases = [] */ TODO)).push(node /* as JSDocTypedefTag | JSDocCallbackTag | JSDocEnumTag */)
	case ast.KindJSDocOverloadTag:
		return b.bind(node.AsJSDocOverloadTag().TypeExpression)
	case ast.KindJSDocImportTag:
		return (b.jsDocImports || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: jsDocImports = [] */ TODO)).push(node.AsJSDocImportTag())
	}
}

func (b *Binder) bindPropertyWorker(node Union[PropertyDeclaration, PropertySignature]) *ast.Symbol {
	isAutoAccessor := isAutoAccessorPropertyDeclaration(node)
	var includes /* TODO(TS-TO-GO) inferred type SymbolFlags.Property | SymbolFlags.Accessor */ any
	if isAutoAccessor {
		includes = ast.SymbolFlagsAccessor
	} else {
		includes = ast.SymbolFlagsProperty
	}
	var excludes /* TODO(TS-TO-GO) inferred type SymbolFlags.None | SymbolFlags.AccessorExcludes */ any
	if isAutoAccessor {
		excludes = ast.SymbolFlagsAccessorExcludes
	} else {
		excludes = ast.SymbolFlagsPropertyExcludes
	}
	return b.bindPropertyOrMethodOrAccessor(node, includes|(ifElse(node.QuestionToken != nil, ast.SymbolFlagsOptional, ast.SymbolFlagsNone)), excludes)
}

func (b *Binder) bindAnonymousTypeWorker(node Union[TypeLiteralNode, MappedTypeNode, JSDocTypeLiteral]) *ast.Symbol {
	return b.bindAnonymousDeclaration(node.AsDeclaration(), ast.SymbolFlagsTypeLiteral, InternalSymbolNameType)
}

func (b *Binder) bindSourceFileIfExternalModule() {
	b.setExportContextFlag(b.file)
	if isExternalModule(b.file) {
		b.bindSourceFileAsExternalModule()
	} else if isJsonSourceFile(b.file) {
		b.bindSourceFileAsExternalModule()
		// Create symbol equivalent for the module.exports = {}
		originalSymbol := b.file.Symbol
		b.declareSymbol(b.file.Symbol.Exports, b.file.Symbol, b.file, ast.SymbolFlagsProperty, ast.SymbolFlagsAll)
		b.file.Symbol = originalSymbol
	}
}

func (b *Binder) bindSourceFileAsExternalModule() {
	b.bindAnonymousDeclaration(b.file, ast.SymbolFlagsValueModule, __TEMPLATE__("\"", removeFileExtension(b.file.FileName), "\"").(string))
}

func (b *Binder) bindExportAssignment(node ExportAssignment) {
	if !b.container.Symbol || b.container.Symbol.Exports == nil {
		// Incorrect export assignment in some sort of block construct
		b.bindAnonymousDeclaration(node, ast.SymbolFlagsValue, b.getDeclarationName(node))
	} else {
		var flags /* TODO(TS-TO-GO) inferred type SymbolFlags.Property | SymbolFlags.Alias */ any
		if exportAssignmentIsAlias(node) {
			flags = ast.SymbolFlagsAlias
		} else {
			flags = ast.SymbolFlagsProperty
		}
		// If there is an `export default x;` alias declaration, can't `export default` anything else.
		// (In contrast, you can still have `export default function f() {}` and `export default interface I {}`.)
		symbol := b.declareSymbol(b.container.Symbol.Exports, b.container.Symbol, node, flags, ast.SymbolFlagsAll)

		if node.IsExportEquals {
			// Will be an error later, since the module already has other exports. Just make sure this has a valueDeclaration set.
			setValueDeclaration(symbol, node)
		}
	}
}

func (b *Binder) bindNamespaceExportDeclaration(node NamespaceExportDeclaration) {
	if some(node.Modifiers) {
		b.file.BindDiagnostics.push(b.createDiagnosticForNode(node, Diagnostics.Modifiers_cannot_appear_here))
	}
	var diag any
	switch {
	case !isSourceFile(node.Parent):
		diag = Diagnostics.Global_module_exports_may_only_appear_at_top_level
	case !isExternalModule(node.Parent):
		diag = Diagnostics.Global_module_exports_may_only_appear_in_module_files
	case !node.Parent.IsDeclarationFile:
		diag = Diagnostics.Global_module_exports_may_only_appear_in_declaration_files
	default:
		diag = nil
	}
	if diag {
		b.file.BindDiagnostics.push(b.createDiagnosticForNode(node, diag))
	} else {
		b.file.Symbol.GlobalExports = b.file.Symbol.GlobalExports || createSymbolTable()
		b.declareSymbol(b.file.Symbol.GlobalExports, b.file.Symbol, node, ast.SymbolFlagsAlias, ast.SymbolFlagsAliasExcludes)
	}
}

func (b *Binder) bindExportDeclaration(node ExportDeclaration) {
	if !b.container.Symbol || b.container.Symbol.Exports == nil {
		// Export * in some sort of block construct
		b.bindAnonymousDeclaration(node, ast.SymbolFlagsExportStar, b.getDeclarationName(node))
	} else if node.ExportClause == nil {
		// All export * declarations are collected in an __export symbol
		b.declareSymbol(b.container.Symbol.Exports, b.container.Symbol, node, ast.SymbolFlagsExportStar, ast.SymbolFlagsNone)
	} else if isNamespaceExport(node.ExportClause) {
		// declareSymbol walks up parents to find name text, parent _must_ be set
		// but won't be set by the normal binder walk until `bindChildren` later on.
		setParent(node.ExportClause, node)
		b.declareSymbol(b.container.Symbol.Exports, b.container.Symbol, node.ExportClause, ast.SymbolFlagsAlias, ast.SymbolFlagsAliasExcludes)
	}
}

func (b *Binder) bindImportClause(node ImportClause) {
	if node.Name != nil {
		b.declareSymbolAndAddToSymbolTable(node, ast.SymbolFlagsAlias, ast.SymbolFlagsAliasExcludes)
	}
}

func (b *Binder) setCommonJsModuleIndicator(node *ast.Node) bool {
	if b.file.ExternalModuleIndicator && b.file.ExternalModuleIndicator != true {
		return false
	}
	if b.file.CommonJsModuleIndicator == nil {
		b.file.CommonJsModuleIndicator = node
		if !b.file.ExternalModuleIndicator {
			b.bindSourceFileAsExternalModule()
		}
	}
	return true
}

func (b *Binder) bindObjectDefinePropertyExport(node BindableObjectDefinePropertyCall) {
	if !b.setCommonJsModuleIndicator(node) {
		return
	}
	symbol := b.forEachIdentifierInEntityName(node.Arguments[0], nil /*parent*/, func(id Declaration, symbol *ast.Symbol) *ast.Symbol {
		if symbol != nil {
			b.addDeclarationToSymbol(symbol, id, ast.SymbolFlagsModule|ast.SymbolFlagsAssignment)
		}
		return symbol
	})
	if symbol != nil {
		flags := ast.SymbolFlagsProperty | ast.SymbolFlagsExportValue
		b.declareSymbol(symbol.Exports, symbol, node, flags, ast.SymbolFlagsNone)
	}
}

func (b *Binder) bindExportsPropertyAssignment(node BindableStaticPropertyAssignmentExpression) {
	// When we create a property via 'exports.foo = bar', the 'exports.foo' property access
	// expression is the declaration
	if !b.setCommonJsModuleIndicator(node) {
		return
	}
	symbol := b.forEachIdentifierInEntityName(node.Left.Expression, nil /*parent*/, func(id Declaration, symbol *ast.Symbol) *ast.Symbol {
		if symbol != nil {
			b.addDeclarationToSymbol(symbol, id, ast.SymbolFlagsModule|ast.SymbolFlagsAssignment)
		}
		return symbol
	})
	if symbol != nil {
		isAlias := isAliasableExpression(node.Right) && (isExportsIdentifier(node.Left.Expression) || isModuleExportsAccessExpression(node.Left.Expression))
		var flags number
		if isAlias {
			flags = ast.SymbolFlagsAlias
		} else {
			flags = ast.SymbolFlagsProperty | ast.SymbolFlagsExportValue
		}
		setParent(node.Left, node)
		b.declareSymbol(symbol.Exports, symbol, node.Left, flags, ast.SymbolFlagsNone)
	}
}

func (b *Binder) bindModuleExportsAssignment(node BindablePropertyAssignmentExpression) {
	// A common practice in node modules is to set 'export = module.exports = {}', this ensures that 'exports'
	// is still pointing to 'module.exports'.
	// We do not want to consider this as 'export=' since a module can have only one of these.
	// Similarly we do not want to treat 'module.exports = exports' as an 'export='.
	if !b.setCommonJsModuleIndicator(node) {
		return
	}
	assignedExpression := getRightMostAssignedExpression(node.Right)
	if isEmptyObjectLiteral(assignedExpression) || b.container == b.file && isExportsOrModuleExportsOrAlias(b.file, assignedExpression) {
		return
	}

	if isObjectLiteralExpression(assignedExpression) && every(assignedExpression.Properties, isShorthandPropertyAssignment) {
		forEach(assignedExpression.Properties, b.bindExportAssignedObjectMemberAlias)
		return
	}

	// 'module.exports = expr' assignment
	var flags number
	if exportAssignmentIsAlias(node) {
		flags = ast.SymbolFlagsAlias
	} else {
		flags = ast.SymbolFlagsProperty | ast.SymbolFlagsExportValue | ast.SymbolFlagsValueModule
	}
	symbol := b.declareSymbol(b.file.Symbol.Exports, b.file.Symbol, node, flags|ast.SymbolFlagsAssignment, ast.SymbolFlagsNone)
	setValueDeclaration(symbol, node)
}

func (b *Binder) bindExportAssignedObjectMemberAlias(node ShorthandPropertyAssignment) {
	b.declareSymbol(b.file.Symbol.Exports, b.file.Symbol, node, ast.SymbolFlagsAlias|ast.SymbolFlagsAssignment, ast.SymbolFlagsNone)
}

func (b *Binder) bindThisPropertyAssignment(node Union[BindablePropertyAssignmentExpression, PropertyAccessExpression, LiteralLikeElementAccessExpression]) {
	Debug.assert(isInJSFile(node))
	// private identifiers *must* be declared (even in JS files)
	hasPrivateIdentifier := (isBinaryExpression(node) && isPropertyAccessExpression(node.Left) && isPrivateIdentifier(node.Left.Name)) || (isPropertyAccessExpression(node) && isPrivateIdentifier(node.Name))
	if hasPrivateIdentifier {
		return
	}
	thisContainer := getThisContainer(node, false /*includeArrowFunctions*/, false /*includeClassComputedPropertyName*/)
	switch thisContainer.Kind {
	case ast.KindFunctionDeclaration,
		ast.KindFunctionExpression:
		var constructorSymbol *ast.Symbol = thisContainer.Symbol
		// For `f.prototype.m = function() { this.x = 0; }`, `this.x = 0` should modify `f`'s members, not the function expression.
		if isBinaryExpression(thisContainer.Parent) && thisContainer.Parent.OperatorToken.Kind == ast.KindEqualsToken {
			l := thisContainer.Parent.Left
			if isBindableStaticAccessExpression(l) && isPrototypeAccess(l.Expression) {
				constructorSymbol = b.lookupSymbolForPropertyAccess(l.Expression.Expression, b.thisParentContainer)
			}
		}

		if constructorSymbol != nil && constructorSymbol.ValueDeclaration != nil {
			// Declare a 'member' if the container is an ES5 class or ES6 constructor
			constructorSymbol.Members = constructorSymbol.Members || createSymbolTable()
			// It's acceptable for multiple 'this' assignments of the same identifier to occur
			if hasDynamicName(node) {
				b.bindDynamicallyNamedThisPropertyAssignment(node, constructorSymbol, constructorSymbol.Members)
			} else {
				b.declareSymbol(constructorSymbol.Members, constructorSymbol, node, ast.SymbolFlagsProperty|ast.SymbolFlagsAssignment, ast.SymbolFlagsPropertyExcludes & ^ast.SymbolFlagsProperty)
			}
			b.addDeclarationToSymbol(constructorSymbol, constructorSymbol.ValueDeclaration, ast.SymbolFlagsClass)
		}
	case ast.KindConstructor,
		ast.KindPropertyDeclaration,
		ast.KindMethodDeclaration,
		ast.KindGetAccessor,
		ast.KindSetAccessor,
		ast.KindClassStaticBlockDeclaration:
		// this.foo assignment in a JavaScript class
		// Bind this property to the containing class
		containingClass := thisContainer.Parent
		var symbolTable SymbolTable
		if isStatic(thisContainer) {
			symbolTable = containingClass.Symbol.Exports
		} else {
			symbolTable = containingClass.Symbol.Members
		}
		if hasDynamicName(node) {
			b.bindDynamicallyNamedThisPropertyAssignment(node, containingClass.Symbol, symbolTable)
		} else {
			b.declareSymbol(symbolTable, containingClass.Symbol, node, ast.SymbolFlagsProperty|ast.SymbolFlagsAssignment, ast.SymbolFlagsNone, true /*isReplaceableByMethod*/)
		}
	case ast.KindSourceFile:
		// this.property = assignment in a source file -- declare symbol in exports for a module, in locals for a script
		if hasDynamicName(node) {
			break
		} else if thisContainer.CommonJsModuleIndicator != nil {
			b.declareSymbol(thisContainer.Symbol.Exports, thisContainer.Symbol, node, ast.SymbolFlagsProperty|ast.SymbolFlagsExportValue, ast.SymbolFlagsNone)
		} else {
			b.declareSymbolAndAddToSymbolTable(node, ast.SymbolFlagsFunctionScopedVariable, ast.SymbolFlagsFunctionScopedVariableExcludes)
		}
		// Namespaces are not allowed in javascript files, so do nothing here
	case ast.KindModuleDeclaration:
	default:
		Debug.failBadSyntaxKind(thisContainer)
	}
}

func (b *Binder) bindDynamicallyNamedThisPropertyAssignment(node Union[BinaryExpression, DynamicNamedDeclaration], symbol *ast.Symbol, symbolTable SymbolTable) {
	b.declareSymbol(symbolTable, symbol, node, ast.SymbolFlagsProperty, ast.SymbolFlagsNone, true /*isReplaceableByMethod*/, true /*isComputedName*/)
	b.addLateBoundAssignmentDeclarationToSymbol(node, symbol)
}

func (b *Binder) addLateBoundAssignmentDeclarationToSymbol(node Union[BinaryExpression, DynamicNamedDeclaration], symbol *ast.Symbol) {
	if symbol != nil {
		(symbol.AssignmentDeclarationMembers || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: symbol.assignmentDeclarationMembers = new Map() */ TODO)).set(getNodeId(node), node)
	}
}

func (b *Binder) bindSpecialPropertyDeclaration(node Union[PropertyAccessExpression, LiteralLikeElementAccessExpression]) {
	if node.Expression.Kind == ast.KindThisKeyword {
		b.bindThisPropertyAssignment(node)
	} else if isBindableStaticAccessExpression(node) && node.Parent.Parent.Kind == ast.KindSourceFile {
		if isPrototypeAccess(node.Expression) {
			b.bindPrototypePropertyAssignment(node, node.Parent)
		} else {
			b.bindStaticPropertyAssignment(node)
		}
	}
}

/** For `x.prototype = { p, ... }`, declare members p,... if `x` is function/class/{}, or not declared. */

func (b *Binder) bindPrototypeAssignment(node BindableStaticPropertyAssignmentExpression) {
	setParent(node.Left, node)
	setParent(node.Right, node)
	b.bindPropertyAssignment(node.Left.Expression, node.Left, false /*isPrototypeProperty*/, true /*containerIsClass*/)
}

func (b *Binder) bindObjectDefinePrototypeProperty(node BindableObjectDefinePropertyCall) {
	namespaceSymbol := b.lookupSymbolForPropertyAccess(node.Arguments[0].AsPropertyAccessExpression().Expression.AsEntityNameExpression())
	if namespaceSymbol != nil && namespaceSymbol.ValueDeclaration != nil {
		// Ensure the namespace symbol becomes class-like
		b.addDeclarationToSymbol(namespaceSymbol, namespaceSymbol.ValueDeclaration, ast.SymbolFlagsClass)
	}
	b.bindPotentiallyNewExpandoMemberToNamespace(node, namespaceSymbol, true /*isPrototypeProperty*/)
}

/**
 * For `x.prototype.y = z`, declare a member `y` on `x` if `x` is a function or class, or not declared.
 * Note that jsdoc preceding an ExpressionStatement like `x.prototype.y;` is also treated as a declaration.
 */

func (b *Binder) bindPrototypePropertyAssignment(lhs BindableStaticAccessExpression, parent *ast.Node) {
	// Look up the function in the local scope, since prototype assignments should
	// follow the function declaration
	classPrototype := lhs.Expression.AsBindableStaticAccessExpression()
	constructorFunction := classPrototype.Expression

	// Fix up parent pointers since we're going to use these nodes before we bind into them
	setParent(constructorFunction, classPrototype)
	setParent(classPrototype, lhs)
	setParent(lhs, b.parent)

	b.bindPropertyAssignment(constructorFunction, lhs, true /*isPrototypeProperty*/, true /*containerIsClass*/)
}

func (b *Binder) bindObjectDefinePropertyAssignment(node BindableObjectDefinePropertyCall) {
	namespaceSymbol := b.lookupSymbolForPropertyAccess(node.Arguments[0])
	isToplevel := node.Parent.Parent.Kind == ast.KindSourceFile
	namespaceSymbol = b.bindPotentiallyMissingNamespaces(namespaceSymbol, node.Arguments[0], isToplevel, false /*isPrototypeProperty*/, false /*containerIsClass*/)
	b.bindPotentiallyNewExpandoMemberToNamespace(node, namespaceSymbol, false /*isPrototypeProperty*/)
}

func (b *Binder) bindSpecialPropertyAssignment(node BindablePropertyAssignmentExpression) {
	// Class declarations in Typescript do not allow property declarations
	parentSymbol := b.lookupSymbolForPropertyAccess(node.Left.Expression, b.blockScopeContainer) || b.lookupSymbolForPropertyAccess(node.Left.Expression, b.container)
	if !isInJSFile(node) && !isFunctionSymbol(parentSymbol) {
		return
	}
	rootExpr := getLeftmostAccessExpression(node.Left)
	if isIdentifier(rootExpr) && lookupSymbolForName(b.container, rootExpr.EscapedText). /* ? */ flags&ast.SymbolFlagsAlias != 0 {
		return
	}
	// Fix up parent pointers since we're going to use these nodes before we bind into them
	setParent(node.Left, node)
	setParent(node.Right, node)
	if isIdentifier(node.Left.Expression) && b.container == b.file && isExportsOrModuleExportsOrAlias(b.file, node.Left.Expression) {
		// This can be an alias for the 'exports' or 'module.exports' names, e.g.
		//    var util = module.exports;
		//    util.property = function ...
		b.bindExportsPropertyAssignment(node.AsBindableStaticPropertyAssignmentExpression())
	} else if hasDynamicName(node) {
		b.bindAnonymousDeclaration(node, ast.SymbolFlagsProperty|ast.SymbolFlagsAssignment, InternalSymbolNameComputed)
		sym := b.bindPotentiallyMissingNamespaces(parentSymbol, node.Left.Expression, b.isTopLevelNamespaceAssignment(node.Left), false /*isPrototypeProperty*/, false /*containerIsClass*/)
		b.addLateBoundAssignmentDeclarationToSymbol(node, sym)
	} else {
		b.bindStaticPropertyAssignment(cast(node.Left, isBindableStaticNameExpression))
	}
}

/**
 * For nodes like `x.y = z`, declare a member 'y' on 'x' if x is a function (or IIFE) or class or {}, or not declared.
 * Also works for expression statements preceded by JSDoc, like / ** @type number * / x.y;
 */

func (b *Binder) bindStaticPropertyAssignment(node BindableStaticNameExpression) {
	Debug.assert(!isIdentifier(node))
	setParent(node.Expression, node)
	b.bindPropertyAssignment(node.Expression, node, false /*isPrototypeProperty*/, false /*containerIsClass*/)
}

func (b *Binder) bindPotentiallyMissingNamespaces(namespaceSymbol *ast.Symbol, entityName BindableStaticNameExpression, isToplevel bool, isPrototypeProperty bool, containerIsClass bool) *ast.Symbol {
	if namespaceSymbol. /* ? */ flags&ast.SymbolFlagsAlias != 0 {
		return namespaceSymbol
	}
	if isToplevel && !isPrototypeProperty {
		// make symbols or add declarations for intermediate containers
		flags := ast.SymbolFlagsModule | ast.SymbolFlagsAssignment
		excludeFlags := ast.SymbolFlagsValueModuleExcludes & ^ast.SymbolFlagsAssignment
		namespaceSymbol = b.forEachIdentifierInEntityName(entityName, namespaceSymbol, func(id Declaration, symbol *ast.Symbol, parent *ast.Symbol) *ast.Symbol {
			if symbol != nil {
				b.addDeclarationToSymbol(symbol, id, flags)
				return symbol
			} else {
				var table SymbolTable
				if parent != nil {
					table = parent.Exports
				} else {
					table = b.file.JsGlobalAugmentations || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: file.jsGlobalAugmentations = createSymbolTable() */ TODO)
				}
				return b.declareSymbol(table, parent, id, flags, excludeFlags)
			}
		})
	}
	if containerIsClass && namespaceSymbol != nil && namespaceSymbol.ValueDeclaration != nil {
		b.addDeclarationToSymbol(namespaceSymbol, namespaceSymbol.ValueDeclaration, ast.SymbolFlagsClass)
	}
	return namespaceSymbol
}

func (b *Binder) bindPotentiallyNewExpandoMemberToNamespace(declaration Union[BindableStaticAccessExpression, CallExpression], namespaceSymbol *ast.Symbol, isPrototypeProperty bool) {
	if namespaceSymbol == nil || !b.isExpandoSymbol(namespaceSymbol) {
		return
	}

	// Set up the members collection if it doesn't exist already
	var symbolTable SymbolTable
	if isPrototypeProperty {
		symbolTable = (namespaceSymbol.Members || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: namespaceSymbol.members = createSymbolTable() */ TODO))
	} else {
		symbolTable = (namespaceSymbol.Exports || ( /* TODO(TS-TO-GO) EqualsToken BinaryExpression: namespaceSymbol.exports = createSymbolTable() */ TODO))
	}

	includes := ast.SymbolFlagsNone
	excludes := ast.SymbolFlagsNone
	// Method-like
	if isFunctionLikeDeclaration(getAssignedExpandoInitializer(declaration)) {
		includes = ast.SymbolFlagsMethod
		excludes = ast.SymbolFlagsMethodExcludes
	} else if isCallExpression(declaration) && isBindableObjectDefinePropertyCall(declaration) {
		if some(declaration.Arguments[2].Properties, func(p /* TODO(TS-TO-GO) inferred type MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | PropertyAssignment | ShorthandPropertyAssignment | SpreadAssignment */ any) bool {
			id := getNameOfDeclaration(p)
			return id != nil && isIdentifier(id) && idText(id) == "set"
		}) {
			// We mix in `SymbolFLags.Property` so in the checker `getTypeOfVariableParameterOrProperty` is used for this
			// symbol, instead of `getTypeOfAccessor` (which will assert as there is no real accessor declaration)
			includes |= ast.SymbolFlagsSetAccessor | ast.SymbolFlagsProperty
			excludes |= ast.SymbolFlagsSetAccessorExcludes
		}
		if some(declaration.Arguments[2].Properties, func(p /* TODO(TS-TO-GO) inferred type MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | PropertyAssignment | ShorthandPropertyAssignment | SpreadAssignment */ any) bool {
			id := getNameOfDeclaration(p)
			return id != nil && isIdentifier(id) && idText(id) == "get"
		}) {
			includes |= ast.SymbolFlagsGetAccessor | ast.SymbolFlagsProperty
			excludes |= ast.SymbolFlagsGetAccessorExcludes
		}
	}

	if includes == ast.SymbolFlagsNone {
		includes = ast.SymbolFlagsProperty
		excludes = ast.SymbolFlagsPropertyExcludes
	}

	b.declareSymbol(symbolTable, namespaceSymbol, declaration, includes|ast.SymbolFlagsAssignment, excludes & ^ast.SymbolFlagsAssignment)
}

func (b *Binder) isTopLevelNamespaceAssignment(propertyAccess BindableAccessExpression) bool {
	if isBinaryExpression(propertyAccess.Parent) {
		return b.getParentOfBinaryExpression(propertyAccess.Parent).Parent.Kind == ast.KindSourceFile
	} else {
		return propertyAccess.Parent.Parent.Kind == ast.KindSourceFile
	}
}

func (b *Binder) bindPropertyAssignment(name BindableStaticNameExpression, propertyAccess BindableStaticAccessExpression, isPrototypeProperty bool, containerIsClass bool) {
	namespaceSymbol := b.lookupSymbolForPropertyAccess(name, b.blockScopeContainer) || b.lookupSymbolForPropertyAccess(name, b.container)
	isToplevel := b.isTopLevelNamespaceAssignment(propertyAccess)
	namespaceSymbol = b.bindPotentiallyMissingNamespaces(namespaceSymbol, propertyAccess.Expression, isToplevel, isPrototypeProperty, containerIsClass)
	b.bindPotentiallyNewExpandoMemberToNamespace(propertyAccess, namespaceSymbol, isPrototypeProperty)
}

/**
 * Javascript expando values are:
 * - Functions
 * - classes
 * - namespaces
 * - variables initialized with function expressions
 * -                       with class expressions
 * -                       with empty object literals
 * -                       with non-empty object literals if assigned to the prototype property
 */

func (b *Binder) isExpandoSymbol(symbol *ast.Symbol) bool {
	if symbol.Flags&(ast.SymbolFlagsFunction|ast.SymbolFlagsClass|ast.SymbolFlagsNamespaceModule) != 0 {
		return true
	}
	node := symbol.ValueDeclaration
	if node != nil && isCallExpression(node) {
		return getAssignedExpandoInitializer(node) != nil
	}
	var init Expression
	switch {
	case node == nil:
		init = nil
	case isVariableDeclaration(node):
		init = node.Initializer
	case isBinaryExpression(node):
		init = node.Right
	case isPropertyAccessExpression(node) && isBinaryExpression(node.Parent):
		init = node.Parent.Right
	default:
		init = nil
	}
	init = init && getRightMostAssignedExpression(init)
	if init != nil {
		isPrototypeAssignment := isPrototypeAccess(ifElse(isVariableDeclaration(node), node.Name, ifElse(isBinaryExpression(node), node.Left, node)))
		return getExpandoInitializer(ifElse(isBinaryExpression(init) && (init.OperatorToken.Kind == ast.KindBarBarToken || init.OperatorToken.Kind == ast.KindQuestionQuestionToken), init.Right, init), isPrototypeAssignment) != nil
	}
	return false
}

func (b *Binder) getParentOfBinaryExpression(expr *ast.Node) *ast.Node {
	for isBinaryExpression(expr.Parent) {
		expr = expr.Parent
	}
	return expr.Parent
}

func (b *Binder) lookupSymbolForPropertyAccess(node BindableStaticNameExpression, lookupContainer Union[IsContainer, IsBlockScopedContainer, EntityNameExpression] /*  = container */) *ast.Symbol {
	if isIdentifier(node) {
		return lookupSymbolForName(lookupContainer, node.EscapedText)
	} else {
		symbol := b.lookupSymbolForPropertyAccess(node.Expression)
		return symbol && symbol.Exports && symbol.Exports.get(getElementOrPropertyAccessName(node))
	}
}

func (b *Binder) forEachIdentifierInEntityName(e BindableStaticNameExpression, parent *ast.Symbol, action func(e Declaration, symbol *ast.Symbol, parent *ast.Symbol) *ast.Symbol) *ast.Symbol {
	if isExportsOrModuleExportsOrAlias(b.file, e) {
		return b.file.Symbol
	} else if isIdentifier(e) {
		return action(e, b.lookupSymbolForPropertyAccess(e), b.parent)
	} else {
		s := b.forEachIdentifierInEntityName(e.Expression, b.parent, action)
		name := getNameOrArgument(e)
		// unreachable
		if isPrivateIdentifier(name) {
			Debug.fail("unexpected PrivateIdentifier")
		}
		return action(name, s && s.Exports && s.Exports.get(getElementOrPropertyAccessName(e)), s)
	}
}

func (b *Binder) bindCallExpression(node CallExpression) {
	// We're only inspecting call expressions to detect CommonJS modules, so we can skip
	// this check if we've already seen the module indicator
	if b.file.CommonJsModuleIndicator == nil && isRequireCall(node, false /*requireStringLiteralLikeArgument*/) {
		b.setCommonJsModuleIndicator(node)
	}
}

func (b *Binder) bindClassLikeDeclaration(node ClassLikeDeclaration) {
	if node.Kind == ast.KindClassDeclaration {
		b.bindBlockScopedDeclaration(node, ast.SymbolFlagsClass, ast.SymbolFlagsClassExcludes)
	} else {
		var bindingName string
		if node.Name != nil {
			bindingName = node.Name.EscapedText
		} else {
			bindingName = InternalSymbolNameClass
		}
		b.bindAnonymousDeclaration(node, ast.SymbolFlagsClass, bindingName)
		// Add name of class expression into the map for semantic classifier
		if node.Name != nil {
			b.classifiableNames.add(node.Name.EscapedText)
		}
	}

	TODO_IDENTIFIER := node

	// TypeScript 1.0 spec (April 2014): 8.4
	// Every class automatically contains a static property member named 'prototype', the
	// type of which is an instantiation of the class type with type Any supplied as a type
	// argument for each type parameter. It is an error to explicitly declare a static
	// property member with the name 'prototype'.
	//
	// Note: we check for this here because this class may be merging into a module.  The
	// module might have an exported variable called 'prototype'.  We can't allow that as
	// that would clash with the built-in 'prototype' for the class.
	prototypeSymbol := b.createSymbol(ast.SymbolFlagsProperty|ast.SymbolFlagsPrototype, "prototype" /* as __String */)
	symbolExport := symbol.Exports.get(prototypeSymbol.EscapedName)
	if symbolExport != nil {
		if node.Name != nil {
			setParent(node.Name, node)
		}
		b.file.BindDiagnostics.push(b.createDiagnosticForNode(symbolExport.Declarations[0], Diagnostics.Duplicate_identifier_0, symbolName(prototypeSymbol)))
	}
	symbol.Exports.set(prototypeSymbol.EscapedName, prototypeSymbol)
	prototypeSymbol.Parent = symbol
}

func (b *Binder) bindEnumDeclaration(node EnumDeclaration) {
	if isEnumConst(node) {
		return b.bindBlockScopedDeclaration(node, ast.SymbolFlagsConstEnum, ast.SymbolFlagsConstEnumExcludes)
	} else {
		return b.bindBlockScopedDeclaration(node, ast.SymbolFlagsRegularEnum, ast.SymbolFlagsRegularEnumExcludes)
	}
}

func (b *Binder) bindVariableDeclarationOrBindingElement(node Union[VariableDeclaration, BindingElement]) {
	if b.inStrictMode {
		b.checkStrictModeEvalOrArguments(node, node.Name)
	}

	if !isBindingPattern(node.Name) {
		var possibleVariableDecl /* TODO(TS-TO-GO) inferred type VariableDeclaration | ParameterDeclaration | BindingElement */ any
		if node.Kind == ast.KindVariableDeclaration {
			possibleVariableDecl = node
		} else {
			possibleVariableDecl = node.Parent.Parent
		}
		if isInJSFile(node) && isVariableDeclarationInitializedToBareOrAccessedRequire(possibleVariableDecl) && getJSDocTypeTag(node) == nil && getCombinedModifierFlags(node)&ast.ModifierFlagsExport == 0 {
			b.declareSymbolAndAddToSymbolTable(node.AsDeclaration(), ast.SymbolFlagsAlias, ast.SymbolFlagsAliasExcludes)
		} else if isBlockOrCatchScoped(node) {
			b.bindBlockScopedDeclaration(node, ast.SymbolFlagsBlockScopedVariable, ast.SymbolFlagsBlockScopedVariableExcludes)
		} else if isPartOfParameterDeclaration(node) {
			// It is safe to walk up parent chain to find whether the node is a destructuring parameter declaration
			// because its parent chain has already been set up, since parents are set before descending into children.
			//
			// If node is a binding element in parameter declaration, we need to use ParameterExcludes.
			// Using ParameterExcludes flag allows the compiler to report an error on duplicate identifiers in Parameter Declaration
			// For example:
			//      function foo([a,a]) {} // Duplicate Identifier error
			//      function bar(a,a) {}   // Duplicate Identifier error, parameter declaration in this case is handled in bindParameter
			//                             // which correctly set excluded symbols
			b.declareSymbolAndAddToSymbolTable(node, ast.SymbolFlagsFunctionScopedVariable, ast.SymbolFlagsParameterExcludes)
		} else {
			b.declareSymbolAndAddToSymbolTable(node, ast.SymbolFlagsFunctionScopedVariable, ast.SymbolFlagsFunctionScopedVariableExcludes)
		}
	}
}

func (b *Binder) bindParameter(node Union[ParameterDeclaration, JSDocParameterTag]) {
	if node.Kind == ast.KindJSDocParameterTag && b.container.Kind != ast.KindJSDocSignature {
		return
	}
	if b.inStrictMode && node.Flags&ast.NodeFlagsAmbient == 0 {
		// It is a SyntaxError if the identifier eval or arguments appears within a FormalParameterList of a
		// strict mode FunctionLikeDeclaration or FunctionExpression(13.1)
		b.checkStrictModeEvalOrArguments(node, node.Name)
	}

	if isBindingPattern(node.Name) {
		b.bindAnonymousDeclaration(node, ast.SymbolFlagsFunctionScopedVariable, "__"+node.AsParameterDeclaration().Parent.Parameters.indexOf(node.AsParameterDeclaration()).(string))
	} else {
		b.declareSymbolAndAddToSymbolTable(node, ast.SymbolFlagsFunctionScopedVariable, ast.SymbolFlagsParameterExcludes)
	}

	// If this is a property-parameter, then also declare the property symbol into the
	// containing class.
	if isParameterPropertyDeclaration(node, node.Parent) {
		classDeclaration := node.Parent.Parent
		b.declareSymbol(classDeclaration.Symbol.Members, classDeclaration.Symbol, node, ast.SymbolFlagsProperty|(ifElse(node.QuestionToken != nil, ast.SymbolFlagsOptional, ast.SymbolFlagsNone)), ast.SymbolFlagsPropertyExcludes)
	}
}

func (b *Binder) bindFunctionDeclaration(node FunctionDeclaration) {
	if !b.file.IsDeclarationFile && node.Flags&ast.NodeFlagsAmbient == 0 {
		if isAsyncFunction(node) {
			b.emitFlags |= ast.NodeFlagsHasAsyncFunctions
		}
	}

	b.checkStrictModeFunctionName(node)
	if b.inStrictMode {
		b.checkStrictModeFunctionDeclaration(node)
		b.bindBlockScopedDeclaration(node, ast.SymbolFlagsFunction, ast.SymbolFlagsFunctionExcludes)
	} else {
		b.declareSymbolAndAddToSymbolTable(node, ast.SymbolFlagsFunction, ast.SymbolFlagsFunctionExcludes)
	}
}

func (b *Binder) bindFunctionExpression(node Union[FunctionExpression, ArrowFunction]) *ast.Symbol {
	if !b.file.IsDeclarationFile && node.Flags&ast.NodeFlagsAmbient == 0 {
		if isAsyncFunction(node) {
			b.emitFlags |= ast.NodeFlagsHasAsyncFunctions
		}
	}
	if b.currentFlow {
		node.FlowNode = b.currentFlow
	}
	b.checkStrictModeFunctionName(node)
	var bindingName string
	if node.Name != nil {
		bindingName = node.Name.EscapedText
	} else {
		bindingName = InternalSymbolNameFunction
	}
	return b.bindAnonymousDeclaration(node, ast.SymbolFlagsFunction, bindingName)
}

func (b *Binder) bindPropertyOrMethodOrAccessor(node Declaration, symbolFlags SymbolFlags, symbolExcludes SymbolFlags) *ast.Symbol {
	if !b.file.IsDeclarationFile && node.Flags&ast.NodeFlagsAmbient == 0 && isAsyncFunction(node) {
		b.emitFlags |= ast.NodeFlagsHasAsyncFunctions
	}

	if b.currentFlow && isObjectLiteralOrClassExpressionMethodOrAccessor(node) {
		node.FlowNode = b.currentFlow
	}

	if hasDynamicName(node) {
		return b.bindAnonymousDeclaration(node, symbolFlags, InternalSymbolNameComputed)
	} else {
		return b.declareSymbolAndAddToSymbolTable(node, symbolFlags, symbolExcludes)
	}
}

func (b *Binder) getInferTypeContainer(node *ast.Node) *ConditionalTypeNode {
	extendsType := findAncestor(node, func(n *ast.Node) bool {
		return n.Parent && isConditionalTypeNode(n.Parent) && n.Parent.ExtendsType == n
	})
	return extendsType && extendsType.Parent.AsConditionalTypeNode()
}

func (b *Binder) bindTypeParameter(node TypeParameterDeclaration) {
	if isJSDocTemplateTag(node.Parent) {
		var container *HasLocals = getEffectiveContainerForJSDocTemplateTag(node.Parent)
		if container != nil {
			Debug.assertNode(container, canHaveLocals)
			if container.Locals == nil {
				container.Locals = createSymbolTable()
			}
			b.declareSymbol(container.Locals, nil /*parent*/, node, ast.SymbolFlagsTypeParameter, ast.SymbolFlagsTypeParameterExcludes)
		} else {
			b.declareSymbolAndAddToSymbolTable(node, ast.SymbolFlagsTypeParameter, ast.SymbolFlagsTypeParameterExcludes)
		}
	} else if node.Parent.Kind == ast.KindInferType {
		var container *HasLocals = b.getInferTypeContainer(node.Parent)
		if container != nil {
			Debug.assertNode(container, canHaveLocals)
			if container.Locals == nil {
				container.Locals = createSymbolTable()
			}
			b.declareSymbol(container.Locals, nil /*parent*/, node, ast.SymbolFlagsTypeParameter, ast.SymbolFlagsTypeParameterExcludes)
		} else {
			b.bindAnonymousDeclaration(node, ast.SymbolFlagsTypeParameter, b.getDeclarationName(node))
			// TODO: GH#18217
		}
	} else {
		b.declareSymbolAndAddToSymbolTable(node, ast.SymbolFlagsTypeParameter, ast.SymbolFlagsTypeParameterExcludes)
	}
}

// reachability checks

func (b *Binder) shouldReportErrorOnModuleDeclaration(node ModuleDeclaration) bool {
	instanceState := getModuleInstanceState(node)
	return instanceState == ModuleInstanceStateInstantiated || (instanceState == ModuleInstanceStateConstEnumOnly && shouldPreserveConstEnums(b.options))
}

func (b *Binder) checkUnreachable(node *ast.Node) bool {
	if b.currentFlow.flags&FlowFlagsUnreachable == 0 {
		return false
	}
	if b.currentFlow == b.unreachableFlow {
		reportError := (isStatementButNotDeclaration(node) && node.Kind != ast.KindEmptyStatement) || node.Kind == ast.KindClassDeclaration || isEnumDeclarationWithPreservedEmit(node, b.options) || (node.Kind == ast.KindModuleDeclaration && b.shouldReportErrorOnModuleDeclaration(node.AsModuleDeclaration()))

		if reportError {
			b.currentFlow = b.reportedUnreachableFlow

			if !b.options.allowUnreachableCode {
				// unreachable code is reported if
				// - user has explicitly asked about it AND
				// - statement is in not ambient context (statements in ambient context is already an error
				//   so we should not report extras) AND
				//   - node is not variable statement OR
				//   - node is block scoped variable statement OR
				//   - node is not block scoped variable statement and at least one variable declaration has initializer
				//   Rationale: we don't want to report errors on non-initialized var's since they are hoisted
				//   On the other side we do want to report errors on non-initialized 'lets' because of TDZ
				isError := unreachableCodeIsError(b.options) && node.Flags&ast.NodeFlagsAmbient == 0 && (!isVariableStatement(node) || getCombinedNodeFlags(node.DeclarationList)&ast.NodeFlagsBlockScoped != 0 || node.DeclarationList.Declarations.some(func(d VariableDeclaration) bool {
					return d.Initializer != nil
				}))

				eachUnreachableRange(node, b.options, func(start *ast.Node, end *ast.Node) {
					return b.errorOrSuggestionOnRange(isError, start, end, Diagnostics.Unreachable_code_detected)
				})
			}
		}
	}
	return true
}

func isEnumDeclarationWithPreservedEmit(node *ast.Node, options CompilerOptions) bool {
	return node.Kind == ast.KindEnumDeclaration && (!isEnumConst(node.AsEnumDeclaration()) || shouldPreserveConstEnums(options))
}

func eachUnreachableRange(node *ast.Node, options CompilerOptions, cb func(start *ast.Node, last *ast.Node)) {
	if isStatement(node) && isExecutableStatement(node) && isBlock(node.Parent) {
		TODO_IDENTIFIER := node.Parent
		slice := sliceAfter(statements, node)
		getRangesWhere(slice, isExecutableStatement, func(start number, afterEnd number) {
			return cb(slice[start], slice[afterEnd-1])
		})
	} else {
		cb(node, node)
	}

	// As opposed to a pure declaration like an `interface`
	isExecutableStatement := func(s Statement) bool {
		// Don't remove statements that can validly be used before they appear.
		return !isFunctionDeclaration(s) && !isPurelyTypeDeclaration(s) && !(isVariableStatement(s) && getCombinedNodeFlags(s)&ast.NodeFlagsBlockScoped == 0 && s.DeclarationList.Declarations.some(func(d VariableDeclaration) bool {
			return d.Initializer == nil
		}))
	}

	isPurelyTypeDeclaration := func(s Statement) bool {
		switch s.Kind {
		case ast.KindInterfaceDeclaration,
			ast.KindTypeAliasDeclaration:
			return true
		case ast.KindModuleDeclaration:
			return getModuleInstanceState(s.AsModuleDeclaration()) != ModuleInstanceStateInstantiated
		case ast.KindEnumDeclaration:
			return !isEnumDeclarationWithPreservedEmit(s, options)
		default:
			return false
		}
	}

}

/** @internal */

func isExportsOrModuleExportsOrAlias(sourceFile SourceFile, node Expression) bool {
	i := 0
	q := createQueue()
	q.enqueue(node)
	for !q.isEmpty() && i < 100 {
		i++
		node = q.dequeue()
		if isExportsIdentifier(node) || isModuleExportsAccessExpression(node) {
			return true
		} else if isIdentifier(node) {
			symbol := lookupSymbolForName(sourceFile, node.EscapedText)
			if symbol != nil && symbol.ValueDeclaration != nil && isVariableDeclaration(symbol.ValueDeclaration) && symbol.ValueDeclaration.Initializer != nil {
				init := symbol.ValueDeclaration.Initializer
				q.enqueue(init)
				if isAssignmentExpression(init, true /*excludeCompoundAssignment*/) {
					q.enqueue(init.Left)
					q.enqueue(init.Right)
				}
			}
		}
	}
	return false
}

/** @internal */

func getContainerFlags(node *ast.Node) ContainerFlags {
	switch node.Kind {
	case ast.KindClassExpression,
		ast.KindClassDeclaration,
		ast.KindEnumDeclaration,
		ast.KindObjectLiteralExpression,
		ast.KindTypeLiteral,
		ast.KindJSDocTypeLiteral,
		ast.KindJsxAttributes:
		return ContainerFlagsIsContainer
	case ast.KindInterfaceDeclaration:
		return ContainerFlagsIsContainer | ContainerFlagsIsInterface
	case ast.KindModuleDeclaration,
		ast.KindTypeAliasDeclaration,
		ast.KindMappedType,
		ast.KindIndexSignature:
		return ContainerFlagsIsContainer | ContainerFlagsHasLocals
	case ast.KindSourceFile:
		return ContainerFlagsIsContainer | ContainerFlagsIsControlFlowContainer | ContainerFlagsHasLocals
	case ast.KindGetAccessor,
		ast.KindSetAccessor,
		ast.KindMethodDeclaration:
		if isObjectLiteralOrClassExpressionMethodOrAccessor(node) {
			return ContainerFlagsIsContainer | ContainerFlagsIsControlFlowContainer | ContainerFlagsHasLocals | ContainerFlagsIsFunctionLike | ContainerFlagsIsObjectLiteralOrClassExpressionMethodOrAccessor
		}
		fallthrough
	case ast.KindConstructor,
		ast.KindFunctionDeclaration,
		ast.KindMethodSignature,
		ast.KindCallSignature,
		ast.KindJSDocSignature,
		ast.KindJSDocFunctionType,
		ast.KindFunctionType,
		ast.KindConstructSignature,
		ast.KindConstructorType,
		ast.KindClassStaticBlockDeclaration:
		return ContainerFlagsIsContainer | ContainerFlagsIsControlFlowContainer | ContainerFlagsHasLocals | ContainerFlagsIsFunctionLike
	case ast.KindFunctionExpression,
		ast.KindArrowFunction:
		return ContainerFlagsIsContainer | ContainerFlagsIsControlFlowContainer | ContainerFlagsHasLocals | ContainerFlagsIsFunctionLike | ContainerFlagsIsFunctionExpression
	case ast.KindModuleBlock:
		return ContainerFlagsIsControlFlowContainer
	case ast.KindPropertyDeclaration:
		if node.AsPropertyDeclaration().Initializer != nil {
			return ContainerFlagsIsControlFlowContainer
		} else {
			return 0
		}
	case ast.KindCatchClause,
		ast.KindForStatement,
		ast.KindForInStatement,
		ast.KindForOfStatement,
		ast.KindCaseBlock:
		return ContainerFlagsIsBlockScopedContainer | ContainerFlagsHasLocals
	case ast.KindBlock:
		// do not treat blocks directly inside a function as a block-scoped-container.
		// Locals that reside in this block should go to the function locals. Otherwise 'x'
		// would not appear to be a redeclaration of a block scoped local in the following
		// example:
		//
		//      function foo() {
		//          var x;
		//          let x;
		//      }
		//
		// If we placed 'var x' into the function locals and 'let x' into the locals of
		// the block, then there would be no collision.
		//
		// By not creating a new block-scoped-container here, we ensure that both 'var x'
		// and 'let x' go into the Function-container's locals, and we do get a collision
		// conflict.
		if isFunctionLike(node.Parent) || isClassStaticBlockDeclaration(node.Parent) {
			return ContainerFlagsNone
		} else {
			return ContainerFlagsIsBlockScopedContainer | ContainerFlagsHasLocals
		}
	}

	return ContainerFlagsNone
}

func lookupSymbolForName(container *ast.Node, name string) *ast.Symbol {
	local := tryCast(container, canHaveLocals). /* ? */ locals. /* ? */ get(name)
	if local != nil {
		return ifNotNilElse(local.ExportSymbol, local)
	}
	if isSourceFile(container) && container.JsGlobalAugmentations != nil && container.JsGlobalAugmentations.has(name) {
		return container.JsGlobalAugmentations.get(name)
	}
	if canHaveSymbol(container) {
		return container.Symbol. /* ? */ Exports. /* ? */ get(name)
	}
}
