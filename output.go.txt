package output

var ambientModuleSymbolRegex = regexp.MustParse(`^".+"$`)
var anon = "(anonymous)" /* as __String & string */
type ReferenceHint int32

const (
	ReferenceHintUnspecified ReferenceHint = iota
	ReferenceHintIdentifier
	ReferenceHintProperty
	ReferenceHintExportAssignment
	ReferenceHintJsx
	ReferenceHintAsyncFunction
	ReferenceHintExportImportEquals
	ReferenceHintExportSpecifier
	ReferenceHintDecorator
)

var nextSymbolId = 1
var nextNodeId = 1
var nextMergeId = 1
var nextFlowId = 1

type IterationUse int32

const (
	IterationUseAllowsSyncIterablesFlag  IterationUse = 1 << 0
	IterationUseAllowsAsyncIterablesFlag IterationUse = 1 << 1
	IterationUseAllowsStringInputFlag    IterationUse = 1 << 2
	IterationUseForOfFlag                IterationUse = 1 << 3
	IterationUseYieldStarFlag            IterationUse = 1 << 4
	IterationUseSpreadFlag               IterationUse = 1 << 5
	IterationUseDestructuringFlag        IterationUse = 1 << 6
	IterationUsePossiblyOutOfBounds      IterationUse = 1 << 7
	IterationUseElement                  IterationUse = IterationUseAllowsSyncIterablesFlag
	IterationUseSpread                   IterationUse = IterationUseAllowsSyncIterablesFlag | IterationUseIterationUseSpreadFlag
	IterationUseDestructuring            IterationUse = IterationUseAllowsSyncIterablesFlag | IterationUseIterationUseDestructuringFlag
	IterationUseForOf                    IterationUse = IterationUseAllowsSyncIterablesFlag | IterationUseAllowsStringInputFlag | IterationUseIterationUseForOfFlag
	IterationUseForAwaitOf               IterationUse = IterationUseAllowsSyncIterablesFlag | IterationUseAllowsAsyncIterablesFlag | IterationUseAllowsStringInputFlag | IterationUseIterationUseForOfFlag
	IterationUseYieldStar                IterationUse = IterationUseAllowsSyncIterablesFlag | IterationUseIterationUseYieldStarFlag
	IterationUseAsyncYieldStar           IterationUse = IterationUseAllowsSyncIterablesFlag | IterationUseAllowsAsyncIterablesFlag | IterationUseIterationUseYieldStarFlag
	IterationUseGeneratorReturnType      IterationUse = IterationUseAllowsSyncIterablesFlag
	IterationUseAsyncGeneratorReturnType IterationUse = IterationUseAllowsAsyncIterablesFlag
)

type IterationTypeKind int32

const (
	IterationTypeKindYield IterationTypeKind = iota
	IterationTypeKindReturn
	IterationTypeKindNext
)

type IterationTypesResolver struct {
	iterableCacheKey              TODO /* TODO(UnionType): "iterationTypesOfAsyncIterable" | "iterationTypesOfIterable" */
	iteratorCacheKey              TODO /* TODO(UnionType): "iterationTypesOfAsyncIterator" | "iterationTypesOfIterator" */
	iteratorSymbolName            TODO /* TODO(UnionType): "asyncIterator" | "iterator" */
	getGlobalIteratorType         func(reportErrors bool) GenericType
	getGlobalIterableType         func(reportErrors bool) GenericType
	getGlobalIterableIteratorType func(reportErrors bool) GenericType
	getGlobalIteratorObjectType   func(reportErrors bool) GenericType
	getGlobalGeneratorType        func(reportErrors bool) GenericType
	getGlobalBuiltinIteratorTypes func() []GenericType
	resolveIterationType          func(type_ Type, errorNode *Node) *Type
	mustHaveANextMethodDiagnostic DiagnosticMessage
	mustBeAMethodDiagnostic       DiagnosticMessage
	mustHaveAValueDiagnostic      DiagnosticMessage
}
type WideningKind int32

const (
	WideningKindNormal WideningKind = iota
	WideningKindFunctionReturn
	WideningKindGeneratorNext
	WideningKindGeneratorYield
)

type TypeFacts int32

const (
	TypeFactsNone                      TypeFacts = 0
	TypeFactsTypeofEQString            TypeFacts = 1 << 0
	TypeFactsTypeofEQNumber            TypeFacts = 1 << 1
	TypeFactsTypeofEQBigInt            TypeFacts = 1 << 2
	TypeFactsTypeofEQBoolean           TypeFacts = 1 << 3
	TypeFactsTypeofEQSymbol            TypeFacts = 1 << 4
	TypeFactsTypeofEQObject            TypeFacts = 1 << 5
	TypeFactsTypeofEQFunction          TypeFacts = 1 << 6
	TypeFactsTypeofEQHostObject        TypeFacts = 1 << 7
	TypeFactsTypeofNEString            TypeFacts = 1 << 8
	TypeFactsTypeofNENumber            TypeFacts = 1 << 9
	TypeFactsTypeofNEBigInt            TypeFacts = 1 << 10
	TypeFactsTypeofNEBoolean           TypeFacts = 1 << 11
	TypeFactsTypeofNESymbol            TypeFacts = 1 << 12
	TypeFactsTypeofNEObject            TypeFacts = 1 << 13
	TypeFactsTypeofNEFunction          TypeFacts = 1 << 14
	TypeFactsTypeofNEHostObject        TypeFacts = 1 << 15
	TypeFactsEQUndefined               TypeFacts = 1 << 16
	TypeFactsEQNull                    TypeFacts = 1 << 17
	TypeFactsEQUndefinedOrNull         TypeFacts = 1 << 18
	TypeFactsNEUndefined               TypeFacts = 1 << 19
	TypeFactsNENull                    TypeFacts = 1 << 20
	TypeFactsNEUndefinedOrNull         TypeFacts = 1 << 21
	TypeFactsTruthy                    TypeFacts = 1 << 22
	TypeFactsFalsy                     TypeFacts = 1 << 23
	TypeFactsIsUndefined               TypeFacts = 1 << 24
	TypeFactsIsNull                    TypeFacts = 1 << 25
	TypeFactsIsUndefinedOrNull         TypeFacts = TypeFactsIsUndefined | TypeFactsIsNull
	TypeFactsAll                       TypeFacts = (1 << 27) - 1
	TypeFactsBaseStringStrictFacts     TypeFacts = TypeFactsTypeofEQString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull
	TypeFactsBaseStringFacts           TypeFacts = TypeFactsBaseTypeFactsStringStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsStringStrictFacts         TypeFacts = TypeFactsBaseTypeFactsStringStrictFacts | TypeFactsTruthy | TypeFactsFalsy
	TypeFactsStringFacts               TypeFacts = TypeFactsBaseTypeFactsStringFacts | TypeFactsTruthy
	TypeFactsEmptyStringStrictFacts    TypeFacts = TypeFactsBaseTypeFactsStringStrictFacts | TypeFactsFalsy
	TypeFactsEmptyStringFacts          TypeFacts = TypeFactsBaseTypeFactsStringFacts
	TypeFactsNonEmptyStringStrictFacts TypeFacts = TypeFactsBaseTypeFactsStringStrictFacts | TypeFactsTruthy
	TypeFactsNonEmptyStringFacts       TypeFacts = TypeFactsBaseTypeFactsStringFacts | TypeFactsTruthy
	TypeFactsBaseNumberStrictFacts     TypeFacts = TypeFactsTypeofEQNumber | TypeFactsTypeofNEString | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull
	TypeFactsBaseNumberFacts           TypeFacts = TypeFactsBaseTypeFactsNumberStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsNumberStrictFacts         TypeFacts = TypeFactsBaseTypeFactsNumberStrictFacts | TypeFactsTruthy | TypeFactsFalsy
	TypeFactsNumberFacts               TypeFacts = TypeFactsBaseTypeFactsNumberFacts | TypeFactsTruthy
	TypeFactsZeroNumberStrictFacts     TypeFacts = TypeFactsBaseTypeFactsNumberStrictFacts | TypeFactsFalsy
	TypeFactsZeroNumberFacts           TypeFacts = TypeFactsBaseTypeFactsNumberFacts
	TypeFactsNonZeroNumberStrictFacts  TypeFacts = TypeFactsBaseTypeFactsNumberStrictFacts | TypeFactsTruthy
	TypeFactsNonZeroNumberFacts        TypeFacts = TypeFactsBaseTypeFactsNumberFacts | TypeFactsTruthy
	TypeFactsBaseBigIntStrictFacts     TypeFacts = TypeFactsTypeofEQBigInt | TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull
	TypeFactsBaseBigIntFacts           TypeFacts = TypeFactsBaseTypeFactsBigIntStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsBigIntStrictFacts         TypeFacts = TypeFactsBaseTypeFactsBigIntStrictFacts | TypeFactsTruthy | TypeFactsFalsy
	TypeFactsBigIntFacts               TypeFacts = TypeFactsBaseTypeFactsBigIntFacts | TypeFactsTruthy
	TypeFactsZeroBigIntStrictFacts     TypeFacts = TypeFactsBaseTypeFactsBigIntStrictFacts | TypeFactsFalsy
	TypeFactsZeroBigIntFacts           TypeFacts = TypeFactsBaseTypeFactsBigIntFacts
	TypeFactsNonZeroBigIntStrictFacts  TypeFacts = TypeFactsBaseTypeFactsBigIntStrictFacts | TypeFactsTruthy
	TypeFactsNonZeroBigIntFacts        TypeFacts = TypeFactsBaseTypeFactsBigIntFacts | TypeFactsTruthy
	TypeFactsBaseBooleanStrictFacts    TypeFacts = TypeFactsTypeofEQBoolean | TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull
	TypeFactsBaseBooleanFacts          TypeFacts = TypeFactsBaseTypeFactsBooleanStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsBooleanStrictFacts        TypeFacts = TypeFactsBaseTypeFactsBooleanStrictFacts | TypeFactsTruthy | TypeFactsFalsy
	TypeFactsBooleanFacts              TypeFacts = TypeFactsBaseTypeFactsBooleanFacts | TypeFactsTruthy
	TypeFactsFalseStrictFacts          TypeFacts = TypeFactsBaseTypeFactsBooleanStrictFacts | TypeFactsFalsy
	TypeFactsFalseFacts                TypeFacts = TypeFactsBaseTypeFactsBooleanFacts
	TypeFactsTrueStrictFacts           TypeFacts = TypeFactsBaseTypeFactsBooleanStrictFacts | TypeFactsTruthy
	TypeFactsTrueFacts                 TypeFacts = TypeFactsBaseTypeFactsBooleanFacts | TypeFactsTruthy
	TypeFactsSymbolStrictFacts         TypeFacts = TypeFactsTypeofEQSymbol | TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull | TypeFactsTruthy
	TypeFactsSymbolFacts               TypeFacts = TypeFactsSymbolStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsObjectStrictFacts         TypeFacts = TypeFactsTypeofEQObject | TypeFactsTypeofEQHostObject | TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEFunction | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull | TypeFactsTruthy
	TypeFactsObjectFacts               TypeFacts = TypeFactsObjectStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsFunctionStrictFacts       TypeFacts = TypeFactsTypeofEQFunction | TypeFactsTypeofEQHostObject | TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsNEUndefined | TypeFactsNENull | TypeFactsTypeFactsNEUndefinedOrNull | TypeFactsTruthy
	TypeFactsFunctionFacts             TypeFacts = TypeFactsFunctionStrictFacts | TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsFalsy
	TypeFactsVoidFacts                 TypeFacts = TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsEQUndefined | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsNENull | TypeFactsFalsy
	TypeFactsUndefinedFacts            TypeFacts = TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsEQUndefined | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsNENull | TypeFactsFalsy | TypeFactsIsUndefined
	TypeFactsNullFacts                 TypeFacts = TypeFactsTypeofEQObject | TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEFunction | TypeFactsTypeofNEHostObject | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsNEUndefined | TypeFactsFalsy | TypeFactsIsNull
	TypeFactsEmptyObjectStrictFacts    TypeFacts = TypeFactsAll & ~(TypeFactsEQUndefined | TypeFactsEQNull | TypeFactsTypeFactsEQUndefinedOrNull | TypeFactsTypeFactsIsUndefinedOrNull)
	TypeFactsEmptyObjectFacts          TypeFacts = TypeFactsAll & ~TypeFactsTypeFactsIsUndefinedOrNull
	TypeFactsUnknownFacts              TypeFacts = TypeFactsAll & ~TypeFactsTypeFactsIsUndefinedOrNull
	TypeFactsAllTypeofNE               TypeFacts = TypeFactsTypeofNEString | TypeFactsTypeofNENumber | TypeFactsTypeofNEBigInt | TypeFactsTypeofNEBoolean | TypeFactsTypeofNESymbol | TypeFactsTypeofNEObject | TypeFactsTypeofNEFunction | TypeFactsNEUndefined
	TypeFactsOrFactsMask               TypeFacts = TypeFactsTypeofEQFunction | TypeFactsTypeofNEObject
	TypeFactsAndFactsMask              TypeFacts = TypeFactsAll & ~TypeFactsOrFactsMask
)

var typeofNEFacts ReadonlyMap[string, TypeFacts] = TODO /* TODO(NewExpression): new Map(Object.entries({
    string: TypeFacts.TypeofNEString,
    number: TypeFacts.TypeofNENumber,
    bigint: TypeFacts.TypeofNEBigInt,
    boolean: TypeFacts.TypeofNEBoolean,
    symbol: TypeFacts.TypeofNESymbol,
    undefined: TypeFacts.NEUndefined,
    object: TypeFacts.TypeofNEObject,
    function: TypeFacts.TypeofNEFunction,
})) */
type TypeSystemEntity TODO /* TODO(UnionType): Node | Symbol | Type | Signature */
type TypeSystemPropertyName int32

const (
	TypeSystemPropertyNameType TypeSystemPropertyName = iota
	TypeSystemPropertyNameResolvedBaseConstructorType
	TypeSystemPropertyNameDeclaredType
	TypeSystemPropertyNameResolvedReturnType
	TypeSystemPropertyNameImmediateBaseConstraint
	TypeSystemPropertyNameResolvedTypeArguments
	TypeSystemPropertyNameResolvedBaseTypes
	TypeSystemPropertyNameWriteType
	TypeSystemPropertyNameParameterInitializerContainsUndefined
)

type CheckMode int32

const (
	CheckModeNormal               CheckMode = 0
	CheckModeContextual           CheckMode = 1 << 0
	CheckModeInferential          CheckMode = 1 << 1
	CheckModeSkipContextSensitive CheckMode = 1 << 2
	CheckModeSkipGenericFunctions CheckMode = 1 << 3
	CheckModeIsForSignatureHelp   CheckMode = 1 << 4
	CheckModeRestBindingElement   CheckMode = 1 << 5
	CheckModeTypeOnly             CheckMode = 1 << 6
)

type SignatureCheckMode int32

const (
	SignatureCheckModeNone               SignatureCheckMode = 0
	SignatureCheckModeBivariantCallback  SignatureCheckMode = 1 << 0
	SignatureCheckModeStrictCallback     SignatureCheckMode = 1 << 1
	SignatureCheckModeIgnoreReturnTypes  SignatureCheckMode = 1 << 2
	SignatureCheckModeStrictArity        SignatureCheckMode = 1 << 3
	SignatureCheckModeStrictTopSignature SignatureCheckMode = 1 << 4
	SignatureCheckModeCallback           SignatureCheckMode = SignatureCheckModeBivariantSignatureCheckModeCallback | SignatureCheckModeStrictSignatureCheckModeCallback
)

type IntersectionState int32

const (
	IntersectionStateNone   IntersectionState = 0
	IntersectionStateSource IntersectionState = 1 << 0
	IntersectionStateTarget IntersectionState = 1 << 1
)

type RecursionFlags int32

const (
	RecursionFlagsNone   RecursionFlags = 0
	RecursionFlagsSource RecursionFlags = 1 << 0
	RecursionFlagsTarget RecursionFlags = 1 << 1
	RecursionFlagsBoth   RecursionFlags = RecursionFlagsSource | RecursionFlagsTarget
)

type MappedTypeModifiers int32

const (
	MappedTypeModifiersIncludeReadonly MappedTypeModifiers = 1 << 0
	MappedTypeModifiersExcludeReadonly MappedTypeModifiers = 1 << 1
	MappedTypeModifiersIncludeOptional MappedTypeModifiers = 1 << 2
	MappedTypeModifiersExcludeOptional MappedTypeModifiers = 1 << 3
)

type MappedTypeNameTypeKind int32

const (
	MappedTypeNameTypeKindNone MappedTypeNameTypeKind = iota
	MappedTypeNameTypeKindFiltering
	MappedTypeNameTypeKindRemapping
)

type ExpandingFlags int32

const (
	ExpandingFlagsNone   ExpandingFlags = 0
	ExpandingFlagsSource ExpandingFlags = 1
	ExpandingFlagsTarget ExpandingFlags = 1 << 1
	ExpandingFlagsBoth   ExpandingFlags = ExpandingFlagsSource | ExpandingFlagsTarget
)

type MembersOrExportsResolutionKind string

const (
	MembersOrExportsResolutionKindresolvedExports MembersOrExportsResolutionKind = "MembersOrExportsResolutionKindresolvedExports"
	MembersOrExportsResolutionKindresolvedMembers MembersOrExportsResolutionKind = "MembersOrExportsResolutionKindresolvedMembers"
)

type UnusedKind int32

const (
	UnusedKindLocal UnusedKind = iota
	UnusedKindParameter
)

type AddUnusedDiagnostic func(containingNode Node, type_ UnusedKind, diagnostic DiagnosticWithLocation) void

var isNotOverloadAndNotAccessor = TODO /* TODO(CallExpression): and(isNotOverload, isNotAccessor) */
type DeclarationMeaning int32

const (
	DeclarationMeaningGetAccessor                DeclarationMeaning = 1
	DeclarationMeaningSetAccessor                DeclarationMeaning = 2
	DeclarationMeaningPropertyAssignment         DeclarationMeaning = 4
	DeclarationMeaningMethod                     DeclarationMeaning = 8
	DeclarationMeaningPrivateStatic              DeclarationMeaning = 16
	DeclarationMeaningGetOrSetAccessor           DeclarationMeaning = DeclarationMeaningGetAccessor | DeclarationMeaningSetAccessor
	DeclarationMeaningPropertyAssignmentOrMethod DeclarationMeaning = DeclarationMeaningPropertyAssignment | DeclarationMeaningMethod
)

type DeclarationSpaces int32

const (
	DeclarationSpacesNone            DeclarationSpaces = 0
	DeclarationSpacesExportValue     DeclarationSpaces = 1 << 0
	DeclarationSpacesExportType      DeclarationSpaces = 1 << 1
	DeclarationSpacesExportNamespace DeclarationSpaces = 1 << 2
)

type MinArgumentCountFlags int32

const (
	MinArgumentCountFlagsNone                    MinArgumentCountFlags = 0
	MinArgumentCountFlagsStrongArityForUntypedJS MinArgumentCountFlags = 1 << 0
	MinArgumentCountFlagsVoidIsNonOptional       MinArgumentCountFlags = 1 << 1
)

type IntrinsicTypeKind int32

const (
	IntrinsicTypeKindUppercase IntrinsicTypeKind = iota
	IntrinsicTypeKindLowercase
	IntrinsicTypeKindCapitalize
	IntrinsicTypeKindUncapitalize
	IntrinsicTypeKindNoInfer
)

var intrinsicTypeKinds ReadonlyMap[string, IntrinsicTypeKind] = TODO /* TODO(NewExpression): new Map(Object.entries({
    Uppercase: IntrinsicTypeKind.Uppercase,
    Lowercase: IntrinsicTypeKind.Lowercase,
    Capitalize: IntrinsicTypeKind.Capitalize,
    Uncapitalize: IntrinsicTypeKind.Uncapitalize,
    NoInfer: IntrinsicTypeKind.NoInfer,
})) */
var SymbolLinks = TODO /* TODO(ClassExpression): class implements SymbolLinks {
    declare _symbolLinksBrand: any;
} */
func NodeLinks(this NodeLinks) {
}
func getNodeId(node Node) number {
}
func getSymbolId(symbol Symbol) SymbolId {
}
func isInstantiatedModule(node ModuleDeclaration, preserveConstEnums bool) {
	moduleState := TODO /* TODO(CallExpression): getModuleInstanceState(node) */
}
func createTypeChecker(host TypeCheckerHost) TypeChecker {
	var deferredDiagnosticsCallbacks []TODO = /* TODO(ParenthesizedType): (() => void) */ TODO /* TODO(ArrayLiteralExpression): [] */
	addLazyDiagnostic := TODO                                                                  /* TODO(ArrowFunction): (arg: () => void) => {
	    deferredDiagnosticsCallbacks.push(arg);
	} */
	var cancellationToken *CancellationToken
	var scanner *Scanner
	Symbol := TODO    /* TODO(CallExpression): objectAllocator.getSymbolConstructor() */
	Type := TODO      /* TODO(CallExpression): objectAllocator.getTypeConstructor() */
	Signature := TODO /* TODO(CallExpression): objectAllocator.getSignatureConstructor() */
	typeCount := 0
	symbolCount := 0
	totalInstantiationCount := 0
	instantiationCount := 0
	instantiationDepth := 0
	inlineLevel := 0
	var currentNode *Node
	var varianceTypeParameter *TypeParameter
	isInferencePartiallyBlocked := TODO  /* TODO(FalseKeyword): false */
	emptySymbols := TODO                 /* TODO(CallExpression): createSymbolTable() */
	arrayVariances := TODO               /* TODO(ArrayLiteralExpression): [VarianceFlags.Covariant] */
	compilerOptions := TODO              /* TODO(CallExpression): host.getCompilerOptions() */
	languageVersion := TODO              /* TODO(CallExpression): getEmitScriptTarget(compilerOptions) */
	moduleKind := TODO                   /* TODO(CallExpression): getEmitModuleKind(compilerOptions) */
	legacyDecorators := TODO             /* TODO(PrefixUnaryExpression): !!compilerOptions.experimentalDecorators */
	useDefineForClassFields := TODO      /* TODO(CallExpression): getUseDefineForClassFields(compilerOptions) */
	emitStandardClassFields := TODO      /* TODO(CallExpression): getEmitStandardClassFields(compilerOptions) */
	allowSyntheticDefaultImports := TODO /* TODO(CallExpression): getAllowSyntheticDefaultImports(compilerOptions) */
	strictNullChecks := TODO             /* TODO(CallExpression): getStrictOptionValue(compilerOptions, "strictNullChecks") */
	strictFunctionTypes := TODO          /* TODO(CallExpression): getStrictOptionValue(compilerOptions, "strictFunctionTypes") */
	strictBindCallApply := TODO          /* TODO(CallExpression): getStrictOptionValue(compilerOptions, "strictBindCallApply") */
	strictPropertyInitialization := TODO /* TODO(CallExpression): getStrictOptionValue(compilerOptions, "strictPropertyInitialization") */
	strictBuiltinIteratorReturn := TODO  /* TODO(CallExpression): getStrictOptionValue(compilerOptions, "strictBuiltinIteratorReturn") */
	noImplicitAny := TODO                /* TODO(CallExpression): getStrictOptionValue(compilerOptions, "noImplicitAny") */
	noImplicitThis := TODO               /* TODO(CallExpression): getStrictOptionValue(compilerOptions, "noImplicitThis") */
	useUnknownInCatchVariables := TODO   /* TODO(CallExpression): getStrictOptionValue(compilerOptions, "useUnknownInCatchVariables") */
	exactOptionalPropertyTypes := TODO   /* TODO(PropertyAccessExpression): compilerOptions.exactOptionalPropertyTypes */
	noUncheckedSideEffectImports := TODO /* TODO(PrefixUnaryExpression): !!compilerOptions.noUncheckedSideEffectImports */
	checkBinaryExpression := TODO        /* TODO(CallExpression): createCheckBinaryExpression() */
	emitResolver := TODO                 /* TODO(CallExpression): createResolver() */
	nodeBuilder := TODO                  /* TODO(CallExpression): createNodeBuilder() */
	syntacticNodeBuilder := TODO         /* TODO(CallExpression): createSyntacticTypeNodeBuilder(compilerOptions, {
	    isEntityNameVisible,
	    isExpandoFunctionDeclaration,
	    getAllAccessorDeclarations: getAllAccessorDeclarationsForDeclaration,
	    requiresAddingImplicitUndefined,
	    isUndefinedIdentifierExpression(node: Identifier) {
	        Debug.assert(isExpressionNode(node));
	        return getSymbolAtLocation(node) === undefinedSymbol;
	    },
	    isDefinitelyReferenceToGlobalSymbolObject,
	}) */
	evaluate := TODO /* TODO(CallExpression): createEvaluator({
	    evaluateElementAccessExpression,
	    evaluateEntityNameExpression,
	}) */
	globals := TODO         /* TODO(CallExpression): createSymbolTable() */
	undefinedSymbol := TODO /* TODO(CallExpression): createSymbol(SymbolFlags.Property, "undefined" as __String) */
}
func isNotAccessor(declaration Declaration) bool {
}
func isNotOverload(declaration Declaration) bool {
}
func isDeclarationNameOrImportPropertyName(name Node) bool {
}

/*
	 TODO(ModuleDeclaration): namespace JsxNames {
	    export const JSX = "JSX" as __String;
	    export const IntrinsicElements = "IntrinsicElements" as __String;
	    export const ElementClass = "ElementClass" as __String;
	    export const ElementAttributesPropertyNameContainer = "ElementAttributesProperty" as __String; // TODO: Deprecate and remove support
	    export const ElementChildrenAttributeNameContainer = "ElementChildrenAttribute" as __String;
	    export const Element = "Element" as __String;
	    export const ElementType = "ElementType" as __String;
	    export const IntrinsicAttributes = "IntrinsicAttributes" as __String;
	    export const IntrinsicClassAttributes = "IntrinsicClassAttributes" as __String;
	    export const LibraryManagedAttributes = "LibraryManagedAttributes" as __String;
	}
*/
func getIterationTypesKeyFromIterationTypeKind(typeKind IterationTypeKind) {
}
func signatureHasRestParameter(s Signature) {
}
func signatureHasLiteralTypes(s Signature) {
}
func createBasicNodeBuilderModuleSpecifierResolutionHost(host TypeCheckerHost) ModuleSpecifierResolutionHost {
}

type NodeBuilderContext struct {
	enclosingDeclaration                  *Node
	enclosingFile                         *SourceFile
	flags                                 NodeBuilderFlags
	internalFlags                         InternalNodeBuilderFlags
	tracker                               SymbolTrackerImpl
	encounteredError                      bool
	reportedDiagnostic                    bool
	trackedSymbols                        TODO /* TODO(ArrayType): TrackedSymbol[] */
	visitedTypes                          *Set[number]
	symbolDepth                           *Map[string, number]
	inferTypeParameters                   TODO /* TODO(ArrayType): TypeParameter[] */
	approximateLength                     number
	truncating                            bool
	mustCreateTypeParameterSymbolList     bool
	typeParameterSymbolList               *Set[number]
	mustCreateTypeParametersNamesLookups  bool
	typeParameterNames                    *Map[TypeId, Identifier]
	typeParameterNamesByText              *Set[string]
	typeParameterNamesByTextNextNameCount *Map[string, number]
	usedSymbolNames                       *Set[string]
	remappedSymbolNames                   *Map[SymbolId, string]
	remappedSymbolReferences              *Map[SymbolId, Symbol]
	reverseMappedStack                    TODO /* TODO(ArrayType): ReverseMappedSymbol[] */
	bundled                               bool
	mapper                                *TypeMapper
}
type SymbolTrackerImpl struct {
	/* TODO(ClassDeclaration): class SymbolTrackerImpl implements SymbolTracker {
	    moduleResolverHost: ModuleSpecifierResolutionHost & { getCommonSourceDirectory(): string; } | undefined = undefined;
	    context: NodeBuilderContext;

	    readonly inner: SymbolTracker | undefined = undefined;
	    readonly canTrackSymbol: boolean;
	    disableTrackSymbol = false;

	    constructor(context: NodeBuilderContext, tracker: SymbolTracker | undefined, moduleResolverHost: ModuleSpecifierResolutionHost & { getCommonSourceDirectory(): string; } | undefined) {
	        while (tracker instanceof SymbolTrackerImpl) {
	            tracker = tracker.inner;
	        }

	        this.inner = tracker;
	        this.moduleResolverHost = moduleResolverHost;
	        this.context = context;
	        this.canTrackSymbol = !!this.inner?.trackSymbol;
	    }

	    trackSymbol(symbol: Symbol, enclosingDeclaration: Node | undefined, meaning: SymbolFlags): boolean {
	        if (this.inner?.trackSymbol && !this.disableTrackSymbol) {
	            if (this.inner.trackSymbol(symbol, enclosingDeclaration, meaning)) {
	                this.onDiagnosticReported();
	                return true;
	            }
	            // Skip recording type parameters as they dont contribute to late painted statements
	            if (!(symbol.flags & SymbolFlags.TypeParameter)) (this.context.trackedSymbols ??= []).push([symbol, enclosingDeclaration, meaning]);
	        }
	        return false;
	    }

	    reportInaccessibleThisError(): void {
	        if (this.inner?.reportInaccessibleThisError) {
	            this.onDiagnosticReported();
	            this.inner.reportInaccessibleThisError();
	        }
	    }

	    reportPrivateInBaseOfClassExpression(propertyName: string): void {
	        if (this.inner?.reportPrivateInBaseOfClassExpression) {
	            this.onDiagnosticReported();
	            this.inner.reportPrivateInBaseOfClassExpression(propertyName);
	        }
	    }

	    reportInaccessibleUniqueSymbolError(): void {
	        if (this.inner?.reportInaccessibleUniqueSymbolError) {
	            this.onDiagnosticReported();
	            this.inner.reportInaccessibleUniqueSymbolError();
	        }
	    }

	    reportCyclicStructureError(): void {
	        if (this.inner?.reportCyclicStructureError) {
	            this.onDiagnosticReported();
	            this.inner.reportCyclicStructureError();
	        }
	    }

	    reportLikelyUnsafeImportRequiredError(specifier: string): void {
	        if (this.inner?.reportLikelyUnsafeImportRequiredError) {
	            this.onDiagnosticReported();
	            this.inner.reportLikelyUnsafeImportRequiredError(specifier);
	        }
	    }

	    reportTruncationError(): void {
	        if (this.inner?.reportTruncationError) {
	            this.onDiagnosticReported();
	            this.inner.reportTruncationError();
	        }
	    }

	    reportNonlocalAugmentation(containingFile: SourceFile, parentSymbol: Symbol, augmentingSymbol: Symbol): void {
	        if (this.inner?.reportNonlocalAugmentation) {
	            this.onDiagnosticReported();
	            this.inner.reportNonlocalAugmentation(containingFile, parentSymbol, augmentingSymbol);
	        }
	    }

	    reportNonSerializableProperty(propertyName: string): void {
	        if (this.inner?.reportNonSerializableProperty) {
	            this.onDiagnosticReported();
	            this.inner.reportNonSerializableProperty(propertyName);
	        }
	    }

	    private onDiagnosticReported() {
	        this.context.reportedDiagnostic = true;
	    }

	    reportInferenceFallback(node: Node): void {
	        if (this.inner?.reportInferenceFallback) {
	            this.inner.reportInferenceFallback(node);
	        }
	    }
	} */
}